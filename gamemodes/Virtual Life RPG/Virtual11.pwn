#include <a_samp>

//Cores
#define COLOR_GOLD      			0xF7D931AA
#define COLOR_BROWN                 0x8B4513AA
#define COLOR_LIGHT_BROWN           0x81694CAA
#define COLOR_WHEAT                 0xF5DEB3AA
#define COLOR_BLUE            		0xA9CDE6AA
#define COLOR_BLACK                 0x050000AA
#define COLOR_TURQUOISE       		0x00CED1AA
#define COLOR_GRAD	 		  		0xB4B5B7AA
#define COLOR_AQUA_GREEN            0x20B2AAAA
#define COLOR_CENTRAL               0x00C7FFAA
#define COLOR_ORANGE 				0xFF9900AA
#define COLOR_PURPLE 				0x800080AA
#define COLOR_SKY_BLUE              0x87CEFAAA
#define COLOR_BLUE_PLUS          	0x4169FFAA
#define COLOR_LIGHT_GREEN      		0x90FAACAA
#define COLOR_DARK_GREEN            0x336600AA
#define COLOR_UNLOGGED         		0xAAAAAAAA
#define COLOR_PALHA            		0xF0E68CAA
#define COLOR_PINK             		0xFFC0CBAA
#define COLOR_CLEAR_PINK            0xFF91ECAA
#define COLOR_GREEN 				0x00FF00AA
#define COLOR_EMERGENCIA       		0xD06050AA
#define COLOR_RED              		0xAA3333AA
#define COLOR_LIGHT_RED        		0xFF0000AA
#define COLOR_YELLOW           		0xFFFF00AA
#define COLOR_WHITE            		0xFFFFFFAA
#define COLOR_GRAY             		0xE1E2E7AA
#define COLOR_LIGHT_YELLOW          0xFFFFB3AA
#define COLOR_ADMIN_MESSAGE         0xFF4500AA
#define COLOR_AVISO                 0xFFFFFFAA
#define COLOR_TITULO_AVISO          0xF0E68CAA
#define COLOR_INFO_AVISO            0xA9CDE6AA
#define COLOR_TUTORIAL_TITULO       0xFF0000AA
#define COLOR_TUTORIAL_MENSAGEM     0xFFFFFFAA
#define COLOR_TUTORIAL_AVISO        0xA9CDE6AA
#define COLOR_WANTED_LEVEL_1        0xE9967AAA
#define COLOR_WANTED_LEVEL_2        0xF08080AA
#define COLOR_WANTED_LEVEL_3        0xFF7F50AA
#define COLOR_WANTED_LEVEL_4        0xFF6347AA
#define COLOR_WANTED_LEVEL_5        0xFF4500AA
#define COLOR_WANTED_LEVEL_6        0xFF0000AA
#define COLOR_DESEMPREGADO     		0x666666AA
#define COLOR_BARMAN           		0x8B4513AA
#define COLOR_MOTORISTA_DE_ONIBUS 	0xE2E2E2AA
#define COLOR_PESCADOR   	  		0xFFA07AAA
#define COLOR_ENTREGADOR_PIZZA 		0xF0E68CAA
#define COLOR_TAXISTA          		0xFFFFB3AA
#define COLOR_MOTO_TAXISTA     		0xFFC000AA
#define COLOR_MOTORISTA_PARTICULAR 	0xFFE4C4AA
#define COLOR_LIXEIRO          		0xA9CDE6AA
#define COLOR_PEDREIRA         		0xE6E6FAAA
#define COLOR_ASSASSINO        		0xA52A2AAA
#define COLOR_SEGURANÇA        		0x83BFBFAA
#define COLOR_JORNALISTA      	 	0x89FDF3AA
#define COLOR_AGRICULTOR      		0xFFE4C4AA
#define COLOR_PROSTITUTA            0xFF00FFAA
#define COLOR_TRAFICANTE       		0x027A82AA
#define COLOR_CAMINHONEIRO    		0xE4E4E4AA
#define COLOR_PARAMEDICO       		0xF4EED7AA
#define COLOR_COP_MILITAR      		0x4F94CDAA
#define COLOR_VENDEDOR_DE_ARMAS    	0x00BFFFAA
#define COLOR_MECANICO              0xBCD2EEAA
#define COLOR_FRENTISTA          	0xEEE9E9AA
#define COLOR_COP_RODOVIARIO   		0x87CEFAAA
#define COLOR_CONTRABANDISTA   		0xFF6347AA
#define COLOR_ASSALTANTE      		0xFFFFB3AA
#define COLOR_INSTRUTOR	       		0xCC0000AA
#define COLOR_ADVOGADO         		0xFFF8DCAA
#define COLOR_COP_SWAT         		0x00C7FFAA
#define COLOR_VENDEDOR_DE_CARROS  	0xBBFFFFAA
#define COLOR_CORRETOR         		0xBCEE68AA
#define COLOR_JUIZ             		0x7FFF00AA
#define COLOR_DELEGADO         		0x81694CAA
#define COLOR_POLICIA               0x00C7FF00
#define COLOR_LADRAO                0x05000000
//Profissões
#define DESEMPREGADO          		1
#define BARMAN                		2
#define MOTORISTA_DE_ONIBUS     	3
#define PESCADOR                	4
#define ENTREGADOR_PIZZA            5
#define TAXISTA                 	6
#define MOTO_TAXISTA               	7
#define MOTORISTA_PARTICULAR        8
#define LIXEIRO                     9
#define PEDREIRA                    10
#define ASSASSINO                   11
#define SEGURANÇA                   12
#define JORNALISTA            		13
#define AGRICULTOR                  14
#define PROSTITUTA                  15
#define TRAFICANTE            		16
#define CAMINHONEIRO                17
#define PARAMEDICO                  18
#define COP_MILITAR                 19
#define VENDEDOR_DE_ARMAS           20
#define MECANICO                    21
#define FRENTISTA                   22
#define COP_RODOVIARIO        		23
#define CONTRABANDISTA        		24
#define ASSALTANTE                  25
#define INSTRUTOR                   26
#define ADVOGADO                    27
#define COP_SWAT                    28
#define VENDEDOR_DE_CARROS          29
#define CORRETOR                    30
#define JUIZ                        31
#define DELEGADO                    32
//Veículos
#define AddPlayerVehicle(%1,%2,%3,%4,%5,%6,%7,%8)			CreateVehicle(%1,%2,%3,%4,%5,%6,%7,%8)
//dcmd
#define dcmd(%1,%2,%3) if ((strcmp((%3)[1], #%1, true, (%2)) == 0) && ((((%3)[(%2) + 1] == 0) && (dcmd_%1(playerid, "")))||(((%3)[(%2) + 1] == 32) && (dcmd_%1(playerid, (%3)[(%2) + 2]))))) return 1
//Para nunca mais crashar o servidor em caso de caracteres especiais
#define fixchars(%1) for(new charfixloop=0;charfixloop<strlen(%1);charfixloop++)if(%1[charfixloop]<0)%1[charfixloop]+=256
//Cores
#define MAX_COLORS (127 + sizeof HiddenColors)
//Submissões
#define NONE 						0
#define SORVETERIA 					1
#define DROGAS 						2
#define DJ 							3
#define CIMENTO                     4
#define IML                         5
#define POSTE                       6
#define MAX_SUBMISSIONS 			7
//Abastecimentos de bebidas
#define ARestaurante                0
#define ABoate                      1
#define ABar                        2
#define ABalada                     3
#define MAX_ABASTECIMENTOS          4
//Posições inválidas
#define INVALID_POS_X 				3035.1768
#define INVALID_POS_Y 				-3033.6375
#define INVALID_POS_Z 				-0.2664
//Checkpoints
#define NONE 						0
#define COLETANDO_LATAS				1
#define LAVANDO_LIMOSINE 			2
#define REVISANDO_LIMOSINE 			3
#define DEIXANDO_LIMOSINE			4
#define CARREGANDO_COMBUSTIVEL 		5
#define TRANSPORTANDO_ROUPAS 		6
#define DESTINO_GPS 				7
#define BALCAO_BAR 					8
#define CONTRABANDO_INICIO			9
#define CONTRABANDO_NAVIO 			10
#define CONTRABANDO_NAVIO2 			11
#define CONTRABANDO_RAMPA 			12
#define CONTRABANDO_FINAL 			13
#define CONTRABANDO_CARRO1 			14
#define CONTRABANDO_CARRO2 			15
#define CONTRABANDO_CARRO3 			16
#define CONTRABANDO_ARMA1 			17
#define CONTRABANDO_ARMA2 			18
#define CONTRABANDO_ARMA3 			19
#define CONTRABANDO_DROGA 			20
#define CONTRABANDO_DROGA2 			21
#define CONTRABANDO_DROGA3 			22
#define CORRETORA_PROPRIEDADES 		23
#define RESTAURANTE 				24
#define LOJA_MUNICOES 				25
#define AUTO_ESCOLA_RUA				26
#define CAMA 						27
#define TRIADS  					28
#define ENTREGANDO_RICK             29
#define TELHADO 					30
#define SAINDO_TELHADO 				31
#define AEROPORTO					32
#define AGENCIA 					33
#define CONVERSA_MOTORISTA 			34
#define PEGAR_PASSAGEM 				35
#define ENTREGA_SF 					36
#define CARREGAMENTO 				37
#define PERSEGUINDO					38
#define ENTREGANDO_DROGAS           39
#define ENTREGANDO_SORVETE 			40
#define ENTREGANDO_SORVETE2 		41
#define DERBY 						42
#define RASTREAMENTO 				43
#define OBRAS 						44
#define ENTREGA_CTC_CAR             45
#define HOSPITAL 					46
#define	CDROGAS 					47
#define CASA_JOGADOR                48
#define ARMAS                       49
#define CATIVEIRO                   50
#define CARDAPIO                    51
#define TESTE_AUTO_ESCOLA_BOATE     52
#define	TAXI_SINAL_RICK   			53
#define	ENTRANDO_TAXI_RICK 			54
#define ESPERANDO_CAMINHONEIRO      55
#define PELADO_PEGANDO_ROUPA        56
#define PELADO_PEGANDO_TAXI         57
#define	DENUNCIA_POLICIAL           58
#define EMERGENCIA                  59
#define TAXISTA_AUTOMATICO 			60
#define CONSERTANDO_POSTE           61
#define CONSERTANDO_POSTE2          62
#define IML_HOSPITAL                63
#define CEMITERIO                   64
#define CIMENTO_ENTREGA             65
#define CIMENTO_ENTREGA2            66
#define REBOCANDO                   67
#define TRAFICANDO_ARMAS            68
#define PEGANDO_DROGAS              69
#define COLOCANDO_DROGAS            70
#define ENTREGANDO_PIZZA            71
#define COLETANDO_LIXO              72
#define TRANSPORTANDO_DROGAS        73
#define AGENCIA_EMPREGOS            74
#define SEGURADORA                  75
#define DONUTS                      76
//Race Checkpoints
#define RNONE                       0
#define RACE1                       1
#define RACE1_END                   2
#define ENTREGANDO_PRISIONEIRO1     3
#define ENTREGANDO_PRISIONEIRO2     4
#define ENTREGANDO_PRISIONEIRO3     5
#define RASTREANDO_CASA             6
#define SERVICO                     7
#define PEDIDO                      8
#define PEGANDO_ENCOMENDAS          9
#define TERMINAL                    10
#define DEIXARARMA                  11
#define DEIXARDROGA                 12
#define CPTESTEAEREO                13
//Extensões
#define EXTENSION_NONE 				0
#define EXTENSION_CELULAR 			1
#define EXTENSION_TELEFONE 			2
#define EXTENSION_ORELHAO   		3
//Convites
#define ACEITAR_NADA                0
#define ACEITAR_CONSERTO            1
#define ACEITAR_VEICULO             2
#define ACEITAR_CASA                3
#define ACEITAR_MORADIA             4
#define ACEITAR_CONVITE             5
#define ACEITAR_CONTRATO            6
#define ACEITAR_SOCIO               7
#define ACEITAR_NEGOCIO             8
#define ACEITAR_SCONTRATO           9
#define ACEITAR_PIZZA               10
#define ACEITAR_BEBIDA              11
#define ACEITAR_DROGA               12
#define ACEITAR_SEXO                13
#define ACEITAR_GANGUE              14
#define ACEITAR_TESTE               15
#define ACEITAR_TESTEAUTO           16
#define ACEITAR_HORAEXTRA           17
#define ACEITAR_ARMA           		18
#define ACEITAR_TESTEAEREO          19
#define ACEITAR_LIMPAR              20
//Tuning
#define SPOILERS                    0
#define ROOFSCOOPS                  1
#define HOODS                       2
#define SIDESKIRTS                  3
#define NITROS                      4
#define LAMPS                       5
#define EXHAUSTS                    6
#define WHEELS                      7
#define STEREO                      8
#define HYDRAULICS                  9
#define BULLBARS                    10
#define REARBULLBARS                11
#define FRONTBULLBARS               12
#define FRONTBUMPERS                13
#define REARBUMPERS                 14
#define VENTS                     	15
#define FRONTSIGN                   16
#define PAINTJOBS                   17
//Areas
#define AreaNone        			0
#define AreaCopPL       			1
#define AreaAero        			2
#define AreaEsconderijo         	3
#define AreaEntretenimentos     	4
#define AreaMorro               	5
#define AreaCOEVL               	6
#define AreaECTVL               	7
#define AreaCofre               	8
#define AreaLoteria             	9
#define AreaCustomizacao        	10
#define AreaDesmanche           	11
#define AreaDelegacia           	12
#define AreaHotel               	13
#define AreaDeleg               	14
#define AreaHosp                	15
#define AreaChuveiro            	16
#define AreaSorveteria          	17
#define AreaLocadora            	18
#define AreaBar                     19
#define AreaLCavalos            	20
#define AreaBalada              	21
#define AreaCemiterio           	22
#define AreaCimento             	23
#define AreaEstacao             	24
#define AreaChaveiro            	25
#define AreaBanco               	26
#define AreaAutoEscola          	27
#define AreaCreditos            	28
#define AreaLixao                   29
#define AreaBalizaHabilitada    	30
#define AreaZigHabilitada       	31
#define Area180Habilitada       	32
#define AreaMotoHabilitada      	33
#define AreaPesca               	34
#define AreaCoopPesca           	35
#define AreaCarga               	36
#define AreaFazenda             	37
#define AreaCoopFazenda         	38
#define AreaForte                   39
#define AreaPosto               	40
#define AreaStrip               	41
#define AreaLeite                   42
#define AreaConstrucao              43
#define AreaPedreiraCarga           44
#define AreaPizzaria                45
#define AreaVictim                  46
#define AreaSubUrban                47
#define AreaBinco                   48
#define AreaProLaps                 49
#define AreaDidierSachs             50
#define AreaDelegaciaFora           51
//Skins
#define Null 						0
#define Binco 						1
#define SubUrban 					2
#define ProLaps 					3
#define Victim 						4
#define DidierSachs 				5
//Definicoes constantes globais
#define MAX_SLOTS                   40
#define MAX_CASAS                   300
#define MAX_CELL               		500
#define MAX_HOTEL_PLAYERS           20
#define MAX_SEGURANCAS              20
#define MAX_GANGUE_PLAYERS         	20
#define MAX_GANGUES                 20
#define MAX_JORNAIS                 10
#define MAX_HOTEIS                  5
#define MAX_PLAYER_VEHICLES         10

forward RoubandoCarroForte(playerid, vehicleid);
forward EncerrarAluguel(playerid);
forward CheckVehicle(playerid, vehicleid);
forward AssaltoGang(playerid, loja);
forward LimparTempoAssalto(playerid);
forward FomeBatendo();
forward UpdateTuneCamera();
forward DeathEffect(playerid, count);
forward Velocimetro();
forward Relogio();
forward TempoeTimers();
forward AcaoEspecial(playerid,actionid);
forward ReportarPoliciaDenovo(playerid);
forward ChecarDenovo(playerid);
forward DestruirCone(objectid);
forward RadarNick();
forward MoneyCheck();
forward AntiWeaponHack();
forward AvancoLigacao(plcaller,plcalled);
forward Disparar(vehicleid);
forward GangCombat(zoneid, gangattackid, gangdefenseid, attackcount, defensecount);
forward ZerarRecebendoArma(playerid);
forward HealthCheck();
forward SetPlayerServerHealth(playerid);
forward FimMandato(playerid);
forward Areas();
forward MostrarMensagemArea(playerid);
forward OlhandoPelaJanela(playerid, Float:Z);
forward EnviandoAnuncio(playerid);
forward RastreandoJogador2(playerid,plid);
forward Filmando(playerid);
forward Filmando2(playerid);
forward ConsertandoCarro(playerid,vehicleid);
forward DarSpawn(veiculoid);
forward Blind(playerid, count);
forward FlashEffect(Float:X, Float:Y, Float:Z);
forward CanAttackZone(playerid, zoneid);
forward DroppingRocket(times, Float:X, Float:Y, Float:Z);
forward ExplodeBombVehicle(count, vehicleid);
forward ExplodeBomb(count, Float:X, Float:Y, Float:Z);
forward UpdateZones();
forward GetPlayerZone(playerid);
forward CarroBebado(playerid);
forward CarroTonto(playerid);
forward DPVoff(playerid);
forward VisionTimer(playerid, type);
forward Bebado(playerid);
forward SetPlayerControl(playerid, control);
forward ShowTexts(playerid);
forward CanPayAgain(playerid);
forward CarregarCarros();
forward ZerarRecebendoDinheiro(playerid);
forward BusWaiting(playerid);
forward ContagemTeleporte(playerid, numero);
forward PegandoEquipamento(playerid);
forward ZerarRecebendoVida(playerid);
forward RespawnVehicle(vehicleid);
forward ZerarCrash(playerid);
forward DeletePickup(pickupid);
forward CheckDrogas(playerid);
forward Historia(playerid);
forward Subway();
forward Viciado(playerid);
forward TirarMetro(playerid);
forward SavingPlayers();
forward Abastecimentos();
forward GanharRespeito();
forward DriveThru();
forward DriveThruLivre(playerid);
forward SubMissoes();
forward FecharServidor();
forward ComecarCameras(playerid);
forward SetPlayerCameraClass(playerid,cameraid);
forward VehicleDamnification();
forward LevarJogador(playerid,plid);
forward AddPlayerMoney(playerid, valor, reason);
forward ResetPlayerMoneyEx(playerid);
forward SavePCVPJGO();
forward TransferCarPatio(vehicleid,playerid);
forward CtDead(playerid);
forward GostariaTaxi(playerid);
forward ZerarOferecerTaxi(playerid);
forward LeisTerrestre(playerid);
forward CancelarAcordo(playerid);
forward AreasAutoTestes(playerid);
forward AutoTeste(playerid);
forward TempoRuaTeste(playerid);
forward VerArmas(playerid,plid);
forward TirarSkinLoja(playerid);
forward FimHoraExtra(playerid);
forward CancelarHoraExtra(playerid);
forward AreasTestes(playerid,plid);
forward IniciarTesteLeis(playerid,plid);
forward LeisLidas(playerid,plid);
forward DesfazerAcordo(playerid,plid);
forward AvancoDirecao(playerid,plid);
forward TempoAutoRua(playerid,plid);
forward TesteAereo(playerid, plid);
forward LeisAereas(playerid, plid);
forward LimparAnim(playerid);
forward KidnappingProcess2(playerid,plid);
forward KidnappingProcess(playerid,plid);
forward KidnappingFailed(playerid,plid);
forward LevandoCativeiro(playerid,plid);
forward LigandoPolicia(playerid,plid);
forward Crimes(playerid);
forward AcusacaoCrime(playerid, reportado[], vitima[] , motivo[], estrelas, advogado, fianca, checkpos);
forward ContrabandoNavio();
forward ContrabandoSpawnCar(playerid);
forward AnteriorCanal(playerid);
forward ProximoCanal(playerid);
forward SetCar(modelid, Float:X, Float:Y, Float:Z, Float:ang, Cor1, Cor2, e);
forward set(dest[],source[]);
forward PrendendoJogador(playerid,plid);
forward HistPri1(playerid,plid);
forward HistPri2(playerid,plid);
forward HistPri3(playerid,plid);
forward ConsiderePreso(playerid,plid);
forward BaladaVerificarContaLuz();
forward InstalarAlarmeBasico(playerid);
forward InstalarAlarmeAvancado(playerid);
forward RetirarTelefone(playerid);
forward RetirarComputador(playerid);
forward RetirarTV(playerid);
forward RetirarRadio(playerid);
forward RetirarFogao(playerid);
forward RetirarGeladeira(playerid);
forward ColocarTV(playerid);
forward ColocarRadio(playerid);
forward ColocarFogao(playerid);
forward ColocarGeladeira(playerid);
forward ColocarTelefone(playerid);
forward ColocarComputador(playerid);
forward ComprarTV(playerid);
forward ComprarRadio(playerid);
forward ComprarFogao(playerid);
forward ComprarGeladeira(playerid);
forward ComprarTelefone(playerid);
forward ComprarComputador(playerid);
forward ComprarAlarmeBasico(playerid);
forward ComprarAlarmeAvancado(playerid);
forward RetirarCofre(playerid);
forward RetirarGuardaRoupas(playerid);
forward ColocarGuardaRoupas(playerid);
forward ColocarCofre(playerid);
forward ComprarGuardaRoupas(playerid);
forward ComprarCofre(playerid);
forward TaxiCorrida();
forward CancelarMulta(playerid);
forward NaoAceitou(playerid,plid);
forward BIP(playerid);
forward TelefoneBIP(playerid);
forward ZerarMultou(playerid);
forward CaixaMensagem(playerid);
forward ZerarInformeiPos(playerid);
forward RecusarDroga(playerid, plid);
forward AnunciarPropeComu();
forward Internando(playerid);
forward TratarDoenca(playerid, plid);
forward DoencaPredomina();
forward EfeitoDoenca(playerid);
forward PassarDoenca(playerid);
forward Contaminar(playerid, plid);
forward TomarSorvete(playerid);
forward Cozinhando(playerid,tmp[]);
forward ComerSobremesa(playerid);
forward ComerComida(playerid);
forward TomarBebida(playerid);
forward Cobrar(playerid);
forward IniciandoSex(playerid,plid);
forward IniciandoSex2(playerid,plid);
forward IniciandoSex3(playerid,plid);
forward IniciandoSex4(playerid,plid);
forward IniciandoSex5(playerid,plid);
forward IniciandoSex6(playerid,plid);
forward AnimTransa1(playerid,plid);
forward AnimTransa2(playerid,plid);
forward AnimTransa3(playerid,plid);
forward AnimTransa4(playerid,plid);
forward AnimTransa5(playerid,plid);
forward AnimTransa6(playerid,plid);
forward Intermediaria2();
forward Intermediaria3();
forward Intermediaria4();
forward Intermediaria5();
forward Strip(playerid);
forward Strip3(playerid);
forward Strip4(playerid);
forward Chegou1(playerid);
forward Chegou2(playerid);
forward Chegou3(playerid);
forward PararWeather(playerid);
forward OpenGate(gateid);
forward CloseGate(gateid);
forward OpenPortao(objectid);
forward ClosePortao(objectid);
forward VoteKick();
forward CarregarCarro(vehicleid);
forward ApplyVehicleToInvalidPos(vehicleid);
forward StartLogin(playerid);
forward AbastecerArma(playerid);
forward EndPL();
forward RetirarPL(playerid);
forward SetLadraoPL(playerid);
forward SetPolicialPL(playerid);
forward ZerarAvisoHorario();
forward ZerarCasaVendida(playerid);
forward ZerarJogadorMultado(playerid);
forward LogarPlayer(playerid);
forward GetClosestHospital(playerid);
forward ConfiscarArmas(playerid);
forward AvisoTempoRestante(playerid);
forward CancelarContinuacaoPos(playerid);
forward FazendoStripTease(playerid);
forward CheckStripTeaseKey(playerid);
forward SaveCarPos(vehicleid,Float:X,Float:Y,Float:Z,Float:ang);
forward FimDJ(playerid);
forward MensagemRegistro(playerid);
forward ApplyAnimCrack(playerid);
forward ZerarAcabouMorrer(playerid);
forward DesmancheDoencaGarganBebi();
forward TirarCombustivel();
forward TempoJogo();
forward NaoUsarCard(playerid,playerid2);
forward CarregandoRoupas(playerid);
forward TerminarCarregamento(playerid);
forward TerminarCancelamento(playerid);
forward ChecandoContrabandoCar(playerid);
forward Cancelar(playerid);
forward ConsertarVeiculo(playerid, vehicleid, Float:X, Float:Y, Float:Z, Float:ang);
forward ArrumandoVeiculo(playerid, vehicleid, Float:X, Float:Y, Float:Z, Float:ang);
forward ColocandoPlaca(playerid,vehicleid,Float:X,Float:Y,Float:Z,Float:ang);
forward Roubo(playerid);
forward GatesCoordChecker();
forward DesligarTV(playerid);
forward LimoLimpa(vehicleid);
forward LavandoLimosine(playerid);
forward ZerarAcabouAssistir(playerid);
forward AplicarGasosa(playerid,vehicleid,amount);
forward ChecandoLimo(playerid);
forward ChecagemMotor(vehicleid);
forward ZerarEmergencia(playerid,plid);
forward ContandoDerby();
forward ContagemD();
forward IniciarDerby();
forward VendoVencedor();
forward ValendoDerby();
forward LiberadoParaPorte(playerid);
forward TirandoPorte(playerid);
forward TirandoPorte2(playerid);
forward Pescando(playerid);
forward Fazenda(playerid);
forward ChecandoDrogas(playerid);
forward CarregamentoGas(playerid);
forward CarregamentoGeral(playerid);
forward PassandoCamuflagem(playerid);
forward SubmissoesCarros(playerid);
forward LeiteA(playerid);
forward VacaCheia(playerid);
forward GetPlayerDistanceToPoint(playerid,Float:x,Float:y);
forward DestruirPickupGrana(playerid,pickup);
forward TratamentoDrogas(playerid,plid);
forward TerminarAbrirPortaoAuto();
forward FecharPortaoAutoEscola();
forward IsStringAName(string[]);
forward TempoAlugando(playerid);
forward Prostituir(playerid);
forward SemCamisinha(playerid);
forward JaEra(playerid,plid);
forward ZerarResultadoMostrado();
forward ZerarSalarioEntregue();
forward ZerarAnuncioPrevisao();
forward DrogasPlant(playerid);
forward LocalAutoEscola(playerid);
forward ClearTutWait(playerid);
forward ExecTutorial(playerid);
forward minrand(min, max);
forward Assalto(playerid);
forward AssaltandoBanco(playerid);
forward ApostasdeCavalos();
forward LoteriaComeco();
forward FimCTC();
forward ComecaEm60();
forward FimInscCTC();
forward CancelarDerby(playerid);

//Configurações do Virtual Life RPG
static const MAX_VEHICLE_PRICE          		=       300000;
static const APPROXIMATE_CHAT           		=       1;
static const ENABLE_GLOBAL_CHAT         		=       1;
static const TIMER_PL                   		=       10;
static const SUBWAY_PRICE               		=       200;
static const Float:MAX_HEALTH                   =       30.0;
static const Float:MAX_ARMOUR                   =       50.0;
static const Float:MEGA_FONE_RADIUS             =       20.0;

stock operator%(Float:oper1, Float:oper2)
{
	return floatround(oper1, floatround_floor) % floatround(oper2, floatround_floor);
}
stock operator%(oper1, Float:oper2)
{
	return oper1 % floatround(oper2, floatround_floor);
}
stock operator%(Float:oper1, oper2)
{
	return floatround(oper1, floatround_floor) % oper2;
}

new GangColors[] = {
	0x00000000, 0x00CED155, 0x00000055, 0x20B2AA55, 0x0099FF55,
	0xFF990055, 0x80008055, 0x33660055, 0xF0E68C55, 0x52D94E55,
	0xD0605055, 0xAA333355, 0xFF000055, 0xFFFF0055, 0xFFFFFF55,
	0xAFAFAF55, 0xFFFFB355, 0x80808055, 0xB4E4FF55, 0xE4E4E455,
	0xE9967A55, 0x89FDF355, 0xF4EED755, 0x18585E55, 0x7FFF0055,
	0xA9CDE655, 0x83BFBF55, 0xFF634755, 0xFFE4C455, 0x8DFFD355,
	0x67759455, 0xFF6A6A55
};
//PLAYERS
enum PlayerStats {
	Senha[128],
	GangueNome[128],
	TituloJornal[128],
	Data[128],
	DataRegistro[128],
	DataUltima[128],
	MinutosConectado,
	HorasConectado,
	DiasConectado,
	ContinuarPos,
	GangueCargo,
	Jornal,
	Prof,
	LastProf,
	XLRank,
	RankProf,
	SalarioProf,
	GanhouLevel,
	Cracha,
	Banco,
	Skin,
	Fome,
	Respeito,
	Galao,
	Divida,
	Emprestimo,
	HistoriaFeita,
	XL,
	Xpoints,
	Culinaria,
	Preso,
	AmountBusted,
	LastBustedReason,
	HorasPreso,
	Fianca,
	MultaPublica,
	Passaporte,
	Porte,
	HabNautica,
	HabAerea,
	HabTerrestre,
	Phone,
	Agenda,
	PhoneNumb,
	CreditosCell,
	CaixaPostal,
	Cavalo,
	ValorAposta,
	NumeroLoteria1,
	NumeroLoteria2,
	Doenca,
	Seguro,
	Pesca,
	Latas,
	Iscas,
	LatasNecessarias,
	Camisinha,
	Alcool,
	Morrendo,
	DosesMaconha,
	DosesHeroina,
	DosesCocaina,
	ChaveMestra,
	VirtualCard,
	CofreCell,
	Vacina,
	VacinaDuracao,
	NSegurancas,
	JaContratado,
	Matou,
	Morreu,
	ClockBomb,
	Camuflagem,
	Flash,
	Rocket,
	Propriedade,
	AumentoPropriedade,
	VendendoCasas,
	Banido,
	MSGBIP[128],
	DonoCasaAlugada[MAX_PLAYER_NAME],
	LocouCasa,
	DiasDeAluguel,
	Peixe,
	VicioDrogas,
	HistoriaSelecionada,
	VCell,
	GCell,
	ValorCabeca,
	Sanduiche,
	Frango,
	Salada,
	Pizza,
	Refrigerante,
	Suco,
	Carne,
	Strogonoff,
	Camarao,
	Linguica,
	ConquistouTerritorio,
	SorveteChocolate,
	SorveteNapolitano,
	SorveteFlocos,
	Remedios,
	DosesRemed,
	ConvidadoCasa,
	DonoCasaConvidada[MAX_PLAYER_NAME],
	QR,
	ABasico,
	AAvancado,
	PFogao,
	PTV,
	PRadio,
	PGeladeira,
	PTelefoneNumb,
	PInvestimento,
	PComputador,
	PCofre,
	PGuardaRoupas,
	Hotel,
	BancoTrabalho,
	BancoResidencia,
	BancoEmpresa,
	CartaoTelefonico,
	LastInterior,
	Float:Vida,
	Float:Colete,
	Float:SpawnPosX,
	Float:SpawnPosY,
	Float:SpawnPosZ,
	Float:SpawnPosAng,
	Float:LastPosX,
	Float:LastPosY,
	Float:LastPosZ
}
new TimerMoney[MAX_SLOTS];
new PlayerMoney[MAX_SLOTS] = 0;
new Ashhole[MAX_SLOTS] = 0;
new PlayerOldMoney[MAX_SLOTS] = 0;
new ReceivingMoney[MAX_SLOTS] = 0;
new GetWeapons[MAX_SLOTS][13][2];
new GetSegurancas[MAX_SLOTS][MAX_SEGURANCAS][MAX_PLAYER_NAME];
new GetSegurancasValor[MAX_SLOTS][MAX_SEGURANCAS];
new pStats[MAX_SLOTS][PlayerStats];
//VEÍCULOS
enum VehicleStats {
	VDono[MAX_PLAYER_NAME],
	VPlaca[9],
	VChave[MAX_PLAYER_NAME],
	VEscondido,
	VAlarme,
	VRadio,
	VTravas,
	Modelo,
	Combustivel,
	Confiscado,
	Dividas,
	Vendendo,
	PrecoVenda,
	VSeguro,
	Color1,
	Color2,
	Trancado,
	Fume,
	Float:CarPosX,
	Float:CarPosY,
	Float:CarPosZ,
	Float:CarPosAng,
	Tuning[17],
	Paintjob,
	Airbag
}
new vStats[MAX_VEHICLES][VehicleStats];
//CASAS
enum PickupStats {
	PickupDono[MAX_PLAYER_NAME],
	PickupValor,
	SemTelefone,
	ContaTelefone,
	SemLuz,
	ContaLuz,
	TV,
	Radio,
	Geladeira,
	Fogao,
	Computador,
	Alarme,
	Cofre,
	GuardaRoupas,
	CofreCelular,
	TelefoneNumb,
	MaconhaCofre,
	HeroinaCofre,
	CocainaCofre,
	DinheiroCofre,
	SkinRoupa[4],
	CorretorVenda[MAX_PLAYER_NAME],
	Vendendo,
	AlugandoCasa,
	DiasCasaAluguel,
	ValorCasaAluguel,
	SeguroDaCasa,
	Float:pX,
	Float:pY,
	Float:pZ,
	SenhaCofre[128],
	ArmasCofre[13],
	ArmasAmmoCofre[13],
	FrangoGeladeira,
	PeixeGeladeira,
	SaladaGeladeira,
	PizzaGeladeira,
	RefriGeladeira,
	SucoGeladeira,
	CarneGeladeira,
	StrogonoffGeladeira,
	CamaraoGeladeira,
	LinguicaGeladeira
}
new pckStats[MAX_CASAS][PickupStats];
//PROPRIEDADES
enum PropInfo
{
	PropName[128],
	PropValue
}
new Propriedades[][PropInfo] = {
	{"Null", 0},
	{"Pizzaria", 90000},
	{"Yellow's'Taxi", 120000},
	{"LuxLimosine", 140000},
	{"SecurityLife", 110000},
	{"Ammu-Nation", 150000},
	{"Boate", 170000},
	{"Posto", 210000},
	{"Bar", 80000},
	{"Customizacao", 200000},
	{"Lixao", 75000},
	{"Fazenda", 160000},
	{"COEVL", 180000},
	{"ECTVL", 160000},
	{"Concessionaria", 200000},
	{"Imobiliaria", 200000},
	{"Cooperativa de Pesca", 140000}
};
new ProfissoesContrato[][2] = {
	{0, 0},
	{ENTREGADOR_PIZZA, 0},
    {TAXISTA, MOTO_TAXISTA},
    {MOTORISTA_PARTICULAR, 0},
    {SEGURANÇA, 0},
    {VENDEDOR_DE_ARMAS, 0},
    {PROSTITUTA, 0},
    {FRENTISTA, 0},
    {BARMAN, 0},
    {MECANICO, 0},
    {LIXEIRO, 0},
    {AGRICULTOR, 0},
    {0, 0},
    {0, 0},
    {VENDEDOR_DE_CARROS, 0},
    {CORRETOR, 0},
    {PESCADOR, 0}
};
enum PropertyStats {
	Dono1[MAX_PLAYER_NAME],
	Socio1[MAX_PLAYER_NAME],
	Socio2[MAX_PLAYER_NAME],
	Socio3[MAX_PLAYER_NAME],
	Lucro,
	Prejuizo,
	Investimento,
	SemanaPassada,
	SemanaRetrasada
}
new propStats[sizeof Propriedades][PropertyStats];
//JORNAL
enum JornalStats {
	Autor[MAX_PLAYER_NAME],
	CEmpresas1[128],
	CEmpresas2[128],
	CEmpresas3[128],
	CHomicidios1[128],
	CHomicidios2[128],
	CHomicidios3[128],
	CEsporte1[128],
	CEsporte2[128],
	CEsporte3[128],
	CMercadorias1[128],
	CMercadorias2[128],
	CMercadorias3[128],
	COutros1[128],
	COutros2[128],
	COutros3[128]
}
new LastJN;
new Jornais[MAX_JORNAIS][128];
new jStats[MAX_JORNAIS][JornalStats];
//GANGUES
enum GangueStats {
	GangDono[MAX_PLAYER_NAME],
	GangMembros,
	GangPontos,
	GangColor,
	GangLevel,
	SkinSlot[5]
}
new LastGNG;
new Gangues[MAX_GANGUES][128];
new MembersGang[MAX_GANGUES][MAX_GANGUE_PLAYERS][MAX_PLAYER_NAME];
new gStats[MAX_GANGUES][GangueStats];
//HOTÉIS
new HotelLastP[MAX_HOTEIS];
new PlayersInHotel[MAX_HOTEIS][MAX_HOTEL_PLAYERS][MAX_PLAYER_NAME];
//TEXTDRAWS
new Text:DeathAction;
new Text:DeathText;
new Text:FlashAction;
new Text:TDDriveThru[MAX_SLOTS];
new Text:BarFome[14];
new Text:TextFome[sizeof BarFome - 1];
new Text:TextVL;
new Text:TextHouse[MAX_SLOTS];
new Text:TextArea[MAX_SLOTS];
new Text:Speedo[MAX_SLOTS];
new Text:TextData[2];
new Text:Bemvindo1;
new Text:Bemvindo2;
new Text:Bemvindo3;
new Text:Bemvindo4;
//New velo
enum SavePlayerPosEnum {
	Float:LastX,
	Float:LastY,
	Float:LastZ
}
new SavePlayerPos[MAX_SLOTS][SavePlayerPosEnum];
//Msgs
enum Cordas {
	Corda1[128],
	Corda2[128],
	Corda3[128],
	Corda4[128],
	Corda5[128]
}
new GuardarString[MAX_SLOTS][Cordas];
//Radar
new ReportPolice[MAX_SLOTS] = 0;
new RadarCheck[MAX_SLOTS] = 0;
new Float:Radares[][4] = {
	{1643.6149, -1905.6511, 25.0081, 150.0},
	{1529.6703, -1717.4285, 13.3828, 130.0},
	{1441.0917, -1592.7676, 13.3828, 130.0},
	{1312.2483, -1571.6610, 13.3828, 140.0},
	{1177.5140, -1778.5609, 13.5703, 120.0},
	{1109.7887, -1712.5549, 13.3828, 140.0},
	{1097.0480, -1400.7378, 13.4646, 120.0},
	{920.3538,  -1400.7877, 13.2912, 120.0},
	{2229.1394, -1650.5391, 15.3042, 130.0},
	{1462.9423, -1872.1697, 13.3828, 120.0},
	{1586.3667, -1732.4827, 13.3828, 130.0},
	{1849.0906, -1463.3176, 13.3984, 130.0},
	{2342.4668, -1498.4374, 23.8350, 140.0},
	{2431.1714, -1544.7692, 23.8363, 130.0},
	{2451.9043, -1278.0122, 23.8359, 130.0},
	{2464.4963, -1258.2958, 24.7663, 130.0},
	{2371.4114, -1275.0173, 23.8354, 130.0}
};

//Mecanico
enum Mecinfo
{
	Float:MecPosX,
	Float:MecPosY,
	Float:MecPosZ,
};

new MecRebI[MAX_SLOTS][Mecinfo];
//Vicio de alcool/drogas
new TempoVicio[MAX_SLOTS];
//Areas
new PescaArea;
new InstrutorArea;
new ProstitutaArea;
new TaxiArea;
new DesmancheArea;
new SorveteriaArea;
new PoliciaLadraoArea;
new EquipeAzul;
new EquipeLaranja;
//Outros
new VerOutrosAvisos = 0;
new PassarFomeGrit  = 0;
//MapIcons
new ShowedForPlayer[MAX_SLOTS];
//Capture The Cars
new CTCCapturado[20];
new EquipePontos[3];
new EquipeCTC[MAX_SLOTS];
new CarrosCTC[20];
new Reboque[24];
new CTCAberto;
new CaptureCAberto;
new AgoraNoCTC[MAX_SLOTS] = 0;
//Motorista de ônibus
new TimerCard[MAX_SLOTS] = 0;
new PropostaCard[MAX_SLOTS] = 0;
//Policia e Ladrao
new CtPL2;
new CtPL;
new TimerPL;
new CtExpulsao[MAX_SLOTS];
new ForaAreaPL[MAX_SLOTS];
new QtCapturados;
new EscolhendoEquipe[MAX_SLOTS] = 0;
new Capturado[MAX_SLOTS] = 0;
new Equipe[MAX_SLOTS] = 0;
new PLIniciou;
//Rastreamento
new Rastreador[MAX_SLOTS];
new Rastreando[MAX_SLOTS] = 0;
new VeiculoRastreando[MAX_SLOTS];
new Rastreador2[MAX_SLOTS];
new Rastreado[MAX_SLOTS] = 0;
//Gangues
new GangInviteFile[MAX_SLOTS][128];
new GangInviteNome[MAX_SLOTS][128];
new GangInviteID[MAX_SLOTS];
new GangInvite[MAX_SLOTS] = 0;
//Corrida
new rcp[MAX_SLOTS] = 0;
new RaceCheckpointStatus[MAX_SLOTS];
new PosicaoRace1[6];
new positionname[6][128];
new lastposition;
//Anuncio
new AnuncioMsg[][] = {
	"             ~b~V",
	"            ~b~Vi",
	"           ~b~Vir",
	"          ~b~Virt",
	"         ~b~Virtu",
	"        ~b~Virtua",
	"       ~b~Virtual",
	"      ~b~Virtual",
	"     ~b~Virtual ~r~L",
	"    ~b~Virtual ~r~L~w~i",
	"   ~b~Virtual ~r~L~w~i~r~f",
	"  ~b~Virtual ~r~L~w~i~r~f~w~e",
	" ~b~Virtual ~r~L~w~i~r~f~w~e",
	"~b~Virtual ~r~L~w~i~r~f~w~e ~y~R",
	"~b~irtual ~r~L~w~i~r~f~w~e ~y~R~b~P",
	"~b~rtual ~r~L~w~i~r~f~w~e ~y~R~b~P~g~G",
	"~b~tual ~r~L~w~i~r~f~w~e ~y~R~b~P~g~G~w~,",
	"~b~ual ~r~L~w~i~r~f~w~e ~y~R~b~P~g~G~w~,",
	"~b~al ~r~L~w~i~r~f~w~e ~y~R~b~P~g~G~w~, m",
	"~b~l ~r~L~w~i~r~f~w~e ~y~R~b~P~g~G~w~, ma",
	" ~r~L~w~i~r~f~w~e ~y~R~b~P~g~G~w~, mai",
	"~r~L~w~i~r~f~w~e ~y~R~b~P~g~G~w~, mais",
	"~w~i~r~f~w~e ~y~R~b~P~g~G~w~, mais q",
	"~r~f~w~e ~y~R~b~P~g~G~w~, mais qu",
	"~w~e ~y~R~b~P~g~G~w~, mais que",
	" ~y~R~b~P~g~G~w~, mais que",
	"~y~R~b~P~g~G~w~, mais que u",
	"~b~P~g~G~w~, mais que um",
	"~g~G~w~, mais que um",
	"~w~, mais que um ~y~R",
	"~w~ mais que um ~y~R~b~P",
	"~w~mais que um ~y~R~b~P~g~G",
	"~w~ais que um ~y~R~b~P~g~G~w~,",
	"~w~is que um ~y~R~b~P~g~G~w~, U",
	"~w~s que um ~y~R~b~P~g~G~w~, UM",
	"~w~ que um ~y~R~b~P~g~G~w~, UMA",
	"~w~que um ~y~R~b~P~g~G~w~, UMA",
	"~w~ue um ~y~R~b~P~g~G~w~, UMA V",
	"~w~e um ~y~R~b~P~g~G~w~, UMA VI",
	"~w~ um ~y~R~b~P~g~G~w~, UMA VID",
	"~w~um ~y~R~b~P~g~G~w~, UMA VIDA",
	"~w~m ~y~R~b~P~g~G~w~, UMA VIDA,",
	" ~y~R~b~P~g~G~w~, UMA VIDA,",
	"~y~R~b~P~g~G~w~, UMA VIDA, d",
	"~y~R~b~P~g~G~w~, UMA VIDA, di",
	"~b~P~g~G~w~, UMA VIDA, dig",
	"~g~G~w~, UMA VIDA, digi",
	"~w~, UMA VIDA, digit",
	"~w~ UMA VIDA, digite",
	"~w~UMA VIDA, digite",
	"~w~MA VIDA, digite /",
	"~w~A VIDA, digite /n",
	"~w~ VIDA, digite /no",
	"~w~VIDA, digite /nov",
	"~w~IDA, digite /novi",
	"~w~DA, digite /novid",
	"~w~A, digite /novida",
	"~w~, digite /novidad",
	"~w~ digite /novidade",
	"~w~digite /novidades",
	"~w~igite /novidades,",
	"~w~gite /novidades,",
	"~w~ite /novidades, /",
	"~w~te /novidades, /r",
	"~w~e /novidades, /rp",
	"~w~ /novidades, /rpg",
	"~w~/novidades, /rpgl",
	"~w~novidades, /rpgli",
	"~w~ovidades, /rpglif",
	"~w~vidades, /rpglife",
	"~w~idades, /rpglife",
	"~w~dades, /rpglife /",
	"~w~ades, /rpglife /s",
	"~w~des, /rpglife /si",
	"~w~es, /rpglife /sis",
	"~w~s, /rpglife /sist",
	"~w~, /rpglife /siste",
	"~w~ /rpglife /sistem",
	"~w~/rpglife /sistema",
	"~w~rpglife /sistemas",
	"~w~pglife /sistemas",
	"~w~glife /sistemas e",
	"~w~life /sistemas e",
	"~w~ife /sistemas e d",
	"~w~fe /sistemas e de",
	"~w~e /sistemas e des",
	"~w~ /sistemas e desc",
	"~w~/sistemas e descu",
	"~w~sistemas e descub",
	"~w~istemas e descubr",
	"~w~stemas e descubra",
	"~w~temas e descubra",
	"~w~emas e descubra p",
	"~w~mas e descubra po",
	"~w~as e descubra por",
	"~w~s e descubra porq",
	"~w~ e descubra porqu",
	"~w~e descubra porque",
	"~w~ descubra porque",
	"~w~descubra porque e",
	"~w~escubra porque el",
	"~w~scubra porque ele",
	"~w~cubra porque ele",
	"~w~ubra porque ele ",
	"~w~bra porque ele ",
	"~w~ra porque ele  u",
	"~w~a porque ele  um",
	"~w~ porque ele  um",
	"~w~porque ele  um",
	"~w~orque ele  um d",
	"~w~rque ele  um do",
	"~w~que ele  um dos",
	"~w~ue ele  um dos",
	"~w~e ele  um dos m",
	"~w~ ele  um dos me",
	"~w~ele  um dos mel",
	"~w~le  um dos melh",
	"~w~e  um dos melho",
	"~w~  um dos melhor",
	"~w~ um dos melhore",
	"~w~ um dos melhores",
	"~w~um dos melhores!"
};
new ParteAnuncio[MAX_SLOTS] = 0;
new TempoAnuncio[MAX_SLOTS];
//Amarrar e Algemar
new LevandoJogador[MAX_SLOTS] = 0;
new GetCopCars[MAX_SLOTS];
new GetPlayerCars[MAX_SLOTS];
new Algemado[MAX_SLOTS] = 0;
new Algemou[MAX_SLOTS] = 0;
new AlgemaInfo[MAX_SLOTS][2];
//---
new MenuExibido[MAX_SLOTS] = 0;
new TuneTimer;
new TimerDeathEffect[MAX_SLOTS];
new PodeSair[MAX_SLOTS] = 0;
new Blinded[MAX_SLOTS] = 0;
new ConfiscandoVeiculo[MAX_SLOTS] = 0;
new MiniGame[MAX_SLOTS] = 0;
new AdminText[MAX_SLOTS] = 0;
new TimerCamuflagem[MAX_SLOTS];
new SalaDelegado[MAX_SLOTS] = 0;
new AssegurandoVeiculo[MAX_SLOTS] = 0;
new ProfsMenuStart = 1;
new TimerBlind[MAX_SLOTS];
new TimerReceive[MAX_SLOTS][2];
new bool:CanAttack[MAX_SLOTS] = false;
new AttackZone[MAX_SLOTS] = 0;
new GangAttackTimer[MAX_SLOTS] = 0;
new PegouEquipamento[MAX_SLOTS] = 0;
new TimerPegarEquipamento[MAX_SLOTS];
new PropertiesMenuStart = 1;
new DesmancheValor = 0;
new ReceivingWeapon[MAX_SLOTS] = 0;
new ReceivingLife[MAX_SLOTS] = 0;
new Transparent[MAX_SLOTS] = 0;
new AbastecendoVeiculo[MAX_SLOTS] = 0;
new VehicleRespawn[231];
new PlayerControl[MAX_SLOTS];
new bool:Vision[MAX_SLOTS];
new VisTime[MAX_SLOTS];
new VisTurn[MAX_SLOTS];
new CrashTimer[MAX_SLOTS] = 0;
new CrashWarn[MAX_SLOTS] = 0;
new PayAgain[MAX_SLOTS] = 0;
new Float:PosJanela[MAX_SLOTS][3];
new IntJanela[MAX_SLOTS];
new WorldJanela[MAX_SLOTS];
new OlhandoJanela[MAX_SLOTS] = 0;
new TimerJanela[MAX_SLOTS];
new bool:JanelaSentidoHorario[MAX_SLOTS] = false;
new RecebendoSalario = 0;
new TraficandoArmas[MAX_SLOTS] = 0;
new ArmasTrafico[MAX_SLOTS][9];
new PlayerArea[MAX_SLOTS] = 0;
new AmountServerVehicles = 0;
new AmountPlayerVehicles = 0;
new TypingDate[MAX_SLOTS] = 0;
new ParteHistoria[MAX_SLOTS] = 0;
new Float:HotelLastPos[MAX_SLOTS][3];
new NoHotel[MAX_SLOTS] = 0;
new PlayerHotel[MAX_SLOTS];
new TempoMandato[MAX_SLOTS];
new Mandato[MAX_SLOTS] = 0;
new GetName[MAX_SLOTS][MAX_PLAYER_NAME];
new MassagemCardiaca[MAX_SLOTS] = 0;
new InVehicle[MAX_SLOTS] = 0;
new LastVehicleHealth[MAX_SLOTS] = 0;
new CarPrice[8];
new TerminalCorrida[MAX_SLOTS] = 0;
new Terminal[MAX_SLOTS] = 0;
new TeleporteOnibus[MAX_SLOTS] = 0;
new BankOpc[MAX_SLOTS] = 0;
new Zoom[MAX_SLOTS];
new CameraAtiva[MAX_SLOTS] = 0;
new Float:Filmagem[MAX_SLOTS][6];
new TempoFilmando[MAX_SLOTS];
new TempoFilmando2[MAX_SLOTS];
new Float:CamEntrevista[MAX_SLOTS][6];
new Entrevista[MAX_SLOTS][5];
new LastCasa;
new PodeAlgemar[MAX_SLOTS];
new TimerLevando[MAX_SLOTS];
new TimerViciado[MAX_SLOTS];
new TimerDoenca[MAX_SLOTS][2];
new CountCarroDoido[MAX_SLOTS] = 0;
new CountViradas[MAX_SLOTS] = 0;
new TimerCarrinho[MAX_SLOTS];
new CountVomit[MAX_SLOTS] = 0;
new ExperimentandoSkin[MAX_SLOTS];
new CelularesNum[MAX_CELL][MAX_PLAYER_NAME];
new HourTimer[MAX_SLOTS];
new CarregouArmas[MAX_SLOTS] = 0;
new ValorAlgoMais = 0;
new InformeiMinhaPos[MAX_SLOTS] = 0;
new Tutorial[MAX_SLOTS] = 0;
new CanCPTut[MAX_SLOTS];
new Float:AnteriorPos[MAX_SLOTS][3];
new CustoAluguel[MAX_SLOTS] = 0;
new DiasSelecionados[MAX_SLOTS];
new PickupBurgerShotSelect[MAX_SLOTS];
new PickupUtilidadesSelect[MAX_SLOTS];
new PickupAmmuSelect[MAX_SLOTS];
new PedidoRastreador[MAX_SLOTS] = 0;
new TempoRastreamento[MAX_SLOTS];
new JogadorRastreamento[MAX_SLOTS];
new RastreandoJogador[MAX_SLOTS] = 0;
new FazendoTesteRua[MAX_SLOTS] = 0;
new InstrutorRua[MAX_SLOTS];
new TempoInternando[MAX_SLOTS];
new Float:PosHosp[MAX_SLOTS][3];
new Mudo[MAX_SLOTS] = 0;
new QtDrog[MAX_SLOTS] = 0;
new TimerContinuacaoPos[MAX_SLOTS];
new TimerDeath[MAX_SLOTS];
new AcabouMorrer[MAX_SLOTS] = 0;
new Float:DeadPos[MAX_SLOTS][3];
new InteriorDead[MAX_SLOTS] = 0;
new CtgDead[MAX_SLOTS] = 0;
new PropostaMoradia[MAX_SLOTS] = 0;
new CasaMoradia[MAX_SLOTS] = 0;
new DonoPMoradia[MAX_SLOTS];
new AcabouAssistirTV[MAX_SLOTS] = 0;
new UsingChaveMestra[MAX_SLOTS];
new PChaveMestra[MAX_SLOTS] = 0;
new JaDestruido[MAX_VEHICLES] = 0;
new ComVDocs[MAX_SLOTS] = 0;
new DocsVEntregue[MAX_VEHICLES] = 0;
new ComDocs[MAX_SLOTS] = 0;
new EntregouDocs[MAX_SLOTS] = 0;
new ReceiveDocs[MAX_SLOTS];
new GiveDocs[MAX_SLOTS];
new TimerConserto[MAX_SLOTS];
new DinheiroConserto[MAX_SLOTS] = 0;
new PropostaConserto[MAX_SLOTS] = 0;
new VeiculoConserto[MAX_SLOTS];
new extensao[MAX_SLOTS] = 0;
new PickupCaller[MAX_CASAS];
new Atendente[MAX_CASAS];
new TelefoneTocando[MAX_CASAS] = 0;
new TellUsing[MAX_CASAS];
new profselection[MAX_SLOTS] = 0;
new TimerDJ[MAX_SLOTS];
new HaveDJ;
new MusicSelected;
new QtEntregasSorvetes[MAX_SLOTS] = 0;
new QtEntregasDrogas[MAX_SLOTS] = 0;
new EntregaDrogaILigada[MAX_SLOTS] = 0;
new EntregaArmaILigada[MAX_SLOTS] = 0;
new EntregandoCimento[MAX_SLOTS] = 0;
new PegandoCorpos[MAX_SLOTS] = 0;
new ArrumandoPostes[MAX_SLOTS] = 0;
new SubMissaoAtiva[MAX_SUBMISSIONS] = 0;
new SM[MAX_SLOTS] = 0;
new CaixaPostal2[MAX_SLOTS] = 0;
new RecebedorMensagem[MAX_SLOTS][128];
new TempoCaixaMensagem[MAX_SLOTS][2];
new TimerLogin[MAX_SLOTS];
new NaoLogar[MAX_SLOTS] = 0;
new CarroEntrega[MAX_SLOTS] = 0;
new FazendoHoraExtra[MAX_SLOTS] = 0;
new TempoHoraExtra[MAX_SLOTS];
new TempoHoraExtra2[MAX_SLOTS];
new HoraExtra[MAX_SLOTS] = 0;
new ComecouCLoteria;
new PedindoDemissao[MAX_SLOTS] = 0;
new Gritos[MAX_SLOTS] = 0;
new AlimentoCozinhando[MAX_SLOTS] = 0;
new SelectedHouse[MAX_SLOTS] = 0;
new GetPickupHouse[MAX_SLOTS] = 0;
new GetPickupServer[MAX_SLOTS] = 0;
new Frangos[MAX_SLOTS] = 0;
new Peixes[MAX_SLOTS] = 0;
new Pizzas[MAX_SLOTS] = 0;
new Carnes[MAX_SLOTS] = 0;
new Strogonoffes[MAX_SLOTS] = 0;
new Camaroes[MAX_SLOTS] = 0;
new Linguicas[MAX_SLOTS] = 0;
new TempoCozinhando[MAX_SLOTS];
new TempoPreso[MAX_SLOTS];
new SeEntregando[MAX_SLOTS] = 0;
new	Revistando[MAX_SLOTS] = 0;
new	Revistado[MAX_SLOTS] = 0;
new	AindaNaoAceitou[MAX_SLOTS] = 0;
new OficialSolicitou[MAX_SLOTS];
new Ligou190[MAX_SLOTS] = 0;
new PolicialApreendendo[MAX_SLOTS];
new LastChamadaDenuncia[128];
new	Float:CPLocal[MAX_SLOTS][3];
new IndoLocalDenuncia[MAX_SLOTS] = 0;
new	LastDenuncia[128];
new LastEmergencia[128];
new IndoLocalEmergencia[MAX_SLOTS] = 0;
new AmbulanciaAmba[MAX_SLOTS];
new ChameiAmbulancia[MAX_SLOTS] = 0;
new LastAmbulanciaDenuncia[128];
new weatherprevisao;
new PickupEntradaCasa[MAX_SLOTS] = 0;
new Float:EntradaCasa[MAX_SLOTS][3];
new NaCasa[MAX_SLOTS] = 0;
new Convidando[MAX_SLOTS];
new QtConvidados[MAX_SLOTS];
new Convidado[MAX_SLOTS][MAX_SLOTS];
new Tratando[MAX_SLOTS] = 0;
new TimerCura[MAX_SLOTS];
new SlotSelection[MAX_SLOTS] = 0;
new ComLeite[MAX_SLOTS] = 0;
new Milhinho[MAX_SLOTS] = 0;
new Leitinho[MAX_SLOTS] = 0;
new VendedorProduto[MAX_SLOTS];
new TimerBebida[MAX_SLOTS];
new Produto[MAX_SLOTS] = 0;
new TeorProduto[MAX_SLOTS] = 0;
new ValorProduto[MAX_SLOTS] = 0;
new OfertaDada[MAX_SLOTS] = 0;
new Pressionado;
new cavalin[2];
new SegurancaContratado[MAX_SLOTS] = 0;
new Scontratador[MAX_SLOTS];
new Svaloroferecido[MAX_SLOTS];
new MostrouResultado;
new PrevisaoAnunciada;
new SalarioEntregue;
new JaAvisouHorario;
new VehicleToView[MAX_SLOTS] = 0;
new Negociador[MAX_SLOTS] = 0;
new PropriedadeNomeacao[MAX_SLOTS] = 0;
new JogadorNomeacao[MAX_SLOTS];
new PropriedadeEscolhida[MAX_SLOTS] = 0;
new ValorOferecido[MAX_SLOTS] = 0;
new NegocianteName[MAX_SLOTS][128];
new PropriedadeContrato[MAX_SLOTS] = 0;
new TocandoBIP[MAX_SLOTS];
new HoraJogo;
new MinutoJogo;
new DiaJogo;
new MesJogo;
new AnoJogo;
new ValorGasolina;
new ValorAditivada;
new ValorDiesel;
new ValorAlcool;
new ValorQuerosene;
new ValorTV;
new ValorRadio;
new ValorGeladeira;
new ValorFogao;
new ValorCofre;
new ValorGuardaRoupas;
new ValorCelular;
new ValorTelefone;
new ValorFrango;
new ValorPeixe;
new ValorPizza;
new ValorSalada;
new ValorRefrigerante;
new ValorSuco;
new ValorCarne;
new ValorStrogonoff;
new ValorCamarao;
new ValorLinguica;
new ValorComputador;
new TimerDivida[MAX_SLOTS];
new TellPublico[MAX_SLOTS] = 0;
new TomandoSorvete[MAX_SLOTS] = 0;
new Logado[MAX_SLOTS];
new EntrouAgora[MAX_SLOTS] = 0;
new LixoColetado[MAX_SLOTS] = 0;
new PrisaoTimer[MAX_SLOTS][2];
new envconvite[MAX_SLOTS];
new kitmedico[MAX_SLOTS] = 0;
new Curando[MAX_SLOTS] = 0;
new TimerCancel[MAX_SLOTS];
new ParaAceitar[MAX_SLOTS] = 0;
new confirmacaosenha[MAX_SLOTS] = 0;
new TentarSenha[MAX_SLOTS] = 0;
new senhaatual[MAX_SLOTS] = 0;
new SacandoGrana[MAX_SLOTS] = 0;
new pickupbancoselecionada[MAX_SLOTS];
new DepositandoGrana[MAX_SLOTS] = 0;
new EntregandoGrana[MAX_SLOTS];
new FazendoEmprestimo[MAX_SLOTS] = 0;
new InvestindoGrana[MAX_SLOTS] = 0;
new DesinvestindoGrana[MAX_SLOTS] = 0;
new InComputer[MAX_SLOTS] = 0;
new bool:ComputerMusicEnable[MAX_SLOTS] = false;
new ComputerMusic[MAX_SLOTS] = 0;
new ZeraMulta[MAX_SLOTS] = 0;
new tocando2;
new tocando;
new sombalada[MAX_CASAS] = 0;
new sombalada2[MAX_SLOTS] = 0;
new NoRestaurante[MAX_SLOTS] = 0;
//Auto-Escola
new NaAgenda[MAX_SLOTS] = 0;
new Agendado[MAX_SLOTS] = 0;
new AgendaTestes;
new FechandoPortaoAuto;
new AbrindoPortaoAuto;
new NoTeste[MAX_SLOTS] = 0;
new InstrutorOcupado[MAX_SLOTS] = 0;
new Chance[MAX_SLOTS] = 0;
new InstrutorNovo[MAX_SLOTS] = 0;
new LiAsLeis[MAX_SLOTS] = 0;
new TempoLeisTransito[MAX_SLOTS];
new TempoRua[MAX_SLOTS];
new ADTeste[MAX_SLOTS] = 0;
new ParteTesteLeis[MAX_SLOTS] = 0;
new ParteLendoLeisA[MAX_SLOTS] = 0;
new ParteFLTest[MAX_SLOTS] = 0;
//Teste Automatico
new JaExisteAuto = 0;
new AceitouTeste[MAX_SLOTS] = 0;
new ParteAutoHabilitada[MAX_SLOTS] = 0;
new TimerAuto[MAX_SLOTS];
new FazendoAutoTesteRua[MAX_SLOTS] = 0;
new ParteAutoTeste[MAX_SLOTS] = 0;
new ParteTerrestreTest[MAX_SLOTS] = 0;
//Cofre
new CorrectPassword[MAX_SLOTS];
new GranaCofre[MAX_SLOTS][2];
new ArmaCofre[MAX_SLOTS][2];
new DrogaCofre[MAX_SLOTS][2];
//registrar
new RegisterPlayer[MAX_SLOTS] = 0;
//Convites
new ivalorcasa[MAX_SLOTS];
new icarid[MAX_SLOTS];
new icor1[MAX_SLOTS];
new icor2[MAX_SLOTS];
new Float:iX[MAX_SLOTS];
new Float:iY[MAX_SLOTS];
new Float:iZ[MAX_SLOTS];
new Float:iang[MAX_SLOTS];
//Pesca
new Pescado[MAX_SLOTS] = 0;
new PescaInProgress[MAX_SLOTS] = 0;
//Sequestro
new TimerSequestro[MAX_SLOTS];
new Sequestro[MAX_SLOTS] = 0;
new Cativeiro[MAX_SLOTS] = 0;
new Sequestrador[MAX_SLOTS];
new CelularBloqueado[MAX_SLOTS] = 0;
new Amarrado[MAX_SLOTS] = 0;
new Amarrou[MAX_SLOTS] = 0;
new AmarradoInfo[MAX_SLOTS][2];
new FuiSequestrado[MAX_SLOTS];
new EstouComSequestro[MAX_SLOTS] = 0;
//Caminhoneiros
new CarregamentoRoupas[MAX_SLOTS] = 0;
new GeralCar[MAX_SLOTS] = 0;
//Aluguel de carros
new TempoAluguel[MAX_SLOTS];
new CarroAlugado[MAX_SLOTS] = -1;
//Veículos
new CarroAluguel[8];
new CarroAuto[9];
new SANNews[6];
new Stretch[5];
new Police[13];
new Farm[5];
new Truck[6];
new Security[7];
new Bus[5];
new Ambulancia[6];
new Guincho[4];
new Trashmaster[4];
new MotoPizza[12];
new Dumper[4];
new Taxi[8];
new SequestroCar[6];
new MotoTaxi[6];
new CarroContrabando[5];
new BikeEvent[8];
new Piloto[4];
new AdvogadoCar[2];
new ProstitutaCar;
new JuizCar;
new CorretorCar;
//Motorista
new LimoLavada[sizeof Stretch] = 0;
new LimoRevisada[sizeof Stretch] = 0;
new EntregaLimo[MAX_SLOTS] = 0;
//Roubo
new TempoAssalto[MAX_SLOTS] = 0;
new BancoRoubando[MAX_SLOTS] = 0;
new RouboMao[MAX_SLOTS] = 0;
new AssaltPlayer[MAX_SLOTS] = 0;
new RouboCarroForte[MAX_SLOTS] = 0;
new TimerRoubo[MAX_SLOTS];
//Assalto Gang
new IniciandoAssalto[MAX_SLOTS] = 0;
new QtLoopAssalto[MAX_SLOTS] = 0;
new CalmaAssalto[MAX_SLOTS] = 0;
new ValuerMaximo[MAX_SLOTS] = 0;
//GangZones
new zoneupdates[MAX_SLOTS];
new playerzone[MAX_SLOTS];
//gate
new PortaoFechando[3];
new PortaoAbrindo[3];
new PortaoTimer[3];
new ContagemPortao[3];
new PortaoAberto[3];
new DelegaFechando[3];
new DelegaAbrindo[3];
new DelegaAberto[3];
//Auto Escola
new portaoauto;
//Juiz
new JuizTribunal = -1;
new Audiencia[2];
new Advogados[2];
new AdvogadoDele[MAX_SLOTS] = 0;
//Fazenda
new FazendaInProgress[MAX_SLOTS] = 0;
new QtMilho[MAX_SLOTS] = 0;
new LeiteInProgress[MAX_SLOTS] = 0;
new QtLeite[MAX_SLOTS] = 0;
new VacaVazia[MAX_SLOTS] = 0;
//Latinhas para desempregados
new CatarLatinha[MAX_SLOTS] = 0;
new EntregandoLatas[MAX_SLOTS] = 0;
new Missao[MAX_SLOTS];
//Segurança
new Malote[sizeof Security] = 0;
new PegouGrana[MAX_SLOTS] = 0;
//Passaportes e Portes
new ImpossivelTirarPorte[MAX_SLOTS] = 0;
new	PorteTeste2[MAX_SLOTS] = 0;
new PorteTeste[MAX_SLOTS] = 0;
//Contrabando
new Contrabando[MAX_SLOTS];
new CheckpointStatus[MAX_SLOTS];
new ContrabandoPassar[MAX_SLOTS] = 0;
new Receita[MAX_SLOTS] = 0;
new ContrabandoCar[MAX_SLOTS] = 0;
new EntregaCarro[MAX_SLOTS] = 0;
new NaoSair[MAX_SLOTS] = 0;
new PodePegar[MAX_SLOTS] = 0;
new AcabeiDeRecusar[MAX_SLOTS] = 0;
//Vendedor de Armas
new Armas[MAX_SLOTS]= 0;
new VendedorVirou[MAX_SLOTS];
//Pedreira
new Pedras[MAX_SLOTS] = 0;
//Carregamento
new RetomarTrabalho[MAX_SLOTS];
new VeiculoTrabalho[MAX_SLOTS];
//Pizzaria
new PizzasEntregues[MAX_SLOTS] = 0;
new PizzasMoto[sizeof MotoPizza] = 0;
new EntregaPizzaILigada[MAX_SLOTS];
new Float:LocalRadarPizza[MAX_SLOTS][3];
new EntregandoIndoProCliente[MAX_SLOTS];
new ASuaPizzaChegou[MAX_SLOTS];
//Televisão
new TVligada[MAX_SLOTS] = 0;
new PlayerSpec[MAX_SLOTS] = 0;
new Spectator[MAX_SLOTS] = 0;
new AntInt[MAX_SLOTS];
new Float:AntPos[MAX_SLOTS][3];
//defines de coisas
new Menu:mDonuts;
new Menu:BurgerShot;
new Menu:CluckinBell;
new Menu:Properties;
new Menu:Seguros;
new Menu:CreditosCartao;
new Menu:mLunchs;
new Menu:BuyCar;
new Menu:Weapons;
new Menu:WSlot2;
new Menu:WSlot3;
new Menu:WSlot4;
new Menu:WSlot5;
new Menu:WSlot6;
new Menu:WColete;
new Menu:WCamuflagem;
new Menu:WClockBomb;
new Menu:WFlash;
new Menu:WRocket;
new Menu:CasaOpc;
new Menu:DiasAluguel1;
new Menu:DiasAluguel2;
new Menu:DiasAluguel3;
new Menu:ConfirmarProf;
new Menu:Outros;
new Menu:ComidaLoja;
new Menu:Eletrodomesticos;
new Menu:QTMunicoes;
new Menu:Municoes;
new Menu:Sucos;
new Menu:Cardapio1;
new Menu:Cardapio2;
new Menu:Cardapio3;
new Menu:Cardapio4;
new Menu:BancoOpc;
new Menu:BancoOpc2;
new Menu:CargaGeral;
new Menu:VendoDrogas;
new Menu:QuantidadeDrog;
new Menu:Bar;
new Menu:OpcoesAlarme;
new Menu:Profs;
new Menu:Casas;
new Menu:CasasSeguro;
new Menu:Abastecendo;
new Menu:ConfirmacaoNegocio;
new Menu:Sorvetes;
new Menu:Sorvetes2;
new Menu:cofremenu;
new Menu:drogascofre;
new Menu:Becks;
new PropriedadeSelecionada[MAX_SLOTS] = 0;
new Previsao;
new JaMultou[MAX_SLOTS] = 0;
new Taximetro[MAX_SLOTS][2];
new MTaximetro[MAX_SLOTS][2];
new PrecoCorrida[MAX_SLOTS];
new ParaGanharXPTaximetro[MAX_SLOTS] = 0;
new FazendoCorrida[MAX_SLOTS] = 0;
new CorridaToI[MAX_SLOTS] = 0;
new Float:LocalRadarTaxi[MAX_SLOTS][3];
new Float:LocalRadarDroga[MAX_SLOTS][3];
new Float:LocalRadarArma[MAX_SLOTS][3];
new EntregandoEncomendas[MAX_SLOTS] = 0;
new QuantidadeEncomendas[MAX_SLOTS] = 0;
new EncomendasEntregues[MAX_SLOTS] = 0;
new ChavePrisao[MAX_SLOTS][2];
new RequerAbastecimento[MAX_ABASTECIMENTOS] = 0;
new AeroOfereceuTaxi[MAX_SLOTS] = 0;
new Disparos[MAX_VEHICLES] = 0;
new Disparado[MAX_VEHICLES] = 0;
new GasV[MAX_VEHICLES] = 0;
//Traficante
new Maconha[MAX_SLOTS] = 0;
new Heroina[MAX_SLOTS] = 0;
new Cocaina[MAX_SLOTS] = 0;
new MaconhaEsc[MAX_SLOTS] = 0;
new HeroinaEsc[MAX_SLOTS] = 0;
new CocainaEsc[MAX_SLOTS] = 0;
new MaconhaMao[MAX_SLOTS] = 0;
new HeroinaMao[MAX_SLOTS] = 0;
new CocainaMao[MAX_SLOTS] = 0;
new DrogasPlantadas[MAX_VEHICLES] = 0;
new TempoPlantacao[MAX_SLOTS];
new PlantandoDrogas[MAX_SLOTS] = 0;
new TaAfim[MAX_SLOTS] = 0;
new ComprandoBaguio[MAX_SLOTS] = 0;
new DrogasNegoci[MAX_SLOTS] = 0;
new DrogaOferecida[MAX_SLOTS] = 0;
new QtdDrogaV[MAX_SLOTS] = 0;
new TraficanteTra[MAX_SLOTS];
//Sex
new Sex2a2[MAX_SLOTS] = 0;
new LevouDick[MAX_SLOTS] = 0;
//Prostituta
new Metendo[MAX_SLOTS] = 0;
new SemCamisa[MAX_SLOTS] = 0;
new Transacama[MAX_SLOTS] = 0;
new Prostitutacama[MAX_SLOTS];
new Strip2[MAX_SLOTS] = 0;
new TimerStrip[MAX_SLOTS] = 0;
new FazendoStrip[MAX_SLOTS] = 0;
new Prostitutacama2[MAX_SLOTS];
new FST[MAX_SLOTS] = 0;
new CheckStripKey[MAX_SLOTS];
//Reboque
new Reboques=0;
new isTowtruck[MAX_SLOTS];
new EntregasCarros[MAX_SLOTS] = 0;
//Taxi Historia
new TaxiRick1;
new TaxiRick2;
new TaxiRick3;
new TaxiRick4;
new TaxiPelado1;
new TaxiPelado2;
new CaminhaoPelado1;
new CaminhaoPelado2;
//SubMissions
new CarroCemiterio;
new CarroCimento;
new CarroPoste;
//Celular
new CellTimer[MAX_SLOTS];
new Chamando[MAX_SLOTS];
new CobrancaCall[MAX_SLOTS];
new EmLigacao[MAX_SLOTS];
new CalledID[MAX_SLOTS];
new LastPN;
new LastPhone;
new RingTone[MAX_SLOTS];
new gdebug = 1;
new Gates[4];
new Portao[4];
//VoteKick
new VoteKickTimer;
new VoteKickPlayer = -1;
new Votes = 0;
new Voted[MAX_SLOTS] = 0;
new PlayerCount = 0;
//Derby
new DMinutosRestantes;
new DerbyIniciou;
new OficializarParticipacao[MAX_SLOTS] = 0;
new Derby[10];
new Ocupado[sizeof Derby] = 0;
new DerbyAvisado;
new PlayerDerby[MAX_SLOTS] = 0;
new SegundosContagem[MAX_SLOTS] = 0;
new DerbyIniciado[MAX_SLOTS] = 0;
new contagemof;
//Motivos quando receber grana
new MotivoGranaID[MAX_SLOTS] = 0;
new MotivosGrana[][] = {
	"Desconhecido",
	"Transferencia",
	"Sacou",
	"Trabalhou",
	"Venda",
	"Emprestimo",
	"Homicidio",
	"Ganhou evento",
	"Logou-se",
	"Foi recompensado",
	"Ganhou na loteria",
	"Admin entregou",
	"Pagamento"
};
//GPS
new GPSLigado[MAX_SLOTS] = 0;
//Acusação
enum pCrime
{
	Reportado[32],
	Vitima[32],
	FiancaEstrelas[32],
	Acusado[32],
	Motivo[32],
};
new Crime[MAX_PLAYERS][pCrime];
//Prisão
new DelegaciaAberta = 0;
new Prisioneiro[MAX_SLOTS] = 0;

enum MotivosPrisaoInfo
{
	mName[128],
	mTime,
	mEstrelas,
	mTag[32]
}

new Motivos[][MotivosPrisaoInfo] = {
	{"Homicidio",                   6,		3,		"h"},
	{"Assalto",                     3,      2,		"a"},
	{"Roubo",                       3,      2,		"r"},
	{"Desacato",                    2,      1,		"d"},
	{"Corrupcao",                   4,      2,		"c"},
	{"Indenizacao",                 3,      2,		"i"},
	{"Contrabando",                 3,      2,		"con"},
	{"Fuga de prisao",              5,      5,		"f"},
	{"Tentativa de homicidio",      5,      2,		"th"},
	{"Destruindo patrimonio",       3,      1,		"dp"},
	{"Formacao em quadrilha",       3,      1,		"fq"},
	{"Portando drogas",             3,      1,		"pd"},
	{"Portando armas sem porte",    4,      2,		"pa"},
	{"Sequestro",                   4,      3,		"s"},
	{"Dirigindo embreagado",        3,      1,		"db"},
	{"Trafico",                     4,      2,		"t"},
	{"Transportando drogas",        4,      1,		"td"},
	{"Suspeito",                    3,      2,		"su"}
};

//Arrays
new ValorDia;

enum MesInfo
{
	MesNome[32],
	MesDias
}

new Meses[][MesInfo] = {
	{"None", 0},
	{"Janeiro", 31},
	{"Fevereiro", 29},
	{"Março", 31},
	{"Abril", 30},
	{"Maio", 31},
	{"Junho", 30},
	{"Julho", 31},
	{"Agosto", 31},
	{"Setembro", 30},
	{"Outubro", 31},
	{"Novembro", 30},
	{"Dezembro", 31}
};

new SimNao[][] ={
	"Não",
	"Sim"
};
new CavalosLargada[][] = {
	"Cavalo 0 - Cor Cinza",
	"Cavalo 1 - Cor Verde",
	"Cavalo 2 - Cor Amarela",
	"Cavalo 3 - Cor Vermelho",
	"Cavalo 4 - Cor Azul",
	"Cavalo 5 - Cor Laranja",
	"Cavalo 6 - Cor Branca",
	"Cavalo 7 - Cor Preto",
	"Cavalo 8 - Cor Roxo"
};
new AbastecimentoString[][] = {
	"Restaurante: Precisamos dos serviços de abastecimentos de bebidas, RÁPIDO VENHA!",
	"Boate: Precisamos de bebidas aqui, afinal todos cansam-se de se divertir e ficam com sede!",
	"Bar: Necessitamos de bebida no Bar, afinal é uma das coisas mais importantes por aqui...",
	"Balada: Venha para cá rápido, precisamos abastecer nossas bebidas..."
};
new AtrasoAbastecimentoString[][] = {
	"Restaurante: Vocês demoraram demais para trazerem as bebidas, agora não queremos mais, conseguimos de outra companhia",
	"Boate: Tsc Tsc, que serviço é este? Pedimos bebidas e não somos atendidos? Não vai ser cedo a próxima vez que iremos pedir",
	"Bar: Olha, vocês demoraram para nos trazer as bebidas que queriamos, agora não queremos mais, só estamos avisando!",
	"Balada: Queremos reclamar o atraso das bebidas, mas não só isso, como agora também não queremos mais!"
};

new Float:RaceCheckpoints1[31][3] = {
	{962.3429,-1049.6272,30.0040},
	{943.0116,-1191.7502,18.7111},
	{1038.4774,-1219.0596,16.7317},
	{1112.6946,-1279.7950,13.5322},
	{1195.4238,-1428.4999,13.2719},
	{1151.5778,-1607.9861,13.7813},
	{1249.4498,-1710.9374,13.3828},
	{1483.4686,-1733.5248,13.3828},
	{1568.9495,-1850.3403,13.3828},
	{1689.7102,-1764.2863,13.3828},
	{1761.0923,-1730.7655,13.3828},
	{1846.1188,-1752.2253,13.3828},
	{2048.3628,-1751.6432,13.3828},
	{2185.2002,-1736.8257,13.3750},
	{2263.3887,-1658.5081,15.2201},
	{2483.7041,-1669.7219,13.3359},
	{2454.2139,-1732.7047,13.4766},
	{2233.8174,-1732.6643,13.3828},
	{2199.8857,-1649.2726,15.2779},
	{2211.1272,-1477.2211,23.8190},
	{2227.3760,-1452.2050,23.8358},
	{2270.6101,-1438.0858,23.8281},
	{2241.9150,-1416.2784,23.8281},
	{2168.3645,-1337.8356,23.8281},
	{2195.7505,-1220.9460,23.8125},
	{2271.1450,-1188.8108,24.9961},
	{2228.6096,-1135.1045,25.6250},
	{1975.6503,-1099.8062,25.4112},
	{1843.0417,-1179.5222,23.6367},
	{1715.0651,-1272.2500,13.3828},
	{1699.5094,-1528.0724,13.3828}
};

new CarrosVendaModelos[] = {
	400,	402,	405,	409,	410,	411,	415,	429,	434,	436,	439,	445,	451,
	458,	461,	462,	463,	467,	468,	474,	475,	480,	496,	506,	507,	516,
	517,	521,	522,	533,	534,	535,	536,	540,	541,	550,	551,	558,	559,
	560,	562,	565,	581,	585,	587,	602,	603
};

new Float:CarrosVendaPos[][4] = {
	{563.0165,-1288.3673,17.0482,358.5501},
	{556.2867,-1288.1897,17.0482,358.7783},
	{548.9844,-1287.5002,17.0482,0.7674},
	{542.2426,-1287.7181,17.0422,1.4636},
	{535.2770,-1288.5321,17.0422,2.1568},
	{563.0725,-1279.3744,17.0516,0.793946},
	{556.3665,-1279.6246,16.9035,1.5179},
	{548.7620,-1279.5273,17.0547,1.1872},
	{542.2704,-1279.3419,16.8953,1.6472},
	{535.0467,-1280.2908,16.9693,1.8496}
};

new CarroVenda[sizeof CarrosVendaPos];

//Peixes

enum PeixeInfo
{
	PeixeNome[32],
	PeixeValor
}

new PeixesPesca[][PeixeInfo] = {
	{"Atum", 20},
	{"Bagre", 12},
	{"Barracuda", 11},
	{"Cavala", 12},
	{"Dourado", 14},
	{"Garoupa", 15},
	{"Namorado", 11},
	{"Pargo", 10},
	{"Pescada", 10},
	{"Robalo", 17},
	{"Tilápia", 17},
	{"Truta", 15},
	{"Salmão", 21}
};

//Dias
new DiaName[][] = {
	"Domingo",
	"Segunda-feira",
	"Terça-feira",
	"Quarta-feira",
	"Quinta-feira",
	"Sexta-feira",
	"Sábado"
};
new DiaNameGT[][] = {
	"Domingo",
	"Segunda-feira",
	"Tera-feira",
	"Quarta-feira",
	"Quinta-feira",
	"Sexta-feira",
	"Sbado"
};
//[Arrays necessárias]
new SkinsLadroes[] = {
	116,
	115,
	127,
	19,
	107,
	106
};
new SkinsPoliciais[] = {
	280,
	282,
	283,
	285
};
new Float:LadroesPos[][3] = {
	{-871.6448,-2213.6428,30.4920},
	{-921.7756,-2307.1833,54.1561},
	{-807.9471,-2210.8643,24.7928},
	{-965.0370,-2193.1489,41.9644},
	{-983.3970,-2421.8074,75.6219},
	{-797.1565,-2432.5356,83.2568},
	{-638.3835,-2264.6726,25.7041},
	{-722.7740,-2062.6951,7.4829},
	{-803.9843,-2077.7625,24.7095},
	{-781.5229,-1889.4730,8.6424},
	{-523.2393,-1872.7600,10.5943},
	{-737.4069,-2286.0640,34.1270},
	{-796.9286,-2277.1687,41.4843},
	{-737.4069,-2286.0640,34.1270},
	{-796.9286,-2277.1687,41.4843}
};
new Float:EntregaDrogaPos[10][3] = {
    {2013.2772,-1717.0242,13.5547},
	{1999.8834,-1114.8395,27.1318},
	{2249.8291,-1236.4523,25.6999},
	{2498.2324,-1642.6064,13.7826},
	{2069.0466,-1588.7394,13.4913},
	{1929.3640,-1917.4486,15.2568},
	{1734.5961,-2127.8760,13.5469},
	{1440.1974,-926.2419,39.6477},
	{876.4865,-968.6357,37.1875},
	{2101.3157,-1333.4294,25.5391}
};
new Float:EntregaSorvetePos[9][3] = {
	{2076.3848,-1733.0042,13.5469},
	{1176.6527,-1704.6572,13.8879},
	{962.9757,-1467.7639,13.4774},
	{816.9569,-1388.4523,13.6182},
	{760.6097,-1600.7350,13.4187},
	{2145.4211,-991.4246,61.7636},
	{2455.4146,-1096.6976,42.9169},
	{2808.9885,-1182.8438,25.3433},
	{2792.7083,-1944.9254,13.5469}
};
new Float:PosteDefeito[18][3] = {
	{848.2285,-1388.2196,13.3237},
	{1045.4771,-1251.6278,14.7071},
	{2011.5461,-1004.8133,30.5453},
	{2280.1265,-1282.6753,23.5943},
	{2350.2551,-1481.4891,23.5982},
	{2470.5903,-1683.2859,13.0831},
	{2450.1934,-1939.5814,13.1334},
	{2072.9294,-1878.8877,13.1433},
	{1831.4937,-1796.7869,13.1266},
	{510.2972,-1255.0681,15.6861},
	{412.4169,-1251.8536,51.3139},
	{1143.4722,-625.9899,103.4638},
	{2108.1741,-1744.7280,13.1551},
	{2379.0840,-1268.6937,23.6004},
	{2379.1836,-1268.7821,23.5997},
	{2762.4365,-1266.0337,54.9541},
	{2473.4529,-1028.1644,62.6553},
	{2418.0730,-1477.7163,23.5089}
};
new Float:PosCimento[3][3] = {
	{1263.7675,-1248.1825,14.0767},
	{2126.2158,-2149.6719,13.1058},
	{188.2019,-1416.9620,45.6156}
};
enum GPSInfo
{
	GPS_LocationName[50],
	Float:GPS_LocationX,
	Float:GPS_LocationY,
	Float:GPS_LocationZ
}

new GPSLocations[][GPSInfo] = {
    {"Delegacia",1535.4200,-1666.4794,13.3828},
	{"Sorveteria",1568.4116,-1880.2959,13.5469},
	{"Posto",1932.0693,-1765.6171,13.5469},
	{"Banco",1762.7281,-1665.8135,13.5613},
	{"Ammu-Nation",1362.3558,-1279.0985,13.3828},
	{"Hospital",1191.4152,-1313.4065,13.3984},
	{"Posto",1003.0652,-953.1113,42.1452},
	{"Hotel",1025.4990,-970.7648,42.3083},
	{"Banco",1372.8091,-1022.2424,26.5281},
	{"Skate",1860.2725,-1378.7266,13.5625},
	{"Emprego",1309.4923,-1382.2971,13.7309},
	{"Hotel",1864.3087,-1605.5023,13.5391},
	{"Aeroporto",1965.6682,-2172.5632,13.4233},
	{"Pay'n'Spray",2075.3633,-1830.1956,13.5545},
	{"Ammu-Nation",2397.4094,-1977.0671,13.3828},
	{"Boate",2410.9180,-1223.8486,24.7019},
	{"Desmanche",2530.2302,-1714.7545,13.4838},
	{"Lixao",2154.7485,-1977.6985,13.5513},
	{"Auto-Escola",1796.5983,-2067.2034,13.5721},
	{"Balada",1833.9900,-1681.7484,13.4503},
	{"COEVL",2125.6216,-2293.9382,13.4691},
	{"Pizzaria",2095.2544,-1806.9081,13.5514},
	{"Loteria",1736.9136,-1592.3561,13.5468},
	{"24/7",1315.5143,-908.7983,38.2960},
	{"Cavalos",1631.3163,-1167.5299,24.0781},
	{"Estadio",2692.5483,-1699.3090,10.4211},
	{"Propriedades",2866.1802,-1406.4285,10.9909},
	{"Bar",2311.9138,-1650.9624,14.3784},
	{"Restaurante",1477.4462,-1878.1508,13.5469},
	{"Concessionaria",556.4490,-1257.3784,17.2422},
	{"BurgerShot",820.0054,-1618.6536,13.5469},
	{"Pesca",723.6508,-1488.4236,1.9343},
	{"Cofre",1842.2422,-1866.5482,13.3897},
	{"Municao",1983.0643,-1988.2290,13.5469},
	{"Locadora",209.7955,-1453.7579,13.0892},
	{"Praia",585.0648,-1879.0148,4.1277},
	{"Morro",2187.5598,-1062.9542,48.1465},
	{"Ryder",2460.6907,-1688.0582,13.5285},
	{"Sweet",2519.9287,-1678.3815,14.8827},
	{"ECTVL",551.1316,-1504.6674,14.5329},
	{"Chaveiro",2489.1387,-1753.1366,13.5282},
	{"Binco",2245.2300,-1663.8357,15.4766},
	{"SubUrban",2111.6140,-1212.7043,23.9647},
	{"Victim",458.6580,-1500.4800,31.0444},
	{"DidierSachs",452.4577,-1479.4701,30.8395},
	{"ProLaps",497.9007,-1358.6243,16.5186},
	{"Entretenimentos",1019.2133,-1134.7303,23.8281},
	{"Customizacao",2128.1797,-1126.4047,25.5413},
	{"Tuning",1645.0659,-1836.9476,13.5444},
	{"BurgerShot",1208.9995,-932.5928,42.7141},
	{"Energia",2704.6921,-1970.6198,13.5469},
	{"Seguradora",1718.2874,-1297.6604,13.3906},
	{"Fazenda",-1051.2849,-1352.1267,129.9945},
	{"Donuts",1037.9948,-1339.9211,13.7352}
};

enum TerminalInfo
{
	tReference[128],
	Float:tX,
	Float:tY,
	Float:tZ,
	Float:trX,
	Float:trY,
	Float:trZ
}

new Float:TerminaisBusao[][TerminalInfo] = {
	{"Little Mexico, próximo à Loja de registros de cofres", 1828.061523, -1854.031982, 13.857317, 0.0000, 0.0000, 0.0000},
	{"Idlewood, próximo à Balada", 1827.968140, -1700.382568, 13.826067, 0.0000, 0.0000, 0.0000},
	{"Jefferson, próximo ao Hospital", 2003.6274, -1454.0461, 13.5547, 0.0000, 0.0000, 90.7234},
	{"Idlewood, próximo à Pizzaria", 2087.963135, -1805.338867, 13.826067, 0.0000, 0.0000, 0.0000},
	{"El Corona, próximo à Auto Escola", 1816.804688, -2061.778564, 13.826067, 0.0000, 0.0000, 180.0000},
	{"Aeroporto Internacional de Los Santos", 1696.759399, -2325.352051, 13.826067, 0.0000, 0.0000, 270.0000},
	{"Idlewood, próximo ao Posto", 1955.315552, -1772.132568, 13.826068, 0.0000, 0.0000, 180.0000},
	{"Idlewood, próximo à Loteria", 1725.196655, -1589.173096, 13.820795, 0.0000, 0.0000, 78.7500},
	{"Commerce, próximo à Delegacia", 1535.842285, -1685.996460, 13.826067, 0.0000, 0.0000, 0.0000},
	{"Commerce, próximo à Agência de Empregos", 1283.164673, -1389.052368, 13.705641, 0.0000, 0.0000, 90.0001},
	{"Marina, próximo à Cooperativa de Pesca", 761.212708, -1412.029419, 13.816420, 0.0000, 0.0000, 270.0000},
	{"Market, próximo à Estação do Metrô", 825.097534, -1333.522217, 13.826067, 0.0000, 0.0000, 270.0002},
	{"Mulholland, próximo à Locadora de Veículos", 206.554153, -1458.521118, 13.322271, 0.0000, 0.0000, 137.6557},
	{"Vinewood, próximo à Loja de Utilidades 24/7", 1306.920288, -915.607483, 39.208645, 6.0161, 2.5783, 89.1407},
	{"Downtown, próximo ao Banco", 1376.488525, -1028.575806, 26.934301, 0.0000, 0.0000, 33.7500},
	{"Commerce, próximo à Ammu Nation", 1364.005371, -1288.020752, 13.826067, 0.0000, 0.0000, 0.0000},
	{"City Hall, próximo ao Restaurante", 1499.170776, -1878.429932, 13.826067, 0.0000, 0.0000, 270.0000},
	{"Little Mexico, próximo à Sorveteria", 1575.034668, -1878.405029, 13.826067, 0.0000, 0.0000, 270.0006},
	{"Ganton, próximo ao Bar e loja de roupas Binco", 2298.719238, -1652.525757, 15.026630, 0.0000, 0.0000, 90.0000},
	{"Las Colinas, próximo à Loja de Customização", 2137.841309, -1120.728882, 25.710789, 0.0000, 0.0000, 258.7501},
	{"East Beach, próximo ao Banco e Corretora de Propriedades", 2869.511230, -1415.981079, 11.335597, 0.0000, 0.0000, 180.0002}
};

new Float:EntregarContrabandoCarro[4][3] = {
	{-2714.5276,1483.8269,7.3764},
	{-1746.6765,202.1463,3.1335},
	{-2420.3567,2314.0894,2.3943},
	{2313.7090,-2389.8708,2.7796}
};
new Float:EntregarContrabandoArma[4][3] = {
    {-2015.3627,897.3715,45.4453},
	{-2337.9707,577.8401,27.9782},
	{-2656.4023,202.7016,4.3359},
	{-2795.4751,-181.8443,7.1950}
};
new Float:ContrabandoEntregaDroga[4][3] = {
	{1368.2190,1897.0417,11.4688},
	{1687.5352,2124.2644,11.4609},
	{2043.7354,734.2840,11.4609},
	{2661.7920,746.2242,14.7396}
};
new Float:Caixas[][] = {
    {2316.2163,-12.7220,26.7422},
	{2316.2273,-7.0617,26.7422}
};
new Float:CarroCTC[41][4] = {
	{2668.4922,1206.6991,10.5474,180.3174},
	{2574.8108,1125.0209,10.5474,181.1967},
	{2228.4417,1137.2524,10.5474,107.9905},
	{1581.8627,898.6188,10.4179,183.3651},
	{1356.6176,1096.0950,10.5474,90.9337},
	{1151.9634,1524.1710,5.5472,178.9493},
	{1051.8745,1873.2301,10.5474,0.1983},
	{929.5215,2069.4702,10.4049,170.7763},
	{956.1917,2181.3809,10.3984,271.1207},
	{1100.7805,2091.2830,10.3898,358.9906},
	{1119.1703,2276.9883,16.2978,268.9280},
	{1076.0725,2924.0420,40.1449,261.4352},
	{1420.2354,2799.0095,10.4012,2.0092},
	{1749.8053,2879.6272,10.4106,272.9167},
	{2029.0978,2699.9490,10.3990,89.2702},
	{2139.7026,2835.4854,10.4048,268.5278},
	{2409.4907,2543.2065,21.4537,356.6750},
	{2494.9517,2317.8181,10.3983,0.8066},
	{2492.4773,2398.8542,3.7891,85.3324},
	{2641.2695,2410.6670,10.3988,180.1915},
	{2973.7959,2389.2285,24.9535,327.6482},
	{2844.4370,1650.3428,10.3926,0.7127},
	{2942.3459,1265.4744,32.6677,57.4269},
	{2295.8374,1511.2206,23.2092,175.9818},
	{2249.7029,1747.2190,10.4049,356.2835},
	{1882.2380,2017.3435,7.1733,270.9932},
	{2400.2312,1838.6890,5.5933,352.1205},
	{2221.5205,1945.2988,31.3601,358.3367},
	{1636.0177,2388.5591,10.5515,179.3788},
	{2003.7339,2258.2200,11.2394,270.4591},
	{2053.5474,2165.4058,10.3865,358.3701},
	{2568.7632,2175.4695,10.3901,265.5720},
	{2059.5950,2431.3452,27.5952,271.9005},
	{2107.2444,2415.5232,49.0883,182.6570},
	{1499.2971,2029.3713,10.3707,357.0333},
	{1598.0389,1170.1449,13.7844,267.0974},
	{1597.7311,2053.3071,10.2423,268.1779},
	{2308.8643,2452.9121,10.3853,280.0033},
	{2401.7202,2313.6318,7.7113,180.0397},
	{2470.2244,2336.0071,10.3688,352.2810},
	{2509.9971,1648.2078,10.3863,266.8287}
};

//Lixeiras
new Float:LixeirasCheckpoints[37][3] = {
	{1919.4543,-2088.9211,13.5816},
	{1920.1440,-2123.2827,13.5848},
	{1175.3402,-1878.8687,13.5765},
	{1093.4054,-1881.3174,13.5469},
	{1102.4594,-1876.7643,13.5469},
	{959.8318,-821.7481,96.4444},
	{974.5941,-814.8570,97.6700},
	{914.9440,-671.0176,117.1938},
	{1071.5637,-777.2383,107.2760},
	{2545.2141,-1035.6591,69.5822},
	{2527.9951,-1056.7031,69.5759},
	{2510.4429,-1030.7483,70.0345},
	{2426.7161,-1017.5425,54.3441},
	{2441.4590,-1979.9978,13.5469},
	{2382.4392,-1940.1761,13.5469},
	{2176.5598,-1344.8451,23.9844},
	{2224.2134,-1409.4204,24.0000},
	{1424.1855,-1319.8253,13.5547},
	{1420.2666,-1355.4493,13.5643},
	{1439.2612,-1324.7502,13.5458},
	{1604.3488,-1060.3590,23.9063},
	{1630.1682,-988.8309,24.0752},
	{1829.5371,-1113.9519,23.8766},
	{1786.1411,-1147.2623,23.8730},
	{1660.6748,-1201.4055,19.7935},
	{1592.9694,-1201.4099,19.8162},
	{1425.5841,-1080.7632,17.5580},
	{1435.4409,-1094.6079,17.5942},
	{1148.7889,-1386.2189,13.8293},
	{734.3256,-1341.2900,13.5255},
	{1322.0441,-1236.9178,13.5469},
	{1461.8387,-1488.1692,13.5469},
	{1537.7135,-1479.5881,9.5000},
	{1516.4315,-1849.2903,13.5469},
	{1420.4170,-1844.5044,13.5469},
	{1338.2338,-1815.8656,13.5502},
	{1337.4501,-1773.7675,13.5469}
};
new Float:EntregaEncomendasTaxi[53][3] = {
	{1023.3193,-1125.0292,23.8719},
	{1035.3483,-1027.7242,32.1016},
	{997.7001,-920.2786,42.1797},
	{1087.9800,-926.0046,43.1797},
	{1271.4055,-1124.3602,24.1640},
	{1094.5492,-1274.5090,13.5469},
	{1037.7136,-1337.2614,13.7266},
	{876.2636,-1568.4443,13.5391},
	{796.8984,-1579.8813,13.5469},
	{785.9008,-1465.0836,13.5436},
	{816.0295,-1387.5964,13.6118},
	{669.1234,-1275.6089,13.4609},
	{500.9050,-1357.1658,16.1328},
	{555.1962,-1508.6337,14.5622},
	{641.4086,-1714.1398,14.3166},
	{387.0148,-1805.3558,7.8301},
	{820.6284,-1758.5817,13.6484},
	{932.6960,-1745.5724,13.5469},
	{1080.6591,-1700.9806,13.2757},
	{1155.6205,-1769.0054,16.5938},
	{1318.3008,-1708.7841,13.5469},
	{1410.4291,-1879.6432,13.5469},
	{1562.6234,-1846.2426,13.5469},
	{1361.4764,-1422.4449,13.1951},
	{1458.5593,-1139.7008,24.0659},
	{1891.8279,-1129.4463,24.2717},
	{2022.4855,-1055.6624,24.7938},
	{2027.8937,-1078.2904,24.6440},
	{2074.1445,-1784.2678,13.5469},
	{1843.4430,-1867.5938,13.3897},
	{1954.8846,-2021.1653,13.5469},
	{1939.6663,-2105.8555,13.5597},
	{2150.9167,-1901.1116,13.5488},
	{2162.0325,-1744.6001,13.5469},
	{2266.7170,-1664.4152,15.3939},
	{2416.0222,-1757.8054,13.3828},
	{2416.6648,-2089.4158,13.1563},
	{2328.6907,-2315.3494,13.5469},
	{1651.2266,-1562.7955,13.5469},
	{1697.6094,-1521.5769,13.3828},
	{1596.9448,-1310.2590,17.4531},
	{1786.9749,-1258.7664,13.3766},
	{2230.9741,-1379.8506,23.8281},
	{2352.1042,-1515.4762,24.0008},
	{2520.5256,-1468.9493,23.7114},
	{2400.9146,-1246.1912,23.8347},
	{2505.1123,-1338.9939,31.3089},
	{2683.4758,-1444.3765,30.5303},
	{2635.1135,-1343.8804,35.9469},
	{2438.5122,-1190.0626,36.4193},
	{2804.4319,-1285.6212,42.9855},
	{2824.8740,-1613.9175,10.9219},
	{2794.3599,-1822.2990,9.8989}
};
new Float:EntregaPizza[][3] = {
	{667.4611,-1768.2632,13.6395},
	{206.8691,-1769.8591,4.3528},
	{476.1749,-1279.7399,16.4891},
	{725.3467,-998.7245,52.7344},
	{688.4912,-1052.6003,50.0404},
	{471.1869,-1165.1737,67.1114},
	{299.4418,-1155.4586,80.9099},
	{1109.8466,-965.3030,42.7156},
	{1250.4656,-814.9561,84.1478},
	{1094.9318,-647.0628,113.6484},
	{1045.5042,-642.3704,120.1172},
	{944.5483,-707.0009,122.2109},
	{785.9003,-826.5245,70.2896},
	{786.7748,-1436.6754,13.5563},
	{761.2948,-1601.4784,13.3963},
	{791.3557,-1759.9124,13.3795},
	{959.2263,-1805.2899,14.2764},
	{1328.2424,-1272.9170,13.5469},
	{1095.1053,-1271.9298,13.5469},
	{972.0071,-1309.1213,13.3828},
	{645.5919,-1353.4913,13.5469},
	{461.3967,-1529.1140,29.9626},
	{480.3898,-1415.5505,16.9723},
	{1016.4984,-1537.2197,13.5189},
	{1247.9326,-1562.5531,13.6183},
	{1653.8300,-1485.2672,13.3828},
	{1565.9774,-1168.3051,24.0781},
	{1641.5500,-1170.2367,24.0781},
	{1791.1555,-1165.0851,23.8281},
	{1893.0699,-1127.8049,24.3029},
	{1933.5380,-1127.7698,25.3210},
	{2060.4194,-1076.7515,24.8981},
	{2288.0876,-1079.5088,47.5459},
	{2153.5376,-1013.3929,62.9425},
	{2049.1118,-985.5848,44.5556},
	{2399.9370,-1144.3446,29.6275},
	{2802.2549,-1086.2662,30.7238},
	{2714.1917,-1116.2172,69.5781},
	{2756.3625,-1178.7412,69.4011},
	{2775.8726,-1248.9669,49.2383},
	{2804.6245,-1302.6187,38.9612},
	{2714.8755,-1468.6206,30.5460},
	{2762.4402,-1978.8011,13.5475},
	{2674.3159,-2012.6364,13.5547},
	{2653.7363,-1995.4392,13.5547},
	{2507.9199,-2017.8193,13.5469},
	{2241.7156,-1885.1985,13.5469},
	{2007.9795,-1704.7460,13.5469},
	{2238.5420,-1645.5743,15.4854},
	{2452.7036,-1649.8158,13.4427},
	{2206.6975,-1410.6456,23.9844},
	{2196.6240,-1470.1097,25.4775},
	{2150.2930,-1290.0696,23.9850},
	{2078.5088,-1202.1044,23.9135},
	{2131.2275,-1148.2389,24.3877}
};
new Float:AzulEquipe[12][3] = {
	{2171.8464,713.1972,10.6719},
	{2180.8342,713.3547,10.6719},
	{2191.4609,713.5405,10.6719},
	{2205.0579,713.7786,10.6719},
	{2220.4702,713.6301,10.6719},
	{2235.9902,713.6530,10.6719},
	{2250.7075,713.4274,10.6719},
	{2261.0798,713.4387,10.6719},
	{2267.6699,632.9584,10.6719},
	{2224.4556,633.4627,10.6719},
	{2200.3901,632.9679,10.6719},
	{2175.0718,632.7612,10.6719}
};
new Float:LaranjaEquipe[12][3] = {
	{2311.1377,711.9603,10.6719},
	{2343.3589,713.1957,10.6719},
	{2359.2310,712.6921,10.6719},
	{2372.4932,712.9538,10.6719},
	{2383.5713,712.9311,10.6719},
	{2397.8135,713.3541,10.6719},
	{2407.5864,713.0441,10.6719},
	{2430.3333,707.4073,10.7679},
	{2427.2654,662.8263,10.6797},
	{2404.2920,633.4774,10.6719},
	{2364.3040,633.0352,10.6719},
	{2349.9368,633.5334,10.6719}
};
new Float:MaterialGeral[32][3] = {
	{2276.7805,2792.2209,11.4132},
	{2867.6741,2587.1086,11.2717},
	{2789.8125,2581.5967,11.4076},
	{2788.3848,1976.5139,11.4002},
	{2767.2917,1430.3484,11.0297},
	{1699.5713,932.0217,11.4064},
	{1482.0475,1029.7655,11.4041},
	{1105.0337,1926.7305,10.5474},
	{1049.1306,2134.0002,10.5473},
	{2485.1016,-2118.3237,13.2740},
	{2173.9971,-2278.9578,13.2070},
	{2200.5720,-2302.4646,14.4918},
	{2079.4766,-2034.2172,13.2739},
	{-59.4326,-1135.3506,0.8052},
	{132.7787,-275.9363,1.5781},
	{-575.1917,-497.0947,25.5234},
	{-188.6011,-279.2888,2.1525},
	{-112.9081,-328.3716,2.1595},
	{-1573.1852,-2737.4255,48.2643},
	{-2098.2527,-2241.5991,30.3522},
	{-2124.7537,-95.1831,35.0474},
	{-1831.8756,161.7327,14.8443},
	{-1726.8512,-124.4487,3.2790},
	{2770.4475,-2511.1726,13.2162},
	{2612.7383,-2225.4827,12.9616},
	{2249.1465,-2641.5596,13.1596},
	{2208.6328,-2644.1208,13.1365},
	{-83.0790,91.2185,3.1172},
	{686.7947,1729.0151,6.7192},
	{-295.2475,1776.8915,42.4146},
	{-1204.5481,1821.3715,41.8111},
	{1992.3278,2075.2271,10.9127}
};
new Float:GasCami[16][3] = {
	{78.7559,1217.7043,18.5619},
	{250.5986,1394.6223,10.3130},
	{648.2774,1688.6320,6.7193},
	{-1307.0088,2688.7847,50.1549},
	{2146.3752,2747.7520,10.9125},
	{2202.2908,2474.5410,10.9127},
	{2639.8176,1106.0364,10.9127},
	{2112.1296,920.4982,10.9127},
	{1937.0416,-1771.6200,13.4751},
	{-91.8008,-1170.4994,2.4884},
	{-1606.9624,-2713.7676,48.5391},
	{-1675.1785,414.5792,7.1797},
	{-2404.0574,979.5306,45.0239},
	{1595.5406,2198.0520,10.3863},
	{608.5971,1699.6238,6.9922},
	{-1470.0050,1863.2375,32.3521}
};
new Float:DrogasAbastecer[4][3] = {
	{-1329.5159,2499.2334,87.0469},
	{-2549.3452,2227.9382,4.7114},
	{-1429.8599,2185.9900,50.4650},
	{-426.7101,2258.0132,42.4297}
};
new Float:DeixandoDrogas[2][3] = {
	{2273.0935,-1042.1615,50.2367},
	{2298.5928,-1781.8463,13.5538}
};
new Float:Latinhas[37][3] = {
	{1919.4543,-2088.9211,13.5816},
	{1920.1440,-2123.2827,13.5848},
	{1175.3402,-1878.8687,13.5765},
	{1093.4054,-1881.3174,13.5469},
	{1102.4594,-1876.7643,13.5469},
	{959.8318,-821.7481,96.4444},
	{974.5941,-814.8570,97.6700},
	{914.9440,-671.0176,117.1938},
	{1071.5637,-777.2383,107.2760},
	{2545.2141,-1035.6591,69.5822},
	{2527.9951,-1056.7031,69.5759},
	{2510.4429,-1030.7483,70.0345},
	{2426.7161,-1017.5425,54.3441},
	{2441.4590,-1979.9978,13.5469},
	{2382.4392,-1940.1761,13.5469},
	{2176.5598,-1344.8451,23.9844},
	{2224.2134,-1409.4204,24.0000},
	{1424.1855,-1319.8253,13.5547},
	{1420.2666,-1355.4493,13.5643},
	{1439.2612,-1324.7502,13.5458},
	{1604.3488,-1060.3590,23.9063},
	{1630.1682,-988.8309,24.0752},
	{1829.5371,-1113.9519,23.8766},
	{1786.1411,-1147.2623,23.8730},
	{1660.6748,-1201.4055,19.7935},
	{1592.9694,-1201.4099,19.8162},
	{1425.5841,-1080.7632,17.5580},
	{1435.4409,-1094.6079,17.5942},
	{1148.7889,-1386.2189,13.8293},
	{734.3256,-1341.2900,13.5255},
	{1322.0441,-1236.9178,13.5469},
	{1461.8387,-1488.1692,13.5469},
	{1537.7135,-1479.5881,9.5000},
	{1516.4315,-1849.2903,13.5469},
	{1420.4170,-1844.5044,13.5469},
	{1338.2338,-1815.8656,13.5502},
	{1337.4501,-1773.7675,13.5469}
};
new Float:InDrive[4][3] = {
	{2409.651, -1488.65, 23.8281},
	{2377.733, -1909.27, 13.3828},
	{801.5522, -1628.91, 13.3828},
	{1209.958,-896.7405, 42.9259}
};

enum MapIconInfo
{
    miModel,
	Float:miX, Float:miY, Float:miZ
}

new Float:MapIcons[][MapIconInfo] = {
    {30,	1556.1224,		-1629.2106,		13.1586},
	{22,	1181.4885,		-1309.3250,		13.4093},
	{19,	2107.1155,		-1068.3652,		25.6829},
	{22,	2031.4415,		-1415.3073,		16.9922},
    {52,	1771.7144,		-1655.8201,		14.4236},
	{52,	1386.0540,		-1015.7602,		26.6676},
	{52,	419.7245,		-1428.6298,		32.4797},
	{52,	2862.3201,		-1440.2727,		10.9410},
	{23,	-2431.5830,		1544.0275,		32.0368},
	{36,	1776.8333,		-2049.3662,		13.5644},
	{11,	623.3184,		860.1561,		-42.9534},
	{27,	2644.6877,		-2038.3588,		13.5500},
	{43,	-2180.8816,		610.9266,		35.1641},
	{23,	2197.3296,		-1999.1161,		19.5405},
	{16,	1480.7003,		-1758.4271,		17.5313},
	{36,	1776.8333,		-2049.3662,		13.5644},
	{9,		565.8999,		-2304.5605,		0.2333},
	{27,	1041.6371,		-1028.2263,		31.6374},
	{17,	1567.7448,		-1882.4926,		13.1481},
	{61,	1309.2073,		-1374.3125,		13.6252},
	{55,	213.2892,		-1437.2351,		13.2062},
	{29,	2098.7305,		-1804.9253,		13.5548},
	{48,	1873.1766,		-1683.9338,		57.7960},
	{49,	2316.2393,		-1638.8606,		18.5078},
	{25,	1733.8523,		-1586.3459,		13.5553},
	{27,	2128.1797,		-1126.4047,		25.5413},
	{25,	1633.1495,		-1170.9047,		24.0781},
    {31,	2861.6653,		-1405.8640,		11.7344},
    {42,	243.5183,		66.3445,		1003.6406},
    {50,	1477.3245,		-1880.2889,		13.5469},
    {18,	1990.3060,		-1990.8094,		13.5469},
	{24,	1828.2477,		-1842.6029,		13.5781},
	{55,	1945.2451,		-1770.4231,		13.2434},
	{5,		1767.2935,		-2286.3599,		26.7960},
	{30,	1175.6183,		-1799.5095,		33.6363},
	{31,	873.7300,		-1628.3906,		28.0000},
	{9,		725.4943,		-1440.3260,		17.6953},
	{60,	697.7910,		-1353.5240,		28.9446},
	{42,	552.5939,		-1506.7219,		14.5530},
	{31,	299.9258,		-1517.2720,		24.6007},
	{45,	454.9222,		-1493.9830,		31.0979},
	{55,	540.7327,		-1297.7850,		32.5406},
	{45,	501.3290,		-1355.7961,		16.1328},
	{55,	1002.4153,		-935.5881,		48.2118},
	{31,	984.9221,		-987.2853,		53.2734},
	{24,	1316.6016,		-887.8411,		45.2266},
	{19,	2531.9443,		-1715.5150,		13.4909},
	{12,	2491.0833,		-1758.7891,		13.5469},
	{21,	2401.6462,		-1707.7507,		19.0884},
	{51,	2180.4106,		-2302.6389,		13.5469},
	{5,		1675.8083,		-2460.5801,		13.5547},
	{56,	2116.3132,		-2274.6536,		20.6760},
	{12,	1845.9636,		-1868.8071,		13.5781},
	{31,	1909.5448,		-1599.1969,		14.1250},
	{45,	2244.9802,		-1663.0822,		15.4766},
	{45,	2112.2898,		-1213.2855,		23.9655},
	{53,	1022.6393,		-1123.2445,		23.8705},
	{24,	1349.8267,		-1750.8270,		13.3647},
	{56,	2860.3782,		1290.6302,		11.3906},
	{56,	1433.7727,		2628.5234,		11.3926},
	{56,	-186.2648,		1275.5463,		23.7654},
	{56,	-1950.9318,		135.3958,		26.2813},
	{56,	820.8814,		-1363.4440,		-0.5078},
	{56,	1745.6970,		-1950.3359,		14.1172},
	{38,	1737.0745,		-1270.8171,		13.5449},
	{24,	1037.9948,		-1339.9211,		13.7352},
	{27,    1653.8280,		-1837.3652,		13.5465}
};

new SucosName[][] = {
	"Laranja",
	"Abacaxi",
	"Acerola",
	"Mamão",
	"Limão",
	"Morango",
	"Uva",
	"Maracuja",
	"Framboesa"
};

enum ComidaInfo
{
	ComidaName[32],
	ComidaValor
}

new Comidas[][ComidaInfo] = {
	{"Feijoada", 40},
	{"Lagosta Gourmet", 220},
	{"Camarão", 140},
	{"Peixe Frito", 120},
	{"Filé", 80},
	{"Salmão", 140},
	{"Batata Frita", 80},
	{"Sopa", 20},
	{"Frango Assado", 100}
};

enum BebidaInfo
{
	BebidaName[32],
	BebidaValor
}

new Bebidas[][BebidaInfo] = {
	{"Coca-Cola", 30},
	{"Sprite", 30},
	{"Cerveja", 35},
	{"Fanta", 30},
	{"Vinho", 100},
	{"Suco com leite", 40},
	{"Suco com agua", 35}
};

enum SobremesaInfo
{
	SobremesaName[32],
	SobremesaValor
}

new Sobremesas[][SobremesaInfo] = {
	{"Pudim de chocolate", 50},
	{"Sorvete", 50},
	{"Bolo de chocolate", 60},
	{"Bomba de chocolate", 40},
	{"Brigadeiro", 40}
};

new HorarioTrabalho[][14] = {
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0},//Invalida
	{0,0,6,18,6,18,6,18,6,18,6,18,6,12},//Desempregado
	{0,0,7,20,7,20,7,20,7,20,0,0,7,20},//Barman
	{0,0,6,23,6,23,6,23,6,23,6,23,6,18},//Motorista de Onibus
	{0,0,6,18,6,18,6,18,6,18,6,18,6,14},//Pescador
	{0,0,12,21,12,21,12,21,12,21,12,21,12,21},//Entregador de Pizzas
	{0,0,7,20,7,20,7,20,7,20,7,20,7,20},//Taxista
	{0,0,7,20,7,20,7,20,7,20,7,20,7,21},//Moto-Taxista
	{0,0,7,22,7,22,7,22,7,22,7,20,7,15},//Motorista Particular
	{0,0,6,23,6,23,6,23,6,23,6,23,6,23},//Pedreira
	{0,0,6,18,6,18,6,18,6,18,6,18,6,18},//Lixeiro
	{0,24,0,24,0,24,0,24,0,24,0,24,0,24},//Assassino
	{0,0,0,20,0,20,0,20,0,16,0,16,0,20},//Segurança
	{0,0,7,20,7,20,7,20,7,20,7,20,7,14},//Jornalista
	{0,0,4,15,4,15,4,15,4,15,4,15,4,10},//Agricultor
	{0,0,0,24,0,24,0,24,0,24,0,24,0,24},//Prostituta
	{0,24,0,24,0,24,0,24,0,24,0,24,0,24},//Traficante
	{0,24,0,24,0,24,0,24,0,24,0,24,0,24},//Caminhoneiro
	{5,20,5,20,5,20,5,20,5,20,5,20,5,16},//Paramédico
	{0,0,0,13,0,13,13,21,13,21,13,21,13,21},//Cop Militar
	{0,0,7,20,7,20,7,20,7,20,7,20,9,18},//Vendedor de Armas
	{0,0,7,19,7,19,7,19,7,19,7,19,7,15},//Mecânico
	{0,0,7,21,7,21,7,21,7,21,7,21,7,21},//Frentista
	{0,0,0,15,0,15,0,15,0,15,0,15,0,15},//Cop Rodoviário
	{0,0,7,20,7,20,7,20,7,20,7,20,5,17},//Contrabandista
	{0,0,6,20,6,20,6,20,6,20,6,20,6,20},//Assaltante
	{0,0,8,24,8,24,8,24,8,24,8,24,0,0},//Locador de Carros
	{0,0,8,19,8,19,8,19,8,19,8,19,8,19},//Instrutor
	{0,0,9,18,9,18,9,18,9,18,9,18,9,18},//Advogado
	{0,0,0,24,0,24,0,24,0,24,0,24,0,0},//Cop Swat
	{0,0,6,19,6,19,0,0,6,19,6,19,6,15},//Vendedor de carros
	{0,0,6,19,6,19,6,15,6,19,6,19,0,0},//Corretor de imóveis
	{0,0,7,19,7,19,7,19,7,19,7,19,7,19},//Juiz
	{0,24,0,24,0,24,0,24,0,24,0,24,0,24}//Delegado
};


enum ProfInfo
{
	ProfName[64],
	ProfXpoint,
	ProfLevel,
	ProfPay,
	ProfColor,
	ProfSkin
}

new Profissoes[][ProfInfo] = {
	{"Null", 						10, 	0, 		0, 		COLOR_UNLOGGED, 				0},
	{"Desempregado",				5, 		0, 		80, 	COLOR_DESEMPREGADO, 			0},
	{"Barman", 						7, 		0, 		120, 	COLOR_BARMAN, 					171},
	{"Motorista de Onibus",     	5,      0,      160,    COLOR_MOTORISTA_DE_ONIBUS,      112},
	{"Pescador",                	7,      0,      110,    COLOR_PESCADOR,                 35},
	{"Entregador de Pizza",     	7,      0,      130,    COLOR_ENTREGADOR_PIZZA,         155},
	{"Taxista",                 	7,      0,      150,    COLOR_TAXISTA,                  234},
	{"Moto-Taxista",            	7,      0,      150,    COLOR_MOTO_TAXISTA,             52},
	{"Motorista Particular", 		7, 		10, 	200, 	COLOR_MOTORISTA_PARTICULAR, 	255},
	{"Lixeiro",                 	7,      10,     180,    COLOR_LIXEIRO,                  137},
	{"Carregador da Pedreira",      10,     10,     240,    COLOR_PEDREIRA,                 27},
	{"Assassino", 					10, 	20, 	300, 	COLOR_ASSASSINO, 				127},
	{"Seguranca", 					7, 		20, 	200, 	COLOR_SEGURANÇA, 				164},
	{"Jornalista",              	10,     20,     380,    COLOR_JORNALISTA,               37},
	{"Agricultor",                  10,     25,     200,    COLOR_AGRICULTOR,               159},
	{"Prostituta",                  8,      25,     350,    COLOR_PROSTITUTA,               246},
	{"Traficante",              	5,      40,     200,    COLOR_TRAFICANTE,               28},
	{"Caminhoneiro",            	10,     35,     280,    COLOR_CAMINHONEIRO,             95},
	{"Paramedico",              	9,      30,     320,    COLOR_PARAMEDICO,               276},
	{"Policial Militar",        	8,      50,     300,    COLOR_COP_MILITAR,              282},
	{"Vendedor de Armas",           7,      45,     400,    COLOR_VENDEDOR_DE_ARMAS,        179},
	{"Mecanico",                    7,      50,    	180,    COLOR_MECANICO,                 50},
	{"Frentista",                   6,      50,     450,    COLOR_FRENTISTA,                59},
	{"Policial Rodoviario",     	8,      60,     300,    COLOR_COP_RODOVIARIO,           283},
	{"Contrabandista",              9,      60,     200,    COLOR_CONTRABANDISTA,           127},
	{"Assaltante",                  9,      60,     200,    COLOR_ASSALTANTE,               19},
	{"Instrutor de Direcao",    	6,      70,     350,    COLOR_INSTRUTOR,                188},
	{"Advogado",                	6,      80,     1000,   COLOR_ADVOGADO,                 147},
	{"Policial SWAT",           	9,      90,     800,    COLOR_COP_SWAT,                 285},
	{"Vendedor de Carros", 			9, 		70, 	300, 	COLOR_VENDEDOR_DE_CARROS, 		187},
	{"Corretor de Imoveis", 		6, 		70, 	300, 	COLOR_CORRETOR, 				59},
	{"Juiz",                    	10,     130,    1000,   COLOR_JUIZ,                     59},
	{"Delegado",                	10,     160,    1000,   COLOR_DELEGADO,                 125}
};

enum rank_t
{
    rank_name[64],
    rank_pay
}

new rank_t:Ranks[][] = {
	{{"Vagabundo", 90},
    {{"Novato", 200}, {"Profissional", 400}, {"Supervisor", 700}, {"Chefe dos Barmans", 1000}},
	{{"Iniciante", 300}, {"Experiente", 450}, {"Profissional", 600}, {"Administrador Geral", 900}},
	{{"Novato", 300}, {"Experiente", 500}, {"Profissional", 800}, {"Chefe dos Pescadores", 1200}},
};

new ProfRank[][] = {
	{"Vagabundo"},
	{"Novato", "Profissional", "Supervisor", "Chefe dos Barmans"},
	{"Iniciante", "Experiente", "Profissional", "Administrador Geral"},
	{"Novato", "Experiente", "Profissional", "Chefe dos Pescadores"},
	{"Pizaiolo", "Profissional", "Supervisor", "Chefe dos Entregadores"},
	{"Aprendiz", "Profissa", "Profissional", "Chefe dos Taxistas"},
	{"Aprendiz", "Profissa", "Profissional", "Chefe dos Moto-Taxistas"}
};
new SalariosProf[][] = {
	{300,},
	{200, 400, 700, 1000},
	{300, 450, 600, 900},
	{300, 500, 800, 950},
	{390, 700, 900, 1200},
	{300, 400, 800, 1000},
	{350, 500, 900, 1200}
};
	
new Float:Hospitais[][4] = {
	{1173.5842,-1324.5615,15.1953,15.19},
	{2031.9415,-1404.3578,17.2614,17.2614}
};

new WeatherName[][] = {
	"Super ensolarado, 40 graus",
	"Ensolarado, 30 graus",
	"Super ensolarado, com smog, 35 graus",
	"Ensolarado, com smog, 29 graus",
	"Nublado, 25 graus",
	"Ensolarado, 30 graus",
	"Super ensolarado, 40 graus",
	"Nublado, 25 graus",
	"Tempestade, ventos fortes e trovões, 20 graus",
	"Neblina, 15 graus",
	"Ensolarado, 35 graus",
	"Super ensolarado, 45 graus",
	"Nublado, 30 graus",
	"Super ensolarado, 38 graus",
	"Ensolarado, 28 graus",
	"Nublado, 24 graus",
	"Chuvoso, 22 graus",
	"Super ensolarado, 50 graus",
	"Ensolarado, 40 graus",
	"Tempestade de areia, 45 graus"
};
//Sabores

enum SaborInfo2
{
	SaborName2[32],
	SaborValor2
}

new Sabores2[][SaborInfo2] = {
	{"Napolitano", 32},
	{"Chocolate", 25},
	{"Flocos", 30}
};

enum SaborInfo
{
	SaborName[32],
	SaborValor
}

new Sabores[][SaborInfo] = {
	{"Milho verde", 50},
	{"Morango", 50},
	{"Leite Condensado", 70},
	{"Flocos", 50},
	{"Creme", 40},
	{"Abacaxi", 50},
	{"Chocolate", 70},
	{"Limão", 40},
	{"Tutti-Fruti", 50}
};

//Donuts

enum DonutInfo
{
	DonutName[64],
	DonutValue
}

new Donuts[][DonutInfo] = {
	{"Chocolate", 60},
	{"Morango", 70},
	{"Creme", 50},
	{"Brigadeiro", 70},
	{"Castanha com chocolate", 70},
	{"Glaceado", 60},
	{"Creme de baunilha", 60},
	{"Baunilha com nozes", 70},
	{"Banana com canela", 70}
};

//Lunchs

enum LunchInfo
{
	LunchName[64],
	LunchValue
}

new Lunchs[][LunchInfo] = {
	{"X-Salada", 30},
	{"X-Burger", 40},
	{"X-Bacon", 40},
	{"X-Frango", 30},
	{"X-Tudo", 50},
	{"Cachorro quente", 50}
};

//Armas

enum armasvalornomeinfo
{
	Info_ArmaNome[40],
	Info_ArmaValor,
	Info_Municao
}

new RPGWeapons[][armasvalornomeinfo] = {
	{"Mão livre", 0, 0},
	{"Soco Inglês", 500 , 1},
	{"Taco de Golfe", 600, 1},
	{"Cacetete", 250, 1},
	{"Faca", 300, 1},
	{"Taco de Baseball", 200, 1},
	{"Shovel", 200, 1},
	{"Taco de Sinuca", 300, 1},
	{"Katana", 1000, 1},
	{"Motosserra", 5000, 1},
	{"Vibrador roxo de duas pontas", 100, 1},
	{"Vibrador branco grande", 100, 1},
	{"Vibrador branco médio", 100, 1},
	{"Vibrador prata pequeno", 100, 1},
	{"Flores", 50, 1},
	{"Bengala", 100, 1},
	{"Granada", 400, 1},
	{"Bomba de gás", 300, 1},
	{"Molotov", 0, 0},
	{"Lança Foguetes", 0, 0},
	{"Lança-Foguetes Tele-guiado", 0},
	{"Hydra Rocket", 0, 0},
	{"Pistola", 0, 0},
	{"Silenced Pistol", 800, 100},
	{"Desert Eagle", 1500, 100},
	{"Escopeta Calibre 12", 1800, 90},
	{"Escopeta de Cano Serrado", 0, 0},
	{"Escopeta de Combate", 5500, 100},
	{"Micro Uzi", 0, 0},
	{"MP5", 6000, 800},
	{"AK47", 7000, 400},
	{"M4", 7000, 400},
	{"Tec9", 0, 0},
	{"Country Rifle", 4000, 200}
};

new BotNames[][] = {
	"Carl",
	"Rocky",
	"Pepe",
	"Arnoldo",
	"SgtPepper",
	"Pepsi",
	"Pepno",
	"Azucar",
	"Vino_Toro",
	"Zoquete",
	"Pacman",
	"Batman",
	"AquilesBrinco",
	"Manfrey",
	"Papirola",
	"Sopapeala",
	"com1",
	"com2",
	"tcom1",
	"tcom2",
	"tcom3",
	"tcom4",
	"tcom5",
	"tcom6",
	"tcom7",
	"tcom8",
	"tcom9",
	"lpt1",
	"lpt2",
	"lpt3",
	"lpt4",
	"lpt5",
	"lpt6",
	"lpt7",
	"lpt8",
	"lpt9",
	"clock$",
	"nul",
	"aux",
	"prn",
	"con",
	"[ViP]Labrik",
	"Sonny",
	"[MT]Lavis",
	"NONE",
	"NULL",
	"Servidor"
};
enum StationsInfo {
	Station_Name[128],
	Float:Station_PosX,
	Float:Station_PosY,
	Float:Station_PosZ,
	SecondsArrival
}

new Metro[MAX_SLOTS] = 0;
new InStation[MAX_SLOTS] = 0;
new SubwayStation;
new SubwayProgress;
new Stations[][StationsInfo] = {
	{"Market Station LS", 819.7728,-1364.8926,-0.5078, 13},
	{"Unit Station LS", 1745.6970,-1950.3359,14.1172, 12},
	{"Linden Station LV", 2861.5129,1289.6265,11.3906, 10},
	{"Yellow Bell LV", 1431.8015,2624.4580,11.3926, 13},
	{"Pedreira Station Deserto", 600.0473,1279.9647,11.8005, 15},
	{"FC Station Deserto", -185.2809,1276.3049,23.6776, 10},
	{"Cranberry Station SF", -1951.4181,137.9728,26.2813, 10},
	{"Fazenda Station SF", -1051.2849, -1352.1267, 129.9945, 14}
};

enum PickupsArguments {
	pickupmodel,
	pickuptype,
	Float:pickupposx,
	Float:pickupposy,
	Float:pickupposz
}

new Float:Pickups[][PickupsArguments] = {
	{362,1,1420.2501,2881.3828,10.8203},//0
	{350,1,-1609.9634,674.0835,-5.2422},//1
	{356,1,-1608.0623,674.1035,-5.2422},//2
	{355,1,-1603.5215,674.7878,-5.2422},//3
	{348,1,-1609.7281,679.0164,-5.2422},//4
	{357,1,-1608.2559,678.6394,-5.2422},//5
	{372,1,-1606.7788,678.6942,-5.2422},//6
	{353,1,-1603.8494,678.8831,-5.2422},//7
	{343,1,-1605.1569,678.0090,-5.2422},//8
	{1272,1,-1600.4955,863.6196,7.6875},//9
	{1240,1,-2655.5859,637.5977,14.4531},//10
	{1253,1,-318.5863,1535.5477,75.5625},//11
	{367,1,-312.4564,1515.9036,75.3594},//12
	{1273,1,2218.8909,-1144.5692,25.7929},//13
	{1273,1,1027.2871,-972.7601,42.5321},//14
	{1273,1,329.0426,-1515.0957,35.8672},//15
	{1273,1,892.0764,-1644.6343,13.5469},//16
	{1273,1,1909.8356,-1601.7092,13.5482},//17
	{1273,1,1863.7584,-1601.7079,13.5443},//18
	{1243,1,1389.0552,1768.4464,10.8203},//19
	{1244,1,-1248.6545,-96.2660,14.1484},//20
	{1244,1,1422.8640,-2432.5745,13.0956},//21
	{1318,1,1846.6281,-1868.1149,13.5781},//22
	{1318,1,1494.4365,1305.2708,1093.2891},//23
	{1274,1,1771.7144,-1655.8201,14.4236},//24
	{1274,1,1386.0540,-1015.7602,26.6676},//25
	{1274,1,419.7245,-1428.6298,32.4797},//26
	{1274,1,2862.3201,-1440.2727,10.9410},//27
	{1274,1,2306.8198,-16.0497,26.7496},//28
	{1212,1,2316.3098,-12.5673,26.7422},//29
	{1212,1,2316.3083,-10.0476,26.7422},//30
	{1212,1,2316.2732,-7.2987,26.7422},//31
	{1274,1,2309.4019,-1.9465,26.7422},//32
	{1318,1,1990.3060,-1990.8094,13.5469},//33
	{1318,1,315.6061,-127.8440,1004.0625},//34
	{1318,1,2459.0925,-1690.8879,13.5506},//35
	{1318,1,2462.8713,-1698.1802,1013.5078},//36
	{1318,1,2521.4871,-1679.4111,15.4272},//37
	{1318,1,2525.4128,-1679.2469,1015.4986},//38
	{1318,1,243.5183,66.3445,1003.6406},//39
	{1318,1,245.7224,109.9319,1003.2188},//40
	{1318,1,-2158.9731,642.4365,1052.3817},//41
	{1318,1,1735.8115,-1587.6827,13.5422},//42
	{1318,1,1310.4824,-1368.2488,13.5471},//43
	{1318,1,389.0653,173.7855,1008.3828},//44
	{1318,1,2861.6653,-1405.8640,11.7344},//45
	{1318,1,278.6607,-1617.1837,97.4182},//46
	{1318,1,2695.6543,-1704.8678,11.8438},//47
	{1318,1,-1463.6781,1556.7661,1052.5313},//48
	{1318,1,452.4577,-1479.4701,30.8395},//49
	{1318,1,497.9007,-1358.6243,16.5186},//50
	{1318,1,458.6580,-1500.4800,31.0444},//51
	{1318,1,2245.2300,-1663.8357,15.4766},//52
	{1318,1,2111.6140,-1212.7043,23.9647},//53
	{1318,1,2308.3047,-1644.2471,14.8270},//54
	{1318,1,2421.2444,-1222.3062,25.3649},//55
	{1318,1,1833.9900,-1681.7484,13.4503},//56
	{1318,1,1365.3528,-1279.0581,13.5469},//57
	{1318,1,2400.6978,-1979.9229,13.5469},//58
	{1318,1,1553.1730,-1675.0323,16.1953},//59
	{1318,1,1631.3468,-1168.5192,24.0781},//60
	{1318,1,1315.4430,-900.6385,39.5781},//61
	{1318,1,1929.8149,-1776.3326,13.5469},//62
	{1318,1,999.4342,-920.1180,42.1797},//63
	{1318,1,1352.4203,-1758.5322,13.5078},//64
	{1318,1,1832.4796,-1842.6014,13.5781},//65
	{1318,1,811.6748,-1616.1306,13.5469},//66
	{1318,1,204.3330,-166.6950,1000.5234},//67
	{1318,1,207.0562,-138.3951,1003.5078},//68
	{1318,1,226.2940,-7.4315,1002.2109},//69
	{1318,1,207.7106,-109.3912,1005.1328},//70
	{1318,1,203.7780,-48.4924,1001.8047},//71
	{1318,1,502.0535,-69.5163,998.7578},//72
	{1318,1,1204.9303,-11.9801,1000.9219},//73
	{1318,1,493.3910,-22.4116,1000.6797},//74
	{1318,1,316.6105,-169.9380,999.6010},//75
	{1318,1,246.7840,63.9002,1003.6406},//76
	{1318,1,832.8324,7.4180,1004.1797},//77
	{1318,1,-31.0222,-89.7937,1003.5469},//78
	{1318,1,363.4130,-74.5787,1001.5078},//79
	{1318,1,1199.1923,-918.6677,43.1197},//80
	{1239,1,240.4534,112.9000,1003.2188},//81
	{1239,1,238.1176,72.9079,1005.0391},//82
	{1318,1,1737.0745,-1270.8171,13.5449},//83
	{1318,1,2162.0996,1602.8569,999.9801},//84
	{1318,1,246.2153,87.6283,1003.6406},//85
	{1318,1,321.9479,302.6125,999.1484},//86
	{1318,1,-1060.5527,-1195.2561,129.5891},//87
	{1318,1,293.0435,310.0034,999.1484},//88
	{1318,1,1037.9948,-1339.9211,13.7352},//89
	{1318,1,376.9678,-193.2767,1000.6328},//90
	{3096,1,1653.8280,-1837.3652,14.0000},//91
	{1318,1,1477.4462,-1878.1508,13.5469},//92
	{1318,1,682.3591,-452.1583,-25.6172}//93
};

new Float:PosCarPatio[18][4] = {
	{2261.1870,-2340.2278,13.4430,47.6345},
	{2263.4995,-2337.4797,13.4421,47.6788},
	{2265.3430,-2334.7253,13.4428,47.4157},
	{2268.4929,-2332.2925,13.4428,50.3203},
	{2271.5588,-2330.0391,13.4425,48.2117},
	{2275.0662,-2328.2161,13.4427,43.0421},
	{2277.6338,-2325.1982,13.4426,45.6942},
	{2279.7207,-2321.7437,13.4422,40.7549},
	{2290.5530,-2333.7366,13.4424,44.4570},
	{2288.4021,-2337.8037,13.4429,47.3045},
	{2286.0266,-2339.0696,13.4430,42.6335},
	{2282.6824,-2339.5217,13.4430,41.3769},
	{2283.8381,-2348.5066,13.4427,43.5651},
	{2279.7288,-2351.9451,13.4423,45.4169},
	{2268.8557,-2349.1638,13.4415,50.8560},
	{2280.4331,-2359.9072,13.4412,44.5204},
	{2301.9275,-2342.1550,13.4410,139.8008},
	{2293.3970,-2351.0725,13.4426,133.8569}
};

//VEÍCULOS
enum VehicleDataInfo {
	vModelid,
	vName[128],
	vPrice,
	vTanque,
	vCombustivel[128]
}

new VehiclesData[][VehicleDataInfo] = {
	{400,	"Landstalker",				55000, 65,  "DIESEL"},
	{401,	"Bravura",				30000, 50, "GASOLINA"},
	{402,	"Buffalo",				185000, 75, "ADITIVADA"},
	{403,	"Linerunner",				0, 85, "DIESEL"},
	{404,	"Perenial",				25000, 50, "ALCOOL"},
	{405,	"Sentinel",				65000, 60, "GASOLINA"},
	{406,	"Pedreira",				0, 85, "DIESEL"},
	{407,	"Bombeiros",				0, 70, "DIESEL"},
	{408,	"Caminhao de Lixo",			0, 70, "DIESEL"},
	{409,	"Limosine",				120000, 80, "GASOLINA"},
	{410,	"Manana",				15000, 45, "ALCOOL"},
	{411,	"Infernus",				350000, 75, "ADITIVADA"},
	{412,	"Voodoo",				25000, 100, "QUEROSENE"},
	{413,	"Pony",					0, 65, "GASOLINA"},
	{414,	"Mule",					0, 70, "GASOLINA"},
	{415,	"Cheetah",				240000, 65, "ADITIVADA"},
	{416,	"Ambulancia",				0, 80, "DIESEL"},
	{417,	"Leviathan",				0, 100, "QUEROSENE"},
	{418,	"Moonbeam",				0, 65, "GASOLINA"},
	{419,	"Esperanto",				52000, 65, "GASOLINA"},
	{420,	"Taxi",					0, 65, "GASOLINA"},
	{421,	"Washington",				38000, 65, "GASOLINA"},
	{422,	"Bobcat",				30000, 75, "DIESEL"},
	{423,	"Whoopee",				0, 60, "DIESEL"},
	{424,	"BF Injection",				20000, 35, "GASOLINA"},
	{425,	"Hunter",				0, 100, "QUEROSENE"},
	{426,	"Premier",				35000, 65, "GASOLINA"},
	{427,	"Enforcer",				0, 85, "GASOLINA"},
	{428,	"Carro Forte",				0, 70, "GASOLINA"},
	{429,	"Banshee",				270000, 85, "ADITIVADA"},
	{430,	"Predator",				0, 68, "DIESEL"},
	{431,	"Onibus",				0, 90, "DIESEL"},
	{432,	"Rhino",				0, 100, "DIESEL"},
	{433,	"Barracks",				0, 80, "DIESEL"},
	{434,	"Hotknife",				100000, 80, "ADITIVADA"},
	{435,	"Trailer",				0, 100, "DIESEL"},
	{436,	"Previon",				35000, 65, "GASOLINA"},
	{437,	"Onibus",				0, 80, "DIESEL"},
	{438,	"Taxi",					0, 65, "GASOLINA"},
	{439,	"Stallion",				40000, 65, "GASOLINA"},
	{440,	"Rumpo",				0, 60, "DIESEL"},
	{441,	"RC Bandit",				0, 0, "GASOLINA"},
	{442,	"Romero",				0, 70, "GASOLINA"},
	{443,	"Packer",				0, 78, "DIESEL"},
	{444,	"Monster",				0, 70, "DIESEL"},
	{445,	"Admiral",				35000, 60, "GASOLINA"},
	{446,	"Squalo",				260000, 80, "DIESEL"},
	{447,	"Seasparrow",				0, 100, "QUEROSENE"},
	{448,	"MotoPizza",				0, 20, "GASOLINA"},
	{449,	"Bonde",				0, 0, "NULO"},
	{450,	"Trailer",				0, 0, "NULO"},
	{451,	"Turismo",				300000, 86, "ADITIVADA"},
	{452,	"Speeder",				240000, 73, "DIESEL"},
	{453,	"Reefer",				0, 60,"DIESEL"},
	{454,	"Tropic",				145000, 70, "DIESEL"},
	{455,	"Flatbed",				0, 80, "DIESEL"},
	{456,	"Yankee",				0, 74, "DIESEL"},
	{457,	"Caddy",				0, 20, "GASOLINA"},
	{458,	"Solair",				55000, 67, "GASOLINA"},
	{459,	"Berkley's RC Van",			0, 70, "DIESEL"},
	{460,	"Skimmer",				190000, 90, "QUEROSENE"},
	{461,	"PCJ-600",				18000, 25, "GASOLINA"},
	{462,	"Faggio",				6000, 18, "GASOLINA"},
	{463,	"Freeway",				35000, 29, "GASOLINA"},
	{464,	"RC Baron",				0, 0, "NULO"},
	{465,	"RC Raider",				0, 0, "NULO"},
	{466,	"Glendale",				0, 60, "ALCOOL"},
	{467,	"Oceanic",				42000, 60, "GASOLINA"},
	{468,	"Sanchez",				20000, 24, "GASOLINA"},
	{469,	"Sparrow",				170000, 90, "QUEROSENE"},
	{470,	"Patriot",				0, 85, "DIESEL"},
	{471,	"Quadriciclo",				25000, 20, "GASOLINA"},
	{472,	"Coastguard",				0, 80, "DIESEL"},
	{473,	"Dinghy",				12000, 50, "DIESEL"},
	{474,	"Hermes",				36000, 50, "ALCOOL"},
	{475,	"Sabre",				31500, 62, "GASOLINA"},
	{476,	"Rustler",				0, 70, "QUEROSENE"},
	{477,	"ZR-350",				165000, 80, "ADITIVADA"},
	{478,	"Walton",				0, 50, "DIESEL"},
	{479,	"Regina",				0, 40, "GASOLINA"},
	{480,	"Comet",				95000, 65, "GASOLINA"},
	{481,	"BMX",					100, 0, "NULO"},
	{482,	"Burrito",				0, 70, "GASOLINA"},
	{483,	"Camper",				25000, 65, "GASOLINA"},
	{484,	"Marquis",				400000, 86, "DIESEL"},
	{485,	"Baggage",				0, 40, "DIESEL"},
	{486,	"Dozer",				0, 80, "DIESEL"},
	{487,	"Maverick",				750000, 80, "QUEROSENE"},
	{488,	"News Chopper",				0, 70, "QUEROSENE"},
	{489,	"Rancher",				75000, 70, "GASOLINA"},
	{490,	"FBI Rancher",				0, 80, "GASOLINA"},
	{491,	"Virgo",				0, 60, "GASOLINA"},
	{492,	"Greenwood",				37000, 50, "GASOLINA"},
	{493,	"Jetmax",				400000, 70, "DIESEL"},
	{494,	"Hotring",				0, 70, "ADITIVADA"},
	{495,	"Sandking",				0, 80, "DIESEL"},
	{496,	"Blista Compact",			35000, 50, "GASOLINA"},
	{497,	"Helicoptero Policial",	0, 90, "QUEROSENE"},
	{498,	"Boxvillde",				0, 60, "DIESEL"},
	{499,	"Benson",				0, 60, "DIESEL"},
	{500,	"Mesa",					75000, 70, "GASOLINA"},
	{501,	"RC Goblin",				0, 0, "NULO"},
	{502,	"Hotring Racer A",			0, 80, "ADITIVADA"},
	{503,	"Hotring Racer B",			0, 80, "ADITIVADA"},
	{504,	"Bloodring Banger",			0, 60, "ADITIVADA"},
	{505,	"Rancher",				0, 70, "DIESEL"},
	{506,	"Super GT",				250000, 85, "ADITIVADA"},
	{507,	"Elegant",				37000, 68, "GASOLINA"},
	{508,	"Journey",				0, 80, "GASOLINA"},
	{509,	"Bike",					100, 0, "NULO"},
	{510,	"Mountain Bike",			230, 0, "NULO"},
	{511,	"Beagle",				0, 100, "QUEROSENE"},
	{512,	"Cropduster",				0, 60, "QUEROSENE"},
	{513,	"Stunt",				0, 70, "QUEROSENE"},
	{514,	"Tank",					0, 80, "DIESEL"},
	{515,	"Roadtrain",				0, 90, "DIESEL"},
	{516,	"Nebula",				60000, 70, "GASOLINA"},
	{517,	"Majestic",				45000, 60, "GASOLINA"},
	{518,	"Buccaneer",				0, 40, "ALCOOL"},
	{519,	"Shamal",				0, 100, "QUEROSENE"},
	{520,	"Hydra",				0, 100, "QUEROSENE"},
	{521,	"FCR-900",				60000, 27, "GASOLINA"},
	{522,	"NRG-500",				150000, 30, "GASOLINA"},
	{523,	"HPV1000",				0, 24, "GASOLINA"},
	{524,	"Cement Truck",				0, 70, "DIESEL"},
	{525,	"Reboque",				0, 70, "DIESEL"},
	{526,	"Fortune",				0, 68, "GASOLINA"},
	{527,	"Cadrona",				0, 70, "GASOLINA"},
	{528,	"FBI Truck",				0, 80, "GASOLINA"},
	{529,	"Willard",				0, 60, "ALCOOL"},
	{530,	"Forklift",				0, 30, "DIESEL"},
	{531,	"Tractor",				0, 30, "DIESEL"},
	{532,	"Combine",				0, 60, "DIESEL"},
	{533,	"Feltzer",				75000, 73, "GASOLINA"},
	{534,	"Remington",				55000, 45, "GASOLINA"},
	{535,	"Slamvan",				42000, 60, "GASOLINA"},
	{536,	"Blade",				37000, 60, "GASOLINA"},
	{537,	"Freight",				0, 100, "DIESEL"},
	{538,	"Streak",				0, 100, "DIESEL"},
	{539,	"Vortex",				0, 60, "DIESEL"},
	{540,	"Vincent",				40000, 57, "GASOLINA"},
	{541,	"Bullet",				220000, 70, "ADITIVADA"},
	{542,	"Clover",				17000, 45, "ALCOOL"},
	{543,	"Sadler",				0, 50, "GASOLINA"},
	{544,	"Firetruck",				0, 70, "DIESEL"},
	{545,	"Hustler",				0, 40, "ALCOOL"},
	{546,	"Intruder",				30000, 50, "GASOLINA"},
	{547,	"Primo",				30000, 52, "GASOLINA"},
	{548,	"Cargobob",				0, 100, "QUEROSENE"},
	{549,	"Tampa",				0, 40, "GASOLINA"},
	{550,	"Sunrise",				90000, 60, "GASOLINA"},
	{551,	"Merit",				83000,  73, "GASOLINA"},
	{552,	"Utility",				0, 85, "GASOLINA"},
	{553,	"Nevada",				0, 80, "QUEROSENE"},
	{554,	"Yosemite",				0, 70, "DIESEL"},
	{555,	"Windsor",				0, 65, "GASOLINA"},
	{556,	"Monster",				0, 80, "ADITIVADA"},
	{557,	"Monster",				0, 80, "ADITIVADA"},
	{558,	"Uranus",				90000, 50, "ADITIVADA"},
	{559,	"Jester",				95000, 60, "ADITIVADA"},
	{560,	"Sultan",				130000, 75, "ADITIVADA"},
	{561,	"Stratum",				95000, 65, "ADITIVADA"},
	{562,	"Elegy",				130000, 72, "ADITIVADA"},
	{563,	"Raindance",				0, 100, "QUEROSENE"},
	{564,	"RC Tiger",				0, 0, "NULO"},
	{565,	"Flash",				130000, 65, "ADITIVADA"},
	{566,	"Tahoma",				45000, 60, "ALCOOL"},
	{567,	"Savanna",				35000, 50, "GASOLINA"},
	{568,	"Bandito",				0, 40, "ADITIVADA"},
	{569,	"Freight Flat",				0, 0, "NULO"},
	{570,	"Streak Carriage",			0, 0, "NULO"},
	{571,	"Kart",					0, 20, "GASOLINA"},
	{572,	"Mower",				0, 5, "GASOLINA"},
	{573,	"Dune",					0, 80, "DIESEL"},
	{574,	"Sweeper",				0, 30, "DIESEL"},
	{575,	"Broadway",				0, 50, "ALCOOL"},
	{576,	"Tornado",				0, 53, "ALCOOL"},
	{577,	"AT-400",				0, 100, "QUEROSENE"},
	{578,	"DFT-30",				0, 60, "DIESEL"},
	{579,	"Huntley",				72000, 60, "DIESEL"},
	{580,	"Stafford",				0, 50, "ALCOOL"},
	{581,	"BF-400",				25000, 21, "GASOLINA"},
	{582,	"Reportagem",				0, 60, "GASOLINA"},
	{583,	"Tug",					0, 40, "DIESEL"},
	{584,	"Trailer",				0, 0, "NULO"},
	{585,	"Emperor",				45000, 60, "GASOLINA"},
	{586,	"Wayfarer",				15000, 23, "GASOLINA"},
	{587,	"Euros",				70000, 68, "ADITIVADA"},
	{588,	"Hotdog",				0, 40, "ALCOOL"},
	{589,	"Club",					85000, 65, "ADITIVADA"},
	{590,	"Freight Box",				0, 0, "NULO"},
	{591,	"Trailer",				0, 0, "NULO"},
	{592,	"Andromada",				0, 100, "QUEROSENE"},
	{593,	"Dodo",					175000, 60, "QUEROSENE"},
	{594,	"RC Cam",				0, 0, "NULO"},
	{595,	"Launch",				0, 70, "DIESEL"},
	{596,	"Viatura Policial",			0, 68, "GASOLINA"},
	{597,	"Viatura Policial",			0, 68, "GASOLINA"},
	{598,	"Viatura Policial",			0, 68, "GASOLINA"},
	{599,	"Caminhoneta Policial",			0, 75, "DIESEL"},
	{600,	"Picador",				0, 50, "ALCOOL"},
	{601,	"S.W.A.T",				0, 70, "DIESEL"},
	{602,	"Alpha",				75000, 65, "GASOLINA"},
	{603,	"Phoenix",				96000, 55, "ADITIVADA"},
	{604,	"Glendale",				0, 40, "ALCOOL"},
	{605,	"Sadler",				0, 40, "ALCOOL"},
	{606,	"Luggage",				0, 0, "NULO"},
	{607,	"Luggage",				0, 0, "NULO"},
	{608,	"Stairs",				0, 0, "NULO"},
	{609,	"Boxville",				0, 60, "GASOLINA"},
	{610,	"Tiller",				0, 0, "NULO"}
};

//COLORS

new HiddenColors[] = {
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 180, 186, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 286, 199826
};

//TUNING

new TunnerID = -1;
new TuneVehicle = -1;
new TuneComponent = 0;
new Tunes[17];
new RowComponents[20];
new Menu:mCusto;
new Menu:mTuning;
new Menu:mCurrentTune;
new bool:IsPaintJob = false;

enum TuneInfo
{
	tuneName[64],
	tuneValue,
	tuneSlot
}

new SimilarComponents[][2] = {
	{1007, 1017},
	{1026, 1027},
	{1030, 1031},
	{1036, 1040},
	{1039, 1041},
	{1042, 1099},
	{1047, 1051},
	{1048, 1052},
	{1056, 1062},
	{1057, 1063},
	{1069, 1071},
	{1070, 1072},
	{1090, 1094},
	{1093, 1095},
	{1106, 1124},
	{1107, 1108},
	{1118, 1120},
	{1119, 1121},
	{1122, 1101},
	{1133, 1102},
	{1143, 1142},
	{1145, 1144}
};

new Components[][TuneInfo] = {
	{"Pro", 								900, 				SPOILERS},
	{"Win", 								750, 				SPOILERS},
	{"Drag", 								800, 				SPOILERS},
	{"Alpha", 								600, 				SPOILERS},
	{"Champ Scoop", 						600, 				HOODS},
	{"Fury Scoop", 							800, 				HOODS},
	{"Roof Scoop", 							180, 				ROOFSCOOPS},
	{"Sideskirt", 							400, 				SIDESKIRTS},
	{"Nitro 2x", 							500, 				NITROS},
	{"Nitro 5x", 							1000, 				NITROS},
	{"Nitro 10x", 							2000, 				NITROS},
	{"Race Scoop", 							1300, 				HOODS},
	{"Worx Scoop", 							1250, 				HOODS},
	{"Round Fog", 							650, 				LAMPS},
	{"Champ", 								1600, 				SPOILERS},
	{"Race", 								1580, 				SPOILERS},
	{"Worx", 								1400, 				SPOILERS},
	{"Sideskirt", 							400, 				SIDESKIRTS},
	{"Upswept", 							800, 				EXHAUSTS},
	{"Twin", 								600, 				EXHAUSTS},
	{"Large", 								500, 				EXHAUSTS},
	{"Medium", 								300, 				EXHAUSTS},
	{"Small", 								350, 				EXHAUSTS},
	{"Fury", 								500, 				SPOILERS},
	{"Square Fog", 							500, 				LAMPS},
	{"Off Road", 							1200, 				WHEELS},
	{"Alien", 								900, 				SIDESKIRTS},
	{"Alien", 								900, 				SIDESKIRTS},
	{"Alien", 								1700, 				EXHAUSTS},
	{"X-Flow", 								1300, 				EXHAUSTS},
	{"X-Flow", 								750, 				SIDESKIRTS},
	{"X-Flow", 								750, 				SIDESKIRTS},
	{"Alien Roof", 							800, 				ROOFSCOOPS},
	{"X-Flow Roof", 						600, 				ROOFSCOOPS},
	{"Alien", 								1700, 				EXHAUSTS},
	{"X-Flow Roof", 						600, 				ROOFSCOOPS},
	{"Alien", 								900, 				SIDESKIRTS},
	{"X-Flow", 								1300, 				EXHAUSTS},
	{"Alien Roof", 							800, 				ROOFSCOOPS},
	{"X-Flow", 								750, 				SIDESKIRTS},
	{"Alien", 								900, 				SIDESKIRTS},
	{"X-Flow", 								750, 				SIDESKIRTS},
	{"Chrome", 								900, 				SIDESKIRTS},
	{"Slamin", 								1300, 				EXHAUSTS},
	{"Chrome", 								1700, 				EXHAUSTS},
	{"X-Flow", 								1300, 				EXHAUSTS},
	{"Alien", 								1700, 				EXHAUSTS},
	{"Alien", 								900, 				SIDESKIRTS},
	{"X-Flow", 								750, 				SIDESKIRTS},
	{"Alien", 								1400, 				SPOILERS},
	{"X-Flow", 								1000, 				SPOILERS},
	{"Alien", 								900, 				SIDESKIRTS},
	{"X-Flow", 								750, 				SIDESKIRTS},
	{"X-Flow", 								600, 				ROOFSCOOPS},
	{"Alien", 								800, 				ROOFSCOOPS},
	{"Alien", 								800, 				ROOFSCOOPS},
	{"Alien", 								900, 				SIDESKIRTS},
	{"X-Flow", 								750, 				SIDESKIRTS},
	{"Alien", 								1400, 				SPOILERS},
	{"X-Flow", 								1300, 				EXHAUSTS},
	{"X-Flow", 								1000, 				SPOILERS},
	{"X-Flow", 								600, 				ROOFSCOOPS},
	{"Alien", 								900, 				SIDESKIRTS},
	{"X-Flow", 								750, 				SIDESKIRTS},
	{"Alien", 								1700, 				EXHAUSTS},
	{"Alien", 								1700, 				EXHAUSTS},
	{"X-Flow", 								1300, 				EXHAUSTS},
	{"Alien", 								800, 				ROOFSCOOPS},
	{"X-Flow", 								600, 				ROOFSCOOPS},
	{"Alien", 								900, 				SIDESKIRTS},
	{"X-Flow", 								750, 				SIDESKIRTS},
	{"Alien", 								900, 				SIDESKIRTS},
	{"X-Flow", 								750, 				SIDESKIRTS},
	{"Shadow", 								700, 				WHEELS},
	{"Mega", 								1030, 				WHEELS},
	{"Rimshine", 							1800, 				WHEELS},
	{"Wires", 								1560,	 			WHEELS},
	{"Classic", 							1650, 				WHEELS},
	{"Twist", 								1900, 				WHEELS},
	{"Cutter", 								1100, 				WHEELS},
	{"Switch", 								2100, 				WHEELS},
	{"Grove", 								1230, 				WHEELS},
	{"Import", 								1050, 				WHEELS},
	{"Dollar", 								1760, 				WHEELS},
	{"Trancer", 							1350, 				WHEELS},
	{"Atomic", 								1550, 				WHEELS},
	{"Estereo", 							350, 				STEREO},
	{"Hidraulica", 							1600, 				HYDRAULICS},
	{"Alien", 								800, 				ROOFSCOOPS},
	{"X-Flow", 								1300, 				EXHAUSTS},
	{"Alien", 								900, 				SIDESKIRTS},
	{"X-Flow",	 							600, 				ROOFSCOOPS},
	{"Alien", 								1300,		 		EXHAUSTS},
	{"X-Flow", 								750, 				SIDESKIRTS},
	{"Alien", 								900, 				SIDESKIRTS},
	{"X-Flow", 								750,	 			SIDESKIRTS},
	{"Ahab", 								1700, 				WHEELS},
	{"Virtual",								850, 				WHEELS},
	{"Access", 								1200, 				WHEELS},
	{"Chrome", 								900, 				SIDESKIRTS},
	{"Chrome Grill", 						1200, 				BULLBARS},
	{"Chrome Flames", 						1700, 				SIDESKIRTS},
	{"Chrome Strip", 						1400, 				SIDESKIRTS},
	{"Convertible", 						1300, 				ROOFSCOOPS},
	{"Chrome", 								1700, 				EXHAUSTS},
	{"Slamin", 								1300, 				EXHAUSTS},
	{"Chrome Arches", 						1500, 				SIDESKIRTS},
	{"Chrome Strip", 						1300, 				SIDESKIRTS},
	{"Chrome Strip", 						1300, 				SIDESKIRTS},
	{"Chrome", 								2180, 				REARBULLBARS},
	{"Slamin", 								2100, 				REARBULLBARS},
	{"Little Sign 1",					 	1000, 				FRONTSIGN},
	{"Little Sign 2", 						1200, 				FRONTSIGN},
	{"Chrome", 								1700, 				EXHAUSTS},
	{"Slamin", 								1300, 				EXHAUSTS},
	{"Chrome", 								2200, 				FRONTBULLBARS},
	{"Slamin", 								2100, 				FRONTBULLBARS},
	{"Chrome", 								1800, 				FRONTBUMPERS},
	{"Chrome Trim", 						590, 				SIDESKIRTS},
	{"Wheelcovers", 						750, 				SIDESKIRTS},
	{"Chrome Trim", 						590, 				SIDESKIRTS},
 	{"Wheelcovers", 						750, 				SIDESKIRTS},
 	{"Chrome Flames", 						1700, 				SIDESKIRTS},
 	{"Bullbar Chrome Bars", 				1300,			 	BULLBARS},
 	{"Chrome Arches", 						1500, 				SIDESKIRTS},
	{"Bullbar Chrome Lights", 				1000, 				BULLBARS},
	{"Chrome", 								1700, 				EXHAUSTS},
	{"Slamin", 								1300, 				EXHAUSTS},
	{"Vinyl Hardtop", 						3400, 				ROOFSCOOPS},
	{"Chrome", 								1700, 				EXHAUSTS},
	{"Hardtop", 							3000, 				ROOFSCOOPS},
	{"Softtop", 							3300, 				ROOFSCOOPS},
	{"Slamin", 								1300, 				EXHAUSTS},
	{"Chrome Strip", 						1300, 				SIDESKIRTS},
 	{"Chrome Strip", 						1300, 				SIDESKIRTS},
	{"Slamin", 								1300, 				EXHAUSTS},
	{"Chrome", 								1700, 				EXHAUSTS},
	{"Chrome Strip", 						1300, 				SIDESKIRTS},
	{"Alien", 								1400, 				SPOILERS},
	{"X-Flow", 								1000,		 		SPOILERS},
	{"X-Flow", 								1800, 				REARBUMPERS},
	{"Alien", 								2200, 				REARBUMPERS},
	{"Oval", 								900, 				VENTS},
	{"Oval", 								900, 				VENTS},
	{"Square", 								600, 				VENTS},
	{"Square", 								600, 				VENTS},
	{"X-Flow", 								1400, 				SPOILERS},
	{"Alien", 								1000, 				SPOILERS},
	{"X-Flow", 								1800, 				REARBUMPERS},
	{"Alien", 								2200, 				REARBUMPERS},
	{"Alien", 								2200, 				REARBUMPERS},
	{"X-Flow",	 							1800, 				REARBUMPERS},
	{"X-Flow", 								1800, 				FRONTBUMPERS},
	{"Alien", 								1800, 				FRONTBUMPERS},
	{"Alien", 								2200, 				REARBUMPERS},
	{"Alien", 								2200, 				FRONTBUMPERS},
	{"X-Flow",	 							1800, 				REARBUMPERS},
	{"X-Flow", 								1800, 				FRONTBUMPERS},
	{"X-Flow", 								1000, 				SPOILERS},
	{"Alien", 								2200, 				REARBUMPERS},
	{"Alien", 								2200, 				FRONTBUMPERS},
	{"X-Flow", 								1800, 				REARBUMPERS},
	{"Alien", 								1400, 				SPOILERS},
	{"X-Flow", 								1000, 				SPOILERS},
	{"Alien", 								1400, 				SPOILERS},
	{"X-Flow", 								1800, 				FRONTBUMPERS},
	{"Alien", 								2200, 				FRONTBUMPERS},
	{"X-Flow", 								1800, 				REARBUMPERS},
	{"Alien", 								1800, 				REARBUMPERS},
	{"Alien", 								1800, 				FRONTBUMPERS},
	{"X-Flow", 								1800, 				FRONTBUMPERS},
	{"Alien", 								2200, 				FRONTBUMPERS},
	{"X-Flow", 								1800, 				FRONTBUMPERS},
	{"X-Flow", 								1800, 				FRONTBUMPERS},
	{"Chrome", 								2200, 				FRONTBUMPERS},
	{"Slamin", 								1800, 				REARBUMPERS},
	{"Chrome", 								2200, 				FRONTBUMPERS},
	{"Slamin", 								1800, 				REARBUMPERS},
	{"Slamin", 								1800, 				REARBUMPERS},
	{"Chrome", 								2200, 				FRONTBUMPERS},
	{"Chrome", 								2200, 				REARBUMPERS},
	{"Slamin", 								1800, 				FRONTBUMPERS},
	{"Chrome", 								2200, 				FRONTBUMPERS},
	{"Slamin", 								1800, 				REARBUMPERS},
	{"Chrome", 								2200, 				REARBUMPERS},
	{"Slamin", 								1800, 				FRONTBUMPERS},
	{"Slamin", 								1800, 				REARBUMPERS},
	{"Chrome", 								2200, 				REARBUMPERS},
	{"Slamin", 								1300, 				FRONTBUMPERS},
	{"Chrome", 								1200, 				FRONTBUMPERS},
	{"Slamin", 								1300,	 			FRONTBUMPERS},
	{"Chrome", 								2200, 				FRONTBUMPERS},
	{"Chrome", 								2200, 				REARBUMPERS},
	{"Slamin", 								1300, 				REARBUMPERS}
};

new CarMods[][15] = {
	{400, 1018, 1019, 1020, 1021, 1013, 1024, 0,    0,    0,    0,    0,    0,    0,    0},     //Landstalker
	{401, 1001, 1003, 1004, 1005, 1006, 1013, 1019, 1020, 1007, 1017, 1142, 1143, 1144, 1145},  //Bravura
	{404, 1019, 1020, 1021, 1013, 1007, 1017, 1000, 1002, 1016, 0,    0,    0,    0,    0},     //Perenial
	{405, 1018, 1019, 1020, 1021, 1000, 1001, 1014, 1023, 0,    0,    0,    0,    0,    0},     //Sentinel
	{410, 1019, 1020, 1021, 1013, 1024, 1001, 1003, 1023, 1007, 1017, 0,    0,    0,    0},     //Manana
	{415, 1018, 1019, 1001, 1003, 1023, 1007, 1017, 0,    0,    0,    0,    0,    0,    0},     //Cheetah
	{418, 1020, 1021, 1006, 1002, 1016, 0,    0,    0,    0,    0,    0,    0,    0,    0},     //Moonbeam
	{420, 1004, 1005, 1019, 1021, 1001, 1003, 0,    0,    0,    0,    0,    0,    0,    0},     //Taxi
	{421, 1018, 1019, 1020, 1021, 1000, 1014, 1016, 1023, 0,    0,    0,    0,    0,    0},     //Washington
	{422, 1013, 1019, 1020, 1021, 1007, 1017, 0,    0,    0,    0,    0,    0,    0,    0},    	//Bobcat
	{426, 1004, 1005, 1019, 1021, 1001, 1003, 1006, 0,    0,    0,    0,    0,    0,    0},     //Premier
	{436, 1019, 1020, 1021, 1022, 1006, 1013, 1001, 1003, 1007, 1017, 0,    0,    0,    0},     //Previon
	{439, 1142, 1143, 1144, 1145, 1013, 1001, 1003, 1023, 1007, 1017, 0,    0,    0,    0},     //Stallion
	{477, 1018, 1019, 1020, 1021, 1006, 1007, 1017, 0,    0,    0,    0,    0,    0,    0},     //ZR-350
	{478, 1004, 1005, 1012, 1020, 1021, 1022, 1013, 1024, 0,    0,    0,    0,    0,    0},     //Walton
	{489, 1004, 1005, 1018, 1019, 1020, 1013, 1024, 1006, 1000, 1002, 1016, 0,    0,    0},     //Rancher
	{491, 1142, 1143, 1144, 1145, 1018, 1019, 1020, 1021, 1003, 1014, 1023, 1007, 1017, 0},     //Virgo
	{492, 1004, 1005, 1000, 1006, 1016, 0,    0,    0,    0,    0,    0,    0,    0,    0},     //Greenwood
	{496, 1001, 1002, 1003, 1006, 1011, 1019, 1020, 1023, 1007, 1017, 1142, 1143, 0,    0},    	//Blista Compact
	{500, 1019, 1020, 1021, 1013, 1024, 0,    0,    0,    0,    0,    0,    0,    0,    0},     //Mesa
	{516, 1004, 1018, 1019, 1020, 1021, 1000, 1002, 1015, 1016, 1007, 1017, 0,    0,    0},     //Nebula
	{517, 1007, 1017, 1142, 1143, 1144, 1145, 1018, 1019, 1020, 1002, 1003, 1016, 1023, 0},     //Majestic
	{518, 1001, 1005, 1006, 1013, 1018, 1020, 1023, 1142, 1143, 1144, 1145, 0,    0,    0},     //Buccaneer
	{527, 1018, 1020, 1021, 1001, 1014, 1015, 1007, 1017, 0,    0,    0,    0,    0,    0},     //Cadrona
	{529, 1011, 1012, 1018, 1019, 1020, 1006, 1001, 1003, 1023, 1007, 1017, 0,    0,    0},     //Willard
	{534, 1100, 1101, 1106, 1122, 1123, 1124, 1125, 1126, 1127, 1178, 1179, 1180, 1185, 0},    	//Remington
	{535, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 0},    	//Slamvan
	{536, 1103, 1104, 1105, 1107, 1108, 1128, 1181, 1182, 1183, 1184, 0,    0,    0,    0},    	//Blade
	{540, 1004, 1142, 1143, 1144, 1145, 1018, 1019, 1020, 1006, 1024, 1001, 1023, 1007, 1017},  //Vincent
	{542, 1018, 1019, 1020, 1021, 1014, 1015, 1144, 1145, 0,    0,    0,    0,    0,    0},     //Clover
	{546, 1004, 1142, 1143, 1144, 1145, 1018, 1019, 1006, 1024, 1001, 1002, 1023, 1007, 1017},  //Intruder
	{547, 1142, 1143, 1018, 1019, 1020, 1021, 1000, 1003, 1016, 0,    0,    0,    0,    0},     //Primo
	{549, 1011, 1012, 1142, 1143, 1144, 1145, 1018, 1019, 1020, 1001, 1003, 1023, 1007, 1017},  //Tampa
	{550, 1004, 1005, 1142, 1143, 1144, 1145, 1018, 1019, 1020, 1001, 1003, 1023, 1007, 1017},  //Sunrise
	{551, 1005, 1006, 1018, 1019, 1020, 1021, 1002, 1003, 1016, 1023, 0,    0,    0,    0},     //Merit
	{558, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1163, 1164, 1165, 1168, 0,    0},    	//Uranus
    {559, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1158, 1159, 1160, 1161, 1162, 1173}, 	//Jester
	{560, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1138, 1139, 1140, 1141, 1169, 1170}, 	//Sultan
	{561, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1154, 1155, 1156, 1157}, 	//Stratum
	{562, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1146, 1147, 1148, 1149, 1171, 1172}, 	//Elegy
	{565, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1150, 1151, 1152, 1153}, 	//Flash
    {567, 1102, 1129, 1130, 1131, 1132, 1133, 1186, 1187, 1188, 1189, 0,    0,    0,    0},    	//Savanna
	{575, 1042, 1043, 1044, 1099, 1074, 1075, 1076, 1077, 0,    0,    0,    0,    0,    0},    	//Broadway
	{576, 1134, 1135, 1136, 1137, 1190, 1191, 1192, 1193, 0,    0,    0,    0,    0,    0},    	//Tornado
	{580, 1018, 1020, 1001, 1006, 1023, 1007, 1017, 0,    0,    0,    0,    0,    0,    0},     //Stafford
	{585, 1142, 1143, 1144, 1145, 1018, 1019, 1020, 1013, 1006, 1001, 1003, 1023, 1007, 1017},  //Emperor
	{589, 1004, 1005, 1144, 1145, 1018, 1020, 1013, 1024, 1006, 1000, 1016, 1007, 1017, 0},     //Club
	{600, 1004, 1005, 1018, 1020, 1022, 1006, 1013, 1007, 1017, 0,    0,    0,    0,    0},     //Picador
	{603, 1142, 1143, 1144, 1145, 1018, 1019, 1020, 1013, 1001, 1006, 1023, 1007, 1017, 0}      //Phoenix
};

//SKINS

new SkinsType[][] = {
	{0, 	Binco, 			100},
	{7, 	Binco, 			150},
	{9,  	DidierSachs,    250},
	{10, 	Binco, 			125},
	{11,  	DidierSachs,    200},
	{12, 	Binco, 			200},
	{13, 	SubUrban, 		150},
	{14, 	SubUrban, 		150},
	{15, 	Binco, 			150},
	{16,   	Null,  			0},
	{17, 	Binco, 			200},
	{18,  	Victim,         150},
	{19,   	SubUrban,    	150},
	{20, 	Binco, 			150},
	{21,   	SubUrban,    	175},
	{22,   	SubUrban,    	150},
	{23,   	SubUrban,    	150},
	{24,   	SubUrban,    	150},
	{25,   	SubUrban,    	150},
	{26,   	ProLaps,    	200},
	{27,   	Null,  			0},
	{28,   	SubUrban,    	200},
	{29,   	SubUrban,    	200},
	{30,   	SubUrban,    	200},
	{31,   	Victim,         150},
	{32,   	Victim,         150},
	{33,   	Victim,         150},
	{34,   	Victim,         150},
	{35,   	Victim,         150},
	{36,  	Binco,    		150},
	{37,   	Victim,         150},
	{38,  	Binco,    		150},
	{39,  	Binco,    		150},
	{40,  	DidierSachs,    200},
	{41,  	Binco,    		150},
	{43,  	Binco,    		150},
	{44,  	Binco,    		150},
	{45,  	Victim,         150},
	{46,  	DidierSachs,    250},
	{47,  	Binco,    		200},
	{48,  	Binco,    		200},
	{49,  	Victim,         200},
	{50,   	Null,  			0},
	{51,   	ProLaps,    	150},
	{52,   	ProLaps,    	150},
	{54, 	Binco, 			125},
	{55, 	Binco, 			200},
	{56,  	Binco,    		150},
	{57,   	DidierSachs,    300},
	{58,   	Binco,      	150},
	{59,   	DidierSachs,    250},
	{60,   	Binco,      	200},
	{61,   	Victim,  		250},
	{62,   	Victim,  		125},
	{63,  	SubUrban,       150},
	{64,  	SubUrban,       150},
	{66,  	SubUrban,       150},
	{67,  	SubUrban,       150},
	{68,   	Null,  			0},
	{69,  	Binco,    		150},
	{70,   	Victim,  		150},
	{72, 	Binco, 			200},
	{73,   	Victim,  		150},
	{74, 	Binco, 			200},
	{75,   	Victim,  		150},
	{77,   	Victim,  		125},
	{78,   	Victim,  		125},
	{79,   	Victim,  		125},
	{80,  	SubUrban,       175},
	{81,  	SubUrban,       175},
	{82,   	DidierSachs,    300},
	{83,   	DidierSachs,    300},
	{84,   	DidierSachs,    300},
	{87,  	SubUrban,       150},
	{88,  	Binco,		    150},
	{89,  	Binco,       	150},
	{90,  	SubUrban,       150},
	{92,   	Victim,         150},
	{93,  	Binco,       	150},
	{94, 	Binco, 			125},
	{95, 	Binco, 			125},
	{96,   	ProLaps,        150},
	{97,   	Victim,         150},
	{98, 	Binco, 			200},
	{99,   	ProLaps,        150},
	{100,   ProLaps,    	150},
	{101, 	Binco, 			150},
	{102, 	SubUrban, 		150},
	{103, 	SubUrban, 		150},
	{104, 	SubUrban, 		150},
	{105, 	SubUrban, 		150},
	{106, 	SubUrban, 		150},
	{107, 	SubUrban, 		150},
	{108,   SubUrban,   	150},
	{109,   SubUrban,   	150},
	{110, 	SubUrban,   	150},
	{111,   DidierSachs,    350},
	{112,   DidierSachs,    350},
	{113,   DidierSachs,    400},
	{114, 	SubUrban, 		150},
	{115, 	SubUrban, 		150},
	{116, 	SubUrban, 		150},
	{117,   SubUrban,   	200},
	{118,   SubUrban,   	200},
	{120,   SubUrban,   	200},
	{121,   SubUrban,   	200},
	{122,   SubUrban,   	200},
	{123,   SubUrban,   	200},
	{124,   DidierSachs,    300},
	{125,   DidierSachs,    400},
	{126,   DidierSachs,    400},
	{127,   DidierSachs,    400},
	{128,   Victim,    		125},
	{129,   Victim,    		125},
	{130,   Victim,    		125},
	{131,   Victim,    		125},
	{132,   Victim,    		125},
	{133,   Victim,    		125},
	{134,   SubUrban,   	125},
	{135,   SubUrban,   	125},
	{136, 	SubUrban, 		150},
	{137,   SubUrban,   	125},
	{138,   Victim,         150},
	{139,   Victim,         150},
	{140,   Victim,         150},
	{141,   DidierSachs,    200},
	{142, 	SubUrban, 		200},
	{143, 	SubUrban, 		200},
	{144, 	SubUrban, 		200},
	{145,   Victim,         150},
	{146,   Victim,         150},
	{147,   DidierSachs,    300},
	{148,   DidierSachs,    300},
	{150,   DidierSachs,    300},
	{151,   Binco,    		150},
	{152,  	SubUrban,       200},
	{153,   DidierSachs,    200},
	{154,   Victim,         150},
	{155,   Null,  			0},
	{156,   Binco,    		125},
	{157,   Victim,         150},
	{158,   Victim,         150},
	{159,   Victim,         150},
	{160,   Victim,         150},
	{161,   Victim,         150},
	{162,   Victim,         150},
	{163,   Null,  			0},
	{164,   Null,  			0},
	{165,   Null,  			0},
	{166,   Null, 		 	0},
	{167,   Null,  			0},
	{168,   Victim,         125},
	{169,   Binco,         	200},
	{170, 	Binco, 			150},
	{171,   DidierSachs,  	300},
	{172,   DidierSachs,  	300},
	{173,   SubUrban,  		125},
	{174,   SubUrban,   	125},
	{175,   SubUrban,   	125},
	{176,   SubUrban,   	200},
	{177,  	SubUrban,       200},
	{179,   Null,  			0},
	{180, 	Binco, 			150},
	{181,   Binco,    		150},
	{182,   Binco,    		125},
	{183,   SubUrban,   	125},
	{184, 	Binco, 			150},
	{185,   DidierSachs,    300},
	{186,   DidierSachs,    300},
	{187,   DidierSachs,    300},
	{188, 	Binco, 			150},
	{189,   DidierSachs,    300},
	{190,   Binco,   		150},
	{191,   Binco,  		150},
	{192,   ProLaps,  		150},
	{193,   Binco,  		150},
	{194,   DidierSachs,  	200},
	{195,   SubUrban,   	150},
	{196,   Victim,         150},
	{197,   Victim,         150},
	{198,   Victim,         150},
	{199,   Victim,         150},
	{200,   Victim,         150},
	{201,   Victim,         150},
	{202,   Victim,         150},
	{203,   ProLaps,        250},
	{204,   ProLaps,        250},
	{205,   Null,  			0},
	{206,   Victim,         150},
	{207,   SubUrban,       150},
	{209,   Null,  			0},
	{210,   Binco,  		150},
	{211,   Binco,  		200},
	{212,   Victim,  		200},
	{213,   Victim,  		200},
	{214,   DidierSachs,  	300},
	{215,   Binco,  		150},
	{216,   DidierSachs,  	300},
	{217,   Binco,  		200},
	{218,   Binco,  		150},
	{219,   DidierSachs,  	200},
	{220,   SubUrban,       150},
	{221,   SubUrban,       150},
	{222,   Binco,  		150},
	{223,   Binco,  		150},
	{224,   DidierSachs,    200},
	{225,   Binco,  		150},
	{226,   Binco,  		150},
	{227,  	DidierSachs,  	300},
	{228,   DidierSachs,  	300},
	{229,   Binco,      	200},
	{230,   SubUrban,       125},
	{231,   Binco,  		150},
	{232,   Binco,  		150},
	{233,   Binco,  		200},
	{234,   Binco,  		150},
	{235,   Binco,  		150},
	{236,   Binco,  		150},
	{237,   SubUrban,       200},
	{239,   SubUrban,       125},
	{238,   SubUrban,       150},
	{240,   DidierSachs,  	300},
	{241,   SubUrban,       150},
	{242,   SubUrban,       150},
	{243,   SubUrban,       150},
	{244,   SubUrban,       200},
	{245,   SubUrban,       150},
	{246,   SubUrban,       200},
	{247,   ProLaps,    	150},
	{248,   ProLaps,    	200},
	{249,   DidierSachs,    300},
	{250,   Binco,      	150},
	{251,   Victim,         150},
	{252,   Victim,         50},
	{253,   Null,  			0},
	{254,   ProLaps,    	150},
	{255,   Null,  			0},
	{256,   SubUrban,    	150},
	{257,   SubUrban,    	150},
	{258,   ProLaps,    	200},
	{259,   ProLaps,    	200},
	{260,   Null,  			0},
	{261,   Binco,      	150},
	{262,   Binco,      	125},
	{263,   DidierSachs,  	250},
	{264,   Victim,  		150},
	{265,   Null,  			0},
	{266,   Null,  			0},
	{267,   Null,  			0},
	{269,   SubUrban,       200},
	{270,   SubUrban,       200},
	{271,   SubUrban,       200},
	{272,   SubUrban,       200},
	{274,   Null,  			0},
	{275,   Null,  			0},
	{276,   Null,  			0},
	{277,   Null,  			0},
	{278,   Null,  			0},
	{279,   Null,  			0},
	{280,   Null,  			0},
	{281,   Null,  			0},
	{282,   Null,  			0},
	{283,   Null,  			0},
	{284,   Null,  			0},
	{285,   Null,  			0},
	{286,   Null,  			0},
	{287,   Null,  			0},
	{288,   Null,  			0}
};

enum HotelInfo {
	Float:hotelX,
	Float:hotelY,
	Float:hotelZ,
	hotelInt
}

new Float:PosHoteis[][HotelInfo] = {
	{974.0177, -9.5937, 1001.1484, 3},
	{961.9308, -51.9071, 1001.1172, 3},
	{974.0177, -9.5937, 1001.1484, 3},
	{961.9308, -51.9071, 1001.1172, 3},
	{961.9308, -51.9071, 1001.1172, 3}
};

enum InterioresInfo {
	hPrice,
	Float:hX,
	Float:hY,
	Float:hZ,
	hInt,
	hRadio,
	hTV,
	hGeladeira,
	hFogao,
	hCofre,
	hGuardaRoupas
}

new Interiores[][InterioresInfo] = {
	{5000, 		245.2307, 		304.7632, 		999.1484, 		1, 		1, 		0, 		0, 		0, 		0, 		1},
	{10000,     421.5704,		2536.3953,		10.0000,		10,     0,      1,      1,      0, 		1, 		1},
	{15000,		261.1262,		1284.7367,		1080.2578,      4,      0,      1,      1,      1, 		1, 		1},
	{20000,     260.8114,		1237.6132,		1084.2578,		9,      1,      1,      0,      1, 		1, 		1},
	{30000,		223.1004,		1287.6289,		1082.1406,      1,      1,      1,      1,      1, 		1, 		1},
	{40000,     447.1544,		1398.5393,		1084.3120,		2,      1,      1,      0,      0, 		1, 		1},
	{60000,     294.8661,		1474.0015,		1080.2578,		15,     1,      1,      1,      1, 		1, 		1},
	{80000,     228.3588,		1114.5723,		1080.9922,		5,      0,      1,      0,      1, 		1, 		1},
	{100000,    234.6087,		1187.8195,		1080.2578,		3,      1,      1,      0,      0, 		1, 		1},
	{150000,    233.8762, 		1065.2466, 		1084.2101,		6,		1,		1,		1,		1, 		1, 		1},
	{175000,    140.1362,		1366.6195,		1083.8594,      5,      1,      1,      0,      0, 		1, 		1},
	{200000, 	2317.7161,		-1025.8037,		1050.2178, 		9, 		1, 		1,		1,      1, 		1, 		1}
};

new Float:TelefonesPublicos[][3] = {
	{2257.4636,-1211.6708,23.9688},
	{1720.1945,-1721.1360,13.5455},
	{1724.4972,-1720.8899,13.5444},
	{2069.4429,-1767.2598,13.5625},
	{1806.3811,-1601.0634,13.5469},
	{1809.6348,-1598.1135,13.5469},
	{638.1469,-1227.1987,18.1594},
	{2166.3989,-1155.0093,24.8742},
	{1723.4542,-1720.7266,13.5433},
	{1710.9890,-1604.9969,13.5469}
};

new TelefoneOcupado[sizeof(TelefonesPublicos)];

enum SAZONE_MAIN {
	SAZONE_NAME[28],
	Float:SAZONE_AREA[6]
};

static const gSAZones[][SAZONE_MAIN] = {
	{"The Big Ear",	                {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
	{"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
	{"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
	{"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
	{"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
	{"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
	{"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
	{"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
	{"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
	{"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
	{"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
	{"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
	{"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
	{"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
	{"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
	{"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
	{"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
	{"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
	{"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
	{"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
	{"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
	{"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
	{"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
	{"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
	{"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
	{"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
	{"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
	{"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
	{"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
	{"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
	{"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
	{"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
	{"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
	{"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
	{"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
	{"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
	{"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
	{"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
	{"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
	{"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
	{"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
	{"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
	{"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
	{"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
	{"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
	{"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
	{"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
	{"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
	{"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
	{"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
	{"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
	{"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
	{"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
	{"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
	{"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
	{"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
	{"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
	{"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
	{"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
	{"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
	{"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
	{"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
	{"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
	{"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
	{"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
	{"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
	{"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
	{"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
	{"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
	{"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
	{"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
	{"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
	{"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
	{"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
	{"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
	{"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
	{"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
	{"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
	{"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
	{"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
	{"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
	{"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
	{"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
	{"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
	{"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
	{"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
	{"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
	{"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
	{"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
	{"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
	{"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
	{"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
	{"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
	{"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
	{"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
	{"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
	{"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
	{"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
	{"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
	{"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
	{"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
	{"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
	{"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
	{"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
	{"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
	{"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
	{"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
	{"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
	{"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
	{"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
	{"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
	{"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
	{"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
	{"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
	{"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
	{"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
	{"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
	{"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
	{"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
	{"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
	{"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
	{"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
	{"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
	{"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
	{"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
	{"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
	{"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
	{"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
	{"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
	{"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
	{"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
	{"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
	{"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
	{"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
	{"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
	{"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
	{"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
	{"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
	{"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
	{"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
	{"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
	{"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
	{"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
	{"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
	{"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
	{"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
	{"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
	{"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
	{"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
	{"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
	{"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
	{"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
	{"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
	{"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
	{"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
	{"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
	{"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
	{"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
	{"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
	{"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
	{"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
	{"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
	{"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
	{"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
	{"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
	{"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
	{"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
	{"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
	{"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
	{"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
	{"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
	{"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
	{"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
	{"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
	{"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
	{"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
	{"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
	{"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
	{"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
	{"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
	{"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
	{"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
	{"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
	{"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
	{"Los Santos International",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
	{"Los Santos International",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
	{"Los Santos International",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
	{"Los Santos International",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
	{"Los Santos International",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
	{"Los Santos International",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
	{"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
	{"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
	{"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
	{"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
	{"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
	{"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
	{"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
	{"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
	{"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
	{"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
	{"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
	{"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
	{"Montgomery Intersection",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
	{"Montgomery Intersection",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
	{"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
	{"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
	{"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
	{"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
	{"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
	{"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
	{"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
	{"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
	{"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
	{"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
	{"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
	{"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
	{"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
	{"Mulholland Intersection",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
	{"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
	{"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
	{"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
	{"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
	{"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
	{"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
	{"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
	{"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
	{"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
	{"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
	{"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
	{"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
	{"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
	{"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
	{"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
	{"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
	{"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
	{"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
	{"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
	{"Playa del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
	{"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
	{"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
	{"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
	{"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
	{"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
	{"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
	{"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
	{"Randolph Industrial Estate",  {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
	{"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
	{"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
	{"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
	{"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
	{"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
	{"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
	{"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
	{"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
	{"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
	{"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
	{"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
	{"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
	{"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
	{"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
	{"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
	{"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
	{"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
	{"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
	{"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
	{"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
	{"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
	{"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
	{"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
	{"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
	{"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
	{"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
	{"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
	{"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
	{"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
	{"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
	{"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
	{"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
	{"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
	{"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
	{"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
	{"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
	{"Royal Cassino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
	{"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
	{"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
	{"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
	{"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
	{"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
	{"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
	{"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
	{"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
	{"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
	{"Starfish Cassino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
	{"Starfish Cassino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
	{"Starfish Cassino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
	{"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
	{"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
	{"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
	{"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
	{"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
	{"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
	{"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
	{"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
	{"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
	{"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
	{"The Four Dragons Cassino",     {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
	{"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
	{"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
	{"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
	{"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
	{"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
	{"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
	{"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
	{"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
	{"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
	{"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
	{"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
	{"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
	{"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
	{"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
	{"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
	{"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
	{"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
	{"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
	{"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
	{"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
	{"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
	{"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
	{"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
	{"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
	{"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
	{"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
	{"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
	{"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
	{"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
	{"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
	{"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
	{"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
	{"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
	{"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
	{"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
	{"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
	{"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
	{"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
	{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
	{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
	{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
	{"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
	{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
	{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
	{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};


enum zoneinfo {
	zonename[27],
    Float:zoneminx,
    Float:zoneminy,
    Float:zonemaxx,
    Float:zonemaxy,
}

new Float:zones[][zoneinfo] = {
	{"Commerce",                     1323.90, -1842.20,   1701.90, -1722.20},
	{"Commerce",                     1323.90, -1722.20,   1440.90, -1577.50},
	{"Commerce",                     1370.80, -1577.50,   1463.90, -1384.90},
	{"Commerce",                     1463.90, -1577.50,   1667.90, -1430.80},
	{"Commerce",                     1583.50, -1722.20,   1758.90, -1577.50},
	{"Commerce",                     1667.90, -1577.50,   1812.60, -1430.80},
	{"East Beach",                   2632.80, -1852.80,   2959.30, -1668.10},
	{"East Beach",                   2632.80, -1668.10,   2747.70, -1393.40},
	{"East Beach",                   2747.70, -1668.10,   2959.30, -1498.60},
	{"East Beach",                   2747.70, -1498.60,   2959.30, -1120.00},
	{"East Los Santos",              2421.00, -1628.50,   2632.80, -1454.30},
	{"East Los Santos",              2222.50, -1628.50,   2421.00, -1494.00},
	{"East Los Santos",              2266.20, -1494.00,   2381.60, -1372.00},
	{"East Los Santos",              2381.60, -1494.00,   2421.00, -1454.30},
	{"East Los Santos",              2281.40, -1372.00,   2381.60, -1135.00},
	{"East Los Santos",              2381.60, -1454.30,   2462.10, -1135.00},
	{"East Los Santos",              2462.10, -1454.30,   2581.70, -1135.00},
	{"Ganton",                       2222.50, -1852.80,   2632.80, -1722.30},
	{"Ganton",                       2222.50, -1722.30,   2632.80, -1628.50},
	{"Glen Park",                    1812.60, -1449.60,   1996.90, -1350.70},
	{"Glen Park",                    1812.60, -1100.80,   1994.30,  -973.30},
	{"Glen Park",                    1812.60, -1350.70,   2056.80, -1100.80},
	{"Idlewood",                     1812.60, -1852.80,   1971.60, -1742.30},
	{"Idlewood",                     1812.60, -1742.30,   1951.60, -1602.30},
	{"Idlewood",                     1951.60, -1742.30,   2124.60, -1602.30},
	{"Idlewood",                     1812.60, -1602.30,   2124.60, -1449.60},
	{"Idlewood",                     2124.60, -1742.30,   2222.50, -1494.00},
	{"Idlewood",                     1971.60, -1852.80,   2222.50, -1742.30},
	{"Jefferson",                    1996.90, -1449.60,   2056.80, -1350.70},
	{"Jefferson",                    2124.60, -1494.00,   2266.20, -1449.60},
	{"Jefferson",                    2056.80, -1372.00,   2281.40, -1210.70},
	{"Jefferson",                    2056.80, -1210.70,   2185.30, -1126.30},
	{"Jefferson",                    2185.30, -1210.70,   2281.40, -1154.50},
	{"Jefferson",                    2056.80, -1449.60,   2266.20, -1372.00},
	{"Las Colinas",                  1994.30, -1100.80,   2056.80,  -920.80},
	{"Las Colinas",                  2056.80, -1126.30,   2126.80,  -920.80},
	{"Las Colinas",                  2185.30, -1154.50,   2281.40,  -934.40},
	{"Las Colinas",                  2126.80, -1126.30,   2185.30,  -934.40},
	{"Las Colinas",                  2747.70, -1120.00,   2959.30,  -945.00},
	{"Las Colinas",                  2632.70, -1135.00,   2747.70,  -945.00},
	{"Las Colinas",                  2281.40, -1135.00,   2632.70,  -945.00},
	{"Little Mexico",                1701.90, -1842.20,   1812.60, -1722.20},
	{"Little Mexico",                1758.90, -1722.20,   1812.60, -1577.50},
	{"Los Flores",                   2581.70, -1454.30,   2632.80, -1393.40},
	{"Los Flores",                   2581.70, -1393.40,   2747.70, -1135.00},
	{"Playa del Seville",            2703.50, -2126.90,   2959.30, -1852.80},
	{"Unity Station",                1692.60, -1971.80,   1812.60, -1932.80},
	{"Verdant Bluffs",                930.20, -2488.40,   1249.60, -2006.70},
	{"Verdant Bluffs",               1073.20, -2006.70,   1249.60, -1842.20},
	{"Verdant Bluffs",               1249.60, -2179.20,   1692.60, -1842.20},
	{"Willowfield",                  1970.60, -2179.20,   2089.00, -1852.80},
	{"Willowfield",                  2089.00, -2235.80,   2201.80, -1989.90},
	{"Willowfield",                  2089.00, -1989.90,   2324.00, -1852.80},
	{"Willowfield",                  2201.80, -2095.00,   2324.00, -1989.90},
	{"Willowfield",                  2541.70, -1941.40,   2703.50, -1852.80},
	{"Willowfield",                  2324.00, -2059.20,   2541.70, -1852.80},
	{"Willowfield",                  2541.70, -2059.20,   2703.50, -1941.40}
};

new ZoneAttacked[sizeof zones][128];
new GangControlZone[sizeof zones][128];
new ZoneCash[sizeof zones];
new GZ[sizeof zones];

new GangPosts[][128] = {
	"Recruta",
	"Soldado",
	"Motorista da Gang",
	"Piloto",
	"Fogueteiro",
	"Sequestrador da Gang",
	"Assaltante da Gang",
	"Olheiro",
	"Traficante",
	"Torre",
	"Braço-Direito"
};

enum C_CameraInfo {
	C_Skin,
	Float:C_CamPosX,
	Float:C_CamPosY,
	Float:C_CamPosZ,
	Float:C_CamLookX,
	Float:C_CamLookY,
	Float:C_CamLookZ,
	Float:C_PlayerPosX,
	Float:C_PlayerPosY,
	Float:C_PlayerPosZ,
	Float:C_PlayerPosAng,
	C_PlayerInt
};

new CameraTimer[MAX_SLOTS];
new CameraID[MAX_SLOTS];
new Float:C_Cameras[][C_CameraInfo] = {
	{250,	1630.6136,	-2286.0298,		110.0000,     1887.6034,	   -1682.1442,	 47.6167,    0.0,         0.0,          0.0,        360.0,      0},
	{246,	1212.5421,   -7.9539,       1000.9219,   1215.0907,    -7.8360,      1001.3281,  1215.0907,   -7.8360,      1001.3281,  98.2210,    2},
	{59,	1958.2426,	 -1772.4963,    13.3828,     1948.3235,    -1773.2008,   13.5469,    1948.3235,   -1773.2008,   13.5469,    269.1343,   0},
	{282,	1532.6145,   -1675.5782,    13.3828,     1544.2169,    -1675.3519,   13.5580,    1544.2169,   -1675.3519,   13.5580,    92.7475,    0},
	{137,	2185.6990,	 -1991.4465, 	13.5469,     2191.4924,	   -1994.2874,	 13.5469,    2191.4924,	  -1994.2874,	13.5469,    74.2841,    0},
	{17,	1220.6503,	 -1818.4247,	16.0225,     1221.1588,	   -1814.5748,	 16.5938,    1221.1588,	  -1814.5748,	16.5938,    182.6751,   0},
	{29,	2188.4998,	 -1078.5427,	56.5916,     2185.5608,	   -1079.2434,   56.5916,    2185.5608,	  -1079.2434,   56.5916,    281.8109,   0},
	{50,	2091.8062,	 -1831.9459,	16.1536,     2075.0979,	   -1831.8599,	 13.5545, 	 2075.0979,	  -1831.8599,	13.5545,    270.2408,   0},
	{179,	287.1173,	 -107.4245,		1001.5156,	 286.7108,	   -111.7934,	 1001.5156,  286.7108,	  -111.7934,	1001.5156,  354.3344,   6},
	{27,	603.4381,	 876.6929,	    -42.9609,    617.2332,	   883.2561,	 -42.9609,   617.2332,	  883.2561,	    -42.9609,   123.7678,   0},
	{147,	217.7393,	 -1444.6344,	13.2043,     212.2556,	   -1437.6019,	 13.1987,    212.2556,	  -1437.6019,	13.1987,    218.2271,   0},
	{19,	2351.2695,	 -1385.7820,	23.8338,     2351.2075,	   -1377.0303,	 24.0000,    2351.2075,	  -1377.0303,	24.0000,    182.8839,   0},
	{250,   2296.9587,	 -1528.2566,	26.8750,     2317.5269,	   -1527.8093,	 25.3438,    0.0,         0.0,          0.0,        360.0,      0},
	{159,   -1047.8540,	 -1205.7620,	128.9246,    -1058.7618,   -1205.4167,	 129.2188,   -1058.7618,  -1205.4167,	129.2188,   278.0743,   0},
	{234,   1650.9352,	 -1089.2551,	23.9063,     1651.9391,	   -1076.7721,	 23.8984,    1651.9391,	  -1076.7721,	23.8984,    180.1684,   0},
	{115,   494.4848,	 -15.9152,	    1000.6797,   491.0293,	   -14.6487,	 1000.6797,  491.0293,	  -14.6487,	    1000.6797,  265.7091,   17}
};

new CasaVendida[MAX_SLOTS] = 0;
new JogadorMultado[MAX_SLOTS] = 0;
public ZerarCasaVendida(playerid) CasaVendida[playerid]=0;
public ZerarJogadorMultado(playerid) JogadorMultado[playerid]=0;
public ZerarAvisoHorario() JaAvisouHorario = 0;
public AcaoEspecial(playerid,actionid) SetPlayerSpecialAction(playerid,actionid);
stock TrancarVeiculo(playerid,veiculo) SetVehicleParamsForPlayer(veiculo, playerid, 0, 1);
stock DestrancarVeiculo(playerid,veiculo) SetVehicleParamsForPlayer(veiculo, playerid, 0, 0);
public SetPlayerControl(playerid, control)
{
	TogglePlayerControllable(playerid, control);
	PlayerControl[playerid] = control;
}
stock GetPlayerControl(playerid) return PlayerControl[playerid];
stock ChangePlayerColor(playerid, color)
{
	if(Transparent[playerid] == 0)
	{
		SetPlayerColor(playerid, (color & 0xFFFFFF00) | 0xAA);
	}
	else
	{
		SetPlayerColor(playerid, (color & 0xFFFFFF00));
	}
}
stock SetPlayerTransparent(playerid, value)
{
	if(!value)
	{
	    SetPlayerColor(playerid, (GetPlayerColor(playerid) & 0xFFFFFF00) | 0xAA);
	}
	else
	{
	    SetPlayerColor(playerid, (GetPlayerColor(playerid) & 0xFFFFFF00));
	}
	Transparent[playerid] = value;
}
stock IsPlayerTransparent(playerid)
{
	if(Transparent[playerid] == 0) return false;
	return true;
}
main()
{
	print(" ");
	print(" ");
	print(" Virtual Life RPG: Los Santos");
	print(" ");
	print(" Versao 400");
	print(" ");
	print(" _________________________________________________");
	print(" Desenvolvido pela equipe Virtual Life");
	print(" ");
	print(" Integrantes: Texugo e Rafael Ravedutti");
	print(" _________________________________________________");
	print(" ");
	print(" ");
	print(" DEFINICOES CONSTANTES GLOBAIS:");
	print(" ");
	print(" MAX_SLOTS: " #MAX_SLOTS);
	print(" MAX_CASAS: " #MAX_CASAS);
	print(" MAX_HOTEL_PLAYERS: " #MAX_HOTEL_PLAYERS);
	print(" MAX_CELL: " #MAX_CELL);
	print(" MAX_SEGURANCAS: " #MAX_SEGURANCAS);
	print(" MAX_PLAYER_VEHICLES: " #MAX_PLAYER_VEHICLES);
	print(" MAX_GANGUES: " #MAX_GANGUES);
	print(" MAX_GANGUE_PLAYERS: " #MAX_GANGUE_PLAYERS);
	print(" MAX_JORNAIS: " #MAX_JORNAIS);
	print(" MAX_HOTEIS: " #MAX_HOTEIS);
	print(" ");

	writelog("\n---------------------------------------------");
	writelog("          	Virtual Life RPG          		 ");
	writelog("---------------------------------------------\n");
}
// ------------ Functions by DracoBlue ------------ //
fcopy(oldname[],newname[]) {
	new File:ohnd,File:nhnd;
  	if (!fexist(oldname)) return false;
  	ohnd=fopen(oldname,io_read);
  	nhnd=fopen(newname,io_write);
  	new buf2[1];
  	new i;
  	for (i=flength(ohnd);i>0;i--) {
    	fputchar(nhnd, fgetchar(ohnd, buf2[0],false),false);
  	}
  	fclose(ohnd);
  	fclose(nhnd);
  	return true;
}
public set(dest[],source[])
{
  	for(new i = 0; i < strlen(source); i++)
	{
		dest[i] = source[i];
  	}
  	dest[strlen(source)] = 0;
  	return 1;
}
strtok(const string[], &index, seperator=' ')
{
	new length = strlen(string);
	new offset = index;
	new result[128];
	while ((index < length) && (string[index] != seperator) && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	if ((index < length) && (string[index] == seperator))
	{
		index++;
	}
	return result;
}
// ---------------------------------------------- //

// ------------ Functions by Y_Less ------------ //
stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
    new Float:a;
    GetPlayerPos(playerid, x, y, a);
    GetPlayerFacingAngle(playerid, a);
    if (GetPlayerVehicleID(playerid)) {
        GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
    }
    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
}
stock GetXYInBackOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
    new Float:a;
    GetPlayerPos(playerid, x, y, a);
    GetPlayerFacingAngle(playerid, a);
    if (GetPlayerVehicleID(playerid)) {
        GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
    }
    a = (a + 180) % 360;
    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
}
stock GetXYInRightOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
    new Float:a;
    GetPlayerPos(playerid, x, y, a);
    GetPlayerFacingAngle(playerid, a);
    if (GetPlayerVehicleID(playerid)) {
        GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
    }
    a = (a + 270) % 360;
    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
}
stock GetXYInLeftOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
    new Float:a;
    GetPlayerPos(playerid, x, y, a);
    GetPlayerFacingAngle(playerid, a);
    if (GetPlayerVehicleID(playerid)) {
        GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
    }
    a = (a + 90) % 360;
    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
}
// ---------------------------------------------- //
stock IsPlayerBackOfPlayer(playerid, playerid2)
{
	if(GetDistanceBetweenPlayers(playerid, playerid2) >= 3) return false;
    new Float:a[2];
    GetPlayerFacingAngle(playerid, a[0]);
    GetPlayerFacingAngle(playerid2, a[1]);
    if(a[0] - a[1] < 8) return true;
    return false;
}
GiveValue(filename[],key[],amount)
{
	new value=strval(GetValue(filename,key));
	SetValue(filename,key,ReturnValueStr(value+amount));
}
SetValue(filename[],key[],newvalue[])
{
    if(!fexist(filename)) return 0;
	new string[128];
	format(string,sizeof(string),"%s.part",filename);
    new File:file=fopen(filename,io_read);
    new File:file2=fopen(string,io_write);
	new tmp[128],key2[128],str[128];
	while(fread(file,tmp,sizeof(tmp))){
	    set(key2,GetValueKey(tmp));
	    if(compare(key,key2)){
	        format(str,sizeof(str),"%s=%s",key,newvalue);
	        fwrite(file2,str);
		}
		else{
		    fwrite(file2,tmp);
		}
	}
	fclose(file);
	fclose(file2);
	fcopy(string,filename);
	fremove(string);
	return 1;
}
GetValue(filename[],key[])
{
	new val[128];
	val[0]=0;
	if(!fexist(filename)) return val;
    new File:file=fopen(filename,io_read);
	new tmp[128],key2[128];
	while(fread(file,tmp,sizeof(tmp))){
		key2 = GetValueKey(tmp);
		if(compare(key,key2)){
			set(val,GetKeyValue(tmp));
			break;
		}
	}
	fclose(file);
	return val;
}
stock GetGangID(namegangue[])
{
	for(new g=0;g<LastGNG;g++){
	    if(compare(Gangues[g],namegangue)){
	        return g;
		}
	}
	return -1;
}
stock GetJornalID(titulo[])
{
	for(new j=0;j<LastJN;j++){
	    if(compare(Jornais[j],titulo)){
	        return j;
		}
	}
	return -1;
}
stock LoadGangues()
{
	if(!fexist("Utilidades/Gangues.rpg")) return 0;
	new File:gfile = fopen("Utilidades/Gangues.rpg",io_read);
	new tmp[128], value[128], g;
	while(fread(gfile,tmp,sizeof(tmp))){
		strmid(value, tmp, 0, strfind(tmp,"\r",true));
		if(!compare(value, "NONE")){
	    	set(Gangues[g],value);
			g++;
		}
	}
	fclose(gfile);
	LastGNG = g;
	return 1;
}
stock LoadGanguesPart2()
{
	new tmp[128];
	new value[128];
	new key[128];
	new gangfile[128];
	new idx;
    for(new g = 0; g < LastGNG; g++){
	    if(!compare(Gangues[g],"NONE")){
	    	set(gangfile,GangFile(Gangues[g]));
			if(!fexist(gangfile)) continue;
	    	new File:gfile = fopen(gangfile,io_read);
	    	while(fread(gfile,tmp,sizeof(tmp))){
	    		key = GetValueKey(tmp);
    			value = GetKeyValue(tmp);
	   			if(compare(key,"GangDono")) { set(gStats[g][GangDono],value); }
    			if(compare(key,"GangMembros")) { gStats[g][GangMembros] = strval(value); }
    			if(compare(key,"GangPontos")) { gStats[g][GangPontos] = strval(value); }
    			if(compare(key,"GangColor")) { gStats[g][GangColor] = strval(value); }
    			if(compare(key,"GangLevel")) { gStats[g][GangLevel] = strval(value); }
    			if(compare(key,"SkinSlot1")) { gStats[g][SkinSlot][0] = strval(value); }
    			if(compare(key,"SkinSlot2")) { gStats[g][SkinSlot][1] = strval(value); }
    			if(compare(key,"SkinSlot3")) { gStats[g][SkinSlot][2] = strval(value); }
    			if(compare(key,"SkinSlot4")) { gStats[g][SkinSlot][3] = strval(value); }
    			if(compare(key,"SkinSlot5")) { gStats[g][SkinSlot][4] = strval(value); }
    			if(compare(key,"GangMembers")){
    				idx=0;
    				for(new m=0; m<gStats[g][GangMembros]; m++){
						set(MembersGang[g][m],strtok(value,idx,';'));
					}
				}
			}
			fclose(gfile);
		}
	}
}

stock SaveGangues()
{
   	new gangfile[128];
	new File:gfile = fopen("Utilidades/Gangues.rpg", io_write);
	for(new g = 0; g < LastGNG; g++){
 		fwrite(gfile,Gangues[g]);
	    fwrite(gfile,"\r\n");
   	}
   	fclose(gfile);
   	for(new g = 0; g < LastGNG; g++){
    	set(gangfile,GangFile(Gangues[g]));
		if(!fexist(gangfile)) continue;
	    new File:gfile2 = fopen(gangfile, io_write);
	    new strsave[128], string[128], membros[128];
	    format(strsave,sizeof(strsave),"GangDono=%s\r\n",gStats[g][GangDono]); fwrite(gfile2,strsave);
        format(strsave,sizeof(strsave),"GangMembros=%d\r\n",gStats[g][GangMembros]); fwrite(gfile2,strsave);
        format(strsave,sizeof(strsave),"GangPontos=%d\r\n",gStats[g][GangPontos]); fwrite(gfile2,strsave);
        format(strsave,sizeof(strsave),"GangColor=%d\r\n",gStats[g][GangColor]); fwrite(gfile2,strsave);
        format(strsave,sizeof(strsave),"GangLevel=%d\r\n",gStats[g][GangLevel]); fwrite(gfile2,strsave);
        format(strsave,sizeof(strsave),"SkinSlot1=%d\r\n",gStats[g][SkinSlot][0]); fwrite(gfile2,strsave);
        format(strsave,sizeof(strsave),"SkinSlot2=%d\r\n",gStats[g][SkinSlot][1]); fwrite(gfile2,strsave);
        format(strsave,sizeof(strsave),"SkinSlot3=%d\r\n",gStats[g][SkinSlot][2]); fwrite(gfile2,strsave);
        format(strsave,sizeof(strsave),"SkinSlot4=%d\r\n",gStats[g][SkinSlot][3]); fwrite(gfile2,strsave);
        format(strsave,sizeof(strsave),"SkinSlot5=%d\r\n",gStats[g][SkinSlot][4]); fwrite(gfile2,strsave);
		for(new m=0; m<gStats[g][GangMembros]; m++){
		    strcat(string,MembersGang[g][m]);
		    strcat(string,";");
		}
		format(membros,sizeof(membros),"GangMembers=%s\r\n",string);
		fwrite(gfile2,membros);
		fclose(gfile2);
	}
}
stock SaveJornais()
{
	new File:jfile = fopen("Utilidades/Jornais.rpg", io_write);
	for(new j = 0; j < LastJN; j++)
	{
	    fwrite(jfile, Jornais[j]);
	    fwrite(jfile, "\r\n");
	}
	fclose(jfile);
	for(new j = 0; j < LastJN; j++)
	{
	    new strsave[128];
		jfile = fopen(JornalFile(Jornais[j]), io_write);
		format(strsave, sizeof(strsave), "Autor=%s\r\n", jStats[j][Autor]); fwrite(jfile, strsave);
		format(strsave, sizeof(strsave), "Empresas1=%s\r\n", jStats[j][CEmpresas1]); fwrite(jfile, strsave);
        format(strsave, sizeof(strsave), "Empresas2=%s\r\n", jStats[j][CEmpresas2]); fwrite(jfile, strsave);
        format(strsave, sizeof(strsave), "Empresas3=%s\r\n", jStats[j][CEmpresas3]); fwrite(jfile, strsave);
        format(strsave, sizeof(strsave), "Homicidios1=%s\r\n", jStats[j][CHomicidios1]); fwrite(jfile, strsave);
        format(strsave, sizeof(strsave), "Homicidios2=%s\r\n", jStats[j][CHomicidios2]); fwrite(jfile, strsave);
        format(strsave, sizeof(strsave), "Homicidios3=%s\r\n", jStats[j][CHomicidios3]); fwrite(jfile, strsave);
        format(strsave, sizeof(strsave), "Esporte1=%s\r\n", jStats[j][CEsporte1]); fwrite(jfile, strsave);
        format(strsave, sizeof(strsave), "Esporte2=%s\r\n", jStats[j][CEsporte2]); fwrite(jfile, strsave);
        format(strsave, sizeof(strsave), "Esporte3=%s\r\n", jStats[j][CEsporte3]); fwrite(jfile, strsave);
        format(strsave, sizeof(strsave), "Mercadorias1=%s\r\n", jStats[j][CMercadorias1]); fwrite(jfile, strsave);
        format(strsave, sizeof(strsave), "Mercadorias2=%s\r\n", jStats[j][CMercadorias2]); fwrite(jfile, strsave);
        format(strsave, sizeof(strsave), "Mercadorias3=%s\r\n", jStats[j][CMercadorias3]); fwrite(jfile, strsave);
        format(strsave, sizeof(strsave), "Outros1=%s\r\n", jStats[j][COutros1]); fwrite(jfile, strsave);
        format(strsave, sizeof(strsave), "Outros2=%s\r\n", jStats[j][COutros2]); fwrite(jfile, strsave);
        format(strsave, sizeof(strsave), "Outros3=%s\r\n", jStats[j][COutros3]); fwrite(jfile, strsave);
		fclose(jfile);
	}
}
stock LoadJornais()
{
	if(!fexist("Utilidades/Jornais.rpg")) return 0;
	new File:jfile = fopen("Utilidades/Jornais.rpg", io_read);
	new tmp[128], value[128];
	new j;
	while(fread(jfile, tmp, sizeof tmp))
	{
	    strmid(value, tmp, 0, strfind(tmp, "\r", true));
	    if(!compare(value, "NONE")){
	    	set(Jornais[j], value);
	    	j++;
		}
	}
	fclose(jfile);
	LastJN = j;
	return 1;
}
stock LoadJornaisPart2()
{
	for(new j = 0; j < LastJN; j++)
	{
	    if(!fexist(JornalFile(Jornais[j]))) continue;
	    new File:jfile = fopen(JornalFile(Jornais[j]), io_read);
	    new tmp[128];
	    new key[128];
	    new value[128];
	    while(fread(jfile, tmp, sizeof tmp))
	    {
	        key = GetValueKey(tmp);
	        value = GetKeyValue(tmp);
			if(compare(key, "Autor")) set(jStats[j][Autor], value);
			if(compare(key, "Empresas1")) set(jStats[j][CEmpresas1], value);
			if(compare(key, "Empresas2")) set(jStats[j][CEmpresas2], value);
			if(compare(key, "Empresas3")) set(jStats[j][CEmpresas3], value);
			if(compare(key, "Homicidios1")) set(jStats[j][CHomicidios1], value);
			if(compare(key, "Homicidios2")) set(jStats[j][CHomicidios2], value);
			if(compare(key, "Homicidios3")) set(jStats[j][CHomicidios3], value);
			if(compare(key, "Esporte1")) set(jStats[j][CEsporte1], value);
			if(compare(key, "Esporte2")) set(jStats[j][CEsporte2], value);
			if(compare(key, "Esporte3")) set(jStats[j][CEsporte3], value);
			if(compare(key, "Mercadorias1")) set(jStats[j][CMercadorias1], value);
			if(compare(key, "Mercadorias2")) set(jStats[j][CMercadorias2], value);
			if(compare(key, "Mercadorias3")) set(jStats[j][CMercadorias3], value);
			if(compare(key, "Outros1")) set(jStats[j][COutros1], value);
			if(compare(key, "Outros2")) set(jStats[j][COutros2], value);
			if(compare(key, "Outros3")) set(jStats[j][COutros3], value);
	    }
	    fclose(jfile);
	}
}
stock SaveProperty(property)
{
	new str[128],strsave[128];
	new File:propfile;
	set(str,PropertyFile(property));
	propfile = fopen(str,io_write);
	format(strsave,sizeof(strsave),"Dono=%s\r\n",propStats[property][Dono1]); fwrite(propfile,strsave);
	format(strsave,sizeof(strsave),"Socio1=%s\r\n",propStats[property][Socio1]); fwrite(propfile,strsave);
	format(strsave,sizeof(strsave),"Socio2=%s\r\n",propStats[property][Socio2]); fwrite(propfile,strsave);
	format(strsave,sizeof(strsave),"Socio3=%s\r\n",propStats[property][Socio3]); fwrite(propfile,strsave);
	format(strsave,sizeof(strsave),"Lucro=%d\r\n",propStats[property][Lucro]); fwrite(propfile,strsave);
	format(strsave,sizeof(strsave),"Prejuizo=%d\r\n",propStats[property][Prejuizo]); fwrite(propfile,strsave);
	format(strsave,sizeof(strsave),"Investimento=%d\r\n",propStats[property][Investimento]); fwrite(propfile,strsave);
	format(strsave,sizeof(strsave),"SemanaPassada=%d\r\n",propStats[property][SemanaPassada]); fwrite(propfile,strsave);
	format(strsave,sizeof(strsave),"SemanaRetrasada=%d\r\n",propStats[property][SemanaRetrasada]); fwrite(propfile,strsave);
	fclose(propfile);
}
stock LoadProperty(property)
{
	new tmp[128],str[128],File:propfile,key[128],value[128];
	set(str,PropertyFile(property));
	if(fexist(str)){
		propfile = fopen(str,io_read);
		while(fread(propfile,tmp,sizeof(tmp))){
			key = GetValueKey(tmp);
			value = GetKeyValue(tmp);
			if(compare(key,"Dono")) { set(propStats[property][Dono1],value); }
			if(compare(key,"Socio1")) { set(propStats[property][Socio1],value); }
			if(compare(key,"Socio2")) { set(propStats[property][Socio2],value); }
			if(compare(key,"Socio3")) { set(propStats[property][Socio3],value); }
			if(compare(key,"Lucro")) { propStats[property][Lucro] = strval(value); }
			if(compare(key,"Prejuizo")) { propStats[property][Prejuizo] = strval(value); }
			if(compare(key,"Investimento")) { propStats[property][Investimento] = strval(value); }
			if(compare(key,"SemanaPassada")) { propStats[property][SemanaPassada] = strval(value); }
			if(compare(key,"SemanaRetrasada")) { propStats[property][SemanaRetrasada] = strval(value); }
		}
		fclose(propfile);
	}
	return 1;
}
stock SavePickup(pickupid)
{
	new pfile[128];
	new strsave[128];
	new File:pickupfile;
	set(pfile,PickupFile(pickupid));
	if(fexist(pfile)){
	    pickupfile = fopen(pfile,io_write);
		format(strsave,128,"PickupDono=%s\r\n",pckStats[pickupid][PickupDono]); fwrite(pickupfile,strsave);
		format(strsave,128,"PickupValor=%d\r\n",pckStats[pickupid][PickupValor]); fwrite(pickupfile,strsave);
        format(strsave,128,"SemTelefone=%d\r\n",pckStats[pickupid][SemTelefone]); fwrite(pickupfile,strsave);
        format(strsave,128,"ContaTelefone=%d\r\n",pckStats[pickupid][ContaTelefone]); fwrite(pickupfile,strsave);
        format(strsave,128,"SemLuz=%d\r\n",pckStats[pickupid][SemLuz]); fwrite(pickupfile,strsave);
        format(strsave,128,"ContaLuz=%d\r\n",pckStats[pickupid][ContaLuz]); fwrite(pickupfile,strsave);
        format(strsave,128,"TV=%d\r\n",pckStats[pickupid][TV]); fwrite(pickupfile,strsave);
        format(strsave,128,"Radio=%d\r\n",pckStats[pickupid][Radio]); fwrite(pickupfile,strsave);
        format(strsave,128,"Geladeira=%d\r\n",pckStats[pickupid][Geladeira]); fwrite(pickupfile,strsave);
        format(strsave,128,"Fogao=%d\r\n",pckStats[pickupid][Fogao]); fwrite(pickupfile,strsave);
        format(strsave,128,"Computador=%d\r\n",pckStats[pickupid][Computador]); fwrite(pickupfile,strsave);
        format(strsave,128,"Cofre=%d\r\n",pckStats[pickupid][Cofre]); fwrite(pickupfile,strsave);
        format(strsave,128,"GuardaRoupas=%d\r\n",pckStats[pickupid][GuardaRoupas]); fwrite(pickupfile,strsave);
        format(strsave,128,"Alarme=%d\r\n",pckStats[pickupid][Alarme]); fwrite(pickupfile,strsave);
        format(strsave,128,"CofreCelular=%d\r\n",pckStats[pickupid][CofreCelular]); fwrite(pickupfile,strsave);
        format(strsave,128,"TelefoneNumb=%d\r\n",pckStats[pickupid][TelefoneNumb]); fwrite(pickupfile,strsave);
        format(strsave,128,"MaconhaCofre=%d\r\n",pckStats[pickupid][MaconhaCofre]); fwrite(pickupfile,strsave);
        format(strsave,128,"HeroinaCofre=%d\r\n",pckStats[pickupid][HeroinaCofre]); fwrite(pickupfile,strsave);
        format(strsave,128,"CocainaCofre=%d\r\n",pckStats[pickupid][CocainaCofre]); fwrite(pickupfile,strsave);
        format(strsave,128,"DinheiroCofre=%d\r\n",pckStats[pickupid][DinheiroCofre]); fwrite(pickupfile,strsave);
        format(strsave,128,"SkinRoupa0=%d\r\n",pckStats[pickupid][SkinRoupa][0]); fwrite(pickupfile,strsave);
        format(strsave,128,"SkinRoupa1=%d\r\n",pckStats[pickupid][SkinRoupa][1]); fwrite(pickupfile,strsave);
        format(strsave,128,"SkinRoupa2=%d\r\n",pckStats[pickupid][SkinRoupa][2]); fwrite(pickupfile,strsave);
        format(strsave,128,"SkinRoupa3=%d\r\n",pckStats[pickupid][SkinRoupa][3]); fwrite(pickupfile,strsave);
        format(strsave,128,"CorretorVenda=%s\r\n",pckStats[pickupid][CorretorVenda]); fwrite(pickupfile,strsave);
        format(strsave,128,"Vendendo=%d\r\n",pckStats[pickupid][Vendendo]); fwrite(pickupfile,strsave);
        format(strsave,128,"AlugandoCasa=%d\r\n",pckStats[pickupid][AlugandoCasa]); fwrite(pickupfile,strsave);
        format(strsave,128,"DiasCasaAluguel=%d\r\n",pckStats[pickupid][DiasCasaAluguel]); fwrite(pickupfile,strsave);
        format(strsave,128,"ValorCasaAluguel=%d\r\n",pckStats[pickupid][ValorCasaAluguel]); fwrite(pickupfile,strsave);
        format(strsave,128,"SeguroDaCasa=%d\r\n",pckStats[pickupid][SeguroDaCasa]); fwrite(pickupfile,strsave);
        format(strsave,128,"X=%f\r\n",pckStats[pickupid][pX]); fwrite(pickupfile,strsave);
        format(strsave,128,"Y=%f\r\n",pckStats[pickupid][pY]); fwrite(pickupfile,strsave);
        format(strsave,128,"Z=%f\r\n",pckStats[pickupid][pZ]); fwrite(pickupfile,strsave);
        format(strsave,128,"SenhaCofre=%s\r\n",pckStats[pickupid][SenhaCofre]); fwrite(pickupfile,strsave);
        format(strsave,128,"ArmasCofre0=%d\r\n",pckStats[pickupid][ArmasCofre][0]); fwrite(pickupfile,strsave);
        format(strsave,128,"ArmasCofre1=%d\r\n",pckStats[pickupid][ArmasCofre][1]); fwrite(pickupfile,strsave);
        format(strsave,128,"ArmasCofre2=%d\r\n",pckStats[pickupid][ArmasCofre][2]); fwrite(pickupfile,strsave);
        format(strsave,128,"ArmasCofre3=%d\r\n",pckStats[pickupid][ArmasCofre][3]); fwrite(pickupfile,strsave);
        format(strsave,128,"ArmasCofre4=%d\r\n",pckStats[pickupid][ArmasCofre][4]); fwrite(pickupfile,strsave);
        format(strsave,128,"ArmasCofre5=%d\r\n",pckStats[pickupid][ArmasCofre][5]); fwrite(pickupfile,strsave);
        format(strsave,128,"ArmasCofre6=%d\r\n",pckStats[pickupid][ArmasCofre][6]); fwrite(pickupfile,strsave);
        format(strsave,128,"ArmasCofre7=%d\r\n",pckStats[pickupid][ArmasCofre][7]); fwrite(pickupfile,strsave);
        format(strsave,128,"ArmasCofre8=%d\r\n",pckStats[pickupid][ArmasCofre][8]); fwrite(pickupfile,strsave);
        format(strsave,128,"ArmasCofre9=%d\r\n",pckStats[pickupid][ArmasCofre][9]); fwrite(pickupfile,strsave);
        format(strsave,128,"ArmasCofre10=%d\r\n",pckStats[pickupid][ArmasCofre][10]); fwrite(pickupfile,strsave);
        format(strsave,128,"ArmasCofre11=%d\r\n",pckStats[pickupid][ArmasCofre][11]); fwrite(pickupfile,strsave);
        format(strsave,128,"ArmasCofre12=%d\r\n",pckStats[pickupid][ArmasCofre][12]); fwrite(pickupfile,strsave);
        format(strsave,128,"ArmasAmmoCofre0=%d\r\n",pckStats[pickupid][ArmasAmmoCofre][0]); fwrite(pickupfile,strsave);
        format(strsave,128,"ArmasAmmoCofre1=%d\r\n",pckStats[pickupid][ArmasAmmoCofre][1]); fwrite(pickupfile,strsave);
        format(strsave,128,"ArmasAmmoCofre2=%d\r\n",pckStats[pickupid][ArmasAmmoCofre][2]); fwrite(pickupfile,strsave);
        format(strsave,128,"ArmasAmmoCofre3=%d\r\n",pckStats[pickupid][ArmasAmmoCofre][3]); fwrite(pickupfile,strsave);
        format(strsave,128,"ArmasAmmoCofre4=%d\r\n",pckStats[pickupid][ArmasAmmoCofre][4]); fwrite(pickupfile,strsave);
        format(strsave,128,"ArmasAmmoCofre5=%d\r\n",pckStats[pickupid][ArmasAmmoCofre][5]); fwrite(pickupfile,strsave);
        format(strsave,128,"ArmasAmmoCofre6=%d\r\n",pckStats[pickupid][ArmasAmmoCofre][6]); fwrite(pickupfile,strsave);
        format(strsave,128,"ArmasAmmoCofre7=%d\r\n",pckStats[pickupid][ArmasAmmoCofre][7]); fwrite(pickupfile,strsave);
        format(strsave,128,"ArmasAmmoCofre8=%d\r\n",pckStats[pickupid][ArmasAmmoCofre][8]); fwrite(pickupfile,strsave);
        format(strsave,128,"ArmasAmmoCofre9=%d\r\n",pckStats[pickupid][ArmasAmmoCofre][9]); fwrite(pickupfile,strsave);
        format(strsave,128,"ArmasAmmoCofre10=%d\r\n",pckStats[pickupid][ArmasAmmoCofre][10]); fwrite(pickupfile,strsave);
        format(strsave,128,"ArmasAmmoCofre11=%d\r\n",pckStats[pickupid][ArmasAmmoCofre][11]); fwrite(pickupfile,strsave);
        format(strsave,128,"ArmasAmmoCofre12=%d\r\n",pckStats[pickupid][ArmasAmmoCofre][12]); fwrite(pickupfile,strsave);
        format(strsave,128,"FrangoGeladeira=%d\r\n",pckStats[pickupid][FrangoGeladeira]); fwrite(pickupfile,strsave);
        format(strsave,128,"PeixeGeladeira=%d\r\n",pckStats[pickupid][PeixeGeladeira]); fwrite(pickupfile,strsave);
        format(strsave,128,"SaladaGeladeira=%d\r\n",pckStats[pickupid][SaladaGeladeira]); fwrite(pickupfile,strsave);
        format(strsave,128,"PizzaGeladeira=%d\r\n",pckStats[pickupid][PizzaGeladeira]); fwrite(pickupfile,strsave);
        format(strsave,128,"RefriGeladeira=%d\r\n",pckStats[pickupid][RefriGeladeira]); fwrite(pickupfile,strsave);
        format(strsave,128,"SucoGeladeira=%d\r\n",pckStats[pickupid][SucoGeladeira]); fwrite(pickupfile,strsave);
        format(strsave,128,"CarneGeladeira=%d\r\n",pckStats[pickupid][CarneGeladeira]); fwrite(pickupfile,strsave);
        format(strsave,128,"StrogonoffGeladeira=%d\r\n",pckStats[pickupid][StrogonoffGeladeira]); fwrite(pickupfile,strsave);
        format(strsave,128,"CamaraoGeladeira=%d\r\n",pckStats[pickupid][CamaraoGeladeira]); fwrite(pickupfile,strsave);
        format(strsave,128,"LinguicaGeladeira=%d\r\n",pckStats[pickupid][LinguicaGeladeira]); fwrite(pickupfile,strsave);
	    fclose(pickupfile);
	}
    return 1;
}
stock LoadPickup(pickupid)
{
    new pfile[128],tmp[128],value[128],key[128];
    new File:pickupfile;
	set(pfile,PickupFile(pickupid));
	if(fexist(pfile)){
		pickupfile = fopen(pfile,io_read);
		while(fread(pickupfile,tmp,sizeof(tmp))){
		    key = GetValueKey(tmp);
		    value = GetKeyValue(tmp);
		    if(compare(key,"PickupDono")) { set(pckStats[pickupid][PickupDono],value); }
		    if(compare(key,"PickupValor")) { pckStats[pickupid][PickupValor] = strval(value); }
		    if(compare(key,"SemTelefone")) { pckStats[pickupid][SemTelefone] = strval(value); }
		    if(compare(key,"ContaTelefone")) { pckStats[pickupid][ContaTelefone] = strval(value); }
		    if(compare(key,"SemLuz")) { pckStats[pickupid][SemLuz] = strval(value); }
		    if(compare(key,"TV")) { pckStats[pickupid][TV] = strval(value); }
		    if(compare(key,"Radio")) { pckStats[pickupid][Radio] = strval(value); }
		    if(compare(key,"Geladeira")) { pckStats[pickupid][Geladeira] = strval(value); }
		    if(compare(key,"Fogao")) { pckStats[pickupid][Fogao] = strval(value); }
		    if(compare(key,"Computador")) { pckStats[pickupid][Computador] = strval(value); }
		    if(compare(key,"Cofre")) { pckStats[pickupid][Cofre] = strval(value); }
		    if(compare(key,"GuardaRoupas")) { pckStats[pickupid][GuardaRoupas] = strval(value); }
		    if(compare(key,"Alarme")) { pckStats[pickupid][Alarme] = strval(value); }
		    if(compare(key,"CofreCelular")) { pckStats[pickupid][CofreCelular] = strval(value); }
		    if(compare(key,"TelefoneNumb")) { pckStats[pickupid][TelefoneNumb] = strval(value); }
		    if(compare(key,"MaconhaCofre")) { pckStats[pickupid][MaconhaCofre] = strval(value); }
		    if(compare(key,"HeroinaCofre")) { pckStats[pickupid][HeroinaCofre] = strval(value); }
		    if(compare(key,"CocainaCofre")) { pckStats[pickupid][CocainaCofre] = strval(value); }
		    if(compare(key,"DinheiroCofre")) { pckStats[pickupid][DinheiroCofre] = strval(value); }
		    if(compare(key,"SkinRoupa0")) { pckStats[pickupid][SkinRoupa][0] = strval(value); }
		    if(compare(key,"SkinRoupa1")) { pckStats[pickupid][SkinRoupa][1] = strval(value); }
		    if(compare(key,"SkinRoupa2")) { pckStats[pickupid][SkinRoupa][2] = strval(value); }
		    if(compare(key,"SkinRoupa3")) { pckStats[pickupid][SkinRoupa][3] = strval(value); }
		    if(compare(key,"CorretorVenda")) { set(pckStats[pickupid][CorretorVenda],value); }
		    if(compare(key,"Vendendo")) { pckStats[pickupid][Vendendo] = strval(value); }
		    if(compare(key,"AlugandoCasa")) { pckStats[pickupid][AlugandoCasa] = strval(value); }
   		    if(compare(key,"DiasCasaAluguel")) { pckStats[pickupid][DiasCasaAluguel] = strval(value); }
   		    if(compare(key,"ValorCasaAluguel")) { pckStats[pickupid][ValorCasaAluguel] = strval(value); }
		    if(compare(key,"SeguroDaCasa")) { pckStats[pickupid][SeguroDaCasa] = strval(value); }
		    if(compare(key,"X")) { pckStats[pickupid][pX] = floatstr(value); }
		    if(compare(key,"Y")) { pckStats[pickupid][pY] = floatstr(value); }
		    if(compare(key,"Z")) { pckStats[pickupid][pZ] = floatstr(value); }
		    if(compare(key,"SenhaCofre")) { set(pckStats[pickupid][SenhaCofre],value); }
            if(compare(key,"ArmasCofre0")) { pckStats[pickupid][ArmasCofre][0] = strval(value); }
            if(compare(key,"ArmasCofre1")) { pckStats[pickupid][ArmasCofre][1] = strval(value); }
            if(compare(key,"ArmasCofre2")) { pckStats[pickupid][ArmasCofre][2] = strval(value); }
            if(compare(key,"ArmasCofre3")) { pckStats[pickupid][ArmasCofre][3] = strval(value); }
            if(compare(key,"ArmasCofre4")) { pckStats[pickupid][ArmasCofre][4] = strval(value); }
            if(compare(key,"ArmasCofre5")) { pckStats[pickupid][ArmasCofre][5] = strval(value); }
            if(compare(key,"ArmasCofre6")) { pckStats[pickupid][ArmasCofre][6] = strval(value); }
            if(compare(key,"ArmasCofre7")) { pckStats[pickupid][ArmasCofre][7] = strval(value); }
            if(compare(key,"ArmasCofre8")) { pckStats[pickupid][ArmasCofre][8] = strval(value); }
            if(compare(key,"ArmasCofre9")) { pckStats[pickupid][ArmasCofre][9] = strval(value); }
            if(compare(key,"ArmasCofre10")) { pckStats[pickupid][ArmasCofre][10] = strval(value); }
            if(compare(key,"ArmasCofre11")) { pckStats[pickupid][ArmasCofre][11] = strval(value); }
            if(compare(key,"ArmasCofre12")) { pckStats[pickupid][ArmasCofre][12] = strval(value); }
            if(compare(key,"ArmasAmmoCofre0")) { pckStats[pickupid][ArmasAmmoCofre][0] = strval(value); }
            if(compare(key,"ArmasAmmoCofre1")) { pckStats[pickupid][ArmasAmmoCofre][1] = strval(value); }
            if(compare(key,"ArmasAmmoCofre2")) { pckStats[pickupid][ArmasAmmoCofre][2] = strval(value); }
            if(compare(key,"ArmasAmmoCofre3")) { pckStats[pickupid][ArmasAmmoCofre][3] = strval(value); }
            if(compare(key,"ArmasAmmoCofre4")) { pckStats[pickupid][ArmasAmmoCofre][4] = strval(value); }
            if(compare(key,"ArmasAmmoCofre5")) { pckStats[pickupid][ArmasAmmoCofre][5] = strval(value); }
            if(compare(key,"ArmasAmmoCofre6")) { pckStats[pickupid][ArmasAmmoCofre][6] = strval(value); }
            if(compare(key,"ArmasAmmoCofre7")) { pckStats[pickupid][ArmasAmmoCofre][7] = strval(value); }
            if(compare(key,"ArmasAmmoCofre8")) { pckStats[pickupid][ArmasAmmoCofre][8] = strval(value); }
            if(compare(key,"ArmasAmmoCofre9")) { pckStats[pickupid][ArmasAmmoCofre][9] = strval(value); }
            if(compare(key,"ArmasAmmoCofre10")) { pckStats[pickupid][ArmasAmmoCofre][10] = strval(value); }
            if(compare(key,"ArmasAmmoCofre11")) { pckStats[pickupid][ArmasAmmoCofre][11] = strval(value); }
            if(compare(key,"ArmasAmmoCofre12")) { pckStats[pickupid][ArmasAmmoCofre][12] = strval(value); }
            if(compare(key,"FrangoGeladeira")) { pckStats[pickupid][FrangoGeladeira] = strval(value); }
            if(compare(key,"PeixeGeladeira")) { pckStats[pickupid][PeixeGeladeira] = strval(value); }
            if(compare(key,"SaladaGeladeira")) { pckStats[pickupid][SaladaGeladeira] = strval(value); }
            if(compare(key,"PizzaGeladeira")) { pckStats[pickupid][PizzaGeladeira] = strval(value); }
            if(compare(key,"RefriGeladeira")) { pckStats[pickupid][RefriGeladeira] = strval(value); }
            if(compare(key,"SucoGeladeira")) { pckStats[pickupid][SucoGeladeira] = strval(value); }
            if(compare(key,"CarneGeladeira")) { pckStats[pickupid][CarneGeladeira] = strval(value); }
            if(compare(key,"StrogonoffGeladeira")) { pckStats[pickupid][StrogonoffGeladeira] = strval(value); }
            if(compare(key,"CamaraoGeladeira")) { pckStats[pickupid][CamaraoGeladeira] = strval(value); }
            if(compare(key,"LinguicaGeladeira")) { pckStats[pickupid][LinguicaGeladeira] = strval(value); }
		}
		fclose(pickupfile);
	}
	return 1;
}
stock SaveVehicle(vehicleid)
{
	new vfile[128];
	new strsave[128];
	new File:vehiclefile;
	set(vfile,VehicleFile(vehicleid));
	if(fexist(vfile) || vehicleid <= AmountServerVehicles){
		vehiclefile = fopen(vfile,io_write);
    	format(strsave,128,"Dono=%s\r\n",vStats[vehicleid][VDono]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Placa=%s\r\n",vStats[vehicleid][VPlaca]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Chave=%s\r\n",vStats[vehicleid][VChave]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Escondido=%d\r\n",vStats[vehicleid][VEscondido]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Alarme=%d\r\n",vStats[vehicleid][VAlarme]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Radio=%d\r\n",vStats[vehicleid][VRadio]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Travas=%d\r\n",vStats[vehicleid][VTravas]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Modelo=%d\r\n",vStats[vehicleid][Modelo]); fwrite(vehiclefile,strsave);
   	 	format(strsave,128,"Gasolina=%d\r\n",vStats[vehicleid][Combustivel]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Confiscado=%d\r\n",vStats[vehicleid][Confiscado]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Dividas=%d\r\n",vStats[vehicleid][Dividas]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"PrecoVenda=%d\r\n",vStats[vehicleid][PrecoVenda]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Seguro=%d\r\n",vStats[vehicleid][VSeguro]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Color1=%d\r\n",vStats[vehicleid][Color1]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Color2=%d\r\n",vStats[vehicleid][Color2]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Trancado=%d\r\n",vStats[vehicleid][Trancado]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Fume=%d\r\n",vStats[vehicleid][Fume]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"CarPosX=%f\r\n",vStats[vehicleid][CarPosX]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"CarPosY=%f\r\n",vStats[vehicleid][CarPosY]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"CarPosZ=%f\r\n",vStats[vehicleid][CarPosZ]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"CarPosAng=%f\r\n",vStats[vehicleid][CarPosAng]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Tuning0=%d\r\n",vStats[vehicleid][Tuning][0]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Tuning1=%d\r\n",vStats[vehicleid][Tuning][1]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Tuning2=%d\r\n",vStats[vehicleid][Tuning][2]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Tuning3=%d\r\n",vStats[vehicleid][Tuning][3]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Tuning4=%d\r\n",vStats[vehicleid][Tuning][4]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Tuning5=%d\r\n",vStats[vehicleid][Tuning][5]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Tuning6=%d\r\n",vStats[vehicleid][Tuning][6]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Tuning7=%d\r\n",vStats[vehicleid][Tuning][7]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Tuning8=%d\r\n",vStats[vehicleid][Tuning][8]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Tuning9=%d\r\n",vStats[vehicleid][Tuning][9]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Tuning10=%d\r\n",vStats[vehicleid][Tuning][10]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Tuning11=%d\r\n",vStats[vehicleid][Tuning][11]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Tuning12=%d\r\n",vStats[vehicleid][Tuning][12]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Tuning13=%d\r\n",vStats[vehicleid][Tuning][13]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Tuning14=%d\r\n",vStats[vehicleid][Tuning][14]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Tuning15=%d\r\n",vStats[vehicleid][Tuning][15]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Tuning16=%d\r\n",vStats[vehicleid][Tuning][16]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Paintjob=%d\r\n",vStats[vehicleid][Paintjob]); fwrite(vehiclefile,strsave);
    	format(strsave,128,"Airbag=%d\r\n",vStats[vehicleid][Airbag]); fwrite(vehiclefile,strsave);
		fclose(vehiclefile);
	}
}
stock LoadVehicle(vehicleid)
{
	new vfile[128];
	new File:vehiclefile,tmp[128],value[128],key[128];
	set(vfile,VehicleFile(vehicleid));
	if(fexist(vfile)){
		vehiclefile = fopen(vfile,io_read);
		while(fread(vehiclefile,tmp,sizeof(tmp))){
		    key = GetValueKey(tmp);
		    value = GetKeyValue(tmp);
			if(compare(key,"Dono")) { set(vStats[vehicleid][VDono],value); }
			if(compare(key,"Placa")) { set(vStats[vehicleid][VPlaca],value); }
			if(compare(key,"Chave")) { set(vStats[vehicleid][VChave],value); }
			if(compare(key,"Escondido")) { vStats[vehicleid][VEscondido] = strval(value); }
			if(compare(key,"Alarme")) { vStats[vehicleid][VAlarme] = strval(value); }
			if(compare(key,"Travas")) { vStats[vehicleid][VTravas] = strval(value); }
			if(compare(key,"Radio")) { vStats[vehicleid][VRadio] = strval(value); }
			if(compare(key,"Modelo")) { vStats[vehicleid][Modelo] = strval(value); }
			if(compare(key,"Gasolina")) { vStats[vehicleid][Combustivel] = strval(value); }
			if(compare(key,"Confiscado")) { vStats[vehicleid][Confiscado] = strval(value); }
			if(compare(key,"Dividas")) { vStats[vehicleid][Dividas] = strval(value); }
			if(compare(key,"PrecoVenda")) { vStats[vehicleid][PrecoVenda] = strval(value); }
			if(compare(key,"Seguro")) { vStats[vehicleid][VSeguro] = strval(value); }
			if(compare(key,"Color1")) { vStats[vehicleid][Color1] = strval(value); }
			if(compare(key,"Color2")) { vStats[vehicleid][Color2] = strval(value); }
			if(compare(key,"Trancado")) { vStats[vehicleid][Trancado] = strval(value); }
			if(compare(key,"Fume")) { vStats[vehicleid][Fume] = strval(value); }
			if(compare(key,"CarPosX")) { vStats[vehicleid][CarPosX] = floatstr(value); }
			if(compare(key,"CarPosY")) { vStats[vehicleid][CarPosY] = floatstr(value); }
			if(compare(key,"CarPosZ")) { vStats[vehicleid][CarPosZ] = floatstr(value); }
			if(compare(key,"CarPosAng")) { vStats[vehicleid][CarPosAng] = floatstr(value); }
			if(compare(key,"Tuning0")) { vStats[vehicleid][Tuning][0] = strval(value); }
			if(compare(key,"Tuning1")) { vStats[vehicleid][Tuning][1] = strval(value); }
			if(compare(key,"Tuning2")) { vStats[vehicleid][Tuning][2] = strval(value); }
			if(compare(key,"Tuning3")) { vStats[vehicleid][Tuning][3] = strval(value); }
			if(compare(key,"Tuning4")) { vStats[vehicleid][Tuning][4] = strval(value); }
			if(compare(key,"Tuning5")) { vStats[vehicleid][Tuning][5] = strval(value); }
			if(compare(key,"Tuning6")) { vStats[vehicleid][Tuning][6] = strval(value); }
			if(compare(key,"Tuning7")) { vStats[vehicleid][Tuning][7] = strval(value); }
			if(compare(key,"Tuning8")) { vStats[vehicleid][Tuning][8] = strval(value); }
			if(compare(key,"Tuning9")) { vStats[vehicleid][Tuning][9] = strval(value); }
			if(compare(key,"Tuning10")) { vStats[vehicleid][Tuning][10] = strval(value); }
			if(compare(key,"Tuning11")) { vStats[vehicleid][Tuning][11] = strval(value); }
			if(compare(key,"Tuning12")) { vStats[vehicleid][Tuning][12] = strval(value); }
			if(compare(key,"Tuning13")) { vStats[vehicleid][Tuning][13] = strval(value); }
			if(compare(key,"Tuning14")) { vStats[vehicleid][Tuning][14] = strval(value); }
			if(compare(key,"Tuning15")) { vStats[vehicleid][Tuning][15] = strval(value); }
			if(compare(key,"Tuning16")) { vStats[vehicleid][Tuning][16] = strval(value); }
			if(compare(key,"Paintjob")) { vStats[vehicleid][Paintjob] = strval(value); }
			if(compare(key,"Airbag")) { vStats[vehicleid][Airbag] = strval(value); }
		}
    	fclose(vehiclefile);
	}
 	return 1;
}
stock SavePlayer(playername[],playerid)
{
	new buf[0x40];
	format(buf, sizeof buf, "%s.buf", playername);
	new File:savemsg = fopen(buf, io_write);
	new File:fr = fopen(PlayerFile(playername), io_read);
	new tmp[256];
	while(fread(fr, tmp, sizeof tmp))
	{
	    new key[128];
	    key = GetValueKey(tmp);
	    if(strcmp(key, "MAIL", true) == 0 || strcmp(key, "POST", true) == 0 || strcmp(key, "MSG", true) == 0)
	    {
			fwrite(savemsg, tmp);
	    }
	}
	fclose(fr);
	fclose(savemsg);
	new strsave[128];
	new File:playerfile = fopen(PlayerFile(playername),io_write);
	format(strsave,128,"Senha=%s\r\n",pStats[playerid][Senha]); fwrite(playerfile,strsave);
	format(strsave,128,"GangueNome=%s\r\n",pStats[playerid][GangueNome]); fwrite(playerfile,strsave);
	format(strsave,128,"TituloJornal=%s\r\n",pStats[playerid][TituloJornal]); fwrite(playerfile,strsave);
	format(strsave,128,"ContinuarPos=%d\r\n",pStats[playerid][ContinuarPos]); fwrite(playerfile,strsave);
	format(strsave,128,"GangueCargo=%d\r\n",pStats[playerid][GangueCargo]); fwrite(playerfile,strsave);
	format(strsave,128,"Jornal=%d\r\n",pStats[playerid][Jornal]); fwrite(playerfile,strsave);
	format(strsave,128,"Data=%s\r\n",pStats[playerid][Data]); fwrite(playerfile,strsave);
	format(strsave,128,"DataRegistro=%s\r\n",pStats[playerid][DataRegistro]); fwrite(playerfile,strsave);
	format(strsave,128,"DataUltima=%s\r\n",pStats[playerid][DataUltima]); fwrite(playerfile,strsave);
	format(strsave,128,"MinutosConectado=%d\r\n",pStats[playerid][MinutosConectado]); fwrite(playerfile,strsave);
	format(strsave,128,"HorasConectado=%d\r\n",pStats[playerid][HorasConectado]); fwrite(playerfile,strsave);
	format(strsave,128,"DiasConectado=%d\r\n",pStats[playerid][DiasConectado]); fwrite(playerfile,strsave);
	format(strsave,128,"Prof=%d\r\n",pStats[playerid][Prof]); fwrite(playerfile,strsave);
	format(strsave,128,"LastProf=%d\r\n",pStats[playerid][LastProf]); fwrite(playerfile,strsave);
	format(strsave,128,"XLRank=%d\r\n",pStats[playerid][XLRank]); fwrite(playerfile,strsave);
	format(strsave,128,"SalarioProf=%d\r\n",pStats[playerid][SalarioProf]); fwrite(playerfile,strsave);
	format(strsave,128,"GanhouLevel=%d\r\n",pStats[playerid][GanhouLevel]); fwrite(playerfile,strsave);
	format(strsave,128,"RankProf=%d\r\n",pStats[playerid][RankProf]); fwrite(playerfile,strsave);
	format(strsave,128,"Cracha=%d\r\n",pStats[playerid][Cracha]); fwrite(playerfile,strsave);
	format(strsave,128,"Dinheiro=%d\r\n",PlayerMoney[playerid]); fwrite(playerfile,strsave);
	format(strsave,128,"Banco=%d\r\n",pStats[playerid][Banco]); fwrite(playerfile,strsave);
	format(strsave,128,"Skin=%d\r\n",pStats[playerid][Skin]); fwrite(playerfile,strsave);
	format(strsave,128,"Fome=%d\r\n",pStats[playerid][Fome]); fwrite(playerfile,strsave);
	format(strsave,128,"Respeito=%d\r\n",pStats[playerid][Respeito]); fwrite(playerfile,strsave);
	format(strsave,128,"Galao=%d\r\n",pStats[playerid][Galao]); fwrite(playerfile,strsave);
	format(strsave,128,"Divida=%d\r\n",pStats[playerid][Divida]); fwrite(playerfile,strsave);
	format(strsave,128,"Emprestimo=%d\r\n",pStats[playerid][Emprestimo]); fwrite(playerfile,strsave);
	format(strsave,128,"HistoriaFeita=%d\r\n",pStats[playerid][HistoriaFeita]); fwrite(playerfile,strsave);
	format(strsave,128,"XL=%d\r\n",pStats[playerid][XL]); fwrite(playerfile,strsave);
	format(strsave,128,"Xpoints=%d\r\n",pStats[playerid][Xpoints]); fwrite(playerfile,strsave);
	format(strsave,128,"Culinaria=%d\r\n",pStats[playerid][Culinaria]); fwrite(playerfile,strsave);
	format(strsave,128,"Wanted=%d\r\n",GetPlayerWantedLevel(playerid)); fwrite(playerfile,strsave);
	format(strsave,128,"Preso=%d\r\n",pStats[playerid][Preso]); fwrite(playerfile,strsave);
	format(strsave,128,"AmountBusted=%d\r\n",pStats[playerid][AmountBusted]); fwrite(playerfile,strsave);
	format(strsave,128,"LastBustedReason=%d\r\n",pStats[playerid][LastBustedReason]); fwrite(playerfile,strsave);
	format(strsave,128,"HorasPreso=%d\r\n",pStats[playerid][HorasPreso]); fwrite(playerfile,strsave);
	format(strsave,128,"Fianca=%d\r\n",pStats[playerid][Fianca]); fwrite(playerfile,strsave);
	format(strsave,128,"MultaPublica=%d\r\n",pStats[playerid][MultaPublica]); fwrite(playerfile,strsave);
	format(strsave,128,"Passaporte=%d\r\n",pStats[playerid][Passaporte]); fwrite(playerfile,strsave);
	format(strsave,128,"Porte=%d\r\n",pStats[playerid][Porte]); fwrite(playerfile,strsave);
	format(strsave,128,"HabNautica=%d\r\n",pStats[playerid][HabNautica]); fwrite(playerfile,strsave);
	format(strsave,128,"HabAerea=%d\r\n",pStats[playerid][HabAerea]); fwrite(playerfile,strsave);
	format(strsave,128,"HabTerrestre=%d\r\n",pStats[playerid][HabTerrestre]); fwrite(playerfile,strsave);
	format(strsave,128,"Phone=%d\r\n",pStats[playerid][Phone]); fwrite(playerfile,strsave);
	format(strsave,128,"Agenda=%d\r\n",pStats[playerid][Agenda]); fwrite(playerfile,strsave);
	format(strsave,128,"PhoneNumb=%d\r\n",pStats[playerid][PhoneNumb]); fwrite(playerfile,strsave);
	format(strsave,128,"CreditosCell=%d\r\n",pStats[playerid][CreditosCell]); fwrite(playerfile,strsave);
	format(strsave,128,"CaixaPostal=%d\r\n",pStats[playerid][CaixaPostal]); fwrite(playerfile,strsave);
	format(strsave,128,"Cavalo=%d\r\n",pStats[playerid][Cavalo]); fwrite(playerfile,strsave);
	format(strsave,128,"ValorAposta=%d\r\n",pStats[playerid][ValorAposta]); fwrite(playerfile,strsave);
	format(strsave,128,"NumeroLoteria1=%d\r\n",pStats[playerid][NumeroLoteria1]); fwrite(playerfile,strsave);
	format(strsave,128,"NumeroLoteria2=%d\r\n",pStats[playerid][NumeroLoteria2]); fwrite(playerfile,strsave);
	format(strsave,128,"Doenca=%d\r\n",pStats[playerid][Doenca]); fwrite(playerfile,strsave);
	format(strsave,128,"Seguro=%d\r\n",pStats[playerid][Seguro]); fwrite(playerfile,strsave);
	format(strsave,128,"Pesca=%d\r\n",pStats[playerid][Pesca]); fwrite(playerfile,strsave);
	format(strsave,128,"Latas=%d\r\n",pStats[playerid][Latas]); fwrite(playerfile,strsave);
	format(strsave,128,"Iscas=%d\r\n",pStats[playerid][Iscas]); fwrite(playerfile,strsave);
	format(strsave,128,"LatasNecessarias=%d\r\n",pStats[playerid][LatasNecessarias]); fwrite(playerfile,strsave);
	format(strsave,128,"Camisinha=%d\r\n",pStats[playerid][Camisinha]); fwrite(playerfile,strsave);
	format(strsave,128,"Alcool=%d\r\n",pStats[playerid][Alcool]); fwrite(playerfile,strsave);
	format(strsave,128,"Morrendo=%d\r\n",pStats[playerid][Morrendo]); fwrite(playerfile,strsave);
	format(strsave,128,"DosesMaconha=%d\r\n",pStats[playerid][DosesMaconha]); fwrite(playerfile,strsave);
	format(strsave,128,"DosesHeroina=%d\r\n",pStats[playerid][DosesHeroina]); fwrite(playerfile,strsave);
	format(strsave,128,"DosesCocaina=%d\r\n",pStats[playerid][DosesCocaina]); fwrite(playerfile,strsave);
	format(strsave,128,"ChaveMestra=%d\r\n",pStats[playerid][ChaveMestra]); fwrite(playerfile,strsave);
	format(strsave,128,"VirtualCard=%d\r\n",pStats[playerid][VirtualCard]); fwrite(playerfile,strsave);
	format(strsave,128,"CofreCell=%d\r\n",pStats[playerid][CofreCell]); fwrite(playerfile,strsave);
	format(strsave,128,"VacinaDuracao=%d\r\n",pStats[playerid][VacinaDuracao]); fwrite(playerfile,strsave);
	format(strsave,128,"NSegurancas=%d\r\n",pStats[playerid][NSegurancas]); fwrite(playerfile,strsave);
	format(strsave,128,"JaContratado=%d\r\n",pStats[playerid][JaContratado]); fwrite(playerfile,strsave);
	format(strsave,128,"Matou=%d\r\n",pStats[playerid][Matou]); fwrite(playerfile,strsave);
	format(strsave,128,"Morreu=%d\r\n",pStats[playerid][Morreu]); fwrite(playerfile,strsave);
	format(strsave,128,"ClockBomb=%d\r\n",pStats[playerid][ClockBomb]); fwrite(playerfile,strsave);
	format(strsave,128,"Camuflagem=%d\r\n",pStats[playerid][Camuflagem]); fwrite(playerfile,strsave);
	format(strsave,128,"Flash=%d\r\n",pStats[playerid][Flash]); fwrite(playerfile,strsave);
	format(strsave,128,"Rocket=%d\r\n",pStats[playerid][Rocket]); fwrite(playerfile,strsave);
	for(new i = 0; i < 13; i++)
	{
	    new w = 0, a = 0;
	    GetWeaponData(playerid, i, w, a);
	    format(strsave,128,"WeaponSlot%d=%d\r\n", i, w); fwrite(playerfile,strsave);
	    format(strsave,128,"WeaponSlot%dAmmo=%d\r\n", i, a); fwrite(playerfile,strsave);
	}
	format(strsave,128,"Propriedade=%d\r\n",pStats[playerid][Propriedade]); fwrite(playerfile,strsave);
 	format(strsave,128,"AumentoPropriedade=%d\r\n",pStats[playerid][AumentoPropriedade]); fwrite(playerfile,strsave);
 	format(strsave,128,"VendendoCasas=%d\r\n",pStats[playerid][VendendoCasas]); fwrite(playerfile,strsave);
 	format(strsave,128,"Banido=%d\r\n",pStats[playerid][Banido]); fwrite(playerfile,strsave);
 	format(strsave,128,"DonoCasaAlugada=%s\r\n",pStats[playerid][DonoCasaAlugada]); fwrite(playerfile,strsave);
	format(strsave,128,"LocouCasa=%d\r\n",pStats[playerid][LocouCasa]); fwrite(playerfile,strsave);
	format(strsave,128,"DiasDeAluguel=%d\r\n",pStats[playerid][DiasDeAluguel]); fwrite(playerfile,strsave);
	format(strsave,128,"Peixe=%d\r\n",pStats[playerid][Peixe]); fwrite(playerfile,strsave);
	format(strsave,128,"VicioDrogas=%d\r\n",pStats[playerid][VicioDrogas]); fwrite(playerfile,strsave);
	format(strsave,128,"HistoriaSelecionada=%d\r\n",pStats[playerid][HistoriaSelecionada]); fwrite(playerfile,strsave);
	format(strsave,128,"VCell=%d\r\n",pStats[playerid][VCell]); fwrite(playerfile,strsave);
	format(strsave,128,"GCell=%d\r\n",pStats[playerid][GCell]); fwrite(playerfile,strsave);
	format(strsave,128,"ValorCabeca=%d\r\n",pStats[playerid][ValorCabeca]); fwrite(playerfile,strsave);
	format(strsave,128,"Sanduiche=%d\r\n",pStats[playerid][Sanduiche]); fwrite(playerfile,strsave);
	format(strsave,128,"Frango=%d\r\n",pStats[playerid][Frango]); fwrite(playerfile,strsave);
	format(strsave,128,"Peixe=%d\r\n",pStats[playerid][Peixe]); fwrite(playerfile,strsave);
	format(strsave,128,"Salada=%d\r\n",pStats[playerid][Salada]); fwrite(playerfile,strsave);
	format(strsave,128,"Pizza=%d\r\n",pStats[playerid][Pizza]); fwrite(playerfile,strsave);
	format(strsave,128,"Refrigerante=%d\r\n",pStats[playerid][Refrigerante]); fwrite(playerfile,strsave);
	format(strsave,128,"Suco=%d\r\n",pStats[playerid][Suco]); fwrite(playerfile,strsave);
    format(strsave,128,"Carne=%d\r\n",pStats[playerid][Carne]); fwrite(playerfile,strsave);
    format(strsave,128,"Strogonoff=%d\r\n",pStats[playerid][Strogonoff]); fwrite(playerfile,strsave);
    format(strsave,128,"Camarao=%d\r\n",pStats[playerid][Camarao]); fwrite(playerfile,strsave);
    format(strsave,128,"Linguica=%d\r\n",pStats[playerid][Linguica]); fwrite(playerfile,strsave);
    format(strsave,128,"ConquistouTerritorio=%d\r\n",pStats[playerid][ConquistouTerritorio]); fwrite(playerfile,strsave);
    format(strsave,128,"SorveteChocolate=%d\r\n",pStats[playerid][SorveteChocolate]); fwrite(playerfile,strsave);
    format(strsave,128,"SorveteNapolitano=%d\r\n",pStats[playerid][SorveteNapolitano]); fwrite(playerfile,strsave);
    format(strsave,128,"SorveteFlocos=%d\r\n",pStats[playerid][SorveteFlocos]); fwrite(playerfile,strsave);
    format(strsave,128,"Remedios=%d\r\n",pStats[playerid][Remedios]); fwrite(playerfile,strsave);
	format(strsave,128,"ConvidadoCasa=%d\r\n",pStats[playerid][ConvidadoCasa]); fwrite(playerfile,strsave);
	format(strsave,128,"DonoCasaConvidada=%s\r\n",pStats[playerid][DonoCasaConvidada]); fwrite(playerfile,strsave);
	format(strsave,128,"QR=%d\r\n",pStats[playerid][QR]); fwrite(playerfile,strsave);
	format(strsave,128,"ABasico=%d\r\n",pStats[playerid][ABasico]); fwrite(playerfile,strsave);
	format(strsave,128,"AAvancado=%d\r\n",pStats[playerid][AAvancado]); fwrite(playerfile,strsave);
	format(strsave,128,"Fogao=%d\r\n",pStats[playerid][PFogao]); fwrite(playerfile,strsave);
	format(strsave,128,"TV=%d\r\n",pStats[playerid][PTV]); fwrite(playerfile,strsave);
	format(strsave,128,"Radio=%d\r\n",pStats[playerid][PRadio]); fwrite(playerfile,strsave);
	format(strsave,128,"Geladeira=%d\r\n",pStats[playerid][PGeladeira]); fwrite(playerfile,strsave);
	format(strsave,128,"Cofre=%d\r\n",pStats[playerid][PCofre]); fwrite(playerfile,strsave);
	format(strsave,128,"GuardaRoupas=%d\r\n",pStats[playerid][PGuardaRoupas]); fwrite(playerfile,strsave);
	format(strsave,128,"TelefoneNumb=%d\r\n",pStats[playerid][PTelefoneNumb]); fwrite(playerfile,strsave);
	format(strsave,128,"Investimento=%d\r\n",pStats[playerid][PInvestimento]); fwrite(playerfile,strsave);
    format(strsave,128,"Computador=%d\r\n",pStats[playerid][PComputador]); fwrite(playerfile,strsave);
	format(strsave,128,"Hotel=%d\r\n",pStats[playerid][Hotel]); fwrite(playerfile,strsave);
	format(strsave,128,"BancoTrabalho=%d\r\n",pStats[playerid][BancoTrabalho]); fwrite(playerfile,strsave);
    format(strsave,128,"BancoResidencia=%d\r\n",pStats[playerid][BancoResidencia]); fwrite(playerfile,strsave);
    format(strsave,128,"BancoEmpresa=%d\r\n",pStats[playerid][BancoEmpresa]); fwrite(playerfile,strsave);
    format(strsave,128,"CartaoTelefonico=%d\r\n",pStats[playerid][CartaoTelefonico]); fwrite(playerfile,strsave);
	format(strsave,128,"Vida=%f\r\n",pStats[playerid][Vida]); fwrite(playerfile,strsave);
	format(strsave,128,"Colete=%f\r\n",pStats[playerid][Colete]); fwrite(playerfile,strsave);
	format(strsave,128,"SpawnPosX=%f\r\n",pStats[playerid][SpawnPosX]); fwrite(playerfile,strsave);
	format(strsave,128,"SpawnPosY=%f\r\n",pStats[playerid][SpawnPosY]); fwrite(playerfile,strsave);
	format(strsave,128,"SpawnPosZ=%f\r\n",pStats[playerid][SpawnPosZ]); fwrite(playerfile,strsave);
	format(strsave,128,"SpawnPosAng=%f\r\n",pStats[playerid][SpawnPosAng]); fwrite(playerfile,strsave);
	format(strsave,128,"LastPosX=%f\r\n",pStats[playerid][LastPosX]); fwrite(playerfile,strsave);
	format(strsave,128,"LastPosY=%f\r\n",pStats[playerid][LastPosY]); fwrite(playerfile,strsave);
	format(strsave,128,"LastPosZ=%f\r\n",pStats[playerid][LastPosZ]); fwrite(playerfile,strsave);
	format(strsave,128,"LastInterior=%d\r\n",pStats[playerid][LastInterior]); fwrite(playerfile,strsave);
	format(strsave,128,"MSGBIP=%s\r\n",pStats[playerid][MSGBIP]); fwrite(playerfile,strsave);
	set(strsave,"");
	new s[128];
 	for(new sg = 0; sg < pStats[playerid][NSegurancas]; sg++)
 	{
		strcat(strsave,GetSegurancas[playerid][sg]);
		strcat(strsave,";");
		strcat(strsave,GetSegurancasValor[playerid][sg]);
		strcat(strsave,";");
 	}
 	strcat(strsave,"\r\n");
 	format(s,128,"Segurancas=%s",strsave);
 	fwrite(playerfile,s);
 	savemsg = fopen(buf, io_read);
 	while(fread(savemsg, tmp, sizeof tmp))
 	{
 	    fwrite(playerfile, tmp);
 	}
 	fclose(savemsg);
 	fremove(buf);
	fclose(playerfile);
	printf("Dados de %s salvos...",playername);
}
stock LoadPlayer(playerid)
{
	new name[30];
	GetPlayerName(playerid,name,30);
	if(!fexist(PlayerFile(name))) return 0;
	new File:playerfile = fopen(PlayerFile(name),io_read),tmp[128],index,key[128],value[128];
	while(fread(playerfile,tmp,sizeof(tmp))){
	    key = GetValueKey(tmp);
	    value = GetKeyValue(tmp);
		if(compare(key,"Senha")) { pStats[playerid][Senha] = value; }
		if(compare(key,"GangueNome")) { pStats[playerid][GangueNome] = value; }
		if(compare(key,"TituloJornal")) { pStats[playerid][TituloJornal] = value; }
		if(compare(key,"ContinuarPos")) { pStats[playerid][ContinuarPos] = strval(value); }
		if(compare(key,"GangueCargo")) { pStats[playerid][GangueCargo] = strval(value); }
		if(compare(key,"Jornal")) { pStats[playerid][Jornal] = strval(value); }
		if(compare(key,"Data")) { pStats[playerid][Data] = value; }
		if(compare(key,"DataRegistro")) { pStats[playerid][DataRegistro] = value; }
		if(compare(key,"DataUltima")) { pStats[playerid][DataUltima] = value; }
		if(compare(key,"MinutosConectado")) { pStats[playerid][MinutosConectado] = strval(value); }
		if(compare(key,"HorasConectado")) { pStats[playerid][HorasConectado] = strval(value); }
		if(compare(key,"DiasConectado")) { pStats[playerid][DiasConectado] = strval(value); }
		if(compare(key,"Prof")) { pStats[playerid][Prof] = strval(value); }
		if(compare(key,"LastProf")) { pStats[playerid][LastProf] = strval(value); }
		if(compare(key,"RankProf")) { pStats[playerid][RankProf] = strval(value); }
		if(compare(key,"XLRank")) { pStats[playerid][XLRank] = strval(value); }
		if(compare(key,"SalarioProf")) { pStats[playerid][SalarioProf] = strval(value); }
		if(compare(key,"GanhouLevel")) { pStats[playerid][GanhouLevel] = strval(value); }
		if(compare(key,"Cracha")) { pStats[playerid][Cracha] = strval(value); }
		if(compare(key,"Dinheiro")) { AddPlayerMoney(playerid, strval(value), 8); }
		if(compare(key,"Banco")) { pStats[playerid][Banco] = strval(value); }
		if(compare(key,"Skin")) { pStats[playerid][Skin] = strval(value); }
		if(compare(key,"Fome")) { pStats[playerid][Fome] = strval(value); }
		if(compare(key,"Respeito")) { pStats[playerid][Respeito] = strval(value); }
		if(compare(key,"Galao")) { pStats[playerid][Galao] = strval(value); }
		if(compare(key,"Divida")) { pStats[playerid][Divida] = strval(value); }
		if(compare(key,"Emprestimo")) { pStats[playerid][Emprestimo] = strval(value); }
		if(compare(key,"HistoriaFeita")) { pStats[playerid][HistoriaFeita] = strval(value); }
		if(compare(key,"XL")) { pStats[playerid][XL] = strval(value); }
		if(compare(key,"Xpoints")) { pStats[playerid][Xpoints] = strval(value); }
		if(compare(key,"Culinaria")) { pStats[playerid][Culinaria] = strval(value); }
		if(compare(key,"Wanted")) { SetPlayerWantedLevel(playerid, strval(value)); }
		if(compare(key,"Preso")) { pStats[playerid][Preso] = strval(value); }
		if(compare(key,"AmountBusted")) { pStats[playerid][AmountBusted] = strval(value); }
		if(compare(key,"LastBustedReason")) { pStats[playerid][LastBustedReason] = strval(value); }
		if(compare(key,"HorasPreso")) { pStats[playerid][HorasPreso] = strval(value); }
        if(compare(key,"Fianca")) { pStats[playerid][Fianca] = strval(value); }
		if(compare(key,"MultaPublica")) { pStats[playerid][MultaPublica] = strval(value); }
		if(compare(key,"Passaporte")) { pStats[playerid][Passaporte] = strval(value); }
		if(compare(key,"Porte")) { pStats[playerid][Porte] = strval(value); }
		if(compare(key,"HabNautica")) { pStats[playerid][HabNautica] = strval(value); }
		if(compare(key,"HabAerea")) { pStats[playerid][HabAerea] = strval(value); }
		if(compare(key,"HabTerrestre")) { pStats[playerid][HabTerrestre] = strval(value); }
		if(compare(key,"Phone")) { pStats[playerid][Phone] = strval(strtok(tmp,index)); }
		if(compare(key,"Agenda")) { pStats[playerid][Agenda] = strval(value); }
		if(compare(key,"PhoneNumb")) { pStats[playerid][PhoneNumb] = strval(value); }
		if(compare(key,"CreditosCell")) { pStats[playerid][CreditosCell] = strval(value); }
		if(compare(key,"CaixaPostal")) { pStats[playerid][CaixaPostal] = strval(value); }
		if(compare(key,"Cavalo")) { pStats[playerid][Cavalo] = strval(value); }
		if(compare(key,"NumeroLoteria1")) { pStats[playerid][NumeroLoteria1] = strval(value); }
		if(compare(key,"NumeroLoteria2")) { pStats[playerid][NumeroLoteria2] = strval(value); }
		if(compare(key,"Doenca")) { pStats[playerid][Doenca] = strval(value); }
		if(compare(key,"Seguro")) { pStats[playerid][Seguro] = strval(value); }
		if(compare(key,"Pesca")) { pStats[playerid][Pesca] = strval(value); }
		if(compare(key,"Latas")) { pStats[playerid][Latas] = strval(value); }
		if(compare(key,"Iscas")) { pStats[playerid][Iscas] = strval(value); }
		if(compare(key,"LatasNecessarias")) { pStats[playerid][LatasNecessarias] = strval(value); }
		if(compare(key,"Camisinha")) { pStats[playerid][Camisinha] = strval(value); }
		if(compare(key,"Alcool")) { pStats[playerid][Alcool] = strval(value); }
		if(compare(key,"Morrendo")) { pStats[playerid][Morrendo] = strval(value); }
		if(compare(key,"DosesMaconha")) { pStats[playerid][DosesMaconha] = strval(value); }
		if(compare(key,"DosesHeroina")) { pStats[playerid][DosesHeroina] = strval(value); }
		if(compare(key,"DosesCocaina")) { pStats[playerid][DosesCocaina] = strval(value); }
		if(compare(key,"ChaveMestra")) { pStats[playerid][ChaveMestra] = strval(value); }
		if(compare(key,"VirtualCard")) { pStats[playerid][VirtualCard] = strval(value); }
		if(compare(key,"CofreCell")) { pStats[playerid][CofreCell] = strval(value); }
		if(compare(key,"VacinaDuracao")) { pStats[playerid][VacinaDuracao] = strval(value); }
		if(compare(key,"NSegurancas")) { pStats[playerid][NSegurancas] = strval(value); }
		if(compare(key,"JaContratado")) { pStats[playerid][JaContratado] = strval(value); }
    	if(compare(key,"Matou")) { pStats[playerid][Matou] = strval(value); }
    	if(compare(key,"Morreu")) { pStats[playerid][Morreu] = strval(value); }
    	if(compare(key,"ClockBomb")) { pStats[playerid][ClockBomb] = strval(value); }
    	if(compare(key,"Camuflagem")) { pStats[playerid][Camuflagem] = strval(value); }
    	if(compare(key,"Flash")) { pStats[playerid][Flash] = strval(value); }
    	if(compare(key,"Rocket")) { pStats[playerid][Rocket] = strval(value); }
		if(compare(key,"WeaponSlot0")) { GetWeapons[playerid][0][0] = strval(value); }
		if(compare(key,"WeaponSlot0Ammo")) { GetWeapons[playerid][0][1] = strval(value); }
		if(compare(key,"WeaponSlot1")) { GetWeapons[playerid][1][0] = strval(value); }
		if(compare(key,"WeaponSlot1Ammo")) { GetWeapons[playerid][1][1] = strval(value); }
		if(compare(key,"WeaponSlot2")) { GetWeapons[playerid][2][0] = strval(value); }
		if(compare(key,"WeaponSlot2Ammo")) { GetWeapons[playerid][2][1] = strval(value); }
		if(compare(key,"WeaponSlot3")) { GetWeapons[playerid][3][0] = strval(value); }
		if(compare(key,"WeaponSlot3Ammo")) { GetWeapons[playerid][3][1] = strval(value); }
		if(compare(key,"WeaponSlot4")) { GetWeapons[playerid][4][0] = strval(value); }
		if(compare(key,"WeaponSlot4Ammo")) { GetWeapons[playerid][4][1] = strval(value); }
		if(compare(key,"WeaponSlot5")) { GetWeapons[playerid][5][0] = strval(value); }
		if(compare(key,"WeaponSlot5Ammo")) { GetWeapons[playerid][5][1] = strval(value); }
		if(compare(key,"WeaponSlot6")) { GetWeapons[playerid][6][0] = strval(value); }
		if(compare(key,"WeaponSlot6Ammo")) { GetWeapons[playerid][6][1] = strval(value); }
		if(compare(key,"WeaponSlot7")) { GetWeapons[playerid][7][0] = strval(value); }
		if(compare(key,"WeaponSlot7Ammo")) { GetWeapons[playerid][7][1] = strval(value); }
		if(compare(key,"WeaponSlot8")) { GetWeapons[playerid][8][0] = strval(value); }
		if(compare(key,"WeaponSlot8Ammo")) { GetWeapons[playerid][8][1] = strval(value); }
		if(compare(key,"WeaponSlot9")) { GetWeapons[playerid][9][0] = strval(value); }
		if(compare(key,"WeaponSlot9Ammo")) { GetWeapons[playerid][9][1] = strval(value); }
		if(compare(key,"WeaponSlot10")) { GetWeapons[playerid][10][0] = strval(value); }
		if(compare(key,"WeaponSlot10Ammo")) { GetWeapons[playerid][10][1] = strval(value); }
		if(compare(key,"WeaponSlot11")) { GetWeapons[playerid][11][0] = strval(value); }
		if(compare(key,"WeaponSlot11Ammo")) { GetWeapons[playerid][11][1] = strval(value); }
		if(compare(key,"WeaponSlot12")) { GetWeapons[playerid][12][0] = strval(value); }
		if(compare(key,"WeaponSlot12Ammo")) { GetWeapons[playerid][12][1] = strval(value); }
		if(compare(key,"Propriedade")) { pStats[playerid][Propriedade] = strval(value); }
    	if(compare(key,"AumentoPropriedade")) { pStats[playerid][AumentoPropriedade] = strval(value); }
    	if(compare(key,"VendendoCasas")) { pStats[playerid][VendendoCasas] = strval(value); }
    	if(compare(key,"Banido")) { pStats[playerid][Banido] = strval(value); }
    	if(compare(key,"DonoCasaAlugada")) { set(pStats[playerid][DonoCasaAlugada],value); }
		if(compare(key,"LocouCasa")) { pStats[playerid][LocouCasa] = strval(value); }
		if(compare(key,"DiasDeAluguel")) { pStats[playerid][DiasDeAluguel] = strval(value); }
		if(compare(key,"Peixe")) { pStats[playerid][Peixe] = strval(value); }
		if(compare(key,"VicioDrogas")) { pStats[playerid][VicioDrogas] = strval(value); }
		if(compare(key,"HistoriaSelecionada")) { pStats[playerid][HistoriaSelecionada] = strval(value); }
		if(compare(key,"VCell")) { pStats[playerid][VCell] = strval(strtok(tmp,index)); }
		if(compare(key,"GCell")) { pStats[playerid][GCell] = strval(strtok(tmp,index)); }
		if(compare(key,"ValorCabeca")) { pStats[playerid][ValorCabeca] = strval(value); }
		if(compare(key,"Sanduiche")) { pStats[playerid][Sanduiche] = strval(value); }
		if(compare(key,"Frango")) { pStats[playerid][Frango] = strval(value); }
		if(compare(key,"Peixe")) { pStats[playerid][Peixe] = strval(value); }
		if(compare(key,"Salada")) { pStats[playerid][Salada] = strval(value); }
		if(compare(key,"Pizza")) { pStats[playerid][Pizza] = strval(value); }
		if(compare(key,"Refrigerante")) { pStats[playerid][Refrigerante] = strval(value); }
		if(compare(key,"Suco")) { pStats[playerid][Suco] = strval(value); }
		if(compare(key,"Carne")) { pStats[playerid][Carne] = strval(value); }
		if(compare(key,"Strogonoff")) { pStats[playerid][Strogonoff] = strval(value); }
		if(compare(key,"Camarao")) { pStats[playerid][Camarao] = strval(value); }
		if(compare(key,"Linguica")) { pStats[playerid][Linguica] = strval(value); }
    	if(compare(key,"ConquistouTerritorio")) { pStats[playerid][ConquistouTerritorio] = strval(value); }
    	if(compare(key,"SorveteChocolate")) { pStats[playerid][SorveteChocolate] = strval(value); }
    	if(compare(key,"SorveteNapolitano")) { pStats[playerid][SorveteNapolitano] = strval(value); }
    	if(compare(key,"SorveteFlocos")) { pStats[playerid][SorveteFlocos] = strval(value); }
    	if(compare(key,"Remedios")) { pStats[playerid][Remedios] = strval(value); }
    	if(compare(key,"ConvidadoCasa")) { pStats[playerid][ConvidadoCasa] = strval(value); }
    	if(compare(key,"DonoCasaConvidada")) { set(pStats[playerid][DonoCasaConvidada],value); }
    	if(compare(key,"QR")) { pStats[playerid][QR] = strval(value); }
    	if(compare(key,"ABasico")) { pStats[playerid][ABasico] = strval(value); }
    	if(compare(key,"AAvancado")) { pStats[playerid][AAvancado] = strval(value); }
    	if(compare(key,"Fogao")) { pStats[playerid][PFogao] = strval(value); }
    	if(compare(key,"TV")) { pStats[playerid][PTV] = strval(value); }
    	if(compare(key,"Radio")) { pStats[playerid][PRadio] = strval(value); }
    	if(compare(key,"Geladeira")) { pStats[playerid][PGeladeira] = strval(value); }
    	if(compare(key,"Cofre")) { pStats[playerid][PCofre] = strval(value); }
    	if(compare(key,"GuardaRoupas")) { pStats[playerid][PGuardaRoupas] = strval(value); }
    	if(compare(key,"TelefoneNumb")) { pStats[playerid][PTelefoneNumb] = strval(value); }
    	if(compare(key,"Investimento")) { pStats[playerid][PInvestimento] = strval(value); }
    	if(compare(key,"Computador")) { pStats[playerid][PComputador] = strval(value); }
    	if(compare(key,"Hotel")) { pStats[playerid][Hotel] = strval(value); }
    	if(compare(key,"BancoTrabalho")) { pStats[playerid][BancoTrabalho] = strval(value); }
    	if(compare(key,"BancoResidencia")) { pStats[playerid][BancoResidencia] = strval(value); }
    	if(compare(key,"BancoEmpresa")) { pStats[playerid][BancoEmpresa] = strval(value); }
    	if(compare(key,"CartaoTelefonico")) { pStats[playerid][CartaoTelefonico] = strval(value); }
		if(compare(key,"Vida")) { pStats[playerid][Vida] = floatstr(value); }
		if(compare(key,"Colete")) { pStats[playerid][Colete] = floatstr(value); }
		if(compare(key,"SpawnPosX")) { pStats[playerid][SpawnPosX] = floatstr(value); }
		if(compare(key,"SpawnPosY")) { pStats[playerid][SpawnPosY] = floatstr(value); }
		if(compare(key,"SpawnPosZ")) { pStats[playerid][SpawnPosZ] = floatstr(value); }
		if(compare(key,"SpawnPosAng")) { pStats[playerid][SpawnPosAng] = floatstr(value); }
		if(compare(key,"LastPosX")) { pStats[playerid][LastPosX] = floatstr(value); }
		if(compare(key,"LastPosY")) { pStats[playerid][LastPosY] = floatstr(value); }
		if(compare(key,"LastPosZ")) { pStats[playerid][LastPosZ] = floatstr(value); }
		if(compare(key,"LastInterior")) { pStats[playerid][LastInterior] = strval(value); }
		if(compare(key,"MSGBIP")) { set(pStats[playerid][MSGBIP],value); }
		if(compare(key,"Segurancas")) {
		    index = 0;
		    for(new s=0; s<pStats[playerid][NSegurancas]; s++){
				set(GetSegurancas[playerid][s],strtok(value,index,';'));
				GetSegurancasValor[playerid][s] = strval(strtok(value,index,';'));
			}
		}
	}
	fclose(playerfile);
	printf("Dados de %s carregados...",name);
	return 1;
}
stock SetPlayerMiniGame(playerid, minigameid)
{
	MiniGame[playerid] = minigameid;
	SaveWeapons(playerid);
	ResetWeapons(playerid);
	SendClientMessage(playerid, COLOR_BLUE, "Suas armas serão devolvidas no final do evento.");
}
stock RemovePlayerFromMiniGame(playerid)
{
	LoadWeapons(playerid);
	MiniGame[playerid] = 0;
	SendClientMessage(playerid, COLOR_BLUE, "Armas devolvidas.");
}
public EndPL(){
	if(QtPoliciaisPL() == 0){
        PLIniciou = 0;
       	QtCapturados = 0;
		for(new i = 0; i < MAX_SLOTS; i++){
	    	if(IsPlayerConnected(i) && MiniGame[i] == 1){
    		    GameTextForPlayer(i, "~w~Equipe dos ladroes~n~~r~venceu",4000,0);
				if(Equipe[i] == 1){
				    AddPlayerMoney(i,100,7);
				    pStats[i][Respeito]++;
					if(IsPlayerInGang(i))
					{
				    	gStats[GetGangID(pStats[i][GangueNome])][GangPontos]++;
					}
					SendClientMessage(i, COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] Sua equipe venceu e você recebeu $100");
			    	SendClientMessage(i, COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] E para melhorar você ganhou mais 1 ponto de respeito.");
				}
				RetirarPL(i);
			}
		}
		return 1;
	}
	if(QtCapturadosPL() == QtLadroesPL()){
	    PLIniciou = 0;
    	QtCapturados = 0;
 		SendClientMessageToAll(COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] Todos os ladrões foram capturados a equipe dos policiais venceu!");
	    for(new i = 0; i < MAX_SLOTS; i++){
    		if(IsPlayerConnected(i) && MiniGame[i] == 1){
    	    	GameTextForPlayer(i, "~w~Equipe dos policiais~n~~r~venceu",4000,0);
				if(Equipe[i] == 2){
				    KillTimer(TimerPL);
			    	AddPlayerMoney(i,100,7);
                    pStats[i][Respeito]++;
                    if(IsPlayerInGang(i))
					{
				    	gStats[GetGangID(pStats[i][GangueNome])][GangPontos]++;
					}
			    	SendClientMessage(i, COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] Sua equipe venceu e você recebeu $100");
			    	SendClientMessage(i, COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] E para melhorar você ganhou mais 1 ponto de respeito.");
				}
				RetirarPL(i);
			}
		}
		return 1;
	}
	if(CtPL != 1){
		CtPL--;
		if(CtPL > 1){
	    	new string[128];
			format(string,sizeof(string),"[POLÍCIA E LADRÃO] Restam %d minutos para o evento acabar...",CtPL);
			SendClientMessageToAll(COLOR_LIGHT_YELLOW, string);
			TimerPL = SetTimer("EndPL",60000,0);
		}
		else if(CtPL == 1){
    	    SendClientMessageToAll(COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] Resta 1 minuto para o evento acabar!");
			KillTimer(TimerPL);
			CtPL2 = 10;
			TimerPL = SetTimer("EndPL",50000,0);
		}
		else if(CtPL == 0){
		    PLIniciou = 0;
        	QtCapturados = 0;
			for(new i = 0; i < MAX_SLOTS; i++){
		    	if(IsPlayerConnected(i) && MiniGame[i] == 1){
	    		    GameTextForPlayer(i, "~w~Equipe dos ladroes~n~~r~venceu",4000,0);
					if(Equipe[i] == 1){
					    AddPlayerMoney(i,100,7);
					    SendClientMessage(i, COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] Sua equipe venceu e você recebeu $100");
					}
					RetirarPL(i);
				}
			}
		}
	}
	else{
	    CtPL2--;
		SendClientMessageToAll(COLOR_LIGHT_YELLOW, ApplyZero(CtPL2));
		if(CtPL2 == 1){
			CtPL--;
			EndPL();
		}
		if(CtPL2 >= 1) SetTimer("EndPL",1000,0);
	}
	return 1;
}
public SetLadraoPL(playerid){
	new rand = random(sizeof(LadroesPos));
	Equipe[playerid] = 1;
	SetPlayerPos(playerid,LadroesPos[playerid][0],LadroesPos[playerid][1],LadroesPos[playerid][2]);
	rand = random(sizeof(SkinsLadroes));
	SetPlayerSkin(playerid,SkinsLadroes[rand]);
	SetPlayerHealthEx(playerid, 5.0);
	ChangePlayerColor(playerid, COLOR_LADRAO);
    CarregouArmas[playerid] = 0;
	ResetWeapons(playerid);
	GameTextForPlayer(playerid,"~r~fuja dos ~n~policiais",3000,1);
	GangZoneShowForPlayer(playerid, PoliciaLadraoArea, COLOR_COP_SWAT);
}
public SetPolicialPL(playerid){
	Equipe[playerid] = 2;
	SetPlayerPos(playerid,-283.9879,-2187.1279,28.6916);
	new rand = random(sizeof(SkinsPoliciais));
	SetPlayerSkin(playerid,SkinsPoliciais[rand]);
	ChangePlayerColor(playerid, COLOR_POLICIA);
	GivePlayerWeapon(playerid,29,100);
	GameTextForPlayer(playerid,"~b~capture os ~n~ladroes",3000,1);
	GangZoneShowForPlayer(playerid, PoliciaLadraoArea, COLOR_COP_SWAT);
}
public RetirarPL(playerid){
	new string[128];
	RemovePlayerFromMiniGame(playerid);
	Equipe[playerid] = 0;
	SetPlayerHealthEx(playerid, MAX_HEALTH);
 	SetPlayerSkin(playerid,pStats[playerid][Skin]);
	SetPlayerWantedLevelColor(playerid);
 	GameTextForPlayer(playerid,"~w~voce saiu do ~n~evento",3000,1);
 	GangZoneHideForPlayer(playerid, PoliciaLadraoArea);
 	format(string,sizeof(string),"[POLÍCIA E LADRÃO] %s saiu do evento",PlayerName(playerid));
	SendClientMessageToAll(COLOR_LIGHT_YELLOW, string);
	SetPlayerPos(playerid,1019.2133,-1134.7303,23.8281);
}
public AbastecerArma(playerid){
	SetPlayerControl(playerid, true);
	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid,29,100);
    SendClientMessage(playerid, COLOR_POLICIA, "Arma abastecida... GO GO GO!");
}
stock QtLadroesPL(){
    if(!PLIniciou) return 0;
	new result;
	for(new i = 0; i < MAX_SLOTS; i++){
	    if(Equipe[i] == 1 && MiniGame[i] == 1) result++;
	}
	return result;
}
stock QtPoliciaisPL(){
    if(!PLIniciou) return 0;
	new result;
	for(new i = 0; i < MAX_SLOTS; i++){
	    if(Equipe[i] == 2 && MiniGame[i] == 1) result++;
	}
	return result;
}
stock QtCapturadosPL(){
    if(!PLIniciou) return 0;
	new result;
	for(new i = 0; i < MAX_SLOTS; i++){
	    if(Capturado[i] == 1 && Equipe[i] == 1 && MiniGame[i] == 1) result++;
	}
	return result;
}
stock IsKidnapping(vehicleid)
{
    for(new i = 0; i < sizeof SequestroCar; i++)
	{
	    if(vehicleid == SequestroCar[i]) return true;
	}
	return false;
}
stock IsTruck(vehicleid)
{
    for(new i = 0; i < sizeof Truck; i++)
	{
	    if(vehicleid == Truck[i]) return true;
	}
	return false;
}
stock IsFarm(vehicleid)
{
    for(new i = 0; i < sizeof Farm; i++)
	{
	    if(vehicleid == Farm[i]) return true;
	}
	return false;
}
stock IsSecurity(vehicleid)
{
    for(new i = 0; i < sizeof Security; i++)
	{
	    if(vehicleid == Security[i]) return true;
	}
	return false;
}
stock IsBus(vehicleid)
{
    for(new i = 0; i < sizeof Bus; i++)
	{
	    if(vehicleid == Bus[i]) return true;
	}
	return false;
}
stock IsPolice(vehicleid)
{
    for(new i = 0; i < sizeof Police; i++)
	{
	    if(vehicleid == Police[i]) return true;
	}
	return false;
}
stock IsStretch(vehicleid)
{
    for(new i = 0; i < sizeof Stretch; i++)
	{
	    if(vehicleid == Stretch[i]) return true;
	}
	return false;
}
stock IsSANNews(vehicleid)
{
    for(new i = 0; i < sizeof SANNews; i++)
	{
	    if(vehicleid == SANNews[i]) return true;
	}
	return false;
}
stock IsMotoPizza(vehicleid)
{
    for(new i = 0; i < sizeof MotoPizza; i++)
	{
	    if(vehicleid == MotoPizza[i]) return true;
	}
	return false;
}
stock IsDumper(vehicleid)
{
    for(new i = 0; i < sizeof Dumper; i++)
	{
	    if(vehicleid == Dumper[i]) return true;
	}
	return false;
}
stock IsTrashmaster(vehicleid)
{
    for(new i = 0; i < sizeof Trashmaster; i++)
	{
	    if(vehicleid == Trashmaster[i]) return true;
	}
	return false;
}
stock IsTowtruck(vehicleid)
{
    for(new i = 0; i < sizeof Guincho; i++)
	{
	    if(vehicleid == Guincho[i]) return true;
	}
	return false;
}
stock IsAmbulance(vehicleid)
{
    for(new i = 0; i < sizeof Ambulancia; i++)
	{
	    if(vehicleid == Ambulancia[i]) return true;
	}
	return false;
}
stock IsAutoSchool(vehicleid)
{
    for(new i = 0; i < sizeof CarroAuto; i++)
	{
	    if(vehicleid == CarroAuto[i]) return true;
	}
	return false;
}
stock IsContraband(vehicleid)
{
    for(new i = 0; i < sizeof CarroContrabando; i++)
	{
	    if(vehicleid == CarroContrabando[i]) return true;
	}
	return false;
}
stock IsRental(vehicleid)
{
    for(new i = 0; i < sizeof CarroAluguel; i++)
	{
	    if(vehicleid == CarroAluguel[i]) return true;
	}
	return false;
}
stock IsTaxi(vehicleid)
{
    for(new i = 0; i < sizeof Taxi; i++)
	{
	    if(vehicleid == Taxi[i]) return true;
	}
	return false;
}
stock IsMotoTaxi(vehicleid)
{
	for(new i = 0; i < sizeof MotoTaxi; i++)
	{
	    if(vehicleid == MotoTaxi[i]) return true;
	}
	return false;
}
stock TrancarVeiculosPorProf(playerid)
{
	if(IsPlayerAdmin(playerid))
	{
	    for(new i = 0; i < AmountServerVehicles; i++)
	    {
	        SetVehicleParamsForPlayer(i, playerid, 0, 0);
	    }
	    return ;
	}
	if(pStats[playerid][Prof] != ASSASSINO)
	{
	    for(new i = 0; i < sizeof SequestroCar; i++)
	    {
			SetVehicleParamsForPlayer(SequestroCar[i], playerid, 0, 1);
   		}
	}
	else
	{
	    for(new i = 0; i < sizeof SequestroCar; i++)
	    {
			SetVehicleParamsForPlayer(SequestroCar[i], playerid, 0, 0);
   		}
	}
	if(pStats[playerid][Prof] != AGRICULTOR)
	{
	    for(new i = 0; i < sizeof Farm; i++)
	    {
			SetVehicleParamsForPlayer(Farm[i], playerid, 0, 1);
   		}
	}
	else
	{
	    for(new i = 0; i < sizeof Farm; i++)
	    {
			SetVehicleParamsForPlayer(Farm[i], playerid, 0, 0);
   		}
	}
	if(pStats[playerid][Prof] != SEGURANÇA)
	{
	    for(new i = 0; i < sizeof Security; i++)
	    {
			SetVehicleParamsForPlayer(Security[i], playerid, 0, 1);
   		}
	}
	else
	{
	    for(new i = 0; i < sizeof Security; i++)
	    {
			SetVehicleParamsForPlayer(Security[i], playerid, 0, 0);
   		}
	}
	if(pStats[playerid][Prof] != MOTORISTA_DE_ONIBUS)
	{
	    for(new i = 0; i < sizeof Bus; i++)
	    {
			SetVehicleParamsForPlayer(Bus[i], playerid, 0, 1);
   		}
	}
	else
	{
	    for(new i = 0; i < sizeof Bus; i++)
	    {
			SetVehicleParamsForPlayer(Bus[i], playerid, 0, 0);
   		}
	}
    if(pStats[playerid][Prof] != COP_SWAT && pStats[playerid][Prof] != COP_MILITAR && pStats[playerid][Prof] != COP_RODOVIARIO && pStats[playerid][Prof] != DELEGADO)
	{
	    for(new i = 0; i < sizeof Police; i++)
	    {
			SetVehicleParamsForPlayer(Police[i], playerid, 0, 1);
   		}
	}
	else
	{
	    for(new i = 0; i < sizeof Police; i++)
	    {
			SetVehicleParamsForPlayer(Police[i], playerid, 0, 0);
   		}
	}
 	if(pStats[playerid][Prof] != MOTORISTA_PARTICULAR)
	{
	    for(new i = 0; i < sizeof Stretch; i++)
	    {
			SetVehicleParamsForPlayer(Stretch[i], playerid, 0, 1);
   		}
	}
	else
	{
	    for(new i = 0; i < sizeof Stretch; i++)
	    {
			SetVehicleParamsForPlayer(Stretch[i], playerid, 0, 0);
   		}
	}
 	if(pStats[playerid][Prof] != JORNALISTA)
	{
	    for(new i = 0; i < sizeof SANNews; i++)
	    {
			SetVehicleParamsForPlayer(SANNews[i], playerid, 0, 1);
   		}
	}
	else
	{
	    for(new i = 0; i < sizeof SANNews; i++)
	    {
			SetVehicleParamsForPlayer(SANNews[i], playerid, 0, 0);
   		}
	}
 	if(pStats[playerid][Prof] != ENTREGADOR_PIZZA)
	{
	    for(new i = 0; i < sizeof MotoPizza; i++)
	    {
			SetVehicleParamsForPlayer(MotoPizza[i], playerid, 0, 1);
   		}
	}
	else
	{
	    for(new i = 0; i < sizeof MotoPizza; i++)
	    {
			SetVehicleParamsForPlayer(MotoPizza[i], playerid, 0, 0);
   		}
	}
 	if(pStats[playerid][Prof] != PEDREIRA)
	{
	    for(new i = 0; i < sizeof Dumper; i++)
	    {
			SetVehicleParamsForPlayer(Dumper[i], playerid, 0, 1);
   		}
	}
	else
	{
	    for(new i = 0; i < sizeof Dumper; i++)
	    {
			SetVehicleParamsForPlayer(Dumper[i], playerid, 0, 0);
   		}
	}
 	if(pStats[playerid][Prof] != LIXEIRO)
	{
	    for(new i = 0; i < sizeof Trashmaster; i++)
	    {
			SetVehicleParamsForPlayer(Trashmaster[i], playerid, 0, 1);
   		}
	}
	else
	{
	    for(new i = 0; i < sizeof Trashmaster; i++)
	    {
			SetVehicleParamsForPlayer(Trashmaster[i], playerid, 0, 0);
   		}
	}
 	if(pStats[playerid][Prof] != MECANICO)
	{
	    for(new i = 0; i < sizeof Guincho; i++)
	    {
			SetVehicleParamsForPlayer(Guincho[i], playerid, 0, 1);
   		}
	}
	else
	{
	    for(new i = 0; i < sizeof Guincho; i++)
	    {
			SetVehicleParamsForPlayer(Guincho[i], playerid, 0, 0);
   		}
	}
	if(pStats[playerid][Prof] != PARAMEDICO)
	{
	    for(new i = 0; i < sizeof Ambulancia; i++)
	    {
			SetVehicleParamsForPlayer(Ambulancia[i], playerid, 0, 1);
   		}
	}
	else
	{
	    for(new i = 0; i < sizeof Ambulancia; i++)
	    {
			SetVehicleParamsForPlayer(Ambulancia[i], playerid, 0, 0);
   		}
	}
	if(pStats[playerid][Prof] != INSTRUTOR)
	{
	    for(new i = 0; i < sizeof CarroAuto; i++)
	    {
			SetVehicleParamsForPlayer(CarroAuto[i], playerid, 0, 1);
   		}
	}
	else
	{
	    for(new i = 0; i < sizeof CarroAuto; i++)
	    {
			SetVehicleParamsForPlayer(CarroAuto[i], playerid, 0, 0);
   		}
	}
    if(pStats[playerid][Prof] != TAXISTA)
	{
	    for(new i = 0; i < sizeof Taxi; i++)
	    {
			SetVehicleParamsForPlayer(Taxi[i], playerid, 0, 1);
   		}
	}
	else
	{
	    for(new i = 0; i < sizeof Taxi; i++)
	    {
			SetVehicleParamsForPlayer(Taxi[i], playerid, 0, 0);
   		}
	}
	if(pStats[playerid][Prof] != MOTO_TAXISTA)
	{
	    for(new i = 0; i < sizeof MotoTaxi; i++)
	    {
			SetVehicleParamsForPlayer(MotoTaxi[i], playerid, 0, 1);
   		}
	}
	else
	{
	    for(new i = 0; i < sizeof MotoTaxi; i++)
	    {
			SetVehicleParamsForPlayer(MotoTaxi[i], playerid, 0, 0);
   		}
	}
	if(pStats[playerid][Prof] != JUIZ)
	{
	    SetVehicleParamsForPlayer(JuizCar, playerid, 0, 1);
	}
	else
	{
	    SetVehicleParamsForPlayer(JuizCar, playerid, 0, 0);
	}
	if(pStats[playerid][Prof] != ADVOGADO)
	{
	    for(new i = 0; i < sizeof AdvogadoCar; i++)
	    {
	        SetVehicleParamsForPlayer(AdvogadoCar[i], playerid, 0, 1);
	    }
	}
	else
	{
	    for(new i = 0; i < sizeof AdvogadoCar; i++)
	    {
	        SetVehicleParamsForPlayer(AdvogadoCar[i], playerid, 0, 0);
	    }
	}
	if(pStats[playerid][Prof] != CORRETOR)
	{
	    SetVehicleParamsForPlayer(CorretorCar, playerid, 0, 1);
	}
	else
	{
	    SetVehicleParamsForPlayer(CorretorCar, playerid, 0, 0);
	}
	if(pStats[playerid][Prof] != PROSTITUTA)
	{
	    SetVehicleParamsForPlayer(ProstitutaCar, playerid, 0, 1);
	}
	else
	{
	    SetVehicleParamsForPlayer(ProstitutaCar, playerid, 0, 0);
	}
	if(pStats[playerid][Prof] != MOTORISTA_PARTICULAR)
	{
	    for(new i = 0; i < sizeof Piloto; i++)
	    {
	        SetVehicleParamsForPlayer(Piloto[i], playerid, 0, 1);
	    }
	}
	else
	{
	    for(new i = 0; i < sizeof Piloto; i++)
    	{
	        SetVehicleParamsForPlayer(Piloto[i], playerid, 0, 0);
	    }
	}
}

public LevarJogador(playerid,plid)
{
	if(LevandoJogador[playerid]==1 && (Amarrado[plid] == 1 || Algemado[plid] == 1)){
	    if(pStats[playerid][Prof] == ASSASSINO){
			new Float:x,Float:y,Float:z;
			GetPlayerPos(playerid,x,y,z);
			GetXYInBackOfPlayer(playerid,x,y,0.7);
			SetPlayerPos(plid,x,y,z);
			SetPlayerInterior(plid,GetPlayerInterior(playerid));
			if(GetPlayerCars[plid]==INVALID_VEHICLE_ID){
				if(GetDistancePlayerToCar(plid,7)==1){
				    SendClientMessage(playerid, COLOR_COP_SWAT, "Para colocar ele no veículo digite: /colocarnoveiculo.");
				}
			}
		} else {
			new Float:x,Float:y,Float:z;
			GetPlayerPos(playerid,x,y,z);
			GetXYInBackOfPlayer(playerid,x,y,0.7);
			SetPlayerPos(plid,x,y,z);
			SetPlayerInterior(plid,GetPlayerInterior(playerid));
			if(GetCopCars[plid]==INVALID_VEHICLE_ID){
				if(GetDistanceToCopCars(plid,7)==1){
				    SendClientMessage(playerid, COLOR_COP_SWAT, "/colocarnoveiculo para colocar o jogador no veículo de polícia...");
				}
			}
		}
	}
	else{
		KillTimer(TimerLevando[playerid]);
		LevandoJogador[playerid]=0;
	}
}

stock GetDistanceToCopCars(playerid,Float:distance)
{
	new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez,Float:getdistance;
	GetPlayerPos(playerid,x,y,z);
	for(new v = 0; v < AmountServerVehicles; v++){
    	if(IsPolice(v) && GetVehicleModel(v) != 601 && GetVehicleModel(v) != 523 && GetVehicleModel(v) != 599){
			GetVehiclePos(v,x2,y2,z2);
			distancex=x-x2;
			distancey=y-y2;
			distancez=z-z2;
			getdistance=floatsqroot(distancex*distancex + distancey*distancey + distancez*distancez);
			if(getdistance <= distance){
				GetCopCars[playerid]=v;
				return 1;
			}
		}
	}
	GetCopCars[playerid]=INVALID_VEHICLE_ID;
	return 0;
}
stock GetDistancePlayerToCar(playerid,Float:distance)
{
	new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez,Float:getdistance;
	GetPlayerPos(playerid,x,y,z);
	for(new v = 0; v < AmountServerVehicles; v++){
	    if(IsKidnapping(v)){
			GetVehiclePos(v,x2,y2,z2);
			distancex=x-x2;
			distancey=y-y2;
			distancez=z-z2;
			getdistance=floatsqroot(distancex*distancex + distancey*distancey + distancez*distancez);
			if(getdistance <= distance){
				GetPlayerCars[playerid]=v;
				return 1;
			}
		}
	}
	GetPlayerCars[playerid]=INVALID_VEHICLE_ID;
	return 0;
}
stock GetProxPlayer(Float:x,Float:y,Float:z,Float:radi)
{
	new playa = -1, Float:dis = radi, Float:playerx, Float:playery, Float:playerz, Float:getdistance;
	for(new i = 0; i < MAX_SLOTS; i++){
	    if(IsPlayerConnected(i)){
	        GetPlayerPos(i,playerx,playery,playerz);
			getdistance = (x - playerx) * (x - playerx) + (y - playery) * (y - playery) + (z - playerz) * (z - playerz);
	        if(getdistance <= dis){
	            playa = i;
			}
		}
	}
	return playa;
}
stock GetProxUnbewusstePlayer(playerid,Float:x,Float:y,Float:z,Float:radi)
{
	new playa = -1, Float:dis = radi, Float:playerx, Float:playery, Float:playerz, Float:getdistance;
	for(new i = 0; i < MAX_SLOTS; i++){
	    if(IsPlayerConnected(i) && pStats[i][Morrendo] == 1 && i != playerid){
	        GetPlayerPos(i,playerx,playery,playerz);
			getdistance = (x - playerx) * (x - playerx) + (y - playery) * (y - playery) + (z - playerz) * (z - playerz);
	        if(getdistance <= dis){
	            playa = i;
			}
		}
	}
	return playa;
}
stock PlayerName(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	return name;
}
writelog(log[])
{
	fixchars(log);
	if(!fexist("Utilidades/RPGLog.txt")){
	    new File:logstr;
	    logstr = fopen("Utilidades/RPGLog.txt", io_write);
	    fclose(logstr);
	    logstr = fopen("Utilidades/RPGLog.txt", io_append);
	    fwrite(logstr,"|--------------------------------------------------------------------------------|");
        fwrite(logstr,"\r\n");
		fwrite(logstr,"|-                                  RPGLog.txt                                  -|");
		fwrite(logstr,"\r\n");
		fwrite(logstr,"|-           Essa pasta terá todos os dados do servidor, isto inclue:           -|");
		fwrite(logstr,"\r\n");
		fwrite(logstr,"|-       			    Monitoramentos           			-|");
		fwrite(logstr,"\r\n");
		fwrite(logstr,"|-       			        Bugs                                    -|");
		fwrite(logstr,"\r\n");
		fwrite(logstr,"|-       			       Avisos					-|");
		fwrite(logstr,"\r\n");
		fwrite(logstr,"|-                                      etc...				        -|");
		fwrite(logstr,"\r\n");
		fwrite(logstr,"|- Sempre é bom passar aqui e dar uma lida para ver o que acontece no servidor! -|");
        fwrite(logstr,"\r\n");
        fwrite(logstr,"|--------------------------------------------------------------------------------|");
		fwrite(logstr,"\r\n");
		fclose(logstr);
	} else {
		new File:logstr;
		logstr = fopen("Utilidades/RPGLog.txt", io_append);
        fwrite(logstr, log);
        fwrite(logstr, "\r\n");
        fclose(logstr);
	}
}
reportlog(log[])
{
	fixchars(log);
	if(!fexist("Utilidades/ReportLog.txt")){
	    new File:logstr;
	    logstr = fopen("Utilidades/ReportLog.txt", io_write);
	    fclose(logstr);
	    logstr = fopen("Utilidades/ReportLog.txt", io_append);
	    fwrite(logstr,"|--------------------------------------------------------------------------------|");
        fwrite(logstr,"\r\n");
		fwrite(logstr,"|-                                  ReportLog.txt                                  -|");
		fwrite(logstr,"\r\n");
		fwrite(logstr,"|-           Essa pasta terá todos os report do servidor:           -|");
        fwrite(logstr,"\r\n");
        fwrite(logstr,"|--------------------------------------------------------------------------------|");
		fwrite(logstr,"\r\n");
		fclose(logstr);
	} else {
		new File:logstr;
		logstr = fopen("Utilidades/ReportLog.txt", io_append);
        fwrite(logstr, log);
        fwrite(logstr, "\r\n");
        fclose(logstr);
	}
}
public GetClosestHospital(playerid)
{
	if(!IsPlayerConnected(playerid)){
	    return -1;
	}
	new Float:prevdist = 100000.000;
	new prevhosp;
	for(new hospid; hospid < sizeof Hospitais; hospid++){
	    new Float:dist;
	    dist = GetPlayerDistanceToPoint(playerid,Hospitais[hospid][0],Hospitais[hospid][1]);
		if((dist < prevdist)){
		    prevdist = dist;
		    prevhosp = hospid;
		}
	}
	return prevhosp;
}

public ZerarRecebendoVida(playerid) ReceivingLife[playerid] = 0;

stock SetPlayerArmourEx(playerid,Float:a)
{
    KillTimer(TimerReceive[playerid][1]);
	ReceivingLife[playerid] = 1;
    if(a < 0)
	{
	    pStats[playerid][Colete] = 0.0;
	    SetPlayerArmour(playerid, 0.0);
	}
	else if(a >= MAX_ARMOUR)
	{
	    pStats[playerid][Colete] = MAX_ARMOUR;
	    SetPlayerArmour(playerid, MAX_ARMOUR);
	}
	else
	{
		pStats[playerid][Colete] = a;
		SetPlayerArmour(playerid, a);
	}
	TimerReceive[playerid][1] = SetTimerEx("ZerarRecebendoVida", 5000, false, "d", playerid);
}
stock SetPlayerHealthEx(playerid,Float:h)
{
    KillTimer(TimerReceive[playerid][1]);
    ReceivingLife[playerid] = 1;
	if(h < 0)
	{
	    pStats[playerid][Vida] = 0.0;
	    SetPlayerHealth(playerid, 0.0);
	}
	else if(h > MAX_HEALTH)
	{
	    pStats[playerid][Vida] = MAX_HEALTH;
	    SetPlayerHealth(playerid, MAX_HEALTH);
	}
	else
	{
		pStats[playerid][Vida] = h;
		SetPlayerHealth(playerid, h);
	}
	TimerReceive[playerid][1] = SetTimerEx("ZerarRecebendoVida", 5000, false, "d", playerid);
}
stock AddPlayerHealth(playerid,Float:h)
{
	new Float:x;
	GetPlayerHealth(playerid, x);
	SetPlayerHealthEx(playerid, x + h);
}
stock GetDistanceBetweenPlayers(playerid,playerid2)
{
	if(GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(playerid2)) return 100;
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	new Float:tmpdis;
	GetPlayerPos(playerid,x1,y1,z1);
	GetPlayerPos(playerid2,x2,y2,z2);
	tmpdis = floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
	return floatround(tmpdis);
}

stock GetPlayerDistanceToPointEx(playerid,Float:x2,Float:y2,Float:z2)
{
	new Float:x1,Float:y1,Float:z1;
	new Float:tmpdis;
	GetPlayerPos(playerid,x1,y1,z1);
	tmpdis = floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
	return floatround(tmpdis);
}

stock GetDistanceToObject(playerid,objectid)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	new Float:tmpdis;
	GetPlayerPos(playerid,x1,y1,z1);
	GetObjectPos(objectid,x2,y2,z2);
	tmpdis = floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
	return floatround(tmpdis);
}

stock TemProfissao(prof)
{
	for(new i = 0; i < MAX_SLOTS; i++)
	{
 		if(IsPlayerConnected(i) && Logado[i] && pStats[i][Prof] == prof)
 		{
 		    return true;
 		}
	}
	return false;
}

stock GangFile(gangname[]){
    new str[50];
	format(str,sizeof(str),"Gangues/%s.gng",gangname);
	return str;
}
stock JornalFile(titulo[]){
    new str[50];
	format(str,sizeof(str),"Jornais/%s.jornal",titulo);
	return str;
}
stock PropertyFile(propriedade){
    new str[50];
	format(str,sizeof(str),"Propriedades/%s.pro",Propriedades[propriedade][PropName]);
	return str;
}
stock VehicleFile(vehicleid){
	new str[50];
	format(str,sizeof(str),"Veiculos/%d.veh",vehicleid);
	return str;
}
stock PickupFile(pickupid){
	new str[50];
	format(str,sizeof(str),"Pickups/%d.pck",pickupid);
	return str;
}
stock PlayerFile(name[]){
	new str[50];
	format(str,sizeof(str),"Jogadores/%s.ini",name);
	return str;
}
stock HotelFile(hotelid){
	new str[50];
	format(str,sizeof(str),"Hoteis/%d.ini",hotelid);
	return str;
}
public LogarPlayer(playerid)
{
	new string[256];
    new name[MAX_PLAYER_NAME];
    ReceivingLife[playerid] = 1;
	if(Logado[playerid] == 1 && !pStats[playerid][Preso] && !pStats[playerid][Morrendo] && MiniGame[playerid] == 0)
	{
 		SaveWeapons(playerid);
	}
	if(pStats[playerid][Morrendo] == 1)
	{
	    DeadPos[playerid][0] = pStats[playerid][LastPosX];
	    DeadPos[playerid][1] = pStats[playerid][LastPosY];
	    DeadPos[playerid][2] = pStats[playerid][LastPosZ];
	}
	if(pStats[playerid][GanhouLevel] != 0){
		if(pStats[playerid][GanhouLevel] != DiaJogo){
			pStats[playerid][GanhouLevel] = 0;
		}
	}
    GetPlayerName(playerid,name,sizeof(name));
    if(fexist(PlayerFile(name))){
		new Float:X,Float:Y,Float:Z;
		X = pStats[playerid][SpawnPosX];
		Y = pStats[playerid][SpawnPosY];
		Z = pStats[playerid][SpawnPosZ];
		if(pStats[playerid][LocouCasa] == 1){
			X = floatstr(GetValue(PlayerFile(pStats[playerid][DonoCasaAlugada]),"SpawnPosX"));
			Y = floatstr(GetValue(PlayerFile(pStats[playerid][DonoCasaAlugada]),"SpawnPosY"));
			Z = floatstr(GetValue(PlayerFile(pStats[playerid][DonoCasaAlugada]),"SpawnPosZ"));
		}
		SetSpawnInfo(playerid, 1, pStats[playerid][Skin], X, Y, Z, pStats[playerid][SpawnPosAng], 0, 0, 0, 0, 0, 0);
		SpawnPlayer(playerid);
		SetPlayerInterior(playerid, 0);
	    SetPlayerSkin(playerid, Profissoes[pStats[playerid][Prof]][ProfSkin]);
		if(pStats[playerid][Prof] == DESEMPREGADO && pStats[playerid][Xpoints] == 0){
		    SetPlayerSkin(playerid, 23);
		}
   	    Logado[playerid] = 1;
   	    if(pStats[playerid][Doenca] > 0){
   	        TimerDoenca[playerid][1] = SetTimerEx("EfeitoDoenca", 20000, 0, "d", playerid);
   	    }
	   	if(pStats[playerid][Alcool] > 8){
	    	KillTimer(TimerBebida[playerid]);
	   		TimerBebida[playerid] = SetTimerEx("Bebado",80000,0,"d",playerid);
	   	}
		if(GetPlayerWantedLevel(playerid) > 0 && EntrouAgora[playerid] == 1){
			format(string,sizeof(string),"[CENTRAL] %s acaba de voltar a cidade, ele é procurado level %d.",PlayerName(playerid), GetPlayerWantedLevel(playerid));
			SendClientMessagePolicia(COLOR_CENTRAL, string);
		}
		EntrouAgora[playerid] = 0;
	}
}

public AvisoTempoRestante(playerid)
{
	if(JuizTribunal != -1 && (Audiencia[0] == playerid || Audiencia[1] == playerid))
	{
	    return 1;
	}
	if(pStats[playerid][Preso] == 1)
	{
	    pStats[playerid][HorasPreso]--;
		if(pStats[playerid][HorasPreso] > 1){
		    new string[128];
		    format(string,sizeof(string),"Restam %d horas para você cumprir sua pena de prisão!",pStats[playerid][HorasPreso]);
		    SendClientMessage(playerid, COLOR_COP_SWAT, string);
		    KillTimer(PrisaoTimer[playerid][0]);
		    PrisaoTimer[playerid][0]=SetTimerEx("AvisoTempoRestante",60000,0,"d",playerid);
		    SavePlayer(PlayerName(playerid), playerid);
		    return 1;
		}
		else if(pStats[playerid][HorasPreso] == 1){
		    SendClientMessage(playerid, COLOR_COP_SWAT, "Resta apenas 1 hora para você cumprir sua pena de prisão!");
		    KillTimer(PrisaoTimer[playerid][0]);
		    PrisaoTimer[playerid][0]=SetTimerEx("AvisoTempoRestante",60000,0,"d",playerid);
		    SavePlayer(PlayerName(playerid), playerid);
		    return 1;
		}
		else if(pStats[playerid][HorasPreso] <= 0){
			KillTimer(PrisaoTimer[playerid][0]);
			SetPlayerFree(playerid);
			SavePlayer(PlayerName(playerid), playerid);
			return 1;
		}
	}
	return 1;
}
public ConfiscarArmas(playerid)
{
	if(fexist(PlayerFile(PlayerName(playerid))))
	{

		if(pStats[playerid][Porte] == 0)
		{
		    RemoveWeapons(playerid);
		}
		else if(pStats[playerid][Porte] == 1)
		{
   		    for(new s = 0; s < 13; s++)
			{
		   		new w = 0, a = 0;
	       		GetWeaponData(playerid, s, w, a);
 				if(w == 25 || w == 26){
	    			GetWeapons[playerid][3][0] = 0;
	   		   	    GetWeapons[playerid][3][1] = 0;
				}
 				else if(w == 29){
	    			GetWeapons[playerid][4][0] = 0;
   	    			GetWeapons[playerid][4][1] = 0;
				}
 				else if(w == 30 || w == 31){
	       			GetWeapons[playerid][5][0] = 0;
  		       		GetWeapons[playerid][5][1] = 0;
				}
				else if(w == 33){
	       			GetWeapons[playerid][6][0] = 0;
  		       		GetWeapons[playerid][6][1] = 0;
				}
				GetWeapons[playerid][7][0] = 0;
	    		GetWeapons[playerid][7][1] = 0;
	    		GetWeapons[playerid][8][0] = 0;
	    	    GetWeapons[playerid][8][1] = 0;
			}
		}
		else if(pStats[playerid][Porte] == 2){
			GetWeapons[playerid][7][0] = 0;
 			GetWeapons[playerid][7][1] = 0;
	    	GetWeapons[playerid][8][0] = 0;
	        GetWeapons[playerid][8][1] = 0;
		}
		LoadWeapons(playerid);
		if(pStats[playerid][ClockBomb] == 1 && pStats[playerid][Rocket] > 0)
		{
		    SendClientMessage(playerid, COLOR_LIGHT_RED, "Sua bomba relógio e seus rojões foram fiscalizados junto com as armas sem porte...");
		}
		else if(pStats[playerid][ClockBomb] == 1 || pStats[playerid][Flash] == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHT_RED, "Suas bombas (Flash e/ou Bomba Relógio) foram fiscalizada junto com as armas sem porte...");
		}
		else if(pStats[playerid][Rocket] > 0)
		{
		    SendClientMessage(playerid, COLOR_LIGHT_RED, "Seus rojões foram fiscalizados junto com as armas sem porte...");
		}
		pStats[playerid][ClockBomb] = 0;
		pStats[playerid][Flash] = 0;
		pStats[playerid][Rocket] = 0;
	}
}
stock SendClientMessageParticipantes(text_color,string_text[])
{
	for(new i = 0; i < MAX_SLOTS; i++)
	{
	    if(IsPlayerConnected(i) && pStats[i][ValorAposta] > 0)
	    {
	        SendClientMessage(i,text_color,string_text);
	    }
	}
}
stock GameTextForParticipantes(string_text[],time,lol)
{
	for(new i = 0; i < MAX_SLOTS; i++)
	{
	    if(IsPlayerConnected(i) && pStats[i][ValorAposta] > 0)
	    {
	        GameTextForPlayer(i,string_text,time,lol);
	    }
	}
}

stock SendClientMessageSubway(text_color,string_text[])
{
	for(new i = 0; i < MAX_SLOTS; i++)
	{
	    if(IsPlayerConnected(i) && Metro[i])
	    {
	        SendClientMessage(i,text_color,string_text);
	    }
	}
}

stock GameTextForSubway(string_text[],display_timer,text_style)
{
	for(new i = 0; i < MAX_SLOTS; i++)
	{
	    if(IsPlayerConnected(i) && Metro[i])
	    {
	        GameTextForPlayer(i,string_text,display_timer,text_style);
	    }
	}
}

stock SendClientMessageDelegado(text_color, string_text[]){
	for(new i = 0; i < MAX_SLOTS; i++)
	{
	    if(IsPlayerConnected(i) && (pStats[i][Prof] == DELEGADO || IsPlayerAdmin(i)))
	    {
	        SendClientMessage(i, text_color, string_text);
	    }
	}
}

stock SendClientMessagePolicia(text_color, string_text[]){
    for(new i=0;i<MAX_SLOTS;i++)
    {
        if(IsPlayerConnected(i))
        {
            if(pStats[i][Prof] == COP_SWAT || pStats[i][Prof] == COP_RODOVIARIO || pStats[i][Prof] == COP_MILITAR || pStats[i][Prof] == DELEGADO)
            {
            	SendClientMessage(i, text_color, string_text);
            }
        }
    }
}
stock SendClientMessageJuiz(text_color, string_text[]){
	for(new i=0;i<MAX_SLOTS;i++)
	{
 		if(IsPlayerConnected(i))
        {
       		if(pStats[i][Prof] == JUIZ)
			{
				SendClientMessage(i, text_color, string_text);
			}
		}
	}
}
stock SendClientMessageVendedor(text_color, string_text[]){
	for(new i=0;i<MAX_SLOTS;i++)
		{
            if(!IsPlayerConnected(i))
            {
            	if(pStats[i][Prof] == VENDEDOR_DE_ARMAS)
				{
					SendClientMessage(i, text_color, string_text);
				}
			}
		}
}
stock SendClientMessageTV(text_color, string_text[]){
	for(new i=0;i<MAX_SLOTS;i++)
	{
	    if(IsPlayerConnected(i) && TVligada[i] == 1)
	    {
	        SendClientMessage(i, text_color, string_text);
		}
	}
}
stock SendClientMessageSpectators(playerid, text_color, string_text[]){
	for(new i=0;i<MAX_SLOTS;i++)
	{
 		if(IsPlayerConnected(i))
 		{
           	if(TVligada[i] == 1)
			{
			    if(PlayerSpec[i] == playerid)
				{
					SendClientMessage(i, text_color, string_text);
				}
			}
		}
	}
}
stock SendClientMessageAdmin(text_color, string_text[]){
	for(new i=0;i<MAX_SLOTS;i++)
	{
 		if(IsPlayerConnected(i))
 		{
           	if(IsPlayerAdmin(i))
			{
				SendClientMessage(i, text_color, string_text);
			}
		}
	}
}
stock SendChatMessageAdmin(string_text[])
{
	new str[128];
	format(str, sizeof str, "[CHAT MESSAGE] %s", string_text);
	for(new i = 0; i < MAX_SLOTS; i++)
	{
		if(IsPlayerAdmin(i) && AdminText[i] == 1)
		{
		    SendClientMessage(i, COLOR_ADMIN_MESSAGE, str);
		}
	}
	print(str);
}
stock SendClientMessageGang(gangname[], text_color, const string_text[]){
	new gangfile[128];
	set(gangfile,GangFile(gangname));
	if(fexist(gangfile))
	{
		new str[128];
		format(str,sizeof(str),"[GANGUE %s] %s",gangname,string_text);
		writelog(str);
		print(str);
		if(IsStringAName(gStats[GetGangID(gangname)][GangDono])) SendClientMessage(IDName(gStats[GetGangID(gangname)][GangDono]),text_color,string_text);
		for(new g = 0; g < gStats[GetGangID(gangname)][GangMembros]; g++){
			if(IsStringAName(MembersGang[GetGangID(gangname)][g])){
				SendClientMessage(IDName(MembersGang[GetGangID(gangname)][g]),text_color,string_text);
			}
		}
	}
}
stock SetPlayerFree(playerid){
   	pStats[playerid][Preso] = 0;
	pStats[playerid][Fianca] = 0;
	CelularBloqueado[playerid] = 0;
	SpawnPlayer(playerid);
	SetPlayerInterior(playerid, 0);
	SetPlayerPos(playerid, 1546.5948,-1675.9949,13.5626);
	GameTextForPlayer(playerid, "~r~libertado!", 5000,0);
	if(ChavePrisao[playerid][1] == 0)
	{
		SendClientMessage(playerid,COLOR_CENTRAL,"[CENTRAL COP] Você foi solto, mas se cometer mais crimes, pagará novamente.");
		if(pStats[playerid][AmountBusted] > 0 && pStats[playerid][AmountBusted] % 3 == 0)
		{
 			SendClientMessage(playerid, COLOR_CENTRAL, "[CENTRAL COP] Seu porte de armas foi retirado, você anda se metendo em muitas encrencas...");
   			SendClientMessage(playerid, COLOR_CENTRAL, "[CENTRAL COP] E mais... Suas armas foram junto, a polícia está farta de tanta marginalidade!");
			pStats[playerid][Porte] = 0;
			RemoveWeapons(playerid);
		}
		else
		{
	    	SendClientMessage(playerid, COLOR_CENTRAL, "[CENTRAL COP] As armas que você tem porte foram devolvidas...");
       		SendClientMessage(playerid, COLOR_CENTRAL, "[CENTRAL COP] E não é só, isso foi anotado em sua ficha criminal.");
       		LoadWeapons(playerid);
		}
		SendClientMessage(playerid,COLOR_GREEN,"[CENTRAL COP] Retire-se da Delegacia, antes que mudemos de idéia.");
	}
	else
	{
	    if(pStats[playerid][AmountBusted] > 0 && pStats[playerid][AmountBusted] % 3 == 0)
		{
		    SendClientMessage(playerid, COLOR_CENTRAL, "A polícia já confiscou todas as suas armas além do porte, é tarde demais para recuperá-las.");
		    pStats[playerid][Porte] = 0;
		    RemoveWeapons(playerid);
		}
		else
		{
	    	SendClientMessage(playerid, COLOR_CENTRAL, "Ainda lhe restam as armas com porte para fuga, infelizmente o ocorrido já foi anotado em sua ficha criminal.");
			LoadWeapons(playerid);
		}
		SendClientMessage(playerid, COLOR_CENTRAL, "Saiá daí antes que algum policial apareça...");
		ChavePrisao[playerid][1] = 0;
	}
	Contrabando[playerid] = 0;
	Receita[playerid] = 0;
	SetPlayerWantedLevel(playerid, 0);
	pStats[playerid][AmountBusted]++;
}
stock DesativarRastreador(playerid){
	DisablePlayerCheckpoint(playerid);
    CheckpointStatus[playerid] = NONE;
    Rastreador2[Rastreador[playerid]] = -1;
    Rastreado[Rastreador[playerid]] = 0;
	Rastreador[playerid] = -1;
	Rastreando[playerid] = 0;
	VeiculoRastreando[playerid] = -1;
}
public FazendoStripTease(playerid)
{
   if(FazendoStrip[playerid] == 1){
      FST[playerid] = 0;
      ApplyAnimation(playerid,"STRIP","STR_Loop_A",4.1,0,1,1,1,1);
	  KillTimer(TimerStrip[playerid]);
	  TimerStrip[playerid] = SetTimerEx("FazendoStripTease",100,false,"d",playerid);
   }
}
public CheckStripTeaseKey(playerid)
{
    if(FazendoStrip[playerid] == 1 && FST[playerid] == 0)
	{
	    new k, ud, lr;
		GetPlayerKeys(playerid, k, ud, lr);
		if(lr == KEY_LEFT)
		{
			KillTimer(TimerStrip[playerid]);
			ApplyAnimation(playerid,"STRIP","STR_C1",4.1,0,1,1,1,1);
			FST[playerid] = 1;
			TimerStrip[playerid] = SetTimerEx("FazendoStripTease",5500,false,"d",playerid);
	    }
		if(lr == KEY_RIGHT)
		{
			KillTimer(TimerStrip[playerid]);
			ApplyAnimation(playerid,"STRIP","STR_B2C",4.1,0,1,1,1,1);
			FST[playerid] = 1;
			TimerStrip[playerid] = SetTimerEx("FazendoStripTease",5000,false,"d",playerid);
		}
    	if(ud == KEY_UP)
		{
			KillTimer(TimerStrip[playerid]);
			ApplyAnimation(playerid,"STRIP","STR_C2",4.1,0,1,1,1,1);
			FST[playerid] = 1;
			TimerStrip[playerid] = SetTimerEx("FazendoStripTease",5000,false,"d",playerid);
		}
		if(ud == KEY_DOWN)
		{
			KillTimer(TimerStrip[playerid]);
			ApplyAnimation(playerid,"STRIP","STR_A2B",4.1,0,1,1,1,1);
			FST[playerid] = 1;
			TimerStrip[playerid] = SetTimerEx("FazendoStripTease",4500,false,"d",playerid);
		}
	}
}
stock InGuinchoCTC(playerid){
    for(new r = 0; r < 24; r++){
		if(IsPlayerInVehicle(playerid,Reboque[r])) return true;
	}
	return false;
}
stock GetCarCTCId(vehicleid){
    for(new c = 0; c < 20; c++){
		if(vehicleid == CarrosCTC[c]) return c;
	}
	return 0;
}
stock IsCTCCar(vehicleid){
    for(new c = 0; c < 20; c++){
		if(vehicleid == CarrosCTC[c]) return true;
	}
	return false;
}

public OnPlayerKeyStateChange(playerid,newkeys,oldkeys)
{
	if(newkeys == KEY_SUBMISSION && IsPlayerInAnyVehicle(playerid) && vStats[GetPlayerVehicleID(playerid)][VTravas] == 1 && compare(PlayerName(playerid), vStats[GetPlayerVehicleID(playerid)][VDono]))
	{
	    if(vStats[GetPlayerVehicleID(playerid)][Trancado] == 1)
	    {
	        vStats[GetPlayerVehicleID(playerid)][Trancado] = 0;
	        SendClientMessage(playerid, COLOR_GREEN, "Veículo destrancado.");
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i) && Logado[i])
	            {
	                SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid), i, 0, 0);
	            }
	        }
	    }
	    else
	    {
	        vStats[GetPlayerVehicleID(playerid)][Trancado] = 1;
	        SendClientMessage(playerid, COLOR_GREEN, "Veículo trancado.");
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i) && Logado[i] && i != playerid)
	            {
	                SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid), i, 0, 1);
	            }
	        }
	    }
	}
	if(Blinded[playerid] == 1 && newkeys == KEY_ACTION)
	{
	    if(GetPlayerControl(playerid) == 1)
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Sem digitar TAB quando estiver cego... Como punição você foi paralisado por 5 segundos.");
			SetPlayerControl(playerid, false);
			SetTimerEx("SetPlayerControl", 5000, 0, "dd", playerid, 1);
		}
	}
    if(Tutorial[playerid] > 0)
	{
	    if(newkeys == 8192 && Tutorial[playerid] > 1 && CanCPTut[playerid])
	    {
	        Tutorial[playerid]--;
	        ExecTutorial(playerid);
		}
		else if(newkeys == 16384 && Tutorial[playerid] < 21 && CanCPTut[playerid])
		{
		    Tutorial[playerid]++;
		    ExecTutorial(playerid);
		}
		else if(newkeys == KEY_FIRE && Tutorial[playerid] == 21 && CanCPTut[playerid])
		{
		    Tutorial[playerid] = 0;
    		SetPlayerPos(playerid,AnteriorPos[playerid][0],AnteriorPos[playerid][1],AnteriorPos[playerid][2]);
    		SetCameraBehindPlayer(playerid);
    		SetPlayerVirtualWorld(playerid, 0);
    		if(!GetPlayerAge(playerid))
			{
				TypingDate[playerid]=1;
				SendClientMessage(playerid, COLOR_YELLOW, " ");
				SendClientMessage(playerid, COLOR_YELLOW, " ");
				SendClientMessage(playerid, COLOR_YELLOW, " ");
				SendClientMessage(playerid, COLOR_YELLOW, " ");
				SendClientMessage(playerid, COLOR_YELLOW, "Equipe Virtual Life informa:");
				SendClientMessage(playerid, COLOR_WHITE, "Entre com a sua data de nascimento... SINTAXE: 'dia'/'mes'/'ano'");
				SendClientMessage(playerid, COLOR_WHITE, "Exemplo: 04/08/1988");
			}
			else
			{
			    SetPlayerControl(playerid, true);
			}
		}
		return 1;
	}

    if((newkeys==KEY_FIRE)&&(InGuinchoCTC(playerid))&&(MiniGame[playerid] == 2)&&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER)){
		new Float:playerX,Float:playerY,Float:playerZ;
		GetPlayerPos(playerid,playerX,playerY,playerZ);
		new Float:vX,Float:vY,Float:vZ;
		new Found=0;
		new vid=0;
		while((vid<AmountServerVehicles+AmountPlayerVehicles)&&(!Found))
		{
   			vid++;
			GetVehiclePos(vid,vX,vY,vZ);
   			if((floatabs(playerX-vX)<7.0)&&(floatabs(playerY-vY)<7.0)&&(floatabs(playerZ-vZ)<7.0)&&(CTCCapturado[GetCarCTCId(vid)]==0)&&(IsCTCCar(vid)))
   		    {
   			    Found=1;
   			    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
		        {
   			        DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
		        }
   			    AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
   			    SendClientMessage(playerid,COLOR_MECANICO,"Carro capturado!");
   			    CheckpointStatus[playerid] = ENTREGA_CTC_CAR;
   			    if(EquipeCTC[playerid] == 1) SetPlayerCheckpoint(playerid,2399.1150,2753.4324,10.5658,3.0);
   			    else if(EquipeCTC[playerid] == 2) SetPlayerCheckpoint(playerid,2368.2146,2754.0471,10.5656,3.0);
				SendClientMessage(playerid, COLOR_WHITE, "Siga o checkpoint em seu radar para entrega-lo...");
				break;
 			}
		}
		if(!Found)
		{
		   	SendClientMessage(playerid,COLOR_GRAY,"Sem carro para capturar!");
		}
	}
	if(newkeys == KEY_JUMP) {
		if(HaveDJ && SM[playerid] == DJ) {
		    new txt[128];
			MusicSelected=(MusicSelected+1)%7;
			format(txt,sizeof(txt),"~n~~n~~n~~n~~n~~n~~n~~n~~y~Musica: ~w~%d",MusicSelected);
			GameTextForPlayer(playerid,txt,5000,3);
		}
	}
	if(newkeys == KEY_SPRINT) {
	    if(HaveDJ && SM[playerid] == DJ) {
	    	new txt[128];
			MusicSelected=(MusicSelected-1)%7;
			format(txt,sizeof(txt),"~n~~n~~n~~n~~n~~n~~n~~n~~y~Musica: ~w~%d",MusicSelected);
			GameTextForPlayer(playerid,txt,5000,3);
		}
	}
	if(newkeys == KEY_JUMP) {
		if(sombalada[PickupEntradaCasa[playerid]] != 0){
			ProximaRadio(playerid);
		}
	}
	if(newkeys == KEY_SPRINT) {
	    if(sombalada[PickupEntradaCasa[playerid]] != 0){
	    	AnteriorRadio(playerid);
		}
	}
	if(ComputerMusicEnable[playerid] && (newkeys == KEY_JUMP || newkeys == KEY_SPRINT))
	{
		if(newkeys == KEY_JUMP) ComputerMusic[playerid] = ((ComputerMusic[playerid] + 1) % 7) + 1;
		if(newkeys == KEY_SPRINT) ComputerMusic[playerid] = ((ComputerMusic[playerid] - 1) % 7) + 1;
		if(ComputerMusic[playerid] == 1){
			PlayerPlaySound(playerid,1088,0.0,0.0,0.0);
			PlayerPlaySound(playerid,1062,0.0,0.0,0.0);
		}
		if(ComputerMusic[playerid] == 2){
			PlayerPlaySound(playerid,1063,0.0,0.0,0.0);
			PlayerPlaySound(playerid,1068,0.0,0.0,0.0);
		}
		if(ComputerMusic[playerid] == 3){
			PlayerPlaySound(playerid,1069,0.0,0.0,0.0);
			PlayerPlaySound(playerid,1076,0.0,0.0,0.0);
		}
		if(ComputerMusic[playerid] == 4){
			PlayerPlaySound(playerid,1077,0.0,0.0,0.0);
			PlayerPlaySound(playerid,1097,0.0,0.0,0.0);
		}
		if(ComputerMusic[playerid] == 5){
			PlayerPlaySound(playerid,1098,0.0,0.0,0.0);
			PlayerPlaySound(playerid,1183,0.0,0.0,0.0);
		}
		if(ComputerMusic[playerid] == 6){
			PlayerPlaySound(playerid,1084,0.0,0.0,0.0);
  			PlayerPlaySound(playerid,1185,0.0,0.0,0.0);
		}
		if(ComputerMusic[playerid] == 7){
			PlayerPlaySound(playerid,1086,0.0,0.0,0.0);
			PlayerPlaySound(playerid,1187,0.0,0.0,0.0);
		}
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && TVligada[playerid] == 1)
	{
		if(newkeys == 16384) ProximoCanal(playerid);
		if(newkeys == 8192)  AnteriorCanal(playerid);
	}
	if(Rastreando[playerid] == 1){
	    if(newkeys == 16384){
	        for(new v = VeiculoRastreando[playerid]; v < GetQtVehicles(Rastreador[playerid]) + 1; v++){
				if(GetVehicles(Rastreador[playerid], v) != -1 && JaDestruido[GetVehicles(Rastreador[playerid], v)] == 0 && v != VeiculoRastreando[playerid]){
					VeiculoRastreando[playerid] = v;
					new str[128],Float:X,Float:Y,Float:Z,RastreadorAvisado = 0;
					if(RastreadorAvisado == 0) {
						format(str,sizeof(str),"[RASTREADOR] Veículo alterado para: %d",VeiculoRastreando[playerid]);
						SendClientMessage(playerid, COLOR_WHITE, str);
						GetVehiclePos(GetVehicles(Rastreador[playerid], v), X, Y, Z);
						DisablePlayerCheckpoint(playerid);
						CheckpointStatus[playerid] = RASTREAMENTO;
						SetPlayerCheckpoint(playerid,X,Y,Z,3.0);
						RastreadorAvisado = 1;
					}
					break;
				}
			}
	    }
		if(newkeys == 8192){
		    for(new v = VeiculoRastreando[playerid]; v > 0; v--){
				if(GetVehicles(Rastreador[playerid], v) != -1 && JaDestruido[GetVehicles(Rastreador[playerid], v)] == 0 && v != VeiculoRastreando[playerid]){
					VeiculoRastreando[playerid] = v;
					new str[128],Float:X,Float:Y,Float:Z,RastreadorAvisado = 0;
					if(RastreadorAvisado == 0) {
						format(str,sizeof(str),"[RASTREADOR] Veículo alterado para: %d",VeiculoRastreando[playerid]);
						SendClientMessage(playerid, COLOR_WHITE, str);
						GetVehiclePos(GetVehicles(Rastreador[playerid], v), X, Y, Z);
						DisablePlayerCheckpoint(playerid);
						CheckpointStatus[playerid] = RASTREAMENTO;
						SetPlayerCheckpoint(playerid,X,Y,Z,3.0);
						RastreadorAvisado = 1;
					}
					break;
				}
			}
		}
	}
	if(CameraAtiva[playerid]==1){
		if(newkeys == 16384){
		    Zoom[playerid]++;
		}
		if(newkeys == 8192){
			Zoom[playerid]--;
		}
	}
	if(newkeys == 16)
	{
	    if(IsPlayerInAnyVehicle(playerid) && PodeSair[playerid] == 1)
		{
	        SetPlayerControl(playerid, true);
	        RemovePlayerFromVehicle(playerid);
	        PChaveMestra[playerid] = 0;
	        PodeSair[playerid] = 0;
		}
	}
	if((newkeys == KEY_SUBMISSION)&&(IsPlayerInAnyVehicle(playerid))&&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER)){
	    if(pStats[playerid][Prof] == COP_MILITAR || pStats[playerid][Prof] == COP_RODOVIARIO || pStats[playerid][Prof] == COP_SWAT || pStats[playerid][Prof] == DELEGADO || IsPlayerAdmin(playerid)){
			new str[256];
		 	if(IsPolice(GetPlayerVehicleID(playerid))){
		 		format(str,sizeof(str),"[VIATURA] Oficial %s: Parado polícia, encosta aí!",PlayerName(playerid));
				for(new i = 0; i < MAX_SLOTS; i++){
				    if(GetDistanceBetweenPlayers(playerid,i) < 80){
						SendClientMessage(i, COLOR_CENTRAL, str);
						GameTextForPlayer(i,"~r~PARADO~n~ ~b~Policia!",5000,5);
						PlayerPlaySound(i, 1147, 0.0, 0.0, 0.0);
					}
				}
			}
		}
	}
	if((newkeys==KEY_FIRE)&&(IsPlayerInAnyVehicle(playerid))&&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER)){
	    if(IsTowtruck(GetPlayerVehicleID(playerid))){
	        if(pStats[playerid][Prof] == MECANICO){
				new Float:playerX,Float:playerY,Float:playerZ;
				GetPlayerPos(playerid,playerX,playerY,playerZ);
				new Float:vX,Float:vY,Float:vZ;
				new Found=0;
				new vid=0;
				while((vid < AmountServerVehicles + AmountPlayerVehicles)&&(!Found))
				{
   					GetVehiclePos(vid,vX,vY,vZ);
   					if((floatabs(playerX-vX)<4.0)&&(floatabs(playerY-vY)<4.0)&&(floatabs(playerZ-vZ)<4.0)&&(vid!=GetPlayerVehicleID(playerid)))
				    {
   					    Found=1;
   					    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
				        {
   					        DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
				        }
				     	GetPlayerPos(playerid,MecRebI[playerid][MecPosX],MecRebI[playerid][MecPosY],MecRebI[playerid][MecPosZ]);
   					    AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
   					    SendClientMessage(playerid,COLOR_MECANICO,"Carro guinchado, para levar ele até o local de spawn siga o CP.");
   					    SetPlayerCheckpoint(playerid, vStats[vid][CarPosX], vStats[vid][CarPosY], vStats[vid][CarPosZ], 4.0);
		    			CheckpointStatus[playerid] = REBOCANDO;
				    }
				    vid++;
				}
				if (!Found)
   				{
				   	SendClientMessage(playerid,COLOR_GRAY,"Sem carro!");
			   	}
		    }
	    }
	}
	return 1;
}
stock CreateHotelFile()
{
	for(new h = 0; h < 5; h++)
	{
		if(!fexist(HotelFile(h)))
		{
	    	new File:hotelfile = fopen(HotelFile(h),io_write);
	    	fclose(hotelfile);
		}
	}
	writelog("Arquivos de hotéis criados...");
}
stock SaveHotelFile(){
	for(new h = 0; h < MAX_HOTEIS; h++){
    	if(!fexist(HotelFile(h))) CreateHotelFile();
    	new strsave[1024],str[128];
    	format(str,sizeof(str),"%d;",HotelLastP[h]);
    	strcat(strsave,str);
    	for(new i = 0; i < HotelLastP[h]; i++)
    	{
    	    format(str,sizeof(str),"%s;",PlayersInHotel[h][i]);
    	    strcat(strsave,str);
    	}
		new File:hotelfile = fopen(HotelFile(h),io_write);
		fwrite(hotelfile,strsave);
 		fclose(hotelfile);
	}
}
stock LoadHotelFile(){
    for(new h = 0; h < MAX_HOTEIS; h++){
        printf("Carregando o Hotel %d", h);
		new File:hotelfile = fopen(HotelFile(h),io_read),tmp[1024],index;
		fread(hotelfile,tmp,sizeof(tmp));
		HotelLastP[h] = strval(strtok(tmp,index,';'));
		for(new i = 0; i < HotelLastP[h]; i++){
		    set(PlayersInHotel[h][i],strtok(tmp,index,';'));
		}
		fclose(hotelfile);
	}
	print("Hoteis carregados");
}
stock ApplyPlayerInHotel(playerid){
	new bool:searched=false;
 	GetPlayerPos(playerid, pStats[playerid][SpawnPosX], pStats[playerid][SpawnPosY], pStats[playerid][SpawnPosZ]);
	GetPlayerFacingAngle(playerid, pStats[playerid][SpawnPosAng]);
	pStats[playerid][Hotel] = PlayerHotel[playerid];
    for(new h = 0; h < HotelLastP[pStats[playerid][Hotel]]; h++){
		if(compare("NONE",PlayersInHotel[pStats[playerid][Hotel]][h])){
		    set(PlayersInHotel[pStats[playerid][Hotel]][h],PlayerName(playerid));
		    searched=true;
		    break;
		}
	}
	if(!searched){
		set(PlayersInHotel[pStats[playerid][Hotel]][HotelLastP[pStats[playerid][Hotel]]],PlayerName(playerid));
		HotelLastP[pStats[playerid][Hotel]]++;
	}
}
stock RemovePlayerFromHotel(playerid){
    if(pStats[playerid][Hotel] != -1){
		for(new h = 0; h < HotelLastP[pStats[playerid][Hotel]]; h++){
			if(compare(PlayerName(playerid),PlayersInHotel[pStats[playerid][Hotel]][h])){
				set(PlayersInHotel[pStats[playerid][Hotel]][h],"NONE");
			}
		}
		pStats[playerid][Hotel] = -1;
	}
}


stock PayHotel(){
	for(new h = 0; h < MAX_HOTEIS; h++){
		for(new i = 0; i < HotelLastP[h]; i++){
		    if(!compare(PlayersInHotel[h][i],"NONE")){
		    	if(!IsStringAName(PlayersInHotel[h][i])){
		        	GiveValue(PlayersInHotel[h][i],"Banco",-200);
		    		GuardarMensagem(PlayersInHotel[h][i],"Foram retirados $200,00 dólares do seu banco pelas despesas do hotel!");
				}
				else{
				    SendClientMessage(IDName(PlayersInHotel[h][i]), COLOR_WHITE, "Foram retirados $200,00 dólares do seu banco pelas despesas do hotel!");
					pStats[IDName(PlayersInHotel[h][i])][Banco] -= 200;
				}
				AcrescentarLucro(15,200);
			}
		}
	}
}
stock CriarTextDraws(){
    Bemvindo1 = TextDrawCreate(320,130,"~b~Virtual ~r~L~w~i~r~f~w~e ~y~R~b~P~g~G");
	TextDrawColor(Bemvindo1, 0xFFF000FF);
	TextDrawAlignment(Bemvindo1,2);
	TextDrawFont(Bemvindo1,0);
	TextDrawLetterSize(Bemvindo1,2.2,4.8);

	Bemvindo2 = TextDrawCreate(320,190,"~w~ mais que um ~y~R~b~P~g~G~w~, UMA VIDA!");
	TextDrawColor(Bemvindo2, COLOR_BLUE);
	TextDrawAlignment(Bemvindo2,2);
	TextDrawFont(Bemvindo2,1);
	TextDrawLetterSize(Bemvindo2,0.8,1.7);

	Bemvindo3 = TextDrawCreate(320,230,"~w~Comandos principais: ~n~ ~n~ ~h~~y~/ajuda : Para obter ajuda ~n~ ~n~ /comandos : Ver os comandos do RPG ~n~ ~n~ /aprender : Para aprender como jogar no RPG ~n~ ~n~ /sistemas : Ver os sistemas do gamemode ~n~ ~n~ ~w~Para se registrar use /registrar [senha]");
	TextDrawColor(Bemvindo3, COLOR_WHITE);
	TextDrawAlignment(Bemvindo3,2);
	TextDrawFont(Bemvindo3,1);
	TextDrawLetterSize(Bemvindo3,0.5,1.1);

    Bemvindo4 = TextDrawCreate(320,230,"~w~Comandos principais: ~n~ ~n~ ~h~~y~/ajuda : Para obter ajuda ~n~ ~n~ /comandos : Ver os comandos do RPG ~n~ ~n~ /aprender : Para aprender como jogar no RPG ~n~ ~n~ /sistemas : Ver os sistemas do gamemode ~n~ ~n~ ~w~Para se logar use /logar [senha]");
	TextDrawColor(Bemvindo4, COLOR_WHITE);
	TextDrawAlignment(Bemvindo4,2);
	TextDrawFont(Bemvindo4,1);
	TextDrawLetterSize(Bemvindo4,0.5,1.1);

	TextVL = TextDrawCreate(10.0, 430.5,"~b~Virtual ~r~L~w~i~r~f~w~e ~y~R~b~P~g~G");
    TextDrawFont(TextVL,0);
    TextDrawLetterSize(TextVL,0.600000,1.299999);
    TextDrawColor(TextVL, COLOR_WHITE);
    TextDrawBackgroundColor(TextVL, 126);

    TextData[0] = TextDrawCreate(500.00,97.00," ");
	TextDrawAlignment(TextData[0],0);
	TextDrawFont(TextData[0],3);
	TextDrawLetterSize(TextData[0],0.500000,2.000000);
	TextDrawColor(TextData[0], COLOR_WHITE);
	TextDrawSetOutline(TextData[0],1);
	TextDrawSetProportional(TextData[0],1);
	TextDrawSetShadow(TextData[0],1);
	TextDrawBackgroundColor(TextData[0],0x000000ff);

    TextData[1] = TextDrawCreate(500.00,97.00," ");
	TextDrawAlignment(TextData[1],0);
	TextDrawFont(TextData[1],3);
	TextDrawLetterSize(TextData[1],0.500000,2.000000);
	TextDrawColor(TextData[1], COLOR_WHITE);
	TextDrawSetOutline(TextData[1],1);
	TextDrawSetProportional(TextData[1],1);
	TextDrawSetShadow(TextData[1],1);
	TextDrawBackgroundColor(TextData[1],0x000000ff);

    FlashAction = TextDrawCreate(0.0, 0.0, "_");
	TextDrawUseBox(FlashAction, true);
	TextDrawBoxColor(FlashAction, 0xFFFFFFFF);
	TextDrawSetShadow(FlashAction, 0);
	TextDrawLetterSize(FlashAction,1.000000,100.000000);
	TextDrawTextSize(FlashAction, 645.0, 480.0);

	DeathAction = TextDrawCreate(0.0, 0.0, "_");
	TextDrawUseBox(DeathAction, true);
	TextDrawBoxColor(DeathAction, 0xFF000000);
	TextDrawSetShadow(DeathAction, 0);
	TextDrawLetterSize(DeathAction,1.000000,100.000000);
	TextDrawTextSize(DeathAction, 645.0, 480.0);

	DeathText = TextDrawCreate(246, 142, "Morrendo...");
	TextDrawLetterSize(DeathText, 1.5, 3.0);
	TextDrawBackgroundColor(DeathText, 0x000000FF);
	TextDrawColor(DeathText, COLOR_WHITE);
	TextDrawFont(DeathText, 0);
	TextDrawAlignment(DeathText, 0);
	TextDrawSetProportional(DeathText, 1);

	BarFome[0] = TextDrawCreate(545.0, 415.0, "~n~ ~n~ ~n~");
	TextDrawUseBox(BarFome[0], true);
	TextDrawBoxColor(BarFome[0], COLOR_BLACK);
    TextDrawSetShadow(BarFome[0], 0);
    TextDrawTextSize(BarFome[0], 645.0, 480.0);

	for(new f = 1; f < sizeof BarFome; f++)
	{
	    new Pcts[sizeof BarFome - 1] = { 0, 5, 15, 25, 30, 40, 50, 55, 65, 75, 80, 90, 100 } ;
		new string[128];
		format(string, sizeof string, "~y~Fome:~w~%d%", Pcts[f - 1]);
	    TextFome[f - 1] = TextDrawCreate(545.0, 415.0, string);
	    TextDrawAlignment(TextFome[f - 1], 0);
		TextDrawFont(TextFome[f - 1], 1);
		TextDrawLetterSize(TextFome[f - 1], 0.5, 1.2);
		TextDrawColor(TextFome[f - 1], COLOR_WHITE);
		TextDrawSetOutline(TextFome[f - 1], 1);
		TextDrawSetProportional(TextFome[f - 1], 1);
		TextDrawSetShadow(TextFome[f - 1], 1);

		BarFome[f] = TextDrawCreate(550.0, 435.5, " ");
		TextDrawUseBox(BarFome[f], true);
		TextDrawBoxColor(BarFome[f], COLOR_PALHA);
    	TextDrawSetShadow(BarFome[f], 0);
    	TextDrawTextSize(BarFome[f], 550.0 + ((f - 1) * 5.0), 0);
	}

	for(new i = 0; i < MAX_SLOTS; i++)
	{
	    Speedo[i] = TextDrawCreate(320.00, 380.00, " ");
		TextDrawSetOutline(Speedo[i], 0);
		TextDrawFont(Speedo[i], 3);
		TextDrawSetProportional(Speedo[i], 2);
		TextDrawAlignment(Speedo[i], 2);

		TextArea[i] = TextDrawCreate(21, 125, " ");
		TextDrawAlignment(TextArea[i], 0);
		TextDrawFont(TextArea[i], 1);
		TextDrawLetterSize(TextArea[i], 0.5 ,3);
		TextDrawSetProportional(TextArea[i], 1);

		TextHouse[i] = TextDrawCreate(23, 213, " ");
		TextDrawTextSize(TextHouse[i], 140.0, 0.0);
		TextDrawAlignment(TextHouse[i], 0);
		TextDrawFont(TextHouse[i], 3);
		TextDrawLetterSize(TextHouse[i], 0.5, 1.5);
		TextDrawColor(TextHouse[i], COLOR_WHITE);
		TextDrawSetProportional(TextHouse[i], 1);
		TextDrawSetShadow(TextHouse[i], 1);
		TextDrawUseBox(TextHouse[i], true);
		TextDrawBoxColor(TextHouse[i], 0x000000AA);
		
		TDDriveThru[i] = TextDrawCreate(190.000000,338.000000," ");
		TextDrawAlignment(TDDriveThru[i],0);
		TextDrawBackgroundColor(TDDriveThru[i],0x000000ff);
		TextDrawFont(TDDriveThru[i],3);
		TextDrawLetterSize(TDDriveThru[i],0.299999,1.900000);
		TextDrawColor(TDDriveThru[i],0xffffffff);
		TextDrawSetOutline(TDDriveThru[i],1);
		TextDrawSetProportional(TDDriveThru[i],1);
		TextDrawSetShadow(TDDriveThru[i],6);
	}

	writelog("Criando Text Draws de jogo... Concluído!");
}

public OnGameModeInit()
{
	AgendaTestes = 1;
	EnableZoneNames(0);
	ShowPlayerMarkers(0);
	EnableStuntBonusForAll(0);
	AllowInteriorWeapons(1);
	DisableInteriorEnterExits();
	new Segundo, Minuto, Hora, Dia, Mes, Ano, msg[128];
	gettime(Hora,Minuto,Segundo);
	getdate(Ano,Mes,Dia);
	format(msg,sizeof(msg),"Gamemode iniciado em %s/%s/%s às %s:%s:%s.",ApplyZero(Dia),ApplyZero(Mes),ApplyZero(Ano),ApplyZero(Hora),ApplyZero(Minuto),ApplyZero(Segundo));
	writelog(msg);
	writelog("Carregando Reload Virtual Life RPG...");
	SetGameModeText("Virtual Life RPG");
	SendRconCommand("hostname [BRASIL] Vida Virtual® RPG/RP [Versão: 0.2X]");
	SendRconCommand("mapname Los Santos");
	SendRconCommand("loadfs adminspec");
	CriarTextDraws();

//|------------------------------------[ GANGZONE ]--------------------------------------------------
    PescaArea = GangZoneCreate(396.2206,-2490.5803,813.0812,-2063.8291);
	InstrutorArea = GangZoneCreate(1729.3325,-2076.8833,1828.3176,-2019.1273);
    ProstitutaArea = GangZoneCreate(2391.9038,-1245.3613,2440.9629,-1209.1268);
    TaxiArea = GangZoneCreate(1612.3163,-1139.9810,1687.0649,-1040.5436);
    DesmancheArea = GangZoneCreate(2521.7185,-1720.9760,2535.7808,-1699.4797);
    SorveteriaArea = GangZoneCreate(1560.3988,-1897.6273,1576.5190,-1882.6194);
    PoliciaLadraoArea = GangZoneCreate(-988.9893,-2491.4412,-266.9886,-1845.056);
	EquipeAzul = GangZoneCreate(2143.5068,620.0174,2279.5994,758.1225);
	EquipeLaranja = GangZoneCreate(2293.1055,621.5815,2424.1060,772.3373);
//|------------------------------------[ VEÍCULOS ]--------------------------------------------------
	AddPlayerClass(0, -1958.5107, 293.6747, 35.4688, 269.1425, 0, 0, 0, 0, 0, 0);
	//Veículos de profissões
	AddServerVehicle(453,787.9286,-1901.9200,-0.2205,181.7859,1,1,1500);
	AddServerVehicle(453,776.9243,-1897.2621,-0.3764,173.2890,1,1,1500);
	AddServerVehicle(453,728.8290,-1494.8489,-0.4036,181.4149,1,1,1500);
	AddServerVehicle(453,718.1939,-1495.2104,-0.2883,179.7184,1,1,1500);
	AddServerVehicle(453,737.3955,-1495.9012,-0.3628,180.6319,1,1,1500);
	AddServerVehicle(453,737.5024,-1507.3966,-0.3918,176.8899,1,1,1500);
	AddServerVehicle(453,728.1387,-1507.5599,-0.4602,176.0427,1,1,1500);
	AddServerVehicle(453,721.8361,-1503.4421,-0.2961,182.5456,1,1,1500);
	AddServerVehicle(435,2818.1541,899.8467,10.1905,1.1385,1,1,1500);
	AddServerVehicle(435,2827.6094,899.8937,10.1944,0.9191,1,1,1500);
	AddServerVehicle(584,2834.4263,900.2715,10.4849,0.4325,1,1,1500);
	AddServerVehicle(584,2844.7886,901.2093,10.4854,359.5189,1,1,1500);
	AddServerVehicle(435,2837.0222,1009.7594,10.4771,180.3664,1,1,1500);
	AddServerVehicle(452,-2553.9397,1415.3110,-0.6195,11.6278,0,3,1500);
	AddServerVehicle(452,-2537.6506,1415.0796,-0.5574,346.1778,0,6,1500);
	Truck[0] = AddServerVehicle(515,2872.1931,938.1169,10.4771,88.7810,3,3,1500);
	Truck[1] = AddServerVehicle(515,2871.7771,925.1982,10.4771,89.0139,1,1,1500);
	Truck[2] = AddServerVehicle(515,2871.4241,914.1773,10.4771,91.5384,7,7,1500);
	Truck[3] = AddServerVehicle(515,2871.9507,902.6901,10.4771,88.6844,16,16,1500);
	Truck[4] = AddServerVehicle(414,2842.8894,959.5621,10.4771,94.2643,-1,-1,1500);
	Truck[5] = AddServerVehicle(414,2841.1147,953.3066,10.4771,91.2629,-1,-1,1500);
	Farm[0] = AddServerVehicle(531,-1067.3071,-1146.1510,129.2188,263.1791,0,0,1500);
	Farm[1] = AddServerVehicle(531,-1042.8000,-1113.4921,129.2188,172.3349,0,0,1500);
	Farm[2] = AddServerVehicle(532,-1180.1852,-1064.3158,130.1944,11.4957,1,1,1500);
	Farm[3] = AddServerVehicle(532,-1173.9580,-1063.5544,130.1994,9.6866,1,1,1500);
	Farm[4] = AddServerVehicle(532,-1169.0393,-1062.9961,130.1862,7.0070,1,1,1500);
	Security[0] = AddServerVehicle(428,2587.1069,1968.5189,10.3600,359.4350,2,125,1500);
	Security[1] = AddServerVehicle(428,2578.8755,1979.8069,10.3595,269.6775,2,125,1500);
	Security[2] = AddServerVehicle(428,2578.1614,1991.9865,10.3634,268.5700,2,125,1500);
	Security[3] = AddServerVehicle(428,2766.5608,1271.8203,10.4771,92.0157,2,125,1500);
	Security[4] = AddServerVehicle(428,2594.1228,1978.9269,10.9483,272.0790,2,125,1500);
	Security[5] = AddServerVehicle(428,2579.0071,1966.7739,10.9762,1.5321,2,125,1500);
	Security[6] = AddServerVehicle(428,2594.0017,1970.5582,10.9746,93.1940,2,125,1500);
    Bus[0] = AddServerVehicle(431,1804.2316,-1906.8671,13.5048,180.1803,106,106,1500);
	Bus[1] = AddServerVehicle(431,1804.2971,-1927.5952,13.4861,180.1802,106,106,1500);
	Bus[2] = AddServerVehicle(431,1791.6727,-1933.0934,13.4891,89.1479,106,106,1500);
	Bus[3] = AddServerVehicle(431,1776.7518,-1925.1017,13.4885,0.3347,106,106,1500);
	Bus[4] = AddServerVehicle(431,1776.7664,-1896.3489,13.4953,0.0246,106,106,1500);
	Police[0] = AddServerVehicle(596,1600.2476,-1692.1685,5.6125,90.4433,0,1,1500);
	Police[1] = AddServerVehicle(596,1600.6448,-1684.0197,5.6112,90.1220,0,1,1500);
	Police[2] = AddServerVehicle(596,1587.7020,-1709.8081,5.6095,179.3531,0,1,1500);
	Police[3] = AddServerVehicle(497,1557.2480,-1609.4486,13.5194,267.8856,1,0,1500);
	Police[4] = AddServerVehicle(599,1570.3877,-1709.3484,6.0758,180.6934,1,0,1500);
	Police[5] = AddServerVehicle(599,1574.4928,-1710.0585,6.0792,179.2536,1,0,1500);
	Police[6] = AddServerVehicle(523,1586.2186,-1667.6611,5.4763,268.5813,0,0,1500);
	Police[7] = AddServerVehicle(523,1585.5693,-1671.7798,5.4624,268.4720,0,0,1500);
	Police[8] = AddServerVehicle(490,1544.8265,-1654.9677,6.0182,270.0331,0,0,1500);
	Police[9] = AddServerVehicle(490,1544.9852,-1651.0159,6.0209,269.8402,0,0,1500);
	Police[10] = AddServerVehicle(601,1528.9193,-1677.4371,5.6495,94.8572,0,0,1500);
    Police[11] = AddServerVehicle(427,1530.4825,-1644.2167,6.0226,0.2721,0,1,1500);
	Police[12] = AddServerVehicle(427,1534.8368,-1644.4755,6.0226,0.2481,0,1,1500);
	Stretch[0] = AddServerVehicle(409,1229.5652,-1835.9869,13.1877,90.0444,0,0,1500);
	Stretch[1] = AddServerVehicle(409,1252.0458,-1835.9653,13.1880,90.0540,0,0,1500);
	Stretch[2] = AddServerVehicle(409,1240.7240,-1835.9830,13.1878,90.1903,0,0,1500);
	Stretch[3] = AddServerVehicle(409,1907.5162,2085.2627,10.6202,1.6192,0,0,1500);
	Stretch[4] = AddServerVehicle(409,1700.1578,1481.0664,10.5723,170.1613,0,0,1500);
	SANNews[0] = AddServerVehicle(582,741.8798,-1337.0168,13.1006,272.7129,28,1,1500);
	SANNews[1] = AddServerVehicle(582,760.6467,-1338.8859,13.1004,178.7378,28,1,1500);
	SANNews[2] = AddServerVehicle(582,784.5256,-1334.7256,13.5973,358.9793,28,1,1500);
	SANNews[3] = AddServerVehicle(582,784.6977,-1380.4647,13.7257,0.9470,28,1,1500);
	SANNews[4] = AddServerVehicle(488,779.1324,-1355.3369,13.7157,88.6369,28,1,1500);
	SANNews[5] = AddServerVehicle(488,769.6691,-1374.2095,13.7563,271.7348,28,1,1500);
	MotoPizza[0] = AddServerVehicle(448,2096.5664,-1796.2372,12.9851,90.3936,1,1,1500);
	MotoPizza[1] = AddServerVehicle(448,2096.5557,-1799.8225,12.9788,89.8821,1,1,1500);
	MotoPizza[2] = AddServerVehicle(448,2096.6338,-1793.0216,12.9879,90.7173,1,1,1500);
	MotoPizza[3] = AddServerVehicle(448,2096.7373,-1817.1201,12.9822,89.8361,1,1,1500);
    MotoPizza[4] = AddServerVehicle(448,2096.7070,-1813.9661,12.9825,92.5864,1,1,1500);
	MotoPizza[5] = AddServerVehicle(448,2096.8818,-1820.5515,12.9829,89.8825,1,1,1500);
	MotoPizza[6] = AddServerVehicle(448,2093.7756,-1814.2053,12.9821,92.5869,1,1,1500);
	MotoPizza[7] = AddServerVehicle(448,2093.8032,-1817.2523,12.9823,90.3131,1,1,1500);
	MotoPizza[8] = AddServerVehicle(448,2093.8174,-1820.6552,12.9820,89.9239,1,1,1500);
	MotoPizza[9] = AddServerVehicle(448,2093.9656,-1799.9247,12.9819,89.8867,1,1,1500);
	MotoPizza[10] = AddServerVehicle(448,2093.8682,-1796.3655,12.9822,90.4425,1,1,1500);
	MotoPizza[11] = AddServerVehicle(448,2093.9224,-1793.1637,12.9853,90.7428,1,1,1500);
	Dumper[0] = AddServerVehicle(406,831.4123,838.7061,11.8114,10.7364,27,27,1500);
	Dumper[1] = AddServerVehicle(406,825.0017,835.9022,11.3056,28.6806,27,27,1500);
	Dumper[2] = AddServerVehicle(406,836.9363,867.3430,14.5646,292.2255,27,27,1500);
	Dumper[3] = AddServerVehicle(406,806.7059,861.4778,13.4932,203.4141,27,27,1500);
	Trashmaster[0] = AddServerVehicle(408,2159.3633,-1971.4208,14.0973,269.7029,1,4,1500);
	Trashmaster[1] = AddServerVehicle(408,2146.1206,-1971.5450,14.0976,270.3433,1,4,1500);
	Trashmaster[2] = AddServerVehicle(408,2192.3413,-1993.2520,14.0895,182.1334,1,4,1500);
	Trashmaster[3] = AddServerVehicle(408,2135.5864,-1993.6338,14.0941,343.7899,1,4,1500);
	Guincho[0] = AddServerVehicle(525,2066.2373,-1880.1583,13.1308,2.9639,1,1,1500);
	Guincho[1] = AddServerVehicle(525,2059.7856,-1880.6703,13.1225,177.3285,1,1,1500);
	Guincho[2] = AddServerVehicle(525,2052.1123,-1879.9712,13.4226,180.2449,1,1,1500);
	Guincho[3] = AddServerVehicle(525,2068.0618,-1864.7971,13.4246,270.0902,1,1,1500);
	Ambulancia[0] = AddServerVehicle(416,1147.2010,-1296.7073,13.8054,0.7077,3,1,1500);
	Ambulancia[1] = AddServerVehicle(416,2036.2456,-1417.2668,17.1429,359.1338,3,1,1500);
	Ambulancia[2] = AddServerVehicle(416,1180.0553,-1308.9070,13.8667,270.2787,3,1,1500);
	Ambulancia[3] = AddServerVehicle(416,1179.3953,-1338.5397,13.9476,271.7199,3,1,1500);
	Ambulancia[4] = AddServerVehicle(416,2036.1782,-1425.3702,17.1395,1.1178,3,1,1500);
	Ambulancia[5] = AddServerVehicle(416,1147.1698,-1305.0948,13.8208,1.4130,3,1,1500);
	SequestroCar[0] = AddServerVehicle(566,2768.6213,-1606.8176,10.6955,88.4993,0,0,1500);
	SequestroCar[1] = AddServerVehicle(566,2769.1960,-1615.7401,10.6964,269.2319,0,0,1500);
	SequestroCar[2] = AddServerVehicle(566,2771.8093,-1624.0547,10.7024,176.9927,0,0,1500);
	SequestroCar[3] = AddServerVehicle(566,2780.0442,-1624.5670,10.6946,353.0491,0,0,1500);
	SequestroCar[4] = AddServerVehicle(566,2792.1624,-1622.1677,10.6939,255.7986,0,0,1500);
	SequestroCar[5] = AddServerVehicle(566,2788.4316,-1601.7998,10.6946,273.1552,0,0,1500);
	Taxi[0] = AddServerVehicle(420,1675.5963,-1120.2175,23.6846,268.4628,6,1,1500);
	Taxi[1] = AddServerVehicle(420,1617.1656,-1127.9691,23.6839,91.0981,6,1,1500);
	Taxi[2] = AddServerVehicle(420,1645.3558,-1047.4185,23.6766,179.2427,6,1,1500);
	Taxi[3] = AddServerVehicle(420,1658.4209,-1093.4956,23.6854,89.4926,6,1,1500);
	Taxi[4] = AddServerVehicle(420,1629.9507,-1102.9823,23.6840,89.6325,6,1,1500);
	Taxi[5] = AddServerVehicle(420,1649.7689,-1037.5626,23.6773,179.5684,6,1,1500);
	Taxi[6] = AddServerVehicle(420,-1988.3275,139.8486,27.1049,359.4066,6,1,1500);
	Taxi[7] = AddServerVehicle(420,1676.2742,-1102.0773,23.6844,271.4583,6,1,1500);
	MotoTaxi[0] = AddServerVehicle(586,1620.1650,-1085.0001,23.4775,269.8010,6,6,1500);
	MotoTaxi[1] = AddServerVehicle(586,1620.8981,-1089.1842,23.4721,272.8326,6,6,1500);
	MotoTaxi[2] = AddServerVehicle(586,1620.6460,-1093.6416,23.4647,271.0250,6,6,1500);
	MotoTaxi[3] = AddServerVehicle(586,1628.3749,-1085.3412,23.4262,90.6288,6,6,1500);
	MotoTaxi[4] = AddServerVehicle(586,1628.2888,-1088.8029,23.4265,96.7627,6,6,1500);
	MotoTaxi[5] = AddServerVehicle(586,1628.0038,-1093.7628,23.4344,97.2952,6,6,1500);
	Piloto[0] = AddServerVehicle(519,1564.3187,-2455.8386,13.1393,176.7860,0,0,1500);
	Piloto[1] = AddServerVehicle(593,1821.0220,-2622.9812,13.1316,4.2006,3,1,1500);
	Piloto[2] = AddServerVehicle(487,1914.8511,-2247.8777,13.7238,184.6557,1,3,1500);
	Piloto[3] = AddServerVehicle(519,1692.2711,-2451.8022,14.4767,182.7362,0,0,1500);
	AdvogadoCar[0] = AddServerVehicle(558,1736.0695,-1323.5487,13.2373,358.3241,13,13,1500);
	AdvogadoCar[1] = AddServerVehicle(562,1771.7740,-1303.7465,13.3406,179.9932,3,3,1500);
	JuizCar = AddServerVehicle(445,1455.9663,-1752.0988,13.4219,0.2017,0,0,1500);
	CorretorCar = AddServerVehicle(426,932.9990,-1724.7278,13.3532,89.4614,0,0,1500);
	ProstitutaCar = AddServerVehicle(480,2425.6162,-1224.2859,25.0405,176.1279,126,126,1500);
	//Veículos da Auto-Escola
	CarroAuto[0] = AddServerVehicle(410,1778.4686,-2076.3037,13.2469,90.6574,3,3,1500);
	CarroAuto[1] = AddServerVehicle(410,1766.9196,-2076.3057,13.2610,90.4201,3,3,1500);
	CarroAuto[2] = AddServerVehicle(410,1769.3566,-2022.6123,13.7949,271.5938,3,3,1500);
	CarroAuto[3] = AddServerVehicle(410,1784.2090,-2041.7047,13.1850,270.2375,3,3,1500);
	CarroAuto[4] = AddServerVehicle(521,1773.0260,-2061.4858,13.1724,0.2121,3,3,1500);
	CarroAuto[5] = AddServerVehicle(521,1765.9749,-2041.0818,13.1276,270.1337,3,3,1500);
	CarroAuto[6] = AddServerVehicle(410,1751.5083,-2056.9053,13.4299,179.9104,3,3,1500);
	CarroAuto[7] = AddServerVehicle(410,1802.9364,-2064.8848,13.2192,179.6280,3,3,1500);
	CarroAuto[8] = AddServerVehicle(410,1798.5068,-2064.8064,13.2257,179.8395,3,3,1500);
    //Veículos da Locadora
	CarroAluguel[0] = AddServerVehicle(411,200.1081,-1440.4156,12.8115,318.7880,6,6,1500);
	CarroAluguel[1] = AddServerVehicle(451,204.5762,-1444.3474,12.8010,139.4082,16,16,1500);
	CarroAluguel[2] = AddServerVehicle(560,218.3302,-1429.6761,12.9740,132.8096,3,3,1500);
	CarroAluguel[3] = AddServerVehicle(475,221.7918,-1432.9316,13.0922,314.6425,1,1,1500);
	CarroAluguel[4] = AddServerVehicle(603,195.6884,-1436.2327,12.9144,140.2273,0,0,1500);
	CarroAluguel[5] = AddServerVehicle(415,215.5169,-1428.1981,13.0317,314.4549,108,108,1500);
	CarroAluguel[6] = AddServerVehicle(468,198.1436,-1438.5488,12.6583,289.7877,6,6,1500);
	CarroAluguel[7] = AddServerVehicle(522,202.5581,-1442.4858,12.6605,108.6459,0,16,1500);
    //Veículos de Contrabando
	CarroContrabando[0] = AddServerVehicle(492,2173.5430,-2265.4812,13.1428,41.9938,16,16,1500);
	CarroContrabando[1] = AddServerVehicle(445,2165.9097,-2273.1045,13.2358,39.6703,0,0,1500);
	CarroContrabando[2] = AddServerVehicle(415,2206.7341,-2289.6543,14.5348,25.1289,0,0,1500);
	CarroContrabando[3] = AddServerVehicle(560,2165.2048,-2307.9785,13.2520,156.6602,0,0,1500);
	CarroContrabando[4] = AddServerVehicle(411,2192.1260,-2247.6174,13.3889,44.0117,0,0,1500);
    //Veículos de Stunt
	BikeEvent[0] = AddServerVehicle(522,-1482.1729,1653.9805,1052.5313,174.9476,0,0,1500);
	BikeEvent[1] = AddServerVehicle(522,-1487.0488,1651.6216,1052.5313,203.0029,2,2,1500);
	BikeEvent[2] = AddServerVehicle(522,-1490.9745,1651.3367,1052.5313,188.5894,3,3,1500);
	BikeEvent[3] = AddServerVehicle(522,-1494.0836,1651.5405,1052.5313,185.1427,10,10,1500);
	BikeEvent[4] = AddServerVehicle(522,-1496.2614,1651.1521,1052.5313,185.1427,1,1,1500);
	BikeEvent[5] = AddServerVehicle(522,-1495.4508,1653.9109,1052.5313,185.1427,12,12,1500);
	BikeEvent[6] = AddServerVehicle(522,-1490.8447,1653.5055,1052.5313,185.1427,25,25,1500);
	BikeEvent[7] = AddServerVehicle(522,-1488.1433,1653.2740,1052.5313,185.1427,9,9,1500);
    //Veículos do Derby
	Derby[0] = AddServerVehicle(504,-1362.8434,1056.5216,1038.2021,177.4065,-1,-1,1500);
	Derby[1] = AddServerVehicle(504,-1329.5347,1048.7799,1038.0103,152.6775,-1,-1,1500);
	Derby[2] = AddServerVehicle(504,-1295.5067,1025.8018,1037.5696,129.9235,-1,-1,1500);
	Derby[3] = AddServerVehicle(504,-1413.5791,1056.1185,1038.2798,182.0372,-1,-1,1500);
	Derby[4] = AddServerVehicle(504,-1432.6188,1055.8660,1038.3093,185.3242,-1,-1,1500);
	Derby[5] = AddServerVehicle(504,-1449.7091,1052.7480,1038.2817,194.6754,-1,-1,1500);
	Derby[6] = AddServerVehicle(504,-1460.4928,1049.3802,1038.2437,200.5020,-1,-1,1500);
	Derby[7] = AddServerVehicle(504,-1406.2797,1055.9629,1038.2645,177.2762,-1,-1,1500);
	Derby[8] = AddServerVehicle(504,-1387.2533,1056.6328,1038.2452,178.5495,-1,-1,1500);
	Derby[9] = AddServerVehicle(504,-1383.2393,1056.6461,1038.2389,178.6510,-1,-1,1500);
    //Veículos das Histórias
	TaxiRick1 = AddServerVehicle(420,-2211.6946,574.9948,34.9520,271.2173,6,1,1500);
	TaxiRick2 = AddServerVehicle(420,1391.9890,1903.2976,10.5216,0.3253,6,1,1500);
	TaxiRick3 = AddServerVehicle(420,1484.9272,1886.7570,10.4526,180.6453,6,1,1500);
	TaxiRick4 = AddServerVehicle(420,1710.5759,1450.3214,10.4879,163.0813,6,1,1500);
	TaxiPelado1 = AddServerVehicle(420,-1988.3834,152.2558,27.2661,1.1573,6,1,1500);
	TaxiPelado2 = AddServerVehicle(420,-1414.8718,-304.9769,13.5549,217.9435,6,1,1500);
	CaminhaoPelado1 = AddServerVehicle(515,-2170.0479,-2644.8833,48.8271,68.7981,0,0,1500);
	CaminhaoPelado2 = AddServerVehicle(515,-1870.4835,180.0893,37.8425,353.8399,0,0,1500);
	CarroPoste = AddServerVehicle(552,2674.9082,-1968.9242,13.1448,273.4729,1,1,1500);
	CarroCimento = AddServerVehicle(524,2413.6775,-2470.0376,13.1957,313.8671,1,1,1500);
	CarroCemiterio = AddServerVehicle(442,940.2975,-1087.1194,23.8630,88.1389,1,1,1500);

	new randmodel;
	for(new veh=0; veh < sizeof CarrosVendaPos; veh++){
	    randmodel = random(sizeof CarrosVendaModelos);
		CarroVenda[veh] = CreateVehicle(CarrosVendaModelos[randmodel],CarrosVendaPos[veh][0],CarrosVendaPos[veh][1],CarrosVendaPos[veh][2],CarrosVendaPos[veh][3],-1,-1,1500);
	}
	for(new r = 0; r < 24; r++){
	    Reboque[r] = CreateVehicle(525,INVALID_POS_X,INVALID_POS_Y,INVALID_POS_Z,0.0,1,5,1500);
	}
	for(new c = 0; c < 20; c++){
	    CarrosCTC[c] = CreateVehicle(415,INVALID_POS_X,INVALID_POS_Y,INVALID_POS_Z,0.0,1,5,1500);
	}

	new lastvehid = CreateVehicle(400,INVALID_POS_X,INVALID_POS_Y,INVALID_POS_Z,0.0,-1,-1,1500);
	AmountServerVehicles = lastvehid;
	DestroyVehicle(lastvehid);

	for(new i = 0; i < sizeof BikeEvent; i++)
	{
	    LinkVehicleToInterior(BikeEvent[i], 14);
	}

	for(new i = 0; i < sizeof Derby; i++)
	{
		LinkVehicleToInterior(Derby[i], 15);
	}

    SetCertainVehiclesUnlimitedGas();
	CreateHotelFile();
	LoadHotelFile();
	CreatePropertiesFiles();

//|------------------------------------[ PICKUPS ]----------------------------------------------------
	for(new pickups=0;pickups<sizeof(Pickups);pickups++)
	{
		AddStaticPickup(Pickups[pickups][pickupmodel],Pickups[pickups][pickuptype],Pickups[pickups][pickupposx],Pickups[pickups][pickupposy],Pickups[pickups][pickupposz]);
	}

	for(new z = 0; z < sizeof zones; z++)
	{
	    GZ[z] = GangZoneCreate(zones[z][zoneminx],zones[z][zoneminy],zones[z][zonemaxx],zones[z][zonemaxy]);
	}
	//LUNCHS
	mLunchs = CreateMenu("Lanches",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(mLunchs)){
	    SetMenuColumnHeader(mLunchs,0,"Lanche");
	    SetMenuColumnHeader(mLunchs,1,"Preco");
	    AddMenuItem(mLunchs,0,"X-Salada");
	    AddMenuItem(mLunchs,1,"$30");
	    AddMenuItem(mLunchs,0,"X-Burger");
	    AddMenuItem(mLunchs,1,"$40");
	    AddMenuItem(mLunchs,0,"X-Bacon");
	    AddMenuItem(mLunchs,1,"$40");
	    AddMenuItem(mLunchs,0,"X-Frango");
	    AddMenuItem(mLunchs,1,"$30");
	    AddMenuItem(mLunchs,0,"X-Tudo");
	    AddMenuItem(mLunchs,1,"$50");
	    AddMenuItem(mLunchs,0,"Cachorro quente");
	    AddMenuItem(mLunchs,1,"$50");
	    AddMenuItem(mLunchs,0,"Sair");
	}

	//Drogas Morro
	Becks = CreateMenu("Drogas",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(Becks)){
		SetMenuColumnHeader(Becks,0,"Droga");
 		SetMenuColumnHeader(Becks,1,"Preo");
 		AddMenuItem(Becks,0,"Maconha");
 		AddMenuItem(Becks,1,"$150");
  		AddMenuItem(Becks,0,"Cocaina");
 		AddMenuItem(Becks,1,"$250");
 		AddMenuItem(Becks,0,"Heroina");
 		AddMenuItem(Becks,1,"$300");
	}
	//Outros na loja 24/7
	Outros = CreateMenu("Outros",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(Outros)){
		SetMenuColumnHeader(Outros,0,"Item");
 		SetMenuColumnHeader(Outros,1,"Preo");
 		AddMenuItem(Outros,0,"Camisinha");
 		AddMenuItem(Outros,1,"$50");
  		AddMenuItem(Outros,0,"Sanduiche natural");
 		AddMenuItem(Outros,1,"$50");
  		AddMenuItem(Outros,0,"Faca");
 		AddMenuItem(Outros,1,"$300");
 		AddMenuItem(Outros,0,"Cartao telefonico");
 		AddMenuItem(Outros,1,"$25 por credito");
	}
	//Créditos para cartões telefonicos
	CreditosCartao = CreateMenu("Outros",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(CreditosCartao)){
	    SetMenuColumnHeader(CreditosCartao,0,"Creditos");
 		SetMenuColumnHeader(CreditosCartao,1,"Preo");
 		AddMenuItem(CreditosCartao,0,"1");
 		AddMenuItem(CreditosCartao,1,"$25");
 		AddMenuItem(CreditosCartao,0,"5");
 		AddMenuItem(CreditosCartao,1,"$125");
 		AddMenuItem(CreditosCartao,0,"10");
 		AddMenuItem(CreditosCartao,1,"$250");
 		AddMenuItem(CreditosCartao,0,"20");
 		AddMenuItem(CreditosCartao,1,"$500");
	}
	//Donuts
	mDonuts = CreateMenu("Donuts",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(mDonuts))
	{
	    SetMenuColumnHeader(mDonuts,0,"Sabor");
 		SetMenuColumnHeader(mDonuts,1,"Preo");
 		AddMenuItem(mDonuts,0,"Chocolate");
 		AddMenuItem(mDonuts,1,"$60");
 		AddMenuItem(mDonuts,0,"Morango");
 		AddMenuItem(mDonuts,1,"$70");
 		AddMenuItem(mDonuts,0,"Creme");
 		AddMenuItem(mDonuts,1,"$50");
 		AddMenuItem(mDonuts,0,"Brigadeiro");
 		AddMenuItem(mDonuts,1,"$70");
 		AddMenuItem(mDonuts,0,"Castanha c/ chocolate");
 		AddMenuItem(mDonuts,1,"$70");
 		AddMenuItem(mDonuts,0,"Glaceado");
 		AddMenuItem(mDonuts,1,"$60");
 		AddMenuItem(mDonuts,0,"Creme de baunilha");
 		AddMenuItem(mDonuts,1,"$60");
 		AddMenuItem(mDonuts,0,"Baunilha c/ nozes");
 		AddMenuItem(mDonuts,1,"$70");
 		AddMenuItem(mDonuts,0,"Banana c/ canela");
 		AddMenuItem(mDonuts,1,"$70");
 		AddMenuItem(mDonuts,0,"Sair");
	}
	//Burger
    BurgerShot = CreateMenu("Burger Shot", 2, 30.0,140.0,220.0,0.0);
	if(IsValidMenu(BurgerShot)){
		AddMenuItem(BurgerShot, 0, "CheeseBurger");
		AddMenuItem(BurgerShot, 1, "$22");
		AddMenuItem(BurgerShot, 0, "Double Cheese");
		AddMenuItem(BurgerShot, 1, "$30");
		AddMenuItem(BurgerShot, 0, "BigMac");
		AddMenuItem(BurgerShot, 1, "$44");
		AddMenuItem(BurgerShot, 0, "McNifico Bacon");
		AddMenuItem(BurgerShot, 1, "$38");
		AddMenuItem(BurgerShot, 0, "Staker Triplo");
		AddMenuItem(BurgerShot, 1, "$50");
		AddMenuItem(BurgerShot, 0, "Sair");
	}
	//Cluckin
    CluckinBell = CreateMenu("Cluckin' Bell", 2, 30.0,140.0,220.0,0.0);
	if(IsValidMenu(BurgerShot)){
		AddMenuItem(CluckinBell, 0, "Palitos de Frango");
		AddMenuItem(CluckinBell, 1, "$33");
		AddMenuItem(CluckinBell, 0, "Coxas de Frango");
		AddMenuItem(CluckinBell, 1, "$40");
		AddMenuItem(CluckinBell, 0, "Sanduíche de Frango");
		AddMenuItem(CluckinBell, 1, "$35");
		AddMenuItem(CluckinBell, 0, "Salada de Frango");
		AddMenuItem(CluckinBell, 1, "$19");
		AddMenuItem(CluckinBell, 0, "Sair");
	}
	//Seguros
	Seguros = CreateMenu("Seguros",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(Seguros)){
	    SetMenuColumnHeader(Seguros,0,"Seguro");
 		SetMenuColumnHeader(Seguros,1,"Preo");
 		AddMenuItem(Seguros,0,"Vida");
 		AddMenuItem(Seguros,1,"$1000");
 		AddMenuItem(Seguros,0,"Veiculo");
 		AddMenuItem(Seguros,1,"$3000");
 		AddMenuItem(Seguros,0,"Imovel");
 		AddMenuItem(Seguros,1,"$2000");
 		AddMenuItem(Seguros,0,"Sair");
	}
	//Casas
	CasaOpc = CreateMenu("Casa",1,30.0,140.0,220.0,0.0);
	if(IsValidMenu(CasaOpc)){
	    SetMenuColumnHeader(CasaOpc,0,"Selecione uma opao");
		AddMenuItem(CasaOpc,0,"Nascer nesta casa");
		AddMenuItem(CasaOpc,0,"Colocar sua casa a venda");
		AddMenuItem(CasaOpc,0,"Colocar sua casa em locaao");
		AddMenuItem(CasaOpc,0,"Cancelar venda da sua casa");
		AddMenuItem(CasaOpc,0,"Cancelar aluguel da sua casa");
		AddMenuItem(CasaOpc,0,"Rastrear sua casa");
		AddMenuItem(CasaOpc,0,"Sair");
	}
	DiasAluguel1 = CreateMenu("Aluguel",1,30.0,140.0,220.0,0.0);
	if(IsValidMenu(DiasAluguel1)){
	    SetMenuColumnHeader(DiasAluguel1,0,"Dias de aluguel");
	    AddMenuItem(DiasAluguel1,0,"1 dia");
	    AddMenuItem(DiasAluguel1,0,"2 dias");
	    AddMenuItem(DiasAluguel1,0,"3 dias");
	    AddMenuItem(DiasAluguel1,0,"4 dias");
	    AddMenuItem(DiasAluguel1,0,"5 dias");
	    AddMenuItem(DiasAluguel1,0,"6 dias");
	    AddMenuItem(DiasAluguel1,0,"7 dias");
	    AddMenuItem(DiasAluguel1,0,"8 dias");
	    AddMenuItem(DiasAluguel1,0,"9 dias");
	    AddMenuItem(DiasAluguel1,0,"10 dias");
	    AddMenuItem(DiasAluguel1,0,"Mais dias >>");
	}
	DiasAluguel2 = CreateMenu("Aluguel",1,30.0,140.0,220.0,0.0);
	if(IsValidMenu(DiasAluguel2)){
	    SetMenuColumnHeader(DiasAluguel2,0,"Dias de aluguel");
	    AddMenuItem(DiasAluguel2,0,"11 dias");
	    AddMenuItem(DiasAluguel2,0,"12 dias");
	    AddMenuItem(DiasAluguel2,0,"13 dias");
	    AddMenuItem(DiasAluguel2,0,"14 dias");
	    AddMenuItem(DiasAluguel2,0,"15 dias");
	    AddMenuItem(DiasAluguel2,0,"16 dias");
	    AddMenuItem(DiasAluguel2,0,"17 dias");
	    AddMenuItem(DiasAluguel2,0,"18 dias");
	    AddMenuItem(DiasAluguel2,0,"19 dias");
	    AddMenuItem(DiasAluguel2,0,"20 dias");
	    AddMenuItem(DiasAluguel2,0,"Mais dias >>");
	}
	DiasAluguel3 = CreateMenu("Aluguel",1,30.0,140.0,220.0,0.0);
	if(IsValidMenu(DiasAluguel3)){
	    SetMenuColumnHeader(DiasAluguel3,0,"Dias de aluguel");
	    AddMenuItem(DiasAluguel3,0,"21 dias");
	    AddMenuItem(DiasAluguel3,0,"22 dias");
	    AddMenuItem(DiasAluguel3,0,"23 dias");
	    AddMenuItem(DiasAluguel3,0,"24 dias");
	    AddMenuItem(DiasAluguel3,0,"25 dias");
	    AddMenuItem(DiasAluguel3,0,"26 dias");
	    AddMenuItem(DiasAluguel3,0,"27 dias");
	    AddMenuItem(DiasAluguel3,0,"28 dias");
	    AddMenuItem(DiasAluguel3,0,"29 dias");
	    AddMenuItem(DiasAluguel3,0,"30 dias");
	    AddMenuItem(DiasAluguel3,0,"Sair");
	}
	//Armas
	Weapons = CreateMenu("Armas",1,30.0,140.0,220.0,0.0);
	if(IsValidMenu(Weapons)){
	    SetMenuColumnHeader(Weapons,0,"Armas:");
	    AddMenuItem(Weapons,0,"Pistolas");
	    AddMenuItem(Weapons,0,"Shotguns");
	    AddMenuItem(Weapons,0,"Micro Uzi");
	    AddMenuItem(Weapons,0,"Rifles");
	    AddMenuItem(Weapons,0,"Snipers");
	    AddMenuItem(Weapons,0,"Colete");
	    AddMenuItem(Weapons,0,"Camuflagem");
	    AddMenuItem(Weapons,0,"Bomba Relogio");
	    AddMenuItem(Weapons,0,"Flash");
	    AddMenuItem(Weapons,0,"Rojao");
	    AddMenuItem(Weapons,0,"Sair");
	}
	WSlot2 = CreateMenu("Pistolas",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(WSlot2)){
	    SetMenuColumnHeader(WSlot2,0,"Nome");
	    SetMenuColumnHeader(WSlot2,1,"Valor");
	    SetMenuColumnHeader(WSlot2,2,"Municao");
	    AddMenuItem(WSlot2,0,"Desert Eagle");
	    AddMenuItem(WSlot2,1,"$2000");
	    AddMenuItem(WSlot2,0,"Pistola 9mm c/ silenciador");
	    AddMenuItem(WSlot2,1,"$1300");
	}
	WSlot3 = CreateMenu("Shotguns",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(WSlot3)){
	    SetMenuColumnHeader(WSlot3,0,"Nome");
	    SetMenuColumnHeader(WSlot3,1,"Valor");
	    SetMenuColumnHeader(WSlot3,2,"Municao");
	    AddMenuItem(WSlot3,0,"Shotgun");
	    AddMenuItem(WSlot3,1,"$2300");
	    AddMenuItem(WSlot3,0,"Combat Shotgun");
	    AddMenuItem(WSlot3,1,"$6000");
	}
	WSlot4 = CreateMenu("Micro Uzi",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(WSlot4)){
	    SetMenuColumnHeader(WSlot4,0,"Nome");
	    SetMenuColumnHeader(WSlot4,1,"Valor");
	    SetMenuColumnHeader(WSlot4,2,"Municao");
	    AddMenuItem(WSlot4,0,"MP5");
	    AddMenuItem(WSlot4,1,"$6500");
	}
	WSlot5 = CreateMenu("Rifles",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(WSlot5)){
	    SetMenuColumnHeader(WSlot5,0,"Nome");
	    SetMenuColumnHeader(WSlot5,1,"Valor");
	    SetMenuColumnHeader(WSlot5,2,"Municao");
	    AddMenuItem(WSlot5,0,"AK47");
	    AddMenuItem(WSlot5,1,"$9500");
	    AddMenuItem(WSlot5,0,"M4");
	    AddMenuItem(WSlot5,1,"$9500");
	}
	WSlot6 = CreateMenu("Snipers",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(WSlot6)){
	    SetMenuColumnHeader(WSlot6,0,"Nome");
	    SetMenuColumnHeader(WSlot6,1,"Valor");
	    SetMenuColumnHeader(WSlot6,2,"Municao");
	    AddMenuItem(WSlot6,0,"Country Rifle");
	    AddMenuItem(WSlot6,1,"$4500");
	}
	WColete = CreateMenu("Colete",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(WColete)){
	    SetMenuColumnHeader(WColete,0,"Confirma?");
	    SetMenuColumnHeader(WColete,1,"Valor");
	    AddMenuItem(WColete,0,"Colete");
	    AddMenuItem(WColete,1,"$300");
	}
	WCamuflagem = CreateMenu("Camuflagem",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(WCamuflagem)){
	    SetMenuColumnHeader(WCamuflagem,0,"Tempo");
	    SetMenuColumnHeader(WCamuflagem,1,"Valor");
	    AddMenuItem(WCamuflagem,0,"1 minuto");
	    AddMenuItem(WCamuflagem,1,"$25");
	    AddMenuItem(WCamuflagem,0,"2 minutos");
	    AddMenuItem(WCamuflagem,1,"$50");
	    AddMenuItem(WCamuflagem,0,"3 minutos");
	    AddMenuItem(WCamuflagem,1,"$75");
	    AddMenuItem(WCamuflagem,0,"4 minutos");
	    AddMenuItem(WCamuflagem,1,"$100");
	    AddMenuItem(WCamuflagem,0,"5 minutos");
	    AddMenuItem(WCamuflagem,1,"$150");
	    AddMenuItem(WCamuflagem,0,"6 minutos");
	    AddMenuItem(WCamuflagem,1,"$200");
	    AddMenuItem(WCamuflagem,0,"7 minutos");
	    AddMenuItem(WCamuflagem,1,"$250");
	    AddMenuItem(WCamuflagem,0,"8 minutos");
	    AddMenuItem(WCamuflagem,1,"$300");
		AddMenuItem(WCamuflagem,0,"9 minutos");
	    AddMenuItem(WCamuflagem,1,"$350");
		AddMenuItem(WCamuflagem,0,"10 minutos");
	    AddMenuItem(WCamuflagem,1,"$400");
	}
	WClockBomb = CreateMenu("Bomba Relogio",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(WClockBomb))
	{
	    SetMenuColumnHeader(WClockBomb,0,"Confirma?");
	    AddMenuItem(WClockBomb,0,"Sim");
	    AddMenuItem(WClockBomb,1,"$1500");
	    AddMenuItem(WClockBomb,0,"Nao");
	}
	WFlash = CreateMenu("Flash",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(WFlash))
	{
	    SetMenuColumnHeader(WFlash,0,"Confirma?");
	    AddMenuItem(WFlash,0,"Sim");
	    AddMenuItem(WFlash,1,"$500");
	    AddMenuItem(WFlash,0,"Nao");
	}
	WRocket = CreateMenu("Rojao",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(WRocket))
	{
	    SetMenuColumnHeader(WRocket,0,"Confirma?");
	    AddMenuItem(WRocket,0,"Sim");
	    AddMenuItem(WRocket,1,"$500");
	    AddMenuItem(WRocket,0,"Nao");
	}
	//MUNIÇÕES
	Municoes = CreateMenu("Municoes",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(Municoes)){
	    SetMenuColumnHeader(Municoes,0,"Escolha o SLOT:");
	    AddMenuItem(Municoes,0,"SLOT 2");
	    AddMenuItem(Municoes,1,"$5 cada muniao");
	    AddMenuItem(Municoes,0,"SLOT 3");
	    AddMenuItem(Municoes,1,"$40 cada muniao");
	    AddMenuItem(Municoes,0,"SLOT 4");
	    AddMenuItem(Municoes,1,"$10 cada muniao");
	    AddMenuItem(Municoes,0,"SLOT 5");
	    AddMenuItem(Municoes,1,"$30 cada muniao");
	    AddMenuItem(Municoes,0,"SLOT 6");
	    AddMenuItem(Municoes,1,"$50 cada muniao");
	}
	QTMunicoes = CreateMenu("Municoes",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(QTMunicoes)){
	    SetMenuColumnHeader(QTMunicoes,0,"Escolha a quantidade:");
	    AddMenuItem(QTMunicoes,0,"5");
	    AddMenuItem(QTMunicoes,0,"10");
	    AddMenuItem(QTMunicoes,0,"20");
	    AddMenuItem(QTMunicoes,0,"50");
	    AddMenuItem(QTMunicoes,0,"100");
	    AddMenuItem(QTMunicoes,0,"200");
	}

	//RESTAURANTE
	Sucos = CreateMenu("Sucos",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(Sucos)){
	    SetMenuColumnHeader(Sucos,0,"Escolha o sabor:");
	    AddMenuItem(Sucos,0,"Laranja");
	    AddMenuItem(Sucos,0,"Abacaxi");
	    AddMenuItem(Sucos,0,"Acerola");
	    AddMenuItem(Sucos,0,"Mamo");
	    AddMenuItem(Sucos,0,"Limo");
	    AddMenuItem(Sucos,0,"Morango");
	    AddMenuItem(Sucos,0,"Uva");
	    AddMenuItem(Sucos,0,"Maracuja");
	    AddMenuItem(Sucos,0,"Framboesa");
	}
	Cardapio1 = CreateMenu("Cardapio",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(Cardapio1)){
	    SetMenuColumnHeader(Cardapio1,0,"Menu");
	    AddMenuItem(Cardapio1,0,"Comidas");
	    AddMenuItem(Cardapio1,0,"Bebidas");
	    AddMenuItem(Cardapio1,0,"Sobremesas");
	    AddMenuItem(Cardapio1,0,"Sair");
	}
	Cardapio2 = CreateMenu("Comidas",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(Cardapio2)){
	    SetMenuColumnHeader(Cardapio2,0,"Comida");
	    SetMenuColumnHeader(Cardapio2,1,"Preo");
	    AddMenuItem(Cardapio2,0,"Feijoada");
	    AddMenuItem(Cardapio2,1,"$40");
	    AddMenuItem(Cardapio2,0,"Lagosta Gourmet");
	    AddMenuItem(Cardapio2,1,"$220");
	    AddMenuItem(Cardapio2,0,"Camaro");
	    AddMenuItem(Cardapio2,1,"$140");
	    AddMenuItem(Cardapio2,0,"Peixe Frito");
	    AddMenuItem(Cardapio2,1,"$120");
	    AddMenuItem(Cardapio2,0,"Fil");
	    AddMenuItem(Cardapio2,1,"$80");
	    AddMenuItem(Cardapio2,0,"Salmo");
	    AddMenuItem(Cardapio2,1,"$140");
	    AddMenuItem(Cardapio2,0,"Batata Frita");
	    AddMenuItem(Cardapio2,1,"$80");
	    AddMenuItem(Cardapio2,0,"Sopa");
	    AddMenuItem(Cardapio2,1,"$20");
	    AddMenuItem(Cardapio2,0,"Frango Assado");
	    AddMenuItem(Cardapio2,1,"$100");
	}
	Cardapio3 = CreateMenu("Bebidas",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(Cardapio3)){
	    SetMenuColumnHeader(Cardapio3,0,"Bebida");
	    SetMenuColumnHeader(Cardapio3,1,"Preo");
	    AddMenuItem(Cardapio3,0,"Coca-Cola");
	    AddMenuItem(Cardapio3,1,"$30");
	    AddMenuItem(Cardapio3,0,"Sprite");
	    AddMenuItem(Cardapio3,1,"$30");
	    AddMenuItem(Cardapio3,0,"Cerveja");
	    AddMenuItem(Cardapio3,1,"$35");
	    AddMenuItem(Cardapio3,0,"Fanta");
	    AddMenuItem(Cardapio3,1,"$30");
	    AddMenuItem(Cardapio3,0,"Vinho");
	    AddMenuItem(Cardapio3,1,"$100");
	    AddMenuItem(Cardapio3,0,"Suco c/ leite");
	    AddMenuItem(Cardapio3,1,"$40");
	    AddMenuItem(Cardapio3,0,"Suco c/ agua");
	    AddMenuItem(Cardapio3,1,"$35");
	}
	Cardapio4 = CreateMenu("Sobremesas",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(Cardapio4)){
	    SetMenuColumnHeader(Cardapio4,0,"Sobremesa");
	    SetMenuColumnHeader(Cardapio4,1,"Preo");
	    AddMenuItem(Cardapio4,0,"Pudim de chocolate");
	    AddMenuItem(Cardapio4,1,"$50");
	    AddMenuItem(Cardapio4,0,"Sorvete");
	    AddMenuItem(Cardapio4,1,"$50");
	    AddMenuItem(Cardapio4,0,"Bolo de chocolate");
	    AddMenuItem(Cardapio4,1,"$60");
	    AddMenuItem(Cardapio4,0,"Bomba de chocolate");
	    AddMenuItem(Cardapio4,1,"$40");
	    AddMenuItem(Cardapio4,0,"Brigadeiro");
	    AddMenuItem(Cardapio4,1,"$40");
	}
	//SORVETES
	Sorvetes = CreateMenu("Menu",2,2,150,100,20);
	if(IsValidMenu(Sorvetes)){
	    SetMenuColumnHeader(Sorvetes,0,"Sabor");
	    SetMenuColumnHeader(Sorvetes,1,"Preo");
	    AddMenuItem(Sorvetes,0,"Milho verde");
	    AddMenuItem(Sorvetes,1,"$50");
	    AddMenuItem(Sorvetes,0,"Morango");
	    AddMenuItem(Sorvetes,1,"$50");
	    AddMenuItem(Sorvetes,0,"Leite Condensado");
	    AddMenuItem(Sorvetes,1,"$70");
	    AddMenuItem(Sorvetes,0,"Flocos");
	    AddMenuItem(Sorvetes,1,"$50");
	    AddMenuItem(Sorvetes,0,"Creme");
	    AddMenuItem(Sorvetes,1,"$40");
	    AddMenuItem(Sorvetes,0,"Abacaxi");
	    AddMenuItem(Sorvetes,1,"$50");
	    AddMenuItem(Sorvetes,0,"Chocolate");
	    AddMenuItem(Sorvetes,1,"$70");
	    AddMenuItem(Sorvetes,0,"Limo");
	    AddMenuItem(Sorvetes,1,"$40");
	    AddMenuItem(Sorvetes,0,"Tutti-Fruti");
	    AddMenuItem(Sorvetes,1,"$50");
	}
	Sorvetes2 = CreateMenu("Menu",2,2,150,100,20);
	if(IsValidMenu(Sorvetes2)){
	    SetMenuColumnHeader(Sorvetes2,0,"Sabor");
	    SetMenuColumnHeader(Sorvetes2,1,"Preo");
		AddMenuItem(Sorvetes2,0,"Napolitano");
		AddMenuItem(Sorvetes2,1,"$32");
		AddMenuItem(Sorvetes2,0,"Chocolate");
		AddMenuItem(Sorvetes2,1,"$25");
		AddMenuItem(Sorvetes2,0,"Flocos");
		AddMenuItem(Sorvetes2,1,"$30");
	}
	//COFRE
	cofremenu = CreateMenu("Cofre",1,30.0,140.0,220.0,0.0);
	if(IsValidMenu(cofremenu)){
		SetMenuColumnHeader(cofremenu,0,"Deseja:");
		AddMenuItem(cofremenu,0,"Guardar dinheiro");
		AddMenuItem(cofremenu,0,"Guardar arma");
		AddMenuItem(cofremenu,0,"Guardar droga");
		AddMenuItem(cofremenu,0,"Guardar celular");
		AddMenuItem(cofremenu,0,"Retirar dinheiro");
		AddMenuItem(cofremenu,0,"Retirar arma");
		AddMenuItem(cofremenu,0,"Retirar droga");
		AddMenuItem(cofremenu,0,"Retirar celular");
	}
	drogascofre = CreateMenu("Cofre",1,30.0,140.0,220.0,0.0);
	if(IsValidMenu(drogascofre)){
		SetMenuColumnHeader(drogascofre,0,"Deseja guardar/retirar:");
		AddMenuItem(drogascofre,0,"Cocaina");
		AddMenuItem(drogascofre,0,"Maconha");
		AddMenuItem(drogascofre,0,"Heroina");
	}
	ConfirmacaoNegocio = CreateMenu("Propriedades",2,2,150,100,20);
	if(IsValidMenu(ConfirmacaoNegocio)){
		SetMenuColumnHeader(ConfirmacaoNegocio,0,"Quer mesmo compra-la?");
		AddMenuItem(ConfirmacaoNegocio,0,"Sim");
		AddMenuItem(ConfirmacaoNegocio,0,"No");
	}
	Bar = CreateMenu("Comes & Bebes",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(Bar)){
	    SetMenuColumnHeader(Bar,0,"Cardapio");
	    SetMenuColumnHeader(Bar,1,"Valor");
		AddMenuItem(Bar,0,"Guarana KUAT");
		AddMenuItem(Bar,1,"$50");
		AddMenuItem(Bar,0,"Suco");
		AddMenuItem(Bar,1,"$80");
		AddMenuItem(Bar,0,"Cerveja");
		AddMenuItem(Bar,1,"$80");
		AddMenuItem(Bar,0,"Pinga");
		AddMenuItem(Bar,1,"$70");
		AddMenuItem(Bar,0,"Whisky");
		AddMenuItem(Bar,1,"$150");
		AddMenuItem(Bar,0,"X-Bacon");
		AddMenuItem(Bar,1,"$40");
		AddMenuItem(Bar,0,"X-Burger");
		AddMenuItem(Bar,1,"$40");
		AddMenuItem(Bar,0,"X-Salada");
		AddMenuItem(Bar,1,"$30");
		AddMenuItem(Bar,0,"Sair");
	}
	BancoOpc = CreateMenu("Opoes do banco",1,30.0,140.0,220.0,0.0);
	if(IsValidMenu(BancoOpc)){
		AddMenuItem(BancoOpc,0,"Sacar");
		AddMenuItem(BancoOpc,0,"Depositar");
		AddMenuItem(BancoOpc,0,"Ver Extrato");
		AddMenuItem(BancoOpc,0,"Pagar D¢vidas");
        AddMenuItem(BancoOpc,0,"Fazer Emprstimo");
        AddMenuItem(BancoOpc,0,"Fazer Aplicao");
        AddMenuItem(BancoOpc,0,"Retirar Aplicao");
		AddMenuItem(BancoOpc,0,"Sair");
	}
	BancoOpc2 = CreateMenu("Opoes do saque",1,30.0,140.0,220.0,0.0);
	if(IsValidMenu(BancoOpc2)){
		AddMenuItem(BancoOpc2,0,"Dinheiro pessoal");
		AddMenuItem(BancoOpc2,0,"Trabalho");
		AddMenuItem(BancoOpc2,0,"Residencia");
		AddMenuItem(BancoOpc2,0,"Empresa");
		AddMenuItem(BancoOpc2,0,"Sair");
	}
	VendoDrogas = CreateMenu("Drogas:",2,2,150,100,20);
	if(IsValidMenu(VendoDrogas)){
		AddMenuItem(VendoDrogas,0,"Maconha");
		AddMenuItem(VendoDrogas,0,"Heroina");
		AddMenuItem(VendoDrogas,0,"Cocaina");
		AddMenuItem(VendoDrogas,0,"Sair");
	}
	QuantidadeDrog = CreateMenu("Quantidade:",2,2,150,100,20);
	if(IsValidMenu(QuantidadeDrog)){
		AddMenuItem(QuantidadeDrog,0,"1");
		AddMenuItem(QuantidadeDrog,0,"2");
		AddMenuItem(QuantidadeDrog,0,"3");
		AddMenuItem(QuantidadeDrog,0,"Sair");
	}
	CargaGeral = CreateMenu("Cargas:",1,2,150,100,20);
	if(IsValidMenu(CargaGeral)){
		AddMenuItem(CargaGeral,0,"Material em Geral");
		AddMenuItem(CargaGeral,0,"Combustivel");
		AddMenuItem(CargaGeral,0,"Drogas");
		AddMenuItem(CargaGeral,0,"Roupas");
		AddMenuItem(CargaGeral,0,"Sair");
	}

	//Corretora de propriedades
	CreateObject(18082, 273.869202, -1615.066162, 98.675987, 0.0000, 0.0000, 78.7500);
	CreateObject(1535, 279.235016, -1616.256592, 96.411179, 0.0000, 0.0000, 258.7500);
	CreateObject(2561, 272.424896, -1611.470947, 97.516411, 0.0000, 0.0000, 348.7500);
	CreateObject(2561, 269.818207, -1610.950317, 97.511627, 0.0000, 0.0000, 348.7500);
	CreateObject(2435, 275.882294, -1618.076050, 96.411324, 0.0000, 0.0000, 78.7500);
	CreateObject(2435, 276.051605, -1617.206299, 96.411324, 0.0000, 0.0000, 78.7500);
	CreateObject(2435, 276.238678, -1616.298584, 96.411324, 0.0000, 0.0000, 78.7500);
	CreateObject(1754, 276.966492, -1618.433594, 96.413109, 0.0000, 0.0000, 168.7500);
	CreateObject(1754, 278.016663, -1618.643066, 96.420372, 0.0000, 0.0000, 168.7500);
	CreateObject(2007, 274.485748, -1615.698120, 96.413780, 0.0000, 0.0000, 78.7499);
	CreateObject(11360, 273.803284, -1616.264038, 98.517876, 89.3814, 0.0000, 348.7500);
	CreateObject(2836, 278.168182, -1617.467407, 96.417747, 0.0000, 0.0000, 78.7500);
	CreateObject(2007, 274.482880, -1615.699219, 97.718826, 0.0000, 0.0000, 78.7499);
	CreateObject(1716, 275.007233, -1617.117920, 96.418060, 0.0000, 0.0000, 0.0000);
	CreateObject(1808, 279.237335, -1615.750122, 96.420280, 0.0000, 0.0000, 258.7500);
	CreateObject(2190, 275.598511, -1618.474243, 97.312447, 0.0000, 0.0000, 191.2500);
	CreateObject(2186, 268.743408, -1615.957031, 96.411118, 0.0000, 0.0000, 78.7500);
	CreateObject(2605, 272.339417, -1615.907959, 96.816612, 0.0000, 0.0000, 348.7498);
	CreateObject(2605, 270.535309, -1612.743286, 96.816612, 0.0000, 0.0000, 258.7499);
	CreateObject(1663, 272.239197, -1617.045898, 96.878387, 0.0000, 0.0000, 191.2500);
	CreateObject(1663, 269.432861, -1612.774048, 96.924988, 0.0000, 0.0000, 90.0000);
	CreateObject(1811, 271.779877, -1612.528687, 97.044479, 0.0000, 0.0000, 11.2500);
	CreateObject(1811, 271.528656, -1613.395874, 97.044479, 0.0000, 0.0000, 337.5000);
	CreateObject(1811, 273.063293, -1614.754883, 97.044479, 0.0000, 0.0000, 67.5000);
	CreateObject(1811, 272.133392, -1614.710938, 97.044479, 0.0000, 0.0000, 90.0000);

	//Objetos Auto-escola
	CreateObject(1238, 1801.204102, -2039.499512, 12.850002, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1802.588989, -2039.746338, 12.851125, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1781.893799, -2020.181763, 12.798002, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1783.344727, -2020.545410, 12.785471, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1785.194336, -2020.852661, 12.786898, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1787.009399, -2021.287964, 12.788723, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1788.512207, -2021.978394, 12.796572, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1782.145142, -2026.361938, 12.803642, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1783.982422, -2027.169922, 12.806655, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1785.295532, -2028.530884, 12.811297, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1785.799438, -2030.528931, 12.817763, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1789.897339, -2023.202026, 12.800632, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1790.991455, -2024.516602, 12.799944, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1791.009155, -2026.243530, 12.805431, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1791.240234, -2027.927490, 12.810834, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1791.393066, -2029.639771, 12.816306, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1791.299316, -2031.213135, 12.821278, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1786.086548, -2032.447754, 12.823925, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1786.505859, -2034.307129, 12.829929, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1787.566040, -2035.928833, 12.835338, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1789.317871, -2036.870117, 12.838754, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1796.921265, -2033.386475, 12.829550, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1791.195923, -2037.207642, 12.840282, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1793.254272, -2036.817261, 12.839546, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1791.400879, -2022.925293, 12.805038, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1796.382568, -2034.677856, 12.833519, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1796.848999, -2031.981567, 12.825073, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1796.609619, -2029.139160, 12.815990, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1796.681885, -2027.382446, 12.820515, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1792.750000, -2021.701538, 12.808992, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1794.129272, -2021.274048, 12.813034, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1796.046387, -2021.083862, 12.818651, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1797.945679, -2021.199829, 12.824218, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1799.659912, -2022.042358, 12.829241, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1801.110962, -2023.458252, 12.833496, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1802.074219, -2031.384277, 12.836315, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1802.047363, -2027.271729, 12.836237, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1802.038940, -2028.650757, 12.836212, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1802.046631, -2030.079468, 12.836235, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1799.863525, -2036.586182, 12.840427, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1801.527222, -2037.319214, 12.843159, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1803.593994, -2037.380005, 12.843859, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1805.268799, -2036.813477, 12.842470, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1806.919189, -2035.852783, 12.850513, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1807.848267, -2034.505859, 12.853235, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1808.010010, -2032.711182, 12.853710, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1808.021240, -2030.948364, 12.853745, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1808.099976, -2029.338745, 12.853972, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1808.128906, -2027.839844, 12.854059, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1808.153931, -2025.434937, 12.854133, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1806.340820, -2020.720215, 12.848819, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1811.948608, -2020.740356, 12.867365, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1804.853149, -2021.300415, 12.844460, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1803.535889, -2022.358276, 12.840599, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1802.734741, -2023.533325, 12.838251, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1809.504395, -2025.368408, 12.858090, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1810.783203, -2025.330811, 12.863096, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1810.711060, -2020.742065, 12.862831, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1807.816284, -2020.517822, 12.853143, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1811.984009, -2025.365601, 12.867494, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1809.219116, -2020.570313, 12.857367, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1802.014404, -2024.683472, 12.836141, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1808.122559, -2026.637451, 12.854041, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1802.039917, -2026.032471, 12.836216, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1794.981079, -2036.052002, 12.837538, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1798.530884, -2035.673828, 12.837204, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1797.521484, -2034.509766, 12.833261, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1796.714233, -2030.510864, 12.820371, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1804.268799, -2040.190430, 12.852946, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1805.923584, -2040.304199, 12.853710, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1807.644897, -2040.656738, 12.855249, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1809.008423, -2041.482056, 12.858203, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1810.321289, -2042.502319, 12.861763, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1811.429932, -2043.540161, 12.872149, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1812.079956, -2045.313721, 12.871353, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1812.010620, -2047.065430, 12.871441, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1809.966187, -2050.147461, 12.873938, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1808.550537, -2051.330811, 12.875666, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1806.803955, -2052.094238, 12.877796, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1805.096436, -2052.402588, 12.879881, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1803.071899, -2052.508057, 12.882355, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1801.269409, -2052.416748, 12.884556, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1811.162109, -2048.881104, 12.872478, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1804.228516, -2046.519287, 12.880941, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1802.216309, -2046.598755, 12.879358, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1800.641602, -2046.568726, 12.878866, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1799.001587, -2046.303467, 12.877560, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1796.197876, -2046.144409, 12.876331, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1797.589966, -2046.322998, 12.877281, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1796.033936, -2047.975708, 12.882553, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1795.825317, -2049.866699, 12.891201, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1795.774170, -2051.532959, 12.891264, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1797.459351, -2051.976563, 12.889206, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1799.098999, -2052.164551, 12.887205, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1799.024780, -2039.382813, 12.849102, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1796.825562, -2039.410034, 12.848650, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1794.811646, -2039.253540, 12.847662, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1773.959717, -2027.003174, 12.803680, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1776.050171, -2026.943604, 12.804001, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1774.951660, -2026.389282, 12.801972, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1773.730591, -2028.059448, 12.806976, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1776.413330, -2028.022583, 12.807513, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1774.977539, -2031.121094, 12.817000, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1774.968750, -2034.834473, 12.828785, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1775.009033, -2038.591431, 12.840725, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1775.084351, -2042.328735, 12.852606, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1775.043945, -2046.499390, 12.865835, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1775.239868, -2050.690186, 12.886753, 0.0000, 0.0000, 0.0000);

	for(new t = 0; t < sizeof TerminaisBusao; t++)
	{
	    CreateObject(1257, TerminaisBusao[t][tX], TerminaisBusao[t][tY], TerminaisBusao[t][tZ], TerminaisBusao[t][trX], TerminaisBusao[t][trY], TerminaisBusao[t][trZ]);
	}

	CreateObject(16442,-1093.0337,-1275.2739,129.2188,0,0,0);
	CreateObject(16442,-1090.6830,-1273.4948,129.2188,0,0,0);
	CreateObject(16442,-1092.2952,-1270.1226,129.2188,0,0,0);
	CreateObject(16442,-1098.5670,-1272.1857,129.2188,0,0,0);
	CreateObject(16442,-1094.9755,-1277.0985,129.2188,0,0,0);
	CreateObject(16442,-1085.9725,-1277.5209,129.2188,0,0,0);
	CreateObject(16442,-1083.4242,-1272.7769,129.2188,0,0,0);
	CreateObject(16442,-1098.8875,-1274.7876,129.2188,0,0,0);
	CreateObject(16442,-1086.1898,-1270.3119,129.2188,0,0,0);

	Gates[0] = CreateObject(968, 1544.687866, -1630.546875, 13.165515, 0, 269.4727, 269.9995);
	Gates[1] = CreateObject(968, 2238.198730, 2450.429932, 10.597424, 0, 269.4727, 269.9996);
	Gates[2] = CreateObject(968, -1572.189331, 658.876709, 6.887374, 0, 269.4727, 269.9995);
	Gates[3] = CreateObject(968, -1701.452271, 687.616211, 24.592068, 0, 269.4727, 269.9995);

	Portao[0] =	CreateObject(10184, 1592.921753, -1638.546753, 14.789343, 0, 0, 90);//fechado LS
	Portao[1] =	CreateObject(10184, 2334.678711, 2443.014404, 7.259488, 0, 0, 326.25);//fechado LV
	Portao[2] =	CreateObject(10184, 2294.276123, 2503.250488, 4.719362, 0, 0, 0);//fechado LV
	Portao[3] = CreateObject(10184,-1631.699219, 688.715637, 8.709263, 0, 0, 270);//fechado SF

    portaoauto = CreateObject(980,1812.601,-2071.738,15.326,0.0,0.0,90.241);

	CreateObject(980,966.1081,-53.3185,1001.1246,0.0,0.0,90.241);

    CreateObject(980,681.7346,-450.7061,-25.6099,0.0,0.0,180.0000);

    CreateObject(980,313.6470,-127.6511,1004.0547,0.0,0.0,271.1015);

    CreateObject(980,2530.0852,-1680.9191,1015.4986,0.0,0.0,182.9398);

    CreateObject(980,2160.3792,1602.6689,999.9766,0.0,0.0,268.4227);

    CreateObject(980,237.2881,65.2953,1005.0391,0.0,0.0,268.0607);
    CreateObject(980,226.9604,64.2919,1005.0391,0.0,0.0,88.4814);
    CreateObject(980,230.5392,64.2317,1005.0391,0.0,0.0,178.8631);
    CreateObject(980,235.0364,64.0746,1005.0391,0.0,0.0,178.8631);
    CreateObject(980,235.2458,70.0710,1005.0391,0.0,0.0,178.8631);
    CreateObject(980,227.6606,69.9856,1004.5555,0.0,0.0,178.8631);

    CreateObject(980,1041.5463,-1026.3273,32.1016,0.0,0.0,359.2230);
    CreateObject(980,1024.9093,-1029.3713,32.1016,0.0,0.0,180.4309);
    CreateObject(980,2071.5591,-1831.0820,13.5469,0.0,0.0,90.9677);
    CreateObject(980,488.5925,-1734.9904,11.1462,0.0,0.0,174.1100);
    CreateObject(980,2645.0835,-2038.7932,13.5500,0.0,0.0,180.4092);
    CreateObject(980,2386.2498,1043.2150,10.8203,0.0,0.0,356.8380);
    CreateObject(980,1968.3610,2162.7512,10.8203,0.0,0.0,268.2904);

//-----------------------------------------------------------------------------------------------------

	/*          Public name                         Timer                           Repeat          */
	SetTimer(   "Velocimetro",                      1000,                           true);
	SetTimer(	"TempoeTimers",			 			1000, 							true);
	SetTimer(	"Relogio",                      	1000,                           true);
    SetTimer(	"Subway",							1000,							true);
    SetTimer(   "AntiWeaponHack",                   1500,                           true);
    SetTimer(	"DriveThru",                      	2000,                           true);
    SetTimer(	"MoneyCheck",                      	2000,                           true);
    SetTimer(	"HealthCheck",                      2000,                           true);
	SetTimer(	"VehicleDamnification", 			2000, 							true);
	SetTimer(	"Areas", 							4000, 							true);
	SetTimer(	"RadarNick",						5000,							true);
	SetTimer(	"TaxiCorrida", 						8000, 							true);
	SetTimer(	"GatesCoordChecker", 				5000, 							true);
	SetTimer(	"BaladaVerificarContaLuz",			7000,							true);
	SetTimer(	"UpdateZones",						7000,							true);
	SetTimer(	"TirarCombustivel",					50000,							true);
	SetTimer(	"TempoJogo",						60000,							true);
	SetTimer(	"AnunciarPropeComu",				80000,							true);
	SetTimer(	"DesmancheDoencaGarganBebi",		100000,							true);
	SetTimer(   "FomeBatendo",                      200000,                         true);
	SetTimer(	"SavingPlayers",					240000,							true);
	SetTimer(	"Abastecimentos",					500000,							true);
	SetTimer(   "GanharRespeito",                   2000000,                        true);
	SetTimer(	"SubMissoes",						1400000,						true);
	SetTimer(	"DoencaPredomina",					10080000,						true);

	if(!fexist("Utilidades/utilitarios.cfg"))
	{
	    CriarPastaUtilitarios("Utilidades/utilitarios.cfg");
	}
	else
	{
	    LoadPastaUtilitarios("Utilidades/utilitarios.cfg");
	}

	AmountPlayerVehicles = AmountServerVehicles;
	while(fexist(VehicleFile(AmountPlayerVehicles))) AmountPlayerVehicles++;
	AmountPlayerVehicles -= AmountServerVehicles;

	while(fexist(PickupFile(LastCasa))) LastCasa++;

	for(new p=0;p<LastCasa;p++){ LoadPickup(p); }
	print("Casas carregadas...");
 	for(new p=1;p<sizeof Propriedades;p++){ LoadProperty(p); }
 	print("Propriedades carregadas...");
 	for(new p = AmountServerVehicles; p < AmountServerVehicles + AmountPlayerVehicles; p++)
 	{
 		if(!fexist(VehicleFile(p))) break;
	 	LoadVehicle(p);
	}
 	print("Veiculos carregados...");
	CarregarPastaGangZones("Utilidades/zones.rpg");
	print("Zones.rpg carregado...");
	LoadCell("Utilidades/celulares.rpg");
	print("Celulares.rpg carregado");
	LoadJornais();
	print("Primeira parte dos jornais carregada...");
	LoadJornaisPart2();
	print("Segunda parte dos jornais carregada...");
	LoadGangues();
	print("Primeira parte das gangues carregada...");
	LoadGanguesPart2();
	print("Segunda parte das gangues carregada...");

	LoadColors();
 	CreatePickupsHouses();
    SetWorldTime(HoraJogo);

    printf("Quantidade de veiculos do servidor: %d", AmountServerVehicles);
    printf("Quantidade de veiculos dos jogadores: %d", AmountPlayerVehicles);
    printf("Quantidade de casas: %d", LastCasa);
    printf("Quantidade de gangues: %d", LastGNG);
    printf("Quantidade de jornais: %d", LastJN);


    new msgdata[128];
    format(msgdata,sizeof(msgdata),"~g~~h~%s ~n~~g~~h~%s/%s/%s",DiaNameGT[ValorDia],ApplyZero(DiaJogo),ApplyZero(MesJogo),ApplyZero(AnoJogo));
    TextDrawSetString(TextData[0], msgdata);
	format(msgdata,sizeof(msgdata)," ~n~ ~n~~g~~h~%s ~n~~g~~h~%s/%s/%s",DiaNameGT[ValorDia],ApplyZero(DiaJogo),ApplyZero(MesJogo),ApplyZero(AnoJogo));
 	TextDrawSetString(TextData[1], msgdata);

	for(new idv = AmountServerVehicles; idv < AmountServerVehicles + AmountPlayerVehicles; idv++)
	{
	    AddPlayerVehicle(vStats[idv][Modelo], vStats[idv][CarPosX], vStats[idv][CarPosY], vStats[idv][CarPosZ], vStats[idv][CarPosAng], vStats[idv][Color1], vStats[idv][Color2], -1);
	}

	for(new i = 0; i < MAX_SLOTS; i++)
	{
	    PlayerControl[i] = 1;
	    AdminText[i] = 1;
	}
	
	SetTimer("CarregarCarros", 10000, false);


	JuizTribunal = -1;
	Audiencia[0] = -1;
	Audiencia[1] = -1;
	Advogados[0] = -1;
	Advogados[1] = -1;
	print("Servidor iniciado com sucesso...");
	return 1;
}
public CancelarContinuacaoPos(playerid){
	KillTimer(TimerContinuacaoPos[playerid]);
    pStats[playerid][ContinuarPos] = 0;
    SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "Tempo para continuar de onde parou esgotado.");
}
stock CreatePropertiesFiles()
{
	print("Criando propriedades...");
    new str[128], File:propfile, string[128];
	new p = 1;
	while(p < sizeof Propriedades)
	{
		set(str,PropertyFile(p));
		if(!fexist(str))
		{
			set(propStats[p][Dono1],"NONE");
			set(propStats[p][Socio1],"NONE");
			set(propStats[p][Socio2],"NONE");
			set(propStats[p][Socio3],"NONE");
			propStats[p][Lucro] = 0;
			propStats[p][Prejuizo] = 0;
			propStats[p][Investimento] = 0;
			propStats[p][SemanaPassada] = 0;
			propStats[p][SemanaRetrasada] = 0;
			propfile = fopen(str,io_write);
			fclose(propfile);
			format(string,sizeof(string),"Criando arquivo de propriedade '%s' ... Concluído",str); writelog(string); print(string);

		}
		p++;
	}
	print("Arquivos de propriedades inexistentes criados.");
}
stock SetCertainVehiclesUnlimitedGas()
{
	for(new i = 0; i < sizeof Derby; i++)
	{
 		vStats[Derby[i]][Combustivel] = -1;
	}
	for(new i = 0; i < sizeof CarroVenda; i++)
	{
	   	vStats[CarroVenda[i]][Combustivel] = -1;
	}
	for(new i = 0; i < sizeof CarroAluguel; i++)
	{
	   	vStats[CarroAluguel[i]][Combustivel] = -1;
	}
	writelog("Combustivel de certos veiculos do servidor setado para -1 (ilimitado)");
}
stock SetZoneForGang(zoneid,gangname[])
{
	set(GangControlZone[zoneid],gangname);
	CreateGangZonesForAll();
}
stock GetGangColor(gangname[])
{
	new gangfile[128];
	set(gangfile,GangFile(gangname));
	if(!fexist(gangfile) || GetGangID(gangname) == -1) return 0xFFFFFF55;
	return GangColors[gStats[GetGangID(gangname)][GangColor]];
}
stock CreateGangZonesForAll()
{
	for(new z = 0; z < sizeof(zones); z++)
	{
		if(!compare(GangControlZone[z],"NONE"))
		{
		    GangZoneStopFlashForAll(GZ[z]);
		    GangZoneHideForAll(GZ[z]);
			GangZoneShowForAll(GZ[z], (GetGangColor(GangControlZone[z]) & 0xFFFFFF00) | 0x55);
            if(IsZoneAttacked(z))
			{
			    GangZoneFlashForAll(GZ[z], (COLOR_LIGHT_RED & 0xFFFFFF00) | 0x55);
			}
		}
	}
}
stock IsZoneAttacked(zoneid)
{
    if(GetGangID(ZoneAttacked[zoneid]) != -1 && strlen(ZoneAttacked[zoneid]) > 0 && zoneid != -1) return true;
	return false;
}
stock IsPlayerInGang(playerid)
{
	if(compare(pStats[playerid][GangueNome], "NONE") || GetGangID(pStats[playerid][GangueNome]) == -1) return false;
	return true;
}
stock IsPlayerInGangTerritory(playerid)
{
	if(GetPlayerZone(playerid) == -1 || !IsPlayerInGang(playerid)) return false;
	if(compare(GangControlZone[GetPlayerZone(playerid)],pStats[playerid][GangueNome])) return true;
	return false;
}
stock SalvarPastaGangZones(pattern[])
{
	new File:zonesfile = fopen(pattern,io_write),string[128];
	for(new s = 0; s < sizeof(zones); s++){
		if(!strlen(GangControlZone[s])) set(GangControlZone[s],"NONE");
	    format(string, sizeof(string), "%s;%d;\r\n", GangControlZone[s], ZoneCash[s]);
	    fwrite(zonesfile,string);
	}
    fclose(zonesfile);
}
stock CarregarPastaGangZones(pattern[])
{
	if(!fexist(pattern)) SalvarPastaGangZones(pattern);
	new File:zonesfile = fopen(pattern,io_read),tmp[128],index,s;
	while(fread(zonesfile,tmp,sizeof(tmp)))
	{
		set(GangControlZone[s],strtok(tmp,index,';'));
		ZoneCash[s] = strval(strtok(tmp, index, ';'));
	    s++;
	    index = 0;
	}
	fclose(zonesfile);
}
stock GetPlayer2DZone(playerid, zone[], len)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
 	for(new i = 0; i != sizeof(gSAZones); i++ )
 	{
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
		{
		    return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
		}
	}
	return 0;
}
stock CriarPastaUtilitarios(pattern[])
{
	if(fexist(pattern)){
	writelog("Criando pasta de utilitários do gamemode... A pasta não foi criada pois já existia!");
	return 0;
	} else {
	new File:f = fopen(pattern,io_write);
	fclose(f);
	writelog("Criando pasta de utilitários do gamemode... Arquivo criado com sucesso!");
 	DiaJogo = 30;
	MesJogo = 4;
	AnoJogo = 2009;
	ValorDia = 4;
	ValorGasolina = 4;
	ValorAditivada = 7;
	ValorDiesel = 3;
	ValorAlcool = 1;
	ValorQuerosene = 2;
	ValorTV = 2300;
	ValorRadio = 400;
	ValorGeladeira = 1800;
	ValorFogao = 1500;
	ValorCelular = 500;
	ValorTelefone = 300;
	ValorComputador = 2500;
	ValorCofre = 600;
	ValorGuardaRoupas = 500;
	ValorFrango = 30;
	ValorPeixe = 40;
	ValorPizza = 25;
	ValorSalada = 15;
	ValorRefrigerante = 12;
	ValorSuco = 18;
	ValorCarne = 35;
	ValorStrogonoff = 45;
	ValorCamarao = 50;
	ValorLinguica = 30;
	LastPN = 1000;
	LastPhone = 300000;
	HoraJogo = 2;
	MinutoJogo = 0;
	CarPrice[0] = 50;
	CarPrice[1] = 30;
	CarPrice[2] = 40;
	CarPrice[3] = 25;
	CarPrice[4] = 35;
	CarPrice[5] = 40;
	CarPrice[6] = 15;
	CarPrice[7] = 20;
	writelog("Dados: LastCasa, LastGNG, LastJN, LastPN, LastPhone, Dia da semana, Hora, Minuto, Segundo, Dia, Mes e Ano foram setados na pasta de utilitários do gamemode...");
	return 1;
	}
}
stock SavePastaUtilitarios(pattern[])
{
	if(!fexist(pattern)){
		writelog("Salvando pasta de utilitários do gamemode... A pasta não foi encontrada! Devido à isso estamos criando uma nova!");
		CriarPastaUtilitarios(pattern);
	}
	new strsave[256];
	format(strsave,sizeof(strsave),"%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d",
	HoraJogo,
	MinutoJogo,
	DiaJogo,
	MesJogo,
	AnoJogo,
	ValorDia,
	ValorGasolina,
	ValorAditivada,
	ValorDiesel,
	ValorAlcool,
	ValorQuerosene,
	ValorTV,
	ValorRadio,
	ValorGeladeira,
	ValorFogao,
	ValorCelular,
	ValorGuardaRoupas,
	ValorCofre,
	ValorFrango,
	ValorPeixe,
	ValorPizza,
	ValorSalada,
	ValorRefrigerante,
	ValorSuco,
	ValorCarne,
	ValorStrogonoff,
	ValorCamarao,
	ValorLinguica,
	ValorTelefone,
	ValorComputador,
	LastPhone,
	LastPN,
	CarPrice[0],
	CarPrice[1],
	CarPrice[2],
	CarPrice[3],
	CarPrice[4],
	CarPrice[5],
	CarPrice[6],
	CarPrice[7]
	);
	new File:f = fopen(pattern,io_write);
	fwrite(f,strsave);
	fclose(f);
}
stock LoadPastaUtilitarios(pattern[])
{
	if(!fexist(pattern)){
		writelog("Carregando pasta de utilitários do gamemode... A pasta não foi encontrada! Devido à isso estamos criando uma nova!");
        print("Carregando pasta de utilitários do gamemode... A pasta não foi encontrada! Devido à isso estamos criando uma nova!");
		CriarPastaUtilitarios(pattern);
	}
	new File:f,tmp[1024],index;
	f = fopen(pattern,io_read);
	while(fread(f,tmp,sizeof(tmp))){
		HoraJogo = strval(strtok(tmp,index));
		MinutoJogo = strval(strtok(tmp,index));
		DiaJogo = strval(strtok(tmp,index));
		MesJogo = strval(strtok(tmp,index));
		AnoJogo = strval(strtok(tmp,index));
		ValorDia = strval(strtok(tmp,index));
		ValorGasolina = strval(strtok(tmp,index));
		ValorAditivada = strval(strtok(tmp,index));
		ValorDiesel = strval(strtok(tmp,index));
		ValorAlcool = strval(strtok(tmp,index));
		ValorQuerosene = strval(strtok(tmp,index));
		ValorTV = strval(strtok(tmp,index));
		ValorRadio = strval(strtok(tmp,index));
		ValorGeladeira = strval(strtok(tmp,index));
		ValorFogao = strval(strtok(tmp,index));
		ValorCelular = strval(strtok(tmp,index));
		ValorCofre = strval(strtok(tmp,index));
		ValorGuardaRoupas = strval(strtok(tmp,index));
 		ValorFrango = strval(strtok(tmp,index));
		ValorPeixe = strval(strtok(tmp,index));
		ValorPizza = strval(strtok(tmp,index));
		ValorSalada = strval(strtok(tmp,index));
		ValorRefrigerante = strval(strtok(tmp,index));
		ValorSuco = strval(strtok(tmp,index));
		ValorCarne = strval(strtok(tmp,index));
		ValorStrogonoff = strval(strtok(tmp,index));
		ValorCamarao = strval(strtok(tmp,index));
		ValorLinguica = strval(strtok(tmp,index));
		ValorTelefone = strval(strtok(tmp,index));
		ValorComputador = strval(strtok(tmp,index));
		LastPhone = strval(strtok(tmp,index));
		LastPN = strval(strtok(tmp,index));
		CarPrice[0] = strval(strtok(tmp,index));
		CarPrice[1] = strval(strtok(tmp,index));
		CarPrice[2] = strval(strtok(tmp,index));
		CarPrice[3] = strval(strtok(tmp,index));
		CarPrice[4] = strval(strtok(tmp,index));
		CarPrice[5] = strval(strtok(tmp,index));
		CarPrice[6] = strval(strtok(tmp,index));
		CarPrice[7] = strval(strtok(tmp,index));
	}
	writelog("Carregando pasta de utilitários do gamemode... Concluído!");
	print("Carregando pasta de utilitários do gamemode... Concluído!");
}

stock CreatePickupsHouses()
{
    for(new i = 0; i < LastCasa; i++)
	{
        if(pckStats[i][Vendendo] == 0)
        {
  			CreatePickup(1272,1,pckStats[i][pX],pckStats[i][pY],pckStats[i][pZ]);
  		}
  		else
  		{
  			CreatePickup(1273,1,pckStats[i][pX],pckStats[i][pY],pckStats[i][pZ]);
		}
	}
}

stock GetValueKey(string[])
{
    new tmp[128];
	tmp[0]=0;
	new sf = strfind(string,"=",true);
	if(sf == -1) return tmp;
	strmid(tmp,string,0,sf);
	return tmp;
}
stock GetKeyValue(string[])
{
    new tmp[128];
	tmp[0]=0;
	new sf = strfind(string,"=",true);
	if(sf == -1) return tmp;
	new sf2 = strfind(string,"\r",true);
	if(sf2==-1){
		strmid(tmp,string,sf+1,strlen(string));
	}
	else{
        strmid(tmp,string,sf+1,sf2);
	}
	return tmp;
}
stock SaveCell(pattern[])
{
	if(LastPN == 1000) return 0;
	new string[128],File:cellfile = fopen(pattern,io_write);
	for(new i = 1000; i < LastPN; i++)
	{
	    if(i == LastPN) break;
		format(string,sizeof(string),"%d=%s;\r\n",i,CelularesNum[i-1000]);
		fwrite(cellfile,string);
	}
	fclose(cellfile);
	return 1;
}
stock LoadCell(pattern[])
{
	if(!fexist(pattern)){
		new File:cfile=fopen(pattern,io_write);
		fclose(cfile);
	}
    if(LastPN == 1000) return 0;
	new File:cellfile = fopen(pattern,io_read),tmp[128],c,index,v[128];
	while(fread(cellfile,tmp,sizeof(tmp)))
	{
		c = strval(GetValueKey(tmp));
		if(c == LastPN) break;
	    v = strtok(tmp,index,';');
		set(CelularesNum[c - 1000],GetKeyValue(v));
		index = 0;
	}
	fclose(cellfile);
	return 1;
}

stock RemoveVehiclePaintjob(vehicleid)
{
	ChangeVehiclePaintjob(vehicleid, -1);
	ChangeVehicleColor(vehicleid, vStats[vehicleid][Color1], vStats[vehicleid][Color2]);
}

public SaveCarPos(vehicleid,Float:X,Float:Y,Float:Z,Float:ang)
{
	new tmp[128];
	set(tmp,VehicleFile(vehicleid));
	if(!fexist(tmp)) return 0;
	vStats[vehicleid][CarPosX] = X;
	vStats[vehicleid][CarPosY] = Y;
	vStats[vehicleid][CarPosZ] = Z;
	vStats[vehicleid][CarPosAng] = ang;
	SaveVehicle(vehicleid);
	return 1;
}

public UpdateTuneCamera()
{
	KillTimer(TuneTimer);
	if(TuneVehicle == -1 || TunnerID == -1) return ;
	new Float:vPos[3], Float:dis;
	GetVehiclePos(TuneVehicle, vPos[0], vPos[1], vPos[2]);
	new Float:X = 615.0339, Float:Y = -3.8868, Float:Z = 1001.0250, Float:fX, Float:fY, Float:ang;
	dis += floatpower(vPos[0] - X, 2);
	dis += floatpower(vPos[1] - Y, 2);
	dis += floatpower(vPos[2] - Z, 2);
	dis = floatsqroot(dis);
	if(GetPlayerInterior(TunnerID) != 1 || dis > 3)
	{
	    SetPlayerInterior(TunnerID, 1);
    	LinkVehicleToInterior(TuneVehicle, 1);
		SetPlayerPos(TunnerID, 608.7222, -24.7236, 1000.9203);
		SetVehiclePos(TuneVehicle, X, Y, Z);
		SetVehicleZAngle(TuneVehicle, 270.2918);
		SetPlayerControl(TunnerID, false);
	}
	GetPlayerFacingAngle(TunnerID, ang);
	fX = X + (7.5 * floatsin(-ang, degrees));
	fY = Y + (7.5 * floatcos(-ang, degrees));
	SetPlayerCameraPos(TunnerID, fX, fY, Z + 1.0);
	SetPlayerCameraLookAt(TunnerID, X, Y, Z);
	SetPlayerFacingAngle(TunnerID, ang + 0.3);
	TuneTimer = SetTimer("UpdateTuneCamera", 5, false);
}

stock ShowTuningMainMenu(playerid)
{
	if(TunnerID != playerid)
	{
    	if(!IsPlayerInAnyVehicle(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo.");
		    return 1;
		}
		for(new v = 0; v < sizeof CarroVenda; v++)
		{
		    if(GetPlayerVehicleID(playerid) == CarroVenda[v])
		    {
		        SendClientMessage(playerid, COLOR_GRAY, "Veículos da concessionária não podem ser modificados.");
		        return 1;
		    }
		}
		if(GetPlayerVehicleID(playerid) < AmountServerVehicles && !IsPlayerAdmin(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não pode modificar um veículo do servidor.");
		    return 1;
		}
		if(TemProfissao(MECANICO) && pStats[playerid][Prof] != MECANICO && !IsPlayerAdmin(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Há mecânicos no jogo, peça para eles modificarem seu veículo.");
		    return 1;
		}
		if(!compare(vStats[GetPlayerVehicleID(playerid)][VDono], PlayerName(playerid)) && pStats[playerid][Prof] != MECANICO && !IsPlayerAdmin(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é o dono do veículo.");
		    return 1;
		}
		if(TunnerID != -1 && TunnerID != playerid)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Já há alguém modificando um veículo, aguarde...");
		    return 1;
		}
		new modelid = GetVehicleModel(GetPlayerVehicleID(playerid));
		if(modelid == 509 || modelid == 581 || modelid == 481 || modelid == 462 || modelid == 521 || modelid == 463 || modelid == 510
		|| modelid == 522 || modelid == 461 || modelid == 448 || modelid == 468 || modelid == 586 || modelid == 523 || modelid == 520
		|| modelid == 435 || modelid == 450 || modelid == 591 || modelid == 606 || modelid == 607 || modelid == 610 || modelid == 584
		|| modelid == 608 || modelid == 611 || modelid == 472 || modelid == 473 || modelid == 493 || modelid == 595 || modelid == 484
		|| modelid == 453 || modelid == 452 || modelid == 446 || modelid == 454 || modelid == 539 || modelid == 538 || modelid == 537
		|| modelid == 590 || modelid == 569 || modelid == 570 || modelid == 449 || modelid == 441 || modelid == 464 || modelid == 594
	 	|| modelid == 501 || modelid == 465 || modelid == 564)
		{
	    	SendClientMessage(playerid, COLOR_GRAY, "Esse veículo não pode ser modificado.");
	    	return 1;
		}
		TunnerID = playerid;
		TuneVehicle = GetPlayerVehicleID(playerid);
		InitPlayerTune(playerid);
	}
	new modelid = GetVehicleModel(TuneVehicle);
	new count = 0;
	DestroyMenuEx(mTuning);
	mTuning = CreateMenu("Componentes", 2, 2, 150, 100, 20);
	if(!IsValidMenu(mTuning)) return 0;
	if(modelid == 536 || modelid == 575 || modelid == 576 || modelid == 534 || modelid == 535 || modelid == 567 || modelid == 562
	|| modelid == 565 || modelid == 558 || modelid == 559 || modelid == 560 || modelid == 561)
	{
	    AddMenuItem(mTuning, 0, "Pintura");
	    Tunes[count++] = PAINTJOBS;
	}
	for(new m = 0; m < sizeof CarMods; m++)
	{
	    if(CarMods[m][0] == modelid)
	    {
	        for(new t = 1; t < 15; t++)
	        {
	            new slot = GetComponentSlot(CarMods[m][t]);
	            if(CarMods[m][t] > 999 && CarMods[m][t] < 1194 && slot != WHEELS && slot != NITROS && slot != STEREO && slot != HYDRAULICS)
	            {
					new bool:add = false;
					for(new c = 0; c < count; c++)
					{
					    if(slot == Tunes[c])
					    {
					        add = true;
					    }
					}
					if(!add)
					{
					    if(slot == SPOILERS)
					    {
					    	AddMenuItem(mTuning, 0, "Aerofolio");
					    	Tunes[count++] = SPOILERS;
						}
						else if(slot == ROOFSCOOPS)
					    {
					    	AddMenuItem(mTuning, 0, "Roofscoop");
					    	Tunes[count++] = ROOFSCOOPS;
						}
						else if(slot == HOODS)
					    {
					    	AddMenuItem(mTuning, 0, "Capo");
					    	Tunes[count++] = HOODS;
						}
						else if(slot == SIDESKIRTS)
					    {
					    	AddMenuItem(mTuning, 0, "Saias laterais");
					    	Tunes[count++] = SIDESKIRTS;
						}
						else if(slot == LAMPS)
					    {
					    	AddMenuItem(mTuning, 0, "Lampada");
					    	Tunes[count++] = LAMPS;
						}
						else if(slot == EXHAUSTS)
					    {
					    	AddMenuItem(mTuning, 0, "Escapamento");
					    	Tunes[count++] = EXHAUSTS;
						}
						else if(slot == BULLBARS)
					    {
					    	AddMenuItem(mTuning, 0, "Barras");
					    	Tunes[count++] = BULLBARS;
						}
						else if(slot == REARBULLBARS)
					    {
					    	AddMenuItem(mTuning, 0, "Barras traseiras");
					    	Tunes[count++] = REARBULLBARS;
						}
						else if(slot == FRONTBULLBARS)
					    {
					    	AddMenuItem(mTuning, 0, "Barras fronteiras");
					    	Tunes[count++] = FRONTBULLBARS;
						}
						else if(slot == FRONTBUMPERS)
					    {
					        AddMenuItem(mTuning, 0, "Parachoque fronteiro");
					        Tunes[count++] = FRONTBUMPERS;
					    }
					    else if(slot == REARBUMPERS)
					    {
					        AddMenuItem(mTuning, 0, "Parachoque traseiro");
					        Tunes[count++] = REARBUMPERS;
					    }
					    else if(slot == VENTS)
					    {
					        AddMenuItem(mTuning, 0, "Respiradouros");
					        Tunes[count++] = VENTS;
					    }
					    else if(slot == FRONTSIGN)
					    {
					        AddMenuItem(mTuning, 0, "Sinal fronteiro");
					        Tunes[count++] = FRONTSIGN;
					    }
					}
				}
	        }
	        break;
	    }
	}
	AddMenuItem(mTuning, 0, "Rodas");
	Tunes[count++] = WHEELS;
	AddMenuItem(mTuning, 0, "Nitro");
	Tunes[count++] = NITROS;
	AddMenuItem(mTuning, 0, "Estereo");
	Tunes[count++] = STEREO;
	AddMenuItem(mTuning, 0, "Hidraulica");
	Tunes[count++] = HYDRAULICS;
	AddMenuItem(mTuning, 0, "Sair");
	for(new ct = count; ct < 17; ct++)
	{
	    Tunes[ct] = -1;
	}
	for(new t = 0; t < 17; t++)
	{
	    printf("Tunes[%d] = %d", t, Tunes[t]);
	}
	ShowMenuForPlayer(mTuning, playerid);
	SetPlayerControl(playerid, false);
	PodeSair[playerid] = 0;
	printf("Menu de tuning exibido para %s (veiculo = %d - modelo = %d)", PlayerName(playerid), GetPlayerVehicleID(playerid), modelid);
	return 1;
}

stock InitPlayerTune(playerid)
{
    PlayerPlaySound(playerid, 1183, 0, 0, 0);
    SetPlayerInterior(playerid, 1);
    LinkVehicleToInterior(TuneVehicle, 1);
	SetPlayerPos(playerid, 608.7222, -24.7236, 1000.9203);
	SetPlayerFacingAngle(playerid, 0.0);
	SetVehiclePos(TuneVehicle, 615.0339, -3.8868, 1001.0250);
	SetVehicleZAngle(TuneVehicle, 270.2918);
	SetPlayerControl(playerid, false);
	TuneTimer = SetTimer("UpdateTuneCamera", 100, false);
}

stock StopPlayerTune(playerid)
{
    PlayerPlaySound(playerid, 1184, 0, 0, 0);
	KillTimer(TuneTimer);
    SetPlayerInterior(playerid, 0);
    LinkVehicleToInterior(TuneVehicle, 0);
    PutPlayerInVehicle(playerid, TuneVehicle, 0);
    SetVehiclePos(TuneVehicle, 1656.5331, -1826.1304, 13.6534);
    SetVehicleZAngle(TuneVehicle, 82.6385);
	TunnerID = -1;
	TuneVehicle = -1;
	SetCameraBehindPlayer(playerid);
	SetPlayerControl(playerid, true);
}

stock ShowPaintjobCostMenu(playerid, paintjobid)
{
	printf("Menu de paintjob (id = %d) exibido para %s (veiculo = %d - modelo = %d)", paintjobid, PlayerName(playerid), TuneVehicle, GetVehicleModel(TuneVehicle));
    ChangeVehiclePaintjob(TuneVehicle, paintjobid);
    DestroyMenuEx(mCusto);
    mCusto = CreateMenu(" ", 2, 2, 150, 100, 20);
    AddMenuItem(mCusto, 0, "Pintura");
    AddMenuItem(mCusto, 1, "$1000");
    ShowMenuForPlayer(mCusto, playerid);
    SetPlayerControl(playerid, false);
    TuneComponent = paintjobid;
    IsPaintJob = true;
}

stock ShowTuningCostMenu(playerid, componentid)
{
    printf("Menu de componente (id = %d) exibido para %s (veiculo = %d - modelo = %d)", componentid, PlayerName(playerid), TuneVehicle, GetVehicleModel(TuneVehicle));
	AddVehicleComponent(TuneVehicle, componentid);
	DestroyMenuEx(mCusto);
	mCusto = CreateMenu(" ", 2, 2, 150, 100, 20);
	AddMenuItem(mCusto, 0, Components[componentid - 1000][tuneName]);
	new s[32];
	format(s, 32, "$%d", GetComponentValue(componentid));
	AddMenuItem(mCusto, 1, s);
	AddMenuItem(mCusto, 0, "Cancelar");
	ShowMenuForPlayer(mCusto, playerid);
	SetPlayerControl(playerid, false);
	TuneComponent = componentid;
	IsPaintJob = false;
}

stock AddServerVehicle(modelid, Float:X, Float:Y, Float:Z, Float:ang, color1, color2, spawn_timer)
{
    new carid;
	if(spawn_timer == -1){
		carid = AddStaticVehicleEx(modelid, X, Y, Z, ang, color1, color2, -1);
	} else {
		carid = AddStaticVehicleEx(modelid, X, Y, Z, ang, color1, color2, spawn_timer);
	}
	if(fexist(VehicleFile(carid)))
	{
	    LoadVehicle(carid);
	}
	set(vStats[carid][VDono], "Servidor");
	set(vStats[carid][VChave], "Servidor");
	vStats[carid][Confiscado] = 0;
	vStats[carid][Dividas] = 0;
	vStats[carid][Modelo] = modelid;
	vStats[carid][CarPosX] = X;
    vStats[carid][CarPosY] = Y;
    vStats[carid][CarPosZ] = Z;
    vStats[carid][CarPosAng] = ang;
    if(!fexist(VehicleFile(carid)) || (vStats[carid][Color1] == 0 && vStats[carid][Color2] == 0))
    {
		vStats[carid][Color1] = color1;
		vStats[carid][Color2] = color2;
	}
	else
	{
	    ChangeVehicleColor(carid, vStats[carid][Color1], vStats[carid][Color2]);
	}
	new vpl[256];
	format(vpl, sizeof vpl, "RVL %d", carid);
	for(new c = 0; c < 8; c++)
	{
	    vStats[carid][VPlaca][c] = vpl[c];
	}
	SetVehicleNumberPlate(carid, vStats[carid][VPlaca]);
	switch(modelid)
	{
	    case 481, 509, 510, 594:
	    {
	        vStats[carid][Combustivel] = -1;
	    }
	    default:
	    {
	        if(!fexist(VehicleFile(carid)) || (vStats[carid][Combustivel] < 0 || vStats[carid][Combustivel] > 100))
	        {
	            vStats[carid][Combustivel] = GetVehicleTanque(modelid);
	        }
	    }
	}
	return carid;
}

stock GetVehicleTanque(model)
{
	if(model > 399 && model  < 612)
	{
		for(new v = 0; v < sizeof(VehiclesData); v++)
		{
		    if(VehiclesData[v][vModelid] == model) return VehiclesData[v][vTanque];
		}
	}
	return 0;
}

public CarregarCarro(vehicleid)
{
	new tmp[128];
	set(tmp, VehicleFile(vehicleid));
	if(!fexist(tmp)) return 0;
	for(new ts = 0; ts < 17; ts++)
	{
 		if(vStats[vehicleid][Tuning][ts] != 0)
		{
		    new string[128];
		    format(string, sizeof string, "Componente %d adicionado no veículo %d (modelo: %d)", vStats[vehicleid][Tuning][ts], vehicleid, GetVehicleModel(vehicleid));
			print(string);
 			AddVehicleComponent(vehicleid, vStats[vehicleid][Tuning][ts]);
		}
	}
	if(vStats[vehicleid][Paintjob] != 0)
	{
	    new string[128];
	    format(string, sizeof string, "Paintjob %d adicionado no veículo %d (modelo: %d)", vStats[vehicleid][Paintjob] - 1, vehicleid, GetVehicleModel(vehicleid));
		print(string);
	    ChangeVehiclePaintjob(vehicleid, vStats[vehicleid][Paintjob] - 1);
	}
	if(vStats[vehicleid][Color1] != 0 && vStats[vehicleid][Color2] != 0)
	{
		ChangeVehicleColor(vehicleid, vStats[vehicleid][Color1], vStats[vehicleid][Color2]);
		printf("Cores %d/%d adicionadas no veiculo de ID %d (modelo: %d)", vStats[vehicleid][Color1], vStats[vehicleid][Color2], vehicleid, GetVehicleModel(vehicleid));
	} else {
		ChangeVehicleColor(vehicleid, vStats[vehicleid][Color1], vStats[vehicleid][Color2]);
		printf("Cores 0/0 adicionadas no veiculo de ID %d (modelo: %d)", vehicleid, GetVehicleModel(vehicleid));
	}
	vStats[vehicleid][VPlaca][8] = EOS;
	SetVehicleNumberPlate(vehicleid, vStats[vehicleid][VPlaca]);
	return 1;
}

stock ComprarMunicao(playerid, slot, quantia)
{
	new w, a;
 	GetWeaponData(playerid, slot, w, a);
	if(w == 0)
	{
	    SendClientMessage(playerid, COLOR_GRAY, "Você não possui arma desse SLOT!");
	    SendClientMessage(playerid, COLOR_GRAY, "Veja as armas e os SLOTS em /slotarmas");
	    DisablePlayerCheckpoint(playerid);
		CheckpointStatus[playerid] = NONE;
	}
	else{
	    new string[128], custo;
	    if(slot == 2)
		{
	 		custo = quantia * 5;
		}
		else if(slot == 3)
		{
			custo = quantia * 40;
		}
		else if(slot == 4)
		{
	 		custo = quantia * 10;
		}
		else if(slot == 5)
		{
	 		custo = quantia * 30;
		}
		else if(slot == 6)
		{
	 		custo = quantia * 50;
		}
		if(GetPlayerServerMoney(playerid) < custo)
		{
			format(string,sizeof(string),"Você não possui dinheiro, CUSTO: $%d,00 dólares",custo);
			SendClientMessage(playerid, COLOR_GRAY, string);
		}
		else
		{
			GiveWeapon(playerid, w, quantia);
			AddPlayerMoney(playerid, -custo, -1);
			format(string,sizeof(string),"Você comprou %d munições para a arma de SLOT %d por $%d,00 dólares",quantia,slot,custo);
			SendClientMessage(playerid, COLOR_GREEN, string);
		}
	}
	SetPlayerControl(playerid, true);
}

stock ClearPlayerChat(playerid, lines)
{
	for(new i = 0; i < lines; i++)
		SendClientMessage(playerid, 0xFFFFFFFF, " ");

	return 1;
}

public VerArmas(playerid,plid){
	new weapon0,weapon1,weapon2,weapon3,weapon4,weapon5,weapon6,weapon7,weapon8,weapon9,weapon10,weapon11,weapon12,ammo0,ammo1,ammo2,ammo3,ammo4,ammo5,ammo6,ammo7,ammo8,ammo9,ammo10,ammo11,ammo12,string[128];
    GetWeaponData(plid,0,weapon0,ammo0);
	GetWeaponData(plid,1,weapon1,ammo1);
	GetWeaponData(plid,2,weapon2,ammo2);
	GetWeaponData(plid,3,weapon3,ammo3);
	GetWeaponData(plid,4,weapon4,ammo4);
	GetWeaponData(plid,5,weapon5,ammo5);
	GetWeaponData(plid,6,weapon6,ammo6);
	GetWeaponData(plid,7,weapon7,ammo7);
	GetWeaponData(plid,8,weapon8,ammo8);
	GetWeaponData(plid,9,weapon9,ammo9);
	GetWeaponData(plid,10,weapon10,ammo10);
	GetWeaponData(plid,11,weapon11,ammo11);
	GetWeaponData(plid,12,weapon12,ammo12);
	SendClientMessage(playerid, COLOR_JUIZ, "|===============================| ARMAS |===============================|");
    SendClientMessage(plid, COLOR_JUIZ, "|===============================| ARMAS |===============================|");
	format(string,sizeof(string),"Arma de slots 0: %s com %d munições | Arma de slot 1: %s com %d munições | Arma de slot 2: %s com %d munições",RPGWeapons[weapon0][Info_ArmaNome],ammo0,RPGWeapons[weapon1][Info_ArmaNome],ammo1,RPGWeapons[weapon2][Info_ArmaNome],ammo2);
	SendClientMessage(playerid, COLOR_WHITE, string);
	SendClientMessage(plid, COLOR_WHITE, string);
	format(string,sizeof(string),"Arma de slots 3: %s com %d munições | Arma de slot 4: %s com %d munições | Arma de slot 5: %s com %d munições",RPGWeapons[weapon3][Info_ArmaNome],ammo3,RPGWeapons[weapon4][Info_ArmaNome],ammo4,RPGWeapons[weapon5][Info_ArmaNome],ammo5);
	SendClientMessage(playerid, COLOR_WHITE, string);
	SendClientMessage(plid, COLOR_WHITE, string);
	format(string,sizeof(string),"Arma de slots 6: %s com %d munições | Arma de slot 7: %s com %d munições | Arma de slot 8: %s com %d munições",RPGWeapons[weapon6][Info_ArmaNome],ammo6,RPGWeapons[weapon7][Info_ArmaNome],ammo7,RPGWeapons[weapon8][Info_ArmaNome],ammo8);
	SendClientMessage(playerid, COLOR_WHITE, string);
	SendClientMessage(plid, COLOR_WHITE, string);
	format(string,sizeof(string),"Arma de slots 9: %s com %d munições | Arma de slot 10: %s com %d munições | Arma de slot 11: %s com %d munições",RPGWeapons[weapon9][Info_ArmaNome],ammo9,RPGWeapons[weapon10][Info_ArmaNome],ammo10,RPGWeapons[weapon11][Info_ArmaNome],ammo11);
	SendClientMessage(playerid, COLOR_WHITE, string);
	SendClientMessage(plid, COLOR_WHITE, string);
	format(string,sizeof(string),"Arma de slots 12: %s com %d munições",RPGWeapons[weapon12][Info_ArmaNome],ammo12);
	SendClientMessage(playerid, COLOR_WHITE, string);
	SendClientMessage(plid, COLOR_WHITE, string);
	format(string,sizeof(string),"Bomba relógio: %s", SimNao[pStats[plid][ClockBomb]]);
    SendClientMessage(playerid, COLOR_WHITE, string);
	SendClientMessage(plid, COLOR_WHITE, string);
	SendClientMessage(playerid, COLOR_JUIZ, "Informações de armas recebidas...");
	SendClientMessage(plid, COLOR_JUIZ, "Informações de armas mostradas...");
	Revistando[playerid] = 0;
	Revistado[plid] = 0;
	ClearAnimations(playerid);
	ClearAnimations(plid);
	AindaNaoAceitou[plid] = 0;
}

stock GetComponentValue(componentid)
{
    if(componentid < 1000 || componentid > 1193) return 0;
	return Components[componentid - 1000][tuneValue];
}

stock GetComponentSlot(componentid)
{
	if(componentid < 1000 || componentid > 1193) return -1;
	return Components[componentid - 1000][tuneSlot];
}

stock SaveComponent(vehicleid, componentid)
{
    printf("Componente %d salvo no veiculo %d (modelo: %d)", componentid, vehicleid, GetVehicleModel(vehicleid));

	vStats[vehicleid][Tuning][GetComponentSlot(componentid)] = componentid;

   	SetTimerEx("CarregarCarro", 500, 0, "d", vehicleid);
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	SendClientMessage(playerid, COLOR_MECANICO, "Essa loja não funciona aqui, vá na Virtual'Tuning.");
	RemoveVehicleComponent(vehicleid, componentid);
	CarregarCarro(vehicleid);
	return 1;
}

stock SalvarPlaca(vehicleid,string[])
{
	new tmp[128];
	set(tmp,VehicleFile(vehicleid));
	if(fexist(tmp))
	{
	    new p[64];
	    set(p, string);
		p[8] = EOS;
		set(vStats[vehicleid][VPlaca],p);
		SetVehicleNumberPlate(vehicleid,p);
	}
	else
	{
		printf("Não conseguimos salvar a placa do veiculo %d",vehicleid);
		printf("Pois seu arquivo não foi encontrado");
	}
}

public SetPlayerCameraClass(playerid,cameraid){
	if(Logado[playerid] == 0) {
    	ClearAnimations(playerid);
		FazendoStrip[playerid] = 0;
    	FST[playerid] = 0;
		if(!TimerStrip[playerid]) { }
		else { KillTimer(TimerStrip[playerid]); }
		SetPlayerCameraPos(playerid,C_Cameras[cameraid][C_CamPosX],C_Cameras[cameraid][C_CamPosY],C_Cameras[cameraid][C_CamPosZ]);
		SetPlayerCameraLookAt(playerid,C_Cameras[cameraid][C_CamLookX],C_Cameras[cameraid][C_CamLookY],C_Cameras[cameraid][C_CamLookZ]);
		SetPlayerPos(playerid,C_Cameras[cameraid][C_PlayerPosX],C_Cameras[cameraid][C_PlayerPosY],C_Cameras[cameraid][C_PlayerPosZ]);
		SetPlayerFacingAngle(playerid,C_Cameras[cameraid][C_PlayerPosAng]);
		SetPlayerInterior(playerid,C_Cameras[cameraid][C_PlayerInt]);
		SetPlayerSkin(playerid,C_Cameras[cameraid][C_Skin]);
		if(cameraid == 1){
    	    ApplyAnimation(playerid,"STRIP","STR_Loop_A",4.1,0,1,1,1,1);
			FazendoStrip[playerid] = 1;
			TimerStrip[playerid] = SetTimerEx("FazendoStripTease",100,false,"d",playerid);
		}
		if(cameraid == 3){
			ApplyAnimation(playerid,"PED","ARRESTgun",4.1,0,1,1,1,1);
		}
		if(cameraid == 4){
			ApplyAnimation( playerid,"ped", "fucku", 4.1, 0, 1, 1, 1, 1 );
		}
		if(cameraid == 6){
		    ApplyAnimation(playerid,"COP_AMBIENT","Coplook_in",4.1,0,1,1,1,1);
		    ApplyAnimation(playerid,"COP_AMBIENT","Coplook_in",4.1,0,1,1,1,1);
		}
		if(cameraid == 7){
			ApplyAnimation(playerid,"GRAFFITI","graffiti_Chkout",4.1,0,1,1,1,1);
			ApplyAnimation(playerid,"GRAFFITI","graffiti_Chkout",4.1,0,1,1,1,1);
		}
		if(cameraid == 8){
			ApplyAnimation(playerid,"SHOP","SHP_Gun_Threat",4.1,0,1,1,1,1);
			ApplyAnimation(playerid,"SHOP","SHP_Gun_Threat",4.1,0,1,1,1,1);
			ApplyAnimation(playerid,"SHOP","SHP_Gun_Threat",4.1,0,1,1,1,1);
		}
		if(cameraid == 11){
		    ApplyAnimation(playerid,"benchpress","gym_bp_celebrate",4.1,0,1,1,1,1);
		}
		if(cameraid == 13){
			ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_in",4.1,0,1,1,1,1);
			ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_in",4.1,0,1,1,1,1);
		}
		if(cameraid == 14){
			ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,1,1);
		}
		if(cameraid == 15){
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		}
		AtivarMudancaClasse(playerid);
	}
}
stock AtivarMudancaClasse(playerid){
    KillTimer(CameraTimer[playerid]);
    if(Logado[playerid] == 0) {
		new rand = random(sizeof(C_Cameras));
		while(rand == CameraID[playerid]) {
			rand = random(sizeof(C_Cameras));
		}
		CameraID[playerid] = rand;
		CameraTimer[playerid] = SetTimerEx("SetPlayerCameraClass",10000,0,"dd",playerid,CameraID[playerid]);
	}
}
public ComecarCameras(playerid){
    if(Logado[playerid] == 0) {
    	TextDrawHideForPlayer(playerid,Bemvindo1);
    	TextDrawHideForPlayer(playerid,Bemvindo2);
    	TextDrawHideForPlayer(playerid,Bemvindo3);
    	TextDrawHideForPlayer(playerid,Bemvindo4);
    	new rand = random(sizeof(C_Cameras));
		while(rand == CameraID[playerid]) {
			rand = random(sizeof(C_Cameras));
		}
		CameraID[playerid] = rand;
		SetPlayerCameraClass(playerid,CameraID[playerid]);
		AtivarMudancaClasse(playerid);
	}
}
public OnPlayerRequestClass(playerid, classid)
{
    SetPlayerVirtualWorld(playerid,playerid+1);
	PlayerPlaySound(playerid, 1187, 0.0, 0.0, 0.0);
    TextDrawHideForPlayer(playerid,Bemvindo1);
    TextDrawHideForPlayer(playerid,Bemvindo2);
    TextDrawHideForPlayer(playerid,Bemvindo3);
    TextDrawHideForPlayer(playerid,Bemvindo4);
    TextDrawHideForPlayer(playerid,Speedo[playerid]);
    RemoveTextDrawArea(playerid);
    RemoveTextDrawHouse(playerid);
	ChangePlayerColor(playerid,COLOR_UNLOGGED);
	SetPlayerCameraClass(playerid,0);
	SetTimerEx("ShowTexts", 1000, 0, "d", playerid);
	if(Logado[playerid] == 1){
	    SpawnPlayer(playerid);
	}
	SetTimerEx("ComecarCameras",25000,0,"d",playerid);
}
public ShowTexts(playerid)
{
	if(IsPlayerConnected(playerid) && Logado[playerid] == 0)
	{
    	TextDrawShowForPlayer(playerid,Bemvindo1);
		TextDrawShowForPlayer(playerid,Bemvindo2);
		if(!fexist(PlayerFile(PlayerName(playerid))))
		{
	 		TextDrawShowForPlayer(playerid,Bemvindo3);
		}
		else
		{
			TextDrawShowForPlayer(playerid,Bemvindo4);
		}
	}
}
public FimDJ(playerid){
	KillTimer(TimerDJ[playerid]);
	SetCameraBehindPlayer(playerid);
    SM[playerid] = NONE;
    HaveDJ = 0;
    AddPlayerMoney(playerid,200,3);
    SetPlayerControl(playerid, true);
    SendClientMessage(playerid, COLOR_WHITE, "Fim de trabalho, obrigado por nos ajudar, aqui está seu dinheiro: $200");
}
public OnGameModeExit()
{
    for(new z = 0; z < sizeof zones; z++)
	{
	    GangZoneDestroy(GZ[z]);
	}
    for(new i = 0; i < MAX_SLOTS; i++){
		if(IsPlayerConnected(i) && Logado[i] == 1 && strlen(GetName[i]) > 0 && !compare(GetName[i],".")){
  			SavePlayer(GetName[i],i);
		    GetName[i][0] = EOS;
			TextDrawDestroy(Speedo[i]);
			TextDrawDestroy(TextArea[i]);
			TextDrawDestroy(TextHouse[i]);
		}
	}
    SaveCell("Utilidades/celulares.rpg");
    SalvarPastaGangZones("Utilidades/zones.rpg");
    SavePastaUtilitarios("Utilidades/utilitarios.cfg");
    SaveGangues();
    SaveJornais();
    SaveHotelFile();
	writelog("Reload Virtual Life RPG finalizado. Fechando log e salvando estatísticas dos usuários...");
  	for(new p=0;p<MAX_CASAS;p++){ SavePickup(p); }
 	for(new p=1;p<sizeof Propriedades;p++){ SaveProperty(p); }
 	for(new p=0;p<AmountServerVehicles + AmountPlayerVehicles;p++){ SaveVehicle(p); }
 	TextDrawDestroy(FlashAction);
 	TextDrawDestroy(TextData[0]);
 	TextDrawDestroy(TextData[1]);
 	TextDrawDestroy(TextVL);
 	TextDrawDestroy(Bemvindo1);
 	TextDrawDestroy(Bemvindo2);
 	TextDrawDestroy(Bemvindo3);
 	TextDrawDestroy(Bemvindo4);
 	TextDrawDestroy(BarFome[0]);
 	for(new f = 1; f < sizeof BarFome; f++)
 	{
 	    TextDrawDestroy(TextFome[f - 1]);
 	    TextDrawDestroy(BarFome[f]);
 	}
 	DestroyMenu(mDonuts);
 	DestroyMenu(BurgerShot);
 	DestroyMenu(CluckinBell);
    DestroyMenu(mCusto);
 	DestroyMenu(mTuning);
	DestroyMenu(Weapons);
	DestroyMenu(WSlot2);
	DestroyMenu(WSlot3);
	DestroyMenu(WSlot4);
	DestroyMenu(WSlot5);
	DestroyMenu(WSlot6);
	DestroyMenu(WColete);
	DestroyMenu(WCamuflagem);
	DestroyMenu(WRocket);
	DestroyMenu(WClockBomb);
	DestroyMenu(WFlash);
	DestroyMenu(CasaOpc);
	DestroyMenu(DiasAluguel1);
	DestroyMenu(DiasAluguel2);
	DestroyMenu(DiasAluguel3);
	DestroyMenu(ConfirmarProf);
	DestroyMenu(Outros);
	DestroyMenu(ComidaLoja);
	DestroyMenu(Eletrodomesticos);
	DestroyMenu(QTMunicoes);
	DestroyMenu(Municoes);
	DestroyMenu(Sucos);
	DestroyMenu(mLunchs);
	DestroyMenu(CreditosCartao);
	DestroyMenu(Seguros);
	DestroyMenu(Cardapio1);
	DestroyMenu(Cardapio2);
	DestroyMenu(Cardapio3);
	DestroyMenu(Cardapio4);
	DestroyMenu(BancoOpc);
	DestroyMenu(BancoOpc2);
	DestroyMenu(CargaGeral);
	DestroyMenu(VendoDrogas);
	DestroyMenu(QuantidadeDrog);
	DestroyMenu(Bar);
	DestroyMenu(OpcoesAlarme);
	DestroyMenu(Profs);
	DestroyMenu(Casas);
	DestroyMenu(CasasSeguro);
	DestroyMenu(Abastecendo);
	DestroyMenu(Properties);
	DestroyMenu(ConfirmacaoNegocio);
	DestroyMenu(Sorvetes);
	DestroyMenu(Sorvetes2);
	DestroyMenu(cofremenu);
	DestroyMenu(drogascofre);
	DestroyMenu(Becks);
	DestroyMenu(BuyCar);
	writelog("Salvando a pasta de utilitários do gamemode... OK!");
	writelog("Salvando estatísticas dos usuários... Concluído!");
	writelog("Reload Virtual Life RpG finalizado com sucesso");
	print("Saindo do Gamemode RPG");
	return 1;
}
public SavingPlayers()
{
	for(new i = 0; i < MAX_SLOTS; i++)
	{
	    if(IsPlayerConnected(i) && Logado[i] == 1)
	    {
	    	SavePlayer(PlayerName(i), i);
		}
	}
}
public PegandoEquipamento(playerid)
{
	PegouEquipamento[playerid] = 0;
}
public OnPlayerConnect(playerid)
{
	new pname[24];
	GetPlayerName(playerid,pname,sizeof(pname));
	for(new lista = 0; lista < sizeof(BotNames); lista++){
		if(!strcmp(pname, BotNames[lista], true)){
			new str[128];
			SendClientMessage(playerid, COLOR_GRAY, "[VLR] Este nick está bloqueado, kickado.");
    		new rnumb = random(5000);
            format(str,sizeof(str),"Guest_%d",rnumb);
            SetPlayerName(playerid, str);
            Kick(playerid);
			break;
		}
	}
    new msg[128];
    format(msg,sizeof(msg),"%s entrou no servidor.",PlayerName(playerid));
	for(new i = 0; i < MAX_SLOTS; i++){
		if(i != playerid) SendClientMessage(i, COLOR_BLUE, msg);
	}
	format(msg,sizeof(msg),"%s entra no servidor, com o ID %d.",PlayerName(playerid),playerid);
	writelog(msg);
	print(msg);
	if(strval(GetValue(PlayerFile(PlayerName(playerid)),"Banido")) == 1){
		SendClientMessage(playerid, COLOR_BLUE, "Você está banido do Virtual Life RPG.");
		SendClientMessage(playerid, COLOR_BLUE, "Se for inocente e quer provar, entre em contato com nós na comunidade ou MSN ou no SITE");
        SendClientMessage(playerid, COLOR_WHITE, "Texugo - <texugo_cs@hotmail.com>");
        SendClientMessage(playerid, COLOR_WHITE, "Ravedutti - <rafael_msn_7@hotmail.com>");
        SendClientMessage(playerid, COLOR_WHITE, "michael - <michael_felipe_436@hotmail.com>");
        SendClientMessage(playerid, COLOR_BLUE, "Esses são os membros mais ativos da equipe, você pode contatar um deles para explicar-se");
        SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "Atenciosamente equipe Virtual Life, obrigado...");
		return Kick(playerid);
	}
	Crimes(playerid);
	ParaAceitar[playerid] = ACEITAR_NADA;
	AdminText[playerid] = 1;
	PegouEquipamento[playerid] = 0;
	TentarSenha[playerid] = 0;
	RadarCheck[playerid] = 0;
	ReportPolice[playerid] = 0;
	TypingDate[playerid] = 0;
	ParteHistoria[playerid] = 0;
	RouboCarroForte[playerid] = 0;
	PlayerMoney[playerid] = 0;
	Logado[playerid] = 0;
	ChavePrisao[playerid][0] = 0;
	ChavePrisao[playerid][1] = 0;
	PayAgain[playerid] = 0;
	CorridaToI[playerid] = -1;
	UsingChaveMestra[playerid] = -1;
	TellPublico[playerid] = -1;
	Terminal[playerid] = -1;
	CarroAlugado[playerid] = -1;
	PropriedadeContrato[playerid] = -1;
	PropriedadeEscolhida[playerid] = -1;
	JogadorRastreamento[playerid] = -1;
	Sex2a2[playerid] = -1;
	TempoVicio[playerid] = 75;
	CarroEntrega[playerid] = -1;
	Entrevista[playerid][3] = -1;
	Entrevista[playerid][4] = -1;
	GiveDocs[playerid] = -1;
	ReceiveDocs[playerid] = -1;
	GetPickupHouse[playerid] = -1;
	PlayerHotel[playerid] = -1;
	VeiculoTrabalho[playerid] = -1;
	SetPlayerVirtualWorld(playerid,0);
	ChangePlayerColor(playerid,COLOR_UNLOGGED);
    if(!fexist(PlayerFile(PlayerName(playerid)))){
		format(msg,sizeof(msg),"Olá %s seja bem-vindo ao Virtual Life RPG Server",PlayerName(playerid));
		SendClientMessage(playerid, COLOR_BLUE, msg);
		SendClientMessage(playerid, COLOR_WHITE, "O Virtual Life RPG é um gamemode que representa a vida real.");
		SendClientMessage(playerid, COLOR_WHITE, "Aqui você obterá um emprego, uma casa, carros, móveis, propriedades, tudo dependendo de sua condição financeira.");
		SendClientMessage(playerid, COLOR_WHITE, "Seu objetivo aqui é ir evoluindo de classe social, e junto curtir os lazeres(eventos) que oferecemos.");
		SendClientMessage(playerid, COLOR_WHITE, "Se cometer crimes, terá que resolver as contas com a policia, mas você também pode tentar escapar da lei.");
		SendClientMessage(playerid, COLOR_WHITE, "Ou seja é importante que saiba que aqui é proibido Death-Match(DM).");
		SendClientMessage(playerid, COLOR_PALHA, "Comados principais no anúncio ao lado >>>");
		SendClientMessage(playerid, COLOR_WHITE, "Aguarde um momento para se registrar...");
	} else {
		format(msg,sizeof(msg),"Olá %s, seja bem-vindo novamente ao Virtual Life RPG Server",PlayerName(playerid));
		SendClientMessage(playerid, COLOR_BLUE, msg);
		SendClientMessage(playerid, COLOR_WHITE, "Aguarde um momento para se logar...");
	}
    NaoLogar[playerid] = 1;
	TimerLogin[playerid] = SetTimerEx("StartLogin",5000,0,"d",playerid);
	return 1;
}
public StartLogin(playerid){
    KillTimer(TimerLogin[playerid]);
	NaoLogar[playerid] = 0;
	if(fexist(PlayerFile(PlayerName(playerid)))){
		SendClientMessage(playerid, COLOR_JUIZ, "Você já tem registro. Por favor faça login com /logar [senha].");
	}
	else if(!fexist(PlayerFile(PlayerName(playerid)))) {
		SendClientMessage(playerid, COLOR_JUIZ, "Registre-se, faça a história, leia o tutorial e VIVA SUA VIDA. Espero que tenha um Bom Jogo.");
		TimerLogin[playerid] = SetTimerEx("MensagemRegistro",2000,0,"d",playerid);
	}
}
public MensagemRegistro(playerid){
    KillTimer(TimerLogin[playerid]);
	if(!fexist(PlayerFile(PlayerName(playerid)))) {
		SendClientMessage(playerid, COLOR_GRAY, "Você não tem registro. Por favor registre-se digitando /registrar [senha].");
	}
}
public OnPlayerRequestSpawn(playerid)
{
	if(!Logado[playerid]) SendClientMessage(playerid,COLOR_GRAY,"Não é possivel entrar no jogo. Por favor logue-se ou registre-se.");
	else LogarPlayer(playerid);
    return 0;
}

public OnPlayerDisconnect(playerid, reason)
{
	if(CarroAlugado[playerid] != -1)
	{
		SetVehicleToRespawn(CarroAluguel[CarroAlugado[playerid]]);
	}
	if(JuizTribunal != -1)
	{
	    if(JuizTribunal == playerid || Audiencia[0] == playerid || Audiencia[1] == playerid)
	    {
	        new str[128], plid = Audiencia[0], playa = Audiencia[1];
	        format(str, sizeof str, "[TRIBUNAL] O julgamento foi encerrado devido à %s ter saído do servidor.", PlayerName(playerid));
			SendClientMessage(JuizTribunal, COLOR_JUIZ, str);
			SendClientMessage(playa, COLOR_JUIZ, str);
			SendClientMessage(plid, COLOR_JUIZ, str);
			GameTextForPlayer(JuizTribunal, "~g~~h~julgamento encerrado", 3000, 0);
			GameTextForPlayer(plid, "~g~~h~julgamento encerrado", 3000, 0);
			GameTextForPlayer(playa, "~g~~h~julgamento encerrado", 3000, 0);
			if(Advogados[0] != -1)
			{
			    SendClientMessage(Advogados[0], COLOR_JUIZ, str);
			    Advogados[0] = -1;
			}
			if(Advogados[1] != -1)
			{
                SendClientMessage(Advogados[1], COLOR_JUIZ, str);
			    Advogados[1] = -1;
			}
			if(pStats[plid][Preso] == 1 && plid != playerid)
			{
			    SetPlayerFacingAngle(plid, 0);
				SetPlayerInterior(plid, 6);
				PrisaoTimer[plid][0] = SetTimerEx("AvisoTempoRestante",60000, 0, "d", plid);
				SetPlayerPos(plid, 264.3445, 77.8834, 1001.0391);
				SendClientMessage(plid, COLOR_JUIZ, "[TRIBUNAL] Julgamento encerrado, bem-vindo à cela.");
				if(pStats[plid][Fianca] > 0)
				{
		    		format(str, sizeof str, "Você pode pagar fiança no valor de $%d,00 dólares, use /pagarfianca.", pStats[plid][Fianca]);
		    		SendClientMessage(plid, COLOR_WHITE, str);
				}
			}
			if(pStats[playa][Preso] == 1 && playa != playerid)
			{
			    SetPlayerFacingAngle(playa, 0);
				SetPlayerInterior(playa, 6);
				PrisaoTimer[playa][0] = SetTimerEx("AvisoTempoRestante",60000, 0, "d", playa);
				SetPlayerPos(playa, 264.3445, 77.8834, 1001.0391);
				SendClientMessage(playa, COLOR_JUIZ, "[TRIBUNAL] Julgamento encerrado, bem-vindo à cela.");
				if(pStats[playa][Fianca] > 0)
				{
		    		format(str, sizeof str, "Você pode pagar fiança no valor de $%d,00 dólares, use /pagarfianca.", pStats[playa][Fianca]);
		    		SendClientMessage(playa, COLOR_WHITE, str);
				}
			}
			SetPlayerControl(playa, true);
			SetPlayerControl(plid, true);
			JuizTribunal = -1;
			Audiencia[0] = -1;
			Audiencia[1] = -1;
	    }
		else if(Advogados[0] == playerid)
		{
		    SendClientMessage(JuizTribunal, COLOR_JUIZ, "[TRIBUNAL] O Advogado do jogador 1 saiu do servidor, foi lhe concedido o direito de declarar outro advogado.");
		    SendClientMessage(Audiencia[0], COLOR_JUIZ, "[TRIBUNAL] Seu advogado saiu do servidor, você tem o direito de declarar outro advogado.");
            SendClientMessage(Audiencia[0], COLOR_JUIZ, "[TRIBUNAL] Use /meuadvogado [id]");
			Advogados[0] = -1;
		}
		else if(Advogados[1] == playerid)
		{
		    SendClientMessage(JuizTribunal, COLOR_JUIZ, "[TRIBUNAL] O Advogado do jogador 2 saiu do servidor, foi lhe concedido o direito de declarar outro advogado.");
		    SendClientMessage(Audiencia[1], COLOR_JUIZ, "[TRIBUNAL] Seu advogado saiu do servidor, você tem o direito de declarar outro advogado.");
		    SendClientMessage(Audiencia[1], COLOR_JUIZ, "[TRIBUNAL] Use /meuadvogado [id]");
			Advogados[1] = -1;
		}
	}
	SetPlayerControl(playerid, true);
	if(CtgDead[playerid] < 1)
	{
	    pStats[playerid][Morrendo] = 0;
	}
	if(VoteKickPlayer == playerid)
	{
		SendClientMessageToAll(COLOR_PALHA, "Votação encerrada, o jogador saiu do servidor.");
		Votes = 0;
		VoteKickPlayer = -1;
		for(new i = 0; i < MAX_SLOTS; i++)
		{
		    Voted[i] = 0;
		}
		PlayerCount = 0;
		KillTimer(VoteKickTimer);
	}
	if(Sequestro[playerid] == 1)
	{
	    DisablePlayerCheckpoint(Sequestrador[playerid]);
	    SendClientMessage(Sequestrador[playerid], COLOR_WHITE, "Sequestro Falhado, o jogador saiu do servidor...");
	    KillTimer(TimerSequestro[Sequestrador[playerid]]);
	    EstouComSequestro[Sequestrador[playerid]] = 0;
	    Sequestro[playerid] = 0;
	    Amarrado[playerid] = 0;
	    AmarradoInfo[playerid][0] = 0;
	    AmarradoInfo[Sequestrador[playerid]][1] = 0;
	    Sequestrador[playerid] = 0;
	}
	if(EstouComSequestro[playerid] == 1)
	{
	    DisablePlayerCheckpoint(playerid);
	    SendClientMessage(AmarradoInfo[playerid][1], COLOR_WHITE, "Pode se considerar sortudo, o sequestrador saiu do servidor e você está livre...");
	    KillTimer(TimerSequestro[playerid]);
	    EstouComSequestro[playerid] = 0;
	    Sequestro[AmarradoInfo[playerid][1]] = 0;
	    Amarrado[AmarradoInfo[playerid][1]] = 0;
	    AmarradoInfo[AmarradoInfo[playerid][1]][0] = 0;
	    Sequestrador[AmarradoInfo[playerid][1]] = 0;
	    SetPlayerControl(AmarradoInfo[playerid][1], true);
	    AmarradoInfo[playerid][1] = 0;
	}
	if(Algemado[playerid] == 1)
	{
	    DisablePlayerCheckpoint(AlgemaInfo[playerid][0]);
	    SendClientMessage(AlgemaInfo[playerid][0], COLOR_WHITE, "Prisão Falhada, o jogador saiu do servidor...");
	    Algemou[AlgemaInfo[playerid][0]] = 0;
	    Algemado[playerid] = 0;
	    AlgemaInfo[AlgemaInfo[playerid][0]][1] = 0;
	    AlgemaInfo[playerid][0] = 0;
	}
	if(Algemou[playerid] == 1)
	{
	    DisablePlayerCheckpoint(playerid);
	    SendClientMessage(AlgemaInfo[playerid][1], COLOR_WHITE, "Pode se considerar sortudo, o policial saiu do servidor e você está livre...");
	    Algemou[playerid] = 0;
	    Algemado[AlgemaInfo[playerid][1]] = 0;
	    AlgemaInfo[AlgemaInfo[playerid][1]][0] = 0;
	    Sequestrador[AlgemaInfo[playerid][1]] = 0;
	    SetPlayerControl(AlgemaInfo[playerid][1], true);
	    AlgemaInfo[playerid][1] = 0;
	}
	if(Taximetro[playerid][0] == 1)
	{
	    SendClientMessage(Taximetro[playerid][1], COLOR_YELLOW, "Seu passageiro saiu do servidor e você recebeu o valor da corrida até aqui.");
		PlayerPay(playerid, Taximetro[playerid][1], PrecoCorrida[playerid]);
		PrecoCorrida[playerid] = 0;
		Taximetro[playerid][1] = 0;
		Taximetro[playerid][0] = 0;
	}
	if(MTaximetro[playerid][0] == 1)
	{
	    SendClientMessage(MTaximetro[playerid][1], COLOR_YELLOW, "Seu passageiro saiu do servidor e você recebeu o valor da corrida até aqui.");
		PlayerPay(playerid, MTaximetro[playerid][1], PrecoCorrida[playerid]);
		PrecoCorrida[playerid] = 0;
		MTaximetro[playerid][1] = 0;
		MTaximetro[playerid][0] = 0;
	}
	if(NoTeste[playerid] == 1){
	    JaExisteAuto = 0;
		NoTeste[playerid] = 0;
	    AceitouTeste[playerid] = 0;
	    SendClientMessageToAll(COLOR_INSTRUTOR, "O Teste da Auto-Escola está aberto devido ao jogador que o estava realizando sair do servidor.");
	}
	if(Logado[playerid] == 1){
		new Ano,Mes,Dia;
		getdate(Ano,Mes,Dia);
		format(pStats[playerid][DataUltima],20,"%d/%d/%d",Dia,Mes,Ano);
	    if(pStats[playerid][HistoriaFeita] == 1 && MiniGame[playerid] == 0 && CarregouArmas[playerid] == 1 && !pStats[playerid][Preso] && !pStats[playerid][Morrendo]){
			if(NaCasa[playerid] == 0)
			{
				GetPlayerPos(playerid,pStats[playerid][LastPosX],pStats[playerid][LastPosY],pStats[playerid][LastPosZ]);
				pStats[playerid][LastInterior] = GetPlayerInterior(playerid);
			}
			else
			{
			    pStats[playerid][LastPosX] = EntradaCasa[playerid][0];
			    pStats[playerid][LastPosY] = EntradaCasa[playerid][1];
			    pStats[playerid][LastPosZ] = EntradaCasa[playerid][2];
                pStats[playerid][LastInterior] = 0;
			}
			pStats[playerid][ContinuarPos] = 1;
			SaveWeapons(playerid);
		}
		for(new i = 0; i < 13; i++){
			GetWeapons[playerid][i][0] = 0;
			GetWeapons[playerid][i][1] = 0;
		}
		SavePlayer(PlayerName(playerid),playerid);
	}
 	if(DerbyIniciado[playerid] == 1 && PlayerDerby[playerid] == 1){
       	DerbyIniciado[playerid] = 0;
	   	new string[128];
		format(string, sizeof(string), "[ESTÁDIO] %s foi desclassificado por sair do servidor, atual posição: %d/%d", PlayerName(playerid),QtDerbeiro(),contagemof);
		SendClientMessageToAll(COLOR_PALHA, string);
		PlayerDerby[playerid] = 0;
	}
	if(Entrevista[playerid][1] == 1){
	    Entrevista[Entrevista[playerid][3]][2]=0;
	    Entrevista[playerid][1]=0;
	    SetCameraBehindPlayer(playerid);
	    SetCameraBehindPlayer(Entrevista[playerid][3]);
	    SetPlayerControl(playerid, true);
	    SetPlayerControl(Entrevista[playerid][3], true);
	}
	if(Entrevista[playerid][2] == 1){
	    Entrevista[Entrevista[playerid][4]][1]=0;
	    Entrevista[playerid][2]=0;
	    SetCameraBehindPlayer(playerid);
	    SetCameraBehindPlayer(Entrevista[playerid][4]);
	    SetPlayerControl(playerid, true);
	    SetPlayerControl(Entrevista[playerid][4], true);
	}
	if(Algemado[playerid] == 1){
	    new plid=AlgemaInfo[playerid][0];
	    DisablePlayerRaceCheckpoint(plid);
		RaceCheckpointStatus[plid] = RNONE;
	    SendClientMessage(plid, COLOR_GRAY, "O jogador saiu do servidor...");
    	SetPlayerControl(playerid, true);
	    Algemado[playerid]=0;
		Algemou[plid]=0;
		LevandoJogador[plid]=0;
		GetCopCars[playerid]=INVALID_VEHICLE_ID;
		AlgemaInfo[playerid][0]=-1;
	    AlgemaInfo[plid][1]=-1;
	    PodeAlgemar[plid]=0;
	}
	if(TunnerID == playerid)
	{
		StopPlayerTune(playerid);
	}
	CarregouArmas[playerid] = 0;
	new msg[128];
	switch(reason)
	{
		case 0: format(msg,sizeof(msg),"%s saiu do servidor (Queda de conexao)",PlayerName(playerid));
		case 1: format(msg,sizeof(msg),"%s saiu do servidor (Saiu)",PlayerName(playerid));
		case 2: format(msg,sizeof(msg),"%s saiu do servidor (Kickado/Banido)",PlayerName(playerid));
		default: format(msg,sizeof(msg),"%s saiu do servidor",PlayerName(playerid));
	}
	SendClientMessageToAll(COLOR_BLUE,msg);
	print(msg);
	VeiculoTrabalho[playerid] = -1;
    KillTimer(HourTimer[playerid]);
    KillTimer(RetomarTrabalho[playerid]);
    KillTimer(CameraTimer[playerid]);
	KillTimer(PrisaoTimer[playerid][0]);
	KillTimer(TempoMandato[playerid]);
   	KillTimer(TempoAluguel[playerid]);
	KillTimer(TempoFilmando[playerid]);
    KillTimer(TempoFilmando2[playerid]);
	KillTimer(TempoRastreamento[playerid]);
	KillTimer(TempoInternando[playerid]);
	KillTimer(TempoCaixaMensagem[playerid][0]);
	KillTimer(TempoCaixaMensagem[playerid][1]);
	KillTimer(TempoHoraExtra2[playerid]);
	KillTimer(TempoHoraExtra[playerid]);
    KillTimer(TempoLeisTransito[playerid]);
    KillTimer(TempoRua[playerid]);
    KillTimer(TempoPreso[playerid]);
	KillTimer(TempoCozinhando[playerid]);
 	KillTimer(TempoAnuncio[playerid]);
	KillTimer(TimerDJ[playerid]);
	KillTimer(TimerDeath[playerid]);
	KillTimer(TimerLogin[playerid]);
	KillTimer(TimerStrip[playerid]);
	KillTimer(TimerDivida[playerid]);
	KillTimer(TimerPegarEquipamento[playerid]);
	KillTimer(TimerConserto[playerid]);
	KillTimer(TimerContinuacaoPos[playerid]);
	KillTimer(TimerCard[playerid]);
	KillTimer(TimerCancel[playerid]);
	KillTimer(TimerMoney[playerid]);
	KillTimer(TimerBlind[playerid]);
	KillTimer(TimerRoubo[playerid]);
	KillTimer(TimerCamuflagem[playerid]);
	KillTimer(TimerDoenca[playerid][0]);
	KillTimer(TimerDoenca[playerid][1]);
	KillTimer(TimerReceive[playerid][0]);
	KillTimer(TimerReceive[playerid][1]);
	KillTimer(TimerDeathEffect[playerid]);
	TextDrawHideForPlayer(playerid,Speedo[playerid]);
   	TextDrawHideForPlayer(playerid,Bemvindo1);
	TextDrawHideForPlayer(playerid,Bemvindo2);
	TextDrawHideForPlayer(playerid,Bemvindo3);
	TextDrawHideForPlayer(playerid,Bemvindo4);
	TextDrawHideForPlayer(playerid,TextVL);
	TextDrawHideForPlayer(playerid,TextData[0]);
	TextDrawHideForPlayer(playerid,TextData[1]);
	TextDrawHideForPlayer(playerid,DeathAction);
	TextDrawHideForPlayer(playerid,DeathText);
	TextDrawHideForPlayer(playerid,FlashAction);
	TextDrawHideForPlayer(playerid, BarFome[0]);
	for(new f = 1; f < sizeof BarFome; f++)
	{
	    TextDrawHideForPlayer(playerid, TextFome[f - 1]);
	    TextDrawHideForPlayer(playerid, BarFome[f]);
	}
   	RemoveTextDrawArea(playerid);
   	RemoveTextDrawHouse(playerid);
	if(EmLigacao[playerid] == 1){
	    EmLigacao[playerid]=0;
	    EmLigacao[CalledID[playerid]]=0;
	    SetPlayerSpecialAction(CalledID[playerid],SPECIAL_ACTION_STOPUSECELLPHONE);
	    SendClientMessage(CalledID[playerid],COLOR_GRAY,"Ligação terminada.");
		if(CobrancaCall[playerid] == 0){
		    KillTimer(CellTimer[CalledID[playerid]]);
		}
		if(CobrancaCall[playerid] == 1){
		    KillTimer(CellTimer[playerid]);
		}
	}
	if(SM[playerid] == DJ){
	    HaveDJ = 0;
	    SM[playerid] = NONE;
	}
	if(Rastreando[playerid] == 1){
		SendClientMessage(Rastreador[playerid], COLOR_GRAY, "O jogador se desconectou e o rastreador foi desativado!");
		DesativarRastreador(playerid);
	}
	if(Rastreado[playerid] == 1){
	    SendClientMessage(Rastreador2[playerid], COLOR_GRAY, "O jogador se desconectou e o seu rastreador foi desativado!");
	    DesativarRastreador(Rastreador2[playerid]);
	}
	if(ComDocs[playerid] == 1){
	    SendClientMessage(GiveDocs[playerid], COLOR_JUIZ, "Seus documentos foram devolvidos pois o policial saiu do servidor!");
		EntregouDocs[GiveDocs[playerid]] = 0;
		ComDocs[playerid] = 0;
	}
	if(EntregouDocs[playerid] == 1){
	    SendClientMessage(ReceiveDocs[playerid], COLOR_WHITE, "Os documentos do outro jogador foram devolvidos para o dono pois ele saiu do servidor!");
		EntregouDocs[playerid] = 0;
		ComDocs[ReceiveDocs[playerid]] = 0;
	}
	if(ComVDocs[playerid] != 0){
		DocsVEntregue[ComVDocs[playerid]] = 0;
	    ComVDocs[playerid] = 0;
	}
	switch (Logado[playerid])
    {
        case 0:
		{
				format(msg,sizeof(msg),"%s (ID: %d) deixou o servidor sem se registrar/logar.",PlayerName(playerid),playerid);
				writelog(msg);
				printf("Jogador %s (ID: %d) deixou o servidor sem se registrar/logar",PlayerName(playerid),playerid);
		}
		case 1:
  		{
				format(msg,sizeof(msg),"%s (ID %d) está deixando o servidor. Salvando dados.",PlayerName(playerid),playerid);
				writelog(msg);
		 		printf("Jogador %s (%d) deixou o servidor. Seus dados foram salvos com sucesso.",PlayerName(playerid),playerid);
		}
    }
    for(new z = 0; z < sizeof(zones); z++){
		GangZoneHideForPlayer(playerid, GZ[z]);
	}
 	for(new i = 0; i < QtConvidados[playerid]; i++) Convidado[playerid][i] = INVALID_PLAYER_ID;
 	ParaAceitar[playerid] = ACEITAR_NADA;
	ConfiscandoVeiculo[playerid] = 0;
	AdminText[playerid] = 1;
	TentarSenha[playerid] = 0;
	PegouEquipamento[playerid] = 0;
	BankOpc[playerid] = 0;
	CarregouArmas[playerid] = 0;
	rcp[playerid] = 0;
	RaceCheckpointStatus[playerid] = RNONE;
	GetPickupHouse[playerid] = -1;
	JogadorRastreamento[playerid] = -1;
	RastreandoJogador[playerid] = 0;
	EquipeCTC[playerid] = 0;
	AgoraNoCTC[playerid] = 0;
	CelularBloqueado[playerid] = 0;
	AcabouMorrer[playerid] = 0;
	TempoVicio[playerid] = 75;
	MiniGame[playerid] = 0;
	Equipe[playerid] = 0;
	Capturado[playerid] = 0;
 	PChaveMestra[playerid] = 0;
	PodeSair[playerid] = 0;
    Convidando[playerid] = -1;
	profselection[playerid] = 0;
	PropostaConserto[playerid] = 0;
	Gritos[playerid] = 0;
	ivalorcasa[playerid] = 0;
	icarid[playerid] = 0;
	MotivoGranaID[playerid] = 0;
	NaAgenda[playerid] = 0;
	icor1[playerid] = 0;
	icor2[playerid] = 0;
	ComLeite[playerid] = 0;
	FazendoHoraExtra[playerid] = 0;
	Agendado[playerid] = 0;
	InComputer[playerid] = 0;
    iX[playerid] = 0.0;
    iY[playerid] = 0.0;
    iZ[playerid] = 0.0;
 	VeiculoConserto[playerid] = -1;
    NaCasa[playerid] = 0;
	QtConvidados[playerid] = 0;
	PickupEntradaCasa[playerid] = 0;
	VendedorProduto[playerid] = 0;
	TVligada[playerid] = 0;
	iang[playerid] = 0;
	Produto[playerid] = 0;
	CaixaPostal2[playerid] = 0;
	Frangos[playerid] = 0;
	Metro[playerid] = 0;
	TeorProduto[playerid] = 0;
	QtDrog[playerid] = 0;
	Pizzas[playerid] = 0;
	PedindoDemissao[playerid] = 0;
	ValorProduto[playerid] = 0;
	Peixes[playerid] = 0;
	OfertaDada[playerid] = 0;
    confirmacaosenha[playerid] = 0;
	Logado[playerid] = 0;
    Algemado[playerid] = 0;
	Algemou[playerid] = 0;
	AlgemaInfo[playerid][0] = -1;
	AlgemaInfo[playerid][1] = -1;
	GetCopCars[playerid] = INVALID_VEHICLE_ID;
   	Contrabando[playerid] = 0;
    Gritos[playerid] = 0;
	FazendoEmprestimo[playerid] = 0;
	EntregandoGrana[playerid] = 0;
	FazendoTesteRua[playerid] = 0;
	FazendoAutoTesteRua[playerid] = 0;
	AlimentoCozinhando[playerid] = 0;
	DepositandoGrana[playerid] = 0;
	Receita[playerid] = 0;
	GetPickupHouse[playerid] = 0;
	SacandoGrana[playerid] = 0;
	Camaroes[playerid] = 0;
    Frangos[playerid] = 0;
	senhaatual[playerid] = 0;
	OficializarParticipacao[playerid] = 0;
	Negociador[playerid] = 0;
	Pizzas[playerid] = 0;
	Curando[playerid] = 0;
	PlayerHotel[playerid] = -1;
	PropriedadeContrato[playerid] = -1;
	Carnes[playerid] = 0;
	PropriedadeEscolhida[playerid] = -1;
	Strogonoffes[playerid] = 0;
	kitmedico[playerid] = 0;
	PropriedadeSelecionada[playerid] = -1;
	ValorOferecido[playerid] = 0;
	Linguicas[playerid] = 0;
	GeralCar[playerid] = 0;
    Voted[playerid] = 0;
	SeEntregando[playerid] = 0;
	CarroAlugado[playerid] = -1;
   	PolicialApreendendo[playerid] = 0;
    LixoColetado[playerid] = 0;
	CarregamentoRoupas[playerid] = 0;
	NoTeste[playerid] = 0;
	ParteAnuncio[playerid] = 0;
	InstrutorOcupado[playerid] = 0;
	Rastreando[playerid] = 0;
	Chance[playerid] = 0;
	DinheiroConserto[playerid] = 0;
	AcabouAssistirTV[playerid] = 0;
	InstrutorNovo[playerid] = 0;
	envconvite[playerid] = -1;
	LiAsLeis[playerid] = 0;
	HoraExtra[playerid] = 0;
	Sequestrador[playerid] = -1;
	Rastreado[playerid] = 0;
	TomandoSorvete[playerid] = 0;
	EstouComSequestro[playerid] = 0;
	Sequestro[playerid] = 0;
	Cativeiro[playerid] = 0;
	PescaInProgress[playerid] = 0;
	ContrabandoCar[playerid] = 0;
	QtMilho[playerid] = 0;
	FazendaInProgress[playerid] = 0;
	Missao[playerid] = 0;
	EntregandoLatas[playerid] = 0;
	QtLeite[playerid] = 0;
	CatarLatinha[playerid] = 0;
	Receita[playerid] = 0;
	ContrabandoPassar[playerid] = 0;
	RaceCheckpointStatus[playerid] = RNONE;
	CheckpointStatus[playerid] = NONE;
	Contrabando[playerid] = 0;
	PodePegar[playerid] = 0;
	NaoSair[playerid] = 0;
	EntregaCarro[playerid] = 0;
	GangInvite[playerid] = 0;
	Pedras[playerid] = 0;
	Transparent[playerid] = 0;
	DinheiroConserto[playerid] = 0;
	PizzasEntregues[playerid] = 0;
	AntInt[playerid] = 0;
	Spectator[playerid] = -1;
	PlayerSpec[playerid] = -1;
	PropriedadeSelecionada[playerid] = -1;
	ComVDocs[playerid] = 0;
 	ComDocs[playerid] = 0;
	ReceiveDocs[playerid] = -1;
	ChavePrisao[playerid][0] = 0;
	ChavePrisao[playerid][1] = 0;
	EntregouDocs[playerid] = 0;
	Maconha[playerid] = 0;
	Heroina[playerid] = 0;
	Cocaina[playerid] = 0;
	GiveDocs[playerid] = -1;
	CocainaMao[playerid] = 0;
	MaconhaMao[playerid] = 0;
	HeroinaMao[playerid] = 0;
	MaconhaEsc[playerid] = 0;
	CocainaEsc[playerid] = 0;
	HeroinaEsc[playerid] = 0;
	SemCamisa[playerid] = 0;
	PlantandoDrogas[playerid] = 0;
	Prostitutacama[playerid] = -1;
	Transacama[playerid] = 0;
	FST[playerid] = 0;
	Prostitutacama2[playerid] = -1;
	FazendoStrip[playerid] = 0;
	Strip2[playerid] = 0;
	isTowtruck[playerid] = 0;
	Tutorial[playerid] = 0;
	EmLigacao[playerid] = 0;
	CobrancaCall[playerid] = 0;
	Chamando[playerid] = 0;
	VeiculoConserto[playerid] = -1;
	RingTone[playerid] = 0;
	CalledID[playerid] = -1;
	Prisioneiro[playerid] = -1;
	NoHotel[playerid] = 0;
	CarroEntrega[playerid] = -1;
	Mandato[playerid] = 0;
	Metendo[playerid] = 0;
	ComVDocs[playerid] = 0;
	ComDocs[playerid] = 0;
	EntregouDocs[playerid] = 0;
	Mudo[playerid] = 0;
	Entrevista[playerid][0] = 0;
	Entrevista[playerid][1] = 0;
	Entrevista[playerid][2] = 0;
	Entrevista[playerid][3] = -1;
	Entrevista[playerid][4] = -1;
	SetPlayerWeather(playerid, weatherprevisao);
}
public ApplyAnimCrack(playerid){
    ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
}
public OnPlayerSpawn(playerid){
    ReceivingLife[playerid] = 1;
	SetPlayerHealth(playerid, MAX_HEALTH);
	SetPlayerControl(playerid, true);
	SetPlayerVirtualWorld(playerid,0);
    KillTimer(CameraTimer[playerid]);
    ClearAnimations(playerid);
	TogglePlayerClock(playerid, 1);
	SetPlayerTime(playerid,HoraJogo,MinutoJogo);
	FazendoStrip[playerid] = 0;
 	FST[playerid] = 0;
	if(!TimerStrip[playerid]) { }
	else { KillTimer(TimerStrip[playerid]); }
	TextDrawHideForPlayer(playerid, TextVL);
    TextDrawShowForPlayer(playerid, TextVL);
    TextDrawHideForPlayer(playerid, BarFome[0]);
    for(new f = 1; f < sizeof BarFome; f++)
 	{
 	    TextDrawHideForPlayer(playerid, TextFome[f - 1]);
 	    TextDrawHideForPlayer(playerid, BarFome[f]);
 	}
 	TextDrawShowForPlayer(playerid, BarFome[0]);
    CreateGangZonesForAll();
    CameraID[playerid] = -1;
	zoneupdates[playerid] = 1;
	playerzone[playerid] = -1;
	AttackZone[playerid] = -1;
	if(OficializarParticipacao[playerid] == 1)
	{
	    SetPlayerCheckpoint(playerid, 2687.7869,-1690.4769,9.4502,5.0);
		CheckpointStatus[playerid] = DERBY;
	}
	if(MiniGame[playerid] == 1)
	{
	    if(Equipe[playerid] == 2)
	    {
	        SetPolicialPL(playerid);
	    }
	}
	if(MiniGame[playerid] == 2){
		SetPlayerCTCGroup(playerid,EquipeCTC[playerid]);
	}
	if(Capturado[playerid] == 1 && MiniGame[playerid] == 1 && Equipe[playerid] == 1){
		SetPlayerPos(playerid,-272.4936,-2146.8669,28.6770);
		ChangePlayerColor(playerid,COLOR_LADRAO);
		SetPlayerHealthEx(playerid, 5.0);
		SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] Você foi capturado, não saiá daqui!");
		return 1;
	}
	if(MiniGame[playerid] == 1 && Equipe[playerid] == 1) ChangePlayerColor(playerid, COLOR_LADRAO);
	if(MiniGame[playerid] == 1 && Equipe[playerid] == 2) ChangePlayerColor(playerid, COLOR_POLICIA);
	if(AcabouAssistirTV[playerid] == 1) return 0;
	new name[30];
	GetPlayerName(playerid, name, sizeof(name));
    PlayerPlaySound(playerid, 1188, 0.0, 0.0, 0.0);
	TextDrawHideForPlayer(playerid,Bemvindo1);
	TextDrawHideForPlayer(playerid,Bemvindo2);
	TextDrawHideForPlayer(playerid,Bemvindo3);
	TextDrawHideForPlayer(playerid,Bemvindo4);
	TextDrawHideForPlayer(playerid,TextData[0]);
	TextDrawHideForPlayer(playerid,TextData[1]);
	TextDrawHideForPlayer(playerid,DeathAction);
	TextDrawHideForPlayer(playerid,DeathText);
	TextDrawHideForPlayer(playerid,FlashAction);
 	SetPlayerWantedLevelColor(playerid);
	GangZoneShowForPlayer(playerid, PescaArea, COLOR_PESCADOR);
	GangZoneShowForPlayer(playerid, InstrutorArea, COLOR_INSTRUTOR);
	GangZoneShowForPlayer(playerid, DesmancheArea, COLOR_LIGHT_RED);
	GangZoneShowForPlayer(playerid, TaxiArea, COLOR_TAXISTA);
	GangZoneShowForPlayer(playerid, ProstitutaArea, COLOR_PROSTITUTA);
	GangZoneShowForPlayer(playerid, SorveteriaArea, COLOR_CLEAR_PINK);
	if(pStats[playerid][Morrendo] == 1 && Logado[playerid]){
	    SetPlayerPos(playerid, DeadPos[playerid][0], DeadPos[playerid][1], DeadPos[playerid][2]);
		SetPlayerInterior(playerid, InteriorDead[playerid]);
		SetPlayerHealthEx(playerid, 1);
		SetPlayerControl(playerid, false);
		ApplyAnimCrack(playerid);
		CtgDead[playerid] = 5;
		TimerDeath[playerid] = SetTimerEx("CtDead",100,0,"d",playerid);
		TextDrawBoxColor(DeathAction, 0xFF000000);
		TextDrawShowForPlayer(playerid, DeathAction);
		TimerDeathEffect[playerid] = SetTimerEx("DeathEffect", 1000, 0, "dd", playerid, 0);
	}
	if(!pStats[playerid][Preso] && !pStats[playerid][Morrendo] && MiniGame[playerid] == 0)
	{
		LoadWeapons(playerid);
	}
	CarregouArmas[playerid] = 1;
	if(pStats[playerid][Preso] == 1 && pStats[playerid][Morrendo] == 0){
	    new string[128];
	    SetPlayerHealthEx(playerid, MAX_HEALTH);
		SetPlayerWantedLevel(playerid, 0);
		CelularBloqueado[playerid] = 1;
		SetPlayerFacingAngle(playerid,0);
		SetPlayerInterior(playerid,6);
		PrisaoTimer[playerid][0]=SetTimerEx("AvisoTempoRestante",60000,0,"d",playerid);
		PrisaoTimer[playerid][1]=1;
		SetPlayerPos(playerid,264.3445,77.8834,1001.0391);
		ConfiscarArmas(playerid);
		ResetWeapons(playerid);
		format(string, sizeof string, "Você está preso, restam %d horas para você ser solto...", pStats[playerid][HorasPreso]);
		SendClientMessage(playerid, COLOR_CENTRAL, string);
		SendClientMessage(playerid, COLOR_WHITE, "[DELEGACIA] Suas armas sem porte foram fiscalizadas...");
		SendClientMessage(playerid, COLOR_WHITE, "Você tem o direito de iniciar um julgamento, basta entrar em contato com um Juiz.");
		if(pStats[playerid][Fianca] > 0)
		{
		    new str[128];
		    format(str, sizeof str, "Você pode pagar fiança no valor de $%d,00 dólares, use /pagarfianca.", pStats[playerid][Fianca]);
		    SendClientMessage(playerid, COLOR_WHITE, str);
		}
	 	for(new i=0; i<MAX_SLOTS; i++)
	 	{
			if(IsPlayerConnected(i) && pStats[i][Prof] == ADVOGADO && !pStats[i][Preso] && i != playerid)
			{
				format(string,sizeof(string), "[OAB] %s está preso, ofereça seus serviços à ele.",PlayerName(playerid));
				SendClientMessage(i, COLOR_ADVOGADO, string);
			}
		}
   	}
   	SetPlayerWantedLevelColor(playerid);
   	TimerReceive[playerid][1] = SetTimerEx("SetPlayerServerHealth", 5000, false, "d", playerid);
   	for(new v = AmountServerVehicles; v < AmountServerVehicles + AmountPlayerVehicles; v++)
   	{
   	    if(compare(PlayerName(playerid), vStats[v][VDono]))
   	    {
   	        SetVehicleParamsForPlayer(v, playerid, 0, 0);
   	    }
   	    else if(vStats[v][VTravas] == 2 && vStats[v][Trancado] == 1)
   	    {
   	        SetVehicleParamsForPlayer(v, playerid, 0, 1);
   	    }
   	}
	return 1;
}

public DeathEffect(playerid, count)
{
	KillTimer(TimerDeathEffect[playerid]);
	new c = count;
	new DeathAlpha[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF };
	if(c < 0x0) c = 0x0;
	if(c > 0xF) c = 0xF;
	TextDrawHideForPlayer(playerid, DeathAction);
	TextDrawBoxColor(DeathAction, 0xFF000000 | DeathAlpha[c]);
	TextDrawShowForPlayer(playerid, DeathAction);
	if(c < 0xF)
	{
	    TimerDeathEffect[playerid] = SetTimerEx("DeathEffect", 300, 0, "dd", playerid, count + 1);
	}
	else
	{
	    TextDrawShowForPlayer(playerid, DeathText);
	}
}

public SetPlayerServerHealth(playerid)
{
	KillTimer(TimerReceive[playerid][1]);
    if(IsPlayerConnected(playerid) && Logado[playerid] && pStats[playerid][Morrendo] == 0)
	{
		if(pStats[playerid][Vida] > 0)
		{
	    	SetPlayerHealth(playerid, pStats[playerid][Vida]);
		}
		SetPlayerArmour(playerid, pStats[playerid][Colete]);
		SendClientMessage(playerid, COLOR_JUIZ, "Vida atualizada.");
	}
	ReceivingLife[playerid] = 0;
}

stock CivilPlayer(playerid)
{
	if((pStats[playerid][Prof] == DESEMPREGADO) || (pStats[playerid][Prof] == BARMAN) || (pStats[playerid][Prof] == MOTORISTA_DE_ONIBUS) || (pStats[playerid][Prof] == PESCADOR) ||
	 	(pStats[playerid][Prof] == ENTREGADOR_PIZZA) || (pStats[playerid][Prof] == TAXISTA) || (pStats[playerid][Prof] == MOTO_TAXISTA) || (pStats[playerid][Prof] == MOTORISTA_PARTICULAR) ||
	  	(pStats[playerid][Prof] == LIXEIRO) || (pStats[playerid][Prof] == PEDREIRA) || (pStats[playerid][Prof] == JORNALISTA) || (pStats[playerid][Prof] == AGRICULTOR) ||
	   	(pStats[playerid][Prof] == PROSTITUTA) || (pStats[playerid][Prof] == CAMINHONEIRO) || (pStats[playerid][Prof] == PARAMEDICO) || (pStats[playerid][Prof] == VENDEDOR_DE_ARMAS) ||
	    (pStats[playerid][Prof] == MECANICO) || (pStats[playerid][Prof] == FRENTISTA) || (pStats[playerid][Prof] == INSTRUTOR) || (pStats[playerid][Prof] == ADVOGADO) ||
    	(pStats[playerid][Prof] == VENDEDOR_DE_CARROS) || (pStats[playerid][Prof] == CORRETOR)) return true;
	return false;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(killerid != INVALID_PLAYER_ID){
	    new stringdeath[128];
		format(stringdeath,sizeof(stringdeath),"%s morreu por %s",PlayerName(playerid),PlayerName(killerid));
		SendClientMessageAdmin(COLOR_WHITE, stringdeath);
		print(stringdeath);
	}
	set(GuardarString[playerid][Corda1],"NONE");
	set(GuardarString[playerid][Corda2],"NONE");
	set(GuardarString[playerid][Corda3],"NONE");
	set(GuardarString[playerid][Corda4],"NONE");
	set(GuardarString[playerid][Corda5],"NONE");
	NaCasa[playerid] = 0;
	CarregouArmas[playerid] = 0;
	ContrabandoCar[playerid] = 0;
	Contrabando[playerid] = 0;
	if(killerid != INVALID_PLAYER_ID){
		if(CivilPlayer(playerid) && CivilPlayer(killerid) && IsPlayerInGang(playerid) == 0 && IsPlayerInGang(killerid) == 0){
			for(new i=0; i<MAX_SLOTS; i++){
				if(IsPlayerConnected(i) && IsPlayerInGang(i) == 0 && GetDistanceBetweenPlayers(i,killerid) < 20 && !IsPlayerTransparent(killerid)){
				    new achou;
				    if(i != killerid && i != playerid){
				        achou = 1;
			        	new drogas[128];
			            new string[128];
			            if(pStats[playerid][DosesHeroina] != 0 || pStats[playerid][DosesHeroina] != 0 || pStats[playerid][DosesHeroina] != 0){
			                format(drogas,sizeof(drogas), "Sim");
			            } else {
			           	 	format(drogas,sizeof(drogas), "Não");
			           	}
			           	new alcool[128];
			           	if(pStats[playerid][Alcool] > 0){
			                format(alcool,sizeof(alcool), "Sim %d mg/l de sangue", pStats[playerid][Alcool]);
			            } else {
			           	 	format(alcool,sizeof(alcool), "Não");
			           	}
						new w[13], a;
						new armas[128];
						for(new s = 0; s < 13; s++){
							GetWeaponData(playerid, s, w[s], a);
							if(w[s] != 0 && s > 0){
				                format(armas,sizeof(armas), "Sim");
								break;
				            } else {
				           	 	format(armas,sizeof(armas), "Não");
				           	}
						}
						new fugiude[128];
						if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
				        	format(fugiude,sizeof(fugiude), "Suspeito Fugiu a pé");
						}
						if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) {
						    new rand2 = random(100);
						   	format(fugiude,sizeof(fugiude), "Suspeito fugiu em um veículo.");
						    if(rand2 > 60){
					        	format(fugiude,sizeof(fugiude), "Suspeito fugiu em um veículo, os rastros na pista são de um %s", GetVehicleModelName(GetVehicleModel(GetPlayerVehicleID(playerid))));
							}
						}
				        if(IsPlayerTransparent(killerid)){
				            new rand = random(100);
				            if(rand < 90){
				             	format(string,sizeof(string), "[HOSPITAL] %s deu saída no hospital vítima de agressão.", PlayerName(playerid));
								format(GuardarString[playerid][Corda1],128,string);
				        		format(string,sizeof(string), "[PERÍCIA] Averiguamos o local e não identificamos rastros de como ele fugiu. Exame Corpo de Delito:");
				        		format(GuardarString[playerid][Corda2],128,string);
								format(string,sizeof(string), "[PERÍCIA] Bala de uma: %s, Vestigios de drogas: %s, Alcool: %s, Armado: %s, Porte: %s, Pertence a alguma gang: %s", GetPlayerWeapon(killerid), drogas, alcool, armas, SimNao[pStats[playerid][Porte]], SimNao[IsPlayerInGang(playerid)]);
				        		format(GuardarString[playerid][Corda3],128,string);
								format(string,sizeof(string), "[PERÍCIA] Passagem pela polícia por: %s, Alguma acusação recente: %s, Testemunhas: %s", Motivos[pStats[playerid][LastBustedReason]][mName], Crime[playerid][Motivo], Crime[playerid][Reportado]);
								format(GuardarString[playerid][Corda4],128,string);
							} else {
				             	format(string,sizeof(string), "[HOSPITAL] %s deu saída no hospital vítima de agressão.", PlayerName(playerid));
								format(GuardarString[playerid][Corda1],128,string);
								format(string,sizeof(string), "[PERÍCIA] Averiguamos o local e constatamos que o %s.", fugiude);
								format(GuardarString[playerid][Corda2],128,string);
								format(string,sizeof(string), "[PERÍCIA] Na cena do crime constatamos que o mesmo foi morto com balas de %s registradas na Ammu Nation no nome de %s.", GetPlayerWeapon(killerid), PlayerName(killerid));
								format(GuardarString[playerid][Corda3],128,string);
								format(string,sizeof(string), "[PERÍCIA] Vestigios de drogas: %s, Alcool: %s, Armado: %s, Porte: %s, Pertence a alguma gang: %s", drogas, alcool, armas, SimNao[pStats[playerid][Porte]], SimNao[IsPlayerInGang(playerid)]);
								format(GuardarString[playerid][Corda4],128,string);
								format(string,sizeof(string), "[PERÍCIA] Passagem pela polícia por: %s, Alguma acusação recente: %s, Testemunhas: %s", Motivos[pStats[playerid][LastBustedReason]][mName], Crime[playerid][Motivo], Crime[playerid][Reportado]);
								format(GuardarString[playerid][Corda5],128,string);
							}
						} else {
						    new rand = random(100);
						    if(rand < 90){
				             	format(string,sizeof(string), "[HOSPITAL] %s deu saída no hospital vítima de agressão.", PlayerName(playerid));
								format(GuardarString[playerid][Corda1],128,string);
								format(string,sizeof(string), "[PERÍCIA] Averiguamos o local e constatamos que o %s.",fugiude);
								format(GuardarString[playerid][Corda2],128,string);
								format(string,sizeof(string), "[PERÍCIA] Na cena do crime constatamos que o mesmo foi morto com balas de %s registradas na Ammu Nation no nome de %s.", GetPlayerWeapon(killerid), PlayerName(killerid));
								format(GuardarString[playerid][Corda3],128,string);
								format(string,sizeof(string), "[PERÍCIA] Vestigios de drogas: %s, Alcool: %s, Armado: %s, Porte: %s, Pertence a alguma gang: %s", drogas, alcool, armas, SimNao[pStats[playerid][Porte]], SimNao[IsPlayerInGang(playerid)]);
								format(GuardarString[playerid][Corda4],128,string);
								format(string,sizeof(string), "[PERÍCIA] Passagem pela polícia por: %s, Alguma acusação recente: %s, Testemunhas: %s", Motivos[pStats[playerid][LastBustedReason]][mName], Crime[playerid][Motivo], Crime[playerid][Reportado]);
								format(GuardarString[playerid][Corda5],128,string);
							} else {
				             	format(string,sizeof(string), "[HOSPITAL] %s deu saída no hospital vítima de agressão.", PlayerName(playerid));
								format(GuardarString[playerid][Corda1],128,string);
				             	format(string,sizeof(string), "[HOSPITAL] %s deu saída no hospital vítima de agressão.", PlayerName(playerid));
								format(GuardarString[playerid][Corda2],128,string);
				        		format(string,sizeof(string), "[PERÍCIA] Averiguamos o local e não identificamos rastros de como ele fugiu. Exame Corpo de Delito:");
				        		format(GuardarString[playerid][Corda3],128,string);
								format(string,sizeof(string), "[PERÍCIA] Bala de uma: %s, Vestigios de drogas: %s, Alcool: %s, Armado: %s, Porte: %s, Pertence a alguma gang: %s", GetPlayerWeapon(killerid), drogas, alcool, armas, SimNao[pStats[playerid][Porte]], SimNao[IsPlayerInGang(playerid)]);
				        		format(GuardarString[playerid][Corda4],128,string);
								format(string,sizeof(string), "[PERÍCIA] Passagem pela polícia por: %s, Alguma acusação recente: %s, Testemunhas: %s", Motivos[pStats[playerid][LastBustedReason]][mName], Crime[playerid][Motivo], Crime[playerid][Reportado]);
								format(GuardarString[playerid][Corda5],128,string);
							}
					      	AcusacaoCrime(killerid,  PlayerName(i), PlayerName(playerid) , "Homicídio", 3, 0, 0, 1);
						}
				    }
				    if(achou == 0){
						AcusacaoCrime(killerid,  "NONE", PlayerName(playerid) , "Homicídio", 3, 0, 0, 1);
					}
				}
			}
		}
	}
	new string[128];
	if(AcabouMorrer[playerid] == 0 && MiniGame[playerid] == 0 && PlayerDerby[playerid] == 0)
	{
	    GetPlayerPos(playerid,DeadPos[playerid][0],DeadPos[playerid][1],DeadPos[playerid][2]);
		InteriorDead[playerid] = GetPlayerInterior(playerid);
		SetSpawnInfo(playerid, 1, pStats[playerid][Skin], DeadPos[playerid][0], DeadPos[playerid][1], DeadPos[playerid][2], pStats[playerid][SpawnPosAng], 0, 0, 0, 0, 0, 0);
		pStats[playerid][Morrendo] = 1;
		if(RouboCarroForte[playerid] > 0)
		{
		    KillTimer(TimerRoubo[playerid]);
		    RouboCarroForte[playerid] = 0;
		    SendClientMessage(playerid, COLOR_GRAY, "Roubo Falhado! Você foi detido...");
		}
	   	if(Sequestro[playerid] == 1)
		{
	    	DisablePlayerCheckpoint(Sequestrador[playerid]);
	    	SendClientMessage(Sequestrador[playerid], COLOR_WHITE, "Sequestro Falhado, o jogador morreu...");
	    	KillTimer(TimerSequestro[Sequestrador[playerid]]);
	    	EstouComSequestro[Sequestrador[playerid]] = 0;
	    	Sequestro[playerid] = 0;
	    	Amarrado[playerid] = 0;
	    	AmarradoInfo[playerid][0] = 0;
	    	AmarradoInfo[Sequestrador[playerid]][1] = 0;
 			Sequestrador[playerid] = 0;
		}
		if(EstouComSequestro[playerid] == 1)
		{
	    	SendClientMessage(AmarradoInfo[playerid][1], COLOR_WHITE, "O sequestrador está ferido, rápido, é a sua chance pra escapar...");
	    	KillTimer(TimerSequestro[playerid]);
	    	EstouComSequestro[playerid] = 0;
	    	Sequestro[AmarradoInfo[playerid][1]] = 0;
	    	Amarrado[AmarradoInfo[playerid][1]] = 0;
	    	AmarradoInfo[AmarradoInfo[playerid][1]][0] = 0;
	    	Sequestrador[AmarradoInfo[playerid][1]] = 0;
	    	SetPlayerControl(AmarradoInfo[playerid][1], true);
	   		AmarradoInfo[playerid][1] = 0;
		}
		if(Algemado[playerid] == 1)
		{
	    	DisablePlayerCheckpoint(AlgemaInfo[playerid][0]);
	    	SendClientMessage(AlgemaInfo[playerid][0], COLOR_WHITE, "Prisão Falhada, o jogador morreu...");
	    	Algemou[AlgemaInfo[playerid][0]] = 0;
	    	Algemado[playerid] = 0;
	    	AlgemaInfo[AlgemaInfo[playerid][0]][1] = 0;
	    	AlgemaInfo[playerid][0] = 0;
		}
		if(Algemou[playerid] == 1)
		{
	    	SendClientMessage(AlgemaInfo[playerid][1], COLOR_WHITE, "O policial está ferido, rápido, é a sua chance pra escapar...");
			Algemou[playerid] = 0;
	    	Algemado[AlgemaInfo[playerid][1]] = 0;
	    	AlgemaInfo[AlgemaInfo[playerid][1]][0] = 0;
	    	Sequestrador[AlgemaInfo[playerid][1]] = 0;
	    	SetPlayerControl(AlgemaInfo[playerid][1], true);
	   		AlgemaInfo[playerid][1] = 0;
		}
   		if(killerid != INVALID_PLAYER_ID)
		{
			Contrabando[playerid] = 0;
			Receita[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
			pStats[killerid][Matou] = (pStats[killerid][Matou] + 1) % 5;
			pStats[playerid][Morreu] = (pStats[playerid][Morreu] + 1) % 5;
			if(pStats[killerid][Prof] == ASSALTANTE && pStats[playerid][Prof] == SEGURANÇA && PegouGrana[playerid] == 1)
			{
	    		new value = (random(5) + 2) * 100;
				Pay(killerid, value);
				PegouGrana[playerid] = 0;
				new str[128];
				format(str, sizeof str, "Bom Trabalho! Você matou um Segurança que estava transportando dinheiro e recebeu $%d,00 dólares.", value);
				SendClientMessage(killerid, COLOR_ASSALTANTE, str);
				SendClientMessage(playerid, COLOR_GRAY, "Transporte Falhado! O Assaltante roubou o dinheiro...");
				new rand = random(4);
				if(rand == 1){
					AcusacaoCrime(killerid,  "NONE", PlayerName(playerid) , "Latrocínio", 5, 0, 0, 1);
				}
			}
			if(pStats[killerid][Matou] == 0){
			    pStats[killerid][Respeito]++;
			    if(IsPlayerInGang(killerid))
				{
			    	gStats[GetGangID(pStats[killerid][GangueNome])][GangPontos]++;
				}
				SendClientMessage(killerid, COLOR_JUIZ, "Você recebeu 1 ponto de respeito por matar 5 jogadores.");
			}
			if(pStats[playerid][Morreu] == 0){
			    pStats[playerid][Respeito]--;
				SendClientMessage(playerid, COLOR_GRAY, "Você perdeu 1 ponto de respeito por morrer 5 vezes.");
			}
			if(pStats[playerid][ValorCabeca] > 0 && pStats[killerid][Prof] == ASSASSINO){
		   	 	new str[128];
				SendClientMessage(killerid, COLOR_ASSASSINO, "Serviço feito...");
				format(str,sizeof(str),"Você recebeu: $%d,00 dólares",pStats[playerid][ValorCabeca]);
				SendClientMessage(killerid, COLOR_ASSASSINO, str);
				Pay(killerid, pStats[playerid][ValorCabeca]);
    			pStats[playerid][ValorCabeca] = 0;
				new rand = random(8);
				if(rand == 1){
					AcusacaoCrime(killerid,  "NONE", PlayerName(playerid) , "Homicídio", 3, 0, 0, 1);
				}
			}
			if(IsPlayerInGang(playerid) && IsPlayerInGang(killerid) && compare(GangControlZone[GetPlayerZone(killerid)], pStats[playerid][GangueNome]) && !IsZoneAttacked(GetPlayerZone(killerid)) && GetPlayerZone(killerid) != -1 && !compare(pStats[playerid][GangueNome], pStats[killerid][GangueNome]))
			{
			    set(ZoneAttacked[GetPlayerZone(killerid)], pStats[killerid][GangueNome]);
			    AddGangLevel(pStats[killerid][GangueNome], 1);
			    SendClientMessage(killerid, COLOR_WHITE, "[INFO] Você começou a atacar esse território... Não saiá dele!");
				new str[128];
				format(str, sizeof str, "[INFO] ATENÇÃO GANGUE!! o membro %s começou um ataque em %s contra a gangue %s, Rápido, ajudem-no...", PlayerName(killerid), zones[GetPlayerZone(killerid)][zonename], pStats[playerid][GangueNome]);
				SendClientMessageGang(pStats[killerid][GangueNome], COLOR_WHITE, str);
				format(str, sizeof str, "[INFO] ATENÇÃO!! um território da sua gangue está sendo atacado em %s pela gangue %s, Rápido vá defende-lo...", zones[GetPlayerZone(killerid)][zonename], pStats[killerid][GangueNome]);
				SendClientMessageGang(pStats[playerid][GangueNome], COLOR_GRAY, str);
				CreateGangZonesForAll();
				SetTimerEx("GangCombat", 3000, false, "ddddd", GetPlayerZone(killerid), GetGangID(pStats[killerid][GangueNome]), GetGangID(pStats[playerid][GangueNome]), 15, 60);
			}
			else if(IsPlayerInGang(playerid) == 1 && IsPlayerInGang(killerid) == 1 && GetPlayerZone(killerid) != -1 && IsZoneAttacked(GetPlayerZone(killerid)) && compare(GangControlZone[GetPlayerZone(killerid)], pStats[playerid][GangueNome]) && compare(ZoneAttacked[GetPlayerZone(killerid)], pStats[killerid][GangueNome]) && compare(gStats[GetGangID(pStats[playerid][GangueNome])][GangDono], PlayerName(playerid)))
			{
				new str[128];
				format(str, sizeof str, "O Líder da outra gangue foi morto e vocês conseguiram o território %s", zones[GetPlayerZone(killerid)][zonename]);
			    SendClientMessageGang(pStats[killerid][GangueNome], COLOR_WHITE, str);
				format(str, sizeof str, "Vocês perderam a batalha do território %s pois o Líder de vocês foi morto durante a batalha...", zones[GetPlayerZone(killerid)][zonename]);
				SendClientMessageGang(pStats[playerid][GangueNome], COLOR_GRAY, str);
			    GangAttackVictory(GetPlayerZone(killerid));
			}
			else if(IsPlayerInGang(playerid) == 1 && IsPlayerInGang(killerid) == 1 && GetPlayerZone(killerid) != -1 && IsZoneAttacked(GetPlayerZone(killerid)) && compare(GangControlZone[GetPlayerZone(killerid)], pStats[killerid][GangueNome]) && compare(ZoneAttacked[GetPlayerZone(killerid)], pStats[playerid][GangueNome]) && compare(gStats[GetGangID(pStats[playerid][GangueNome])][GangDono], PlayerName(playerid)))
			{
			    new str[128];
				format(str, sizeof str, "O Líder da outra gangue foi morto e vocês conseguiram defender o território %s", zones[GetPlayerZone(killerid)][zonename]);
			    SendClientMessageGang(pStats[killerid][GangueNome], COLOR_WHITE, str);
				format(str, sizeof str, "Vocês falharam no ataque do território %s pois o Líder de vocês foi morto durante a batalha...", zones[GetPlayerZone(killerid)][zonename]);
				SendClientMessageGang(pStats[playerid][GangueNome], COLOR_GRAY, str);
			    GangDefenseVictory(GetPlayerZone(killerid));
			}
			if(pStats[killerid][Prof] == COP_MILITAR || pStats[killerid][Prof] == COP_RODOVIARIO || pStats[killerid][Prof] == COP_SWAT || pStats[killerid][Prof] == DELEGADO)
			{
			    if(ChavePrisao[playerid][0] == 1)
				{
					format(string, sizeof string, "[CENTRAL] O Oficial Sr. %s recuperou a chave da prisão que estava com %s.", PlayerName(killerid), PlayerName(playerid));
					SendClientMessageDelegado(COLOR_DELEGADO, string);
				    SendClientMessage(playerid, COLOR_GRAY, "Você foi morto por um policial e a chave da cadeia foi tomada de você!");
					SendClientMessage(killerid, COLOR_CENTRAL, "[CENTRAL] Bom trabalho! A chave da cadeia foi retomada.");
					ChavePrisao[playerid][0] = 0;
					AcrescentarXpoints(killerid, 1);
				}
		   		if(GetPlayerWantedLevel(playerid) > 0)
				{
				    format(string, sizeof(string), "[CENTRAL] O Oficial Sr. %s deteu o jogador %s , procurado nível %d.", PlayerName(killerid), PlayerName(playerid), GetPlayerWantedLevel(playerid));
					SendClientMessageDelegado(COLOR_DELEGADO, string);
					DiminuirXpoints(playerid,1);
	      	     	format(string, sizeof(string), "[CENTRAL] Você deteu um jogador procurado nível %d e recebeu $%d,00 dólares.", GetPlayerWantedLevel(playerid), GetPlayerWantedLevel(playerid) * 100);
					SendClientMessage(killerid, COLOR_CENTRAL, string);
					SendClientMessage(playerid, COLOR_GRAY, "Você foi detido e irá ser preso pelos crimes que cometeu.");
					Pay(killerid, GetPlayerWantedLevel(playerid) * 100);
					pStats[playerid][Preso] = 1;
				}
				if(pStats[playerid][Prof] == ASSASSINO && EstouComSequestro[playerid] == 1)
				{
	       			for(new i = 0; i < MAX_SLOTS; i++)
					{
						if(IsPlayerConnected(i) && Logado[i] && Cativeiro[i] == 1 && Sequestrador[i] == playerid)
						{
							Cativeiro[i] = 0;
			   				Sequestro[i] = 0;
			   				SetPlayerControl(i, true);
			   				new Float:X, Float:Y, Float:Z;
			   				GetPlayerPos(killerid, X, Y, Z);
			   				SetPlayerPos(i, X + 1, Y + 1, Z);
			   				DiminuirXpoints(playerid, 1);
							format(string, sizeof string, "Você foi resgatado pelo Oficial Sr. %s.", PlayerName(killerid));
			   				SendClientMessage(i, COLOR_CENTRAL, string);
			   				SendClientMessage(playerid, COLOR_GRAY, "O Sequestro foi falhado devido à sua morte.");
							SendClientMessage(killerid, COLOR_CENTRAL, "[CENTRAL] Bom Trabalho! Você acabou com um sequestro e recebeu $400,00 dólares.");
							format(string, sizeof string, "[CENTRAL] Sr. Delegado, o Oficial Sr. %s acabou com o sequestro de %s.", PlayerName(killerid), PlayerName(playerid));
							SendClientMessageDelegado(COLOR_DELEGADO, string);
							Pay(killerid, 400);
						}
					}
				}
				if(pStats[playerid][Prof] == COP_MILITAR || pStats[playerid][Prof] == COP_RODOVIARIO || pStats[playerid][Prof] == COP_SWAT || pStats[playerid][Prof] == DELEGADO)
				{
					DiminuirXpoints(killerid, 1);
	   	 	   		SendClientMessage(killerid, COLOR_CENTRAL, "[CENTRAL] Você deteu um oficial, esse caso foi parar nas mãos do Delegado.");
					format(string, sizeof(string), "[CENTRAL] Sr. Delegado, foi constatado que o Oficial Sr. %s deteu o Oficial Sr. %s, verifique isso.", PlayerName(killerid), PlayerName(playerid));
					SendClientMessageDelegado(COLOR_DELEGADO, string);
				}
			}
			if(pStats[killerid][Prof] == ASSASSINO || pStats[killerid][Prof] == ASSALTANTE || pStats[killerid][Prof] == CONTRABANDISTA || pStats[killerid][Prof] == TRAFICANTE)
			{
				if(pStats[playerid][Prof] == COP_MILITAR || pStats[playerid][Prof] == COP_RODOVIARIO || pStats[playerid][Prof] == COP_SWAT || pStats[playerid][Prof] == DELEGADO)
				{
 					AcrescentarXpoints(killerid, 1);
					DiminuirXpoints(playerid, 1);
				}
			}
   			if((pStats[playerid][Prof] == DELEGADO  || pStats[playerid][Prof] == JUIZ) && ChavePrisao[killerid][0] == 0)
			{
		 		SendClientMessage(killerid, COLOR_GREEN, "Você matou o Juiz/Delegado, roubou a chave da prisão, agora pode libertar uma pessoa, digite /soltarpreso [id]");
			 	SendClientMessage(playerid, COLOR_GRAY, "Você foi detido e o jogador roubou a chave da prisão, detenha-o antes que ele libere algum preso.");
				ChavePrisao[killerid][0] = 1;
			}
		}
	}
    if(MiniGame[playerid] == 1 && Capturado[playerid] == 0 && PLIniciou == 1){
	    if(Equipe[playerid] == 1)
		{
	        new str[128];
			if(killerid != INVALID_PLAYER_ID){
			    format(str,sizeof(str),"[POLÍCIA E LADRÃO] O ladrão %s foi capturado por %s",PlayerName(playerid),PlayerName(killerid));
			}
			else{
			    format(str,sizeof(str),"[POLÍCIA E LADRÃO] O ladrão %s foi capturado por ser encontrado morto",PlayerName(playerid));
			}
			SendClientMessageToAll(COLOR_LIGHT_YELLOW, str);
			Capturado[playerid] = 1;
			if(QtCapturadosPL() == QtLadroesPL()){
			    PLIniciou = 0;
        		QtCapturados = 0;
			    SendClientMessageToAll(COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] Todos os ladrões foram capturados a equipe dos policiais venceu!");
			    for(new i = 0; i < MAX_SLOTS; i++){
		    		if(IsPlayerConnected(i) && MiniGame[i] == 1){
	    		    	GameTextForPlayer(i, "~w~Equipe dos policiais~n~~r~venceu",4000,0);
						if(Equipe[i] == 2){
					    	AddPlayerMoney(i,100,7);
					    	SendClientMessage(i, COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] Sua equipe venceu e você recebeu $100");
						}
						RetirarPL(i);
					}
				}
			}
		}
	}
    if(PlayerDerby[playerid] == 1){
	   	PlayerDerby[playerid] = 0;
	   	SetPlayerControl(playerid, true);
	   	DerbyIniciado[playerid] = 0;
		format(string, sizeof(string), "[ESTÁDIO] %s foi desclassificado pois saiu do seu carro, sua posição: %d/%d", PlayerName(playerid),QtDerbeiro(),contagemof);
		SendClientMessageToAll(COLOR_PALHA, string);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 2693.9199,-1701.8795,11.0741);
  	}
  	if(AcabouMorrer[playerid] == 1)
  	{
		if(GetPlayerWantedLevel(playerid) > 0)
		{
			pStats[playerid][Preso] = 1;
			SavePlayer(PlayerName(playerid),playerid);
			format(string,sizeof(string), "[CENTRAL] O criminoso %s foi encontrado inconsciente e foi entregue para a Delegacia!",PlayerName(playerid));
			SendClientMessagePolicia(COLOR_CENTRAL, string);
		}
	}
}
public CtDead(playerid){
	KillTimer(TimerDeath[playerid]);
	CtgDead[playerid]--;
	if(CtgDead[playerid] > 0)
	{
		new r = random(8);
		ApplyAnimCrack(playerid);
		for(new i = 0; i < MAX_SLOTS; i++){
			if(GetDistanceBetweenPlayers(playerid,i) < 10 && pStats[i][Morrendo] == 0 && pStats[playerid][Morrendo] == 1){
				if(r == 0 || r == 1) SendClientMessage(i, COLOR_WHITE, "Há alguém inconsciente por perto, você pode fazer massagem cardiáca nele (/massagemcardiaca)");
			}
		}
		if(TemProfissao(PARAMEDICO)){
			TimerDeath[playerid] = SetTimerEx("CtDead",20000,0,"d",playerid);
		} else {
			TimerDeath[playerid] = SetTimerEx("CtDead",10000,0,"d",playerid);
		}
	}
	else
	{
		new hosp = GetClosestHospital(playerid);
    	SetSpawnInfo(playerid, 1, pStats[playerid][Skin], Hospitais[hosp][0], Hospitais[hosp][1], Hospitais[hosp][2], Hospitais[hosp][3], 0, 0, 0, 0, 0, 0);
    	if(pStats[playerid][Seguro] == 0)
		{
		    new inc = random(7), string[128];
			format(string,sizeof(string), "[HOSPITAL] Tratamos você pelo custo de $%d,00 dólares, dinheiro retirado do banco.", 100 + (inc * 25));
			SendClientMessage(playerid, COLOR_GRAY, string);
			pStats[playerid][Banco] -= 100 + (inc * 25);
		}
		else if(pStats[playerid][Seguro] == 1){
    	    SendClientMessage(playerid, COLOR_GRAY, "[HOSPITAL] Tratamos você, seu seguro cobriu as despesas.");
		}
		if(pStats[playerid][Doenca] > 0){
			SendClientMessage(playerid, COLOR_PARAMEDICO, "[HOSPITAL] Curamos a sua doença pelo custo de $300,00 dólares, o dinheiro foi retirado do banco.");
			pStats[playerid][Doenca] = 0;
			pStats[playerid][Banco] -= 300;
		}
		if(GetPlayerWantedLevel(playerid) > 0) {
		    pStats[playerid][Preso] = 1;
		}
		SpawnPlayer(playerid);
		pStats[playerid][Morrendo] = 0;
		SetPlayerControl(playerid, true);
		ClearAnimations(playerid);
		AcabouMorrer[playerid] = 1;
		KillTimer(TimerDeathEffect[playerid]);
		TextDrawHideForPlayer(playerid, DeathAction);
		TextDrawHideForPlayer(playerid, DeathText);
		SetPlayerInterior(playerid, 0);
		if(!compare(GuardarString[playerid][Corda1],"NONE")){
			SendClientMessagePolicia(COLOR_PARAMEDICO, GuardarString[playerid][Corda1]);
			SendClientMessage(playerid, COLOR_PARAMEDICO, GuardarString[playerid][Corda1]);
		}
		if(!compare(GuardarString[playerid][Corda2],"NONE")){
			SendClientMessagePolicia(COLOR_TURQUOISE, GuardarString[playerid][Corda2]);
			SendClientMessage(playerid, COLOR_TURQUOISE, GuardarString[playerid][Corda2]);
		}
		if(!compare(GuardarString[playerid][Corda3],"NONE")){
			SendClientMessagePolicia(COLOR_TURQUOISE, GuardarString[playerid][Corda3]);
			SendClientMessage(playerid, COLOR_TURQUOISE, GuardarString[playerid][Corda3]);
		}
		if(!compare(GuardarString[playerid][Corda4],"NONE")){
			SendClientMessage(playerid, COLOR_TURQUOISE, GuardarString[playerid][Corda4]);
			SendClientMessagePolicia(COLOR_TURQUOISE, GuardarString[playerid][Corda4]);
		}
		if(!compare(GuardarString[playerid][Corda5],"NONE")){
			SendClientMessagePolicia(COLOR_TURQUOISE, GuardarString[playerid][Corda5]);
			SendClientMessage(playerid, COLOR_TURQUOISE, GuardarString[playerid][Corda5]);
		}
		SetTimerEx("ZerarAcabouMorrer",3000,0,"d",playerid);
	}
}
public ZerarAcabouMorrer(playerid) AcabouMorrer[playerid] = 0;
public CarregarCarros()
{
	for(new v = 0; v < AmountServerVehicles + AmountPlayerVehicles; v++)
	{
	    CarregarCarro(v);
	}
}
public ApplyVehicleToInvalidPos(vehicleid)
{
	SetVehiclePos(vehicleid,INVALID_POS_X,INVALID_POS_Y,INVALID_POS_Z);
}
public OnVehicleSpawn(vehicleid)
{
    KillTimer(VehicleRespawn[vehicleid]);
	printf("OnVehicleSpawn(%d)", vehicleid);
	Disparos[vehicleid] = 0;
	if(JaDestruido[vehicleid] == 0)
	{
		SetTimerEx("CarregarCarro", 2000, false, "d", vehicleid);
	    if(vehicleid >= AmountServerVehicles)
		{
			SetVehiclePos(vehicleid,vStats[vehicleid][CarPosX],vStats[vehicleid][CarPosY],vStats[vehicleid][CarPosZ]);
		}
	}
	else
	{
	    if(vehicleid < AmountServerVehicles)
		{
			SetVehiclePos(vehicleid,vStats[vehicleid][CarPosX],vStats[vehicleid][CarPosY],vStats[vehicleid][CarPosZ]);
		}
		else
		{
			SetTimerEx("ApplyVehicleToInvalidPos", 2000, false, "d", vehicleid);
		}
	}
	SetVehicleNumberPlate(vehicleid, vStats[vehicleid][VPlaca]);
}

stock LoadColors()
{
	for(new i = 0; i < AmountServerVehicles; i++)
	{
		ChangeVehicleColor(i, vStats[i][Color1], vStats[i][Color2]);
	}
}

stock SaveColors(vehicleid, color1, color2)
{
	vStats[vehicleid][Color1] = color1;
	vStats[vehicleid][Color2] = color2;
	return 1;
}

stock SavePaintjob(vehicleid, paintjobid)
{
    vStats[vehicleid][Paintjob] = paintjobid + 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	SendClientMessage(playerid, COLOR_MECANICO, "Essa loja não funciona aqui, vá na Virtual'Tuning.");
	RemoveVehiclePaintjob(vehicleid);
	CarregarCarro(vehicleid);
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    ChangeVehicleColor(vehicleid, vStats[vehicleid][Color1], vStats[vehicleid][Color2]);
}
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger){
	if(IsAmbulance(vehicleid))
	{
		if(pStats[playerid][Prof] != PARAMEDICO)
		{
		    RemovePlayerFromVehicle(playerid);
		    new rand=random(2)+2;
			PutPlayerInVehicle(playerid,vehicleid,rand);
		}
	}
	if(IsPolice(vehicleid) && GetVehicleModel(vehicleid) != 601 && GetVehicleModel(vehicleid) != 523 && GetVehicleModel(vehicleid) != 599)
	{
		if(pStats[playerid][Prof] != COP_MILITAR && pStats[playerid][Prof] != COP_RODOVIARIO && pStats[playerid][Prof] != COP_SWAT && pStats[playerid][Prof] != DELEGADO)
		{
		    RemovePlayerFromVehicle(playerid);
		    new rand = random(2) + 2;
			PutPlayerInVehicle(playerid,vehicleid,rand);
		}
	}
	if(IsStretch(vehicleid))
	{
		if(pStats[playerid][Prof] != MOTORISTA_PARTICULAR)
		{
		    RemovePlayerFromVehicle(playerid);
		    new rand = random(2) + 2;
			PutPlayerInVehicle(playerid, vehicleid, rand);
		}
	}
	if(RaceCheckpointStatus[playerid] == TERMINAL || FazendaInProgress[playerid] == 1 || EntregaLimo[playerid] == 1 || CheckpointStatus[playerid] == ENTREGANDO_PIZZA
	|| CheckpointStatus[playerid] == CARREGAMENTO || CarregamentoRoupas[playerid] == 1 || CheckpointStatus[playerid] == COLOCANDO_DROGAS || CheckpointStatus[playerid] == TRANSPORTANDO_DROGAS
	|| Pedras[playerid] == 1 || CheckpointStatus[playerid] == TRANSPORTANDO_DROGAS || NaoSair[playerid] == 1 || CheckpointStatus[playerid] == CARREGANDO_COMBUSTIVEL
	|| EntregandoEncomendas[playerid] == 1 || CheckpointStatus[playerid] == REBOCANDO || PegouGrana[playerid] == 1)
	{
		if(vehicleid == VeiculoTrabalho[playerid]){
			KillTimer(RetomarTrabalho[playerid]);
			SendClientMessage(playerid, COLOR_WHITE, "Veículo retomado, continue o trabalho.");
		    return 1;
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está no veículo certo para continuar o trabalho.");
		    return 1;
		}
	}
	if(vehicleid >= AmountServerVehicles && !compare(PlayerName(playerid), vStats[vehicleid][VDono]) && vStats[vehicleid][VAlarme] == 2)
	{
		if(!compare(vStats[GetPlayerVehicleID(playerid)][VChave],PlayerName(playerid)) && GetPlayerVehicleID(playerid) != UsingChaveMestra[playerid])
		{
		    if(Disparado[GetPlayerVehicleID(playerid)] == 0){
			    SendClientMessage(playerid, COLOR_GREEN, "Melhor correr, você acionou o alarme do veículo... Polícia avisada!");
				new string[128], zone[28];
				GetPlayer2DZone(playerid, zone, 28);
				if(IsPlayerTransparent(playerid))
				{
					format(string, sizeof string, "[CENTRAL] Unidades. Alarme de veículo acionado. [Local: %s] [Placa: %s] [Principal Suspeito: Desconhecido]", zone, vStats[vehicleid][VPlaca]);
				}
				else
				{
				    format(string, sizeof string, "[CENTRAL] Unidades. Alarme de veículo acionado. [Local: %s] [Placa: %s] [Principal Suspeito: %s]", zone, vStats[vehicleid][VPlaca], PlayerName(playerid));
				}
		    	format(LastChamadaDenuncia, sizeof(LastChamadaDenuncia), "Tentativa de furto, Local: %s.", zone);
				SendClientMessagePolicia(COLOR_CENTRAL, string);
				SendClientMessagePolicia(COLOR_CENTRAL, "Para checar a denúncia do chamado, \"/checar.\"");
			    for(new i=0; i<MAX_SLOTS; i++){
			        if(pStats[i][Prof] == COP_MILITAR || pStats[i][Prof] == DELEGADO || pStats[i][Prof] == COP_RODOVIARIO || pStats[i][Prof] == COP_SWAT){
				    	GetPlayerPos(playerid,CPLocal[i][0],CPLocal[i][1],CPLocal[i][2]);
					}
				}
				Disparado[GetPlayerVehicleID(playerid)] = 1;
				SetTimerEx("Disparar",1000, false, "d", vehicleid);
				SetTimerEx("CheckVehicle",60000, false, "dd", playerid, vehicleid);
			}
		}
	}
	printf("OnPlayerEnterVehicle(%d, %d)", playerid, vehicleid);
	return 1;
}

public CheckVehicle(playerid, vehicleid){
	if(IsPlayerInAnyVehicle(playerid)){
	    if(GetPlayerVehicleID(playerid) == vehicleid){
	    	new string[128], zone[28];
	    	GetPlayer2DZone(playerid, zone, 28);
			if(IsPlayerTransparent(playerid)){
				format(string, sizeof string, "[CENTRAL] Carro furtado de placa %s visto nas imediações de %s, dirijam-se ao local. Suspeito: Desconhecido", vStats[vehicleid][VPlaca], zone);
			} else {
			    format(string, sizeof string, "[CENTRAL] Carro furtado de placa %s visto nas imediações de %s, dirijam-se ao local. Suspeito: %s", vStats[vehicleid][VPlaca], zone, PlayerName(playerid));
			}
		    format(LastChamadaDenuncia, sizeof(LastChamadaDenuncia), "Furto de Veículo, Local: %s.", zone);
			SendClientMessagePolicia(COLOR_CENTRAL, string);
			SendClientMessagePolicia(COLOR_CENTRAL, "Para checar a ocorrência do chamado, \"/checar.\"");
		    for(new i=0; i<MAX_SLOTS; i++){
		        if(pStats[i][Prof] == COP_MILITAR || pStats[i][Prof] == DELEGADO || pStats[i][Prof] == COP_RODOVIARIO || pStats[i][Prof] == COP_SWAT){
			    	GetPlayerPos(playerid,CPLocal[i][0],CPLocal[i][1],CPLocal[i][2]);
				}
			}
			SetTimerEx("CheckVehicle",60000, false, "dd", playerid, vehicleid);
		}
	}
}
public Disparar(vehicleid)
{
	if(Disparos[vehicleid] < 15){
		Disparos[vehicleid]++;
		new Float:vehX,Float:vehY,Float:vehZ;
        GetVehiclePos(vehicleid,vehX,vehY,vehZ);
	    for(new i=0; i<MAX_PLAYERS; i++) {
		    new Float:dist = GetPlayerDistanceToPointEx(i,vehX,vehY,vehZ);
			if(dist <= 40){
				PlayerPlaySound(i, 1147, 0.0,0.0,0.0);
			}
		}
		SetTimerEx("Disparar",800, false, "d", vehicleid);
	} else if(Disparos[vehicleid] >= 15){
		Disparos[vehicleid] = 0;
		Disparado[vehicleid] = 0;
	}
	return 1;
}
public OnVehicleDeath(vehicleid, killerid)
{
	for(new i = 0; i < MAX_SLOTS; i++)
	{
	    if(IsPlayerConnected(i) && Logado[i] && VeiculoTrabalho[i] == vehicleid)
	    {
			KillTimer(RetomarTrabalho[i]);
			VeiculoTrabalho[i] = -1;
			SendClientMessage(i, COLOR_GRAY, "Trabalho cancelado! O veículo foi destruído...");
	    }
	}
   	new donovehicle[128];
   	set(donovehicle,vStats[vehicleid][VDono]);
   	if(vehicleid >= AmountServerVehicles)
	{
	    JaDestruido[vehicleid] = 1;
		if(vStats[vehicleid][VSeguro] == 1)
		{
		    JaDestruido[vehicleid] = 0;
			SetVehicleToRespawn(vehicleid);
		   	if(IsStringAName(donovehicle))
   			{
   		   		SendClientMessage(IDName(donovehicle), COLOR_PALHA, "Seu veículo foi destruído, mas está devolta pois ele estava assegurado!");
		   	}
	   	}
	   	else
   		{
			if(IsStringAName(donovehicle))
			{
			    new inc = random(9), string[128];
				SendClientMessage(IDName(donovehicle), COLOR_MECANICO, "[OFICINA] Seu veículo foi destruído.");
				format(string,sizeof(string),"[OFICINA] Estamos cobrando $%d,00 dólares para consertá-lo...", 300 + inc * 25);
				SendClientMessage(IDName(donovehicle), COLOR_MECANICO, string);
				SendClientMessage(IDName(donovehicle), COLOR_MECANICO, "[OFICINA] Para aceitar nossa proposta digite /aceitar ou /recusar");
				SendClientMessage(IDName(donovehicle), COLOR_MECANICO, "OBS: Se você não envia-lo para conserto, irá perde-lo!");
				ParaAceitar[IDName(donovehicle)] = ACEITAR_CONSERTO;
				PropostaConserto[IDName(donovehicle)] = 1;
				VeiculoConserto[IDName(donovehicle)] = vehicleid;
				DinheiroConserto[IDName(donovehicle)] = 300 + inc * 25;
			}
			else
			{
			   	JaDestruido[vehicleid] = 0;
				SetVehicleToRespawn(vehicleid);
			}
	   	}
	}
}
stock CapsLock(string[])
{
	new tmp[128];
	tmp[0]=0;
	if(!strlen(string)) return tmp;
	set(tmp,string);
	for(new len=0;len<strlen(tmp);len++)
	{
	    if(tmp[len]=='a')tmp[len]='A';
	    else if(tmp[len]=='b')tmp[len]='B';
	    else if(tmp[len]=='c')tmp[len]='C';
	    else if(tmp[len]=='d')tmp[len]='D';
	    else if(tmp[len]=='e')tmp[len]='E';
	    else if(tmp[len]=='f')tmp[len]='F';
	    else if(tmp[len]=='g')tmp[len]='G';
	    else if(tmp[len]=='h')tmp[len]='H';
	    else if(tmp[len]=='i')tmp[len]='I';
	    else if(tmp[len]=='j')tmp[len]='J';
	    else if(tmp[len]=='k')tmp[len]='K';
	    else if(tmp[len]=='l')tmp[len]='L';
	    else if(tmp[len]=='m')tmp[len]='M';
	    else if(tmp[len]=='n')tmp[len]='N';
	    else if(tmp[len]=='o')tmp[len]='O';
	    else if(tmp[len]=='p')tmp[len]='P';
	    else if(tmp[len]=='q')tmp[len]='Q';
	    else if(tmp[len]=='r')tmp[len]='R';
	    else if(tmp[len]=='s')tmp[len]='S';
	    else if(tmp[len]=='t')tmp[len]='T';
	    else if(tmp[len]=='u')tmp[len]='U';
	    else if(tmp[len]=='v')tmp[len]='V';
	    else if(tmp[len]=='w')tmp[len]='W';
	    else if(tmp[len]=='x')tmp[len]='X';
	    else if(tmp[len]=='y')tmp[len]='Y';
	    else if(tmp[len]=='z')tmp[len]='Z';
	    else if(tmp[len]=='ç')tmp[len]='Ç';
	    else if(tmp[len]=='á')tmp[len]='Á';
	    else if(tmp[len]=='é')tmp[len]='É';
	    else if(tmp[len]=='í')tmp[len]='Í';
	    else if(tmp[len]=='ó')tmp[len]='Ó';
	    else if(tmp[len]=='ú')tmp[len]='Ú';
	    else if(tmp[len]=='ñ')tmp[len]='Ñ';
	    else if(tmp[len]=='ã')tmp[len]='Ã';
	    else if(tmp[len]=='õ')tmp[len]='Õ';
	    else if(tmp[len]=='â')tmp[len]='Â';
	    else if(tmp[len]=='ê')tmp[len]='Ê';
	    else if(tmp[len]=='î')tmp[len]='Î';
	    else if(tmp[len]=='ô')tmp[len]='Ô';
	    else if(tmp[len]=='û')tmp[len]='Û';
	    else if(tmp[len]=='à')tmp[len]='À';
	    else if(tmp[len]=='è')tmp[len]='È';
	    else if(tmp[len]=='ì')tmp[len]='Ì';
	    else if(tmp[len]=='ò')tmp[len]='Ò';
	    else if(tmp[len]=='ù')tmp[len]='Ù';
	    else if(tmp[len]=='ä')tmp[len]='Ä';
	    else if(tmp[len]=='ë')tmp[len]='Ë';
	    else if(tmp[len]=='ï')tmp[len]='Ï';
	    else if(tmp[len]=='ö')tmp[len]='Ö';
	    else if(tmp[len]=='ü')tmp[len]='Ü';
	}
	return tmp;
}
stock ClearCapsLock(string[])
{
	new tmp[128];
	tmp[0]=0;
	if(!strlen(string)) return tmp;
	set(tmp,string);
	for(new len=0;len<strlen(tmp);len++)
	{
	    if(tmp[len]=='A')tmp[len]='a';
	    else if(tmp[len]=='B')tmp[len]='b';
	    else if(tmp[len]=='C')tmp[len]='c';
	    else if(tmp[len]=='D')tmp[len]='d';
	    else if(tmp[len]=='E')tmp[len]='e';
	    else if(tmp[len]=='F')tmp[len]='f';
	    else if(tmp[len]=='G')tmp[len]='g';
	    else if(tmp[len]=='H')tmp[len]='h';
	    else if(tmp[len]=='I')tmp[len]='i';
	    else if(tmp[len]=='J')tmp[len]='j';
	    else if(tmp[len]=='K')tmp[len]='k';
	    else if(tmp[len]=='L')tmp[len]='l';
	    else if(tmp[len]=='M')tmp[len]='m';
	    else if(tmp[len]=='N')tmp[len]='n';
	    else if(tmp[len]=='O')tmp[len]='o';
	    else if(tmp[len]=='P')tmp[len]='p';
	    else if(tmp[len]=='Q')tmp[len]='q';
	    else if(tmp[len]=='R')tmp[len]='r';
	    else if(tmp[len]=='S')tmp[len]='s';
	    else if(tmp[len]=='T')tmp[len]='t';
	    else if(tmp[len]=='U')tmp[len]='u';
	    else if(tmp[len]=='V')tmp[len]='v';
	    else if(tmp[len]=='W')tmp[len]='w';
	    else if(tmp[len]=='X')tmp[len]='x';
	    else if(tmp[len]=='Y')tmp[len]='y';
	    else if(tmp[len]=='Z')tmp[len]='z';
	    else if(tmp[len]=='Ç')tmp[len]='ç';
	    else if(tmp[len]=='Á')tmp[len]='á';
	    else if(tmp[len]=='É')tmp[len]='é';
	    else if(tmp[len]=='Í')tmp[len]='í';
	    else if(tmp[len]=='Ó')tmp[len]='ó';
	    else if(tmp[len]=='Ú')tmp[len]='ú';
	    else if(tmp[len]=='Ñ')tmp[len]='ñ';
	    else if(tmp[len]=='Ã')tmp[len]='ã';
	    else if(tmp[len]=='Õ')tmp[len]='õ';
	    else if(tmp[len]=='Â')tmp[len]='â';
	    else if(tmp[len]=='Ê')tmp[len]='ê';
	    else if(tmp[len]=='Î')tmp[len]='î';
	    else if(tmp[len]=='Ô')tmp[len]='ô';
	    else if(tmp[len]=='Û')tmp[len]='û';
	    else if(tmp[len]=='À')tmp[len]='à';
	    else if(tmp[len]=='È')tmp[len]='è';
	    else if(tmp[len]=='Ì')tmp[len]='ì';
	    else if(tmp[len]=='Ò')tmp[len]='ò';
	    else if(tmp[len]=='Ù')tmp[len]='ù';
	    else if(tmp[len]=='Ä')tmp[len]='ä';
	    else if(tmp[len]=='Ë')tmp[len]='ë';
	    else if(tmp[len]=='Ï')tmp[len]='ï';
	    else if(tmp[len]=='Ö')tmp[len]='ö';
	    else if(tmp[len]=='Ü')tmp[len]='ü';
	    else if(tmp[len]=='&')tmp[len]='e';
	}
	return tmp;
}
stock ChatProximo(playerid,const msg[])
{
  	new str[128];
	if(!IsPlayerTransparent(playerid))
	{
	    if(pStats[playerid][Cracha] == 1)
		{
			if(pStats[playerid][Prof] == JUIZ)
			{
 	 			format(str,sizeof(str), "Sr. %s diz: %s", PlayerName(playerid), msg);
			}
			else if(pStats[playerid][Prof] == ADVOGADO){
			    format(str,sizeof(str), "Dr. %s diz: %s", PlayerName(playerid), msg);
			}
			else if(pStats[playerid][Prof] == COP_MILITAR || pStats[playerid][Prof] == COP_RODOVIARIO || pStats[playerid][Prof] == COP_SWAT || pStats[playerid][Prof] == DELEGADO){
			    format(str,sizeof(str), "[OFICIAL] %s diz: %s", PlayerName(playerid), msg);
			}
			else if(pStats[playerid][Prof] == ASSALTANTE || pStats[playerid][Prof] == ASSASSINO || pStats[playerid][Prof] == CONTRABANDISTA || pStats[playerid][Prof] == TRAFICANTE){
				format(str,sizeof(str),"Estranho diz: %s",msg);
			}
			else {
			    format(str, sizeof str, "[%s] %s diz: %s", Profissoes[pStats[playerid][Prof]][ProfName], PlayerName(playerid), msg);
			}
			for(new i = 0; i < MAX_SLOTS; i++){
	    		if(GetDistanceBetweenPlayers(playerid,i) < 30 && GetPlayerInterior(i) == GetPlayerInterior(playerid) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid)){
	    			SendClientMessage(i, Profissoes[pStats[playerid][Prof]][ProfColor], str);
				}
			}
		}
		else
		{
		    format(str,sizeof(str),"%s diz: %s",PlayerName(playerid),msg);
		    for(new i = 0; i < MAX_SLOTS; i++)
			{
	    		if(GetDistanceBetweenPlayers(playerid,i) < 30 && GetPlayerInterior(i) == GetPlayerInterior(playerid) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid)){
	    			SendClientMessage(i, COLOR_WHITE, str);
				}
			}
		}
	}
	else if(IsPlayerTransparent(playerid))
	{
		format(str,sizeof(str),"Estranho diz: %s",msg);
		for(new i = 0; i < MAX_SLOTS; i++)
		{
	   		if(GetDistanceBetweenPlayers(playerid,i) < 30 && GetPlayerInterior(i) == GetPlayerInterior(playerid) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
			   {
	       		SendClientMessage(i, COLOR_WHITE, str);
	       	}
		}
	}
}

public ZerarCrash(playerid)
{
    KillTimer(CrashTimer[playerid]);
	CrashWarn[playerid] = 0;
}

public OnPlayerText(playerid,text[])
{
	if(!IsPlayerAdmin(playerid))
	{
		new report[128];
    	format(report, sizeof(report), "%s: %s", PlayerName(playerid), text);
  		SendChatMessageAdmin(report);
	}
	if(text[0] == '1' && text[1] == '/' && text[2] == '1' && text[3] == '1')
	{
	    new string[128];
	    format(string, sizeof string, "[ANTI CRASH] %s digitou 1 / 11...", PlayerName(playerid));
	    SendClientMessageAdmin(COLOR_ADMIN_MESSAGE, string);
		print(string);
	    CrashWarn[playerid]++;
	    if(CrashWarn[playerid] >= 3)
	    {

	        CrashWarn[playerid] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "Você foi avisado...");
			if(!Logado[playerid]) Banir(playerid, "Tentativa de Crash");
			else Kick(playerid);
			return 0;
	    }
	    if(!Logado[playerid]) SendClientMessage(playerid, COLOR_GRAY, "Pare com isso ou será banido...");
	    else SendClientMessage(playerid, COLOR_GRAY, "Pare com isso ou será kickado...");
		KillTimer(CrashTimer[playerid]);
	    CrashTimer[playerid] = SetTimerEx("ZerarCrash", 90000, 0, "d", playerid);
	    return 0;
	}
	if(Tutorial[playerid]) return 0;
	new stringtext[128];
	format(stringtext,sizeof(stringtext),"[CHAT] %s: %s",PlayerName(playerid),text);
	writelog(stringtext);
	if(text[0] == '!'){
		if(IsPlayerInGang(playerid)){
		    new gangmsg[128], seperator[128];
		    strmid(seperator,text,1,strlen(text));
			if(!compare(gStats[GetGangID(pStats[playerid][GangueNome])][GangDono], PlayerName(playerid))) format(gangmsg,128,"[%s] %s: %s",CapsLock(GangPosts[pStats[playerid][GangueCargo]]),PlayerName(playerid),seperator);
			else format(gangmsg,128,"[LÍDER] %s: %s",PlayerName(playerid),seperator);
			SendClientMessageGang(pStats[playerid][GangueNome],GetGangColor(pStats[playerid][GangueNome]),gangmsg);
		}
		else{
            SendClientMessage(playerid, COLOR_GRAY, "Você não tem gangue!");
		}
		return 0;
	}
	if(AssegurandoVeiculo[playerid] == 1) {
	    AssegurandoVeiculo[playerid] = 0;
		new vid = strval(text);
		new carid = GetVehicles(playerid, vid);
		if(vid < 1 || vid > GetQtVehicles(playerid) + 1 || carid == -1)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem um veículo desse ID.");
		    return 0;
		}
		if(vStats[carid][VSeguro] == 1)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Esse veículo já possui seguro.");
		    return 0;
		}
		AddPlayerMoney(playerid, -3000, -1);
		vStats[carid][VSeguro] = 1;
		SendClientMessage(playerid, COLOR_PINK, "Veículo assegurado por $3000,00 dólares.");
		return 0;
	}
	if(Logado[playerid] == 0){
		SendClientMessage(playerid, COLOR_GRAY, "Você só pode digitar se estiver logado no jogo!");
		return 0;
	}
	if(TypingDate[playerid]==1){
	    new data[3],index;
	    data[0]=strval(strtok(text,index,'/'));
	    if(data[0]<1 || data[0]>31){
	        SendClientMessage(playerid, COLOR_GRAY, "Erro na digitação da data, use: 'dia'/'mês'/'ano'");
	        SendClientMessage(playerid, COLOR_GRAY, "Ex: 04/06/1982");
	        SendClientMessage(playerid, COLOR_GRAY, "Verifique se a data é válida...");
	        return 0;
	    }
	    data[1]=strval(strtok(text,index,'/'));
	    if(data[1]<1 || data[1]>12){
	    	SendClientMessage(playerid, COLOR_GRAY, "Erro na digitação da data, use: 'dia'/'mês'/'ano'");
	    	SendClientMessage(playerid, COLOR_GRAY, "Ex: 04/06/1982");
	    	SendClientMessage(playerid, COLOR_GRAY, "Verifique se a data é válida...");
	        return 0;
	    }
	    new y,d;
	    getdate(y,d,d);
	    data[2]=strval(strtok(text,index,'/'));
		if(data[2]>y-6 || data[2]<y-100){
            SendClientMessage(playerid, COLOR_GRAY, "Erro na digitação da data, use: 'dia'/'mês'/'ano'");
            SendClientMessage(playerid, COLOR_GRAY, "Ex: 04/06/1982");
            SendClientMessage(playerid, COLOR_GRAY, "Verifique se a data é válida...");
	        return 0;
		}
		format(pStats[playerid][Data],20,"%d/%d/%d",data[0],data[1],data[2]);
		SetPlayerControl(playerid, true);
		TypingDate[playerid]=0;
		SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
		SendClientMessage(playerid, COLOR_WHITE, "-------------------------------------Data Válida-----------------------------------------------------------------------------------");
		SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
		SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
		SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
		SendClientMessage(playerid, COLOR_GREEN, "Você chegou em Los Santos, você pode procurar 1 Hotel e se hospedar até que tenha condições de comprar uma casa");
		SendClientMessage(playerid, COLOR_JUIZ,  "Também existe uma conta no banco, aconselhamos tirar sua Habilitação e possa trabalhar.");
		SendClientMessage(playerid, COLOR_PINK,  "Antes de começar a jogar leia nossas regras. Digite /regras1 e /regras2");
		SendClientMessage(playerid, COLOR_GRAY,  "Qualquer problema ou dúvida : /admin [mensagem] . Bom Jogo!");
		GameTextForPlayer(playerid,"~w~ Los ~g~Santos", 5000,0);
		PlayerPlaySound(playerid, 1186, 0.0,0.0,0.0);
  	    if(pStats[playerid][Xpoints] == 0){
			SetTimerEx("LocalAutoEscola", 8000, 0, "d",playerid);
		}
		return 0;
	}
	if(CustoAluguel[playerid] == 1){
	    if(strval(text) <= 0){
			SendClientMessage(playerid, COLOR_GRAY, "Valor inválido... Digite um acima de $0,00!");
		}
	    else{
        	LocarMinhaCasa(playerid, SelectedHouse[playerid], DiasSelecionados[playerid],strval(text));
		}
		CustoAluguel[playerid] = 0;
		return 0;
	}
	if(MiniGame[playerid] == 1 && PLIniciou == 1 && (Equipe[playerid] == 1 || Equipe[playerid] == 2)){
	    new string[128];
	    if(Equipe[playerid] == 1)
		{
			format(string,sizeof(string),"[LADRÕES] %s: %s",PlayerName(playerid),text);
		}
		else if(Equipe[playerid] == 2)
		{
			format(string,sizeof(string),"[POLICIAIS] %s: %s",PlayerName(playerid),text);
		}
		for(new i = 0; i < MAX_SLOTS; i++)
		{
	        if(IsPlayerConnected(i) && Equipe[i] == Equipe[playerid])
			{
				SendClientMessage(i, COLOR_WHITE, string);
			}
		}
		return 0;
	}
	fixchars(text);
	if(CaixaPostal2[playerid] == 1){
	    EnviarMensagemCaixaPostal(playerid,RecebedorMensagem[playerid],text);
	    SendClientMessage(playerid, COLOR_GREEN, "Mensagem enviada e chamada finalizada!");
	    CaixaPostal2[playerid] = 0;
	    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		return 0;
	}
	if(ArmaCofre[playerid][0] == 1){
	    ArmaCofre[playerid][0] = 0;
		SetPlayerControl(playerid,1);
	    new string[128];
	    new slot = strval(text);
		if(GetWeapons[playerid][slot][1] == 0)
		{
			SendClientMessage(playerid, COLOR_GRAY, "Você não possui arma nesse slot!");
			return 0;
		}
		if(pckStats[PickupEntradaCasa[playerid]][ArmasCofre][slot] != 0)
		{
			SendClientMessage(playerid, COLOR_GRAY, "Já tem armas desse slot guardadas ai!");
			return 0;
		}
		new weapon,ammo;
		GetWeaponData(playerid,slot,weapon,ammo);
		pckStats[PickupEntradaCasa[playerid]][ArmasCofre][slot] = weapon;
		pckStats[PickupEntradaCasa[playerid]][ArmasAmmoCofre][slot] = ammo;
		SendClientMessage(playerid, COLOR_WHITE, "Arma guardada!");
		format(string,sizeof(string), "Slot %d: %s/%d", slot, RPGWeapons[weapon][Info_ArmaNome], ammo);
		SendClientMessage(playerid, COLOR_WHITE, string);
		GetWeapons[playerid][slot][0] = 0;
		GetWeapons[playerid][slot][1] = 0;
		LoadWeapons(playerid);
		return 0;
	}
	if(ArmaCofre[playerid][1] == 1){
	    ArmaCofre[playerid][1] = 0;
		SetPlayerControl(playerid,1);
	    new slot = strval(text);
	    if(pckStats[PickupEntradaCasa[playerid]][ArmasCofre][slot] == 0) {
			SendClientMessage(playerid, COLOR_GRAY, "Você não tem armas desse slot guardadas ai!");
			return 0;
		}
		GiveWeapon(playerid,pckStats[PickupEntradaCasa[playerid]][ArmasCofre][slot],pckStats[PickupEntradaCasa[playerid]][ArmasAmmoCofre][slot]);
		pckStats[PickupEntradaCasa[playerid]][ArmasCofre][slot] = 0;
		pckStats[PickupEntradaCasa[playerid]][ArmasAmmoCofre][slot] = 0;
		SendClientMessage(playerid, COLOR_WHITE, "Arma retirada do cofre!");
		return 0;
	}
	if(GranaCofre[playerid][0] == 1){
	    GranaCofre[playerid][0] = 0;
	    SetPlayerControl(playerid,1);
	    new string[128];
	    new quantidade = strval(text);
	    if(quantidade > GetPlayerServerMoney(playerid)){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não possui tudo isso em suas mãos!");
	        return 0;
		}
		if(quantidade <= 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Quantidade inválida!");
		    return 0;
		}
	    if(quantidade+pckStats[PickupEntradaCasa[playerid]][DinheiroCofre] > 20000){
			format(string,sizeof(string),"Seu cofre só pode ter $20000 no máximo, você possui $%d! Digite uma quantidade menor...",pckStats[PickupEntradaCasa[playerid]][DinheiroCofre]);
	        SendClientMessage(playerid, COLOR_GRAY, string);
			return 0;
		}
  		pckStats[PickupEntradaCasa[playerid]][DinheiroCofre] += quantidade;
	    AddPlayerMoney(playerid,-quantidade,-1);
	    format(string,sizeof(string),"Você adicionou $%d no cofre e ele ficou com $%d",quantidade,pckStats[PickupEntradaCasa[playerid]][DinheiroCofre]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 0;
	}
	if(GranaCofre[playerid][1] == 1){
	    GranaCofre[playerid][1] = 0;
	    SetPlayerControl(playerid,1);
	    new quantidade = strval(text);
	    if(quantidade > pckStats[PickupEntradaCasa[playerid]][DinheiroCofre]){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não tem toda essa grana no cofre!");
	        return 0;
		}
	    AddPlayerMoney(playerid,quantidade,2);
	    pckStats[PickupEntradaCasa[playerid]][DinheiroCofre] -= quantidade;
		new string[128];
		format(string,sizeof(string),"Você retirou $%d do cofre e ele ficou com $%d",quantidade,pckStats[PickupEntradaCasa[playerid]][DinheiroCofre]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 0;
	}
	if(PorteTeste[playerid] == 1){
		if(compare(text,"Sim")){
		   	SendClientMessage(playerid, COLOR_DELEGADO, " ");
		    SendClientMessage(playerid, COLOR_DELEGADO, "[Escrivão] Quando usará sua arma, caso tenha?");
			SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Responda: Segurança, Defesa ou Agressão.");
			PorteTeste[playerid] = 2;
		    return 0;
		} else if((compare(text,"Nao")) || (compare(text,"Não"))){
			PorteTeste[playerid] = 0;
		   	SendClientMessage(playerid, COLOR_DELEGADO, " ");
  		    SendClientMessage(playerid, COLOR_DELEGADO, "[Escrivão] Porte de Armas cancelado. Volte mais tarde.");
			SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Você respondeu Não, o escrivão cancelou seu teste.");
 			ImpossivelTirarPorte[playerid] = 1;
			SetTimerEx("LiberadoParaPorte",500000,0,"d",playerid);
		    return 0;
		} else {
		   	SendClientMessage(playerid, COLOR_DELEGADO, " ");
		 	SendClientMessage(playerid, COLOR_DELEGADO, "[Escrivão] Está ciente, que o uso indevido de armas poderá acarretar problemas a você?");
			SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Responda: Sim ou Não.");
		}
	}
	if(PorteTeste[playerid] == 2){
		if(compare(text,"Segurança")){
		   	SendClientMessage(playerid, COLOR_DELEGADO, " ");
  		    SendClientMessage(playerid, COLOR_DELEGADO, "[Escrivão] Segurança. Ok. Com o tempo veremos do que fala.");
    		SendClientMessage(playerid, COLOR_DELEGADO, "[Escrivão] Se abusar o poder dela será preso e terá o porte apreendido.");
			if(GetPlayerServerMoney(playerid) >= 400){
		    	pStats[playerid][Porte] = 1;
			   	SendClientMessage(playerid, COLOR_DELEGADO, " ");
			   	SendClientMessage(playerid, COLOR_DELEGADO, "[Delegado] Porte Categoria de Armas 1, concedido.");
			   	SendClientMessage(playerid, COLOR_DELEGADO, "[Delegado] Depois volte para pegar o de Categoria 2, caso cumpra as leis.");
   				AddPlayerMoney(playerid, -400, -1);
			} else {
			   	SendClientMessage(playerid, COLOR_DELEGADO, " ");
			   	SendClientMessage(playerid, COLOR_DELEGADO, "[Delegado] Está querendo enganar o Estado? Cadê o dinheiro!");
			   	SendClientMessage(playerid, COLOR_DELEGADO, "[Delegado] Mais uma gracinha dessas e você será preso!");
			}
			PorteTeste[playerid] = 0;
		    return 0;
		} else if(compare(text,"Defesa")){
		   	SendClientMessage(playerid, COLOR_DELEGADO, " ");
  		    SendClientMessage(playerid, COLOR_DELEGADO, "[Escrivão] Você acabou de dizer que usará como Defesa.");
    		SendClientMessage(playerid, COLOR_DELEGADO, "[Escrivão] Caso precise da polícia, chame-a. Não use sua arma para ferir ninguém.");
			if(GetPlayerServerMoney(playerid) >= 400){
		    	pStats[playerid][Porte] = 1;
			   	SendClientMessage(playerid, COLOR_DELEGADO, " ");
			   	SendClientMessage(playerid, COLOR_DELEGADO, "[Delegado] Porte Categoria de Armas 1, concedido.");
			   	SendClientMessage(playerid, COLOR_DELEGADO, "[Delegado] Depois volte para pegar o de Categoria 2, caso cumpra as leis.");
   				AddPlayerMoney(playerid, -400, -1);
			} else {
			   	SendClientMessage(playerid, COLOR_DELEGADO, " ");
			   	SendClientMessage(playerid, COLOR_DELEGADO, "[Delegado] Está querendo enganar o Estado? Cadê o dinheiro!");
			   	SendClientMessage(playerid, COLOR_DELEGADO, "[Delegado] Mais uma gracinha dessas e você será preso!");
			}
			PorteTeste[playerid] = 0;
		    return 0;
		} else if((compare(text,"Agressão"))){
			PorteTeste[playerid] = 0;
		   	SendClientMessage(playerid, COLOR_DELEGADO, " ");
  		    SendClientMessage(playerid, COLOR_DELEGADO, "[Escrivão] Porte de Armas cancelado. Volte mais tarde.");
			SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Você respondeu Agressão, o escrivão cancelou seu teste.");
 			ImpossivelTirarPorte[playerid] = 1;
			SetTimerEx("LiberadoParaPorte",500000,0,"d",playerid);
		    return 0;
		} else {
		   	SendClientMessage(playerid, COLOR_DELEGADO, " ");
		    SendClientMessage(playerid, COLOR_DELEGADO, "[Escrivão] Quando usará sua arma, caso tenha?");
			SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Responda: Segurança, Defesa ou Agressão.");
		}
	}
	if(PorteTeste2[playerid] == 1){
		if(compare(text,"Sim")){
		   	SendClientMessage(playerid, COLOR_DELEGADO, " ");
		    SendClientMessage(playerid, COLOR_DELEGADO, "[Escrivão] Bom, se sabe, você deve se render, e não atirar contra um membro da polícia.");
  		    SendClientMessage(playerid, COLOR_DELEGADO, "[Escrivão] Porte de Armas cancelado.");
			PorteTeste2[playerid] = 0;
			ImpossivelTirarPorte[playerid] = 1;
			SetTimerEx("LiberadoParaPorte",500000,0,"d",playerid);
		    return 0;
		} else if((compare(text,"Nao")) || (compare(text,"Não"))){
			PorteTeste2[playerid] = 2;
		   	SendClientMessage(playerid, COLOR_DELEGADO, " ");
  		    SendClientMessage(playerid, COLOR_DELEGADO, "[Escrivão] Exato. É bom render-se para não ter mais problemas.");
			SendClientMessage(playerid, COLOR_DELEGADO, "[Escrivão] Pergunta: Você deve exibir suas armas para todos?");
			SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Responda: Sim ou Não.");
		    return 0;
		} else {
		   	SendClientMessage(playerid, COLOR_DELEGADO, " ");
			SendClientMessage(playerid, COLOR_DELEGADO, "[Escrivão] Pergunta: Você deve atirar em um policial se ele atirar em você?");
			SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Responda: Sim ou Não.");
		}
	}
	if(PorteTeste2[playerid] == 2){
		if(compare(text,"Sim")){
		   	SendClientMessage(playerid, COLOR_DELEGADO, " ");
		    SendClientMessage(playerid, COLOR_DELEGADO, "[Escrivão] Para que exibir? Quer arrumar confusão na rua?");
  		    SendClientMessage(playerid, COLOR_DELEGADO, "[Escrivão] Porte de Armas cancelado.");
			PorteTeste2[playerid] = 0;
 			ImpossivelTirarPorte[playerid] = 1;
			SetTimerEx("LiberadoParaPorte",500000,0,"d",playerid);
		    return 0;
		} else if((compare(text,"Nao")) || (compare(text,"Não"))){
			if(GetPlayerServerMoney(playerid) >= 400){
		    	pStats[playerid][Porte] = 2;
			   	SendClientMessage(playerid, COLOR_DELEGADO, " ");
			   	SendClientMessage(playerid, COLOR_DELEGADO, "[Delegado] Porte Categoria de Armas 2, concedido.");
			   	SendClientMessage(playerid, COLOR_DELEGADO, "[Delegado] Zele pela segurança de todos, evite-nos aborrecimentos.");
   				AddPlayerMoney(playerid, -400, -1);
   				PorteTeste2[playerid] = 0;
			} else {
			   	SendClientMessage(playerid, COLOR_DELEGADO, " ");
			   	SendClientMessage(playerid, COLOR_DELEGADO, "[Delegado] Está querendo enganar o Estado? Cadê o dinheiro!");
			   	SendClientMessage(playerid, COLOR_DELEGADO, "[Delegado] Mais uma gracinha dessas e você será preso!");
   				PorteTeste2[playerid] = 0;
 				ImpossivelTirarPorte[playerid] = 1;
				SetTimerEx("LiberadoParaPorte",500000,0,"d",playerid);
			}
			return 0;
		} else {
		   	SendClientMessage(playerid, COLOR_DELEGADO, " ");
			SendClientMessage(playerid, COLOR_DELEGADO, "[Escrivão] Pergunta: Você deve exibir suas armas para todos?");
			SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Responda: Sim ou Não.");
		}
	}
	if(JuizTribunal != -1)
	{
		if(Audiencia[0] == playerid || Audiencia[1] == playerid)
		{
		    new tmp[128];
			format(tmp,128,"[AUDIENCIA] %s: %s", PlayerName(playerid), text);
			fixchars(tmp);
			for(new i = 0; i < MAX_SLOTS; i++)
			{
			    if(GetDistanceBetweenPlayers(playerid, i) < 30.0)
			    {
			        SendClientMessage(i, COLOR_JUIZ, tmp);
			    }
			}
			ApplyAnimation(playerid, "PED", "IDLE_CHAT", 4.1, 0, 1, 1, 1, 1);
 			return 0;
 		}
 		if(Advogados[0] == playerid || Advogados[1] == playerid)
 		{
 			new tmp[128];
			format(tmp,128,"[ADVOGADO] %s: %s", PlayerName(playerid), text);
			fixchars(tmp);
			for(new i = 0; i < MAX_SLOTS; i++)
			{
			    if(GetDistanceBetweenPlayers(playerid, i) < 30.0)
			    {
			        SendClientMessage(i, COLOR_JUIZ, tmp);
			    }
			}
			ApplyAnimation(playerid, "PED", "IDLE_CHAT", 4.1, 0, 1, 1, 1, 1);
 			return 0;
 		}
 		if(JuizTribunal == playerid)
 		{
 		    new tmp[128];
			format(tmp,128,"[JUIZ] %s: %s", PlayerName(playerid), text);
			fixchars(tmp);
			for(new i = 0; i < MAX_SLOTS; i++)
			{
			    if(GetDistanceBetweenPlayers(playerid, i) < 30.0)
			    {
			        SendClientMessage(i, COLOR_JUIZ, tmp);
			    }
			}
			ApplyAnimation(playerid, "PED", "IDLE_CHAT", 4.1, 0, 1, 1, 1, 1);
 			return 0;
 		}
	}
	if(FazendoEmprestimo[playerid] == 1){
	    FazendoEmprestimo[playerid] = 0;
		new quantidade;
		quantidade = strval(text);
		if(quantidade > pStats[playerid][Banco]/4){
		new string[128];
		format(string, sizeof(string),"Você não pode emprestar tudo isto! O máximo que você pode é $%d",pStats[playerid][Banco]/4);
		SendClientMessage(playerid, COLOR_GRAY, string);
		SetPlayerControl(playerid,1);
		return 0;
		}
		if(quantidade < 1000){
		SendClientMessage(playerid, COLOR_GRAY, "Digite um número maior que $1.000.");
		SetPlayerControl(playerid,1);
		return 0;
		}
		if(pStats[playerid][Divida] > 0){
		SendClientMessage(playerid, COLOR_GRAY, "Ei, você já fez um empréstimo! Pague as dividas desse antes para fazer outro.");
        SetPlayerControl(playerid,1);
		return 0;
		}
		if(PlayerArea[playerid] == AreaBanco){
            SetPlayerControl(playerid,1);
			AddPlayerMoney(playerid,quantidade,5);
			pStats[playerid][Emprestimo] = quantidade;
			pStats[playerid][Divida] = quantidade/2+quantidade;
			ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,0,1);
			new string[128];
			format(string, sizeof(string), "Você emprestou $%d e recebeu uma dívida de $%d.",quantidade,quantidade/2+quantidade);
			SendClientMessage(playerid, COLOR_GREEN, string);
			SendClientMessage(playerid, COLOR_PALHA, "Caso não pague, vão vir os JUROS!");
			SendClientMessage(playerid, COLOR_PALHA, "Você terá que pagar essa grana em 15 minutos!");
			TimerDivida[playerid] = SetTimerEx("Cobrar",900000,false,"d",playerid);
			return 0;
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "Ei, você não está no banco!");
			return 0;
		}
	}
	if(DepositandoGrana[playerid] == 1){
        DepositandoGrana[playerid] = 0;
        new string[128];
		new quantidade;
	    quantidade = strval(text);
	    if(quantidade <= 0 || quantidade > GetPlayerServerMoney(playerid)){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não tem todo esse dinheiro. Ou está tentando enviar $0.");
            SetPlayerControl(playerid,1);
			return 0;
		}
		if(PlayerArea[playerid] == AreaBanco){
		    SetPlayerControl(playerid,1);
		    ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,0,1);
			format(string, sizeof(string),"Senhor %s, foram depositados $%d dólares em sua conta.",PlayerName(playerid), quantidade);
			SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS, string);
		    AddPlayerMoney(playerid, -quantidade, -1);
		    pStats[playerid][Banco] += quantidade;
			return 0;
   		}
	    else{
			SendClientMessage(playerid, COLOR_GRAY, "Ei, você não está no banco!");
			return 0;
		}
	}
	if(SacandoGrana[playerid] == 1){
        SacandoGrana[playerid] = 0;
        new string[128];
		new quantidade;
	    quantidade = strval(text);
	    if(quantidade < 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não pode sacar esta quantia");
	        SetPlayerControl(playerid,1);
			return 0;
		}
	    if(PlayerArea[playerid] == AreaBanco){
	        SetPlayerControl(playerid,1);
	        ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,0,1);
	        if(BankOpc[playerid] == 1){
	            if(quantidade > pStats[playerid][BancoTrabalho]){
		    		SendClientMessage(playerid, COLOR_GRAY, "Você não tem esta quantia no banco por parte de Trabalho");
		    		SetPlayerControl(playerid,1);
					return 0;
				}
				AddPlayerMoney(playerid, quantidade, 2);
	        	pStats[playerid][BancoTrabalho] -= quantidade;
				format(string, sizeof(string), "Você retirou $%d do banco por parte de Trabalho. Seu saldo: $%d", quantidade, pStats[playerid][Banco]);
			}
			else if(BankOpc[playerid] == 2){
			    if(quantidade > pStats[playerid][BancoResidencia]){
		    		SendClientMessage(playerid, COLOR_GRAY, "Você não tem esta quantia no banco por parte de Residencia");
		    		SetPlayerControl(playerid,1);
					return 0;
				}
				AddPlayerMoney(playerid, quantidade, 2);
	        	pStats[playerid][BancoResidencia] -= quantidade;
				format(string, sizeof(string), "Você retirou $%d do banco por parte de Residencia. Seu saldo: $%d", quantidade, pStats[playerid][Banco]);
			}
			else if(BankOpc[playerid] == 3){
			    if(quantidade > pStats[playerid][BancoEmpresa]){
		    		SendClientMessage(playerid, COLOR_GRAY, "Você não tem esta quantia no banco por parte de Empresa");
		    		SetPlayerControl(playerid,1);
					return 0;
				}
				AddPlayerMoney(playerid, quantidade, 2);
	        	pStats[playerid][BancoEmpresa] -= quantidade;
				format(string, sizeof(string), "Você retirou $%d do banco por parte de Empresa. Seu saldo: $%d", quantidade, pStats[playerid][Banco]);
			}
			else{
			    if(quantidade > pStats[playerid][Banco]){
		    		SendClientMessage(playerid, COLOR_GRAY, "Você não tem esta quantia no banco por parte de Dinheiro Pessoal");
		    		SetPlayerControl(playerid,1);
					return 0;
				}
				AddPlayerMoney(playerid, quantidade, 2);
	        	pStats[playerid][Banco] -= quantidade;
				format(string, sizeof(string), "Você retirou $%d do banco por parte de Dinheiro Pessoal. Seu saldo: $%d", quantidade, pStats[playerid][Banco]);
			}
			SendClientMessage(playerid, COLOR_EMERGENCIA, string);
			return 0;
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "Ei, você não está no banco!");
			return 0;
		}
	}
	if(InvestindoGrana[playerid] == 1){
        InvestindoGrana[playerid] = 0;
        new string[128];
		new quantidade;
	    quantidade = strval(text);
	    if(quantidade <= 0 || quantidade > pStats[playerid][Banco]){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não pode aplicar toda essa quantidade no banco. Pois não tem saldo!");
	        SetPlayerControl(playerid,1);
			return 0;
		}
		if(pStats[playerid][Banco] < 10000){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não pode aplicar essa quantia. Mínimo: $10.000.");
	        SetPlayerControl(playerid,1);
			return 0;
		}
	    if(PlayerArea[playerid] == AreaBanco){
	        SetPlayerControl(playerid,1);
	        ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,0,1);
	        pStats[playerid][PInvestimento] += quantidade;
	        pStats[playerid][Banco] -= quantidade;
			format(string, sizeof(string), "[BANCO] Sr. você aplicou $%d na sua conta, Sua aplicação atual: $%d - Seu saldo: $%d.", quantidade, pStats[playerid][PInvestimento], pStats[playerid][Banco]);
			SendClientMessage(playerid, COLOR_EMERGENCIA, string);
			return 0;
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "Ei, você não está no banco!");
			return 0;
		}
	}
	if(DesinvestindoGrana[playerid] == 1){
        DesinvestindoGrana[playerid] = 0;
        new string[128];
		new quantidade;
	    quantidade = strval(text);
	    if(quantidade <= 0 || quantidade > pStats[playerid][PInvestimento]){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não tem todo esse dinheiro. Ou está tentando enviar $0.");
            SetPlayerControl(playerid,1);
			return 0;
		}
	    if(PlayerArea[playerid] == AreaBanco){
	       	SetPlayerControl(playerid,1);
	       	ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,0,1);
	       	pStats[playerid][PInvestimento] -= quantidade;
	       	pStats[playerid][Banco] += quantidade;
			format(string, sizeof(string), "[BANCO] Sr. você retirou $%d da aplicação bancária, Sua aplicação atual: $%d - Seu saldo: $%d.", quantidade, pStats[playerid][PInvestimento], pStats[playerid][Banco]);
			SendClientMessage(playerid, COLOR_EMERGENCIA, string);
			return 0;
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "Ei, você não está no banco!");
			return 0;
		}
	}
	if(Ligou190[playerid] == 2)	{
		if(!strlen(text))
		{
			SendClientMessage(playerid, COLOR_CENTRAL, "[CENTRAL] Não entendi, repita novamente ou /desligar.");
			return 0;
		}
		format(LastChamadaDenuncia, sizeof(LastChamadaDenuncia), "%s", text);
		SendClientMessage(playerid, COLOR_CENTRAL, "[CENTRAL] Ok, se ocorreu agressão diga o nome ou parte dele, se não viu diga não");
		Ligou190[playerid] = 3;
		return 0;
	}
	if(Ligou190[playerid] == 3){
		new idx;
		new tmp[256];
		new string[256];
		tmp = strtok(text, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_CENTRAL, "[CENTRAL] Não entendi, repita novamente ou /desligar.");
			return 0;
		}
		if ((strcmp("não", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("não"))){
		    for(new i=0; i<MAX_SLOTS; i++){
		        if(pStats[i][Prof] == COP_MILITAR || pStats[i][Prof] == DELEGADO || pStats[i][Prof] == COP_RODOVIARIO || pStats[i][Prof] == COP_SWAT){
					GetPlayerPos(playerid,CPLocal[i][0],CPLocal[i][1],CPLocal[i][2]);
					Ligou190[playerid] = 0;
					new zone[28];
		            GetPlayer2DZone(playerid, zone, 28);
					SendClientMessage(playerid,COLOR_CENTRAL,"[CENTRAL] Policiais informados, aguarde a viatura nesse local.");
					if(IsPolice(GetPlayerVehicleID(i))){
						SendClientMessage(i, COLOR_CENTRAL," ");
						SendClientMessage(i, COLOR_CENTRAL," ");
						format(string, sizeof(string), "[RADIO COP] Unidades. [Ocorrência: %s] [Solicitado por: %s] [Local: %s", LastChamadaDenuncia, PlayerName(playerid), zone);
						SendClientMessage(i, COLOR_CENTRAL, string);
						SendClientMessage(i, COLOR_CENTRAL,"Para checar a denúncia do chamado, \"/checar.\"");
						SendClientMessage(i, COLOR_CENTRAL," ");
					} else {
						SendClientMessage(i, COLOR_CENTRAL," ");
						SendClientMessage(i, COLOR_CENTRAL," ");
						format(string, sizeof(string), "[WALKTOKIE COP] Oficiais. [Ocorrência: %s] [Solicitado por: %s] [Local: %s]", LastChamadaDenuncia, PlayerName(playerid), zone);
						SendClientMessage(i, COLOR_COP_RODOVIARIO, string);
						SendClientMessage(i, COLOR_CENTRAL,"Para checar a denúncia do chamado, \"/checar.\"");
						SendClientMessage(i, COLOR_CENTRAL," ");
					}
					return 0;
				}
			}
		}
		if(IsStringAName(tmp)){
		    for(new i=0; i<MAX_SLOTS; i++){
		        if(pStats[i][Prof] == COP_MILITAR || pStats[i][Prof] == DELEGADO || pStats[i][Prof] == COP_RODOVIARIO || pStats[i][Prof] == COP_SWAT){
					GetPlayerPos(playerid,CPLocal[i][0],CPLocal[i][1],CPLocal[i][2]);
					new zone[28];
		            GetPlayer2DZone(playerid, zone, 28);
					SendClientMessage(playerid,COLOR_CENTRAL,"[CENTRAL] Policiais informados, aguarde a viatura nesse local.");
					Ligou190[playerid] = 0;
					AcusacaoCrime(IDName(tmp), "/190",  PlayerName(playerid), LastChamadaDenuncia, 0, 0, 0, 1);
		            format(LastChamadaDenuncia, sizeof(LastChamadaDenuncia), "%s, Acusado: %s",LastChamadaDenuncia, PlayerName(IDName(tmp)));
					return 0;
				}
			}
		} else {
			SendClientMessage(playerid, COLOR_CENTRAL, "[CENTRAL] Não entendi, repita novamente o nome ou digite não, caso queira cancelar /desligar.");
			return 0;
		}
	}
	if(AbastecendoVeiculo[playerid] != 0){
	    new tanque = GetVehicleTanque(GetVehicleModel(GetPlayerVehicleID(playerid)));
        new currentgas = vStats[GetPlayerVehicleID(playerid)][Combustivel];
        new string[128];
		if(compare(text,"complete")){
		    new valorpor = (tanque - currentgas);
			if(AbastecendoVeiculo[playerid] == 1){
                if(GetPlayerServerMoney(playerid) < ValorGasolina*valorpor && valorpor != 0){
		 		    format(string, sizeof(string), "[POSTO] Você não tem dinheiro para comprar essa quantidade de gasolina. 1 litro: %d", ValorGasolina);
					SendClientMessage(playerid, COLOR_GRAY, string);
					AbastecendoVeiculo[playerid] = 0;
					SetPlayerControl(playerid, true);
					return 0;
				}
			    SendClientMessage(playerid,COLOR_LIGHT_RED,"Abastecendo...");
			    format(string, sizeof(string), "Espere o abastecimento completar. Serão colocados %d litro(s) de Gasolina.", valorpor);
				SendClientMessage(playerid, COLOR_WHITE, string);
				AddPlayerMoney(playerid, -(ValorGasolina * valorpor), -1);
			} else if(AbastecendoVeiculo[playerid] == 2){
                if(GetPlayerServerMoney(playerid) < ValorAditivada*valorpor && valorpor != 0){
		 		    format(string, sizeof(string), "[POSTO] Você não tem dinheiro para comprar essa quantidade de gasolina aditivada. 1 litro: %d", ValorAditivada);
					SendClientMessage(playerid, COLOR_GRAY, string);
					AbastecendoVeiculo[playerid] = 0;
					SetPlayerControl(playerid, true);
					return 0;
				}
			    SendClientMessage(playerid,COLOR_LIGHT_RED,"Abastecendo...");
			    format(string, sizeof(string), "Espere o abastecimento completar. Serão colocados %d litros de Gasolina Aditivada.", valorpor);
				SendClientMessage(playerid, COLOR_WHITE, string);
				AddPlayerMoney(playerid, -(ValorAditivada * valorpor), -1);
			} else if(AbastecendoVeiculo[playerid] == 3){
                if(GetPlayerServerMoney(playerid) < ValorDiesel*valorpor && valorpor != 0){
		 		    format(string, sizeof(string), "[POSTO] Você não tem dinheiro para comprar essa quantidade de Diesel. 1 litro: %d", ValorDiesel);
					SendClientMessage(playerid, COLOR_GRAY, string);
					AbastecendoVeiculo[playerid] = 0;
					SetPlayerControl(playerid, true);
					return 0;
				}
			    SendClientMessage(playerid,COLOR_LIGHT_RED,"Abastecendo...");
			    format(string, sizeof(string), "Espere o abastecimento completar. Serão colocados %d litros de Diesel.", valorpor);
				SendClientMessage(playerid, COLOR_WHITE, string);
				AddPlayerMoney(playerid, -(ValorDiesel * valorpor), -1);
			} else if(AbastecendoVeiculo[playerid] == 4){
                if(GetPlayerServerMoney(playerid) < ValorAlcool*valorpor && valorpor != 0){
		 		    format(string, sizeof(string), "[POSTO] Você não tem dinheiro para comprar essa quantidade de gasolina aditivada. 1 litro: %d", ValorAlcool);
					SendClientMessage(playerid, COLOR_GRAY, string);
					AbastecendoVeiculo[playerid] = 0;
					SetPlayerControl(playerid, true);
					return 0;
				}
			    SendClientMessage(playerid,COLOR_LIGHT_RED,"Abastecendo...");
			    format(string, sizeof(string), "Espere o abastecimento completar. Serão colocados %d litros de Alcool.", valorpor);
				SendClientMessage(playerid, COLOR_WHITE, string);
				AddPlayerMoney(playerid, -(ValorAlcool * valorpor), -1);
			} else if(AbastecendoVeiculo[playerid] == 5){
                if(GetPlayerServerMoney(playerid) < ValorQuerosene*valorpor && valorpor != 0){
		 		    format(string, sizeof(string), "[POSTO] Você não tem dinheiro para comprar essa quantidade de gasolina aditivada. 1 litro: %d", ValorQuerosene);
					SendClientMessage(playerid, COLOR_GRAY, string);
					AbastecendoVeiculo[playerid] = 0;
					SetPlayerControl(playerid, true);
					return 0;
				}
			    SendClientMessage(playerid,COLOR_LIGHT_RED,"Abastecendo...");
			    format(string, sizeof(string), "Espere o abastecimento completar. Serão colocados %d litros de Querosene.", valorpor);
				SendClientMessage(playerid, COLOR_WHITE, string);
				AddPlayerMoney(playerid, -(ValorQuerosene * valorpor), -1);
			}
   			SetTimerEx("AplicarGasosa",valorpor*150,0,"ddd",playerid,GetPlayerVehicleID(playerid),tanque);
			format(string,128,"No total, seu tanque terá %d litros de combustível.",tanque);
			SendClientMessage(playerid,COLOR_WHITE,string);
			new rand = random(3)+1;
			AcrescentarLucro(7,valorpor*rand);
			AbastecendoVeiculo[playerid] = 0;
			return 0;
		} else {
		    new quantidade;
		    new quantia;
		    quantidade = strval(text);
			if(AbastecendoVeiculo[playerid] == 1){
			    if(quantidade <= 0 || GetPlayerServerMoney(playerid) < ValorGasolina*quantidade){
				    format(string, sizeof(string), "[POSTO] Você não tem dinheiro para comprar essa quantidade de litros de Gasolina. 1 litro: %d", ValorGasolina);
					SendClientMessage(playerid, COLOR_GRAY, string);
					AbastecendoVeiculo[playerid] = 0;
					SetPlayerControl(playerid, true);
					return 0;
				}
   				SendClientMessage(playerid,COLOR_LIGHT_RED,"Abastecendo...");
				if(quantidade + currentgas < tanque){
		   			SetTimerEx("AplicarGasosa",quantidade*150,0,"ddd",playerid,GetPlayerVehicleID(playerid),quantidade+currentgas);
				    format(string, sizeof(string), "Espere o abastecimento completar. Serão colocados %d litros de Gasolina.", quantidade);
					AddPlayerMoney(playerid, -(ValorGasolina * quantidade), -1);
				}
 				else if(quantidade + currentgas > tanque){
				    quantia = tanque - currentgas;
					SetTimerEx("AplicarGasosa",quantia*150,0,"ddd",playerid,GetPlayerVehicleID(playerid),tanque);
					format(string, sizeof(string), "Espere o abastecimento completar. Seu tanque será enchido com %d litros de Gasolina.", quantia);
					AddPlayerMoney(playerid, -(ValorGasolina * quantia), -1);
				}
			}
			if(AbastecendoVeiculo[playerid] == 2){
			    if(quantidade <= 0 || GetPlayerServerMoney(playerid) < ValorAditivada*quantidade){
				    format(string, sizeof(string), "[POSTO] Você não tem dinheiro para comprar essa quantidade de litros de Gasolina Aditivada. 1 litro: %d", ValorAditivada);
					SendClientMessage(playerid, COLOR_GRAY, string);
					AbastecendoVeiculo[playerid] = 0;
					SetPlayerControl(playerid, true);
					return 0;
				}
			    SendClientMessage(playerid,COLOR_LIGHT_RED,"Abastecendo...");
				if(quantidade + currentgas < tanque){
		   			SetTimerEx("AplicarGasosa",quantidade*150,0,"ddd",playerid,GetPlayerVehicleID(playerid),quantidade+currentgas);
				    format(string, sizeof(string), "Espere o abastecimento completar. Serão colocados %d litros de Gasolina Aditivada.", quantidade);
					AddPlayerMoney(playerid, -(ValorAditivada * quantidade), -1);
				}
 				else if(quantidade + currentgas > tanque){
				    quantia = tanque - currentgas;
					SetTimerEx("AplicarGasosa",quantia*150,0,"ddd",playerid,GetPlayerVehicleID(playerid),tanque);
					format(string, sizeof(string), "Espere o abastecimento completar. Seu tanque será enchido com %d litros de Gasolina Aditivada.", quantia);
					AddPlayerMoney(playerid, -(ValorAditivada * quantia), -1);
				}
			}
			if(AbastecendoVeiculo[playerid] == 3){
			    if(quantidade <= 0 || GetPlayerServerMoney(playerid) < ValorDiesel*quantidade){
				    format(string, sizeof(string), "[POSTO] Você não tem dinheiro para comprar essa quantidade de litros de Diesel. 1 litro: %d", ValorDiesel);
					SendClientMessage(playerid, COLOR_GRAY, string);
					AbastecendoVeiculo[playerid] = 0;
					SetPlayerControl(playerid, true);
					return 0;
				}
			    SendClientMessage(playerid,COLOR_LIGHT_RED,"Abastecendo...");
				if(quantidade + currentgas < tanque){
		   			SetTimerEx("AplicarGasosa",quantidade*150,0,"ddd",playerid,GetPlayerVehicleID(playerid),quantidade+currentgas);
				    format(string, sizeof(string), "Espere o abastecimento completar. Serão colocados %d litros de Diesel.", quantidade);
					AddPlayerMoney(playerid, -(ValorDiesel * quantidade), -1);
				}
 				else if(quantidade + currentgas > tanque){
				    quantia = tanque - currentgas;
					SetTimerEx("AplicarGasosa",quantia*150,0,"ddd",playerid,GetPlayerVehicleID(playerid),tanque);
					format(string, sizeof(string), "Espere o abastecimento completar. Seu tanque será enchido com %d litros de Diesel.", quantia);
					AddPlayerMoney(playerid, -(ValorDiesel * quantia), -1);
				}
			}
			if(AbastecendoVeiculo[playerid] == 4){
			    if(quantidade <= 0 || GetPlayerServerMoney(playerid) < ValorAlcool*quantidade){
				    format(string, sizeof(string), "[POSTO] Você não tem dinheiro para comprar essa quantidade de litros de Alcool. 1 litro: %d", ValorAlcool);
					SendClientMessage(playerid, COLOR_GRAY, string);
					AbastecendoVeiculo[playerid] = 0;
					SetPlayerControl(playerid, true);
					return 0;
				}
			    SendClientMessage(playerid,COLOR_LIGHT_RED,"Abastecendo...");
				if(quantidade + currentgas < tanque){
		   			SetTimerEx("AplicarGasosa",quantidade*150,0,"ddd",playerid,GetPlayerVehicleID(playerid),quantidade+currentgas);
				    format(string, sizeof(string), "Espere o abastecimento completar. Serão colocados %d litros de Alcool.", quantidade);
					AddPlayerMoney(playerid, -(ValorAlcool * quantidade), -1);
				}
 				else if(quantidade + currentgas > tanque){
				    quantia = tanque - currentgas;
					SetTimerEx("AplicarGasosa",quantia*150,0,"ddd",playerid,GetPlayerVehicleID(playerid),tanque);
					format(string, sizeof(string), "Espere o abastecimento completar. Seu tanque será enchido com %d litros de Alcool.", quantia);
					AddPlayerMoney(playerid, -(ValorAlcool * quantia), -1);
				}
			}
			if(AbastecendoVeiculo[playerid] == 5){
			    if(quantidade <= 0 || GetPlayerServerMoney(playerid) < ValorQuerosene*quantidade){
				    format(string, sizeof(string), "[POSTO] Você não tem dinheiro para comprar essa quantidade de litros de Querosene. 1 litro: %d", ValorQuerosene);
					SendClientMessage(playerid, COLOR_GRAY, string);
					AbastecendoVeiculo[playerid] = 0;
					SetPlayerControl(playerid, true);
					return 0;
				}
			    SendClientMessage(playerid,COLOR_LIGHT_RED,"Abastecendo...");
				if(quantidade + currentgas < tanque){
		   			SetTimerEx("AplicarGasosa",quantidade*150,0,"ddd",playerid,GetPlayerVehicleID(playerid),quantidade+currentgas);
				    format(string, sizeof(string), "Espere o abastecimento completar. Serão colocados %d litros de Querosene.", quantidade);
					AddPlayerMoney(playerid, -(ValorQuerosene * quantidade), -1);
				}
 				else if(quantidade + currentgas > tanque){
				    quantia = tanque - currentgas;
					SetTimerEx("AplicarGasosa",quantia*150,0,"ddd",playerid,GetPlayerVehicleID(playerid),tanque);
					format(string, sizeof(string), "Espere o abastecimento completar. Seu tanque será enchido com %d litros de Querosene.", quantia);
					AddPlayerMoney(playerid, -(ValorQuerosene * quantia), -1);
				}
			}
			SendClientMessage(playerid, COLOR_WHITE, string);
			new rand = random(3)+1;
			AcrescentarLucro(7,(ValorQuerosene * quantia)*rand);
			AbastecendoVeiculo[playerid] = 0;
			return 1;
		}
	}
	
	if(EmLigacao[playerid]==1){
	    if(extensao[playerid] == EXTENSION_CELULAR){
			new tmp[128];
			format(tmp,128,"%s [Celular]",text);
			fixchars(tmp);
			SendPlayerMessageToPlayer(CalledID[playerid],playerid,tmp);
			SendPlayerMessageToPlayer(playerid,playerid,tmp);
			for(new i = 0; i < MAX_SLOTS; i++)
			{
			    if(i != playerid && i != CalledID[playerid])
		    	{
			    	if(GetDistanceBetweenPlayers(playerid, i) < 10)
			    	{
			    	    SendPlayerMessageToPlayer(i,playerid,tmp);
			    	}
				}
			}
		}
		else if(extensao[playerid] == EXTENSION_TELEFONE){
		    new tmp[128];
			format(tmp,128,"%s [Telefone]",text);
			fixchars(tmp);
			SendPlayerMessageToPlayer(PickupCaller[PickupEntradaCasa[playerid]],playerid,tmp);
			SendPlayerMessageToPlayer(playerid,playerid,tmp);
			for(new i = 0; i < MAX_SLOTS; i++)
			{
			    if(i != playerid && i != PickupCaller[PickupEntradaCasa[playerid]])
		    	{
			    	if(GetDistanceBetweenPlayers(playerid, i) < 10)
			    	{
			    	    SendPlayerMessageToPlayer(i,playerid,tmp);
			    	}
				}
			}
		}
		else if(extensao[playerid] == EXTENSION_ORELHAO){
		    new tmp[128];
			format(tmp,128,"%s [Orelhão]",text);
			fixchars(tmp);
			SendPlayerMessageToPlayer(CalledID[playerid],playerid,tmp);
			SendPlayerMessageToPlayer(playerid,playerid,tmp);
			for(new i = 0; i < MAX_SLOTS; i++)
			{
		    	if(i != playerid && i != CalledID[playerid])
		    	{
                	if(GetDistanceBetweenPlayers(playerid, i) < 10)
			    	{
			    	    SendPlayerMessageToPlayer(i,playerid,tmp);
			    	}
				}
			}
		}
		else{
		    new tmp[128];
			format(tmp,128,"%s [Virtual Telefonia]",text);
			fixchars(tmp);
			SendPlayerMessageToPlayer(PickupCaller[PickupEntradaCasa[playerid]],playerid,tmp);
			SendPlayerMessageToPlayer(CalledID[playerid],playerid,tmp);
			SendPlayerMessageToPlayer(playerid,playerid,tmp);
		}
		return 0;
	}
	if(senhaatual[playerid] == 1){
 		set(pStats[playerid][Senha],text);
	   	SendClientMessage(playerid, COLOR_GREEN, "[INFO] Senha modificada!");
       	new str[128];
       	format(str, sizeof(str),"Agora sua nova senha é %s",pStats[playerid][Senha]);
       	SendClientMessage(playerid, COLOR_LIGHT_GREEN, str);
	   	senhaatual[playerid] = 0;
	   	return 0;
	}
	if(confirmacaosenha[playerid] == 1){
		if(compare(text, pStats[playerid][Senha])){
			SendClientMessage(playerid, COLOR_WHITE, "[INFO] Senha correta!");
			SendClientMessage(playerid, COLOR_WHITE, "[INFO] Digite agora a sua nova senha no chat!");
			confirmacaosenha[playerid] = 0;
			senhaatual[playerid] = 1;
		} else {
       		SendClientMessage(playerid, COLOR_GRAY, "[INFO] SENHA INCORRETA!");
       		SendClientMessage(playerid, COLOR_GRAY, "[INFO] Desculpe, essa não é a senha certa!");
       		confirmacaosenha[playerid] = 0;
		}
		return 0;
	}
	if(Mudo[playerid] == 1) return 0;
	if(CameraAtiva[playerid] == 1){
	    new msg[128];
	    format(msg,sizeof(msg),"[REPÓRTER] %s: %s",PlayerName(playerid),text);
	    SendClientMessageSpectators(playerid, COLOR_WHITE, msg);
	    SendClientMessage(playerid, COLOR_WHITE, msg);
	    return 0;
	}
	if(Entrevista[playerid][1] == 1){
	    new msg[128];
	    format(msg,sizeof(msg),"[REPÓRTER] %s: %s",PlayerName(playerid),text);
	    SendClientMessageSpectators(playerid, COLOR_WHITE, msg);
	    SendClientMessage(Entrevista[playerid][3], COLOR_WHITE, msg);
	    SendClientMessage(playerid, COLOR_WHITE, msg);
	    return 0;
	}
	if(Entrevista[playerid][2] == 1){
	    new msg[128];
	    format(msg,sizeof(msg),"[ENTREVISTADO] %s: %s",PlayerName(playerid),text);
	    SendClientMessageSpectators(playerid, COLOR_WHITE, msg);
	    SendClientMessage(Entrevista[playerid][4], COLOR_WHITE, msg);
	    SendClientMessage(playerid, COLOR_WHITE, msg);
	    ApplyAnimation(playerid,"PED","IDLE_CHAT",2.1,1,1,1,1,1);
	    return 0;
	}
	if(APPROXIMATE_CHAT != 0)
	{
		ChatProximo(playerid,ClearCapsLock(text));
	}
	else
	{
	    SendPlayerMessageToAll(playerid,ClearCapsLock(text));
	}
	return 0;
}
public TempoJogo()
{
    for(new i = 0; i < MAX_SLOTS; i++)
	{
		if(IsPlayerConnected(i) && Logado[i] == 1)
		{
		    if(pStats[i][MinutosConectado] < 60){
		        pStats[i][MinutosConectado] ++;
		    }
			if(pStats[i][MinutosConectado] > 59){
				pStats[i][MinutosConectado] = 0;
				if(pStats[i][HorasConectado] < 23){
					pStats[i][HorasConectado] ++;
				}
				else if(pStats[i][HorasConectado] >= 23){
					pStats[i][HorasConectado] = 0;
					pStats[i][DiasConectado] ++;
				}
			}
		}
	}
}

public GanharRespeito(){
	for(new i = 0; i < MAX_SLOTS; i++){
		if(GetPlayerWantedLevel(i) == 1){
		    pStats[i][Respeito]++;
		    SendClientMessage(i, COLOR_TRAFICANTE, "[RESPEITO] Aew mano, teu level de procurado tirou os tira do nosso pé, toma uma graninha aí.");
		    AddPlayerMoney(i, 300, 3);
			GameTextForPlayer(i, "~g~$~w~300", 5000, 1);
			SetPlayerWantedLevel(i, GetPlayerWantedLevel(i) - 1);
		} else 	if(GetPlayerWantedLevel(i) == 2){
		    pStats[i][Respeito]++;
		    SendClientMessage(i, COLOR_TRAFICANTE, "[RESPEITO] Sussa? Continua se escondendo da polícia né safado! Eles enchem, mas toma uma grana.");
		    AddPlayerMoney(i, 500, 3);
			GameTextForPlayer(i, "~g~$~w~500", 5000, 1);
			SetPlayerWantedLevel(i, GetPlayerWantedLevel(i) - 1);
		} else 	if(GetPlayerWantedLevel(i) == 3){
		    pStats[i][Respeito]++;
		    pStats[i][Respeito]++;
		    SendClientMessage(i, COLOR_TRAFICANTE, "[RESPEITO] Aew mano, vou te chamar pra minha gang. Tu tá colocando medo na polícia.");
		    AddPlayerMoney(i, 700, 3);
			GameTextForPlayer(i, "~g~$~w~700", 5000, 1);
			SetPlayerWantedLevel(i, GetPlayerWantedLevel(i) - 1);
		} else 	if(GetPlayerWantedLevel(i) == 4){
		    pStats[i][Respeito]++;
		    pStats[i][Respeito]++;
		    SendClientMessage(i, COLOR_TRAFICANTE, "[RESPEITO] Vamo participar de uns roubos aí? Tu anda sendo procurado por LS toda. É assim mesmo, Vida Loka!");
		    AddPlayerMoney(i, 900, 3);
			GameTextForPlayer(i, "~g~$~w~900", 5000, 1);
			SetPlayerWantedLevel(i, GetPlayerWantedLevel(i) - 1);
		} else 	if(GetPlayerWantedLevel(i) == 4){
		    pStats[i][Respeito]++;
		    pStats[i][Respeito]++;
   		    pStats[i][Respeito]++;
			SetPlayerWantedLevel(i, GetPlayerWantedLevel(i) - 1);
		    SendClientMessage(i, COLOR_TRAFICANTE, "[RESPEITO] Essa vida de crime é pesada, bem-vindo ao limite da morte! PARABÉNS O.O");
		    AddPlayerMoney(i, 1000, 3);
			GameTextForPlayer(i, "~g~$~w~1000", 5000, 1);
		}
	}
	return 1;
}
public FecharServidor(){
    new Hora,Minuto,Segundo,Ano,Mes,Dia, msg[128];
    SavePCVPJGO();
   	SendClientMessageToAll(COLOR_LIGHT_RED, "[VLR] Hora de encerrar, não esqueça 10:00 amanhã. Carregando outro mode.");
   	SendClientMessageToAll(COLOR_LIGHT_RED, "[VLR] Obrigado por escolher nosso servidor, Att, Equipe Virtual Life RPG.");
	for(new i = 0; i < MAX_SLOTS; i++){
	    if(IsPlayerConnected(i) && Logado[i] == 1){
	    	SavePlayer(PlayerName(i), i);
            gettime(Hora,Minuto,Segundo);
			getdate(Ano,Mes,Dia);
            format(msg,sizeof(msg),"%s foi kickado do servidor. MOTIVO: Servidor Fechou",PlayerName(i));
			writelog(msg);
			print(msg);
			SendClientMessage(i, COLOR_WHITE, msg);
            Kick(i);
		}
	}
	format(msg,sizeof(msg),"Sucesso! Mode encerrado em %s/%s/%s às %s:%s:%s.",ApplyZero(Dia),ApplyZero(Mes),ApplyZero(Ano),ApplyZero(Hora),ApplyZero(Minuto),ApplyZero(Segundo));
	writelog(msg);
	SendRconCommand("changemode lvdm");
}


public SubMissoes(){
    SendClientMessageToAll(COLOR_WHITE, " ");
	SendClientMessageToAll(COLOR_WHITE, "|=================================| New Paper's Life |=================================|");
	new avisou = 0;
	for(new s = 0; s < MAX_SUBMISSIONS; s++){
	    if(!SubMissaoAtiva[s]){
			new rand = random(5);
			if(rand == 0 || rand == 1){
 				switch(s){
			       	case NONE: continue;
			       	case SORVETERIA:
        	  		{
						SendClientMessageToAll(COLOR_CLEAR_PINK, "[SORVETERIA] Estamos contratando alguém temporariamente para fazer entregas de sorvetes, se você quer, venha até a sorveteria!");
						SubMissaoAtiva[SORVETERIA] = 1;
						avisou = 1;
					}
					case DROGAS:
				    {
				        SendClientMessageToAll(COLOR_TRAFICANTE, "[NOTICIAS] Governo descobre que traficantes estão contratando alguém para transportar drogas no morro!");
				        SendClientMessageToAll(COLOR_TRAFICANTE, "Policiais já foram chamados ao local...");
						SendClientMessagePolicia(COLOR_CENTRAL, "Vocês viram! Corram para o morro antes que alguém chegue e entregue as drogas sem vocês perceberem!");
						SubMissaoAtiva[DROGAS] = 1;
						avisou = 1;
					}
					case DJ:
				    {
				        SendClientMessageToAll(COLOR_COP_MILITAR, "[BALADA] Estamos contratado alguém para ser DJ por 5 horas aqui, quem estiver interessado é só aparecer...");
						SubMissaoAtiva[DJ] = 1;
						avisou = 1;
					}
					case CIMENTO:
					{
						SendClientMessageToAll(COLOR_PEDREIRA, "[CONSTRUÇÃO] Precisamos de alguém para levar cimento, para as construções. Apareça na Administração.");
						SubMissaoAtiva[CIMENTO] = 1;
						avisou = 1;
					}
					case IML:
					{
   				        SendClientMessageToAll(COLOR_TURQUOISE, "[IML] Precisamos de alguém que leve os caixões para o cemitério. Local: Hospital Norte.");
						SubMissaoAtiva[IML] = 1;
						avisou = 1;
					}
					case POSTE:
					{
				        SendClientMessageToAll(COLOR_MECANICO, "[COEVL] Alguns postes estão queimados, precisamos trocar algumas lâmpadas. Local: Central de Energia.");
						SubMissaoAtiva[POSTE] = 1;
						avisou = 1;
					}
				}
			}
		}
	}
	if(avisou == 1)
	{
		SendClientMessageToAll(COLOR_WHITE, "Não esqueça caso queira: Quando chegar ao local digite /bico");
	}
	else
	{
	    SendClientMessageToAll(COLOR_GRAY, "Nenhuma proposta de emprego temporário registrada!");
	}
	SendClientMessageToAll(COLOR_WHITE, "|====================================================================================|");
    SendClientMessageToAll(COLOR_WHITE, " ");
}

public FomeBatendo()
{
	for(new i = 0; i < MAX_SLOTS; i++)
	{
	    if(IsPlayerConnected(i) && Logado[i] == 1 && MiniGame[i] == 0)
	    {
	        if(pStats[i][Fome] > 15 || pStats[i][Fome] < 0)
	        {
	            pStats[i][Fome] = 0;
	        }
	        if(pStats[i][Fome] < 15)
			{
			    pStats[i][Fome]++;
			    if(pStats[i][Fome] == 15)
		    	{
			        SendClientMessage(i, COLOR_WHITE, "Você está ficando com fome, vai começar a perder saúde.");
			    }
			}
			else if(pStats[i][Fome] == 15)
			{
			    new Float:health;
			    GetPlayerHealth(i, health);
				SetPlayerHealthEx(i, health - 1);
				if(random(4) == 0)
				{
				    SendClientMessage(i, COLOR_WHITE, "Olha a fome batendo... Vá comer em algum local ou chame um Entregador de Pizza.");
				}
			}
	    }
	}
	new Segundo, Minuto, Hora, Dia, Mes, Ano, msg[128];
	gettime(Hora,Minuto,Segundo);
	getdate(Ano,Mes,Dia);
	if(Hora > 1 && Hora < 3){
 	   	SendClientMessageToAll(COLOR_LIGHT_RED, "[VLR] Olá a todos está tarde, o Virtual Life RPG, vai fechar, abriremos as 10:00 automaticamete.");
       	SendClientMessageToAll(COLOR_LIGHT_RED, "[VLR] Estamos salvando as contas e dados do servidor, fecharemos em 60 segundos.");
       	SendClientMessageToAll(COLOR_LIGHT_RED, "[VLR] Carregando outro mode para jogarem na madrugada.");
		format(msg,sizeof(msg),"Aviso encerramento do mode iniciado em %s/%s/%s às %s:%s:%s.",ApplyZero(Dia),ApplyZero(Mes),ApplyZero(Ano),ApplyZero(Hora),ApplyZero(Minuto),ApplyZero(Segundo));
		writelog(msg);
		SetTimer("FecharServidor",60000,0);
	}
}

public DesmancheDoencaGarganBebi(){
	PassarFomeGrit++;
	for(new i = 0; i < MAX_SLOTS; i++){
	    if(IsPlayerConnected(i) && Logado[i] == 1){
			if(PassarFomeGrit > 0 && PassarFomeGrit < 12){
				new c=0;
				while(c<LastCasa){
				    SavePickup(c);
				    c++;
				}
				new p=1;
				while(p<sizeof Propriedades){
				    SaveProperty(p);
				    p++;
				}
				new v=0;
				while(v<AmountServerVehicles + AmountPlayerVehicles){
				    if(!fexist(VehicleFile(v))) break;
			     	SaveVehicle(v);
				    v++;
				}
				SaveHotelFile();
				SaveJornais();
				SaveGangues();
			    SaveCell("Utilidades/celulares.rpg");
			    SalvarPastaGangZones("Utilidades/zones.rpg");
			    SavePastaUtilitarios("Utilidades/utilitarios.cfg");
			    SavePCVPJGO();
			}
			if(PassarFomeGrit == 5 || PassarFomeGrit == 10)
			{
	    		if(pStats[i][Prof] == ASSALTANTE)
				{
				    DesmancheValor = 200 + (random(8) * 100);
					new string[128];
					format(string, sizeof string, "[DESMANCHE] Aew! Maluco tamo oferecendo $%d pila por qualquer lata, se tu tiver afim... Só trazer.", DesmancheValor);
					SendClientMessage(i, COLOR_ASSALTANTE, string);
				}
			}
			if(PassarFomeGrit == 9){
			    if(IsPlayerConnected(i) && Logado[i] == 1 && !IsPlayerInAnyVehicle(i)){
			        EnviarAnuncio(i);
				}
			}
			if(PassarFomeGrit >= 12){
				PassarFomeGrit = 0;
			}
		}
		if(Gritos[i] > 0 && Gritos[i] < 5){
			Gritos[i] --;
		} else if(Gritos[i] >= 5) {
	       	Gritos[i] -= 2;
	       	SendClientMessage(i, COLOR_GREEN, "Sua garganta está ficando boa novamente! Chega de exagerar nos gritos hein?!");
		}
	}
}

public Abastecimentos(){
	new avisou;
    for(new a = 0; a < MAX_ABASTECIMENTOS; a++){
		new rand = random(4);
		if(rand == 0 || rand == 1){
		    if(RequerAbastecimento[a] == 0)
		    {
   				RequerAbastecimento[a] = 1;
   				avisou = 1;
   				for(new i = 0; i < MAX_SLOTS; i++){
					if(pStats[i][Prof] == BARMAN){
						SendClientMessage(i, COLOR_BARMAN, AbastecimentoString[a]);
					}
				}
			}
		}
		else{
		    if(RequerAbastecimento[a] == 1)
		    {
		       	for(new i = 0; i < MAX_SLOTS; i++){
					if(pStats[i][Prof] == BARMAN){
						SendClientMessage(i, COLOR_BARMAN, AtrasoAbastecimentoString[a]);
					}
				}
		    }
		    RequerAbastecimento[a] = 0;
		}
	}
	if(avisou == 0){
		for(new i = 0; i < MAX_SLOTS; i++){
			if(pStats[i][Prof] == BARMAN){
				SendClientMessage(i, COLOR_BARMAN, "Nenhum local solicitou o serviço de abastecimento de bebidas...");
			}
		}
	}
}
public VehicleDamnification(){
	for(new i = 0; i < MAX_SLOTS; i++){
	    if(IsPlayerConnected(i) && Logado[i] == 1 && IsPlayerInAnyVehicle(i) && PlayerDerby[i] == 0){
	        new Float:vHealth;
	        GetVehicleHealth(GetPlayerVehicleID(i),vHealth);
        	if(InVehicle[i] == 0){
			    InVehicle[i] = 1;
			    LastVehicleHealth[i] = floatround(vHealth);
			}
			else{
				if(LastVehicleHealth[i] > floatround(vHealth) && LastVehicleHealth[i] - floatround(vHealth) > 100){
					if(vStats[GetPlayerVehicleID(i)][Airbag] > 0){
					    new info[128];
					    vStats[GetPlayerVehicleID(i)][Airbag]--;
						if(vStats[GetPlayerVehicleID(i)][Airbag] > 0) format(info,128,"[INFO] Você bateu o veículo mas o Airbag lhe protegeu, agora lhe restam mais %d vez(es) para usa-lo!",vStats[GetPlayerVehicleID(i)][Airbag]);
						else format(info,128,"[INFO] Essa foi a última vez que o Airbag foi usado, agora acabou, se quiser compre mais...");
						SendClientMessage(i, COLOR_GRAY, info);
					}
					else{
					    new Float:playerhealth;
						GetPlayerHealth(i,playerhealth);
						if((playerhealth + 5 - ((LastVehicleHealth[i] - floatround(vHealth)) / 30 + (LastVehicleHealth[i] - floatround(vHealth)) % 15)) <= 0){
							RemovePlayerFromVehicle(i);
							SendClientMessage(i, COLOR_GRAY, "Essa deu até medo, você quase morreu por causa de um acidente, por isso foi retirado do veículo...");
						}
						SetPlayerHealthEx(i, playerhealth + 5 - ((LastVehicleHealth[i] - floatround(vHealth)) / 30 + (LastVehicleHealth[i] - floatround(vHealth)) % 15));
			    		SendClientMessage(i, COLOR_GRAY, "[INFO] Desse jeito não vai, tome mais cuidado. Você bateu seu veículo e por isso sua saúde foi alterada.");
					}
				}
				LastVehicleHealth[i] = floatround(vHealth);
			}
		}
		else{
		    if(InVehicle[i] == 1){
		        InVehicle[i] = 0;
			}
		}
	}
}

public OnPlayerCommandText(playerid, cmdtext[])
{
	if(Tutorial[playerid] > 0) return 1;
    dcmd(logar,5,cmdtext);
    dcmd(registrar,9,cmdtext);
    new stringcmdtext[128];
    format(stringcmdtext,sizeof(stringcmdtext),"[COMANDO] %s: %s",PlayerName(playerid),cmdtext);
	writelog(stringcmdtext);
	fixchars(cmdtext);
    new cmd[128];
    new idx;
	cmd = strtok(cmdtext, idx);

	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPlayerControl(playerid) == 1)
	{
		if(strcmp(cmd, "/dancar", true) == 0)
		{
			new danceid = strval(strtok(cmdtext, idx));
			if(danceid < 1 || danceid > 3)
			{
				SendClientMessage(playerid, COLOR_GRAY, "USO: /dancar [1-3]");
				return 1;
			}
			if(danceid == 1)
			{
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
			}
			else if(danceid == 2)
			{
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
			}
			else if(danceid == 3)
			{
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
			}
			return 1;
		}
		if(strcmp(cmd, "/render", true) == 0) {
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
			if(GetPlayerWantedLevel(playerid) > 0){
				for(new i=0; i<MAX_SLOTS; i++){
		        	if(pStats[i][Prof] == COP_MILITAR || pStats[i][Prof] == DELEGADO || pStats[i][Prof] == COP_RODOVIARIO || pStats[i][Prof] == COP_SWAT){
					    if(GetDistanceBetweenPlayers(i,playerid) < 50){
							if(!TemProfissao(ADVOGADO)){
								if(pStats[playerid][HorasPreso] > 8){
									SendClientMessage(playerid, COLOR_CENTRAL, "[CENTRAL] Ok você se rendeu, diminuiremos sua pena na cadeia em 3 horas.");
									SendClientMessage(playerid, COLOR_CENTRAL, "[CENTRAL] Espere o policial lhe algemar.");
									SendClientMessage(i, COLOR_CENTRAL, "[CENTRAL] O suspeito está rendido algeme ele.");
									pStats[playerid][HorasPreso] -= 3;
									SetPlayerControl(playerid, false);
								} else {
									SendClientMessage(playerid, COLOR_CENTRAL, "[CENTRAL] Ok você se rendeu, diminuiremos sua pena na cadeia em 2 horas.");
									SendClientMessage(playerid, COLOR_CENTRAL, "[CENTRAL] Espere o policial lhe algemar.");
									pStats[playerid][HorasPreso] -= 2;
									SendClientMessage(i, COLOR_CENTRAL, "[CENTRAL] O suspeito está rendido algeme ele.");
									SetPlayerControl(playerid, false);
								}
							}
						}
					}
				}
			}
			return 1;
		}
		if(strcmp(cmd, "/falar", true) == 0) {
		    ApplyAnimation(playerid,"PED","IDLE_CHAT",4.1,0,1,1,1,1);
		    return 1;
		}
		if(strcmp(cmd, "/apontararma", true) == 0) {
		    ApplyAnimation(playerid,"PED","ARRESTgun",4.1,0,1,1,1,1);
		    return 1;
		}
		if(strcmp(cmd, "/exibir-se", true) == 0)
		{
		    ApplyAnimation(playerid,"GYMNASIUM","gym_tread_celebrate",4.1,0,1,1,1,1);
			return 1;
		}
		if(strcmp(cmd, "/crack", true) == 0)
		{
			new crackid = strval(strtok(cmdtext,idx));
			if(crackid < 1 || crackid > 4)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "USO: /sentar [1-7]");
				return 1;
			}
			if(crackid == 1)
			{
				ApplyAnimation(playerid,"CRACK","crckdeth1",4.1,0,1,1,1,1);
			}
			else if(crackid == 2)
			{
			    ApplyAnimation(playerid,"CRACK","crckdeth2",4.1,0,1,1,1,1);
			}
			else if(crackid == 3)
			{
                ApplyAnimation(playerid,"CRACK","crckdeth3",4.1,0,1,1,1,1);
			}
			else if(crackid == 4)
			{
                ApplyAnimation(playerid,"CRACK","crckdeth4",4.1,0,1,1,1,1);
			}
			return 1;
		}
		if(strcmp(cmd, "/sentar", true) == 0)
		{
		    new sitid = strval(strtok(cmdtext, idx));
		    if(sitid < 1 || sitid > 7)
		    {
				SendClientMessage(playerid, COLOR_GRAY, "USO: /sentar [1-7]");
				return 1;
		    }
		    if(sitid == 1)
		    {
		        ApplyAnimation(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 1, 1, 1, 1);
		    }
		    else if(sitid == 2)
		    {
		        ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_in",4.1,0,1,1,1,1);
		    }
		    else if(sitid == 3)
		    {
		        ApplyAnimation(playerid,"HAIRCUTS","BRB_Sit_In",4.1,0,1,1,1,1);
		    }
		    else if(sitid == 4)
		    {
		        ApplyAnimation(playerid,"FOOD","FF_Sit_Eat1",4.1,0,1,1,1,1);
		    }
		    else if(sitid == 5)
		    {
                ApplyAnimation(playerid,"FOOD","FF_Sit_Eat2",4.1,0,1,1,1,1);
		    }
		    else if(sitid == 6)
		    {
                ApplyAnimation(playerid,"FOOD","FF_Sit_Eat3",4.1,0,1,1,1,1);
		    }
			else if(sitid == 7)
			{
			    ApplyAnimation(playerid,"MISC","SEAT_LR",4.1,0,0,0,1,1);
			}
		    return 1;
		}
		if(strcmp(cmd, "/deitar", true) == 0)
		{
		    new bedid = strval(strtok(cmdtext, idx));
		    if(bedid < 1 || bedid > 6)
		    {
				SendClientMessage(playerid, COLOR_GRAY, "USO: /deitar [1-6]");
				return 1;
		    }
		    if(bedid == 1)
		    {
		        ApplyAnimation(playerid,"INT_HOUSE","BED_In_L",4.1,0,0,0,1,1);
		    }
		    else if(bedid == 2)
		    {
		        ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,0,0,1,1);
		    }
		    else if(bedid == 3)
		    {
		        ApplyAnimation(playerid,"INT_HOUSE","BED_Loop_L",4.1,0,0,0,1,1);
		    }
		    else if(bedid == 4)
		    {
		        ApplyAnimation(playerid,"INT_HOUSE","BED_Loop_R",4.1,0,0,0,1,1);
		    }
		    else if(bedid == 5)
		    {
                ApplyAnimation(playerid,"INT_HOUSE","BED_Out_L",4.1,0,0,0,1,1);
		    }
		    else if(bedid == 6)
		    {
                ApplyAnimation(playerid,"INT_HOUSE","BED_Out_R",4.1,0,0,0,1,1);
		    }
		    return 1;
		}
		if(strcmp(cmd, "/caminhar", true) == 0)
		{
		    new walkid = strval(strtok(cmdtext, idx));
		    if(walkid < 1 || walkid > 9)
		    {
		        SendClientMessage(playerid, COLOR_GRAY, "USO: /caminhar [1-9]");
				return 1;
		    }
		    if(walkid == 1)
		    {
		        ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
			}
			else if(walkid == 2)
			{
				ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
			}
			else if(walkid == 3)
			{
			    ApplyAnimation(playerid,"FAT","FatWalk",4.1,1,1,1,1,1);
			}
			else if(walkid == 4)
			{
			    ApplyAnimation(playerid,"POOL","POOL_Walk",4.1,1,1,1,1,1);
			}
			else if(walkid == 5)
			{
			    ApplyAnimation(playerid,"PED","WALK_armed",4.1,1,1,1,1,1);
			}
			else if(walkid == 6)
			{
			    ApplyAnimation(playerid,"MUSCULAR","MuscleWalk",4.1,1,1,1,1,1);
			}
			else if(walkid == 7)
			{
			    ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
			}
			else if(walkid == 8)
			{
			    ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
			}
			else if(walkid == 9)
			{
			    ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
			}
			return 1;
		}
		if(strcmp(cmd, "/correr", true) == 0)
		{
		    new runid = strval(strtok(cmdtext, idx));
		    if(runid < 1 || runid > 5)
		    {
		        SendClientMessage(playerid, COLOR_GRAY, "USO: /correr [1-5]");
				return 1;
		    }
		    if(runid == 1)
		    {
		        ApplyAnimation(playerid,"PED","sprint_civi",4.1,1,1,1,1,1);
			}
			else if(runid == 2)
			{
				ApplyAnimation(playerid,"PED","sprint_panic",4.1,1,1,1,1,1);
			}
			else if(runid == 3)
			{
			    ApplyAnimation(playerid,"PED","Sprint_Wuzi",4.1,1,1,1,1,1);
			}
			else if(runid == 4)
			{
				ApplyAnimation(playerid,"PED","swat_run",4.1,1,1,1,1,1);
			}
			else if(runid == 5)
			{
			    ApplyAnimation(playerid,"FAT","FatSprint",4.1,1,1,1,1,1);
			}
			return 1;
		}
		if(strcmp(cmd, "/parar", true) == 0)
		{
			ClearAnimations(playerid);
			return 1;
		}
	}
	if(strcmp(cmdtext, "/soltarrojao", true) == 0) {
		if(pStats[playerid][Rocket] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem rojão para soltar...");
		if(GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, COLOR_GRAY, "Só é permitido soltar rojões fora de interiores...");
        if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Saiá do veículo para soltar rojão.");
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		pStats[playerid][Rocket]--;
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
		SendClientMessage(playerid, COLOR_LIGHT_RED, "Cover me.");
		SetTimerEx("DroppingRocket", 4000, false, "dfff", 16, X, Y, Z);
		return 1;
	}
	if(strcmp(cmdtext, "/plantarbomba", true) == 0) {
		if(pStats[playerid][ClockBomb] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhuma bomba relógio...");
		if(IsPlayerInAnyVehicle(playerid))
		{
			pStats[playerid][ClockBomb] = 0;
			SendClientMessage(playerid, COLOR_LIGHT_RED, "The bomb has been planted!");
            SetTimerEx("ExplodeBombVehicle", 4000, false, "dd", 10, GetPlayerVehicleID(playerid));
			return 1;
		}
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		pStats[playerid][ClockBomb] = 0;
	    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
	    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
		SendClientMessage(playerid, COLOR_LIGHT_RED, "The bomb has been planted!");
		SetTimerEx("ExplodeBomb", 4000, false, "dfff", 10, X, Y, Z);
		return 1;
	}
	if(strcmp(cmdtext, "/flash", true) == 0) {
	    if(pStats[playerid][Flash] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhuma flash...");
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Saiá do veículo para jogar flash.");
		pStats[playerid][Flash]--;
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
	    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
		SendClientMessage(playerid, COLOR_LIGHT_RED, "Fire in the hole.");
		SetTimerEx("FlashEffect", 7000, false, "fff", X, Y, Z);
	    return 1;
	}
	if(strcmp(cmd, "/removerseguro", true) == 0)
	{
	    new tmp[128];
	    tmp = strtok(cmdtext, idx);
	    if(compare(tmp, "vida"))
	    {
	        if(pStats[playerid][Seguro] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GRAY, "Você não tem seguro de vida.");
	            return 1;
	        }
	        pStats[playerid][Seguro] = 0;
	        SendClientMessage(playerid, COLOR_PINK, "[SEGURADORA] Seguro de vida removido.");
	        if(!IsPlayerInAnyVehicle(playerid) && GetPlayerControl(playerid) == 1)
	        {
	            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
    			SetTimerEx("AcaoEspecial",4000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	        }
	        return 1;
	    }
	    else if(compare(tmp, "imovel"))
	    {
	        new casaid;
	        casaid = strval(tmp);
			if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /removerseguro imovel [casaid]");
			if(GetQtHouses(playerid) == 0){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não tem casa!");
				return 1;
			}
			new casa = GetHouses(playerid, casaid);
			if(casa == -1){
			    SendClientMessage(playerid, COLOR_GRAY, " Você não tem nenhuma casa com esse ID.");
			    return 1;
			}
	        if(pckStats[casa][SeguroDaCasa] == 0){
	            SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem seguro de imóvel.");
	            return 1;
	        }
    		pckStats[casa][SeguroDaCasa] = 0;
    		SendClientMessage(playerid, COLOR_PINK, "[SEGURADORA] Seguro de imóvel removido.");
    		SendClientMessage(playerid, COLOR_PINK, "[SEGURADORA] Obrigado, quando precisar disponha.");
	        if(!IsPlayerInAnyVehicle(playerid) && GetPlayerControl(playerid) == 1)
	        {
	            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
    			SetTimerEx("AcaoEspecial",4000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	        }
    		return 1;
	    }
	    else if(compare(tmp, "veiculo"))
	    {
	        new vid = strval(strtok(cmdtext,idx));
	        new carid = GetVehicles(playerid, vid);
	        if(vid < 1 || vid > GetQtVehicles(playerid) + 1 || carid == -1)
	        {
	            SendClientMessage(playerid, COLOR_GRAY, "USO: /removerseguro veiculo [id]");
	            new str[128];
	            format(str, sizeof str, "Veículos de 1 até %d.", GetQtVehicles(playerid) + 1);
	            SendClientMessage(playerid, COLOR_GRAY, str);
	            return 1;
	        }
			if(vStats[carid][VSeguro] == 0)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Esse veículo não possui seguro.");
			    return 1;
			}
			vStats[carid][VSeguro] = 0;
			SendClientMessage(playerid, COLOR_PINK, "[SEGURADORA] O seguro do veículo foi removido...");
			if(!IsPlayerInAnyVehicle(playerid) && GetPlayerControl(playerid) == 1)
	        {
	            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
    			SetTimerEx("AcaoEspecial",4000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	        }
			return 1;
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /removerseguro [vida/veiculo/imovel]");
	        return 1;
	    }
	}
	if(strcmp(cmdtext, "/massagemcardiaca", true) == 0) {
   		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
   		    if(!TemProfissao(PARAMEDICO)) return SendClientMessage(playerid, COLOR_GRAY, "Não há Paramédicos online...");
   		    if(pStats[playerid][Morrendo] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você está inconsciente, não pode fazer isso...");
   		    new Float:posx,Float:posy,Float:posz,string[128];
   		    GetPlayerPos(playerid,posx,posy,posz);
   		    new id = GetProxUnbewusstePlayer(playerid,posx,posy,posz,1.0);
   		    if(id == -1) return SendClientMessage(playerid, COLOR_GRAY, "Para executar a massagem cardiaca é necessário um jogador inconsciente por perto...");
			if(MassagemCardiaca[id] == 1){
			    format(string,sizeof(string),"%s já recebeu uma massagem cardiaca, agora deve esperar pelos paramédicos...",PlayerName(id));
			 	return SendClientMessage(playerid, COLOR_GRAY, string);
			}
			MassagemCardiaca[id] = 1;
			CtgDead[id] += random(5)+2;
			format(string,sizeof(string),"%s lhe fez uma massagem cardiaca, você pode aguentar mais tempo agora!",PlayerName(playerid));
			SendClientMessage(id, COLOR_BLUE, string);
			format(string,sizeof(string),"Massagem cardiaca feita em %s, agora é só aguardar pelos paramédicos...",PlayerName(id));
			SendClientMessage(playerid, COLOR_BLUE, string);
    		ApplyAnimation(playerid,"MEDIC","CPR",4.1,0,1,1,1,1);
    		ApplyAnimation(playerid,"MEDIC","CPR",4.1,0,1,1,1,1);
      		return 1;
		}
	}

	if(strcmp(cmd, "/exibircracha", true) == 0)
	{
		if(pStats[playerid][Cracha] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você já está exibindo seu crachá!");
		pStats[playerid][Cracha] = 1;
		SendClientMessage(playerid, COLOR_WHITE, "Crachá exibido, agora as pessoas saberão no que você trabalha!");
		return 1;
	}
	if(strcmp(cmd, "/escondercracha", true) == 0)
	{
		if(pStats[playerid][Cracha] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Seu crachá já está escondido!");
		pStats[playerid][Cracha] = 0;
		SendClientMessage(playerid, COLOR_WHITE, "Crachá escondido!");
		return 1;
	}
	if(strcmp(cmd,"/som",true) == 0){
		if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não é admin...");
		new tmp[128];
		tmp = strtok(cmdtext,idx);
		new soundid = strval(tmp);
		new string[128];
	    format(string,sizeof(string),"[INFO] Som executado: %d",soundid);
	    SendClientMessage(playerid, COLOR_GREEN, string);
	    PlayerPlaySound(playerid,soundid,0.0,0.0,0.0);
		return 1;
	}

	if(strcmp(cmd, "/soltarpreso", true) == 0)
	{
	    if(ChavePrisao[playerid][0] == 0){
        	SendClientMessage(playerid,COLOR_GRAY,"Você não tem a chave da cadeia!");
        	return 1;
        }
 	    new tmp[128];
		new plid;
		new string[128];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_GRAY, "/soltarpreso [id]");
			return 1;
		}
        plid = strval(tmp);
     	if(IsPlayerConnected(plid) && Logado[playerid] == 1)
		 {
			if(pStats[plid][Preso] == 0)
			{
			    SendClientMessage(playerid,COLOR_GRAY,"O jogador não está preso!");
				return 1;
			}
			else
			{
			    format(string, sizeof(string), "%s lhe soltou com a chave da prisão.", PlayerName(playerid));
		        SendClientMessage(plid, COLOR_GREEN, string);
			    SendClientMessage(playerid, COLOR_GREEN, "Prisioneiro solto.");
				ChavePrisao[playerid][0] = 0;
				ChavePrisao[plid][1] = 1;
				SetPlayerFree(plid);
				return 1;
			}
		} else {
            SendClientMessage(playerid, COLOR_GRAY, "Jogador não está conectado/logado");
			return 1;
		}
	}

	if(strcmp(cmd, "/iscas", true) == 0) {
		new tmp[128];
		new quant;
		tmp = strtok(cmdtext,idx);
		quant = strval(tmp);
		if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_GRAY, "USO: /iscas [quantia/de/iscas]");
			return 1;
		}
		if(pStats[playerid][Iscas] == 20){
			SendClientMessage(playerid, COLOR_GRAY, "Você já possui o máximo de iscas!");
			return 1;
		}
		if(quant+pStats[playerid][Iscas] > 20){
			SendClientMessage(playerid, COLOR_GRAY, "Você só pode levar 20 iscas no máximo!");
			return 1;
		}
		if(quant <= 0){
			SendClientMessage(playerid, COLOR_GRAY, "Ei, a quantidade é de 1 à 20");
			return 1;
		}
		if(PlayerArea[playerid] != AreaCoopPesca){
			SendClientMessage(playerid, COLOR_GRAY, "Você não está na cooperativa de pesca!");
			return 1;
		} else {
			  if(pStats[playerid][Prof] == PESCADOR || IsPlayerAdmin(playerid)){
			  	SendClientMessage(playerid, COLOR_PESCADOR, "Você não precisou pagar as iscas pois é Pescador!");
			  	new string[128];
			  	format(string,sizeof(string), "Você pegou %d iscas! Total de iscas que você possui: %d",quant,quant+pStats[playerid][Iscas]);
			  	SendClientMessage(playerid, COLOR_PESCADOR, string);
			  	pStats[playerid][Iscas] += quant;
			  	return 1;
			  } else {
			        new custo;
			        custo = quant*10;
			        if(GetPlayerServerMoney(playerid) < custo){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro para pagar as iscas!");
					return 1;
					} else {
						  new string[128];
						  format(string,sizeof(string),"Você comprou %d iscas por $%d. Agora você possui %d iscas!",quant,custo,pStats[playerid][Iscas]+quant);
						  SendClientMessage(playerid, COLOR_PESCADOR, string);
						  AddPlayerMoney(playerid,-custo,4);
						  pStats[playerid][Iscas] += quant;
						  AcrescentarLucro(16,custo);
						  return 1;
			  		}
			  }
		}
	}
	if(strcmp(cmd, "/levarpesca", true) == 0) {
		if(PlayerArea[playerid] != AreaCoopPesca){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está na cooperativa de pesca!");
		    return 1;
		}
		if(pStats[playerid][Pesca] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhuma pesca para levar!");
		    return 1;
		}
		pStats[playerid][Peixe] += Pescado[playerid];
        pStats[playerid][Pesca] = 0;
		Pescado[playerid] = 0;
		SendClientMessage(playerid, COLOR_PESCADOR, "[COOPERATIVA DE PESCA] Hum... Pode levar os peixes!");
		return 1;
	}
	if(strcmp(cmd, "/venderpesca", true) == 0) {
	    new msg[128];
	    if(PlayerArea[playerid] == AreaCoopPesca){
	    	if(pStats[playerid][Pesca] == 0){
	        	SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhuma pesca, como poderá vender?");
	        	format(msg,sizeof(msg),"%s usou o comando /venderpesca sem nenhuma pesca acumulada.",PlayerName(playerid));
	        	writelog(msg);
	        	return 1;
			} else {
				format(msg,sizeof(msg),"Pescado vendido, você recebeu $%d.",pStats[playerid][Pesca]);
				SendClientMessage(playerid, COLOR_PESCADOR, msg);
				AcrescentarPrejuizo(16,pStats[playerid][Pesca]);
				AddPlayerMoney(playerid,pStats[playerid][Pesca],3);
				pStats[playerid][Pesca] = 0;
				Pescado[playerid] = 0;
				return 1;
			}
		}
		else {
			SendClientMessage(playerid, COLOR_GRAY, "Você não está na Cooperativa de Pesca.");
			return 1;
		}
	}

	if(strcmp(cmd, "/carga", true) == 0)
	{
	    if(pStats[playerid][Prof] == CAMINHONEIRO || IsPlayerAdmin(playerid))
		{
			new tmp[128];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAY, "USO: /carga [id]");
			    return 1;
			}
			new plid = strval(tmp);
			if(!IsPlayerConnected(plid))
			{
                SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
			    return 1;
			}
			if(GetDistanceBetweenPlayers(playerid, plid) > 15.0)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto do jogador para mostrar a carga.");
			    return 1;
			}
		    new msg[128];
		    if(CheckpointStatus[playerid] == TRANSPORTANDO_DROGAS)
		    {
		        SendClientMessage(playerid, COLOR_CAMINHONEIRO, "Ixiii, ferrou, ele descobriu que você está transportando drogas.");
		        SendClientMessage(playerid, COLOR_CAMINHONEIRO, "É bom render-se para evitar maiores problemas.");
				format(msg, sizeof msg, "Documentação da Carga de %s", PlayerName(playerid));
				SendClientMessage(plid, COLOR_LIGHT_RED, msg);
				SendClientMessage(plid, COLOR_WHITE, "Transporte considerado ILEGAL, rápido, prenda-o.");
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_CAMINHONEIRO, "Documentação da carga mostrada.");
		        format(msg, sizeof msg, "Documentação da Carga de %s", PlayerName(playerid));
				SendClientMessage(plid, COLOR_LIGHT_RED, msg);
		        SendClientMessage(plid, COLOR_WHITE, "Transporte considerado LEGAL, sem drogas na carga.");
		    }
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Caminhoneiro.");
		    return 1;
		}
	}
	if(strcmp(cmd, "/carregar", true) == 0) {
	    if(pStats[playerid][Prof] == CAMINHONEIRO || IsPlayerAdmin(playerid)){
	        if(PlayerArea[playerid] == AreaCarga){
				if(IsTruck(GetPlayerVehicleID(playerid))){
				    if(CheckpointStatus[playerid] != CARREGAMENTO){
						if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)) || GetVehicleModel(GetPlayerVehicleID(playerid)) == 414){
	       					ShowMenuForPlayer(CargaGeral,playerid);
				       		SetPlayerControl(playerid,0);
							return 1;
 						} else {
				        	SendClientMessage(playerid,COLOR_CAMINHONEIRO,"Seu caminhão não tem Trailer!");
							return 1;
						}
					} else {
			        	SendClientMessage(playerid,COLOR_CAMINHONEIRO,"Seu caminhão já está carregado!");
						return 1;
					}
				} else {
			    	SendClientMessage(playerid,COLOR_GRAY,"Você não está em um caminhão ROADTRAIN ou MULE!");
					return 1;
				}
	  		} else {
	        	SendClientMessage(playerid, COLOR_GRAY, "Você não está na área de carga!");
				return 1;
			}
    	}else{
        	SendClientMessage(playerid,COLOR_GRAY,"Você não tem permissão!");
    		return 1;
		}
	}

	if(strcmp(cmd, "/carregarcaminhao", true) == 0) {
	    if(pStats[playerid][Prof] == PEDREIRA || IsPlayerAdmin(playerid)){
	        if(PlayerArea[playerid] == AreaPedreiraCarga){
				if(IsDumper(GetPlayerVehicleID(playerid))){
				    if(Pedras[playerid] == 0){
				        new rand = random(3);
				        if(rand == 0){
				            SetPlayerCheckpoint(playerid,2446.8005,1934.5291,7.2706,5.0);
				        } else if(rand == 1){
				            SetPlayerCheckpoint(playerid,1270.9941,-1253.3600,13.4342,5.0);
				        } else if(rand == 2){
				         	SetPlayerCheckpoint(playerid,-2086.2314,286.0349,35.4725,5.0);
				        }
				    	CheckpointStatus[playerid] = OBRAS;
				    	SendClientMessage(playerid,COLOR_PEDREIRA,"Veículo carregado!");
				    	SendClientMessage(playerid,COLOR_PEDREIRA,"Para descarregá-lo, vá até o ponto vermelho marcado no Radar.");
				    	Pedras[playerid] = 1;
				    	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
				    	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
						return 1;
					} else {
				        SendClientMessage(playerid,COLOR_PEDREIRA,"Seu caminhão já está carregado!");
						return 1;
					}
				} else {
				    SendClientMessage(playerid,COLOR_GRAY,"Você não está em um caminhão DUMPER!");
					return 1;
				}
	        } else {
	            SendClientMessage(playerid, COLOR_GRAY, "Você não está na área de carregamento de carga!");
				return 1;
			}
	    } else {
	        SendClientMessage(playerid,COLOR_GRAY,"Você não tem permissão!");
	    	return 1;
	    }
	}

	if(strcmp(cmd, "/pegardroga", true) == 0) {
	    if(pStats[playerid][Prof] == TRAFICANTE || IsPlayerAdmin(playerid)){
			SetPlayerCheckpoint(playerid,2258.3687,-1030.6180,52.6575,3.0);
			SendClientMessage(playerid, COLOR_TRAFICANTE,"Vá para o Beco marcado no radar para pegar as drogas.");
			CheckpointStatus[playerid] = PEGANDO_DROGAS;
			return 1;
		} else {
			SendClientMessage(playerid,COLOR_GRAY,"Você não é traficante!");
			return 1;
		}
	}
	if(strcmp(cmd, "/pararplantacao", true) == 0) {
	   if(PlantandoDrogas[playerid] == 0){
		  SendClientMessage(playerid, COLOR_GRAY, "Você não está plantando drogas em um veículo!");
		  return 1;
		  }
		  else{
			  PlantandoDrogas[playerid] = 0;
			  SendClientMessage(playerid, COLOR_TRAFICANTE, "Plantação de drogas cancelada!");
			  SetPlayerControl(playerid,1);
			  RemovePlayerFromVehicle(playerid);
			  KillTimer(TempoPlantacao[playerid]);
			  return 1;
		  }
	}
	if(strcmp(cmd, "/plantardrogas", true) == 0) {
	    if(pStats[playerid][Prof] == TRAFICANTE || IsPlayerAdmin(playerid)){
            if(HeroinaMao[playerid] < 1){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não tem Heroina, vá para a Boca pegar mais.");
				return 1;
			}
			if(CocainaMao[playerid] < 1){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não tem Cocaína, vá para a Boca pegar mais.");
				return 1;
			}
			if(MaconhaMao[playerid] < 1){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não tem Maconha, vá para a Boca pegar mais.");
				return 1;
			}
			if(PlantandoDrogas[playerid] == 1){
				SendClientMessage(playerid, COLOR_GRAY, "Ei, você já está plantando drogas, plante essas primeiro!");
				return 1;
			}
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
			    if(GetPlayerVehicleID(playerid) >= AmountServerVehicles && strcmp(vStats[GetPlayerVehicleID(playerid)][VDono],PlayerName(playerid), false)){
					SetPlayerControl(playerid,0);
					PlantandoDrogas[playerid] = 1;
					SendClientMessage(playerid, COLOR_TRAFICANTE, "OK... Você está plantando as drogas! Cuidado se algum narcótico te pegar");
					SendClientMessage(playerid, COLOR_TRAFICANTE, "você será preso e não irá conseguir terminar de plantar essas drogas!");
					TempoPlantacao[playerid] = SetTimerEx("DrogasPlant",45000,false,"d",playerid);
					return 1;
				}
				else{
				    SendClientMessage(playerid, COLOR_GRAY, "Você não pode plantar drogas em um veículo seu ou do governo/servidor.");
					return 1;
				}
			}
			else{
				SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar dirigindo um veículo!");
				return 1;
				}
			}
			else{
				SendClientMessage(playerid, COLOR_GRAY, "Você não é Traficante!");
				return 1;
				}
	}

	if(strcmp(cmd, "/drogas", true) == 0) {
		if(PlayerArea[playerid] != AreaMorro){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está mais no MORRO.");
			return 1;
		}
		if(TaAfim[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Anh? TÁ DOIDO? Quando te ofereci droga?");
			return 1;
		}
		TaAfim[playerid] = 0;
		ComprandoBaguio[playerid] = 1;
	    SendClientMessage(playerid, COLOR_TRAFICANTE, "Blz Mano, vá até o ponto vermelho pegar o bagulho.");
		SetPlayerCheckpoint(playerid, 2140.3203,-1005.8080,61.7145, 3.0);
        CheckpointStatus[playerid] = CDROGAS;
        return 1;
	}


	if(strcmp(cmd, "/heroina", true) == 0) {
	    if(pStats[playerid][Prof] == TRAFICANTE || IsPlayerAdmin(playerid)){
	        new tmp[128];
	        new string[128];
	        new plid, mili;
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp)){
	            SendClientMessage(playerid, COLOR_GRAY,"/heroina [id] [quantidade]");
				return 1;
			}
			plid = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "/heroina [id] [quantidade]");
				return 1;
			}
			mili = strval(tmp);
			if(mili > 3){
			    SendClientMessage(playerid, COLOR_GRAY, "Você está louco? Quer matar o seu cliente? Doses de 1 a 7");
				return 1;
			}
			if(mili < 1){
			    SendClientMessage(playerid, COLOR_GRAY, "Doses de 1 à 3");
				return 1;
			}
			if(pStats[plid][Prof] == TRAFICANTE){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não pode vender para traficantes.");
				return 1;
			}
			if(HeroinaMao[playerid] < 1){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não tem Heroina, vá para a Boca pegar mais.");
				return 1;
			}
		    if(GetDistanceBetweenPlayers(playerid,plid) > 20){
		       	SendClientMessage(playerid,COLOR_GRAY,"Você está muito longe, chegue mais perto!");
				return 1;
			}
		    if(GetPlayerServerMoney(plid) < 150){
		       	SendClientMessage(playerid,COLOR_GRAY,"Ele não tem dinheiro para pagar a droga. Custo: $150.");
				return 1;
			}
			if(DrogasNegoci[playerid] == 1){
		       	SendClientMessage(playerid,COLOR_GRAY,"Você ainda está negociando.");
				return 1;
			}
		    if(IsPlayerConnected(plid)){
			    DrogaOferecida[plid] = 3;
			    QtdDrogaV[plid] = mili;
			    DrogasNegoci[playerid] = 1;
			    format(string,sizeof(string),"Aew Mano, tu ofereceu Heroína para o %s pera ele responder.",PlayerName(playerid));
			    SendClientMessage(playerid, COLOR_TRAFICANTE,string);
				format(string,sizeof(string), "O Traficante %s está lhe oferencendo %d gramas de heroina.", PlayerName(playerid), QtdDrogaV[plid]);
				SendClientMessage(plid, COLOR_WHITE, string);
			    SendClientMessage(plid, COLOR_TRAFICANTE,"Para aceitar digite: /aceitar ou /recusar");
				ParaAceitar[plid] = ACEITAR_DROGA;
				TimerCancel[plid] = SetTimerEx("Cancelar", 30000, 0, "d", plid);
                TraficanteTra[plid] = playerid;
				return 1;
			}
		}
	}
	if(strcmp(cmd, "/maconha", true) == 0) {
	    if(pStats[playerid][Prof] == TRAFICANTE || IsPlayerAdmin(playerid)){
	        new tmp[128];
	        new string[128];
	        new plid, mili;
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp)){
	            SendClientMessage(playerid, COLOR_GRAY,"/maconha [id] [quantidade]");
				return 1;
			}
			plid = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "/maconha [id] [quantidade]");
				return 1;
			}
			mili = strval(tmp);
			if(mili > 3){
			    SendClientMessage(playerid, COLOR_GRAY, "Você está louco? Quer matar o seu cliente? Doses de 1 a 3");
				return 1;
			}
			if(mili < 1){
			    SendClientMessage(playerid, COLOR_GRAY, "Doses de 1 à 3");
				return 1;
			}
			if(pStats[plid][Prof] == TRAFICANTE){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não pode vender para traficantes.");
				return 1;
			}
			if(MaconhaMao[playerid] < 1){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não tem Maconha, vá para a Boca pegar mais.");
				return 1;
			}
		    if(GetDistanceBetweenPlayers(playerid,plid) > 20){
		       	SendClientMessage(playerid,COLOR_GRAY,"Você está muito longe, chegue mais perto!");
				return 1;
			}
			if(DrogasNegoci[playerid] == 1){
		       	SendClientMessage(playerid,COLOR_GRAY,"Você ainda está negociando.");
				return 1;
			}
		    if(IsPlayerConnected(plid)){
			    DrogaOferecida[plid] = 1;
			    QtdDrogaV[plid] = mili;
			    DrogasNegoci[playerid] = 1;
			    format(string,sizeof(string),"Aew Mano, tu ofereceu Maconha para o %s pera ele responder.",PlayerName(playerid));
			    SendClientMessage(playerid, COLOR_TRAFICANTE,string);
				format(string,sizeof(string), "O Traficante %s está lhe oferencendo %d papelotes de maconha.", PlayerName(playerid), QtdDrogaV[plid]);
				SendClientMessage(plid, COLOR_WHITE, string);
			    SendClientMessage(plid, COLOR_TRAFICANTE,"Para aceitar digite: /aceitar ou /recusar");
				ParaAceitar[plid] = ACEITAR_DROGA;
				TimerCancel[plid] = SetTimerEx("Cancelar", 30000, 0, "d", plid);
                TraficanteTra[plid] = playerid;
				return 1;
			}
		}
	}

	if(strcmp(cmd, "/cocaina", true) == 0) {
	    if(pStats[playerid][Prof] == TRAFICANTE || IsPlayerAdmin(playerid)){
	        new tmp[128];
	        new string[128];
	        new plid, mili;
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp)){
	            SendClientMessage(playerid, COLOR_GRAY,"/cocaina [id] [quantidade]");
				return 1;
			}
			plid = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "/cocaina [id] [quantidade]");
				return 1;
			}
			mili = strval(tmp);
			if(mili > 3){
			    SendClientMessage(playerid, COLOR_GRAY, "Você está louco? Quer matar o seu cliente? Doses de 1 a 3");
				return 1;
			}
			if(mili < 1){
			    SendClientMessage(playerid, COLOR_GRAY, "Doses de 1 à 3");
				return 1;
			}
			if(pStats[plid][Prof] == TRAFICANTE){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não pode vender para traficantes.");
				return 1;
			}
			if(CocainaMao[playerid] < 1){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não tem Cocaína, vá para a Boca pegar mais.");
				return 1;
			}
		    if(GetDistanceBetweenPlayers(playerid,plid) > 20){
		       	SendClientMessage(playerid,COLOR_GRAY,"Você está muito longe, chegue mais perto!");
				return 1;
			}
			if(DrogasNegoci[playerid] == 1){
		       	SendClientMessage(playerid,COLOR_GRAY,"Você ainda está negociando.");
				return 1;
			}
		    if(IsPlayerConnected(plid)){
			    DrogaOferecida[plid] = 2;
			    QtdDrogaV[plid] = mili;
			    DrogasNegoci[playerid] = 1;
			    format(string,sizeof(string),"Aew Mano, tu ofereceu Cocaína para o %s pera ele responder.",PlayerName(playerid));
			    SendClientMessage(playerid, COLOR_TRAFICANTE,string);
				format(string,sizeof(string), "O Traficante %s está lhe oferencendo %d saquinhos de pó.", PlayerName(playerid), QtdDrogaV[plid]);
				SendClientMessage(plid, COLOR_WHITE, string);
			    SendClientMessage(plid, COLOR_TRAFICANTE,"Para aceitar digite: /aceitar ou /recusar");
				ParaAceitar[plid] = ACEITAR_DROGA;
				TimerCancel[plid] = SetTimerEx("Cancelar", 30000, 0, "d", plid);
                TraficanteTra[plid] = playerid;
				return 1;
			}
		}
	}

	if(strcmp(cmd, "/meubolso", true) == 0) {
	    if(pStats[playerid][Prof] == TRAFICANTE || IsPlayerAdmin(playerid)){
	        new msg[128];
		    format(msg, sizeof(msg), "Maconha : %d papelotes",MaconhaMao[playerid]);
		    SendClientMessage(playerid,COLOR_TRAFICANTE,msg);
   		    format(msg, sizeof(msg), "Heroina : %d papelotes",HeroinaMao[playerid]);
		    SendClientMessage(playerid,COLOR_TRAFICANTE,msg);
		    format(msg, sizeof(msg), "Cocaína : %d papelotes",CocainaMao[playerid]);
		    SendClientMessage(playerid,COLOR_TRAFICANTE,msg);
			return 1;
		} else {
			SendClientMessage(playerid,COLOR_GRAY,"Você não é Traficante!");
			return 1;
		}
	}
	if(strcmp(cmd, "/injetar", true) == 0) {
	    new msg[128];
	    new tmp[128];
	    new quantia;
	    tmp = strtok(cmdtext, idx);
     	if(!strlen(tmp)){
      		SendClientMessage(playerid, COLOR_GRAY,"/injetar [injeções]");
			return 1;
		}
		quantia = strval(tmp);
		if(quantia > Heroina[playerid]){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem toda essa quantidade de heroína.");
			return 1;
		}
    	if(Heroina[playerid] == 0){
	       	SendClientMessage(playerid, COLOR_GRAY, "Você não possui heroína, como poderá injetar?!");
	       	return 1;
		} else {
		    Heroina[playerid] = Heroina[playerid] - quantia;
		    pStats[playerid][DosesHeroina] = pStats[playerid][DosesHeroina]+quantia;
		    ApplyAnimation(playerid,"CRACK","crckdeth4",4.1, 1, 1, 1, 1, 1);
		    ApplyAnimation(playerid,"CRACK","crckdeth4",4.1, 1, 1, 1, 1, 1);
		    SetPlayerWeather(playerid, 10);
		    pStats[playerid][Fome] -= 100;
			format(msg,sizeof(msg),"Você tomou %d injeções de heroína.",quantia);
			SendClientMessage(playerid, COLOR_GREEN, msg);
			new Float:X,Float:Y,Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			new pck = CreatePickup(1241, 2, X, Y, Z);
			SetTimerEx("DeletePickup", 1500, 0, "d", pck);
			if(pStats[playerid][VicioDrogas] == 1){
			 	TempoVicio[playerid] += 200;
				SendClientMessage(playerid, COLOR_WHITE, "AHHH AMO MUITO TUDO ISSO! UFA já não aguentava mais...");
			}
			if(pStats[playerid][DosesHeroina] >= 5 && pStats[playerid][VicioDrogas] == 0){
				new rand = random(3);
				if(rand == 0){
					pStats[playerid][Respeito]++;
					if(IsPlayerInGang(playerid))
					{
				    	gStats[GetGangID(pStats[playerid][GangueNome])][GangPontos]++;
				    	AddGangLevel(pStats[playerid][GangueNome], 1);
					}
					SendClientMessage(playerid, COLOR_GRAY, "Você ficou viciado em drogas de tanto injetar heroína!");
			    	SendClientMessage(playerid, COLOR_GRAY, "Poderá se tratar indo para o Hospital...");
					pStats[playerid][VicioDrogas] = 1;
					ApplyAnimCrack(playerid);
					SetPlayerWeather(playerid, 5);
					SendPlayerMessageToPlayer(playerid, playerid, "COF COF COF... Drogas, PRECISO DE DROGAS, COF COF COF, COF COF");
					SetTimerEx("PararWeather",25000,0,"d",playerid);
					SetTimerEx("LimparAnim",13000,0,"d",playerid);
					TempoVicio[playerid] = random(30)+random(random(20)) + 40;
					TimerViciado[playerid] = SetTimerEx("Viciado",1000,1,"d",playerid);
					new r = random(4);
					if(r == 0){
						format(msg,sizeof(msg),"[NOTICIAS] %s se interagiu demais com drogas e acabou viciado!!!",PlayerName(playerid));
						SendClientMessageToAll(COLOR_WHITE, msg);
					}
				}
			}
			SetTimerEx("LimparAnim",13000,0,"d",playerid);
			return 1;
		}
	}

	if(strcmp(cmd, "/fumar", true) == 0) {
	    new msg[128];
	    new tmp[128];
	    new quantia;
	    tmp = strtok(cmdtext, idx);
     	if(!strlen(tmp)){
      		SendClientMessage(playerid, COLOR_GRAY,"/fumar [cigarros]");
			return 1;
		}
		quantia = strval(tmp);
		if(quantia > Maconha[playerid]){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem toda essa quantidade de maconha.");
			return 1;
		}
    	if(Maconha[playerid] == 0){
	       	SendClientMessage(playerid, COLOR_GRAY, "Você não tem maconha, como poderá cheirar?");
	       	return 1;
		} else {
		    Maconha[playerid] = Maconha[playerid] - quantia;
		    pStats[playerid][DosesMaconha] = pStats[playerid][DosesMaconha]+quantia;
		    ApplyAnimation(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 1, 1, 1, 1);
		    ApplyAnimation(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 1, 1, 1, 1);
			format(msg,sizeof(msg),"Você fumou %d cigarro(s) de maconha.",quantia);
			pStats[playerid][Fome] -= 80;
			SendClientMessage(playerid, COLOR_GREEN, msg);
			SetPlayerWeather(playerid, 10);
			new Float:X,Float:Y,Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			new pck = CreatePickup(1241, 2, X, Y, Z);
			SetTimerEx("DeletePickup", 1500, 0, "d", pck);
			if(pStats[playerid][VicioDrogas] == 1){
			 	TempoVicio[playerid] += 200;
				SendClientMessage(playerid, COLOR_WHITE, "AHHH AMO MUITO TUDO ISSO! UFA já não aguentava mais...");
			}
			if(pStats[playerid][DosesMaconha] >= 4 && pStats[playerid][VicioDrogas] == 0){
  				new rand = random(3);
				if(rand == 0){
					SendClientMessage(playerid, COLOR_GRAY, "Você ficou viciado em drogas de tanto fumar maconha!");
			    	SendClientMessage(playerid, COLOR_GRAY, "Poderá se tratar indo para o Hospital...");
			    	pStats[playerid][Respeito]++;
			    	if(IsPlayerInGang(playerid))
					{
				    	gStats[GetGangID(pStats[playerid][GangueNome])][GangPontos]++;
				    	AddGangLevel(pStats[playerid][GangueNome], 1);
					}
					pStats[playerid][VicioDrogas] = 1;
					ApplyAnimCrack(playerid);
					SetPlayerWeather(playerid, 5);
					SendPlayerMessageToPlayer(playerid, playerid, "COF COF COF... Drogas, PRECISO DE DROGAS, COF COF COF, COF COF");
					SetTimerEx("PararWeather",25000,0,"d",playerid);
					SetTimerEx("LimparAnim",13000,0,"d",playerid);
					TempoVicio[playerid] = random(30)+random(random(20)) + 40;
					TimerViciado[playerid] = SetTimerEx("Viciado",1000,1,"d",playerid);
					new r = random(4);
					if(r == 0){
						format(msg,sizeof(msg),"[NOTICIAS] %s se interagiu demais com drogas e acabou viciado!!!",PlayerName(playerid));
						SendClientMessageToAll(COLOR_WHITE, msg);
					}
				}
			}
			SetTimerEx("LimparAnim",13000,0,"d",playerid);
			return 1;
		}
	}

	if(strcmp(cmd, "/cheirar", true) == 0) {
	    new msg[128];
	    new tmp[128];
	    new quantia;
	    tmp = strtok(cmdtext, idx);
     	if(!strlen(tmp)){
      		SendClientMessage(playerid, COLOR_GRAY,"/cheirar [gramas]");
			return 1;
		}
		quantia = strval(tmp);
		if(quantia > Cocaina[playerid]){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem toda essa quantidade de cocaína.");
			return 1;
		}
    	if(Cocaina[playerid] == 0){
	       	SendClientMessage(playerid, COLOR_GRAY, "Você não tem cocaína, como poderá cheirar?");
	       	return 1;
		} else {
		    Cocaina[playerid] = Cocaina[playerid] - quantia;
		    pStats[playerid][DosesCocaina] = pStats[playerid][DosesCocaina]+quantia;
		   	ApplyAnimation(playerid,"CRACK", "crckdeth1", 4.0, 1, 1, 1, 1, 1);
		   	ApplyAnimation(playerid,"CRACK", "crckdeth1", 4.0, 1, 1, 1, 1, 1);
			format(msg,sizeof(msg),"Você cheirou %d grama(s) de cocaína.",quantia);
			pStats[playerid][Fome] -= 100;
			SendClientMessage(playerid, COLOR_GREEN, msg);
			SetPlayerWeather(playerid, 10);
			new Float:X,Float:Y,Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			new pck = CreatePickup(1241, 2, X, Y, Z);
			SetTimerEx("DeletePickup", 1500, 0, "d", pck);
			if(pStats[playerid][VicioDrogas] == 1){
			 	TempoVicio[playerid] += 200;
				SendClientMessage(playerid, COLOR_WHITE, "AHHH AMO MUITO TUDO ISSO! UFA já não aguentava mais...");
			}
			if(pStats[playerid][DosesCocaina] >= 5 && pStats[playerid][VicioDrogas] == 0){
				new rand = random(3);
				if(rand == 0){
				    pStats[playerid][Respeito]++;
				    if(IsPlayerInGang(playerid))
					{
				    	gStats[GetGangID(pStats[playerid][GangueNome])][GangPontos]++;
				    	AddGangLevel(pStats[playerid][GangueNome], 1);
					}
					SendClientMessage(playerid, COLOR_GRAY, "Você ficou viciado em drogas de tanto cheirar cocaína!");
			    	SendClientMessage(playerid, COLOR_GRAY, "Poderá se tratar indo para o Hospital...");
			    	pStats[playerid][VicioDrogas] = 1;
					ApplyAnimCrack(playerid);
					SetPlayerWeather(playerid, 5);
					SendPlayerMessageToPlayer(playerid, playerid, "COF COF COF... Drogas, PRECISO DE DROGAS, COF COF COF, COF COF");
					SetTimerEx("PararWeather",25000,0,"d",playerid);
					SetTimerEx("LimparAnim",13000,0,"d",playerid);
					TempoVicio[playerid] = random(30)+random(random(20)) + 40;
					TimerViciado[playerid] = SetTimerEx("Viciado",1000,1,"d",playerid);
					new r = random(4);
					if(r == 0){
						format(msg,sizeof(msg),"[NOTICIAS] %s se interagiu demais com drogas e acabou viciado!!!",PlayerName(playerid));
						SendClientMessageToAll(COLOR_WHITE, msg);
					}
				}
			}
			SetTimerEx("LimparAnim",13000,0,"d",playerid);
			return 1;
		}
	}

	if(strcmp(cmd, "/logarplayer", true) == 0){
		if(IsPlayerAdmin(playerid)){
			new tmp[128];
			new plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
			    SendClientMessage(playerid, COLOR_GRAY, "USO: /logarplayer [id]");
			    return 1;
			}
			plid = strval(tmp);
		    if(IsPlayerConnected(plid) == 0){
				SendClientMessage(playerid,COLOR_GRAY,"Jogador não conectado/ID inválido");
				return 1;
			}
			else {
			    Logado[plid] = 0;
				LogarPlayer(plid);
				SendClientMessage(plid, COLOR_WHITE, "Continue sua vida...");
				TrancarVeiculosPorProf(plid);
				EnviarMensagensGuardadas(plid);
				if(pStats[plid][ContinuarPos] == 1 && pStats[plid][Preso] == 0 && pStats[plid][Morrendo] == 0){
				    SendClientMessage(plid, COLOR_LIGHT_YELLOW, "Para continuar na posição de onde parou digite /continuar");
                    SendClientMessage(plid, COLOR_LIGHT_YELLOW, "Você tem 15 segundos para responder.");
					TimerContinuacaoPos[plid] = SetTimerEx("CancelarContinuacaoPos",15000,0,"d",plid);
				}
    			if(!GetPlayerAge(plid)){
					TypingDate[plid]=1;
					SetPlayerControl(plid,false);
					SendClientMessage(plid, COLOR_YELLOW, "Equipe Virtual Life informa:");
					SendClientMessage(plid, COLOR_WHITE, "Entre com a sua data de nascimento... SINTAXE: 'dia'/'mes'/'ano'");
				}
				if(pStats[playerid][Camuflagem] > 0)
				{
				    KillTimer(TimerCamuflagem[plid]);
				    SetPlayerTransparent(plid, 2);
				    new string[128];
				    format(string, sizeof string, "Ainda lhe restam %d minuto(s) de camuflagem.", pStats[plid][Camuflagem]);
				    SendClientMessage(plid, COLOR_VENDEDOR_DE_ARMAS, string);
				    TimerCamuflagem[plid] = SetTimerEx("PassandoCamuflagem", 60000, 0, "d", plid);
				}
				if(pStats[plid][Propriedade] != 0)
				{
	    			if(compare(propStats[pStats[plid][Propriedade]][Dono1], "NONE"))
	    			{
						pStats[plid][Propriedade] = 0;
						SendClientMessage(plid, COLOR_BLUE, "O dono da sua propriedade à vendeu para o servidor, portanto você não trabalha mais lá...");
	    			}
				}
				SendClientMessage(playerid,COLOR_JUIZ,"Feito.");
				return 1;
			}
		}
		else {
			SendClientMessage(playerid, COLOR_GRAY, "Você não é admin, portanto, não tem permissão para fazer isso.");
			return 1;
		}
	}
	if(strcmp(cmd, "/continuar", true) == 0) {
		if(pStats[playerid][Preso] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você está preso, não pode usar esse comando.");
		if(pStats[playerid][Morrendo] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você está morrendo, não pode usar esse comando.");
		if(pStats[playerid][ContinuarPos] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe pedido para continuar de onde parou!");
		SetPlayerPos(playerid,pStats[playerid][LastPosX],pStats[playerid][LastPosY],pStats[playerid][LastPosZ]);
		SetPlayerInterior(playerid,pStats[playerid][LastInterior]);
		pStats[playerid][ContinuarPos] = 0;
		KillTimer(TimerContinuacaoPos[playerid]);
		SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "Feito");
		return 1;
	}
	if(strcmp(cmd, "/passardados", true) == 0 && IsPlayerAdmin(playerid)){
		new name1[128],name2[128];
		name1 = strtok(cmdtext,idx);
		name2 = strtok(cmdtext,idx);
		if(fexist(PlayerFile(name2)) && strlen(name2) > 0 && strlen(name1) > 0){
			PassarDados(name1,name2);
		}
		return SendClientMessage(playerid, COLOR_JUIZ, "Feito.");
	}
	
	if(strcmp(cmd, "/mudarconta", true) == 0) {
	    new tmp[128];
	    new plid;
	    tmp = strtok(cmdtext,idx);
	    plid = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /mudarconta [id [nova conta]");
	    tmp = strtok(cmdtext,idx);
	    if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /mudarconta [id] [nova conta]");
	    if(strlen(tmp) < 2 || strlen(tmp) > MAX_PLAYER_NAME) return SendClientMessage(playerid, COLOR_GRAY, "Nova conta com 2 até 30 caracteres.");
		if(Logado[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Esteja logado para usar esse comando.");
		if(IsPlayerAdmin(playerid) == 0) return SendClientMessage(playerid, COLOR_GRAY, "Apenas Admins podem fazer isso agora.");
		if(!fexist(PlayerFile(PlayerName(playerid)))) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem conta aqui com esse nick...");
		for(new s = 0; s < strlen(tmp); s++){
			if(strfind(tmp," ",false,s) != -1 || strfind(tmp,"*",false,s) != -1 || strfind(tmp,"'",false,s) != -1 || strfind(tmp,"/",false,s) != -1 || strfind(tmp,"?",false,s) != -1 || strfind(tmp,">",false,s) != -1
			|| strfind(tmp,"<",false,s) != -1 || strfind(tmp,":",false,s) != -1 || strfind(tmp,"?",false,s) != -1 || strfind(tmp,"\"",false,s) != -1 || strfind(tmp,"|",false,s) != -1 || strfind(tmp,"!",false,s) != -1){
				SendClientMessage(playerid, COLOR_GRAY, "Sem caracteres especiais nem barra de espaço no novo nick (\" * < > \\ / ? | : ' !)");
				return 1;
			}
		}
		if(IsStringAName(tmp) || fexist(PlayerFile(tmp))) return SendClientMessage(playerid, COLOR_GRAY, "Nick já existente...");
		else{
        	fcopy(PlayerFile(PlayerName(plid)),PlayerFile(tmp));
			new str[128];
			for(new p = 0; p < LastCasa; p++){
  				if(compare(pckStats[p][PickupDono],PlayerName(plid))){
			        set(pckStats[p][PickupDono],tmp);
				}
			}
			for(new v = 0; v < AmountServerVehicles + AmountPlayerVehicles; v++){
			    set(str,VehicleFile(v));
				if(fexist(str)){
			    	if(compare(vStats[v][VDono],PlayerName(plid))){
						set(vStats[v][VDono],tmp);
					}
					if(compare(vStats[v][VChave],PlayerName(plid))){
						set(vStats[v][VChave],tmp);
					}
				}
			}
			for(new pr = 1; pr < sizeof Propriedades; pr++){
				set(str,PropertyFile(pr));
				if(fexist(str)){
			    	if(compare(propStats[pr][Dono1],PlayerName(plid))){
			    	    set(propStats[pr][Dono1],tmp);
					}
					if(compare(propStats[pr][Socio1],PlayerName(plid))){
					    set(propStats[pr][Socio1],tmp);
					}
					if(compare(propStats[pr][Socio2],PlayerName(plid))){
					    set(propStats[pr][Socio2],tmp);
					}
					if(compare(propStats[pr][Socio3],PlayerName(plid))){
					    set(propStats[pr][Socio3],tmp);
					}
				}
			}
			set(str,GangFile(pStats[plid][GangueNome]));
			if(fexist(str)){
				if(compare(gStats[GetGangID(pStats[plid][GangueNome])][GangDono],PlayerName(plid))){
					set(gStats[GetGangID(pStats[plid][GangueNome])][GangDono],tmp);
				}
				for(new m = 0; m < gStats[GetGangID(pStats[plid][GangueNome])][GangMembros]; m++){
					if(compare(MembersGang[GetGangID(pStats[plid][GangueNome])][m],PlayerName(plid))){
					    set(MembersGang[GetGangID(pStats[plid][GangueNome])][m],tmp);
					}
				}
			}
			format(str,sizeof(str),"[CONTAS] %s, mudou a conta de %s para %s",PlayerName(playerid), PlayerName(plid),tmp);
			print(str);
			writelog(str);
			SendClientMessageAdmin(COLOR_WHITE,str);
			fremove(PlayerFile(PlayerName(plid)));
			set(GetName[plid],tmp);
			SetPlayerName(plid,tmp);
			SendClientMessage(plid,COLOR_JUIZ,"Conta modificada.");
			return 1;
		}
	}
	
	if(strcmp(cmd, "/mudarsenha", true) == 0) {
		if(!fexist(PlayerFile(PlayerName(playerid)))) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem conta aqui, use /registrar [senha]");
		if(!Logado[playerid])  return SendClientMessage(playerid, COLOR_GRAY, "Primeiro se logue no jogo /logar [senha]");
	    SendClientMessage(playerid, COLOR_BLUE_PLUS, "[INFO] OK digite a sua senha atual no chat!");
	    SendClientMessage(playerid, COLOR_GRAY, "[INFO] Não se preocupe ela não será revelada!");
	    confirmacaosenha[playerid] = 1;
	    return 1;
	}
    if(strcmp(cmd, "/ajuda", true) == 0) {
        SendClientMessage(playerid, COLOR_LIGHT_RED,			"Virtual Life RPG - Parte de ajuda:");
    	SendClientMessage(playerid, COLOR_WHITE, 				"/comandos : Comandos desse gamemode");
        SendClientMessage(playerid, COLOR_WHITE, 				"/registrar [senha] : Registrar-se");
        SendClientMessage(playerid, COLOR_WHITE, 				"/logar [senha] : Logar-se");
        SendClientMessage(playerid, COLOR_WHITE, 				"/aprender : Mostra uma breve explicação sobre o RPG.");
        SendClientMessage(playerid, COLOR_WHITE, 				"ATENÇÃO: profissões são por experiência, terá que ir na Agência de Empregos para mais info /sistlevel.");
        SendClientMessage(playerid, COLOR_WHITE, 				"/profissoes até /profissoes6 : para ver os leveis, salários, das profissões do Virtual Life RpG.");
		SendClientMessage(playerid, COLOR_WHITE, 				"/creditos : Vê os creditos do RPG Mode | /virtualliferpg : Ver a história do gamemode. | /colaboracoes : Veja como colaborar conosco.");
		SendClientMessage(playerid, COLOR_LIGHT_RED,			"Reload Virtual Life RpG mais que um RPG, UMA VIDA!");
		return 1;
	}
    if(strcmp(cmd, "/celularinfo", true) == 0) {
       	SendClientMessage(playerid, COLOR_GRAY,   				"O comando /PM [id] foi desabilitado dando origem a um novo recurso,");
        SendClientMessage(playerid, COLOR_YELLOW, 				"o celular, nele você faz ligações e recebe-las para qualquer player com o custo de $1 o crédito");
        SendClientMessage(playerid, COLOR_YELLOW, 				"primeiramente terá que comprar 1 celular com o comando /celular no valor da inflação vezes o aparelho.");
        SendClientMessage(playerid, COLOR_GREEN,  				"ATENÇÃO: Apenas os players que tiverem celular poderam receber mensagens e envia-las");
        SendClientMessage(playerid, COLOR_GREEN,  				"ATENÇÃO: Para você ver o número de outro player terá que comprar um agenda com o comando:");
        SendClientMessage(playerid, COLOR_YELLOW, 				"/agenda no valor de $500, para saber o número de um outro player digite /numero [id/partedonick] assim você ");
        SendClientMessage(playerid, COLOR_YELLOW, 				"poderá enviar mensagens pelo comando /sms [númerodoplayer] [texto].");
        SendClientMessage(playerid, COLOR_WHITE,  				"Coloque /celularinfo2 para mais info!");
        return 1;
	}
    if(strcmp(cmd, "/celularinfo2", true) == 0) {
        SendClientMessage(playerid, COLOR_LIGHT_GREEN,   		"ATENÇÃO: Para enviar mensagens você precisa de créditos vá em uma loja 24/7 e compre");
        SendClientMessage(playerid, COLOR_LIGHT_GREEN,   		"créditos pelo comando /recarga [creditos], para ver os creditos digite /cellcreditos, ESSE comando não precisa estar na 24/7");
        SendClientMessage(playerid, COLOR_LIGHT_GREEN,   		"Para ligar digite: /chamar [número/do/jogador], é um chat restrito!");
        SendClientMessage(playerid, COLOR_LIGHT_GREEN,   		"Você também pode ligar a COBRAR /chamar9090 [número/do/jogador]!");
        SendClientMessage(playerid, COLOR_LIGHT_GREEN,   		"para desligar digite /desligar");
        SendClientMessage(playerid, COLOR_LIGHT_GREEN,   		"Você também poderá receber/enviar mensagens de caixa postal");
        SendClientMessage(playerid, COLOR_LIGHT_GREEN,   		"Para ver as suas mensagens digite /caixapostal e para exclui-las digite /excluircaixapostal");
        SendClientMessage(playerid, COLOR_LIGHT_GREEN,   		"Caso esteja instatisfeito com seu número venda o seu celular: /vendercelular");
  		SendClientMessage(playerid, COLOR_YELLOW, 				"Para qualquer dúvida contate um ADMIN e pergunte-o sobre o sistema");
  		return 1;
    }
    if(strcmp(cmd, "/sistlevel", true) == 0) {
        SendClientMessage(playerid, COLOR_LIGHT_RED,  			"Virtual Life RPG - Sistema de level:");
        SendClientMessage(playerid, COLOR_WHITE, 				"Quando não souber onde é a agência de empregos use o GPS");
        SendClientMessage(playerid, COLOR_WHITE, 				"Basta digitar /GPS emprego");
        SendClientMessage(playerid, COLOR_WHITE, 				"/profissoes para ver os leveis necessários e os Xpoints equivalentes a 1 XL de cada profissão");
        SendClientMessage(playerid, COLOR_WHITE, 				"LEMBRETE: Você só receberá Xpoint se estiver no seu horário, digite /meuhorario para ver...");
        SendClientMessage(playerid, COLOR_LIGHT_RED,  			"Virtual Life RPG mais que um RPG, UMA VIDA!");
		return 1;
	}
	if(strcmp(cmd, "/sistlevel", true) == 0) {
        SendClientMessage(playerid, COLOR_LIGHT_RED,  			"Virtual Life RPG - Sistema de level:");
    	SendClientMessage(playerid, COLOR_WHITE, 				"O Sistema de Level, tem como proveito deixar o servidor sem admins e autônomo junto com o /votekick.");
        SendClientMessage(playerid, COLOR_WHITE, 				"Ao nascer, ficará marcado um CheckPoint no seu radar, indicando a posição para onde deve ir atrás de emprego.");
        SendClientMessage(playerid, COLOR_WHITE, 				"Chegando lá, você encontrará profissões por sala. Logo ao entrar você se depará com um CP de profs até nivel 10. ");
        SendClientMessage(playerid, COLOR_WHITE, 				"Caso esteja disposto a ver outras profissões. Existe uma sala a direita da entrada, com profissões de nivel 20 até 40.");
        SendClientMessage(playerid, COLOR_WHITE, 				"Caso esteja disposto a ver as outras profissões, a esquerda da entrada existe uma escadaria.");
		SendClientMessage(playerid, COLOR_WHITE, 				"Aonde você encontrará as profissões de níveis superiores.");
		SendClientMessage(playerid, COLOR_WHITE, 				"Para ver seu level digite /status | Para mais informações digite /sistlevel");
		SendClientMessage(playerid, COLOR_LIGHT_RED,  			"Virtual Life RPG mais que um RPG, UMA VIDA!");
		return 1;
	}
    if(strcmp(cmd, "/creditos", true) == 0) {
	    SendClientMessage(playerid, COLOR_COP_SWAT, 			"!*!*!*!*!*!*!*!*!*!*!*! Reload Virtual Life RPG !*!*!*!*!*!*!*!*!*!*!*!");
	    SendClientMessage(playerid, COLOR_JUIZ, 				"Scripting atual: Texugo, Ravedutti, Guilherme");
	    SendClientMessage(playerid, COLOR_LIGHT_RED, 			"Scripting inicial: Texugo, matraka, Allan");
	    SendClientMessage(playerid, COLOR_GREEN, 				"Origem do mode: SolidNuts, TheHitman, Luigui e DaMNeD");
	    SendClientMessage(playerid, COLOR_BLUE, 				"Colaboradores: Brutows, michael, AndinhoJp, osorkon, Stanley, keninho, LoulHero, entre outros...");
	    SendClientMessage(playerid, COLOR_YELLOW, 				"Nossos sistemas foram desenvolvidos por nós próprios, se ocorreram divergência de idéias foi para melhorar o mode.");
		SendClientMessage(playerid, COLOR_WHITE, 				"Agradecimentos especiais: /agradecimentos");
		return 1;
	}
	if(!strcmp(cmd,"/agradecimentos",true)) {
	    SendClientMessage(playerid, COLOR_COP_SWAT, 			"Agradecimentos especiais:");
	    SendClientMessage(playerid, COLOR_YELLOW, 				" ");
	    SendClientMessage(playerid, COLOR_GREEN, 				"Agradecemos a nossa equipe, pois sem ela, esse gamemode não seria o mesmo.");
   	    SendClientMessage(playerid, COLOR_LIGHT_YELLOW, 		"Agradecemos a equipe Brazucas'Server, MtS e Michael por algumas idéias que foram usadas no gamemode.");
		SendClientMessage(playerid, COLOR_JUIZ, 				"Agradecemos ao Rafelder pelo streamer de Map Icons.");
	    SendClientMessage(playerid, COLOR_WHITE, 				"Agradecemos ao clan .:GT:. / [I] por ter iniciado a história do RPG brasileiro com profissões.");
	    SendClientMessage(playerid, COLOR_WHITE, 				"Sem ele, nós teríamos que jogar DM, corrida ou ainda no estilo The Godfather.");
	    SendClientMessage(playerid, COLOR_YELLOW, 				"Agradecemos à equipe do SA:MP por nos trazer a possibilidade de jogar esse magnífico jogo online.");
	    SendClientMessage(playerid, COLOR_LIGHT_RED, 			"E principalmente, à Rockstar Games e subsidiárias, por ter criado um jogo fantástico como o GTA San Andreas!");
	    return 1;
	}
	if(strcmp(cmd, "/virtualliferpg", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED,  			"Reload Virtual Life RPG - História do gamemode:");
	    SendClientMessage(playerid, COLOR_WHITE, 				"Depois da saída do clan MPA, Texugo decidiu criar seu próprio gamemode, ao passar do tempo,");
		SendClientMessage(playerid, COLOR_WHITE, 				"Ravedutti, Osorkon, Guilherme e Doug saíram do clan também, então Texugo os chamou para ajuda-los em seu projeto,");
		SendClientMessage(playerid, COLOR_WHITE, 				"assim foi criada a Equipe Virtual Life RPG, o prefixo Reload era o nome de um projeto do clan MPA do qual");
		SendClientMessage(playerid, COLOR_WHITE, 				"Ravedutti e Guilherme estavam envolvidos, foi adicionado como prefixo por vontade de Guilherme mas");
		SendClientMessage(playerid, COLOR_WHITE, 				"muitas pessoas referem-se ao projeto somente como \"Virtual Life\" mesmo.");
		SendClientMessage(playerid, COLOR_WHITE, 				"Infelizmente Doug se retirou da equipe antes do projeto lançar, mas mesmo assim continuamos em frente, exigindo muito");
		SendClientMessage(playerid, COLOR_WHITE, 				"de nós mesmos, recebemos algumas ajudas de amigos (Michael, Brutows, MtS), e conseguimos desenvolver esse grande projeto cheio de novidades!");
		SendClientMessage(playerid, COLOR_WHITE, 				"Desenvolvemos ele com objetivo de aumentar a diversão de muitos que não conseguem encontrar RPG's cheio de novidades legais e originais,");
		SendClientMessage(playerid, COLOR_WHITE, 				"O Virtual Life RPG nunca tirou crédito de ninguém, veja você mesmo em '/creditos' antes de inventar acusações falsas");
		return 1;
	}
	if(strcmp(cmd, "/colaboracoes", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED,  			"Reload Virtual Life RPG - Como colaborar:");
	    SendClientMessage(playerid, COLOR_WHITE, 				"O Virtual Life RPG precisa de muitas colaborações de jogadores para ter o exato funcionamento de uma vida real...");
		SendClientMessage(playerid, COLOR_WHITE, 				"Aqui algumas fundamentais delas, algumas citadas são para ajudar o gamemode a melhorar, outras para ter um jogo limpo e honesto:");
	    SendClientMessage(playerid, COLOR_WHITE, 				"Respeite as regras (/regras1 e /regras2), ensine os outros jogadores como funciona o gamemode,");
		SendClientMessage(playerid, COLOR_WHITE, 				"Vá na comunidade do servidor e dê idéias para o gamemode, dê sugestões sobre como melhorar sistemas, enfim tudo que se possa");
		SendClientMessage(playerid, COLOR_WHITE, 				"fazer para ajudar o mode e aos jogadores é tratado como uma colaboração, nossa administração agradece esses colaboradores,");
		SendClientMessage(playerid, COLOR_WHITE, 				"pois eles estão melhorando o servidor!");
		SendClientMessage(playerid, COLOR_WHITE, 				"OBS: Não venha pedir para ser administrador ou coisa do tipo, quem escolhe os administradores do servidor somos nós...");
		SendClientMessage(playerid, COLOR_WHITE, 				"Nossa comunidade: http://www.orkut.com/Community.aspx?cmm=45269704");
		return 1;
	}
	if(strcmp(cmd, "/aprender", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED,  			"Reload Virtual Life RPG - Parte de aprendizado:");
	    SendClientMessage(playerid, COLOR_WHITE, 				"O Virtual Life RPG é um gamemode que representa a vida real.");
	    SendClientMessage(playerid, COLOR_WHITE, 				"Aqui você obterá um emprego, uma casa, carros, móveis, propriedades, tudo dependendo de sua condição financeira.");
	    SendClientMessage(playerid, COLOR_WHITE, 				"Seu objetivo aqui é ir evoluindo de classe social, e junto curtir os lazeres que o gamemode oferece.");
		SendClientMessage(playerid, COLOR_WHITE, 				"Se cometer crimes, terá que resolver as contas com a policia, mas você também pode tentar escapar da lei.");
		SendClientMessage(playerid, COLOR_WHITE, 				"Você precisará ter habilitações para dirigir: Terrestre, Náutica e Aérea, caso contrário poderá levar multa!");
		SendClientMessage(playerid, COLOR_WHITE, 				"Para usar os veículos do servidor eles precisam ter gasolina, se faltar, vá no posto abastecer ou chame um frentista.");
		SendClientMessage(playerid, COLOR_WHITE, 				"Aqui você pode realizar seus sonhos: obter carros modernos, ter uma casa grande, redecorada e com móveis, entre outros...");
		SendClientMessage(playerid, COLOR_LIGHT_RED, 			"Reload Virtual Life RpG mais que um RPG, UMA VIDA!");
		return 1;
	}

	if(strcmp(cmd, "/vertutorial",true) == 0) {
	    Tutorial[playerid] = 1;
	    CanCPTut[playerid] = 1;
	    SetPlayerControl(playerid,0);
   		GetPlayerPos(playerid,AnteriorPos[playerid][0],AnteriorPos[playerid][1],AnteriorPos[playerid][2]);
   		SetPlayerVirtualWorld(playerid, 1);
		SetTimerEx("ExecTutorial",2000,0,"d",playerid);
		SendClientMessage(playerid, COLOR_WHITE, "Aguarde...");
		return 1;
	}
	if(strcmp(cmd, "/comandos", true) == 0) {
		SendClientMessage(playerid, COLOR_LIGHT_RED, 			"Comandos do Virtual Life RPG");
		SendClientMessage(playerid, COLOR_WHITE, 				"Comandos Gerais I,II,III,IV,V: ========== /cgerais1 /cgerais2 /cgerais3 /cgerais4 /cgerais5");
        SendClientMessage(playerid, COLOR_WHITE,       			"Comandos Profissões I,II,III: ========== /cprofissoes1 /cprofissoes2 /cprofissoes3");
		SendClientMessage(playerid, COLOR_WHITE, 				"Comandos Veículos I,II,III: ============ /cveiculos1 /cveiculos2 /cveiculos3");
		SendClientMessage(playerid, COLOR_WHITE,            	"Comandos Casas I: ================== /ccasas1");
        SendClientMessage(playerid, COLOR_WHITE, 				"Comandos Negócios/Empresas I: ==== /cnegocios1");
        SendClientMessage(playerid, COLOR_WHITE, 				"Comandos Celular I: ================= /ccelular1");
		SendClientMessage(playerid, COLOR_WHITE, 				"Comandos Polícia/Prisão I: ============ /cpolicia1");
		SendClientMessage(playerid, COLOR_WHITE,       			"Comandos Pesca I: ================= /cpesca1");
		return 1;
	}
	if(strcmp(cmd, "/cgerais1", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED,           	"Comandos gerais do Virtual Life RPG - Parte 1/5");
        SendClientMessage(playerid, COLOR_WHITE, 				"/regras1 , /regras2 : Para ver as regras.");
		SendClientMessage(playerid, COLOR_WHITE, 				"/190 : Faz uma denuncia à policia.");
		SendClientMessage(playerid, COLOR_WHITE, 				"/192 : Chama uma ambulância ao local");
       	SendClientMessage(playerid, COLOR_WHITE,   				"/sistbanco : Ver como funciona nosso sistema de Banco");
		SendClientMessage(playerid, COLOR_WHITE, 				"/abastecer : Abastecer (você deve estar no posto para usar este comando).");
		SendClientMessage(playerid, COLOR_WHITE,         		"/loteria: [0-20] [0-20] : Apostar na loteria.");
		SendClientMessage(playerid, COLOR_WHITE,         		"(/s)ussurrar [mensagem] : Sussurar, isso fará com que somente pessoas bem próximas a você vejam a mensagem.");
		if(ENABLE_GLOBAL_CHAT == 1)
		{
        	SendClientMessage(playerid, COLOR_WHITE,   			"(/g)ritar [mensagem] : Para gritar, isso fará com que mais jogadores recebam suas mensagens.");
		}
		SendClientMessage(playerid, COLOR_WHITE,				"/acoes : Ver as ações do jogo!");
        return 1;
    }
	if(strcmp(cmd, "/cgerais2", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED,           	"Comandos gerais do Virtual Life RPG - Parte 2/5");
		SendClientMessage(playerid, COLOR_WHITE,				"/votekick [id] [motivo] : Insatisfeito com um jogador?");
        SendClientMessage(playerid, COLOR_WHITE, 				"/horas : Mostra o horário em SA | /data : Mostra a data em SA.");
        SendClientMessage(playerid, COLOR_WHITE,       			"/novidades , /novidades2 , /rpglife até /rpglife11 : Para ver as novidades.");
        SendClientMessage(playerid, COLOR_WHITE,            	"/status : Para ver o seu status completo.");
		SendClientMessage(playerid, COLOR_WHITE,        	   	"/retirartxt : Remove o texto se bugar na tela!");
		SendClientMessage(playerid, COLOR_WHITE,        	 	"/cheirar [gramas] : Para cheirar cocaína.");
		SendClientMessage(playerid, COLOR_WHITE,       			"/fumar [cigarros] : Para fumar maconha.");
		SendClientMessage(playerid, COLOR_WHITE,         		"/injetar [injeções] : Para injetar heroína.");
		SendClientMessage(playerid, COLOR_WHITE, 				"/mudarsenha : Para mudar sua senha.");
		return 1;
    }
	if(strcmp(cmd, "/cgerais3", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED,           	"Comandos gerais do Virtual Life RPG - Parte 3/5");
		SendClientMessage(playerid, COLOR_WHITE, 				"/apostarcavalo [cavalo] [quantia] : Apostar em um cavalo, você tem que estar na loteria de cavalos!");
		SendClientMessage(playerid, COLOR_WHITE, 				"/admin [mensagem] : Enviar mensagem para os admins (Reclamações, Reportar BUG's, etc...)");
		SendClientMessage(playerid, COLOR_WHITE,   				"/entrar : Entrar por uma porta.");
		SendClientMessage(playerid, COLOR_WHITE,         		"/sair : Sair por uma porta.");
		SendClientMessage(playerid, COLOR_WHITE,                "/flash : Plantar uma flash.");
        SendClientMessage(playerid, COLOR_WHITE, 				"/slotarmas : Vê as armas e SLOTS disponíveis para compra de munições!");
		SendClientMessage(playerid, COLOR_WHITE,       			"/sistemas : Ver os sistemas do gamemode.");
		SendClientMessage(playerid, COLOR_WHITE,         		"/medemitir : Para pedir demissão de sua profissão.");
		SendClientMessage(playerid, COLOR_WHITE,     			"/skininfo [ID/da/skin] : Ver as informações sobre uma skin.");
		return 1;
    }
	if(strcmp(cmd, "/cgerais4", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED,           	"Comandos gerais do Virtual Life RPG - Parte 4/5");
		SendClientMessage(playerid, COLOR_WHITE,	       		"/comprarskin [ID/da/skin] : Comprar uma skin, você tem que estar na loja.");
		SendClientMessage(playerid, COLOR_WHITE,         		"/experimentarskin [ID/da/skin] : Experimenta uma skin, você tem que estar na loja.");
		SendClientMessage(playerid, COLOR_WHITE,       			"/tomarsorvete : Para tomar sorvete, você tem que estar na sorveteria.");
		SendClientMessage(playerid, COLOR_WHITE,      			"/comprarsorvete : Para comprar sorvete, você tem que estar na sorveteria.");
        SendClientMessage(playerid, COLOR_WHITE,      			"/dia : Ver todas as informações do dia.");
	    SendClientMessage(playerid, COLOR_WHITE,   				"/usarskin : Usar seu skin atual.");
	    SendClientMessage(playerid, COLOR_WHITE,   				"/lazeres : Ver os lazeres do gamemode.");
	    SendClientMessage(playerid, COLOR_WHITE,   				"/vertutorial : Ver o tutorial de como jogar no Virtual Life RPG.");
	    SendClientMessage(playerid, COLOR_WHITE, 				"/precoseguros : Ver os preços dos seguros disponíveis do servidor!");
	    return 1;
    }
	if(strcmp(cmd, "/cgerais5", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED,           	"Comandos gerais do Virtual Life RPG - Parte 5/5");
		SendClientMessage(playerid, COLOR_WHITE,				"/tomarvacina : Tomar vacina contra a Gripe Suína, você tem que estar no Hospital.");
		SendClientMessage(playerid, COLOR_WHITE, 				"/internar : Internar-se, curar as doenças e receber curativo, você tem que estar no Hospital.");
		SendClientMessage(playerid, COLOR_WHITE,        	   	"/comer : Compre o Sanduíche Natural na 24/7 e quando estiver precisando de vida, coma-o");
		SendClientMessage(playerid, COLOR_WHITE, 				"/desamarrar: Quando ver alguém sequestrado caso queira ajudar, vá para trás dela e desamarre-a.");
		SendClientMessage(playerid, COLOR_WHITE,   				"/salvardados : Salvar seus dados.");
		SendClientMessage(playerid, COLOR_WHITE,				"/massagemcardiaca : Viu alguém inconsciente na rua? Rápido faça uma massagem cardiaca e espere os paramédicos.");
        SendClientMessage(playerid, COLOR_WHITE,				"/plantarbomba : Plantar uma bomba relógio, você deve ter uma com você.");
        SendClientMessage(playerid, COLOR_WHITE,				"/soltarrojao : Soltar rojão, você deve ter um.");
        SendClientMessage(playerid, COLOR_WHITE,				"/removerseguro [vida/veiculo/imovel] : Remover um seguro.");
		return 1;
    }
    if(strcmp(cmd, "/cprofissoes1", true) == 0) {
        SendClientMessage(playerid, COLOR_LIGHT_RED,           	"Comandos de profissões do Virtual Life RPG - Parte 1/3");
		SendClientMessage(playerid, COLOR_WHITE, 				"/profissoes até /profissoes6 : Para ver os leveis os salários das profissões do Virtual Life RpG.");
        SendClientMessage(playerid, COLOR_WHITE, 				"/pagar [id] [quantidade] : Pagar corretor ou vendedor de carros.");
        SendClientMessage(playerid, COLOR_WHITE, 				"/advogado: Solicitar um advogado");
		SendClientMessage(playerid, COLOR_WHITE,       			"/servico [taxi, pizza, diskdroga, mecanico, frentista, diskarma] : Para chamar um dos serviços disponíveis.");
        SendClientMessage(playerid, COLOR_WHITE,				"/pedirarma [arma/ou/nome parecido] : Pede uma arma ao vendedor de armas.");
        SendClientMessage(playerid, COLOR_WHITE,     			"/profissao : Ver os comandos de sua profissão.");
        SendClientMessage(playerid, COLOR_WHITE,  				"/skintrabalho : Muda seu skin para o de trabalho.");
        SendClientMessage(playerid, COLOR_WHITE,       			"/motorista : Solicitar um motorista particular.");
        return 1;
	}
    if(strcmp(cmd, "/cprofissoes2", true) == 0) {
        SendClientMessage(playerid, COLOR_LIGHT_RED,           	"Comandos de profissões do Virtual Life RPG - Parte 2/3");
		SendClientMessage(playerid, COLOR_WHITE,        		"/carteiras : Ver o valor das habilitações.");
        SendClientMessage(playerid, COLOR_WHITE, 				"/pagarstrip [ID/da/striper] : Para pagar uma striper.");
        SendClientMessage(playerid, COLOR_WHITE,				"/meuhorario : Ver o seu horário de trabalho!");
		SendClientMessage(playerid, COLOR_WHITE, 		    	"/cancelarseguro : Para remover seu seguro de vida.");
		SendClientMessage(playerid, COLOR_WHITE,         		"/mandarmatar [id] [valor] : Colocar a cabeça de alguém em prêmio para os ASSASSINOS.");
		SendClientMessage(playerid, COLOR_WHITE,        		"/contratarseguranca [id] [valor] : Contratar um segurança.");
		SendClientMessage(playerid, COLOR_WHITE,              	"/demitirseguranca [id] : Demitir um segurança.");
		SendClientMessage(playerid, COLOR_WHITE,    	    	"/agendarteste [id] : Agendar um teste de habilitação com um instrutor!");
		SendClientMessage(playerid, COLOR_WHITE,           		"/agendatestes : Ver a agenda de testes da auto escola.");
    	return 1;
	}
    if(strcmp(cmd, "/cprofissoes3", true) == 0) {
        SendClientMessage(playerid, COLOR_LIGHT_RED,            "Comandos de profissões do Virtual Life RPG - Parte 3/3");
		SendClientMessage(playerid, COLOR_WHITE,       			"/exibircracha : Exibe o crachá de sua profissão.");
		SendClientMessage(playerid, COLOR_WHITE,       			"/escondercracha : Esconde o crachá de sua profissão.");
		SendClientMessage(playerid, COLOR_WHITE,       			"/verjornais : Para ver os Jornais que existem em Los Santos.");
		SendClientMessage(playerid, COLOR_WHITE, 				"/cabeças : Vê a lista de cabeças a prêmio. Para colocar alguém /mandarmatar.");
		return 1;
	}
	if(strcmp(cmd, "/cveiculos1", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED,           	"Comandos de veículos do Virtual Life RPG - Parte 1/3");
        SendClientMessage(playerid, COLOR_WHITE,   				"/comprarchavemestra : Para adquirir uma chave mestra, você tem que estar no Chaveiro.");
        SendClientMessage(playerid, COLOR_WHITE, 				"/acionar [travas/alarme/nada] : Aplicar sistema Anti-Furto no seu veículo, ele tem que ter o Kit de Travas e Alarmes.");
        SendClientMessage(playerid, COLOR_WHITE, 				"/veiculos : Ver os carros que podem ser comprados e os preços do Virtual Life RpG.");
        SendClientMessage(playerid, COLOR_WHITE,       			"/entregarvdocumentos : Ver os documentos de um veículo, você tem que estar nele!");
        SendClientMessage(playerid, COLOR_WHITE,        	 	"/meuveiculoid : Ver o ID de identificação do veículo, você tem que ser o dono dele.");
		SendClientMessage(playerid, COLOR_WHITE,   				"/estacionar : Troca a posição de spawn de um veículo, você tem que ser o dono dele.");
		SendClientMessage(playerid, COLOR_WHITE,				"/GPS [nome do local] : Para ligar o GPS.");
		SendClientMessage(playerid, COLOR_WHITE, 				"/desligargps : Para desligar o GPS.");
		SendClientMessage(playerid, COLOR_WHITE,	 			"/c [mensagem] : Enviar mensagem para as pessoas que estiverem no mesmo veículo que você.");
		return 1;
	}
	if(strcmp(cmd, "/cveiculos2", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED,           	"Comandos de veículos do Virtual Life RPG - Parte 2/3");
		SendClientMessage(playerid, COLOR_WHITE,     			"/entregardocumentos [ID/do/COP] : Mostra os documentos para o polícial.");
        SendClientMessage(playerid, COLOR_WHITE, 				"/verdocumentos : Ver os documentos de um jogador (Você tem que estar com ele)");
        SendClientMessage(playerid, COLOR_WHITE,            	"/devolverdocumentos : Devolver os documentos de um jogador.");
        SendClientMessage(playerid, COLOR_WHITE, 				"/venderveiculo [ID/do/veículo] [preço] : Colocar seu veículo a venda!");
        SendClientMessage(playerid, COLOR_WHITE, 				"/tirarveiculoavenda [ID/do/veículo] : Tirar um veículo seu de venda.");
        SendClientMessage(playerid, COLOR_WHITE,       			"/comprarveiculo [id] [ID/do/veículo] : Comprar um veículo a venda!");
        SendClientMessage(playerid, COLOR_WHITE,      			"/emprestarchave [id] : Emprestar sua chave do carro para outro jogador!");
        SendClientMessage(playerid, COLOR_WHITE,     			"/devolverchave [id] : Devolve todas as chaves que você emprestou do outro jogador!");
        return 1;
	}
	if(strcmp(cmd, "/cveiculos3", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED,           	"Comandos de veículos do Virtual Life RPG - Parte 3/3");
	    SendClientMessage(playerid, COLOR_WHITE,   				"/galao [1-20] : Comprar um galão de combustível, você deve estar no posto.");
	    SendClientMessage(playerid, COLOR_WHITE,   				"/colocar [1-20] : Para aplicar o combustível em um veículo, você deve estar nele.");
        return 1;
	}
	if(strcmp(cmd, "/ccasas1", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED,           	"Comandos de casas do Virtual Life RPG - Parte 1/1");
		SendClientMessage(playerid, COLOR_WHITE,            	"/interiorcasa [valor] : Ver informações sobre um interior.");
		SendClientMessage(playerid, COLOR_WHITE, 				"/infocasa : Ver informações sobre sua casa.");
        SendClientMessage(playerid, COLOR_WHITE,   				"/escrevercarta [nome do jogador] [texto] : Escrever carta para um jogador.");
		SendClientMessage(playerid, COLOR_WHITE,       			"/vercorrespondencia : Vê as cartas enviadas para você.");
		SendClientMessage(playerid, COLOR_WHITE,         		"/jogarcartasfora : Joga suas cartas fora.");
		SendClientMessage(playerid, COLOR_WHITE,       			"/mudarcaixapostal : Mudar sua mensagem de caixa postal.");
		SendClientMessage(playerid, COLOR_WHITE,				"/cdocumentos : Ver a documentação de uma casa (Você deve estar no interior dela).");
		return 1;
	}
	if(strcmp(cmd, "/cnegocios1", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED,            "Comandos de negócios do Virtual Life RPG - Parte 1/1");
		SendClientMessage(playerid, COLOR_WHITE,            	"/propriedades : Ver as propriedades do gamemode.");
		SendClientMessage(playerid, COLOR_WHITE,         		"/negocioscmds , /negocioscmds2 : Ver os comandos do sistema de negócios.");
		return 1;
	}
	if(strcmp(cmd, "/ccelular1", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED,           	"Comandos de celular do Virtual Life RPG - Parte 1/1");
		SendClientMessage(playerid, COLOR_WHITE, 				"/guardarcell : Guardar seu celular em um veículo (Você tem que ser o DONO dele)");
		SendClientMessage(playerid, COLOR_WHITE, 				"/pegarcell : Pegar o celular guardado em um veículo.");
		SendClientMessage(playerid, COLOR_WHITE,				"/caixapostal : Ver suas mensagens da Caixa Postal.");
        SendClientMessage(playerid, COLOR_WHITE,				"/excluircaixapostal : Excluir mensagens da Caixa Postal.");
		SendClientMessage(playerid, COLOR_WHITE,        		"/localizar [número] : Para abrir um Icone informando aonde a pessoa está.");
		SendClientMessage(playerid, COLOR_WHITE,            	"/desligarrastreador : Desligar seu rastreador via celular.");
		SendClientMessage(playerid, COLOR_WHITE,				"/saldoconta : Para checar quanto você tem no banco via celular.");
		return 1;
	}
	if(strcmp(cmd, "/cpolicia1", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED,       		"Comandos policiais do Virtual Life RPG - Parte 1/1");
		SendClientMessage(playerid, COLOR_WHITE, 				"/procurados : Vê a lista de procurados pela policia.");
		SendClientMessage(playerid, COLOR_WHITE, 				"/presos : Vê a lista de presos de Los Santos.");
        SendClientMessage(playerid, COLOR_WHITE,				"/soltarpreso [id] : Você matou um Juiz/Delegado, ganhou a chave da cadeia pode libertar 1 preso!");
        SendClientMessage(playerid, COLOR_WHITE,         		"/portedearmas : Ver o porte de arma do servidor.");
		SendClientMessage(playerid, COLOR_WHITE,  				"/pagardivida [ID/do/veículo] : Pagar as dívidas de um veículo, você tem que estar na Delegacia.");
		SendClientMessage(playerid, COLOR_WHITE,   				"/leis1 e /leis2 : Leis para a boa conduta na rua e no trânsito.");
		SendClientMessage(playerid, COLOR_WHITE,            	"/policia1 e /policia2 : Para ver as Leis que a polícia deve seguir com você.");
		return 1;
	}
    if(strcmp(cmd, "/cpesca1", true) == 0) {
        SendClientMessage(playerid, COLOR_LIGHT_RED,            "Comandos de pesca do Virtual Life RPG - Parte 1/1");
        SendClientMessage(playerid, COLOR_WHITE,       			"/levarpesca : Para levar sua pesca, você tem que estar na cooperativa de pesca.");
        SendClientMessage(playerid, COLOR_WHITE,            	"/iscas [quantia/de/iscas] : Comprar iscas (Você tem que estar na cooperativa de pesca)");
		SendClientMessage(playerid, COLOR_WHITE,         		"/pescar : Joga a rede para pescar (Você tem que estar na área de pesca)");
		SendClientMessage(playerid, COLOR_WHITE,        		"/venderpesca : Vende suas pescas (Você tem que estar na cooperativa de pesca)");
		SendClientMessage(playerid, COLOR_WHITE,       			"/minhasiscas : Ver a quantidade de iscas que você tem.");
		return 1;
	}
	if(strcmp(cmd, "/precoseguros", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED,           	"Virtual Life RPG - Preços dos seguros:");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Seguro de vida: $1000 para adquirir + $400 para a corretora semanalmente");
        SendClientMessage(playerid, COLOR_WHITE,            	"Seguro de imóvel: $2000 para adquirir + $500 para a corretora semanalmente");
        SendClientMessage(playerid, COLOR_WHITE,            	"Seguro de veículo: $3000 para adquirir apenas em um veículo");
        return 1;
	}
	if(strcmp(cmd, "/lazeres", true) == 0) {
		SendClientMessage(playerid, COLOR_JUIZ,             	"Virtual Life RPG - Lazeres:");
		SendClientMessage(playerid, COLOR_WHITE,            	"Derby : para mais informações digite /derbyinfo");
		SendClientMessage(playerid, COLOR_LIGHT_YELLOW,     	"Polícia e Ladrão (PL) : para mais informações digite /plinfo");
		SendClientMessage(playerid, COLOR_YELLOW,           	"Balada : para ir até lá use o GPS (/GPS balada).");
		SendClientMessage(playerid, COLOR_LIXEIRO,          	"Capture The Cars (CTC) : para mais informações digite /ctcinfo.");
		return 1;
	}
	if(strcmp(cmd, "/ctcinfo", true) == 0) {
		SendClientMessage(playerid, COLOR_LIGHT_RED,           	"Capture The Cars (CTC):");
		SendClientMessage(playerid, COLOR_WHITE, 				"Capture The Cars é um evento onde você deve pegar os caminhões de guincho em sua base e");
		SendClientMessage(playerid, COLOR_WHITE, 				"capturar os veículos escondidos por Las Venturas e arredores próximos!");
		SendClientMessage(playerid, COLOR_WHITE, 				"Faça isso antes da sua equipe adversária, o jogo segue: Equipe azul VS Equipe laranja");
		SendClientMessage(playerid, COLOR_WHITE, 				"Para guinchar um veículo aperte LMB");
		SendClientMessage(playerid, COLOR_WHITE,            	"Comandos: /entrarctc e /sairctc");
		SendClientMessage(playerid, COLOR_WHITE,            	"Os administradores iniciam e também podem finalizar o evento...");
		return 1;
	}
	if(strcmp(cmd, "/plinfo", true) == 0) {
		SendClientMessage(playerid, COLOR_LIGHT_RED,           	"Polícia e Ladrão (PL):");
		SendClientMessage(playerid, COLOR_WHITE,            	"O evento tem como objetivo para os ladrões fugirem dos políciais por 10 minutos!");
		SendClientMessage(playerid, COLOR_WHITE,            	"e o objetivo dos policiais capturarem esses ladrões até o tempo acabar...");
		SendClientMessage(playerid, COLOR_WHITE,            	"Os policias também devem recarregar as armas (/abastecerarma) na base policial, quando um ladrão");
		SendClientMessage(playerid, COLOR_WHITE,            	"for pego, ele poderá ser solto se outro chegar perto dele, para um policial capturar um ladrão terá que mata-lo");
        SendClientMessage(playerid, COLOR_WHITE,            	"Ao falar uma mensagem no chat ela irá direto para sua equipe, ou seja, será um chat privado");
		SendClientMessage(playerid, COLOR_WHITE,            	"Comandos: /entrarpl e /sairpl");
		SendClientMessage(playerid, COLOR_WHITE,            	"Os administradores iniciam e também podem finalizar o evento...");
		return 1;
	}
	if(strcmp(cmd, "/sistemas", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED, 			"Virtual Life RPG - Sistemas:");
		SendClientMessage(playerid, COLOR_WHITE,            	"/sisteletro - /sisthorario - /sistlevel");
		SendClientMessage(playerid, COLOR_WHITE,				"/sistcofre - /sistcasas - /sistchat");
        SendClientMessage(playerid, COLOR_WHITE,            	"/sistskin - /sistlevel - /sistcarros");
        SendClientMessage(playerid, COLOR_WHITE,            	"/sistnegocios - /sistgangues - /sistbanco");
        SendClientMessage(playerid, COLOR_WHITE,            	"/sisthotel - /sistentretenimento - /sistfome");
		SendClientMessage(playerid, COLOR_LIGHT_RED,           	"Virtual Life RPG mais que um RPG, UMA VIDA!");
		return 1;
	}
	if(strcmp(cmd, "/sistentretenimento", true) == 0) {
		SendClientMessage(playerid, COLOR_LIGHT_RED,            "Virtual Life RPG - Entretenimentos:");
		SendClientMessage(playerid, COLOR_WHITE,            	"Quer aproveitar seu dia de folga? Está cansado de procurar um lugar pra ir?");
		SendClientMessage(playerid, COLOR_WHITE,            	"Relaxe, aqui temos a solução, o Virtual Life RPG vem com entretenimentos, minigames");
		SendClientMessage(playerid, COLOR_WHITE,            	"e lazeres onde você pode se divertir nos seus dias de folga... vide /lazeres");
		SendClientMessage(playerid, COLOR_WHITE,            	"Alguns entretenimentos são realizados na área de entretenimentos, use o GPS para ir até lá...");
		SendClientMessage(playerid, COLOR_LIGHT_RED,            "Virtual Life RPG mais que um RPG, UMA VIDA!");
		return 1;
	}
	if(strcmp(cmd, "/sistfome", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED,            "Virtual Life RPG - Fome:");
	    SendClientMessage(playerid, COLOR_WHITE,                "O tempo vai passando e a fome vai aumentando, se a sua fome estiver alta você irá");
	    SendClientMessage(playerid, COLOR_WHITE,                "começar a perder saúde, para diminuir a fome pode ir à um local público como Restaurante,");
	    SendClientMessage(playerid, COLOR_WHITE,                "Balada, Bar, Boate, Burger Shot, Loja de Donuts ou poderá chamar um Entregador de Pizza.");
		SendClientMessage(playerid, COLOR_WHITE,                "Veja seu nível de fome em /status habitual");
	    SendClientMessage(playerid, COLOR_LIGHT_RED,            "Virtual Life RPG mais que um RPG, UMA VIDA!");
	    return 1;
	}
	if(strcmp(cmd, "/sistgangues", true) == 0) {
	    SendClientMessage(playerid, COLOR_GRAY,              	"Virtual Life RPG - Gangues:");
	    SendClientMessage(playerid, COLOR_WHITE,            	"O sistema de gangues do Virtual Life RPG faz com que você crie uma gangue, chame membros para ela,");
	    SendClientMessage(playerid, COLOR_WHITE,            	"cada gangue tem sua pontuação, ao chamar alguém dependente da pontuação da gangue esse alguém");
	    SendClientMessage(playerid, COLOR_WHITE,            	"terá que ter uma certa quantidade de respeito, ao criar uma gangue veja /minhagangue as informaçoes de sua gangue.");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Para adquirir respeito, você poderá matar 5 jogadores, ganhar evento ou receber 3 Xpoints...");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Digite \"!\" antes da mensagem para falar no chat privado com sua gangue");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Para ver os comandos relacionados à esse sistema digite /ganguecomandos");
		return 1;
	}
	if(strcmp(cmd, "/ganguefuncao", true) == 0) {
	    if(!IsPlayerInGang(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma gangue.");
	    SendClientMessage(playerid, COLOR_LIGHT_RED,             	"Virtual Life RPG - Função na gangue:");
	    if(compare(PlayerName(playerid), gStats[GetGangID(pStats[playerid][GangueNome])][GangDono]))
	    {
	        SendClientMessage(playerid, COLOR_WHITE,            "Você é o líder da gangue, suas ações com ela são ilimitadas.");
            SendClientMessage(playerid, COLOR_WHITE,            "Você pode definir cargos para os outros jogadores, definir os skins da gangue, remove-la,");
            SendClientMessage(playerid, COLOR_WHITE,            "chamar jogadores, resumindo, você tem permissão para utilizar qualquer comando relacionado");
            SendClientMessage(playerid, COLOR_WHITE,            "à gangue.");
            SendClientMessage(playerid, COLOR_WHITE,            "Comandos de Traficante: /comprararmas /minhasarmas /dararma /darcolete /darbombarelogio /darrojao");
			SendClientMessage(playerid, COLOR_WHITE,            "/darflash /darmaconha /darcocaina /darheroina");
		}
	    else if(pStats[playerid][GangueCargo] == 0)
	    {
	        SendClientMessage(playerid, COLOR_WHITE,            "Você é um recruta da gangue, o cargo mais baixo, entretanto, essencial.");
            SendClientMessage(playerid, COLOR_WHITE,            "Seu objetivo é simples, seguir as ordens superiores, dadas por Pilotos, Soldados, Sequestradores, Assaltante, Torres ou pelo Líder da gang.");
            SendClientMessage(playerid, COLOR_WHITE,            "Não leve em conta que somente porque seu cargo é o mais baixo, você seja pior que os outros membros,");
            SendClientMessage(playerid, COLOR_WHITE,            "mostre-se forte e experiente nas batalhas, atenda às ordens da chefia, mas isso, é claro, sem parar");
            SendClientMessage(playerid, COLOR_WHITE,            "de seguir a dinâmica da vida real.");
            SendClientMessage(playerid, COLOR_WHITE,            "Você não tem permissão para utilizar nenhum comando que possa alterar a gangue.");
	    }
	    else if(pStats[playerid][GangueCargo] == 1)
	    {
	        SendClientMessage(playerid, COLOR_WHITE,            "Você é um soldado da gangue, um caro mais estável da gangue.");
            SendClientMessage(playerid, COLOR_WHITE,            "Terá que vigiar, informar os membros do que acontece nas zonas e se for necessária travar guerras.");
            SendClientMessage(playerid, COLOR_WHITE,            "Poderá mandar nos recrutas e dar ordens para defender os seus interesses,");
            SendClientMessage(playerid, COLOR_WHITE,            "pulso firme nas suas ações para que possa subir na gangue");
            SendClientMessage(playerid, COLOR_WHITE,            "Você não tem permissão para utilizar nenhum comando que possa alterar a gangue.");
	    }
	    else if(pStats[playerid][GangueCargo] == 2)
	    {
            SendClientMessage(playerid, COLOR_WHITE,            "Você é o Motorista da Gang, seu objetivo é dar ordens para soldados e recrutas, criar estratégias");
            SendClientMessage(playerid, COLOR_WHITE,            "de batalha para a melhor maneira de colocar os membros dentro do território inimigo sem que aconteça perdas.");
            SendClientMessage(playerid, COLOR_WHITE,            "Você também fica encarregado de avisar os líderes sobre vitórias ou derrotas nas batalhas, sugerir");
            SendClientMessage(playerid, COLOR_WHITE,            "mudanças essenciais na gangue (tanto na estratégia quanto no escalamento), terá que também cuidar dos veículos para que possa sairrem de lá.");
            SendClientMessage(playerid, COLOR_WHITE,            "Mantenha seu foco mais em estratégias para gangues, sempre pense num Plano B em caso de falhas.");
			SendClientMessage(playerid, COLOR_WHITE,            "Você não tem permissão para utilizar nenhum comando que possa alterar a gangue.");
	    }
	    else if(pStats[playerid][GangueCargo] == 3)
	    {
            SendClientMessage(playerid, COLOR_WHITE,            "Você é um piloto da gangue, seu objetivo é dar ordens para soldados, criar estratégias");
            SendClientMessage(playerid, COLOR_WHITE,            "de batalha, você participa mais da guerra dando ordens, claro que você também poderá batalhar.");
            SendClientMessage(playerid, COLOR_WHITE,            "Você também fica encarregado de avisar os líderes sobre vitórias ou derrotas nas batalhas, sugerir");
            SendClientMessage(playerid, COLOR_WHITE,            "mudanças essenciais na gangue (tanto na estratégia quanto no escalamento).");
            SendClientMessage(playerid, COLOR_WHITE,            "Mantenha seu foco mais em estratégias para gangues, sempre pense num Plano B em caso de falhas.");
			SendClientMessage(playerid, COLOR_WHITE,            "Você não tem permissão para utilizar nenhum comando que possa alterar a gangue.");
	    }
	    else if(pStats[playerid][GangueCargo] == 4)
	    {
            SendClientMessage(playerid, COLOR_WHITE,            "Você é um fogueteiro, seu objetivo é mandar avisos e sinais para a gangue, de modo");
            SendClientMessage(playerid, COLOR_WHITE,            "com que ela saiba sua posição e tudo mais, um dos melhores métodos para isso é o Rojão.");
            SendClientMessage(playerid, COLOR_WHITE,            "Agora você pode carregar até 7 rojões para soltar, compre alguns ou peça para um Traficante.");
            SendClientMessage(playerid, COLOR_WHITE,            "Você não tem permissão para utilizar nenhum comando que possa alterar a gangue.");
	    }
	    else if(pStats[playerid][GangueCargo] == 5)
	    {
            SendClientMessage(playerid, COLOR_WHITE,            "Você é o sequestrador, seu objetivo é sequestrar membros de outras gangues para enfraquecê-las.");
            SendClientMessage(playerid, COLOR_WHITE,            "seguirá ordens do líder ou poderá fazer suas próprias regras para sequestro, quando for realizar um sequestro");
            SendClientMessage(playerid, COLOR_WHITE,            "chame um Motorista de Gang, Soldados e Recutas para que tudo aconteça bem.");
            SendClientMessage(playerid, COLOR_WHITE,            "Seu comando será o /sequestrarmembro [id].");
	    }
	    else if(pStats[playerid][GangueCargo] == 6)
	    {
            SendClientMessage(playerid, COLOR_WHITE,            "Você é o assaltante da gangue, seu objetivo é assaltar bancos, lojas, postos, restaurantes tudo possível.");
            SendClientMessage(playerid, COLOR_WHITE,            "seu objetivo é dar dinheiro a gangue para que possa comprar armas, coletes e bombas. Seguirá ordens do líder.");
            SendClientMessage(playerid, COLOR_WHITE,            "chame um Motorista de Gang, Soldados e Recutas para que tudo aconteça bem.");
            SendClientMessage(playerid, COLOR_WHITE,            "Seu comando será o /realizarassalto.");
	    }
	    else if(pStats[playerid][GangueCargo] == 7)
	    {
            SendClientMessage(playerid, COLOR_WHITE,            "Você é um olheiro, seu objetivo é avisar a gangue de suspeitos ataques ao território.");
            SendClientMessage(playerid, COLOR_WHITE,            "Você também pode investigar outras gangues e descobrir dados sobre futuros ataques como área");
            SendClientMessage(playerid, COLOR_WHITE,            "tática, quantidade de atacantes e tudo mais. Sempre mantenha os Líderes avisados sobre suas descobertas.");
            SendClientMessage(playerid, COLOR_WHITE,            "Você não tem permissão para utilizar nenhum comando que possa alterar a gangue.");
	    }
	    else if(pStats[playerid][GangueCargo] == 8)
	    {
			SendClientMessage(playerid, COLOR_WHITE,            "Você é um traficante, seus objetivos são fornecer armas, drogas, colete e acessórios de batalha para");
			SendClientMessage(playerid, COLOR_WHITE,            "soldados e membros que forem para a guerra e defender seu território, para fornecer os acessórios,");
			SendClientMessage(playerid, COLOR_WHITE,            "você deve primeiro de tudo comprá-los atrás da loja de armas, depois disso usar os comandos para entregar.");
			SendClientMessage(playerid, COLOR_WHITE,            "Lembrando que ao fornecer os acessórios você irá os perder, e sempre terá que ficar indo atrás da loja de armas");
			SendClientMessage(playerid, COLOR_WHITE,            "para comprar mais.");
			SendClientMessage(playerid, COLOR_WHITE,            "LEMBRETE: Compre as armas atrás da loja de armas, é lá que o seu tráfico funciona, você tem preços menores e");
            SendClientMessage(playerid, COLOR_WHITE,            "só poderá dar as armas pegas de lá. Digite /comprararmas e siga o Checkpoint.");
			SendClientMessage(playerid, COLOR_WHITE,            "Você deve utilizar os comandos: /comprararmas /minhasarmas /dararma /darcolete /darbombarelogio /darrojao");
			SendClientMessage(playerid, COLOR_WHITE,            "/darflash /darmaconha /darcocaina /darheroina");
	    }
	    else if(pStats[playerid][GangueCargo] == 9)
	    {
            SendClientMessage(playerid, COLOR_WHITE,            "Você é torre, o terceiro cargo mais alto da gangue, perdendo apenas para o Líder e Braço-Direito.");
            SendClientMessage(playerid, COLOR_WHITE,            "Seu trabalho é muito semelhante ao do Líder, você administra a gangue, batalha por ela,");
            SendClientMessage(playerid, COLOR_WHITE,            "define cargos e skins, faz ordens para os membros, etc...");
            SendClientMessage(playerid, COLOR_WHITE,            "Você tem permissão para utilizar todos os comandos da gangue, exceto remove-la.");
	    }
	    else if(pStats[playerid][GangueCargo] == 10)
	    {
            SendClientMessage(playerid, COLOR_WHITE,            "Você é o Braço-Direito do Líder, o segundo cargo mais alto da gangue, perdendo apenas para o Líder.");
            SendClientMessage(playerid, COLOR_WHITE,            "Seu trabalho é muito semelhante ao do Líder, você administra a gangue, batalha por ela,");
            SendClientMessage(playerid, COLOR_WHITE,            "define cargos e skins, faz ordens para os membros, etc...");
            SendClientMessage(playerid, COLOR_WHITE,            "Você tem permissão para utilizar todos os comandos da gangue, exceto remove-la.");
	    }
	    return 1;
	}
	if(strcmp(cmd, "/ganguecomandos", true) == 0) {
		SendClientMessage(playerid, COLOR_LIGHT_RED,            "Virtual Life RPG - Comandos de gangue:");
		SendClientMessage(playerid, COLOR_WHITE,            	"/criargangue [nome da gangue] [cor da gangue] : Para criar uma gangue, requer 10 pontos de Respeito.");
		SendClientMessage(playerid, COLOR_WHITE,            	"/ganguecores : Para ver as cores das gangues.");
		SendClientMessage(playerid, COLOR_WHITE,            	"/minhagangue : Ver as informações de sua gangue.");
		SendClientMessage(playerid, COLOR_WHITE,            	"/chamarparagangue [id] : Chamar alguém para sua gangue.");
		SendClientMessage(playerid, COLOR_WHITE,            	"/expulsardagangue [id] : Expulsar alguém da sua gangue.");
		SendClientMessage(playerid, COLOR_WHITE,            	"/mudarcorgangue [nova cor] : Mudar a cor da sua gangue.");
		SendClientMessage(playerid, COLOR_WHITE,            	"/removergangue : Remover sua gangue, você deve que ser o dono.");
        SendClientMessage(playerid, COLOR_WHITE,            	"Para ver mais comandos de gangue digite /ganguecomandos2");
		return 1;
	}
	if(strcmp(cmd, "/ganguecomandos2", true) == 0) {
		SendClientMessage(playerid, COLOR_LIGHT_RED,            "Virtual Life RPG - Comandos de gangue - Parte 2:");
		SendClientMessage(playerid, COLOR_WHITE,            	"/conquistarterritorio : Conquista um território para a gangue (pode ser usado no início e depois a cada 24 level ganho).");
        SendClientMessage(playerid, COLOR_WHITE,            	"/definircargo [id] [cargo] : Define o cargo de um jogador.");
		SendClientMessage(playerid, COLOR_WHITE,            	"/definirskin [slot: 1 à 5] [id da skin] : Define um skin para sua gangue.");
		SendClientMessage(playerid, COLOR_WHITE,            	"/usarskingangue [slot: 1 à 5] : Usar um skin da sua gangue.");
		SendClientMessage(playerid, COLOR_WHITE,            	"/ganguefuncao : Para ver a sua função na gangue e comandos disponíveis.");
        SendClientMessage(playerid, COLOR_WHITE,            	"/sairgangue : Sair da sua gangue.");
		SendClientMessage(playerid, COLOR_WHITE,            	"Digite \"!\" antes da mensagem para falar no chat privado com sua gangue");
        SendClientMessage(playerid, COLOR_WHITE,            	"Para ver mais comandos de gangue digite /ganguecomandos3");
		return 1;
	}
	if(strcmp(cmd, "/ganguecomandos3", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED,            "Virtual Life RPG - Comandos de gangue - Parte 3:");
	    SendClientMessage(playerid, COLOR_WHITE,            	"/dargangue [id] : Entrega a posse de sua gangue para alguém.");
	    SendClientMessage(playerid, COLOR_WHITE,            	"/sacardinheiroarea [quantidade] : Sacar dinheiro de um território seu.");
	    SendClientMessage(playerid, COLOR_WHITE,            	"/depositardinheiroarea [quantidade] : Depositar dinheiro em um território seu..");
	    SendClientMessage(playerid, COLOR_WHITE,            	"/extratoarea : Ver quanto de dinheiro um território seu possui.");
	    SendClientMessage(playerid, COLOR_WHITE,            	"/mudarnomegangue : Muda o nome da gangue, você precisa ser o dono.");
	    return 1;
	}
	if(strcmp(cmd, "/sistchat", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED, 			"Virtual Life RPG - Chat:");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Agora as mensagens enviadas pelo chat só chegarão para jogadores que estiverem próximos a você!");
		if(ENABLE_GLOBAL_CHAT == 1)
		{
        	SendClientMessage(playerid, COLOR_WHITE,            "Você poderá gritar também /gritar, CUIDADO: Se gritar demais poderá ter dor de garganta");
        	SendClientMessage(playerid, COLOR_WHITE,            "e ficará um bom tempo sem poder gritar novamente!");
        	SendClientMessage(playerid, COLOR_WHITE,            "(/g)ritar para gritar e (/s)ussurrar para sussurrar");
		}
		SendClientMessage(playerid, COLOR_WHITE,            	"Existem muitos meios de contatos por aqui, entre os mais utilizados Celulares, Telefones...");
		SendClientMessage(playerid, COLOR_WHITE,            	"Também em caso de querer anunciar algo, negocie com algum Jornalista...");
		SendClientMessage(playerid, COLOR_WHITE,            	"A comunicação com a administração pode ser feita a qualquer hora, apenas use /admin [mensagem]");
		SendClientMessage(playerid, COLOR_LIGHT_RED,            "Virtual Life RPG mais que um RPG, UMA VIDA!");
		return 1;
	}
	if(strcmp(cmd, "/interiorcasa", true) == 0)
	{
    	new value = strval(strtok(cmdtext,idx));
		for(new i = 0; i < sizeof Interiores; i++)
		{
		    if(value == Interiores[i][hPrice])
		    {
				new string[128];
				format(string, sizeof string, "Interior de $%d,00 dólares:", value);
				SendClientMessage(playerid, COLOR_LIGHT_RED, string);
				format(string, sizeof string, "Espaço para rádio: %s", SimNao[Interiores[i][hRadio]]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof string, "Espaço para televisão: %s", SimNao[Interiores[i][hTV]]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof string, "Espaço para geladeira: %s", SimNao[Interiores[i][hGeladeira]]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof string, "Espaço para fogão: %s", SimNao[Interiores[i][hFogao]]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof string, "Espaço para Guarda Roupas: %s", SimNao[Interiores[i][hGuardaRoupas]]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof string, "Espaço para cofre: %s", SimNao[Interiores[i][hCofre]]);
				SendClientMessage(playerid, COLOR_WHITE, string);
		        return 1;
		    }
		}
		SendClientMessage(playerid, COLOR_GRAY, "Interior inválido, veja todos em /regras1 >> lacuna 5");
		return 1;
	}
	if(strcmp(cmd, "/sistcasas", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED, 			"Sistema de Casas Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_WHITE,				"/alugarquarto [id/dono] [casaid]: Alugar a casa de um jogador.");
		SendClientMessage(playerid, COLOR_WHITE, 				"/comprarcasa : Comprar a casa de um jogador.");
		SendClientMessage(playerid, COLOR_WHITE,         		"/minhacasa : Ver opções com sua casa.");
        SendClientMessage(playerid, COLOR_WHITE,				"/chamarparamorar [id] [casaid]: Chamar um jogador para morar com você.");
		SendClientMessage(playerid, COLOR_WHITE, 				"/aceitar : Aceitar uma proposta de moradia.");
	    SendClientMessage(playerid, COLOR_WHITE, 				"/recusar : Recusar uma proposta de moradia.");
		SendClientMessage(playerid, COLOR_WHITE, 				"/cancelarmoradia : Cancelar uma moradia (Ir para sua casa atual)");
		SendClientMessage(playerid, COLOR_WHITE, 				"/cancelaraluguel : Quando alugar uma casa e não quiser mais ficar por lá, use e voltará para o seu lar.");
		SendClientMessage(playerid, COLOR_LIGHT_RED,          	"Virtual Life RPG mais que um RPG, UMA VIDA!");
		return 1;
	}
	if(strcmp(cmd, "/sistcarros", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED, 			"Sistema de Carros Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_WHITE,				"Existe diferentes maneiras de comprar seu carro, na concessionária ou com um vendedor.");
		SendClientMessage(playerid, COLOR_WHITE, 				"Ao comprar seu carro, aconselhamos comprar o Kit de Alarme/Travas. /acionar [travas/alarme/nada]");
	    SendClientMessage(playerid, COLOR_WHITE, 				"na loja de customização, lá você também pode personalizar a placa do seu carro. /comprar [placa] [nome]");
		SendClientMessage(playerid, COLOR_WHITE, 				"Para mudar a posição aonde seu carro é salvo digite: /estacionar");
        SendClientMessage(playerid, COLOR_WHITE,           		"Todo carro tem chave, voce poderá emprestar sua chave para uma pessoa");
        SendClientMessage(playerid, COLOR_WHITE,           		"Mais lembre caso ela não lhe entregue, é bom chamar a polícia para apreende-las.");
        SendClientMessage(playerid, COLOR_WHITE,            	"Para emprestar: /emprestarchave [id]");
        SendClientMessage(playerid, COLOR_WHITE,            	"Existe outros comandos para seu carro, com o tempo aprenderá, esses são os BÁSICOS.");
        SendClientMessage(playerid, COLOR_WHITE,            	"Toda modificação salva: Tuning, Placa, Cor, Dano, Alarme, Chave e o Dono.");
		return 1;
	}
	if(strcmp(cmd, "/infocasa", true) == 0) {
   	    SendClientMessage(playerid, COLOR_LIGHT_RED, 		 	"Sistema de Casas Reload Virtual Life RpG");
   	    SendClientMessage(playerid, COLOR_WHITE,             	"Agora você pode entrar na sua casa, fazer atividades que nunca pensou que faria no SA:MP.");
   	    SendClientMessage(playerid, COLOR_WHITE,             	"/convidar [id] - Convida alguém para sua casa, ela poderá comer, assistir TV, ligar o rádio, cozinhar.");
   	    SendClientMessage(playerid, COLOR_WHITE,             	"/expulsar [id] - Desabilita a entrada de alguém na sua casa.");
	    SendClientMessage(playerid, COLOR_WHITE,             	"/saircasa - Sair de alguma casa.");
	    SendClientMessage(playerid, COLOR_WHITE,             	"Toda casa tem Cofre, lá você poderá guardar dinheiro, armas, celular e drogas, para mais informações digite /sistcofre.");
   	    SendClientMessage(playerid, COLOR_WHITE,             	"OBS1: Ladrões poderão entrar na sua casa e roubar os eletrodomesticos, então previna-se. Para mais informações digite: /sisteletro.");
	    SendClientMessage(playerid, COLOR_WHITE,             	"OBS2: Junto com isso você poderá assistir, ouvir, cozinhar, na sua casa. Para mais informações digite: /sisteletro.");
        return 1;
    }
	if(strcmp(cmd, "/sisteletro", true) == 0) {
   	    SendClientMessage(playerid, COLOR_LIGHT_RED, 		 	"Sistema de Eletrodomésticos/Segurança Reload Virtual Life RpG");
   	    SendClientMessage(playerid, COLOR_WHITE,             	"Na loja de utilidades 24/7 é possível que você adquira todos os eletrodomésticos disponíveis.");
   	    SendClientMessage(playerid, COLOR_WHITE,             	"Ao comprar uma TV, Rádio, Geladeira, Fogão, Computador, Guarda-Roupas, Cofre. Você necessita colocar o objeto então quando comprar vá para sua casa e digite:");
   	    SendClientMessage(playerid, COLOR_WHITE,             	"/colocarcomputador /colocartv /colocarradio /colocargeladeira /colocarfogao /retirarcomputador /retirartv /retirarradio /retirargeladeira /retirarfogao.");
	    SendClientMessage(playerid, COLOR_WHITE,             	"Comandos da Televisão: /ligartv [canal], /desligartv, /verprevisao. Num 2 e Num 8, passam e retornam o canal. ");
   	    SendClientMessage(playerid, COLOR_WHITE,             	"Comandos do Rádio: /radio (liga/desliga): São 7 estações diferentes para você se desfrutar.");
	    SendClientMessage(playerid, COLOR_WHITE,             	"Comandos da Geladeira: /guardarcomida [comida] [quantidade], /retirarcomida [comida], /geladeira (ver os alimentos na geladeira).");
	    SendClientMessage(playerid, COLOR_WHITE,             	"Comandos do Fogão: /cozinhar, /servir");
	    SendClientMessage(playerid, COLOR_WHITE,             	"Comandos do Computador: /ligarcomputador, /propinfo, /inflacao, /tocarmusica, /desligarcomputador");
	    SendClientMessage(playerid, COLOR_WHITE,             	"Comandos do Guarda-Roupas: /guardarroupa ( roupa que está no corpo ), /vestiroupa [id], /experimentarroupa [id]");
	    SendClientMessage(playerid, COLOR_WHITE,             	"Comandos do Cofre: /sitcofre");
        return 1;
    }
   	if(strcmp(cmd, "/sistcofre", true) == 0) {
   	    SendClientMessage(playerid, COLOR_LIGHT_RED, 		 	"Virtual Life RPG - Sistema de cofre:");
   	    SendClientMessage(playerid, COLOR_WHITE,             	"Toda casa vem equipada com um cofre, aonde você pode guardar armas, drogas e dinheiro.");
   	    SendClientMessage(playerid, COLOR_WHITE,             	"Para trocar a senha do cofre, vá até a loja de registros de cofres e digite /registrarcofre.");
        SendClientMessage(playerid, COLOR_WHITE,             	"Se esquecer a senha, você poderá ir lá novamente e digitar /minhasenhacofre.");
	    SendClientMessage(playerid, COLOR_WHITE,             	"Ao registrar, o comando para abrir o cofre é /cofresenha.");
   	    SendClientMessage(playerid, COLOR_WHITE,             	"Atenção, nem tudo está protegido. É recomendável instalar alarmes em seu imóvel.");
        SendClientMessage(playerid, COLOR_LIGHT_RED, 		 	"Virtual Life RPG mais que um RPG, UMA VIDA!");
		return 1;
    }
	if(strcmp(cmd, "/novidades", true) == 0) {
		SendClientMessage(playerid, COLOR_MECANICO,				"NovidadeS Reload Virtual Life RpG - Parte I -");
		SendClientMessage(playerid, COLOR_BLUE_PLUS,         	"Nosso mode vem equipado de 32 profissões para saber como funciona basta digitar /sistlevel.");
		SendClientMessage(playerid, COLOR_BLUE_PLUS, 	    	"Aqui no Virtual Life RPG para obter uma nova skin é diferente, veja em /sistskin");
		SendClientMessage(playerid, COLOR_BLUE_PLUS,         	"Que tal apostar uma graninha e concorrer a $30000,00 dólares? Vá até a loteria e se informe!");
		SendClientMessage(playerid, COLOR_BLUE_PLUS,         	"Está querendo ver os veículos e os preços do servidor? /veículos e veja os veículos disponíveis.");
		SendClientMessage(playerid, COLOR_BLUE_PLUS,         	"Logo em seguida digite /pedirarma [arma/ou/nomeparecido]");
		SendClientMessage(playerid, COLOR_COP_RODOVIARIO,   	"/novidades 2 Para ver a lista das Reload Virtual Life RPG - Parte II");
		return 1;
	}
   	if(strcmp(cmd, "/novidades2", true) == 0) {
   		SendClientMessage(playerid, COLOR_MECANICO,				"NovidadeS Reload Virtual Life RpG - Parte II -");
   	    SendClientMessage(playerid, COLOR_BLUE_PLUS,     	    "Quer ver as ações disponíveis no jogo? /acoes");
		SendClientMessage(playerid, COLOR_BLUE_PLUS,     	    "Insatisfeito com algum jogador? Inicie uma votação /votekick [id] [motivo]");
		SendClientMessage(playerid, COLOR_BLUE_PLUS,     	    "Mate o Juiz/Delegado e ganhe a chave da cadeia /soltarpreso");
		SendClientMessage(playerid, COLOR_BLUE_PLUS,     	    "Seu carro está prestes a explodir? Chame um reboque /servico [mecanico]");
		SendClientMessage(playerid, COLOR_BLUE_PLUS,     	    "Quer ver seu porte de armas? /portedearmas");
		SendClientMessage(playerid, COLOR_BLUE_PLUS,     	    "Vá na locadora de Los Santos e veja os carros para locação!");
        SendClientMessage(playerid, COLOR_COP_RODOVIARIO,   	"Digite /rpglife e veja o Reload Virtual Life RPG na íntegra.");
        return 1;
    }
   	if(strcmp(cmd, "/rpglife", true) == 0) {
   	    SendClientMessage(playerid, COLOR_LIGHT_RED, 		 	"Aqui estão as NovidadeS - Parte I - do Reload Virtual Life RpG");
   	    SendClientMessage(playerid, COLOR_WHITE,            	"Cansado de esperar dar gmx para aparecer seu carro? No Reload Virtual Life RpG");
   	    SendClientMessage(playerid, COLOR_WHITE,            	"não precisa de gmx para aparecer.");
   	    SendClientMessage(playerid, COLOR_WHITE,            	"Comprava 1 casa e não sabia se morava outra pessoa ali, agora no Virtual Life");
   	    SendClientMessage(playerid, COLOR_WHITE,            	"Sua casa ganha um ícone com seu nome informando que ali já mora gente.");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Agora você tem seu carro! Comprando o carro do vendedor você pode ativar o alarme");
	    SendClientMessage(playerid, COLOR_WHITE,            	"e quando sentir falta dele avise a polícia que ligará o radar e achará seu carro");
   	    SendClientMessage(playerid, COLOR_WHITE,            	"aonde estiver");
        SendClientMessage(playerid, COLOR_LIGHT_RED,    		"Digite /rpglife2 e veja o Reload Virtual Life RPG na íntegra.");
        return 1;
    }
	if(strcmp(cmd, "/rpglife2", true) == 0) {
        SendClientMessage(playerid, COLOR_LIGHT_RED, 			"Aqui estão as NovidadeS - Parte II - do Reload Virtual Life RpG");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Agora os carros não dão mais respawn, para reaver 1 carro chame um reboque.");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Celular com: /celular /sms /agenda /numero /chamar /atender /desligar /espera");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Agora todos os carros vem com gás! Ao iniciar o mode todos tem 100lts");
        SendClientMessage(playerid, COLOR_WHITE,            	"Quando fechar o mode os litros deixados nos carros serão salvos!");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Sem grana para uma casa? Fique hospedado no Hotel /sisthotel");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Todas as profissões vem com mais de 2 comandos! Exato até assassino e desempregado!");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Em toda San Andreas há radares fixos multando quem andar acima da velocidade.");
	    SendClientMessage(playerid, COLOR_LIGHT_RED,   			"Digite /rpglife3 e veja o Reload Virtual Life RPG na íntegra.");
	    return 1;
	}
	if(strcmp(cmd, "/rpglife3", true) == 0) {
        SendClientMessage(playerid, COLOR_LIGHT_RED, 	    	"Aqui estão as NovidadeS - Parte III - do Reload Virtual Life RpG");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Previsão do tempo altera o plantio se chover a colheita sai mais rápido.");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Tuning, você pode tunar seu veiculo e salvá-lo. Basta ser o dono.");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Vá a uma oficina aplique os componentes desejados! E pronto está salvo!");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Sistema de salvamento de armas! Assim que comprar uma arma com um vendedor");
	    SendClientMessage(playerid, COLOR_WHITE,            	"ela ficará salva até as munições acabarem ou serem confiscadas quando você for preso e não ter porte!");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Está precisando de grana mas não tem nada no banco? Faça um empréstimo, vá até o banco, selecione");
	    SendClientMessage(playerid, COLOR_WHITE,            	"a linha do menu 'Fazer Empréstimo', os JUROS vão aumentando então é bom pagar a dívida logo");
	    SendClientMessage(playerid, COLOR_LIGHT_RED,    		"Digite /rpglife4 e veja o Reload Virtual Life RPG na íntegra.");
	    return 1;
	}
	if(strcmp(cmd, "/rpglife4", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED, 	    	"Aqui estão as NovidadeS - Parte IV - do Reload Virtual Life RpG");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Agora as suas doses de maconha/cocaina/heroina e seu teor alcóolico ficam salvos.");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Para remover seu teor alcóolico beba guaraná e para remover suas drogas faça um");
	    SendClientMessage(playerid, COLOR_WHITE,            	"tratamento especial com um Paramédico");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Salvamento de cores! Agora quando você pintar um veículo as cores dele ficarão salvas");
	    SendClientMessage(playerid, COLOR_WHITE,            	"mesmo ele sendo um veículo do servidor/governo!");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Comprou uma casa mas não gostou de ficar por lá?! Arranje um seguro de imóveis na seguradora.");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Se você possuir seguro poderá ganhar um reembolso de 50, 75 e até 100 por cento do valor pago.");
	    SendClientMessage(playerid, COLOR_LIGHT_RED, 	 		"Digite /rpglife5 e veja o Reload Virtual Life RPG na íntegra.");
		return 1;
	}
	if(strcmp(cmd, "/rpglife5", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED, 	    	"Aqui estão as NovidadeS - Parte V - do Reload Virtual Life RpG");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Está com dinheiro e quer comprar um veículo mas não tem nenhum vendedor no jogo?");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Agora aqui possui carros à venda, não só os outros jogadores podem vender veículos pra você,");
	    SendClientMessage(playerid, COLOR_WHITE,            	"como você também pode ir na concessionaria e lá terá veículos à venda com diversos modelos!");
		SendClientMessage(playerid, COLOR_WHITE,            	"Agora você poderá colocar sua casa em aluguel /locarminhacasa [dias]");
		SendClientMessage(playerid, COLOR_WHITE,            	"quando o jogador estiver conectado no servidor os dias irão sendo diminuidos");
		SendClientMessage(playerid, COLOR_WHITE,            	"Agora seu trabalho tem um horário, /meuhorario");
		SendClientMessage(playerid, COLOR_WHITE,            	"Caso não esteja no seu horário de trabalho você não receberá Xpoint!");
		SendClientMessage(playerid, COLOR_LIGHT_RED, 	 		"Digite /rpglife6 e veja o Reload Virtual Life RPG na íntegra.");
		return 1;
	}
	if(strcmp(cmd, "/rpglife6", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED, 	    	"Aqui estão as NovidadeS - Parte VI - do Reload Virtual Life RpG");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Sua saúde está baixa? Uma recomendação para aumenta-la é o Restaurante...");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Nele você poderá comer, beber, e também haverá sobremesa!");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Aqui as casas do Sweet e do Ryder possuem interiores!");
		SendClientMessage(playerid, COLOR_WHITE,            	"Procurando um lazer? Que tal ir ao nosso estadio de Stunt?");
		SendClientMessage(playerid, COLOR_WHITE,            	"Ele fica aberto aos domingos, lá irá ter motos adequadas para stunt.");
        SendClientMessage(playerid, COLOR_WHITE,            	"Não conhece algumas localizações do Virtual Life RPG? Problema resolvido, agora você apenas precisará usar o GPS,");
		SendClientMessage(playerid, COLOR_WHITE,            	"Basta digitar /GPS [nome do local] , se não souber o nome, somente digite /GPS e os nomes disponíveis aparecerão");
		SendClientMessage(playerid, COLOR_LIGHT_RED, 	 		"Digite /rpglife7 e veja o Reload Virtual Life RPG na íntegra.");
		return 1;
	}
	if(strcmp(cmd, "/rpglife7", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED, 	    	"Aqui estão as NovidadeS - Parte VII - do Reload Virtual Life RpG");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Aqui sua casa ganha um próprio interior!");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Você poderá colocar computador, rádio, televisão, fogão, cofre e geladeira nela");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Ela também poderá ser assaltada, no caso compre alarme...");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Cada casa possui um cofre, onde pode se guardar dinheiro, armas e drogas!");
		SendClientMessage(playerid, COLOR_WHITE,            	"Saibá mais em: /interiorcasa , /sisteletro , /infocasa , /sistcofre");
		SendClientMessage(playerid, COLOR_WHITE,            	"Novo entretenimento: uma balada localizada no clube Alhambra, isso mesmo,");
		SendClientMessage(playerid, COLOR_WHITE,            	"lá tem músicas, petiscos, tudo para você fazer um bom proveito quando não estiver trabalhando!");
		SendClientMessage(playerid, COLOR_LIGHT_RED, 	 		"Digite /rpglife8 e veja o Reload Virtual Life RPG na íntegra.");
		return 1;
	}
	if(strcmp(cmd, "/rpglife8", true) == 0){
	    SendClientMessage(playerid, COLOR_LIGHT_RED, 	    	"Aqui estão as NovidadeS - Parte VIII - do Reload Virtual Life RpG");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Nova forma de comunicação, telefone em casa, isso mesmo, é mais um eletrodoméstico, feito para comunicações");
		SendClientMessage(playerid, COLOR_WHITE,            	"à aqueles que não tem celular, mas o telefone tem contato com o celular e o celular com o telefone");
		SendClientMessage(playerid, COLOR_WHITE,            	"Uma diferença é que no celular, você paga os créditos, no telefone, a conta de telefone...");
		SendClientMessage(playerid, COLOR_WHITE,            	"Mais um entretenimento para você curtir: Derby! Para mais informações digite /derbyinfo");
		SendClientMessage(playerid, COLOR_WHITE,            	"Precisando de dinheiro? Aqui temos uma outra fórmula temporária para você ganhar algo!");
	    SendClientMessage(playerid, COLOR_WHITE,            	"As Sub Missões, são empregos temporários, ao ser anunciado que há vagas disponíveis você terá que");
	    SendClientMessage(playerid, COLOR_WHITE,            	"ir ao local e digitar /bico , você não receberá Xpoint, somente dinheiro!");
		SendClientMessage(playerid, COLOR_LIGHT_RED, 	 		"Digite /rpglife9 e veja o Reload Virtual Life RPG na íntegra.");
		return 1;
	}
	if(strcmp(cmd, "/rpglife9", true) == 0){
	    SendClientMessage(playerid, COLOR_LIGHT_RED, 	    	"Aqui estão as NovidadeS - Parte IX - do Reload Virtual Life RpG");
        SendClientMessage(playerid, COLOR_WHITE,            	"Agora para você verificar nossas profissões digite /profissoes");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Você poderá enviar cartas para aqueles que possuem casa, /escrevercarta [nome do jogador] [mensagem] , para ler suas cartas");
	    SendClientMessage(playerid, COLOR_WHITE,            	"digite /vercorrespondencia , e depois /jogarcartasfora para joga-las fora, você também receberá cartas do Banco, da COEVL");
	    SendClientMessage(playerid, COLOR_WHITE,            	"e da ECTVL informando sua conta de luz, suas informações bancárias, sua conta de telefone, etc...");
        SendClientMessage(playerid, COLOR_WHITE,            	"Agora quando o jogador não atender o telefone/celular por algum motivo, você poderá enviar mensagens pela caixa postal,");
		SendClientMessage(playerid, COLOR_WHITE,            	"basta esperar o BIP e digitar, para ver suas mensagens de caixa postal digite /caixapostal , para excluir suas");
		SendClientMessage(playerid, COLOR_WHITE,            	"mensagens da caixa postal digite /excluircaixapostal e para mudar sua mensagem de caixa postal digite /mudarcaixapostal");
		SendClientMessage(playerid, COLOR_LIGHT_RED, 	 		"Digite /rpglife10 e veja o Reload Virtual Life RPG na íntegra.");
        return 1;
	}
	if(strcmp(cmd, "/rpglife10", true) == 0){
	    SendClientMessage(playerid, COLOR_LIGHT_RED, 	    	"Aqui estão as NovidadeS - Parte X - do Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_WHITE,            	"Quando sua conta de luz acabar a sua casa terá a luz cortada, exato! Para recupera-la você deve");
	    SendClientMessage(playerid, COLOR_WHITE,            	"ir até a COEVL (Companhia Elétrica Virtual Life) e pagar a última conta com /pagarluz [casaid], enquanto a luz");
	    SendClientMessage(playerid, COLOR_WHITE,            	"estiver cortada você não poderá assistir Televisão, escutar Rádio e cozinhar na sua casa...");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Quando sua conta de telefone acabar, seu telefone cortará, e para recupera-lo você deverá ir até a ECTVL");
	    SendClientMessage(playerid, COLOR_WHITE,            	"(Empresa de Contas Telefônicas Virtual Life) e pagar a última conta...");
		SendClientMessage(playerid, COLOR_WHITE,            	"Agora ao comprar um veículo você ele terá um próprio ID de identificação, irá ser feito em sequencia, exemplo:");
		SendClientMessage(playerid, COLOR_WHITE,            	"1º veículo comprado = 1, 2º veículo comprado = 2, 3º veículo comprado = 3, e assim por diante...");
		SendClientMessage(playerid, COLOR_LIGHT_RED, 	 		"Digite /rpglife11 e veja o Reload Virtual Life RPG na íntegra.");
        return 1;
	}
	if(strcmp(cmd, "/rpglife11", true) == 0){
	    SendClientMessage(playerid, COLOR_LIGHT_RED, 	    	"Aqui estão as NovidadeS - Parte XI - do Reload Virtual Life RpG");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Você terá um Virtual Card que sua empresa de trabalho poderá recarregar, o Virtual Card serve para você");
	    SendClientMessage(playerid, COLOR_WHITE,            	"pegar um ônibus por conta dela, ao entrar no ônibus, se seus créditos no cartão forem maior que um");
	    SendClientMessage(playerid, COLOR_WHITE,            	"você digitará /usarcard para usar ou /naousarcard para não usar!");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Quer explodir algum amigo chato seu? Desenvolver armadilhas? Aqui temos o que você precisa,");
	    SendClientMessage(playerid, COLOR_WHITE,            	"no Virtual Life RPG existem Bombas relógios, compradas na Ammu-Nation ou com um vendedor de armas");
        SendClientMessage(playerid, COLOR_WHITE,            	"Aí você poderá plantá-las com /plantarbomba, mas saía de perto ou explodirá também ^^");
        SendClientMessage(playerid, COLOR_WHITE,            	"E mais, existem Rojões também, o esquema de compra é o mesmo, mas você pode levar 3 de uma vez e soltá-los com /soltarrojao");
		SendClientMessage(playerid, COLOR_LIGHT_RED, 	 		"Reload Virtual Life RPG mais que um RPG, UMA VIDA!");
        return 1;
	}

	if(strcmp(cmd, "/leis1", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED, 			"  LEIS TRÂNSITO - Virtual Life RpG PARTE I -");
        SendClientMessage(playerid, COLOR_JUIZ,					"  1º Proibido dirigir sem Carteira correspondente.");
        SendClientMessage(playerid, COLOR_JUIZ, 				"  2º Proibido dirigir em alta velocidade.");
        SendClientMessage(playerid, COLOR_JUIZ, 				"  3º Proibido ultrapassagens perigosas.");
        SendClientMessage(playerid, COLOR_JUIZ, 				"  4º Proibido portar drogas.");
        SendClientMessage(playerid, COLOR_JUIZ, 				"  5º Parar o carro quando a polícia mandar.");
    	SendClientMessage(playerid, COLOR_JUIZ, 				"  6º Não destruir patrimônio público.");
        SendClientMessage(playerid, COLOR_JUIZ, 				"  7º Respeitar os pedestres e outros motoristas.");
        SendClientMessage(playerid, COLOR_JUIZ, 				"  8º Andar no limite de velocidade determinado pelos radares.");
        SendClientMessage(playerid, COLOR_LIGHT_RED, 			"  Veja as outras leis de trânsito: /leis2.");
		return 1;
	}

	if(strcmp(cmd, "/leis2", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED, 			"  LEIS TRÂNSITO - Virtual Life RpG PARTE II -");
        SendClientMessage(playerid, COLOR_JUIZ,					"  9º Proibido estacionar em rua/calçadas/lojas.");
        SendClientMessage(playerid, COLOR_JUIZ, 				"  10º Não dirigir veículos que não sejam seus e que não tenha autorização. INCLUINDO OS DO SERVIDOR.");
        SendClientMessage(playerid, COLOR_JUIZ, 				"  11º Não ingerir nenhum intorpecente ou bebida alcoolica se for dirigir.");
		SendClientMessage(playerid, COLOR_JUIZ, 				"  12º Não pilotar o avião/helicoptero em baixa altitude.");
		SendClientMessage(playerid, COLOR_JUIZ, 				"  13º Não pousar avião/helicoptero em locais proibidos. Local: Aeroporto.");
        SendClientMessage(playerid, COLOR_JUIZ, 				"  14º Proibido andar portando armas. SEM TER O PORTE DE ARMAS.");
		SendClientMessage(playerid, COLOR_JUIZ, 				"  15º Não rejeitar a solicitação de um Oficial da Polícia.");
		SendClientMessage(playerid, COLOR_JUIZ, 				"  16º Não andar a pé nas pistas, ande na calçada.");
		SendClientMessage(playerid, COLOR_LIGHT_RED, 			"  Essas são as leis do Virtual Life RPG.");
		return 1;
	}

	if(strcmp(cmd, "/policia1", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED, 			"  LEIS DA POLÍCIA - Virtual Life RpG PARTE I -");
        SendClientMessage(playerid, COLOR_DELEGADO,				"  1º Abordar a pessoa com educação, sem exibir armas!");
        SendClientMessage(playerid, COLOR_DELEGADO, 			"  2º Pedir a documentação com educação.");
		SendClientMessage(playerid, COLOR_DELEGADO, 			"  3º Não ligar a sirene da viatura sem que nada esteje ocorrendo.");
        SendClientMessage(playerid, COLOR_DELEGADO, 			"  4º Proibido estacionar a viatura em calçadas, ruas, em frente a casas");
		SendClientMessage(playerid, COLOR_DELEGADO, 			"     se não for uma emergência.");
		SendClientMessage(playerid, COLOR_DELEGADO, 			"  6º O uso de armas somente se FOR necessário, quando ele atirar ou ameaçar sua integridade.");
		SendClientMessage(playerid, COLOR_LIGHT_RED, 			"  Veja a 2ª parte das leis da polícia: /policia2.");
		return 1;
	}

	if(strcmp(cmd, "/policia2", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED, 			"  LEIS DA POLÍCIA - Virtual Life RpG PARTE 2 -");
        SendClientMessage(playerid, COLOR_DELEGADO,				"  7º Andar na pista com velocidade abaixo de 120 KM/H.");
        SendClientMessage(playerid, COLOR_DELEGADO, 			"  8º Não dirigir embriagado nas viaturas.");
		SendClientMessage(playerid, COLOR_DELEGADO, 			"  9º IMPORTANTE! Apenas Delegado pode negar, você tem que obedecer ao outro OFICIAL.");
        SendClientMessage(playerid, COLOR_DELEGADO, 			"  	  Caso ele mande você parar e dar a documentação! Seja da Swat ou não. tem que obedecer!");
		SendClientMessage(playerid, COLOR_DELEGADO, 			"  10º Perseguir, multar, prender seguindo as regras dos comandos!");
		SendClientMessage(playerid, COLOR_LIGHT_RED, 			"  Caso um oficial não respeite essas 10 regras, reporte, tire ss, ou peça a prisao dele por outro policial.");
		return 1;
	}

	if(strcmp(cmd, "/derbyinfo",true) == 0){
	    SendClientMessage(playerid, COLOR_LIGHT_RED,            "Derby:");
	    SendClientMessage(playerid, COLOR_WHITE,                "O derby é um evento onde você receberá um Blooding Blanger e terá que ir derrotanto seus oponentes...");
	    SendClientMessage(playerid, COLOR_WHITE,                "Ao sair do veículo, você será desclassificado, o último jogador que sair será o vencedor e ganhará um prêmio!");
	    SendClientMessage(playerid, COLOR_WHITE,                "Para entrar no Derby você terá que esperar o estádio organizar um e digitar /participar para se inscrever, logo em seguida");
	    SendClientMessage(playerid, COLOR_WHITE,                "você terá que ir até o estádio oficializar sua participação, se houver menos de 3 participantes o Derby será CANCELADO!");
	    SendClientMessage(playerid, COLOR_WHITE,                "O máximo de participantes é 10, ou seja, o número de veículos disponíveis... Faça bom proveito!");
		return 1;
	}
	if(strcmp(cmd,"/slotarmas",true) == 0){
		SendClientMessage(playerid, COLOR_LIGHT_RED, 			"ARMAS & SLOTS:");
		SendClientMessage(playerid, COLOR_WHITE,                "Armas de SLOT 2: Desert Eagle e Pistol 9mm com silenciador - $5 cada munição.");
		SendClientMessage(playerid, COLOR_WHITE,                "Armas de SLOT 3: Shotgun e Combat Shotgun  - $40 cada munição");
		SendClientMessage(playerid, COLOR_WHITE,                "Armas de SLOT 4: MP5 - $10 cada munição");
		SendClientMessage(playerid, COLOR_WHITE,                "Armas de SLOT 5: AK47 e M4 - $30 cada munição");
		SendClientMessage(playerid, COLOR_WHITE,                "Armas de SLOT 6: Country Rifle - $50 cada munição");
		SendClientMessage(playerid, COLOR_LIGHT_RED, 			"Decreto nº1980/2008 SLOTS de armas e preços - POLICIAL SWAT: Ravedutti. Los Santos/San Fierro-SA");
		return 1;
	}
	if(strcmp(cmd,"/armas",true) == 0){
		SendClientMessage(playerid, COLOR_LIGHT_RED, 			"Armas - Parte I:");
		SendClientMessage(playerid, COLOR_WHITE,                "1 - Soco inglês.");
		SendClientMessage(playerid, COLOR_WHITE,                "2 - Taco de golfe.");
		SendClientMessage(playerid, COLOR_WHITE,                "3 - Cacetete.");
		SendClientMessage(playerid, COLOR_WHITE,                "4 - Faca.");
		SendClientMessage(playerid, COLOR_WHITE,                "5 - Taco de Baseball.");
		SendClientMessage(playerid, COLOR_WHITE,                "6 - Shovel.");
		SendClientMessage(playerid, COLOR_WHITE,                "7 - Taco de sinuca.");
		SendClientMessage(playerid, COLOR_WHITE,                "8 - Katana.");
		SendClientMessage(playerid, COLOR_LIGHT_RED,            "/armas2 para ver mais armas.");
		return 1;
	}
	if(strcmp(cmd,"/armas2",true) == 0){
		SendClientMessage(playerid, COLOR_LIGHT_RED, 			"Armas - Parte II:");
		SendClientMessage(playerid, COLOR_WHITE,                "9 - Motoserra.");
		SendClientMessage(playerid, COLOR_WHITE,                "10 - Vibrador roxo de duas pontas.");
		SendClientMessage(playerid, COLOR_WHITE,                "11 - Vibrador branco grande.");
		SendClientMessage(playerid, COLOR_WHITE,                "12 - Vibrador branco médio.");
		SendClientMessage(playerid, COLOR_WHITE,                "13 - Vibrador prata pequeno.");
		SendClientMessage(playerid, COLOR_WHITE,                "14 - Flores.");
		SendClientMessage(playerid, COLOR_WHITE,                "15 - Bengala.");
		SendClientMessage(playerid, COLOR_WHITE,                "17 - Bombas de gás.");
		SendClientMessage(playerid, COLOR_LIGHT_RED,            "/armas3 para ver mais armas.");
		return 1;
	}
	if(strcmp(cmd,"/armas3",true) == 0){
		SendClientMessage(playerid, COLOR_LIGHT_RED, 			"Armas - Parte III:");
		SendClientMessage(playerid, COLOR_WHITE,                "23 - 9mm com silenciador.");
		SendClientMessage(playerid, COLOR_WHITE,                "24 - Desert Eagle.");
		SendClientMessage(playerid, COLOR_WHITE,                "25 - Escopeta Calibre 12.");
		SendClientMessage(playerid, COLOR_WHITE,                "27 - Escopeta de Combate.");
		SendClientMessage(playerid, COLOR_WHITE,                "29 - MP5 (Mac 10).");
		SendClientMessage(playerid, COLOR_WHITE,                "30 - AK47.");
		SendClientMessage(playerid, COLOR_WHITE,                "31 - M4.");
		SendClientMessage(playerid, COLOR_WHITE,                "33 - Country Rifle.");
		SendClientMessage(playerid, COLOR_LIGHT_RED,            "Essas são as armas do Virtual Life RPG.");
		return 1;
	}
	if(strcmp(cmd,"/sistskin",true) == 0) {
		SendClientMessage(playerid, COLOR_LIGHT_RED,            "Virtual Life RPG - Sistema de skins:");
		SendClientMessage(playerid, COLOR_WHITE,                "Agora você comprará sua skin na loja, para saber a loja onde é vendida use /skininfo [ID/da/skin]");
		SendClientMessage(playerid, COLOR_WHITE,                "Cada skin tem seu próprio preço também, skins de trabalho não são vendidas, você pode usar a do seu digitando /skintrabalho");
		SendClientMessage(playerid, COLOR_WHITE,                "Aqui vão algumas estatísticas sobre as lojas:");
		SendClientMessage(playerid, COLOR_WHITE,                "Binco: Loja de skins casuais;");
		SendClientMessage(playerid, COLOR_WHITE,                "Sub Urban: Loja de skins de gangues, traficantes e pobres;");
		SendClientMessage(playerid, COLOR_WHITE,                "Pro Laps: Loja de skins esportivas;");
		SendClientMessage(playerid, COLOR_WHITE,                "Victim: Loja de skins diversas;");
		SendClientMessage(playerid, COLOR_WHITE,                "Didier Sachs: Loja de skins formais;");
		SendClientMessage(playerid, COLOR_LIGHT_RED,            "Virtual Life RPG mais que um RPG, UMA VIDA!");
		return 1;
	}
	if(strcmp(cmd,"/sisthorario",true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED, 			"Sistema de horário do Virtual Life RPG:");
	    SendClientMessage(playerid, COLOR_WHITE, 				"Agora sua profissão tem um horário de trabalho, veja-o em /meuhorario.");
	    SendClientMessage(playerid, COLOR_WHITE, 				"Caso esteja fora de seu horário de trabalho, você não ganhará Xpoint quando trabalhar...");
	    SendClientMessage(playerid, COLOR_WHITE, 				"Mas caso esteja no seu horário, você ganhará normalmente.");
	    SendClientMessage(playerid, COLOR_WHITE, 				"Fizemos isso com o objetivo de que você aproveite mais os lazeres daqui!");
	    SendClientMessage(playerid, COLOR_LIGHT_RED, 			"Reload Virtual Life RPG mais que um RPG, UMA VIDA!");
		return 1;
	}
	if(strcmp(cmd, "/sistbanco", true) == 0) {
        SendClientMessage(playerid, COLOR_LIGHT_RED, 			"Sistema de Banco do Reload Virtual Life RpG.");
        SendClientMessage(playerid, COLOR_WHITE, 				"Automático, ao entrar no banco com o comando /meubanco você entrará na fila e logo em seguida.");
        SendClientMessage(playerid, COLOR_WHITE, 				"Aparecerá um menu com a opção a ser escolhida. Digite o valor no chat esse será o valor.");
        SendClientMessage(playerid, COLOR_WHITE, 				"Depositado ou Sacado.");
		SendClientMessage(playerid, COLOR_WHITE, 				"Também no banco você pode fazer empréstimo com o gerente. Sendo disponível um valor X.");
        SendClientMessage(playerid, COLOR_WHITE, 				"O pagamento é obrigatório sendo depois de alguns dias a retomada de bens ou a retirada da conta sem aviso prévio");
        SendClientMessage(playerid, COLOR_LIGHT_RED,  			"Os Bancos estão marcados no Mapa com um cifrão $, são 4 Bancos em Los Santos");
		return 1;
	}
	if(strcmp(cmd,"/sistnegocios",true) == 0){
        SendClientMessage(playerid, COLOR_LIGHT_RED, 			"Sistema de negócios do Virtual Life RpG:");
        SendClientMessage(playerid, COLOR_WHITE, 				"Nosso sistema de negócios é um sistema que faz com que você comece com uma propriedade");
        SendClientMessage(playerid, COLOR_WHITE,        		"com poucos lucros e a evolua contratando/demitindo funcionários, nomeando sócios,");
        SendClientMessage(playerid, COLOR_WHITE,        		"investindo dinheiro nela, e até mesmo você pode trabalhar nela!");
        SendClientMessage(playerid, COLOR_WHITE,        		"Cada propriedade tem seu modo de ganhar lucro e prejuízo.");
		SendClientMessage(playerid, COLOR_WHITE,            	"Para comprar uma propriedade vá até a corretora de propriedades!");
        SendClientMessage(playerid, COLOR_WHITE,        		"Para ver as propriedades e informações sobre elas digite /propriedades");
        SendClientMessage(playerid, COLOR_WHITE,        		"Para ver os comandos de negócios digite /negocioscmds");
        return 1;
	}
	if(strcmp(cmd,"/negocioscmds",true) == 0){
	    SendClientMessage(playerid, COLOR_LIGHT_RED, 			"Comandos de negócios do Reload Virtual Life RpG - Parte I");
	    SendClientMessage(playerid, COLOR_WHITE,        		"/propriedades : Vê as propriedades e as informações delas.");
	    SendClientMessage(playerid, COLOR_WHITE,        		"/comprarpropriedade [propriedade] [valor] : Oferece uma proposta para comprar a propriedade de alguém.");
        SendClientMessage(playerid, COLOR_WHITE,            	"/venderpropriedade [propriedade] : Vende sua propriedade pela metade do valor original.");
		SendClientMessage(playerid, COLOR_WHITE,            	"/nomearsocio [id] [propriedade] : Nomear um sócio na sua propriedade.");
	    SendClientMessage(playerid, COLOR_WHITE,        		"/desnomearsocio [id] [propriedade] : Desnomear um sócio da sua propriedade.");
	    SendClientMessage(playerid, COLOR_WHITE,				"/pedirdesnomeacao [propriedade] : Para pedir desnomeação de sócio de uma propriedade.");
		SendClientMessage(playerid, COLOR_WHITE,            	"/investir [propriedade] [valor] : Investir dinheiro em sua propriedade.");
		SendClientMessage(playerid, COLOR_LIGHT_RED,         	"/negocioscmds2 : Ver mais comandos do sistema de negócios");
	    return 1;
	}
	if(strcmp(cmd,"/negocioscmds2",true) == 0){
	    SendClientMessage(playerid, COLOR_LIGHT_RED, 			"Comandos de negócios do Reload Virtual Life RpG - Parte I");
	    SendClientMessage(playerid, COLOR_WHITE,        		"/contratar [id] [propriedade] : Contratar um jogador.");
	    SendClientMessage(playerid, COLOR_WHITE,        		"/demitir [id] [propriedade] : Demitir um jogador.");
        SendClientMessage(playerid, COLOR_WHITE,				"/pedirdemissao : Para pedir demissão de uma propriedade.");
		SendClientMessage(playerid, COLOR_WHITE,				"/setarsalario [id] [quantidade] : Setar o salário de um funcionário.");
		SendClientMessage(playerid, COLOR_WHITE,				"/funcionarios [propriedade] : Vê a lista de funcionários conectados da propriedade.");
        SendClientMessage(playerid, COLOR_WHITE,				"Para comprar uma propriedade que não possua dono, vá até a Corretora de Propriedades.");
        SendClientMessage(playerid, COLOR_WHITE,				"Além de vender sua propriedade por metade do preço original, você pode esperar que alguém à compre por um preço indeterminado.");
		SendClientMessage(playerid, COLOR_LIGHT_RED,         	"Esses são os comandos de negócios do Reload Virtual Life RPG.");
	    return 1;
	}
	if(strcmp(cmd,"/propriedades",true) == 0){
	    SendClientMessage(playerid, COLOR_LIGHT_RED,         	"Propriedades do Reload Virtual Life RpG:");
	    SendClientMessage(playerid, COLOR_WHITE,        		"1 - Pizzaria (Custo: $90000) : Para ver as informações digite /proppizzaria");
	    SendClientMessage(playerid, COLOR_WHITE,        		"2 - Yellow's'Taxi (Custo: $120000) : Para ver as informações digite /proptaxi");
	    SendClientMessage(playerid, COLOR_WHITE,        		"3 - LuxLimosine (Custo: $140000) : Para ver as informações digite /proplimosine");
		SendClientMessage(playerid, COLOR_WHITE,            	"4 - SecurityLife (Custo: $110000) : Para ver as informações digite /propsecurity");
		SendClientMessage(playerid, COLOR_WHITE,            	"5 - Ammu-Nation (Custo: $150000) : Para ver as informações digite /propweapon");
		SendClientMessage(playerid, COLOR_WHITE,            	"6 - Boate de strip (Custo: $170000) : Para ver as informações digite /propboate");
		SendClientMessage(playerid, COLOR_WHITE,            	"7 - Posto (Custo: $210000) : Para ver as informações digite /propgas");
        SendClientMessage(playerid, COLOR_WHITE,        		"8 - Bar (Custo: $80000) : Para ver as informações digite /propbar");
		SendClientMessage(playerid, COLOR_LIGHT_RED,         	"Para mais propriedades, escreve /propriedades2");
		return 1;
	}
	if(strcmp(cmd,"/propriedades2",true) == 0){
	    SendClientMessage(playerid, COLOR_LIGHT_RED,         	"Propriedades do Reload Virtual Life RpG: Parte 2");
	    SendClientMessage(playerid, COLOR_WHITE,        		"9 - Loga de Customização/Tuning (Custo: $200000) : Para ver as informações digite /propmecanico");
        SendClientMessage(playerid, COLOR_WHITE,        		"10 - Lixão (Custo: $75000) : Para ver as informações digite /proplixao");
        SendClientMessage(playerid, COLOR_WHITE,        		"11 - Fazenda (Custo: $160000) : Para ver as informações digite /propfazenda");
		SendClientMessage(playerid, COLOR_WHITE,            	"12 - COEVL (Custo: $180000) : Para ver as informações digite /propluz");
        SendClientMessage(playerid, COLOR_WHITE,            	"13 - ECTVL (Custo: $160000) : Para ver as informações digite /proptelefone");
        SendClientMessage(playerid, COLOR_WHITE,            	"14 - Concessionária (Custo: $200000) : Para ver as informações digite /propcarros");
        SendClientMessage(playerid, COLOR_WHITE,            	"15 - Imobiliaria (Custo: $200000) : Para ver as informações digite /propimoveis");
        SendClientMessage(playerid, COLOR_WHITE,            	"16 - Cooperativa de pesca (Custo: $140000) : Para ver as informações digite /proppesca");
        SendClientMessage(playerid, COLOR_LIGHT_RED,         	"Essas são as propriedades do Virtual Life RPG.");
		return 1;
	}
	if(strcmp(cmd,"/proppizzaria",true) == 0){
	    SendClientMessage(playerid, COLOR_LIGHT_RED,         	"Pizzaria:");
	    SendClientMessage(playerid, COLOR_WHITE,        		"A pizzaria é uma propriedade onde você contrata entregadores de pizza");
	    SendClientMessage(playerid, COLOR_WHITE,        		"LUCRO = As entregas de pizzas automáticas e não automáticas");
	    SendClientMessage(playerid, COLOR_WHITE,        		"PREJUÍZO = Sálario dos funcionários + os aumentos que você dar para eles");
		return 1;
	}
	if(strcmp(cmd,"/proptaxi",true) == 0){
	    SendClientMessage(playerid, COLOR_LIGHT_RED,         	"Yellow's'Taxi:");
		SendClientMessage(playerid, COLOR_WHITE,        		"A Yellow's'Taxi é uma propriedade onde você contrata taxistas/mototaxistas");
		SendClientMessage(playerid, COLOR_WHITE,        		"LUCRO = Passageiros dos taxistas que chegarem ao destino + entrega de encomendas");
		SendClientMessage(playerid, COLOR_WHITE,        		"PREJUÍZO = Salário dos funcionários + os aumentos que você dar para eles + energia que os GPS gastam");
		return 1;
	}
	if(strcmp(cmd,"/proplimosine",true) == 0){
	    SendClientMessage(playerid, COLOR_LIGHT_RED,         	"LuxLimosine:");
	    SendClientMessage(playerid, COLOR_WHITE,        		"A LuxLimosine é uma propriedade onde você contrata motoristas particulares");
		SendClientMessage(playerid, COLOR_WHITE,        		"LUCRO = Limosines entregues em perfeitos estados (sem amassos, gas completo, etc...)");
		SendClientMessage(playerid, COLOR_WHITE,        		"PREJUÍZO = Salário dos funcionários + os aumentos que você dar para eles + gas/consertos/ das limosines");
		SendClientMessage(playerid, COLOR_WHITE,        		"O seu lucro é o que você gasta com o prejuízo portanto essa é uma propriedade que você precisa contratar ótimos motoristas!");
		SendClientMessage(playerid, COLOR_WHITE,        		"Não contrate motoristas que amassem as limosines, pois estes lhe aumentam o prejuízo!");
		return 1;
	}
	if(strcmp(cmd,"/propsecurity",true) == 0){
	    SendClientMessage(playerid, COLOR_LIGHT_RED,         	"SecurityLife:");
	    SendClientMessage(playerid, COLOR_WHITE,        		"A SecurityLife é uma propriedade onde você contrata seguranças");
	    SendClientMessage(playerid, COLOR_WHITE,        		"LUCRO = Os malotes transportados e dinheiro dos contratos dos seguranças.");
	    SendClientMessage(playerid, COLOR_WHITE,        		"PREJUÍZO = Salário dos funcionários + os aumentos que você dar para eles");
		return 1;
	}
	if(strcmp(cmd,"/propweapon",true) == 0){
	    SendClientMessage(playerid, COLOR_LIGHT_RED,           	"Ammu-Nation:");
	    SendClientMessage(playerid, COLOR_WHITE,        		"A Ammu-Nation é uma propriedade onde você contrata vendedores de armas");
	    SendClientMessage(playerid, COLOR_WHITE,        		"LUCRO = Venda de armas, coletes, bombas relógios, flash's, rojões e camuflagens.");
	    SendClientMessage(playerid, COLOR_WHITE,        		"PREJUÍZO = Salário dos funcionários + os aumentos que você dar para eles");
		return 1;
	}
	if(strcmp(cmd,"/propboate",true) == 0){
	    SendClientMessage(playerid, COLOR_LIGHT_RED,            "Boate de strip:");
	    SendClientMessage(playerid, COLOR_WHITE,        		"A Boate de strip é uma propriedade onde você contrata prostitutas");
	    SendClientMessage(playerid, COLOR_WHITE,        		"LUCRO = Strip-Teases na boate, sexos na cama.");
	    SendClientMessage(playerid, COLOR_WHITE,        		"PREJUÍZO = Salário dos funcionários + os aumentos que você dar para eles");
		return 1;
	}
	if(strcmp(cmd,"/propgas",true) == 0){
	    SendClientMessage(playerid, COLOR_LIGHT_RED,            "Posto:");
	    SendClientMessage(playerid, COLOR_WHITE,        		"O Posto é uma propriedade onde você contrata frentistas");
	    SendClientMessage(playerid, COLOR_WHITE,        		"LUCRO = Abastecimento/Venda de gasolina.");
	    SendClientMessage(playerid, COLOR_WHITE,        		"PREJUÍZO = Salário dos funcionários + os aumentos que você dar para eles");
		return 1;
	}
	if(strcmp(cmd,"/propbar",true) == 0){
	    SendClientMessage(playerid, COLOR_LIGHT_RED,            "Bar:");
	    SendClientMessage(playerid, COLOR_WHITE,        		"O Bar é uma propriedade onde você contrata barmans");
	    SendClientMessage(playerid, COLOR_WHITE,        		"LUCRO = Venda de bebidas e lanches dos bares e barmans.");
	    SendClientMessage(playerid, COLOR_WHITE,        		"PREJUÍZO = Salário dos funcionários + os aumentos que você dar para eles");
		return 1;
	}
	if(strcmp(cmd,"/propmecanico",true) == 0){
	    SendClientMessage(playerid, COLOR_LIGHT_RED,            "Loja de Customização/Tuning:");
	    SendClientMessage(playerid, COLOR_WHITE,        		"A Loja de Customização é uma propriedade onde você contrata mecânicos");
	    SendClientMessage(playerid, COLOR_WHITE,        		"LUCRO = Consertos, pinturas e mudanças de placas da loja de customização e aplicados(as) por um mecânico");
	    SendClientMessage(playerid, COLOR_WHITE,        		"PREJUÍZO = Salário dos funcionários + os aumentos que você dar para eles");
		return 1;
	}
	if(strcmp(cmd,"/proplixao",true) == 0){
	    SendClientMessage(playerid, COLOR_LIGHT_RED,         	"Lixão:");
	    SendClientMessage(playerid, COLOR_WHITE,        		"O Lixão é uma propriedade onde você contrata lixeiros");
	    SendClientMessage(playerid, COLOR_WHITE,        		"LUCRO = Depósito de lixos coletados");
	    SendClientMessage(playerid, COLOR_WHITE,        		"PREJUÍZO = Salário dos funcionários + os aumentos que você dar para eles");
		return 1;
	}
	if(strcmp(cmd,"/propfazenda",true) == 0){
	    SendClientMessage(playerid, COLOR_LIGHT_RED,         	"Fazenda:");
	    SendClientMessage(playerid, COLOR_WHITE,        		"A Fazenda é uma propriedade onde você contrata agricultores");
	    SendClientMessage(playerid, COLOR_WHITE,        		"LUCRO = Vendas de leite e milho");
	    SendClientMessage(playerid, COLOR_WHITE,        		"PREJUÍZO = Salário dos funcionários + os aumentos que você dar para eles");
		return 1;
	}
    if(strcmp(cmd,"/propcarros",true) == 0){
    	SendClientMessage(playerid, COLOR_LIGHT_RED,            "Concessionária:");
    	SendClientMessage(playerid, COLOR_WHITE,            	"A Concessionária é uma propriedade onde você contrata vendedores de veículo!");
    	SendClientMessage(playerid, COLOR_WHITE,            	"LUCRO = Carros vendidos na concessionária e por seus funcionários");
    	SendClientMessage(playerid, COLOR_WHITE,            	"PREJUÍZO = Salário dos funcionários + pagamento de consertos dos veículos da concessionária + pagamento para empresas de carros semanal");
    	SendClientMessage(playerid, COLOR_WHITE,            	"Para ver as empresas de carros existentes digite /empresascarros");
   	 	return 1;
	}
	if(strcmp(cmd,"/propimoveis",true) == 0){
    	SendClientMessage(playerid, COLOR_LIGHT_RED,            "Imobiliaria:");
    	SendClientMessage(playerid, COLOR_WHITE,            	"A Imobiliaria é uma propriedade onde você contrata corretores de imóveis!");
    	SendClientMessage(playerid, COLOR_WHITE,            	"LUCRO = Imóveis vendidos por seus funcionários + hospedagens de hotéis");
    	SendClientMessage(playerid, COLOR_WHITE,            	"PREJUÍZO = Salário dos funcionários + pagamento para os hotéis semanal");
    	return 1;
	}
    if(strcmp(cmd,"/propluz",true) == 0){
    	SendClientMessage(playerid, COLOR_LIGHT_RED,            "COEVL:");
    	SendClientMessage(playerid, COLOR_WHITE,            	"A COEVL é uma propriedade onde você não precisa contratar ninguém!");
    	SendClientMessage(playerid, COLOR_WHITE,            	"LUCRO = Contas de luz que os jogadores pagarem");
    	SendClientMessage(playerid, COLOR_WHITE,            	"PREJUÍZO = Quedas de luz (pagamento aos utilizadores) + pagamento do conserto");
    	SendClientMessage(playerid, COLOR_WHITE,            	"Se você for dono/sócio dessa propriedade poderá liberar a luz da casa dos jogadores basta digitar /liberarluz [id]");
    	return 1;
	}
	if(strcmp(cmd,"/proptelefone",true) == 0){
	    SendClientMessage(playerid, COLOR_LIGHT_RED,            "ECTVL:");
	    SendClientMessage(playerid, COLOR_WHITE,            	"A ECTVL é uma propriedade onde você não precisa contratar ninguém!");
	    SendClientMessage(playerid, COLOR_WHITE,            	"LUCRO = Contas de telefone que os jogadores pagarem");
	    SendClientMessage(playerid, COLOR_WHITE,            	"PREJUÍZO = Quedas de linha telefônica (pagamento aos utilizadores) + pagamento do conserto");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Se você for dono/sócio dessa propriedade poderá liberar o telefone da casa dos jogadores basta digitar /liberartelefone [id]");
   	 	return 1;
	}
	if(strcmp(cmd, "/proppesca", true) == 0) {
    	SendClientMessage(playerid, COLOR_LIGHT_RED,            "Cooperativa de pesca:");
	    SendClientMessage(playerid, COLOR_WHITE,            	"A Cooperativa de pesca é uma propriedade onde você contrata pescadores!");
	    SendClientMessage(playerid, COLOR_WHITE,            	"LUCRO = Peixes pescados, prejuízos recebidos e iscas compradas por jogadores de outra profissão");
	    SendClientMessage(playerid, COLOR_WHITE,            	"PREJUÍZO = Salário dos funcionários + compra de peixe dos jogadores de outra profissão");
   	 	return 1;
	}
	if(strcmp(cmd, "/empresascarros", true) == 0) {
    	SendClientMessage(playerid, COLOR_LIGHT_RED,            "Numeração - Nome - (Preço mínimo até Preço máximo):");
    	SendClientMessage(playerid, COLOR_WHITE,            	"1 - Life's'autos ($5000 até $7000)");
    	SendClientMessage(playerid, COLOR_WHITE,            	"2 - Virtual Car & Cia ($3500 até $4000)");
    	SendClientMessage(playerid, COLOR_WHITE,            	"3 - Your Life's' Car ($2000 até $3000");
    	return 1;
	}
	if(strcmp(cmd, "/jornalinfo", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED,            "Informações de jornal:");
	    SendClientMessage(playerid, COLOR_WHITE,            	"/criarjornal [titulo do jornal] : Criar seu jornal");
		SendClientMessage(playerid, COLOR_WHITE,            	"/escreverjornal [caderno] [linha] [texto] : Escrever no jornal.");
		SendClientMessage(playerid, COLOR_WHITE,            	"/lerjornal [titulo do jornal] [caderno] : Ler um jornal.");
		SendClientMessage(playerid, COLOR_WHITE,            	"/excluirjornal : Excluir seu jornal.");
		SendClientMessage(playerid, COLOR_LIGHT_RED,            "/cadernos : Para ver os cadernos do jornal.");
		SendClientMessage(playerid, COLOR_LIGHT_RED,            "Para ver todos os Jornais feitos digite: /verjornais.");
		return 1;
	}
	if(strcmp(cmd, "/meuhorario", true) == 0) {
	    new string[128];
	    SendClientMessage(playerid, COLOR_LIGHT_RED, "Seu horário:");
		if(HorarioTrabalho[pStats[playerid][Prof]][2] != HorarioTrabalho[pStats[playerid][Prof]][3]){
	    	format(string,sizeof(string),"Segunda Feira: Das %d às %d",HorarioTrabalho[pStats[playerid][Prof]][2],HorarioTrabalho[pStats[playerid][Prof]][3]);
		}
		else{
	    	format(string,sizeof(string),"Segunda Feira: Dia de folga");
		}
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    if(HorarioTrabalho[pStats[playerid][Prof]][4] != HorarioTrabalho[pStats[playerid][Prof]][5]){
	    	format(string,sizeof(string),"Terça Feira: Das %d às %d",HorarioTrabalho[pStats[playerid][Prof]][4],HorarioTrabalho[pStats[playerid][Prof]][5]);
		}
		else{
		    format(string,sizeof(string),"Terça Feira: Dia de folga");
		}
		SendClientMessage(playerid, COLOR_WHITE, string);
		if(HorarioTrabalho[pStats[playerid][Prof]][6] != HorarioTrabalho[pStats[playerid][Prof]][7]){
			format(string,sizeof(string),"Quarta Feira: Das %d às %d",HorarioTrabalho[pStats[playerid][Prof]][6],HorarioTrabalho[pStats[playerid][Prof]][7]);
		}
		else{
		    format(string,sizeof(string),"Quarta Feira: Dia de folga");
		}
		SendClientMessage(playerid, COLOR_WHITE, string);
		if(HorarioTrabalho[pStats[playerid][Prof]][8] != HorarioTrabalho[pStats[playerid][Prof]][9]){
 			format(string,sizeof(string),"Quinta Feira: Das %d às %d",HorarioTrabalho[pStats[playerid][Prof]][8],HorarioTrabalho[pStats[playerid][Prof]][9]);
		}
		else{
		    format(string,sizeof(string),"Quinta Feira: Dia de folga");
		}
		SendClientMessage(playerid, COLOR_WHITE, string);
        if(HorarioTrabalho[pStats[playerid][Prof]][10] != HorarioTrabalho[pStats[playerid][Prof]][11]){
	    	format(string,sizeof(string),"Sexta Feira: Das %d às %d",HorarioTrabalho[pStats[playerid][Prof]][10],HorarioTrabalho[pStats[playerid][Prof]][11]);
		}
		else{
            format(string,sizeof(string),"Sexta Feira: Dia de folga");
		}
		SendClientMessage(playerid, COLOR_WHITE, string);
		if(HorarioTrabalho[pStats[playerid][Prof]][12] != HorarioTrabalho[pStats[playerid][Prof]][13]){
	    	format(string,sizeof(string),"Sábado: Das %d às %d",HorarioTrabalho[pStats[playerid][Prof]][12],HorarioTrabalho[pStats[playerid][Prof]][13]);
		}
		else{
	    	format(string,sizeof(string),"Sábado: Dia de folga");
		}
		SendClientMessage(playerid, COLOR_WHITE, string);
		if(HorarioTrabalho[pStats[playerid][Prof]][0] != HorarioTrabalho[pStats[playerid][Prof]][1]){
	    	format(string,sizeof(string),"Domingo: Das %d às %d",HorarioTrabalho[pStats[playerid][Prof]][0],HorarioTrabalho[pStats[playerid][Prof]][1]);
		}
		else{
		    format(string,sizeof(string),"Domingo: Dia de folga");
		}
		SendClientMessage(playerid, COLOR_WHITE, string);
	    return 1;
	}
	if(strcmp(cmd, "/meuskin", true) == 0) {
	    SendClientMessage(playerid, COLOR_CONTRABANDISTA, 		"ATENÇÃO:");
	    SendClientMessage(playerid, COLOR_WHITE,            	"Nosso sistema de skins mudou, para obter informações digite /sistskin , Obrigado!");
	    return 1;
	}
    if(strcmp(cmd, "/profs", true) == 0) {
    	SendClientMessage(playerid, COLOR_BLUE, 				"-------------------------------------- A T E N Ç Ã O --------------------------------------");
		SendClientMessage(playerid, COLOR_WHITE, 				"Não sabemos em qual Parte do Virtual Life RPG você viu esse comando.");
		SendClientMessage(playerid, COLOR_WHITE, 				"Então, é bom ler TODOS os comandos, sistemas e regras para entender melhor, pois");
		SendClientMessage(playerid, COLOR_WHITE, 				"esse RPG é diferente, e que tudo aqui é novo. Leia os comandos: /ajuda.");
		SendClientMessage(playerid, COLOR_WHITE, 				"OBS: Profissões por Level!");
		return 1;
	}
    if(strcmp(cmd, "/profissoes", true) == 0){
        new listid = strval(strtok(cmdtext,idx)), str[128];
        new maxlist = (sizeof Profissoes - 1) / 8;
		new x = (sizeof Profissoes - 1) % 8;
        if(x != 0) maxlist++;
        if(listid < 1 || listid > maxlist)
        {
            format(str, sizeof str, "USO: /profissoes [1-%d]", maxlist);
            SendClientMessage(playerid, COLOR_GRAY, str);
            return 1;
        }
		format(str, sizeof str, "Profissões do Virtual Life RPG - Parte %d:", listid);
		SendClientMessage(playerid, COLOR_LIGHT_RED, str);
		new limit = (listid * 8) + 1;
		if(limit > sizeof Profissoes) limit = sizeof Profissoes;
		for(new p = ((listid - 1) * 8) + 1; p < limit; p++)
		{
		    format(str, sizeof str, "[Level: %d] %s - Xpoints para upar: %d - Salário: $%d,00 dólares", Profissoes[p][ProfLevel], Profissoes[p][ProfName], Profissoes[p][ProfXpoint], Profissoes[p][ProfPay]);
			SendClientMessage(playerid, Profissoes[p][ProfColor], str);
		}
		if(listid == maxlist)
		{
		    SendClientMessage(playerid, COLOR_LIGHT_RED, "Essas são as profissões do Virtual Life RPG.");
		}
		else
		{
			format(str, sizeof str, "Para ver mais profissões digite /profissoes %d", listid + 1);
			SendClientMessage(playerid, COLOR_LIGHT_RED, str);
		}
		return 1;
    }
    if(strcmp(cmd, "/cadernos", true) == 0){
	    SendClientMessage(playerid, COLOR_LIGHT_RED, 			"Virtual Life RPG - Cadernos:");
	    SendClientMessage(playerid, COLOR_WHITE,				"- Esportes");
	    SendClientMessage(playerid, COLOR_WHITE, 				"- Homicidios");
	    SendClientMessage(playerid, COLOR_WHITE, 				"- Mercadorias");
	    SendClientMessage(playerid, COLOR_WHITE, 				"- Empresas");
	    SendClientMessage(playerid, COLOR_WHITE, 				"- Outros");
	    return 1;
	}
	if(strcmp(cmd, "/regras1", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED, 			"  REGRAS - Reload Virtual Life RpG para Jogadores e Administradores. PARTE I -");
        SendClientMessage(playerid, COLOR_JUIZ,					"  1º Não é permitido o uso de cheats, trapaças, para jogadores INCLUSIVE ADMINS.");
        SendClientMessage(playerid, COLOR_JUIZ, 				"  2º Nenhum jogador pode se apossar de algum veículo sem ter pago pelo mesmo.");
        SendClientMessage(playerid, COLOR_JUIZ, 				"  3º É necessária habilitação para dirigir, e a compra de carros é possível somente");
        SendClientMessage(playerid, COLOR_JUIZ, 				"  se o jogador tiver uma casa.");
    	SendClientMessage(playerid, COLOR_JUIZ, 				"  4º Nenhum jogador pode possuir mais de 4 veículos, afim de não pesar o mode.");
        SendClientMessage(playerid, COLOR_JUIZ, 				"  5º Valores de casas: $5000, $10000, $15000, $20000, $30000, $40000, $60000, $80000, $100000, $150000, $175000 e $200000.");
        SendClientMessage(playerid, COLOR_JUIZ, 				"  6º Valores dos carros: vide tabela padrão.");
        SendClientMessage(playerid, COLOR_LIGHT_RED, 			"  Veja mais regras em /regras2.");
		return 1;
	}
	if(strcmp(cmd, "/regras2", true) == 0) {
        SendClientMessage(playerid, COLOR_LIGHT_RED, 			"  REGRAS - Reload Virtual Life RpG para Jogadores e Administradores. PARTE II -");
        SendClientMessage(playerid, COLOR_JUIZ, 				"  7º Deve-se respeitar a lógica do RPG, não é permitido um número desequilibrado de profissões.");
        SendClientMessage(playerid, COLOR_JUIZ, 				"  8º A não obediência destas regras dispostas implicará desde advertência à exclusão permanente do servidor. ");
        SendClientMessage(playerid, COLOR_JUIZ, 				"  9º Skin para: Policiais, Advogados, Delegado e Juiz sao predeterminadas, alterações somente para: Cop 280 à 285.Demais: 147,164,166,37. ");
		SendClientMessage(playerid, COLOR_JUIZ, 				"  10º Nenhum jogador poderá setar a casa de outro no ar, isso poderá acarretar na perca do emprego e até mesmo em banimento do servidor.");
		SendClientMessage(playerid, COLOR_JUIZ, 				"  11º Nenhum jogador deve sequer tentar burlar algum sistema, isso poderá causar seu banimento.");
		SendClientMessage(playerid, COLOR_WHITE,  				"  A finalidade das regras são afim de garantir organização, e claro, diversão no mode Reload Virtual Life RpG.");
		return 1;
	}
	if(strcmp(cmd, "/acoes", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED,  			"Ações do Reload Virtual Life RPG:");
	    SendClientMessage(playerid, COLOR_WHITE,                "/render : Render-se.");
	    SendClientMessage(playerid, COLOR_WHITE,                "/falar : Falar.");
	    SendClientMessage(playerid, COLOR_WHITE,                "/dancar [1-3] : Dançar.");
	    SendClientMessage(playerid, COLOR_WHITE,                "/sentar [1-7] : Sentar.");
	    SendClientMessage(playerid, COLOR_WHITE,                "/deitar [1-6] : Deitar.");
	    SendClientMessage(playerid, COLOR_WHITE,                "/caminhar [1-9] : Caminhar.");
	    SendClientMessage(playerid, COLOR_WHITE,                "/correr [1-5] : Correr.");
	    SendClientMessage(playerid, COLOR_WHITE,                "/exibir-se : Se exibir.");
	    SendClientMessage(playerid, COLOR_LIGHT_RED,            "/acoes2 para mais ações.");
		return 1;
	}
	if(strcmp(cmd, "/acoes2", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED,  			"Ações do Reload Virtual Life RPG - Parte II:");
	    SendClientMessage(playerid, COLOR_WHITE,                "/crack [1-4] : Animações de crack.");
	    SendClientMessage(playerid, COLOR_WHITE,                "/apontararma : Apontar sua arma para alguém.");
	    SendClientMessage(playerid, COLOR_WHITE,                "/parar : Parar qualquer animação.");
	    SendClientMessage(playerid, COLOR_LIGHT_RED,            "Reload Virtual Life RPG, mais que um RPG, UMA VIDA!");
		return 1;
	}

	if(strcmp(cmd, "/sisthotel", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED, 			"Virtual Life RPG - Hotel:");
    	SendClientMessage(playerid, COLOR_WHITE, 				"O hotel serve como moradia temporária. Para ficar hospedado digite /hotel");
        SendClientMessage(playerid, COLOR_WHITE, 				"O custo da hospedagem é $1500 dolares, poderá ficar hospedado até ter");
        SendClientMessage(playerid, COLOR_WHITE, 				"condições financeiras para poder comprar primeiramente uma casa e logo em seguida um carro.");
        SendClientMessage(playerid, COLOR_WHITE, 				"Caso queira sair de um hotel, digite /seretirarhotel");
		SendClientMessage(playerid, COLOR_WHITE, 				"OBS: Quando estiver em um hotel pagará $200 dólares semanalmente como despesa.");
        return 1;
    }
    if(strcmp(cmd, "/dicaspublicar", true) == 0) {
        SendClientMessage(playerid, COLOR_LIGHT_RED, 			"Virtual Life RPG - Dicas para publicar:");
        SendClientMessage(playerid, COLOR_WHITE, 				"CORES: '~w~ blabla' no qual o 'blabla' sairá em branco!");
        SendClientMessage(playerid, COLOR_WHITE, 				"Cores existentes: ~y~ Amarelo , ~b~ Azul , ~g~ Verde , ~p~ Roxo , ~l~ Preto , ~w~ Branco , ~r~ Vermelho");
		SendClientMessage(playerid, COLOR_WHITE, 				"CLAREAR: use ~h~ para clarear a cor, Exemplo: '~h~~b~ blabla' no qual o 'blabla' sairá em azul claro!");
		return 1;
	}
    if(strcmp(cmd, "/veiculos", true) == 0) {
		SendClientMessage(playerid, COLOR_WHITE, 				"Veículos do Reload Virtual Life RpG -  escolha um estilo de carro");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/sedans     -    /aereos");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/4portas    -    /barcos");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/muscle     -    /lowriders");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/esportivos -    /recreacionais");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/corrida    -    /motos");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/pesados    -    /bikes");
		return 1;
	}
    if(strcmp(cmd, "/sedans", true) == 0) {
		SendClientMessage(playerid, COLOR_WHITE, 				"Sedans do Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_WHITE, 				"ID   -  Nome do Carro  -  Preço");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/587 - Euros $60000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/602 - Alpha $75000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS,   "/562 - Elegy $130000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS,   "/565 - Flash $130000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/517 - Majestic $35000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/496 - Blista Compact $35000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/439 - Stallion $40000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/410 - Manana $15000");
		return 1;
	}
    if(strcmp(cmd, "/aereos", true) == 0) {
		SendClientMessage(playerid, COLOR_WHITE, 				"Aéreos do Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_WHITE, 				"ID   -  Nome do Carro  -  Preço");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/487 - Maverick $750000");
		return 1;
	}
    if(strcmp(cmd, "/4portas", true) == 0) {
		SendClientMessage(playerid, COLOR_WHITE, 				"4 Portas do Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_WHITE, 				"ID   -  Nome do Carro  -  Preço");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/409 - Stretch $120000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/445 - Admiral $35000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/405 - Sentinel $65000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/507 - Elegant $47000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/516 - Nebula $40000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/540 - Vincent $40000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/550 - Sunrise $90000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/551 - Merit $83000");
		return 1;
	}
    if(strcmp(cmd, "/barcos", true) == 0) {
		SendClientMessage(playerid, COLOR_WHITE, 				"Barcos do Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_WHITE, 				"ID   -  Nome do Barco  -  Preço");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/493 - Jetmax $400000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/473 - Dinghy $12000");
		return 1;
	}
	if(strcmp(cmd, "/muscle", true) == 0) {
		SendClientMessage(playerid, COLOR_WHITE, 				"Muscles do Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_WHITE, 				"ID   -  Nome do Carro  -  Preço");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/402 - Buffalo $185000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/603 - Phoenix $96000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/475 - Sabre $21500");
		return 1;
	}
	if(strcmp(cmd, "/esportivos", true) == 0) {
		SendClientMessage(playerid, COLOR_WHITE, 				"Esportivos do Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_WHITE, 				"ID   -  Nome do Carro  -  Preço");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/560 - Sultan  $130000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/559 - Jester  $95000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/429 - Banshee $270000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/533 - Feltzer $55000");
		return 1;
	}
	if(strcmp(cmd, "/corrida", true) == 0) {
		SendClientMessage(playerid, COLOR_WHITE, 				"Carros Esportivos e de Corrrida do Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_WHITE, 				"ID   -  Nome do Carro  -  Preço");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/411 - Infernus $250000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/451 - Turismo $200000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/541 - Bullet $190000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/415 - Cheetah $150000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/480 - Comet $95000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/506 - Super GT $220000");
		return 1;
	}
   	if(strcmp(cmd, "/recreacionais", true) == 0) {
		SendClientMessage(playerid, COLOR_WHITE, 				"Veículos Recreacionais do Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_WHITE, 				"ID   -  Nome do Carro  -  Preço");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/424 - BF Injection $25000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/471 - Quad $16000");
		return 1;
	}
	if(strcmp(cmd, "/pesados", true) == 0) {
		SendClientMessage(playerid, COLOR_WHITE, 				"Veículos Pesados do Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_WHITE, 				"ID   -  Nome do Carro  -  Preço");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/515 - RoadTrain $73000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/400 - Landstalker $45000");
		return 1;
	}
	if(strcmp(cmd, "/lowriders", true) == 0) {
		SendClientMessage(playerid, COLOR_WHITE, 				"Low Riders do Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_WHITE, 				"ID   -  Nome do Carro  -  Preço");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/535 - Slamvan $32000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/536 - Blade $37000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/534 - Remington $55000");
		return 1;
	}
	if(strcmp(cmd, "/motos", true) == 0) {
		SendClientMessage(playerid, COLOR_WHITE, 				"Motos do Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_WHITE, 				"ID   -  Nome do Carro  -  Preço");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/522 - NRG500  $150000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/521 - FCR-900 $60000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/461 - PCJ-600 $18000");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/463 - Freeway $35000 ");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/581 - BF-400 $25000 ");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/468 - Sanchez $20000 ");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/462 - Faggio $4000");
		return 1;
	}
	if(strcmp(cmd, "/bikes", true) == 0) {
		SendClientMessage(playerid, COLOR_WHITE, 				"Bikes do Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_WHITE, 				"ID   -  Nome do Carro  -  Preço");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/581 - BMX  $100");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/509 - Bike $80");
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, 	"/510 - Mountain Bike $120");
	}
	if(strcmp(cmd, "/carteiras", true) == 0) {
	    SendClientMessage(playerid, COLOR_WHITE,       			"Habilitações:");
	    SendClientMessage(playerid, COLOR_INSTRUTOR,   			"Terrestre - Sem teste: $1200 | Com teste: $800");
	    SendClientMessage(playerid, COLOR_INSTRUTOR,   			"Naútica - Sem teste: $1600 | Com teste: $1200");
	    SendClientMessage(playerid, COLOR_INSTRUTOR,   			"Aérea - Sem teste: $2400 | Com teste: $2000");
	    SendClientMessage(playerid, COLOR_WHITE,       			"Reload Virtual Life RpG mais que um RPG, UMA VIDA!");
	    return 1;
	}
    if(strcmp(cmd, "/nextvehicle", true) == 0) {
        new string[256];
        VehicleToView[playerid]++;
		SetPlayerCameraPos(playerid,vStats[VehicleToView[playerid]][CarPosX]+20, vStats[VehicleToView[playerid]][CarPosY], vStats[VehicleToView[playerid]][CarPosZ]);
		SetPlayerCameraLookAt(playerid,vStats[VehicleToView[playerid]][CarPosX], vStats[VehicleToView[playerid]][CarPosY], vStats[VehicleToView[playerid]][CarPosZ]);
		SetPlayerPos(playerid,vStats[VehicleToView[playerid]][CarPosX]+20, vStats[VehicleToView[playerid]][CarPosY], vStats[VehicleToView[playerid]][CarPosZ]+30);
		format(string,sizeof(string),"Você esta no %d veiculo",VehicleToView[playerid]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
    if(strcmp(cmd, "/lastvehicle", true) == 0) {
        new string[256];
        VehicleToView[playerid]--;
		SetPlayerCameraPos(playerid,vStats[VehicleToView[playerid]][CarPosX]+20, vStats[VehicleToView[playerid]][CarPosY], vStats[VehicleToView[playerid]][CarPosZ]);
		SetPlayerCameraLookAt(playerid,vStats[VehicleToView[playerid]][CarPosX], vStats[VehicleToView[playerid]][CarPosY], vStats[VehicleToView[playerid]][CarPosZ]);
		SetPlayerPos(playerid,vStats[VehicleToView[playerid]][CarPosX]+20, vStats[VehicleToView[playerid]][CarPosY], vStats[VehicleToView[playerid]][CarPosZ]+30);
		format(string,sizeof(string),"Você esta no %d veiculo",VehicleToView[playerid]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	if(strcmp(cmd,"/desativarterminais",true)==0){
	    if(pStats[playerid][Prof] != MOTORISTA_DE_ONIBUS && !IsPlayerAdmin(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão!");
		    return 1;
		}
		if(RaceCheckpointStatus[playerid] != TERMINAL)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Seus terminais não estão ativados, para ativar use \"/terminais\"");
			return 1;
		}
		TerminalCorrida[playerid] = 0;
		RaceCheckpointStatus[playerid] = RNONE;
		DisablePlayerRaceCheckpoint(playerid);
		SendClientMessage(playerid, COLOR_MOTORISTA_DE_ONIBUS, "Terminais desativados.");
		return 1;
	}
	if(strcmp(cmd,"/terminais",true)==0){
		if(pStats[playerid][Prof] != MOTORISTA_DE_ONIBUS && !IsPlayerAdmin(playerid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão!");
		    return 1;
		}
		if(RaceCheckpointStatus[playerid] == TERMINAL)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Seus terminais já estão ativados, siga o CheckPoint no radar!");
			return 1;
		}
		if(!IsPlayerInAnyVehicle(playerid) || !IsBus(GetPlayerVehicleID(playerid)))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um ônibus da Companhia de Transportes Públicos.");
			return 1;
		}
		SendClientMessageToAll(COLOR_MOTORISTA_DE_ONIBUS, " ");
		SendClientMessageToAll(COLOR_MOTORISTA_DE_ONIBUS, "[BUS] O Onibus da Companhia de Transportes Públicos entrou em circulação.");
		TerminalCorrida[playerid] = 0;
		RaceCheckpointStatus[playerid] = TERMINAL;
		SetPlayerRaceCheckpoint(playerid,1,TerminaisBusao[0][tX],TerminaisBusao[0][tY],TerminaisBusao[0][tZ],0.0,0.0,0.0,10.0);
		SendClientMessage(playerid, COLOR_MOTORISTA_DE_ONIBUS, "Circuito iniciado, vá até os terminais, siga os CheckPoints no radar.");
		return 1;
	}

	if(strcmp(cmd,"/coletarlixo",true)==0){
	    if(pStats[playerid][Prof] == LIXEIRO){
	        if(CheckpointStatus[playerid] == COLETANDO_LIXO){
				SendClientMessage(playerid,COLOR_GRAY,"Você já está na missão de coleção de lixo!");
				return 1;
			}
			else {
				SendClientMessage(playerid,COLOR_LIXEIRO,"A sua missão agora é:");
				SendClientMessage(playerid,COLOR_LIXEIRO,"Colete os resíduos de 10 lixeiras e em seguida,");
				SendClientMessage(playerid,COLOR_LIXEIRO,"transporte o caminhão até o lixão e deposite o lixo lá");
				SendClientMessage(playerid,COLOR_LIXEIRO,"com o comando /lixao.");
				CheckpointStatus[playerid] = COLETANDO_LIXO;
				new randtrash = random(37);
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid,LixeirasCheckpoints[randtrash][0],LixeirasCheckpoints[randtrash][1],LixeirasCheckpoints[randtrash][2],3.0);
				return 1;
			}
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Apenas lixeiros podem utilizar esse comando.");
			return 1;
		}
	}
	if(strcmp(cmd,"/pararcoletalixo",true)==0){
	    if(CheckpointStatus[playerid] != COLETANDO_LIXO){
			SendClientMessage(playerid, COLOR_GRAY, "Você não está na missão de coleção de lixo!");
			return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_LIXEIRO, "Missão cancelada!");
		    CheckpointStatus[playerid] = NONE;
		    DisablePlayerCheckpoint(playerid);
		    return 1;
		}
	}
	if(strcmp(cmd,"/lixao",true)==0){
	    new string[128];
	    if(pStats[playerid][Prof] == LIXEIRO){
	        if(CheckpointStatus[playerid] != COLETANDO_LIXO){
				SendClientMessage(playerid,COLOR_GRAY,"Você não está na missão de coleta de lixo!");
				return 1;
			}
		    if(LixoColetado[playerid] < 10){
		        SendClientMessage(playerid,COLOR_GRAY,"Você não tem lixo suficiente para descarregar.");
		        return 1;
		    }
   			if(PlayerArea[playerid] != AreaLixao){
			    SendClientMessage(playerid,COLOR_GRAY,"Você não está em um lixão!");
			    return 1;
			}
			if(!IsTrashmaster(GetPlayerVehicleID(playerid))){
			    SendClientMessage(playerid,COLOR_GRAY,"Você não está em um caminhão Trashmaster!");
			    return 1;
		    }
		    DisablePlayerCheckpoint(playerid);
		    SendClientMessage(playerid,COLOR_LIXEIRO,"Missão cumprida!");
		    format(string,sizeof(string),"Você recebeu $%d. Para continuar digite /coletarlixo.", 20 * LixoColetado[playerid]);
		    SendClientMessage(playerid, COLOR_LIXEIRO, string);
 		    Pay(playerid, 20 * LixoColetado[playerid]);
		    CheckpointStatus[playerid] = NONE;
            LixoColetado[playerid] = 0;
		 	return 1;
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Apenas lixeiros podem utilizar esse comando.");
		    return 1;
		}
	}

	if(strcmp(cmd,"/maisvirtual",true) == 0){
		if(Logado[playerid] == 1 && pStats[playerid][HistoriaFeita] == 1 && pStats[playerid][Preso] == 0 && CheckpointStatus[playerid] == NONE){
			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_LIGHT_RED, " ");
			SendClientMessage(playerid,COLOR_TITULO_AVISO, "|=========================| Virtual Life RPG informa: |=========================|");
			if(ValorAlgoMais==0){
				SendClientMessage(playerid,COLOR_AVISO, "Para comprar 1 veículo você tem duas opções:");
				SendClientMessage(playerid,COLOR_AVISO, "1º Ir na revendedora de veículos. ID: 32.");
				SendClientMessage(playerid,COLOR_AVISO, "2º Ou ver se tem algum vendedor de carros ONLINE.");
				SendClientMessage(playerid,COLOR_INFO_AVISO, "/veiculos = Valores dos carros.");
			}
			else if(ValorAlgoMais==1){
				SendClientMessage(playerid,COLOR_AVISO, "O Chat Global foi desabilitado, agora você terá que adquirir um CELULAR.");
				SendClientMessage(playerid,COLOR_AVISO, "Isso mesmo, vá na Loja de Utilidades ID: 25. Compre o Celular e a Agenda.");
				SendClientMessage(playerid,COLOR_AVISO, "Lembrando é necessária a recarga do celular.");
			}
			else if(ValorAlgoMais==2){
				SendClientMessage(playerid,COLOR_AVISO, "No Virtual Life RPG você tem como entrar na sua casa.");
				SendClientMessage(playerid,COLOR_AVISO, "Poderá convidar, tomar banho, urinar, fazer festas, comer, guardar dinheiro, armas, drogas...");
				SendClientMessage(playerid,COLOR_AVISO, "Para ter essa comodidade, compre os eletrodomésticos básicos: Fogão, Geladeira, TV, Rádio, Computador, Cofre, Guarda-Roupas.");
				SendClientMessage(playerid,COLOR_INFO_AVISO,  "Para mais detalhes: /infocasa, /sistcofre, /sisteletro.");
			}
			else if(ValorAlgoMais==3){
				SendClientMessage(playerid,COLOR_AVISO, "Aconselhamos que veja todos os nossos comandos, perguntas sem nexo");
				SendClientMessage(playerid,COLOR_AVISO, "Será advertido por não ter lido: /comandos até /comandos15.");
			}
			else if(ValorAlgoMais==5){
				SendClientMessage(playerid,COLOR_AVISO, "Insatisfeito com algum jogador? Ele lhe insultou e você quer saber o que os outros jogadores acham?");
				SendClientMessage(playerid,COLOR_AVISO, "Seus problemas acabaram! Você pode kickar um jogador do servidor. /votekick [id] [motivo]");
			}
			else if(ValorAlgoMais==6){
				SendClientMessage(playerid,COLOR_AVISO, "É proibido o Uso de God Mod, Money Hack, Car's Fly, Weapon Cheat.");
				SendClientMessage(playerid,COLOR_AVISO, "Sua conta será banida e seu nick BLOQUEADO.");
			}
			else if(ValorAlgoMais==7){
			   	SendClientMessage(playerid,COLOR_AVISO, "Você trabalha em função da hora do jogo. Então fique ligado: /dia");
			   	SendClientMessage(playerid,COLOR_AVISO, "Veja seu horário de trabalho: /meuhorario.");
			}
			else if(ValorAlgoMais==8){
			   	SendClientMessage(playerid,COLOR_AVISO, "ATENÇÃO!! Não faça pergunta. Aonde fica isso, aonde fica aquilo.");
				SendClientMessage(playerid,COLOR_AVISO, "Use o GPS! Todos os Locais ultilizados no gamemode está aí:");
			    SendClientMessage(playerid,COLOR_INFO_AVISO, "/GPS [nome do local] e /desligargps.");
			}
			else if(ValorAlgoMais==9){
			    SendClientMessage(playerid,COLOR_AVISO, "Precisando de uma graninha? Aqui no Virtual Life temos Sub Missões, são como empregos temporários!");
			    SendClientMessage(playerid,COLOR_AVISO, "As Sub Missões não lhe darão Xpoint, somente dinheiro, e não será muito, pois é temporário!");
	   			SendClientMessage(playerid,COLOR_AVISO, "Você poderá entrar em uma Sub Missão quando estiverem contratando alguém, vá até o local e digite /bico");
			}
			else if(ValorAlgoMais==10){
			    SendClientMessage(playerid,COLOR_AVISO, "Respeite as regras do servidor \"/regras1 e /regras2\" caso não obedecer poderá ser punido...");
			    SendClientMessage(playerid,COLOR_AVISO, "Obrigado e Bom Jogo!");
			}
			else if(ValorAlgoMais==11){
			    SendClientMessage(playerid,COLOR_AVISO, "Está procurando algo para se divertir no seu dia de folga?");
			    SendClientMessage(playerid,COLOR_AVISO, "Pescar? Polícia e Ladrão? Derby? Corrida?");
			    SendClientMessage(playerid,COLOR_INFO_AVISO, "Veja mais em: /lazeres e /sistentretenimento.");
			}
			else if(ValorAlgoMais==12){
			    SendClientMessage(playerid,COLOR_AVISO, "Mude sua skin existe lojas no Virtual Life RPG aonde você poderá comprar uma.");
			    SendClientMessage(playerid,COLOR_INFO_AVISO, "Para obter informação sobre seu skin: /skininfo [ID].");
			}
			else if(ValorAlgoMais==13){
			    SendClientMessage(playerid,COLOR_AVISO, "Você pode fazer o que quiser com seu imóvel, isso mesmo.");
			    SendClientMessage(playerid,COLOR_AVISO, "Veja como adquirir um imóvel de um amigo ou locar:");
			    SendClientMessage(playerid,COLOR_INFO_AVISO, "/sistcasas");
			}
			else if(ValorAlgoMais==14){
			    SendClientMessage(playerid,COLOR_AVISO, "Você tem como tunar seu carro e salvar os componentes, agora no Virtual Life.");
			    SendClientMessage(playerid,COLOR_AVISO, "Você poderá fazer inúmeras modificações no seu carro:");
			    SendClientMessage(playerid,COLOR_INFO_AVISO, "/sistcarros.");
			}
			else if(ValorAlgoMais==15){
			    SendClientMessage(playerid,COLOR_AVISO, "Para adquirir Xpoints basta trabalhar. Usando os comandos da sua profissão.");
			    SendClientMessage(playerid,COLOR_AVISO, "O Servidor computa toda ação que você faz, quando você atingir uma certa quantia de Xpoints,");
			    SendClientMessage(playerid,COLOR_AVISO, "eles serão convertidos em 1 Level (XL) e assim poderá ir upando.");
			}
			else if(ValorAlgoMais==16){
			    SendClientMessage(playerid,COLOR_AVISO, "Fique por dentro das modificações do Virtual Life RPG.");
			    SendClientMessage(playerid,COLOR_AVISO, "Veja o que nós temos de novo: /rpglife até /rpglife11 e /novidades /novidades2.");
			}
			else if(ValorAlgoMais==17){
			    SendClientMessage(playerid,COLOR_AVISO, "Sua vida diminui com o Tempo é sempre bom estar na dinâmica do jogo");
			    SendClientMessage(playerid,COLOR_AVISO, "Comprando bebidas e pizzas dos vendedores para aumentar sua vida.");
			}
			else if(ValorAlgoMais==18){
			    SendClientMessage(playerid,COLOR_AVISO, "Quer se proteger? Adquira o Porte de Armas com o Juiz ou o Delegado, em seguida");
			    SendClientMessage(playerid,COLOR_AVISO, "compre as armas do Vendedor ou na Ammu Nation a Munição é vendida na Loja ID: 36.");
			}
			else if(ValorAlgoMais==19){
			    SendClientMessage(playerid,COLOR_AVISO, "Uma saidinha sempre é bom! Vá no nosso Club de strip-tease quando tiver uma stripper.");
			    SendClientMessage(playerid,COLOR_AVISO, "É sempre bom relaxar no seu dia de folga, caso o negócio fique bom compre uma camisinha e... já sabe. ^^");
			}
			else if(ValorAlgoMais==20){
			    SendClientMessage(playerid,COLOR_AVISO, "Que tal tentar a sorte? Loteria ou Corrida de Cavalos? Você quem sabe, o prêmio da loteria é extrondante.");
			    SendClientMessage(playerid,COLOR_AVISO, "O da Corrida de Cavalos é relativo com o que você aposta, são 8 cavalos.");
			    SendClientMessage(playerid,COLOR_AVISO, "Sexta-Feira às 19:00, sai o resultado.");
			    SendClientMessage(playerid,COLOR_INFO_AVISO,  "Loteria ID: 24 / Corrida de Cavalos ID: 26.");
			}
			else if(ValorAlgoMais==21){
			    SendClientMessage(playerid,COLOR_AVISO, "Aconselhamos que você tire a Habilitação para veículos. Preços: /carteiras.");
			    SendClientMessage(playerid,COLOR_AVISO, "Agende um teste: /agendarteste. Auto-Escola ID: 20.");
			}
			else if(ValorAlgoMais==22){
			    SendClientMessage(playerid,COLOR_AVISO, "Leve seu amigo(a) ou sua namorada(o) para tomar um sorvete na nossa sorveteria.");
			    SendClientMessage(playerid,COLOR_AVISO, "São vários sabores diferentes./sabores.");
			    SendClientMessage(playerid,COLOR_INFO_AVISO,  "Sorveteria ID: 2");
			}
			else if(ValorAlgoMais==23){
			    SendClientMessage(playerid,COLOR_AVISO, "Uma Baladinha com drinks, petiscos e uma boa música é sempre bom, então visite");
			    SendClientMessage(playerid,COLOR_AVISO, "nossa Balada no seu dia de folga.");
			    SendClientMessage(playerid,COLOR_INFO_AVISO,  "Balada ID: 21");
			}
			else if(ValorAlgoMais==24){
			    SendClientMessage(playerid,COLOR_AVISO, "O Estádio de Los Santos fica aberto aos Domingos para você realizar seus Stunt's");
			    SendClientMessage(playerid,COLOR_INFO_AVISO,  "Estádio de Los Santos ID: 28");
			}
			else if(ValorAlgoMais==25){
			    SendClientMessage(playerid,COLOR_AVISO, "Quer disgrutar de um ambiente clássico e de uma maravilhosa comida?");
			    SendClientMessage(playerid,COLOR_AVISO, "Os preços não são baratos mais o ambiente, o som, e a comida. Hummmm Delícia.");
			    SendClientMessage(playerid,COLOR_INFO_AVISO,  "Restaurante ID: 31");
			}
			else if(ValorAlgoMais==26){
			    SendClientMessage(playerid,COLOR_AVISO, "Temos uma Locadora de Veículos a qual você pode disfrutar de belíssimos carros");
			    SendClientMessage(playerid,COLOR_AVISO, "a um preço razoável, aconselhamos passar lá e ver os carros, dar um rolé com um esportivo.");
			    SendClientMessage(playerid,COLOR_INFO_AVISO,  "Locadora de Veículo ID: 37");
			}
			else if(ValorAlgoMais==27){
			    SendClientMessage(playerid,COLOR_AVISO, "ATENÇÃO! Ao pegar sua profissão só poderá trocar se conseguir 1 Level de Experiência (XL) com a mesma.");
			    SendClientMessage(playerid,COLOR_INFO_AVISO,  "Então trabalhe para que ninguém pense que você só quer pegar os salários.");
			}
			else if(ValorAlgoMais==28){
			    SendClientMessage(playerid,COLOR_AVISO, "Você pode entrar em carros que não são seus comprando Chaves Mestras.");
			    SendClientMessage(playerid,COLOR_AVISO,  "É uma forma de tomar emprestado, já que o cara deixou o veículo destrancado.");
			    SendClientMessage(playerid,COLOR_AVISO,  "Mais atenção a polícia pode vir prender você por motivo de roubo de automóvel.");
			    SendClientMessage(playerid,COLOR_INFO_AVISO,  "Chaveiro ID: 43");
			}
			else if(ValorAlgoMais==29){
			    SendClientMessage(playerid,COLOR_AVISO, "Compre seu Celular e sua Agenda, ao comprar não esqueça de colocar créditos.");
	   			SendClientMessage(playerid,COLOR_AVISO,  "Com o celular você pode rastrear um jogador, mandar SMS, e conversar por telefone.");
			    SendClientMessage(playerid,COLOR_AVISO,  "Veja mais em: /celularinfo e /celularinfo2.");
			    SendClientMessage(playerid,COLOR_INFO_AVISO,  "Loja de Utilidades ID: 25");
			}
			else if(ValorAlgoMais==30){
			    SendClientMessage(playerid,COLOR_AVISO, "Compre o Celular e tenha como rastrear um amigo seu no radar.");
			    SendClientMessage(playerid,COLOR_AVISO, "Além de se comunicar com ele, com o celular você também pode mandar SMS.");
			    SendClientMessage(playerid,COLOR_AVISO, "Veja mais em: /celularinfo e /celularinfo2.");
			    SendClientMessage(playerid,COLOR_INFO_AVISO,  "Loja de Utilidades ID: 25");
			}
			else if(ValorAlgoMais==31){
			    SendClientMessage(playerid,COLOR_AVISO, "Compre o Celular e tenha como rastrear um amigo seu no radar.");
			    SendClientMessage(playerid,COLOR_AVISO, "Além de se comunicar com ele, com o celular você também pode mandar SMS.");
			    SendClientMessage(playerid,COLOR_AVISO, "Veja mais em: /celularinfo e /celularinfo2.");
			    SendClientMessage(playerid,COLOR_INFO_AVISO,  "Loja de Utilidades ID: 25");
			}
			else if(ValorAlgoMais==32){
				if(TemProfissao(PROSTITUTA)){
				    SendClientMessage(playerid,COLOR_AVISO, "Que tal ir pra Club de Strip-Tease e assistir um Strip-Tease?");
				    SendClientMessage(playerid,COLOR_AVISO, "É amigão, existe strippers no Club vá logo!");
				    SendClientMessage(playerid,COLOR_INFO_AVISO,  "Club de Strip-Tease ID: 27");
				} else {
				    SendClientMessage(playerid,COLOR_AVISO, "No Club de Strip-Tease tem como você comer, dançar, não precisa ter");
				    SendClientMessage(playerid,COLOR_AVISO, "prostitutas lá, leve seus amigos.");
				    SendClientMessage(playerid,COLOR_INFO_AVISO,  "Club de Strip-Tease ID: 27");
				}
			}
			else if(ValorAlgoMais==33){
			    SendClientMessage(playerid,COLOR_AVISO, "Preste atenção! O comando de entregar os documentos é: /entregardocumentos [id]");
			    SendClientMessage(playerid,COLOR_AVISO, "Logo em seguida o policial vai ver, solicite que ele devolva com o comando: /devolverdocumentos.");
			}
			else if(ValorAlgoMais==34){
			    SendClientMessage(playerid,COLOR_AVISO, "As casas tem cofre. Para não pagar o JUROS absurdo do Banco aconselhamos guardar suas coisas lá.");
			    SendClientMessage(playerid,COLOR_AVISO, "Para mais informações: /sistcofre.");
			}
			else if(ValorAlgoMais==34){
			    SendClientMessage(playerid,COLOR_AVISO, "Banco um excelente lugar para ganhar dinheiro! Isso mesmo!");
			    SendClientMessage(playerid,COLOR_AVISO, "Você pode aplicar seu dinheiro e esperar para ver se sua");
			    SendClientMessage(playerid,COLOR_AVISO, "aplicação pode render ou não render de acordo com a Bolsa de Valores!");
			}
			else if(ValorAlgoMais==35){
			    SendClientMessage(playerid,COLOR_AVISO, "Faça seus seguros, seguro de vida, seguro de carro, seguro de imóvel.");
			    SendClientMessage(playerid,COLOR_AVISO, "Você com seguro de vida pode restaurar Saúde no Hospital.");
			    SendClientMessage(playerid,COLOR_AVISO, "Você com seguro de carro não pagará pelo conserto caso ele esteje destruído.");
		        SendClientMessage(playerid,COLOR_AVISO, "Você com seguro de imóvel poderá vender seu imóvel e ser recompensado");
				SendClientMessage(playerid,COLOR_AVISO, "com 50, 75 e até 100 por cento do valor pago.");
				SendClientMessage(playerid,COLOR_AVISO, "Mais info: /precoseguros");
			}
			else if(ValorAlgoMais==36){
			    SendClientMessage(playerid,COLOR_AVISO, "APOSTE! APOSTE! APOSTE! APOSTE! APOSTE! APOSTE!");
			    SendClientMessage(playerid,COLOR_AVISO, "CAVALOS! CAVALOS! CAVALOS! CAVALOS! CAVALOS!");
			    SendClientMessage(playerid,COLOR_AVISO, "Você pode tentar a sorte com os prêmios de milhares de doláres.");
			    SendClientMessage(playerid,COLOR_AVISO, "Resultado: Sexta-Feira às 19:00");
			    SendClientMessage(playerid,COLOR_INFO_AVISO, "Loteria ID: 24 . Corrida de Cavalos ID: 26.");
			}
			else if(ValorAlgoMais==37){
			    SendClientMessage(playerid,COLOR_AVISO, "Veja as profissões do servidor! Tome conhecimento do que poderá ser.");
			    SendClientMessage(playerid,COLOR_AVISO, "São 32 profissões, todas com comandos, chegando a algumas terem mais de 25.");
			    SendClientMessage(playerid,COLOR_AVISO, "Outra não se engane pela profissão ela pode ser muito boa!");
			    SendClientMessage(playerid,COLOR_INFO_AVISO, "/profissoes até /profissoes6");
			}
			else if(ValorAlgoMais==38){
			    SendClientMessage(playerid,COLOR_AVISO, "Respeite as LEIS do servidor tanto na área Cívil, como no Trânsito.");
			    SendClientMessage(playerid,COLOR_AVISO, "São 21 Leis a quais você tem que obedecer, caso não obedeça.");
			    SendClientMessage(playerid,COLOR_AVISO, "Poderá ser preso!");
			    SendClientMessage(playerid,COLOR_INFO_AVISO, "/leis1 e /leis2.");
			}
			else if(ValorAlgoMais==39){
			    SendClientMessage(playerid,COLOR_AVISO, "Leis foram feitas para serem cumpridas, então temos as leis");
			    SendClientMessage(playerid,COLOR_AVISO, "de trânsito e de pedestres, caso não obedeça");
			    SendClientMessage(playerid,COLOR_AVISO, "Poderá ser preso!!");
			    SendClientMessage(playerid,COLOR_INFO_AVISO, "/leis1 e /leis2.");
			}
			else if(ValorAlgoMais==40){
			    SendClientMessage(playerid,COLOR_AVISO, "A Polícia está aqui para servir você e todos os cidadãos de Los Santos!");
			    SendClientMessage(playerid,COLOR_AVISO, "Portanto caso veje algum desrespeito as leis da polícia comunique..");
			    SendClientMessage(playerid,COLOR_INFO_AVISO, "/policia1 e /policia2.");
			}
			else if(ValorAlgoMais==41){
			    SendClientMessage(playerid,COLOR_AVISO, "\"Juro solenemente honrar minha farda\"");
			    SendClientMessage(playerid,COLOR_AVISO, "A polícia está para lhe ajudar! Veja as leis que os oficiais devem seguir:");
			    SendClientMessage(playerid,COLOR_INFO_AVISO, "/policia1 e /policia2.");
			}
			else if(ValorAlgoMais==42){
			    SendClientMessage(playerid,COLOR_AVISO, "Medo de não aguentar a fome? Temos 1 solução enquanto você espera o");
			    SendClientMessage(playerid,COLOR_AVISO, "Barman, entregador de pizza, etc.. Sanduíche Natural na loja.");
			    SendClientMessage(playerid,COLOR_AVISO, "É uma reserva que aumenta sua saúde em 5 por cento, o tempo para um vendedor chegar até você.");
			    SendClientMessage(playerid,COLOR_INFO_AVISO, "Loja de Utiliaddes: 25.");
			}
  			SendClientMessage(playerid,COLOR_TITULO_AVISO, "|___________________________________________________________________________|");
			return 1;
		}
	}

	if(strcmp(cmd, "/guardarcell", true) == 0){
	    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo...");
     	if(pStats[playerid][PhoneNumb]==0){
	       	SendClientMessage(playerid,COLOR_GRAY,"Você não tem celular!");
	       	return 1;
		}
		if(EmLigacao[playerid] == 1){
	    	SendClientMessage(playerid,COLOR_GRAY,"Termine sua ligação para poder desligar o celular...");
			return 1;
		}
		if(pStats[playerid][GCell] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Seu celular já está guardado em um veículo...");
		    return 1;
		}
		if(!strcmp(vStats[GetPlayerVehicleID(playerid)][VDono],PlayerName(playerid),true)){
		    pStats[playerid][GCell] = 1;
		    pStats[playerid][VCell] = GetPlayerVehicleID(playerid);
			SendClientMessage(playerid, COLOR_YELLOW, "Celular guardado e desligado...");
			return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é o DONO desse veículo...");
		    return 1;
		}
	}
	if(strcmp(cmd, "/pegarcell", true) == 0){
	    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo...");
     	if(pStats[playerid][PhoneNumb]==0){
	       	SendClientMessage(playerid,COLOR_GRAY,"Você não tem celular!");
	       	return 1;
		}
		if(pStats[playerid][GCell] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Seu celular não está guardado em um veículo...");
		    return 1;
		}
		if(GetPlayerVehicleID(playerid) != pStats[playerid][VCell]){
		    SendClientMessage(playerid, COLOR_GRAY, "Não foi nesse veículo que você guardou seu celular...");
		    return 1;
		}
		if(!strcmp(vStats[GetPlayerVehicleID(playerid)][VDono],PlayerName(playerid),true)){
		    pStats[playerid][GCell] = 0;
		    pStats[playerid][VCell] = 0;
			SendClientMessage(playerid, COLOR_YELLOW, "Seu celular está novamente com você!");
			return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é o DONO desse veículo...");
		    return 1;
		}
	}
	if(strcmp(cmd, "/escrevercarta",true) == 0){
	    new tmp[128];
	    new carta[128];
	    new msg[128];
		new achou = 0;
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /escrevercarta [nome do jogador] [texto]");
		if(!fexist(PlayerFile(tmp))) return SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não existe!");
		for(new i = 0; i < MAX_CASAS; i++){
			if(strcmp(pckStats[i][PickupDono],tmp,true,strlen(tmp)) == 0 && strlen(tmp) == strlen(pckStats[i][PickupDono])){
				strmid(carta,cmdtext,16+strlen(tmp),strlen(cmdtext));
				if(!strlen(carta)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /escrevercarta [nome do jogador] [texto]");
				EnviarCarta(playerid,tmp,carta);
				achou = 1;
				format(msg,sizeof(msg),"Carta enviada para %s: %s",tmp,carta);
				SendClientMessage(playerid, COLOR_WHITE, msg);
				break;
			}
		}
		if(achou == 0) return SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não possui casa!");
		return 1;
	}
	if(strcmp(cmd, "/vercorrespondencia", true) == 0) {
		if(NaCasa[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma casa!");
		    return 1;
		}
		if(strcmp(pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid),true)){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está na sua casa!");
		    return 1;
		}
	    SendClientMessage(playerid, COLOR_JUIZ, "|==========| Correspondências |==========|");
	    MostrarCorrespondencia(playerid);
		return 1;
	}
	if(strcmp(cmd, "/jogarcartasfora",true) == 0){
	    if(NaCasa[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma casa!");
		    return 1;
		}
		if(strcmp(pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid),true)){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está na sua casa!");
		    return 1;
		}
	    ExcluirCorrespondencia(playerid);
		return 1;
	}
	if(strcmp(cmd, "/mudarcaixapostal", true) == 0){
		if(!Logado[playerid]) return SendClientMessage(playerid, COLOR_GRAY, "Antes de tudo, se logue no jogo!");
		new tmp[128];
		strmid(tmp,cmdtext,18,strlen(cmdtext));
	    if(strlen(tmp) <= 0) return SendClientMessage(playerid, COLOR_GRAY, "USO: /mudarcaixapostal [mensagem]");
        new msg[128];
		format(msg,sizeof(msg),"%s mudou sua caixa postal para:",PlayerName(playerid));
		writelog(msg);
		writelog(tmp);
		print(msg);
		print(tmp);
		set(pStats[playerid][MSGBIP],tmp);
		SendClientMessage(playerid, COLOR_JUIZ, "[Secretária Eletrônica] Sua mensagem de caixa postal foi mudada para:");
		SendClientMessage(playerid, COLOR_WHITE, tmp);
		return 1;
	}
	if(!strcmp(cmd, "/caixapostal",true)){
	    if(pStats[playerid][PhoneNumb]==0){
	        SendClientMessage(playerid,COLOR_GRAY,"Você não tem celular!");
	        return 1;
		}
		if(pStats[playerid][GCell] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Seu celular está guardado e desativado!");
		    return 1;
		}
	    SendClientMessage(playerid, COLOR_LIGHT_RED, "*_*_*_* CAIXA POSTAL *_*_*_*");
		MostrarCaixaPostal(playerid);
		return 1;
	}
	if(!strcmp(cmd, "/excluircaixapostal",true)){
	    if(pStats[playerid][PhoneNumb]==0){
	        SendClientMessage(playerid,COLOR_GRAY,"Você não tem celular!");
	        return 1;
		}
		if(pStats[playerid][GCell] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Seu celular está guardado e desativado!");
		    return 1;
		}
		ExcluirCaixaPostal(playerid);
		return 1;
	}
	if(strcmp(cmd, "/ligartelefonepublico", true) == 0) {
		new tmp[128],string[128];
		new cellowner[128];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_GRAY, "USO: /ligartelefonepublico [número]");
			return 1;
		}
		if(TellPublico[playerid] == -1){
		    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em um telefone público (orelhão) para usar esse comando!");
			return 1;
		}
		if(TelefoneOcupado[TellPublico[playerid]] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse telefone público está ocupado!");
			return 1;
		}
		if(pStats[playerid][CartaoTelefonico] <= 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem cartão telefônco recarregado! Mínimo de créditos para fazer uma ligação: 2");
		    return 1;
		}
		if(EmLigacao[playerid] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Você já está em uma ligação!");
			return 1;
		}
		if(CelularBloqueado[playerid] == 1){
   			SendClientMessage(playerid, COLOR_GRAY, "Você não está com seu celular.");
			return 1;
		}
		new search,string_text[128],getpck;
		for(new i = 0; i < MAX_CASAS; i++){
	    	set(string_text,PickupFile(i));
	    	if(fexist(string_text)){
    			if(pckStats[i][TelefoneNumb] == strval(tmp)){
					search = 1;
					getpck = i;
					break;
				}
			}
		}
		if(strval(tmp) > LastPN && !search){
		   	SendClientMessage(playerid,COLOR_GRAY,"Número inexistente.");
		   	return 1;
		}
		if(strval(tmp) < 300000){
			set(cellowner,CelularesNum[strval(tmp)-1000]);
			if(!IsStringAName(cellowner)){
		    	format(RecebedorMensagem[playerid],128,cellowner);
		    	SendClientMessage(playerid,COLOR_YELLOW,"Chamando...");
		    	TempoCaixaMensagem[playerid][0] = SetTimerEx("CaixaMensagem",10000,0,"d",playerid);
		    	return 1;
			}
			new calledid = IDName(cellowner);
			if((pStats[calledid][GCell] == 1 || pStats[calledid][CofreCell] == 1) && strval(tmp) < 300000){
		    	SendClientMessage(playerid, COLOR_GRAY, "O celular do outro jogador está desligado...");
		    	return 1;
			}
			if(EmLigacao[calledid] == 1){
			    SendClientMessage(playerid,COLOR_GRAY,"O jogador já está em uma ligação!");
			    return 1;
			}
			extensao[calledid] = EXTENSION_CELULAR;
		    format(RecebedorMensagem[playerid],128,cellowner);
			SendClientMessage(calledid,COLOR_JUIZ,"Seu celular está tocando! Para atende-lo, digite /atender. Caso contrário, digite /recusarchamada.");
			format(string,sizeof(string),"Originador da chamada: %s",PlayerName(playerid));
			SendClientMessage(calledid,COLOR_GRAY,string);
			Chamando[playerid]=1;
			Chamando[calledid]=1;
			CalledID[playerid]=calledid;
			CalledID[calledid]=playerid;
			CobrancaCall[playerid]=1;
			CobrancaCall[calledid]=0;
		}
		else{
		    set(cellowner,pckStats[getpck][PickupDono]);
			if(!IsStringAName(cellowner)){
		    	format(RecebedorMensagem[playerid],128,cellowner);
		    	SendClientMessage(playerid,COLOR_YELLOW,"Chamando...");
		    	TempoCaixaMensagem[playerid][0] = SetTimerEx("CaixaMensagem",10000,0,"d",playerid);
		    	return 1;
			}
			new presult;
		    for(new p = 0; p < MAX_CASAS; p++){
		        if(strval(tmp) == pckStats[p][TelefoneNumb]){
		            presult = p;
		            break;
				}
			}
			if(presult == PickupEntradaCasa[playerid]){
			    SendClientMessage(playerid, COLOR_GRAY, "Tentando ligar para a casa que você está? Impossível aqui!");
			    return 1;
			}
			if(TellUsing[presult] == 1 || TelefoneTocando[presult] == 1){
			    SendClientMessage(playerid, COLOR_GRAY, "O telefone dessa casa está ocupado!");
			    return 1;
			}
            TelefoneTocando[presult] = 1;
			PickupCaller[presult] = playerid;
			format(RecebedorMensagem[playerid],128,pckStats[PickupEntradaCasa[playerid]][PickupDono]);
		    for(new i = 0; i < MAX_SLOTS; i++){
		        if(NaCasa[i] == 1 && PickupEntradaCasa[i] == presult){
		            SendClientMessage(i, COLOR_JUIZ, "Telefone tocando... Para atender digite /atendertelefone");
				}
			}
		}
		extensao[playerid] = EXTENSION_ORELHAO;
		TempoCaixaMensagem[playerid][0] = SetTimerEx("CaixaMensagem",20000,0,"d",playerid);
		SendClientMessage(playerid,COLOR_YELLOW,"Chamando...");
		SetPlayerControl(playerid,0);
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
		TelefoneOcupado[TellPublico[playerid]] = 1;
		pStats[playerid][CartaoTelefonico]--;
		return 1;
	}
	if(strcmp(cmd, "/desligartelefonepublico", true) == 0){
		if(!EmLigacao[playerid]){
			SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma ligação!");
			return 1;
		}
		if(TellPublico[playerid] == -1){
		    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em um telefone público (orelhão) para usar esse comando!");
			return 1;
		}
		extensao[playerid] = EXTENSION_NONE;
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		SetPlayerSpecialAction(CalledID[playerid],SPECIAL_ACTION_STOPUSECELLPHONE);
		SendClientMessage(playerid,COLOR_GRAY,"Chamada desligada!");
		SendClientMessage(CalledID[playerid],COLOR_GRAY,"Chamada desligada");
		if(extensao[PickupCaller[PickupEntradaCasa[playerid]]] == EXTENSION_TELEFONE) Atendente[PickupEntradaCasa[PickupCaller[PickupEntradaCasa[playerid]]]] = INVALID_PLAYER_ID;
		EmLigacao[playerid]=0;
		EmLigacao[CalledID[playerid]]=0;
		KillTimer(TempoCaixaMensagem[playerid][0]);
		KillTimer(TempoCaixaMensagem[CalledID[playerid]][0]);
		TelefoneOcupado[TellPublico[playerid]] = 0;
		SetPlayerControl(playerid,1);
		return 1;
	}
	if(strcmp(cmd, "/ligar", true) == 0) {
		new tmp[128],string[128];
		new cellowner[128];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_GRAY, "USO: /ligar [número]");
			return 1;
		}
		if(NaCasa[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
		    return 1;
		}
		if(pckStats[PickupEntradaCasa[playerid]][TelefoneNumb] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem telefone!");
			return 1;
		}
		if(EmLigacao[playerid] == 1){
		    SendClientMessage(playerid,COLOR_GRAY,"Você já está em uma ligação!");
			return 1;
		}
		if(CelularBloqueado[playerid] == 1){
   			SendClientMessage(playerid, COLOR_GRAY, "Você não está com seu celular.");
			return 1;
		}
		new search,string_text[128],getpck;
		for(new i = 0; i < MAX_CASAS; i++){
	    	set(string_text,PickupFile(i));
	    	if(fexist(string_text)){
    			if(pckStats[i][TelefoneNumb] == strval(tmp)){
					search = 1;
					getpck = i;
					break;
				}
			}
		}
		if(strval(tmp) > LastPN && !search){
		   	SendClientMessage(playerid,COLOR_GRAY,"Número inexistente.");
		   	return 1;
		}
		if(strval(tmp) < 300000){
		    set(cellowner,CelularesNum[strval(tmp)-1000]);
			if(!IsStringAName(cellowner)){
		    	format(RecebedorMensagem[playerid],128,cellowner);
		    	SendClientMessage(playerid,COLOR_YELLOW,"Chamando...");
		    	TempoCaixaMensagem[playerid][0] = SetTimerEx("CaixaMensagem",10000,0,"d",playerid);
		    	return 1;
			}
			new calledid = IDName(cellowner);
			if((pStats[calledid][GCell] == 1 || pStats[calledid][CofreCell]) && strval(tmp) < 300000){
		    	SendClientMessage(playerid, COLOR_GRAY, "O celular do outro jogador está desligado...");
		    	return 1;
			}
			if(EmLigacao[calledid] == 1 && strval(tmp) < 300000){
			    SendClientMessage(playerid,COLOR_GRAY,"O jogador já está em uma ligação!");
			    return 1;
			}
			extensao[calledid] = EXTENSION_CELULAR;
		    format(RecebedorMensagem[playerid],128,cellowner);
			SendClientMessage(calledid,COLOR_JUIZ,"Seu celular está tocando! Para atende-lo, digite /atender. Caso contrário, digite /recusarchamada.");
			format(string,128,"Originador da chamada: %s",PlayerName(playerid));
			SendClientMessage(calledid,COLOR_GRAY,string);
			TocandoBIP[calledid]=SetTimerEx("TelefoneBIP",1000,0,"d",calledid);
			Chamando[playerid]=1;
			Chamando[calledid]=1;
			CalledID[playerid]=calledid;
			CalledID[calledid]=playerid;
			CobrancaCall[playerid]=1;
			CobrancaCall[calledid]=0;
		}
		else{
		    set(cellowner,pckStats[getpck][PickupDono]);
			if(!IsStringAName(cellowner)){
		    	format(RecebedorMensagem[playerid],128,cellowner);
		    	SendClientMessage(playerid,COLOR_YELLOW,"Chamando...");
		    	TempoCaixaMensagem[playerid][0] = SetTimerEx("CaixaMensagem",10000,0,"d",playerid);
		    	return 1;
			}
			new presult;
		    for(new p = 0; p < MAX_CASAS; p++){
		        if(strval(tmp) == pckStats[p][TelefoneNumb]){
		            presult = p;
		            break;
				}
			}
			if(presult == PickupEntradaCasa[playerid]){
			    SendClientMessage(playerid, COLOR_GRAY, "Tentando ligar para a casa que você está? Impossível aqui!");
			    return 1;
			}
			if(TellUsing[presult] == 1 || TelefoneTocando[presult] == 1){
			    SendClientMessage(playerid, COLOR_GRAY, "O telefone dessa casa está ocupado!");
			    return 1;
			}
            TelefoneTocando[presult] = 1;
			PickupCaller[presult] = playerid;
			format(RecebedorMensagem[playerid],128,pckStats[PickupEntradaCasa[playerid]][PickupDono]);
		    for(new i = 0; i < MAX_SLOTS; i++){
		        if(NaCasa[i] == 1 && PickupEntradaCasa[i] == presult){
		            SendClientMessage(i, COLOR_JUIZ, "Telefone tocando... Para atender digite /atendertelefone");
					TocandoBIP[i]=SetTimerEx("TelefoneBIP",1000,0,"d",i);
				}
			}
		}
		extensao[playerid] = EXTENSION_TELEFONE;
		Atendente[PickupEntradaCasa[playerid]] = playerid;
		TempoCaixaMensagem[playerid][0] = SetTimerEx("CaixaMensagem",20000,0,"d",playerid);
		SendClientMessage(playerid,COLOR_YELLOW,"Chamando...");
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
		return 1;
	}

	if(strcmp(cmd, "/atendertelefone", true) == 0){
	    if(NaCasa[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma casa!");
	    if(TelefoneTocando[PickupEntradaCasa[playerid]] == 0) return SendClientMessage(playerid, COLOR_GRAY, "O telefone não está tocando!");
        extensao[playerid] = EXTENSION_TELEFONE;
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
		SendClientMessage(PickupCaller[PickupEntradaCasa[playerid]],COLOR_WHITE,"Quem você chamava aceitou sua ligação! Pode conversar!");
		SendClientMessage(playerid, COLOR_WHITE, "Telefone atendido!");
		CalledID[PickupCaller[PickupEntradaCasa[playerid]]] = playerid;
		KillTimer(TocandoBIP[playerid]);
		Chamando[playerid]=0;
		Chamando[PickupCaller[PickupEntradaCasa[playerid]]]=0;
		EmLigacao[playerid]=1;
		EmLigacao[PickupCaller[PickupEntradaCasa[playerid]]]=1;
		KillTimer(TempoCaixaMensagem[playerid][0]);
		KillTimer(TempoCaixaMensagem[PickupCaller[PickupEntradaCasa[playerid]]][0]);
		TelefoneTocando[PickupEntradaCasa[playerid]] = 0;
		TellUsing[PickupEntradaCasa[playerid]] = 1;
		extensao[playerid] = EXTENSION_TELEFONE;
		PickupCaller[PickupEntradaCasa[playerid]] = PickupCaller[PickupEntradaCasa[playerid]];
		Atendente[PickupEntradaCasa[playerid]] = playerid;
		switch(extensao[PickupCaller[PickupEntradaCasa[playerid]]]){
			case EXTENSION_TELEFONE:
			{
				TellUsing[PickupEntradaCasa[PickupCaller[PickupEntradaCasa[playerid]]]] = 1;
				PickupCaller[PickupEntradaCasa[PickupCaller[PickupEntradaCasa[playerid]]]] = playerid;
				SendClientMessage(playerid, COLOR_YELLOW, "Extensão usada pelo outro jogador: Telefone");
			}
			case EXTENSION_CELULAR:
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "Extensão usada pelo outro jogador: Celular");
			}
			case EXTENSION_ORELHAO:
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "Extensão usada pelo outro jogador: Telefone público (orelhão)");
			}
			default:
			{
			    TellUsing[PickupEntradaCasa[PickupCaller[PickupEntradaCasa[playerid]]]] = 1;
				PickupCaller[PickupEntradaCasa[PickupCaller[PickupEntradaCasa[playerid]]]] = playerid;
				SendClientMessage(playerid, COLOR_GRAY, "A extensão do outro jogador não foi identificada!");
			}
		}
		if(CobrancaCall[playerid] == 0){
			CellTimer[CalledID[playerid]]=SetTimerEx("AvancoLigacao",60000,false,"dd",CalledID[playerid],playerid);
		} else {
		    CellTimer[playerid]=SetTimerEx("AvancoLigacao",60000,false,"dd",playerid,CalledID[playerid]);
		}
		SetPlayerControl(playerid,false);
		return 1;
	}
	if(strcmp(cmd, "/desligartelefone", true) == 0){
	    if(NaCasa[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma casa!");
	    if(TellUsing[PickupEntradaCasa[playerid]] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está atendendo nenhum telefone!");
		if(Atendente[PickupEntradaCasa[playerid]] != playerid) return SendClientMessage(playerid, COLOR_GRAY, "Não foi você que atendeu a chamada!");
		EmLigacao[playerid]=0;
		EmLigacao[PickupCaller[PickupEntradaCasa[playerid]]]=0;
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		SetPlayerSpecialAction(PickupCaller[PickupEntradaCasa[playerid]],SPECIAL_ACTION_STOPUSECELLPHONE);
		KillTimer(TempoCaixaMensagem[playerid][0]);
		KillTimer(TempoCaixaMensagem[PickupCaller[PickupEntradaCasa[playerid]]][0]);
		TelefoneTocando[PickupEntradaCasa[playerid]] = 0;
		extensao[playerid] = EXTENSION_NONE;
		TellUsing[PickupEntradaCasa[playerid]] = 0;
		TellUsing[PickupEntradaCasa[PickupCaller[PickupEntradaCasa[playerid]]]] = 0;
		SetPlayerControl(playerid,true);
		SetPlayerControl(PickupCaller[PickupEntradaCasa[playerid]],true);
		SendClientMessage(playerid, COLOR_WHITE, "Telefone desligado!");
		SendClientMessage(PickupCaller[PickupEntradaCasa[playerid]], COLOR_WHITE, "O outro jogador desligou o telefone!");
		if(extensao[PickupCaller[PickupEntradaCasa[playerid]]] == EXTENSION_TELEFONE) Atendente[PickupEntradaCasa[PickupCaller[PickupEntradaCasa[playerid]]]] = INVALID_PLAYER_ID;
        if(extensao[PickupCaller[PickupEntradaCasa[playerid]]] == EXTENSION_ORELHAO) TelefoneOcupado[TellPublico[PickupCaller[PickupEntradaCasa[playerid]]]] = 0;
		PickupCaller[PickupEntradaCasa[playerid]] = INVALID_PLAYER_ID;
		Atendente[PickupEntradaCasa[playerid]] = INVALID_PLAYER_ID;
		return 1;
	}
	if(!strcmp(cmd, "/chamar",true)){
	    new tmp[128],cellowner[128],string[128];
	    tmp = strtok(cmdtext,idx);
	    if(pStats[playerid][PhoneNumb]==0){
	        SendClientMessage(playerid,COLOR_GRAY,"Você não tem celular!");
	        return 1;
		}
		if(!strlen(tmp)){
		    SendClientMessage(playerid,COLOR_GRAY,"Uso correto: /chamar [número]");
		    return 1;
		}
		if(pStats[playerid][GCell] == 1 || pStats[playerid][CofreCell] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Seu celular está guardado e desativado!");
		    return 1;
		}
		if(pStats[playerid][CreditosCell] == 0){
		    SendClientMessage(playerid,COLOR_GRAY,"Você não tem créditos suficientes para originar uma chamada. Mínimo: 2");
		    return 1;
		}
		if(EmLigacao[playerid] == 1){
		    SendClientMessage(playerid,COLOR_GRAY,"Você já está em uma ligação!");
			return 1;
		}
		if(strval(tmp) == pStats[playerid][PhoneNumb]){
		    SendClientMessage(playerid, COLOR_GRAY, "Não pode ligar para você mesmo!");
		    return 1;
		}
		if(CelularBloqueado[playerid] == 1){
   			SendClientMessage(playerid, COLOR_GRAY, "Você não está com seu celular.");
			return 1;
		}
		new search,string_text[128],getpck;
		for(new i = 0; i < MAX_CASAS; i++){
	    	set(string_text,PickupFile(i));
	    	if(fexist(string_text)){
    			if(pckStats[i][TelefoneNumb] == strval(tmp)){
					search = 1;
					getpck = i;
					break;
				}
			}
		}
		if(strval(tmp) > LastPN && !search){
		   	SendClientMessage(playerid,COLOR_GRAY,"Número inexistente.");
		   	return 1;
		}
		if(strval(tmp) < 300000){
			set(cellowner,CelularesNum[strval(tmp)-1000]);
			if(!IsStringAName(cellowner)){
		    	format(RecebedorMensagem[playerid],128,cellowner);
		    	SendClientMessage(playerid,COLOR_YELLOW,"Chamando...");
		    	TempoCaixaMensagem[playerid][0] = SetTimerEx("CaixaMensagem",10000,0,"d",playerid);
		    	return 1;
			}
			new calledid = IDName(cellowner);
			if((pStats[calledid][GCell] == 1 || pStats[calledid][CofreCell] == 1) && strval(tmp) < 300000){
		    	SendClientMessage(playerid, COLOR_GRAY, "O celular do outro jogador está desligado...");
		    	return 1;
			}
			if(EmLigacao[calledid] == 1){
			    SendClientMessage(playerid,COLOR_GRAY,"O jogador já está em uma ligação!");
			    return 1;
			}
			extensao[calledid] = EXTENSION_CELULAR;
		    format(RecebedorMensagem[playerid],128,cellowner);
			SendClientMessage(calledid,COLOR_JUIZ,"Seu celular está tocando! Para atende-lo, digite /atender. Caso contrário, digite /recusarchamada.");
			format(string,sizeof(string),"Originador da chamada: %s",PlayerName(playerid));
			SendClientMessage(calledid,COLOR_GRAY,string);
			Chamando[playerid]=1;
			Chamando[calledid]=1;
			CalledID[playerid]=calledid;
			CalledID[calledid]=playerid;
			CobrancaCall[playerid]=1;
			CobrancaCall[calledid]=0;
		}
		else{
		    set(cellowner,pckStats[getpck][PickupDono]);
			if(!IsStringAName(cellowner)){
		    	format(RecebedorMensagem[playerid],128,cellowner);
		    	SendClientMessage(playerid,COLOR_YELLOW,"Chamando...");
		    	TempoCaixaMensagem[playerid][0] = SetTimerEx("CaixaMensagem",10000,0,"d",playerid);
		    	return 1;
			}
			new presult;
		    for(new p = 0; p < MAX_CASAS; p++){
		        if(strval(tmp) == pckStats[p][TelefoneNumb]){
		            presult = p;
		            break;
				}
			}
			if(presult == PickupEntradaCasa[playerid]){
			    SendClientMessage(playerid, COLOR_GRAY, "Tentando ligar para a casa que você está? Impossível aqui!");
			    return 1;
			}
			if(TellUsing[presult] == 1 || TelefoneTocando[presult] == 1){
			    SendClientMessage(playerid, COLOR_GRAY, "O telefone dessa casa está ocupado!");
			    return 1;
			}
            TelefoneTocando[presult] = 1;
			PickupCaller[presult] = playerid;
			format(RecebedorMensagem[playerid],128,pckStats[PickupEntradaCasa[playerid]][PickupDono]);
		    for(new i = 0; i < MAX_SLOTS; i++){
		        if(NaCasa[i] == 1 && PickupEntradaCasa[i] == presult){
		            SendClientMessage(i, COLOR_JUIZ, "Telefone tocando... Para atender digite /atendertelefone");
				}
			}
		}
		extensao[playerid] = EXTENSION_CELULAR;
		TempoCaixaMensagem[playerid][0] = SetTimerEx("CaixaMensagem",20000,0,"d",playerid);
		SendClientMessage(playerid,COLOR_YELLOW,"Chamando...");
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
		return 1;
	}
	if(!strcmp(cmd, "/chamar9090",true)){
	    new tmp[128],cellowner[128],str[128];
	    tmp = strtok(cmdtext,idx);
	    if(pStats[playerid][PhoneNumb]==0){
	        SendClientMessage(playerid,COLOR_GRAY,"Você não tem celular!");
	        return 1;
		}
		if(!strlen(tmp)){
		    SendClientMessage(playerid,COLOR_GRAY,"Uso correto: /chamar [número]");
		    return 1;
		}
		if(pStats[playerid][GCell] == 1 || pStats[playerid][CofreCell] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Seu celular está guardado e desativado!");
		    return 1;
		}
		if(pStats[playerid][CreditosCell] == 0){
		    SendClientMessage(playerid,COLOR_GRAY,"Você não tem créditos suficientes para originar uma chamada. Mínimo: 2");
		    return 1;
		}
		if(EmLigacao[playerid] == 1){
		    SendClientMessage(playerid,COLOR_GRAY,"Você já está em uma ligação!");
			return 1;
		}
		if(strval(tmp) == pStats[playerid][PhoneNumb]){
		    SendClientMessage(playerid, COLOR_GRAY, "Não pode ligar para você mesmo!");
		    return 1;
		}
		if(CelularBloqueado[playerid] == 1){
   			SendClientMessage(playerid, COLOR_GRAY, "Você não está com seu celular.");
			return 1;
		}
		new search,string_text[128],getpck;
		for(new i = 0; i < MAX_CASAS; i++){
		    set(string_text,PickupFile(i));
	    	if(fexist(string_text)){
    			if(pckStats[i][TelefoneNumb] == strval(tmp)){
					search = 1;
					getpck = i;
					break;
				}
			}
		}
		if(strval(tmp) > LastPN && !search){
		   	SendClientMessage(playerid,COLOR_GRAY,"Número inexistente.");
		   	return 1;
		}
		if(strval(tmp) < 300000){
			set(cellowner,CelularesNum[strval(tmp)-1000]);
			if(!IsStringAName(cellowner)){
		    	format(RecebedorMensagem[playerid],128,cellowner);
		    	SendClientMessage(playerid,COLOR_YELLOW,"Chamando...");
		    	TempoCaixaMensagem[playerid][0] = SetTimerEx("CaixaMensagem",10000,0,"d",playerid);
		    	return 1;
			}
			new calledid = IDName(cellowner);
			if((pStats[calledid][GCell] == 1 || pStats[calledid][CofreCell] == 1) && strval(tmp) < 300000){
		    	SendClientMessage(playerid, COLOR_GRAY, "O celular do outro jogador está desligado...");
		    	return 1;
			}
			if(EmLigacao[calledid] == 1){
			    SendClientMessage(playerid,COLOR_GRAY,"O jogador já está em uma ligação!");
			    return 1;
			}
			extensao[playerid] = EXTENSION_CELULAR;
			TempoCaixaMensagem[playerid][0] = SetTimerEx("CaixaMensagem",30000,0,"d",playerid);
			SendClientMessage(playerid,COLOR_JUIZ,"Chamando...");
			SendClientMessage(calledid,COLOR_JUIZ,"Seu celular está recebendo uma Ligação à cobrar! Para atendê-la, digite /atendercobrar. Caso contrário, digite /recusarchamada.");
			format(str,128,"Originador da chamada: %s",PlayerName(playerid));
			SendClientMessage(calledid,COLOR_GRAY,str);
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
			Chamando[playerid]=1;
			Chamando[calledid]=1;
			CalledID[playerid]=calledid;
			CalledID[calledid]=playerid;
			CobrancaCall[playerid]=1;
			CobrancaCall[calledid]=0;
		}
		else{
		    set(cellowner,pckStats[getpck][PickupDono]);
			if(!IsStringAName(cellowner)){
		    	format(RecebedorMensagem[playerid],128,cellowner);
		    	SendClientMessage(playerid,COLOR_YELLOW,"Chamando...");
		    	TempoCaixaMensagem[playerid][0] = SetTimerEx("CaixaMensagem",10000,0,"d",playerid);
		    	return 1;
			}
			new presult;
		    for(new p = 0; p < MAX_CASAS; p++){
		        if(strval(tmp) == pckStats[p][TelefoneNumb]){
		            presult = p;
		            break;
				}
			}
			if(presult == PickupEntradaCasa[playerid]){
			    SendClientMessage(playerid, COLOR_GRAY, "Tentando ligar para a casa que você está? Impossível aqui!");
			    return 1;
			}
			if(TellUsing[presult] == 1 || TelefoneTocando[presult] == 1){
			    SendClientMessage(playerid, COLOR_GRAY, "O telefone dessa casa está ocupado!");
			    return 1;
			}
            TelefoneTocando[presult] = 1;
			PickupCaller[presult] = playerid;
			format(RecebedorMensagem[playerid],128,pckStats[PickupEntradaCasa[playerid]][PickupDono]);
		    for(new i = 0; i < MAX_SLOTS; i++){
		        if(NaCasa[i] == 1 && PickupEntradaCasa[i] == presult){
		            SendClientMessage(i, COLOR_JUIZ, "Telefone tocando... Para atender digite /atendertelefone");
				}
			}
		}
		extensao[playerid] = EXTENSION_CELULAR;
		TempoCaixaMensagem[playerid][0] = SetTimerEx("CaixaMensagem",20000,0,"d",playerid);
		SendClientMessage(playerid,COLOR_JUIZ,"Chamando...");
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
		return 1;
	}
	if(!strcmp(cmd,"/atendercobrar",true)){
	    if(Chamando[playerid]==0){
	        SendClientMessage(playerid,COLOR_GRAY,"Ninguém está lhe chamando!");
	        return 1;
		}
		extensao[playerid] = EXTENSION_CELULAR;
		SendClientMessage(playerid,COLOR_GRAY,"Pronto!");
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
		SendClientMessage(CalledID[playerid],COLOR_GRAY,"Quem você chamava aceitou sua ligação! Pode conversar!");
		Chamando[playerid]=0;
		Chamando[CalledID[playerid]]=0;
		EmLigacao[playerid]=1;
		EmLigacao[CalledID[playerid]]=1;
		KillTimer(TempoCaixaMensagem[playerid][0]);
		KillTimer(TempoCaixaMensagem[CalledID[playerid]][0]);
		if(CobrancaCall[playerid] == 0){
			CellTimer[playerid]=SetTimerEx("AvancoLigacao",60000,false,"dd",CalledID[playerid],playerid);
		} else {
		    CellTimer[CalledID[playerid]]=SetTimerEx("AvancoLigacao",60000,false,"dd",playerid,CalledID[playerid]);
		}
		return 1;
	}
	if(!strcmp(cmd,"/atender",true)){
	    if(Chamando[playerid]==0){
	        SendClientMessage(playerid,COLOR_GRAY,"Ninguém está lhe chamando!");
	        return 1;
		}
		extensao[playerid] = EXTENSION_CELULAR;
		SendClientMessage(playerid,COLOR_GRAY,"Pronto!");
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
		SendClientMessage(playerid, COLOR_WHITE, "Telefone atendido!");
		SendClientMessage(CalledID[playerid],COLOR_GRAY,"Quem você chamava aceitou sua ligação! Pode conversar!");
		KillTimer(TocandoBIP[playerid]);
		Chamando[playerid]=0;
		Chamando[CalledID[playerid]]=0;
		EmLigacao[playerid]=1;
		EmLigacao[CalledID[playerid]]=1;
		KillTimer(TempoCaixaMensagem[playerid][0]);
		KillTimer(TempoCaixaMensagem[CalledID[playerid]][0]);
        switch(extensao[CalledID[playerid]]){
			case EXTENSION_TELEFONE:
			{
				TellUsing[PickupEntradaCasa[extensao[CalledID[playerid]]]] = 1;
				PickupCaller[PickupEntradaCasa[extensao[CalledID[playerid]]]] = playerid;
				SendClientMessage(playerid, COLOR_JUIZ, "Extensão usada pelo outro jogador: Telefone");
			}
			case EXTENSION_CELULAR:
			{
			    SendClientMessage(playerid, COLOR_JUIZ, "Extensão usada pelo outro jogador: Celular");
			}
			case EXTENSION_ORELHAO:
			{
			    SendClientMessage(playerid, COLOR_JUIZ, "Extensão usada pelo outro jogador: Telefone público (orelhão)");
			}
			default:
			{
			    TellUsing[PickupEntradaCasa[extensao[CalledID[playerid]]]] = 1;
				PickupCaller[PickupEntradaCasa[extensao[CalledID[playerid]]]] = playerid;
				SendClientMessage(playerid, COLOR_GRAY, "A extensão do outro jogador não foi identificada!");
			}
		}
		if(CobrancaCall[playerid] == 0){
			CellTimer[CalledID[playerid]]=SetTimerEx("AvancoLigacao",60000,false,"dd",CalledID[playerid],playerid);
		} else {
		    CellTimer[playerid]=SetTimerEx("AvancoLigacao",60000,false,"dd",playerid,CalledID[playerid]);
		}
		return 1;
	}
	if(!strcmp(cmd,"/recusarchamada",true)){
	    if(Chamando[playerid]==0){
	        SendClientMessage(playerid,COLOR_GRAY,"Ninguém está lhe chamando!");
			return 1;
		}
		extensao[playerid] = EXTENSION_NONE;
		SendClientMessage(playerid,COLOR_JUIZ,"Chamada cancelada!");
		SendClientMessage(CalledID[playerid],COLOR_GRAY,"Seu pedido de ligação foi recusado!");
		SetPlayerSpecialAction(CalledID[playerid],SPECIAL_ACTION_STOPUSECELLPHONE);
		Chamando[playerid]=0;
		Chamando[CalledID[playerid]]=0;
		KillTimer(TempoCaixaMensagem[playerid][0]);
		KillTimer(TempoCaixaMensagem[CalledID[playerid]][0]);
		return 1;
	}
	if(!strcmp(cmd,"/desligar",true)){
	    if(EmLigacao[playerid] == 1){
			if(CobrancaCall[playerid] == 0){
			    KillTimer(CellTimer[CalledID[playerid]]);
			}
			if(CobrancaCall[playerid] == 1){
			    KillTimer(CellTimer[playerid]);
			}
			SetPlayerControl(playerid,1);
			EmLigacao[playerid]=0;
			EmLigacao[CalledID[playerid]]=0;
			KillTimer(TempoCaixaMensagem[playerid][0]);
			KillTimer(TempoCaixaMensagem[CalledID[playerid]][0]);
			extensao[playerid] = EXTENSION_NONE;
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
			SetPlayerSpecialAction(CalledID[playerid],SPECIAL_ACTION_STOPUSECELLPHONE);
			SendClientMessage(playerid,COLOR_GRAY,"Chamada desligada!");
			SendClientMessage(CalledID[playerid],COLOR_GRAY,"Chamada desligada");
			if(extensao[CalledID[playerid]] == EXTENSION_TELEFONE) Atendente[PickupEntradaCasa[PickupCaller[PickupEntradaCasa[playerid]]]] = INVALID_PLAYER_ID;
			if(extensao[CalledID[playerid]] == EXTENSION_ORELHAO) TelefoneOcupado[TellPublico[CalledID[playerid]]] = 0;
			return 1;
		} else if(Ligou190[playerid] != 0){
			SendClientMessage(playerid,COLOR_GRAY,"Chamada desligada!");
			Ligou190[playerid] = 0;
		} else {
	        SendClientMessage(playerid,COLOR_GRAY,"Você não está em uma ligação!");
	        return 1;
		}
		
	}
	if(strcmp(cmd, "/sms", true) == 0){
	 	new tmp[128],tmp2[128],cellowner[128];
	 	new string[128];
		tmp = strtok(cmdtext, idx);
		if(pStats[playerid][PhoneNumb] == 0){
			SendClientMessage(playerid, COLOR_YELLOW, "Você não tem celular!");
			return 1;
		}
		if(!strlen(tmp)){
			SendClientMessage(playerid,COLOR_GRAY,"Uso: /sms [número-celular] [texto]");
			return 1;
		}
		strmid(tmp2,cmdtext,10,256);
		if(!strlen(tmp2)){
		    SendClientMessage(playerid,COLOR_GRAY,"Uso: /sms [número-celular] [texto]");
		    return 1;
		}
		if(strval(tmp) > LastPN){
		    SendClientMessage(playerid,COLOR_YELLOW,"Número de celular inexistente");
		    return 1;
		}
		if(pStats[playerid][GCell] == 1 || pStats[playerid][CofreCell] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Seu celular está guardado e desativado!");
		    return 1;
		}
		set(cellowner,CelularesNum[strval(tmp)-1000]);
		if(!IsStringAName(cellowner)){
		    SendClientMessage(playerid,COLOR_GRAY,"O proprietário desse celular não está conectado!");
		    return 1;
		}
		if(pStats[playerid][CreditosCell] == 0){
		    SendClientMessage(playerid,COLOR_GRAY,"Você não tem créditos o suficiente para mandar um SMS.");
		    return 1;
		}
		new calledid = IDName(cellowner);
		if((pStats[calledid][GCell] == 1 || pStats[calledid][CofreCell] == 1) && strval(tmp) < 300000){
		   	SendClientMessage(playerid, COLOR_GRAY, "O celular do outro jogador está desligado...");
		   	return 1;
		}
		pStats[playerid][CreditosCell]--;
		SendClientMessage(calledid,COLOR_JUIZ,"Nova mensagem de texto recebida!");
		format(string, sizeof(string), "De: %s (%d). Conteúdo: %s", PlayerName(playerid), pStats[playerid][PhoneNumb],tmp2);
		SendClientMessage(calledid,COLOR_WHITE,string);
		SendClientMessage(playerid, COLOR_WHITE, "Mensagem Enviada");
		format(string, sizeof(string), "Agora lhe sobraram %d créditos.", pStats[playerid][CreditosCell]);
		SendClientMessage(playerid, COLOR_JUIZ, string);
		format(string,sizeof(string), "SMS de %s para %s: %s",PlayerName(playerid),PlayerName(calledid),tmp2);
		writelog(string);
		return 1;
	}
    if(strcmp(cmd, "/recarga", true) == 0) {
		new tmp[128];
		new creditos;
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_WHITE, "Uso: /recarga [quantidade]");
			return 1;
		}
	    creditos = strval(tmp);
	    if(creditos > GetPlayerServerMoney(playerid)){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não tem todo esse dinheiro.");
			return 1;
		}
		if(pStats[playerid][PhoneNumb] == 0){
		    SendClientMessage(playerid,COLOR_GRAY,"Você não tem celular!");
		    return 1;
		}
		if(pStats[playerid][GCell] == 1 || pStats[playerid][CofreCell] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Seu celular está guardado e desativado!");
		    return 1;
		}
	    if(PlayerArea[playerid] == AreaCreditos){
	        if(creditos + pStats[playerid][CreditosCell] < 100){
	            pStats[playerid][CreditosCell] = creditos+pStats[playerid][CreditosCell];
			    format(tmp, sizeof(tmp), "Seu celular foi recarregado. Um total de %d créditos foi colocado.", creditos);
				SendClientMessage(playerid, COLOR_JUIZ, tmp);
				AddPlayerMoney(playerid, - creditos, -1);
				return 1;
			}
			if(creditos + pStats[playerid][CreditosCell] > 99){
			    new quantia;
			    quantia = 100 - pStats[playerid][CreditosCell];
			    pStats[playerid][CreditosCell] = 100;
				format(tmp, sizeof(tmp),"Seu celular foi recarregado por completo. Um total de %d créditos foi colocado.", quantia);
				SendClientMessage(playerid, COLOR_GREEN, tmp);
				AddPlayerMoney(playerid, - quantia, -1);
				return 1;
			}
			return 1;
		}
		else{
			SendClientMessage(playerid, COLOR_YELLOW, "Todas as lojas 24/7 tem a função de /recarga pra o celular");
			return 1;
		}
	}

	if(strcmp(cmd, "/cellcreditos", true) == 0) {
 		new string[128];
		if(pStats[playerid][PhoneNumb] == 0){
		    SendClientMessage(playerid,COLOR_GRAY,"Você não tem celular!");
		    return 1;
		}
		if(pStats[playerid][GCell] == 1 || pStats[playerid][CofreCell] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Seu celular está guardado e desativado!");
		    return 1;
		}
		else{
		    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
			SetTimerEx("AcaoEspecial",6000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
			format(string, sizeof(string), "[Virtual Telefonia]: Você tem %d créditos.", pStats[playerid][CreditosCell], playerid);
			SendClientMessage(playerid, COLOR_JUIZ, string);
			SetTimerEx("AcaoEspecial",6000,0,"dxs",playerid,COLOR_COP_SWAT,string);
			return 1;
		}
	}
	if (strcmp(cmd, "/numero", true) == 0){
	    new tmp[128],phone;
	    new string[128];
		if (pStats[playerid][Agenda] == 1){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD, "USO: /numero [nome]");
				return 1;
			}
			if(pStats[playerid][PhoneNumb] == 0){
				SendClientMessage(playerid, COLOR_GRAD, "Você não tem celular.");
				return 1;
			}
			if(pStats[playerid][PhoneNumb] != 0){
				if(IsStringAName(tmp)){
					phone = pStats[IDName(tmp)][PhoneNumb];
					format(string,128,"Nome:%s, Número:%d",tmp,phone);
					SendClientMessage(playerid,COLOR_JUIZ,string);
				} else if(fexist(PlayerFile(tmp))){
					phone = strval(GetValue(PlayerFile(tmp),"PhoneNumb"));
					format(string,128,"Nome:%s, Número:%d",tmp,phone);
					SendClientMessage(playerid,COLOR_JUIZ,string);
	    		} else {
				    SendClientMessage(playerid,COLOR_GRAY,"Não foi encontrado nenhum registro para seus critérios de pesquisa.");
				}
				return 1;
			}
		} else {
			SendClientMessage(playerid, COLOR_GRAD, "Você não tem uma agenda telefônica!");
			return 1;
		}
	}
	if (strcmp(cmd, "/agenda", true) == 0){
		if(PlayerArea[playerid] != AreaCreditos){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está na loja de utilidades 1,99");
		    return 1;
		}
        if(GetPlayerServerMoney(playerid) < 500){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para pagar. CUSTO: $500");
			return 1;
		}
		if(pStats[playerid][Agenda] == 1){
			SendClientMessage(playerid, COLOR_WHITE, "Você já tem agenda telefônica.");
			return 1;
		}
		new string[128];
   		AddPlayerMoney(playerid,-500,-1);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		pStats[playerid][Agenda] = 1;
		format(string, sizeof(string), "Agenda Telefônica comprada, agora você poderá ver números telefônicos.");
		SendClientMessage(playerid, COLOR_JUIZ, string);
		SendClientMessage(playerid, COLOR_WHITE, "AVISO: Coloque /numero <nome>.");
		return 1;
	}
	if(strcmp(cmd, "/localizar", true)==0){
	    new tmp[128],cellowner[128],plid;
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /localizar [número]");
		if(pStats[playerid][PhoneNumb] == 0){
		    SendClientMessage(playerid,COLOR_GRAY,"Você não tem celular!");
		    return 1;
		}
		if(pStats[playerid][GCell] == 1 || pStats[playerid][CofreCell] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Seu celular está guardado e desativado!");
		    return 1;
		}
		cellowner = CelularesNum[strval(tmp)-1000];
		if(!IsStringAName(cellowner)){
			SendClientMessage(playerid, COLOR_GRAY, "O proprietário desse celular não se encontra no momento!");
			return 1;
		}
		plid = IDName(cellowner);
		if((pStats[plid][GCell] == 1 || pStats[plid][CofreCell] == 1)){
 			SendClientMessage(playerid, COLOR_GRAY, "O celular do outro jogador está desligado...");
		   	return 1;
		}
		if(Rastreando[playerid] == 1){
			SendClientMessage(playerid, COLOR_GRAY, "Você já está rastreando um jogador!");
			return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_LIXEIRO, "Pedido de rastreamento feito, aguarde a confirmação...");
			new msg[128];
			format(msg,sizeof(msg),"%s está pedindo para ativar o rastreador em sua posição!",PlayerName(playerid));
			SendClientMessage(plid, COLOR_LIXEIRO, msg);
			SendClientMessage(plid, COLOR_WHITE, "Para confirmar o pedido digite /confirmar , caso contrário /naoconfirmar");
			PedidoRastreador[plid] = 1;
			JogadorRastreamento[plid] = playerid;
			return 1;
		}
	}
	if(strcmp(cmd, "/confirmar", true) == 0){
		if(PedidoRastreador[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Ninguém solicitou ativar o rastreador em sua posição!");
		    return 1;
		}
		if(!IsPlayerConnected(JogadorRastreamento[playerid])){
		    PedidoRastreador[playerid] = 0;
			SendClientMessage(playerid, COLOR_GRAY, "O jogador desconectou-se, rastreamento cancelado!");
			return 1;
		}
		TempoRastreamento[JogadorRastreamento[playerid]] = SetTimerEx("RastreandoJogador2",1000,0,"dd",JogadorRastreamento[playerid],playerid);
		SendClientMessage(playerid, COLOR_LIXEIRO, "Confirmado! Agora o jogador terá contato com você pelo celular!");
		SendClientMessage(JogadorRastreamento[playerid], COLOR_LIXEIRO, "O jogador confirmou seu pedido para rastrea-lo, você terá contato com ele pelo celular!");
		PedidoRastreador[playerid] = 0;
		RastreandoJogador[JogadorRastreamento[playerid]] = 1;
		return 1;
	}
	if(strcmp(cmd, "/naoconfirmar", true) == 0){
	    if(PedidoRastreador[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Ninguém solicitou ativar o rastreador em sua posição!");
		    return 1;
		}
		PedidoRastreador[playerid] = 0;
		SendClientMessage(playerid, COLOR_LIXEIRO, "Autorização não confirmada!");
		SendClientMessage(JogadorRastreamento[playerid], COLOR_LIXEIRO, "O jogador não confirmou seu pedido para rastrea-lo!");
		return 1;
	}
	if(strcmp(cmd, "/desligarrastreador",true) == 0){
	    if(RastreandoJogador[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está rastreando ninguém!");
		DesligarRastreador(playerid);
		return 1;
	}
    if(strcmp(cmd, "/roubarcelular", true)==0){
        if(pStats[playerid][Prof] != ASSALTANTE) return SendClientMessage(playerid, COLOR_GRAY, "Você não é Assaltante!");
        new tmp[128];
		new plid;
		tmp = strtok(cmdtext,idx);
		plid = strval(tmp);
		if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_GRAY, "USO: /roubarcelular [id]");
			return 1;
		}
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador está desconectado!");
		    return 1;
		}
		if(GetDistanceBetweenPlayers(playerid,plid) > 4){
		    SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto...");
		    return 1;
		}
		if(IsPlayerInAnyVehicle(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "O jogador tem que estar fora do veículo!");
		    return 1;
		}
		if(pStats[playerid][PhoneNumb] != 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você já tem celular!");
		    return 1;
		}
		if(pStats[plid][PhoneNumb] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não tem celular!");
		    return 1;
		}
		if(pStats[plid][GCell] == 1 || pStats[plid][CofreCell] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "O celular desse jogador está guardado!");
		    return 1;
		}
		else{
        	for(new p=1000; p<LastPN; p++){
        	    if(compare(PlayerName(plid),CelularesNum[p-1000])){
					new string[128];
					format(string,sizeof(string),"Celular roubado, seu novo número = %d",p);
					SendClientMessage(playerid, COLOR_ASSALTANTE, string);
					set(CelularesNum[p-1000],PlayerName(playerid));
					if(!IsPlayerTransparent(playerid))
					{
						format(string,sizeof(string),"%s ROUBOU SEU CELULAR! RÁPIDO AVISE A POLÍCIA",PlayerName(playerid));
						SendClientMessage(plid, COLOR_GRAY, string);
					}
					else
					{
                        SendClientMessage(plid, COLOR_GRAY, "Um jogador camuflado ROUBOU SEU CELULAR! RÁPIDO AVISE A POLÍCIA.");
					}
					pStats[plid][PhoneNumb] = 0;
					pStats[playerid][PhoneNumb] = p;
				}
			}
			AcrescentarXpoints(playerid,1);
			return 1;
		}
	}
	if(strcmp(cmd,"/votekick",true) == 0)
	{
	    if(VoteKickPlayer != -1)
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Já há uma votação em andamento, aguarde...");
		    return 1;
	    }
	    PlayerCount = 0;
	    for(new i = 0; i < MAX_SLOTS; i++)
	    {
	        if(IsPlayerConnected(i))
	        {
	            PlayerCount++;
	        }
	    }
	    PlayerCount /= 2;
	    PlayerCount += 1;
  	    if(PlayerCount < 2)
	    {
	        PlayerCount = 0;
	        SendClientMessage(playerid, COLOR_GRAY, "É necessário mais jogadores para iniciar uma votação...");
		    return 1;
	    }
	    new tmp[128];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /votekick [id] [motivo]");
		    return 1;
		}
		new plid = strval(tmp);
		if(!IsPlayerConnected(plid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		    return 1;
		}
		new motivo[128];
		if(plid < 10) strmid(motivo, cmdtext, 12, strlen(cmdtext));
		else if(plid < 100) strmid(motivo, cmdtext, 13, strlen(cmdtext));
		else strmid(motivo, cmdtext, 14, strlen(cmdtext));
		if(!strlen(motivo))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /votekick [id] [motivo]");
		    return 1;
		}
		new string[128];
		format(string, sizeof string, "[VOTEKICK] %s iniciou uma votação para kickar %s [Votos necessários: %d]", PlayerName(playerid), PlayerName(plid), PlayerCount);
		SendClientMessageToAll(COLOR_PALHA, string);
		format(string, sizeof string, "[VOTEKICK] Motivo: %s", motivo);
		SendClientMessageToAll(COLOR_PALHA, string);
		SendClientMessageToAll(COLOR_WHITE, "Use /votar para votar.");
		VoteKickPlayer = plid;
		VoteKickTimer = SetTimer("VoteKick", 30000, false);
		Votes = 1;
		Voted[playerid] = 1;
		SendClientMessage(playerid, COLOR_JUIZ, "Seu voto já foi dado, agora somente aguarde...");
		return 1;
	}
	if(strcmp(cmd,"/votar",true) == 0)
	{
	    if(VoteKickPlayer == -1)
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Não há nenhuma votação em andamento.");
		    return 1;
	    }
	    if(Voted[playerid] == 1)
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você já votou, aguarde o fim da votação...");
		    return 1;
	    }
	    Voted[playerid] = 1;
	    Votes++;
	    new string[128];
	    format(string, sizeof string, "[VOTEKICK] Votos: %d/%d", Votes, PlayerCount);
	    SendClientMessageToAll(COLOR_PALHA, string);
	    if(Votes >= PlayerCount)
	    {
			format(string, sizeof string, "[VOTEKICK] Votação para kickar %s sucedida, jogador kickado.", PlayerName(VoteKickPlayer));
			SendClientMessageToAll(COLOR_PALHA, string);
			Kick(VoteKickPlayer);
			Votes = 0;
			VoteKickPlayer = -1;
			for(new i = 0; i < MAX_SLOTS; i++)
			{
	    		Voted[i] = 0;
			}
			PlayerCount = 0;
			KillTimer(VoteKickTimer);
	    }
	    return 1;
	}
	if(strcmp(cmd,"/salvardados",true) == 0){
	    if(IsPlayerConnected(playerid) && Logado[playerid]==1)
	    {
	        if(MiniGame[playerid] == 0 && CarregouArmas[playerid] == 1 && !pStats[playerid][Morrendo] && !pStats[playerid][Preso]) SaveWeapons(playerid);
	        SavePlayer(PlayerName(playerid),playerid);
	        SendClientMessage(playerid, COLOR_JUIZ, "Dados salvos...");
	        return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você deve estar logado para usar esse comando...");
		    return 1;
		}
	}
	if(strcmp(cmd,"/veranuncio",true) == 0 && IsPlayerAdmin(playerid)){
	    EnviarAnuncio(playerid);
	    return 1;
	}
    if(strcmp(cmd,"/mandarmatar",true) == 0){
        new tmp[128];
		new plid,valor;
		tmp = strtok(cmdtext,idx);
		plid = strval(tmp);
		if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_GRAY, "USO: /mandarmatar [id] [valor]");
			return 1;
		}
		tmp = strtok(cmdtext,idx);
		valor = strval(tmp);
		if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_GRAY, "USO: /mandarmatar [id] [valor]");
			return 1;
		}
		if(!IsPlayerConnected(plid)){
			SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
			return 1;
		}
		if(GetPlayerServerMoney(playerid) < valor){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não possui esse dinheiro!");
		    return 1;
		}
		if(pStats[playerid][Prof] == ASSASSINO){
		    SendClientMessage(playerid, COLOR_GRAY, "Você é assassino! Não pode colocar a cabeça de alguém em prêmio.");
		    return 1;
		}
		if(plid == playerid){
		    SendClientMessage(playerid, COLOR_GRAY, "WHAT?! Está querendo se matar?");
		    return 1;
		}
		if(pStats[plid][Prof] == ASSASSINO){
		    SendClientMessage(playerid, COLOR_GRAY, "Está querendo mexer com os assassinos? Se quiser matar um, chame outro via celular.");
		    return 1;
		}
		else{
		    pStats[plid][ValorCabeca] += valor;
		    AddPlayerMoney(playerid, -valor, -1);
		    SendClientMessage(playerid, COLOR_GREEN, "Prêmio colocado! Se a polícia descobrir que você ofereceu essa grana,");
		    SendClientMessage(playerid, COLOR_GREEN, "você irá ser preso... CUIDADO!!");
		    for(new i=0; i<MAX_SLOTS; i++){
				if(pStats[i][Prof] == ASSASSINO || IsPlayerAdmin(i)){
		    		new str[128];
		    		format(str,sizeof(str),"Um indivíduo está oferecendo $%d pela cabeça de %s",valor,PlayerName(plid));
					SendClientMessage(i, COLOR_ASSASSINO, str);
					format(str,sizeof(str),"Agora a cabeça de %s está valendo $%d",PlayerName(plid),pStats[plid][ValorCabeca]);
					SendClientMessage(i, COLOR_ASSASSINO, str);
		        }
			}
			new rand = random(5);
			if(rand == 0 || rand == 1 || rand == 2){
			    SendClientMessage(playerid, COLOR_GREEN, "Sorte sua... A polícia nem chegou à saber que você colocou esse prêmio!");
			}
			else{
			    new str[128];
				AcusacaoCrime(playerid,  "NONE", PlayerName(plid) , "Tentativa de Homicídio", 2, 1, 500, 0);
			    SendClientMessage(playerid, COLOR_GRAY, "Você acabar de se dar mal... Os cops descobriram o seu prêmio! Agora você pode entrar em cana...");
				format(str,sizeof(str),"[CENTRAL] [Valor Oferecido para a execução: $%d] Vá atrás do mesmo antes que isso ocorra!, câmbio desligo",pStats[plid][ValorCabeca]);
				SendClientMessagePolicia(COLOR_CENTRAL, str);
			}
			new rand2 = random(5);
			if(rand2 == 4)
			{
				new str[128];
				format(str,sizeof(str),"New Paper's Life: EXTRA EXTRA, alguém está querendo matar %s! Não sabemos se a polícia já sabe.",PlayerName(plid));
				SendClientMessageToAll(COLOR_WHITE, str);
			}
			return 1;
		}
	}
	
	if(strcmp(cmd, "/desativarcheckpoint", true) == 0){
		if(RaceCheckpointStatus[playerid] == SERVICO || IndoLocalDenuncia[playerid] == 1){
			RaceCheckpointStatus[playerid] = RNONE;
	    	DisablePlayerRaceCheckpoint(playerid);
	    	FazendoCorrida[playerid] = 0;
	    	CorridaToI[playerid] = -1;
	    	EntregaArmaILigada[playerid] = 0;
	    	EntregaDrogaILigada[playerid] = 0;
	    	SendClientMessage(playerid, COLOR_WHITE, "  Checkpoint desativado.");
	    	if(IsPlayerConnected(CorridaToI[playerid])){
	    	    SendClientMessage(CorridaToI[playerid], COLOR_YELLOW, "[YELLOW'S Taxis] O Taxista que atendeu seu pedido não pode ir, caso queira outro taxi solicite.");
	    	}
	   	 	return 1;
		} else if(IndoLocalDenuncia[playerid] == 1){
	    	IndoLocalDenuncia[playerid] = 0;
			CPLocal[playerid][0] = 0;
			CPLocal[playerid][1] = 0;
			CPLocal[playerid][2] = 0;
			CheckpointStatus[playerid] = NONE;
	    	DisablePlayerCheckpoint(playerid);
	    	SendClientMessage(playerid, COLOR_WHITE, "  Averiguação de denúncia cancelada.");
	    	return 1;
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "Seu Checkpoint não está ativado!");
		    return 1;
		}
	}
	if(strcmp(cmd, "/motorista", true) == 0){
		new string[128];
		if(!TemProfissao(MOTORISTA_PARTICULAR)){
		    SendClientMessage(playerid, COLOR_GRAY, "LuxLimosine: Não há nenhum motorista ativo no momento para solicitarmos...");
			return 1;
		}
		for(new i = 0; i < MAX_SLOTS; i ++){
			if(pStats[i][Prof] == MOTORISTA_PARTICULAR || IsPlayerAdmin(i)){
			    format(string,sizeof(string),"LuxLimosine: %s está solicitando um motorista particular!",PlayerName(playerid));
				SendClientMessage(i, COLOR_MOTORISTA_PARTICULAR, string);
			}
		}
		SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "LuxLimosine: Obrigado por prestar nossos serviços senhor, os motoristas foram informados!");
		format(string,sizeof(string),"[INFO] %s solicitou um motorista particular...",PlayerName(playerid));
		writelog(string);
		return 1;
	}
	if(strcmp(cmd, "/taxi", true)==0 || strcmp(cmd, "/mecanico", true)==0 || strcmp(cmd, "/diskdroga", true)==0 || strcmp(cmd, "/frentista", true)==0 || strcmp(cmd,"/diskdroga",true)==0){
	    SendClientMessage(playerid, COLOR_PESCADOR, "Esse comando foi desabilitado agora está todo embotido em um só:");
	    SendClientMessage(playerid, COLOR_PESCADOR, "Para chamar um taxi, mecanico, frentista, diskdroga. Basta utilizar:");
	    SendClientMessage(playerid, COLOR_PESCADOR, "/servico [taxi, pizza, mecanico, diskdroga, frentista, diskarma]");
	    return 1;
	}
	if(strcmp(cmd, "/servico", true)==0){
		if(CelularBloqueado[playerid] == 1){
   			SendClientMessage(playerid, COLOR_GRAY, "Você não está com seu celular.");
			return 1;
		}
	   	if(pStats[playerid][PhoneNumb] != 0 || pStats[playerid][Prof] == DESEMPREGADO){
		    new string[128];
		    new tmp[128];
		    new Float:X,Float:Y,Float:Z;
		    tmp = strtok(cmdtext, idx);
			GetPlayerPos(playerid,X,Y,Z);
	        new zone[28];
			GetPlayer2DZone(playerid, zone, 28);
			if(compare(tmp,"taxi")){
			    if(GetPlayerInterior(playerid) == 0){
		     		if(TemProfissao(TAXISTA) || TemProfissao(MOTO_TAXISTA)){
		     		    if(!IsPlayerInAnyVehicle(playerid) && GetPlayerControl(playerid) == 1)
		        		{
		            		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
	    					SetTimerEx("AcaoEspecial",4000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		        		}
		     		    SendClientMessage(playerid, COLOR_TAXISTA, "Os taxistas foram informados.");
		     	    	for(new i=0; i<MAX_SLOTS; i++){
					    	if((pStats[i][Prof] == TAXISTA || pStats[i][Prof] == MOTO_TAXISTA) && i != playerid){
					    		PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
					    		GetPlayerPos(playerid,LocalRadarTaxi[i][0],LocalRadarTaxi[i][1],LocalRadarTaxi[i][2]);
								format(string,sizeof(string),"[YELLOW'S Taxis] %s chamou um taxi.",PlayerName(playerid));
								SendClientMessage(i, COLOR_TAXISTA, string);
								SendClientMessage(i, COLOR_TAXISTA, "[YELLOW'S Taxis] Para atender o chamado do passageiro, Digite: /res.");
								format(string,sizeof(string),"[INFO] %s pediu um taxi.",PlayerName(playerid));
								writelog(string);
								CorridaToI[i] = playerid;
					        }
						}
						return 1;
					} else {
					   	SendClientMessage(playerid, COLOR_DESEMPREGADO, "A Companhia de Taxi não encontrou nenhum Taxista ou Mototaxista. Por favor tente mais tarde.");
						return 1;
					}
				} else {
				   	SendClientMessage(playerid, COLOR_DESEMPREGADO, "Você só pode pedir taxi quando estiver fora de estabelecimentos.");
					return 1;
				}
	 		} else if(compare(tmp,"pizza")){
				if(TemProfissao(ENTREGADOR_PIZZA)){
				    if(!IsPlayerInAnyVehicle(playerid) && GetPlayerControl(playerid) == 1)
	        		{
	            		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
    					SetTimerEx("AcaoEspecial",4000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	        		}
			    	SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, "[PIZZARIA] Olá senhor, agradecemos sua ligação, aguarde o Entregador, por favor não saía da área do pedido.");
	    			for(new i=0; i<MAX_SLOTS; i++){
						if(pStats[i][Prof] == ENTREGADOR_PIZZA && i != playerid){
	 						GetPlayerPos(playerid,LocalRadarPizza[i][0],LocalRadarPizza[i][1],LocalRadarPizza[i][2]);
							PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
							format(string,sizeof(string),"[PIZZARIA] %s está solicitando uma pizza. [Local: %s]",PlayerName(playerid),zone);
							SendClientMessage(i, COLOR_ENTREGADOR_PIZZA, string);
							SendClientMessage(i, COLOR_ENTREGADOR_PIZZA,"[PIZZARIA] Para responder o chamado, Digite: /res.");
							EntregaPizzaILigada[i] = playerid;
	   						format(string,sizeof(string),"[INFO] %s pediu uma pizza.",PlayerName(playerid));
							writelog(string);
				        }
			   		}
			   		return 1;
				} else {
			    	SendClientMessage(playerid, COLOR_DESEMPREGADO, "A Pizzaria não encontrou nenhum Entregador. Por favor tente mais tarde.");
					return 1;
				}
			} else if(compare(tmp,"diskdroga")){
				if(TemProfissao(TRAFICANTE)){
				    if(!IsPlayerInAnyVehicle(playerid) && GetPlayerControl(playerid) == 1)
	        		{
	            		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
    					SetTimerEx("AcaoEspecial",4000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	        		}
					SendClientMessage(playerid, COLOR_TRAFICANTE, "[MORRO] Guenta aí mano, vamo ver se temo alguém pra deixar o bagulho.");
	    			for(new i=0; i<MAX_SLOTS; i++){
						if(pStats[i][Prof] == TRAFICANTE && i != playerid){
	 						GetPlayerPos(playerid,LocalRadarDroga[i][0],LocalRadarDroga[i][1],LocalRadarDroga[i][2]);
							PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
							format(string,sizeof(string),"[MORRO] E aí truta, o doido do %s está solicitando uns bagulho, vai lá?. [Local: %s]",PlayerName(playerid),zone);
							SendClientMessage(i, COLOR_TRAFICANTE, string);
							SendClientMessage(i, COLOR_TRAFICANTE,"[MORRO] Para responder o chamado, Digite: /res.");
							EntregaDrogaILigada[i] = playerid;
	   						format(string,sizeof(string),"[INFO] %s pediu uma droga.",PlayerName(playerid));
							writelog(string);
				        }
			   		}
			   		return 1;
				} else {
			    	SendClientMessage(playerid, COLOR_TRAFICANTE, "[MORRO] Maluco num tem ninguém aqui pra te entrega droga agora...");
					return 1;
				}
	        } else if(compare(tmp,"mecanico")){
				if(!TemProfissao(MECANICO)){
					SendClientMessage(playerid, COLOR_DESEMPREGADO, "[OFICINA] Sinto muito, não há nenhum mecânico disponível no momento!");
					return 1;
				}
				if(!IsPlayerInAnyVehicle(playerid) && GetPlayerControl(playerid) == 1)
	        	{
	           		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
    				SetTimerEx("AcaoEspecial",4000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
       			}
				SendClientMessage(playerid, COLOR_MECANICO, "Reboque/Mecânico chamado.");
				for(new i=0; i<MAX_SLOTS; i++){
				    if(pStats[i][Prof] == MECANICO && i != playerid){
						SendClientMessage(i, COLOR_MECANICO, " ");
						format(string,sizeof(string),"[OFICINA] %s está solicitando um reboque. [ Local: %s ].",PlayerName(playerid),zone);
						SendClientMessage(i, COLOR_MECANICO, "Foi marcado o CP, Para desativa-lo digite /desativarcheckpoint");
						SetPlayerRaceCheckpoint(i,1,X,Y,Z,0.0,0.0,0.0,2.0);
						RaceCheckpointStatus[i] = SERVICO;
						SendClientMessage(i, COLOR_MECANICO, string);
					}
				}
				format(string,sizeof(string),"[INFO] %s chamou um mecanico.");
				writelog(string);
				return 1;
	        } else if(compare(tmp,"frentista")){
				if(!TemProfissao(FRENTISTA)){
					SendClientMessage(playerid, COLOR_DESEMPREGADO, "[POSTO] Lamento, não temos nenhum frentista trabalhando no momento!");
					return 1;
				}
				if(!IsPlayerInAnyVehicle(playerid) && GetPlayerControl(playerid) == 1)
	        	{
	           		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
    				SetTimerEx("AcaoEspecial",4000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
       			}
				SendClientMessage(playerid, COLOR_FRENTISTA, "Frentista chamado.");
				format(string,sizeof(string),"%s está chamando um frentista [ Local: %s ]", PlayerName(playerid), zone);
				for(new i=0; i<MAX_SLOTS; i++){
				    if(pStats[i][Prof] == FRENTISTA && i != playerid){
						SendClientMessage(i, COLOR_FRENTISTA, string);
					}
				}
				format(string,sizeof(string),"[INFO] %s chamou um frentista.");
				writelog(string);
				return 1;
	        } else if(compare(tmp,"diskarma")){
				if(TemProfissao(VENDEDOR_DE_ARMAS)){
				    if(!IsPlayerInAnyVehicle(playerid) && GetPlayerControl(playerid) == 1)
	        		{
	            		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
    					SetTimerEx("AcaoEspecial",4000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	        		}
					SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS, "[AMMU-NATION]  Senhor, aguarde a resposta do Vendedor sobre seu pedido, Obrigado.");
	    			for(new i=0; i<MAX_SLOTS; i++){
						if(pStats[i][Prof] == VENDEDOR_DE_ARMAS && i != playerid){
	 						GetPlayerPos(playerid,LocalRadarArma[i][0],LocalRadarArma[i][1],LocalRadarArma[i][2]);
							PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
							format(string,sizeof(string),"[AMMU-NATION] O %s está chamanda alguém para ir deixar uma arma, vá deixar. [Local: %s]",PlayerName(playerid),zone);
							SendClientMessage(i, COLOR_VENDEDOR_DE_ARMAS, string);
							SendClientMessage(i, COLOR_VENDEDOR_DE_ARMAS,"[AMMU-NATION]  Para responder o chamado, Digite: /res.");
							EntregaArmaILigada[i] = playerid;
	   						format(string,sizeof(string),"[INFO] %s pediu uma arma.",PlayerName(playerid));
							writelog(string);
				        }
			   		}
			   		return 1;
				} else {
			    	SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS, "[AMMU-NATION] Desculpe, não temos ninguém aqui pra deixar essa arma, tente mais tarde");
					return 1;
				}
			} else {
			    SendClientMessage(playerid, COLOR_GRAY,"USO CORRETO: /servico [taxi, pizza, diskdroga, mecanico, frentista, diskarma]");
				return 1;
			}
		} else {
			SendClientMessage(playerid,COLOR_GRAY,"Você não tem celular!");
	       	return 1;
		}
	}
	
	if(strcmp(cmd, "/190", true)==0){
		if(CelularBloqueado[playerid] == 1){
   			SendClientMessage(playerid, COLOR_GRAY, "Você não está com seu celular.");
			return 1;
		}
	    if(pStats[playerid][PhoneNumb]==0){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não tem celular!");
	        return 1;
		}
		if(pStats[playerid][GCell] == 1 || pStats[playerid][CofreCell] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Seu celular está guardado e desativado!");
		    return 1;
		}
		if(!TemProfissao(COP_SWAT) && !TemProfissao(COP_RODOVIARIO) && !TemProfissao(COP_MILITAR) && !TemProfissao(DELEGADO)){
		    SendClientMessage(playerid, COLOR_COP_SWAT, "[CENTRAL] Desculpe, nenhuma viatura encontrada para seu chamado.");
			return 1;
		}
 		else{
		    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
			SetTimerEx("AcaoEspecial",6000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
			SendClientMessage(playerid,COLOR_YELLOW,"	Chamando...");
			SendClientMessage(playerid,COLOR_CENTRAL,"[CENTRAL] Alô, peço que mantenha a calma e me fale o que está acontecendo.");
			Ligou190[playerid] = 2;
		}
		return 1;
 	}


	if(strcmp(cmd, "/checar", true) == 0) {
        new string[128];
	    if(pStats[playerid][Prof] == COP_MILITAR || pStats[playerid][Prof] == COP_RODOVIARIO || pStats[playerid][Prof] == COP_SWAT || pStats[playerid][Prof] == DELEGADO){
		    if(CPLocal[playerid][0] != 0){
		        if(IndoLocalDenuncia[playerid] == 0){
					SetPlayerCheckpoint(playerid,CPLocal[playerid][0],CPLocal[playerid][1],CPLocal[playerid][2],5.0);
					CheckpointStatus[playerid] = DENUNCIA_POLICIAL;
					SendClientMessage(playerid, COLOR_PARAMEDICO, " ");
					format(string,sizeof(string),"[CENTRAL COP] O Oficial: %s atendeu ao último chamado. Chamado:\" %s\"", PlayerName(playerid),LastChamadaDenuncia);
					SendClientMessagePolicia(COLOR_CENTRAL,string);
					SendClientMessage(playerid, COLOR_PARAMEDICO, " ");
					format(LastDenuncia, sizeof(LastDenuncia), "%s", LastChamadaDenuncia);
					IndoLocalDenuncia[playerid] = 1;
					CPLocal[playerid][0] = 0;
					CPLocal[playerid][1] = 0;
					CPLocal[playerid][2] = 0;
					SendClientMessage(playerid, COLOR_CENTRAL," Você atendeu um chamado, caso queira cancelar digite: /desativarcheckpoint");
				} else {
					SendClientMessage(playerid, COLOR_CENTRAL,"	Você está com uma denúncia registrada na Central, vá checá-la primeiro.");
					SendClientMessage(playerid, COLOR_CENTRAL," Ou cancele com /desativarcheckpoint");
					return 1;
				}
			} else {
				SendClientMessage(playerid, COLOR_CENTRAL,"	Não foi encaminhado a você nenhuma denúncia.");
				return 1;
			}
		} else if(pStats[playerid][Prof] == PARAMEDICO){
		    if(CPLocal[playerid][0] != 0){
		        if(IndoLocalEmergencia[playerid] == 0){
					SetPlayerCheckpoint(playerid,CPLocal[playerid][0],CPLocal[playerid][1],CPLocal[playerid][2],5.0);
					CheckpointStatus[playerid] = EMERGENCIA;
					SendClientMessage(playerid, COLOR_CENTRAL," ");
					CPLocal[playerid][0] = 0;
					CPLocal[playerid][1] = 0;
					CPLocal[playerid][2] = 0;
					IndoLocalEmergencia[playerid] = 1;
					new i = AmbulanciaAmba[playerid];
					AmbulanciaAmba[playerid] = 0;
					ChameiAmbulancia[i] = 0;
					format(LastEmergencia, sizeof(LastEmergencia), "%s", LastAmbulanciaDenuncia);
					SendClientMessage(i, COLOR_PARAMEDICO, " ");
					format(string,sizeof(string),"[RADIO AMBULANCIA] Ambulâncias, o Paramédico %s atendeu a última emergência solicitada. Emergência:\" %s\"", PlayerName(playerid),LastAmbulanciaDenuncia);
					SendClientMessage(i, COLOR_PARAMEDICO,string);
					SendClientMessage(playerid, COLOR_PARAMEDICO,string);
					SendClientMessage(i, COLOR_PARAMEDICO, " ");
				} else {
					SendClientMessage(playerid, COLOR_PARAMEDICO,"	Você está com uma EMERGÊNCIA, termine-a de checá-la.");
					return 1;
				}
			} else {
				SendClientMessage(playerid, COLOR_PARAMEDICO,"	   Não foi encaminhado nenhum chamado a você.");
				return 1;
			}
		}
		return 1;
	}

 	if (strcmp(cmd, "/c", true)==0){
 	    new tmp[128];
 	    strmid(tmp,cmdtext, 2, strlen(cmdtext));
 	    if(!strlen(tmp)){
 	        SendClientMessage(playerid, COLOR_GRAY, "USO: /c [mensagem]");
 	        return 1;
		}
		if(!IsPlayerInAnyVehicle(playerid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
		    return 1;
		}
		else{
		    new veh = GetPlayerVehicleID(playerid);
		    new string[128];
		    for(new i=0; i<MAX_SLOTS; i++){
				if(IsPlayerInVehicle(i,veh)){
					format(string,sizeof(string),"[VEICULO] %s",tmp);
					SendPlayerMessageToPlayer(i,playerid,string);
				}
			}
			return 1;
		}
	}
	if (strcmp(cmd, "/adminmsg", true)==0){
	    if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não faz parte da administração do servidor, não pode utilizar esse comando!");
	    new tmp[128];
	    tmp = strtok(cmdtext, idx);
		new plid = strval(tmp);
		if(strlen(tmp) <= 0) return SendClientMessage(playerid, COLOR_GRAY, "USO: /adminmsg [id] [mensagem]");
		if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador desconectado...");
		new message[128];
		if(plid < 10) strmid(message,cmdtext,11,strlen(cmdtext));
		else if(plid > 10 && plid < 100) strmid(message,cmdtext,12,strlen(cmdtext));
		else strmid(message,cmdtext,13,strlen(cmdtext));
        if(strlen(message) <= 0) return SendClientMessage(playerid, COLOR_GRAY, "USO: /adminmsg [id] [mensagem]");
		new s[128];
		format(s,sizeof(s),"[ADMINISTRADOR] %s",message);
		SendClientMessage(plid, COLOR_LIGHT_RED, s);
		SendClientMessage(playerid, COLOR_LIGHT_RED, s);
		return 1;
	}
 	if (strcmp(cmd, "/admin", true)==0)
 	{
		new tmp[128];
		new string[128];
	    strmid(tmp, cmdtext, 6, strlen(cmdtext));
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAY, "USO: /admin [mensagem]");
			return 1;
		}
		else
		{
			format(string, sizeof(string), "[AJUDA] %s(id:%d): %s", PlayerName(playerid), playerid, ClearCapsLock(tmp));
			SendClientMessage(playerid, COLOR_BLUE, string);
		    SendClientMessageAdmin(COLOR_BLUE, string);
		    print(string);
            return 1;
		}
 	}
 	if (strcmp(cmd, "/report", true)==0){
		new tmp[128];
		new string[128];
	    strmid(tmp, cmdtext, 8, strlen(cmdtext));
		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_GRAY, "USO: /report [mensagem/bug/erro/sugestao/cheater]");
			return 1;
		}
		else
		{
			format(string, sizeof(string), "[REPORT] %s: %s", PlayerName(playerid), ClearCapsLock(tmp));
			SendClientMessage(playerid, COLOR_LIGHT_RED, string);
			SendClientMessage(playerid, COLOR_GREEN, "O seu report está salvo na pasta do servidor.");
			SendClientMessageAdmin(COLOR_LIGHT_RED, string);
	    	reportlog(string);
            return 1;
		}
 	}
	if(strcmp(cmd, "/192", true)==0){
		new tmp[128];
		new string[128];
   		strmid(tmp, cmdtext, 4, strlen(cmdtext));
		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_GRAY, "/192 [motivo]");
			return 1;
		}
		if(CelularBloqueado[playerid] == 1){
   			SendClientMessage(playerid, COLOR_GRAY, "Você não está com seu celular.");
			return 1;
		}
	    if(pStats[playerid][PhoneNumb]==0){
	        SendClientMessage(playerid,COLOR_GRAY,"Você não tem celular!");
	        return 1;
		}
		if(pStats[playerid][GCell] == 1 || pStats[playerid][CofreCell] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Seu celular está guardado e desativado!");
		    return 1;
		}
		if(!TemProfissao(PARAMEDICO)){
		    SendClientMessage(playerid, COLOR_PARAMEDICO, "[HOSPITAL] Desculpe, não há nenhuma ambulância para seu chamado.");
			return 1;
		}
		if(ChameiAmbulancia[playerid] == 1){
		    SendClientMessage(playerid, COLOR_PARAMEDICO, "[HOSPITAL] Você chamou uma ambulância há pouco tempo, aguarde.");
			return 1;
		}
		if(pStats[playerid][Morrendo] == 0){
		    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
			SetTimerEx("AcaoEspecial",6000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		}
		SendClientMessage(playerid,COLOR_COP_SWAT,"[HOSPITAL] [SECRETARIA] Paramédicos informados, aguarde...");
		for(new i=0; i<MAX_SLOTS; i++){
			if(pStats[i][Prof] == PARAMEDICO){
				GetPlayerPos(playerid,CPLocal[i][0],CPLocal[i][1],CPLocal[i][2]);
				AmbulanciaAmba[i] = playerid;
				ChameiAmbulancia[playerid] = 1;
				new zone[28];
		        GetPlayer2DZone(playerid, zone, 28);
				format(LastAmbulanciaDenuncia, sizeof(LastAmbulanciaDenuncia), "%s: %s", PlayerName(playerid), tmp);
				if(IsAmbulance(GetPlayerVehicleID(i))){
					SendClientMessage(i, COLOR_CENTRAL," ");
					SendClientMessage(i, COLOR_CENTRAL," ");
					format(string, sizeof(string), "[RADIO AMBULANCIA] Unidades! Registramos uma ligação de emergência \"%s: %s\" [ Local: %s ]", PlayerName(playerid), tmp, zone);
					SendClientMessage(i, COLOR_PARAMEDICO, string);
					SendClientMessage(i, COLOR_PARAMEDICO,"Para checar a emergência do chamado, \"/checar.\"");
					SendClientMessage(i, COLOR_CENTRAL," ");
	       	    	SetTimerEx("ZerarEmergencia",80000,0,"dd",playerid,i);
				} else {
					SendClientMessage(i, COLOR_CENTRAL," ");
					SendClientMessage(i, COLOR_CENTRAL," ");
					format(string, sizeof(string), "[WALKTOKIE] Paramédico, Registramos uma ligação de emergência \"%s: %s\" [ Local: %s ]", PlayerName(playerid), tmp, zone);
					SendClientMessage(i, COLOR_PARAMEDICO, string);
					SendClientMessage(i, COLOR_PARAMEDICO,"Para checar a denúncia do chamado, \"/checar.\"");
					SendClientMessage(i, COLOR_CENTRAL," ");
				}
			}
   		}
		return 1;
	}
    if(strcmp(cmd, "/roubarcarroforte", true) == 0)
	{
	    if(pStats[playerid][Prof] != ASSALTANTE && !IsPlayerAdmin(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não é Assaltante!");
	        return 1;
	    }
	    new Float:dis = 5.0, sec_id = -1;
	    new Float:playerX, Float:playerY, Float:playerZ;
	    GetPlayerPos(playerid, playerX, playerY, playerZ);
	    for(new sc = 0; sc < sizeof Security; sc++)
	    {
			new Float:vehicleX, Float:vehicleY, Float:vehicleZ, Float:distance;
			GetVehiclePos(Security[sc], vehicleX, vehicleY, vehicleZ);
			distance += floatpower(playerX - vehicleX, 2);
			distance += floatpower(playerY - vehicleY, 2);
			distance += floatpower(playerZ - vehicleZ, 2);
			distance = floatsqroot(distance);
			if(distance < dis)
			{
			    sec_id = sc;
			    dis = distance;
			}
	    }
	    if(sec_id == -1)
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você precisa estar próximo à um Carro Forte.");
	        return 1;
	    }
	    if(Malote[sec_id] == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Esse Carro Forte não está carregado.");
	        return 1;
	    }
	    PutPlayerInVehicle(playerid, Security[sec_id], random(2) + 2);
	    SendClientMessage(playerid, COLOR_ASSALTANTE, "Veículo arrombado, o roubo começou, aguarde...");
	    KillTimer(TimerRoubo[playerid]);
	    RouboCarroForte[playerid] = 0;
	    TimerRoubo[playerid] = SetTimerEx("RoubandoCarroForte", 5000, 0, "dd", playerid, sec_id);
	    return 1;
    }
	if(strcmp(cmd, "/escondercarro", true) == 0) {
	    if(IsPlayerInAnyVehicle(playerid)){
			if(pStats[playerid][Prof] == ASSALTANTE && PlayerArea[playerid] == AreaEsconderijo){
			    if(!strcmp(vStats[GetPlayerVehicleID(playerid)][VDono],PlayerName(playerid),true)) return SendClientMessage(playerid, COLOR_GRAY, "Você não pode esconder seus próprios carros!");
			    new Float:X,Float:Y,Float:Z,Float:ang;
				if(vStats[GetPlayerVehicleID(playerid)][VEscondido] == 1){
				    SendClientMessage(playerid, COLOR_GRAY, "Esse veículo já está escondido!");
				    return 1;
				}
				if(GetPlayerVehicleID(playerid) >= AmountServerVehicles && strcmp(vStats[GetPlayerVehicleID(playerid)][VDono], PlayerName(playerid), false)){
					vStats[GetPlayerVehicleID(playerid)][VEscondido] = 1;
			    	GetVehiclePos(GetPlayerVehicleID(playerid),X,Y,Z);
			    	GetVehicleZAngle(GetPlayerVehicleID(playerid),ang);
			    	SaveCarPos(GetPlayerVehicleID(playerid),X,Y,Z,ang);
			    	AcrescentarXpoints(playerid, 1);
			    	SendClientMessage(playerid, COLOR_WHITE, "Carro escondido!");
			    	new str[128];
			    	format(str,sizeof(str),"%s escondeu um carro que pertence a %s",PlayerName(playerid),vStats[GetPlayerVehicleID(playerid)][VDono]);
					print(str);
					writelog(str);
			    	return 1;
				}
				else{
					SendClientMessage(playerid, COLOR_GRAY, "Você não pode esconder um carro seu ou do governo/servidor.");
				}
			}
			else{
			    SendClientMessage(playerid, COLOR_GRAY, "Você não é Assaltante, ou não está em um esconderijo!");
			    return 1;
			}
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
			return 1;
		}
	}
	if(strcmp(cmd, "/estacionar", true) == 0) {
	    if(IsPlayerInAnyVehicle(playerid))
		{
			if(!strcmp(vStats[GetPlayerVehicleID(playerid)][VDono],PlayerName(playerid),true) || IsPlayerAdmin(playerid) || ConfiscandoVeiculo[playerid] == GetPlayerVehicleID(playerid))
			{
			    if(ConfiscandoVeiculo[playerid] == GetPlayerVehicleID(playerid))
			    {
			        if(PlayerArea[playerid] != AreaDelegaciaFora)
			        {
			            SendClientMessage(playerid, COLOR_GRAY, "Você não está na Delegacia...");
			            return 1;
			        }
				}
			    new Float:X,Float:Y,Float:Z,Float:ang;
				vStats[GetPlayerVehicleID(playerid)][VEscondido] = 0;
			    GetVehiclePos(GetPlayerVehicleID(playerid),X,Y,Z);
			    GetVehicleZAngle(GetPlayerVehicleID(playerid),ang);
			    SaveCarPos(GetPlayerVehicleID(playerid),X,Y,Z,ang);
			    SendClientMessage(playerid, COLOR_JUIZ, "Veículo estacionado.");
			    if(ConfiscandoVeiculo[playerid] == GetPlayerVehicleID(playerid))
			    {
			        SendClientMessage(playerid, COLOR_CENTRAL, "[CENTRAL] Veículo apreendido e drogas desplantadas, você recebeu $200,00 dólares.");
			        Pay(playerid, 200);
			        DrogasPlantadas[GetPlayerVehicleID(playerid)] = 0;
			        vStats[GetPlayerVehicleID(playerid)][Confiscado] = 1;
			        RemovePlayerFromVehicle(playerid);
			        new string[128];
					new id = IDName(vStats[GetPlayerVehicleID(playerid)][VDono]);
					if(id != -1)
					{
					    SendClientMessage(id, COLOR_GRAY, "Algum veículo seu foi apreendido, busque-o na Delegacia.");
					    return 1;
					}
					else
					{
					    GuardarMensagem(vStats[GetPlayerVehicleID(playerid)][VDono], "Algum veículo seu foi apreendido, busque-o na Delegacia.");
					}
			        format(string, sizeof string, "%s apreendeu um veiculo de %s (%d).", PlayerName(playerid), vStats[GetPlayerVehicleID(playerid)][VDono], GetPlayerVehicleID(playerid));
					print(string);
					writelog(string);
					ConfiscandoVeiculo[playerid] = 0;
			    }
			    return 1;
			}
			else{
			    SendClientMessage(playerid, COLOR_GRAY, "Você não é o dono do veículo!");
			    return 1;
			}
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
			return 1;
		}
	}

	if(strcmp(cmd,"/pagarfianca",true) == 0) {
	    if(pStats[playerid][Preso] == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não está preso.");
	        return 1;
	    }
	    if(pStats[playerid][Fianca] <= 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe concedido o direito de pagar fiança.");
	        return 1;
	    }
		if(pStats[playerid][Banco] < pStats[playerid][Fianca])
		{
		    if(GetPlayerMoney(playerid) < pStats[playerid][Fianca])
		    {
		    	new str[128];
		    	format(str, sizeof str, "Você não tem o dinheiro da fiança, Custo: $%d,00 dólares.", pStats[playerid][Fianca]);
		    	SendClientMessage(playerid, COLOR_GRAY, str);
		    	return 1;
			}
			else
			{
				AddPlayerMoney(playerid, -pStats[playerid][Fianca], -1);
				SendClientMessage(playerid, COLOR_WHITE, "Fiança paga, dinheiro retirado da mão.");
			}
		}
		else
		{
		    pStats[playerid][Banco] -= pStats[playerid][Fianca];
		    SendClientMessage(playerid, COLOR_WHITE, "Fiança paga, dinheiro retirado do banco.");
		}
		SetPlayerFree(playerid);
		return 1;
	}

	if(strcmp(cmdtext, "/presos", true)==0){
		new string[128], QtImprise;
	    SendClientMessage(playerid, COLOR_LIGHT_RED, "Lista de presos");
	    for(new i=0; i<MAX_SLOTS; i++){
	        if(IsPlayerConnected(i) && Logado[i] && pStats[i][Preso] == 1){
				format(string, sizeof(string), "Nome: %s - ID: %d", PlayerName(i), i);
				SendClientMessage(playerid, COLOR_WHITE, string);
				QtImprise++;
			}
		}
		if(QtImprise <= 0){
		    SendClientMessage(playerid,COLOR_GRAY,"Não há nenhum preso no momento.");
		    return 1;
		} else {
			format(string,sizeof(string),"Total de presos: %d",QtImprise);
			SendClientMessage(playerid,COLOR_PALHA,string);
			return 1;
		}
	}

	if (strcmp(cmdtext, "/procurados", true)==0){
		new string[128];
	    SendClientMessage(playerid, COLOR_LIGHT_RED, "Lista de procurados:");
		new w = 0;
	    for(new i=0; i<MAX_SLOTS; i++){
	        if(IsPlayerConnected(i) && Logado[i] && GetPlayerWantedLevel(i) > 0){
				format(string, sizeof(string), "Nome: %s - Nível de procurado: %d - Motivo: %s - Recompensa (policiais): $%d,00 dólares", PlayerName(i), GetPlayerWantedLevel(i), Motivos[pStats[i][LastBustedReason]][mName], GetPlayerWantedLevel(i) * 100);
				SendClientMessage(playerid, COLOR_WHITE, string);
				w++;
 			}
		}
		if(w == 0)
		{
		    SendClientMessage(playerid, COLOR_WHITE, "Lista de procurados vazia.");
		}
		else
		{
		    format(string, sizeof string, "Total de procurados: %d, se ver algum desses criminosos denuncie, digite /190", w);
			SendClientMessage(playerid, COLOR_JUIZ, string);
		}
		return 1;
	}
	
	if(strcmp(cmdtext, "/cabeças", true)==0){
		new string[128];
	    SendClientMessage(playerid, COLOR_LIGHT_RED, "Lista de Cabeças a Prêmio:");
		new w = 0;
		for(new i = 0; i < MAX_SLOTS; i++){
			if(pStats[i][ValorCabeca] > 0){
			    if(IsPlayerConnected(i) && Logado[i]){
			    	w++;
					format(string,sizeof(string),"	Nome: %s - Valor Cabeça $%d	",PlayerName(i),pStats[i][ValorCabeca]);
					SendClientMessage(playerid, COLOR_WHITE, string);
				}
			}
		}
		if(w == 0)
		{
		    SendClientMessage(playerid, COLOR_WHITE, "Lista de cabeças vazia.");
		}
		else
		{
		    format(string, sizeof string, "Total de cabeças procuradas: %d", w);
			SendClientMessage(playerid, COLOR_JUIZ, string);
			SendClientMessage(playerid, COLOR_WHITE, "Se você está nesta lista, contrate um segurança ou chame a polícia se estiver em perigo.");
		}
		return 1;
	}
	
	if(strcmp(cmd, "/gritar", true)==0 || strcmp(cmd,"/g",true)==0)
	{
	    if(ENABLE_GLOBAL_CHAT == 1)
		{
			new tmp[128];
			if(!strcmp(cmd,"/gritar",true)) strmid(tmp,cmdtext,7,strlen(cmdtext));
			else strmid(tmp,cmdtext,2,strlen(cmdtext));
			if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /gritar [mensagem] ,ou quer apenas abrir a boca?");
			if(Gritos[playerid] >= 3) return SendClientMessage(playerid, COLOR_GRAY, "Você está com dor de garganta de tanto gritar, espere um tempo para poder usar esse comando novamente!");
        	if(Mudo[playerid] == 1 || pStats[playerid][Preso] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você não pode gritar porque está mudo, ou preso!");
			new str[128];
			format(str,sizeof(str),">>> ( %s: %s ) <<<", PlayerName(playerid), ClearCapsLock(tmp));
			print(str);
			SendClientMessageToAll(COLOR_SKY_BLUE, str);
			Gritos[playerid]++;
			if(Gritos[playerid] >= 2) SendClientMessage(playerid, COLOR_GRAY, "Você foi surpreendido por uma terrível dor de garganta de tanto gritar!");
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAY, "[INFO] O Chat Global está configurado no Virtual Life RPG para ficar desativado...");
			SendClientMessage(playerid, COLOR_GRAY, "[INFO] Utilize celular ou outros meios do servidor para obter contato com pessoas distantes!");
			return 1;
		}
	}
	if(strcmp(cmd, "/sussurrar", true)==0 || strcmp(cmd,"/s",true)==0){
		new tmp[128];
		if(!strcmp(cmd,"/sussurrar",true)) strmid(tmp,cmdtext,10,strlen(cmdtext));
		else strmid(tmp,cmdtext,2,strlen(cmdtext));
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /sussurrar [mensagem] ,ou quer apenas abrir a boca?");
        if(Mudo[playerid] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você não pode sussurrar porque está mudo!");
		new str[128];
		if(!IsPlayerTransparent(playerid))
		{
			format(str,sizeof(str),"%s[id:%d] sussurra: %s",PlayerName(playerid),playerid,tmp);
		}
		else
		{
		    format(str,sizeof(str),"Anônimo sussurra: %s",tmp);
		}
		for(new i = 0; i < MAX_SLOTS; i++){
		    if(GetDistanceBetweenPlayers(playerid,i) < 10) SendClientMessage(i, GetPlayerColor(playerid), str);
		}
		return 1;
	}
    if(strcmp(cmd, "/data", true) == 0) {
		new Ptmess[128];
        format(Ptmess, sizeof(Ptmess), "Hoje é %s! dia %d de %s de %d", DiaName[ValorDia], DiaJogo, Meses[MesJogo][MesNome], AnoJogo);
        SendClientMessage(playerid, COLOR_GREEN, Ptmess);
        return 1;
	}
	if(strcmp(cmd, "/dia", true) == 0) {
		new string[128];
		format(string,sizeof(string),"~y~%s ~n~~g~Dia: ~w~%s/%s/%s ~n~~g~Hora: ~w~%s:%s", DiaNameGT[ValorDia], ApplyZero(DiaJogo), ApplyZero(MesJogo), ApplyZero(AnoJogo), ApplyZero(HoraJogo), ApplyZero(MinutoJogo));
		GameTextForPlayer(playerid,string,8000,3);
 		return 1;
  	}
	if(strcmp(cmd, "/horas", true) == 0) {
		new Ptmess[128];
		format(Ptmess, sizeof(Ptmess), "Agora são %s:%s",ApplyZero(HoraJogo), ApplyZero(MinutoJogo));
    	SendClientMessage(playerid,COLOR_GREEN,Ptmess);
 		return 1;
  	}

 	if(strcmp(cmd, "/transferir", true) == 0) {
    	new tmp[128];
    	new giveplayerid;
    	new distancia;
    	new moneys;
    	new string[128];
  		tmp = strtok(cmdtext, idx);
	   	if(!strlen(tmp)) {
	        SendClientMessage(playerid, COLOR_GRAY, "USE: /transferir [jogador] [quantida]");
	        return 1;
	    }
	    giveplayerid = strval(tmp);
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp)) {
	        SendClientMessage(playerid, COLOR_GRAY, "USE: /transferir [jogador] [quantida]");
			return 1;
		}
   		distancia = GetDistanceBetweenPlayers(playerid, giveplayerid);
	    if(distancia > 20){
	        SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto!");
			return 1;
		}
		moneys = strval(tmp);
		if(moneys < 0 || GetPlayerServerMoney(playerid) < moneys){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não tem esse dinheiro para transferir.");
			return 1;
		}
        if(IsPlayerConnected(giveplayerid) && Logado[giveplayerid] == 1){
			AddPlayerMoney(playerid, -moneys, -1);
			AddPlayerMoney(giveplayerid, moneys, 1);
			format(string, sizeof(string), "[BANCO] Você transferiu a importância de $%d, para %s (id: %d).", moneys, PlayerName(giveplayerid), giveplayerid);
			SendClientMessage(playerid, COLOR_GREEN, string);
			format(string, sizeof(string), "[BANCO] Você recebeu uma transferência de $%d feita por %s (id: %d).", moneys, PlayerName(playerid), playerid);
			SendClientMessage(giveplayerid, COLOR_GREEN, string);
		} else {
	        SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado!");
		}
		return 1;
   	}

    if(strcmp(cmd, "/meubanco", true) == 0) {
        if(PlayerArea[playerid] == AreaBanco){
            new caixa = random(2);
            SetPlayerPos(playerid,Caixas[caixa][0],Caixas[caixa][1],Caixas[caixa][2]);
            SetPlayerFacingAngle(playerid, 270);
	   		ShowMenuForPlayer(BancoOpc,playerid);
	   		SetPlayerControl(playerid,0);
	   		return 1;
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está no Banco.");
		    return 1;
		}
	}

	if(strcmp(cmd, "/saldoconta", true) == 0) {
		new string[128];
	    if(GetPlayerServerMoney(playerid) < 5){
            SendClientMessage(playerid, COLOR_YELLOW, "Custo: $5,00 dólares");
			return 1;
		}
	    if(pStats[playerid][PhoneNumb]==0){
	        SendClientMessage(playerid,COLOR_GRAY,"Você não tem celular!");
	        return 1;
		}
		else{
		    AddPlayerMoney(playerid, -5, -1);
		    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
			SetTimerEx("AcaoEspecial",6000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
			format(string, sizeof(string), "[BANCO] Mensagem de: Banco Virtual - Conteúdo: Você tem $%d,00 dólares em sua conta pessoal.", pStats[playerid][Banco]);
			SendClientMessage(playerid, COLOR_DARK_GREEN, string);
			return 1;
		}
	}

	if(strcmp(cmd, "/retirartxt", true) == 0) {
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
		    	SendClientMessage(playerid, COLOR_GRAY, "Saiá do veículo para usar este comando!");
		    	return 1;
		    }
			else{
			    TextDrawHideForPlayer(playerid,TextData[0]);
			    TextDrawHideForPlayer(playerid,TextData[1]);
			   	TextDrawHideForPlayer(playerid,Speedo[playerid]);
		    	TextDrawHideForPlayer(playerid,Bemvindo1);
		    	TextDrawHideForPlayer(playerid,Bemvindo2);
		    	TextDrawHideForPlayer(playerid,Bemvindo3);
		    	TextDrawHideForPlayer(playerid,Bemvindo4);
		    	for(new f = 1; f < sizeof BarFome; f++)
	        	{
	        	    TextDrawHideForPlayer(playerid, TextFome[f - 1]);
	        	    TextDrawHideForPlayer(playerid, BarFome[f]);
	        	}
	        	TextDrawHideForPlayer(playerid,TDDriveThru[playerid]);
		    	RemoveTextDrawArea(playerid);
		    	RemoveTextDrawHouse(playerid);
		    	SendClientMessage(playerid, COLOR_BLUE, "Textos retirados!");
		    	return 1;
			}
	}

	if(strcmp(cmd, "/idmodelo", true) == 0) {
	    new id;
	    new modelo;
	    new msg[128];
	    id = GetPlayerVehicleID(playerid);
		modelo = GetVehicleModel(id);
	    format(msg, sizeof(msg), "O ID de seu veículo é %d", modelo);
		SendClientMessage(playerid, COLOR_GREEN, msg);
		return 1;
	}
	if(strcmp(cmd, "/apostarcavalo", true) == 0){
	    new tmp[128];
	    new cavaloid;
	    new valor;
	    tmp = strtok(cmdtext,idx);
	    cavaloid = strval(tmp);
	    if(!strlen(tmp)){
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /apostarcavalo [cavalo] [quantia]");
	        return 1;
		}
		tmp = strtok(cmdtext,idx);
		valor = strval(tmp);
		if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_GRAY, "USO: /apostarcavalo [cavalo] [quantia:de $300 até $10.000]");
			return 1;
		}
		if(ComecouCLoteria == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "A corrida já começou, espere para votar na próxima!");
		    return 1;
		}
		if(PlayerArea[playerid] != AreaLCavalos){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está na loteria de cavalos!");
		    return 1;
		}
		if(cavaloid < 0 || cavaloid > 8){
		    SendClientMessage(playerid, COLOR_GRAY, "Aposte em um cavalo de 0 à 8.");
		    return 1;
		}
		if(valor < 300 || valor > 10000){
		    SendClientMessage(playerid, COLOR_GRAY, "Quantia de $300 até $10.000.");
		    return 1;
		}
		if(GetPlayerServerMoney(playerid) < valor){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro para comprar o TICKET, custo: $300");
		    return 1;
		}
		if(pStats[playerid][ValorAposta] > 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você já comprou um TICKET, agora espere o sorteio!");
		    return 1;
		}
		else{
		    new string[128];
		    format(string,sizeof(string),"Você apostou $%d,00 dólares no cavalo %s. Boa sorte!",valor,CavalosLargada[cavaloid]);
		    SendClientMessage(playerid, COLOR_BROWN, string);
		    format(string,sizeof(string),"[LOTERIA DE CAVALOS] %s acabou de apostar nos cavalos, tente você também. APOSTE.",PlayerName(playerid));
		    SendClientMessageToAll(COLOR_GRAY, string);
		    AddPlayerMoney(playerid,-valor,-1);
		    pStats[playerid][ValorAposta] = valor;
      		pStats[playerid][Cavalo] = cavaloid;
		    return 1;
		}
	}

	if(strcmp(cmd, "/loteria", true) == 0) {
	    new no1[128], no2[128];
		no1 = strtok(cmdtext, idx);
		no2 = strtok(cmdtext, idx);
 		if(!strlen(no1) || !strlen(no2)){
			return SendClientMessage(playerid, COLOR_GREEN, "USE: /loteria [0-20] [0-20]");
		}
		if(strval(no1) < 0 || strval(no1) > 20){
			return SendClientMessage(playerid, COLOR_GREEN, "USE: /loteria [0-20] [0-20]");
		}
		if(strval(no2) < 0 || strval(no2) > 20){
			return SendClientMessage(playerid, COLOR_GREEN, "USE: /loteria [0-20] [0-20]");
		}
		if(strval(no1) == strval(no2)){
			return SendClientMessage(playerid, COLOR_GREEN, "USE: /loteria [0-20] [0-20] - NÚMEROS DIFERENTES!!!");
		}
		if(pStats[playerid][NumeroLoteria1] != 0 || pStats[playerid][NumeroLoteria2] != 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você já tem um bilhete!");
		    return 1;
		}
		if(PlayerArea[playerid] != AreaLoteria){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está na loteria!");
		    return 1;
		}
		if(GetPlayerServerMoney(playerid) >= 200){
		    AddPlayerMoney(playerid,-200,-1);
			pStats[playerid][NumeroLoteria1] = strval(no1);
			pStats[playerid][NumeroLoteria2] = strval(no2);
		    new string[128];
		    format(string, sizeof(string), "Obrigado por apostar. Seus números da loteria são: %d, %d ! Espere o Resultado.", strval(no1), strval(no2));
            return SendClientMessage(playerid, COLOR_ORANGE, string);
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "O TICKET custa $200,00 dólares");
  		    return 1;
		}
	}
	if(strcmp(cmd, "/galao", true) == 0) {
	    new tmp[128];
		new qt,string[128],valorpago;
		tmp = strtok(cmdtext,idx);
		qt = strval(tmp);
		if(!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /galao [1-20]");
		    return 1;
		}
		if(qt < 1){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /galao [1-20]");
		    return 1;
		}
		if(PlayerArea[playerid] != AreaPosto){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está no posto!");
		    return 1;
		}
		tmp = strtok(cmdtext,idx);
		if((strcmp("gasolina", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("gasolina")) ||
			(strcmp("aditivada", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("aditivada")) ||
			(strcmp("diesel", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("diesel")) ||
			(strcmp("alcool", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("alcool")) ||
			(strcmp("querosene", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("querosene"))){
			if(qt + pStats[playerid][Galao] >= 20){
	            new sobra = 20 - pStats[playerid][Galao];
	            valorpago = sobra*ValorGasolina;
	            if(GetPlayerServerMoney(playerid) < valorpago){
					format(string,sizeof(string),"Você não possui dinheiro, Custo: $%d",valorpago);
					SendClientMessage(playerid, COLOR_GRAY, string);
				    return 1;
				}
	            AddPlayerMoney(playerid, -valorpago, -1);
	            format(string,sizeof(string),"Você completou seu galão colocando %d litros por $%d",sobra,valorpago);
				SendClientMessage(playerid, COLOR_WHITE, string);
				pStats[playerid][Galao] = 20;
				return 1;
			}
			else{
				valorpago = qt * ValorGasolina;
				if(GetPlayerServerMoney(playerid) < valorpago){
					format(string,sizeof(string),"Você não possui dinheiro, Custo: $%d",valorpago);
					SendClientMessage(playerid, COLOR_GRAY, string);
				    return 1;
				}
				AddPlayerMoney(playerid,-valorpago,-1);
				pStats[playerid][Galao] += qt;
				format(string,sizeof(string),"Galão enchido com %d litros, agora você possui nele %d litros",qt,pStats[playerid][Galao]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_WHITE, "Para colocar o combustível em um veículo, entre nele e digite /colocar [1-20]");
				return 1;
			}
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"USO: /galao [gasolina, aditivada, diesel, alcool, querosene [1-20]");
			return 1;
		}
	}
	if(strcmp(cmd, "/colocar",true) == 0) {
		new tmp[128];
		new qt,string[128];
		tmp = strtok(cmdtext,idx);
		qt = strval(tmp);
		if(!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /colocar [1-20]");
		    return 1;
		}
		if(qt < 1){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /colocar [1-20]");
		    return 1;
		}
		if(!IsPlayerInAnyVehicle(playerid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhum veículo!");
		    return 1;
		}
		if(vStats[GetPlayerVehicleID(playerid)][Combustivel] == -1){
			SendClientMessage(playerid,COLOR_GRAY,"Você não pode abastecer esse veículo!");
			return 1;
		}
		if(qt > pStats[playerid][Galao]){
			format(string,sizeof(string),"Você não tem tudo isso no seu galão, você possui apenas %d litros nele",pStats[playerid][Galao]);
			SendClientMessage(playerid, COLOR_GRAY, string);
			return 1;
		}
		new tanque = GetVehicleTanque(GetVehicleModel(GetPlayerVehicleID(playerid)));
		if(vStats[GetPlayerVehicleID(playerid)][Combustivel] + qt >= tanque){
		    new sobra = tanque - vStats[GetPlayerVehicleID(playerid)][Combustivel];
		    vStats[GetPlayerVehicleID(playerid)][Combustivel] = tanque;
		    pStats[playerid][Galao] -= sobra;
		    format(string,sizeof(string), "O tanque do veículo ficou completo e sobraram %d litros em seu galão!",pStats[playerid][Galao]);
			SendClientMessage(playerid, COLOR_JUIZ, string);
			return 1;
		}
		else{
			vStats[GetPlayerVehicleID(playerid)][Combustivel] += qt;
			pStats[playerid][Galao] -= qt;
			format(string,sizeof(string),"O tanque do veículo ficou com %d litros de combustível",vStats[GetPlayerVehicleID(playerid)][Combustivel]);
            SendClientMessage(playerid, COLOR_JUIZ, string);
			return 1;
		}
	}
    if(strcmp(cmd, "/abastecer", true) == 0) {
		if(!IsPlayerInAnyVehicle(playerid)){
		    SendClientMessage(playerid,COLOR_GRAY,"Você não está em nenhum veículo!");
		    return 1;
		}
		if(vStats[GetPlayerVehicleID(playerid)][Combustivel] == -1){
			SendClientMessage(playerid,COLOR_GRAY,"Você não pode abastecer esse veículo!");
			return 1;
		}
		if(IsPlayerInBoat(playerid)){
		    if(PlayerArea[playerid] != AreaCoopPesca){
		        SendClientMessage(playerid, COLOR_GRAY, "Você não está na Cooperativa de pesca para abastecer esse veículo naval!");
		        return 1;
			}
		}
		else if(IsPlayerInVehicleAir(playerid)){
		    if(PlayerArea[playerid] != AreaAero){
		        SendClientMessage(playerid, COLOR_GRAY, "Você não está no Aeroporto para abastecer esse veículo aéreo!");
		        return 1;
			}
		}
		else if(IsPlayerInTruck(playerid)){
		    if(PlayerArea[playerid] != AreaPosto && PlayerArea[playerid] != AreaCarga){
		        SendClientMessage(playerid, COLOR_GRAY, "Você não está em um Posto ou Área de Carga para abastecer esse veículo terrestre!");
				return 1;
		    }
		}
		else{
			if(PlayerArea[playerid] != AreaPosto){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um Posto para abastecer esse veículo terrestre!");
				return 1;
			}
		}
		if(vStats[GetPlayerVehicleID(playerid)][Combustivel] == GetVehicleTanque(GetVehicleModel(GetPlayerVehicleID(playerid)))){
			SendClientMessage(playerid, COLOR_GRAY, "Seu veículo está com o Tanque cheio não pode colocar mais.");
			return 1;
   		}
        DestroyMenuEx(Abastecendo);
		Abastecendo = CreateMenu("Combustiveis",2,30.0,140.0,220.0,0.0);
		if(IsValidMenu(Abastecendo)){
		    new string[128];
		    SetMenuColumnHeader(Abastecendo,0,"Combustivel");
		    SetMenuColumnHeader(Abastecendo,1,"Preo");
	  	    AddMenuItem(Abastecendo,0,"Gasolina");
			format(string,sizeof(string),"$%d",ValorGasolina);
	  	    AddMenuItem(Abastecendo,1,string);
	  	    AddMenuItem(Abastecendo,0,"Gasolina Aditivada");
	  	   	format(string,sizeof(string),"$%d",ValorAditivada);
	  	    AddMenuItem(Abastecendo,1,string);
	  	    AddMenuItem(Abastecendo,0,"Diesel");
	  	 	format(string,sizeof(string),"$%d",ValorDiesel);
	  	    AddMenuItem(Abastecendo,1,string);
	  	    AddMenuItem(Abastecendo,0,"Alcool");
	  		format(string,sizeof(string),"$%d",ValorAlcool);
	  	    AddMenuItem(Abastecendo,1,string);
	  	    AddMenuItem(Abastecendo,0,"Querosene");
	  	    format(string,sizeof(string),"$%d",ValorQuerosene);
	  	    AddMenuItem(Abastecendo,1,string);
		}
		ShowMenuForPlayer(Abastecendo,playerid);
		SetPlayerControl(playerid,0);
		return 1;
	}

			
	if(strcmp(cmd,"/abastecerveiculo",true)==0)
	{
	    if(pStats[playerid][Prof] == FRENTISTA || IsPlayerAdmin(playerid))
		{
		    if(!IsPlayerInAnyVehicle(playerid))
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Você deve estar em um veículo para usar esse comando.");
			    return 1;
			}
			new tmp[128];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAY, "USO: /abastecerveiculo [litros]");
			    return 1;
			}
			new amount = strval(tmp);
			if(amount < 1 || amount > 100)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Litros de 1 à 100.");
			    return 1;
			}
			new vehid = GetPlayerVehicleID(playerid);
			new tanque = GetVehicleTanque(GetVehicleModel(GetPlayerVehicleID(playerid)));
			if(amount + vStats[vehid][Combustivel] >= tanque)
			{
			    amount = tanque - vStats[vehid][Combustivel];
			}
			if(amount == 0)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "O tanque do veículo já está cheio.");
			    return 1;
			}
			vStats[vehid][Combustivel] += amount;
			if(vehid < AmountServerVehicles)
			{
			    AddPlayerMoney(playerid, amount + (amount / 2), 3);
			    new string[128];
			    format(string, sizeof string, "Veículo do governo abastecido, você recebeu: $%d,00 dólares.", amount + (amount / 2));
			    SendClientMessage(playerid, COLOR_FRENTISTA, string);
			    return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_FRENTISTA, "Veículo abastecido, peça para que o dono use /pagar");
				return 1;
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Frentista.");
		    return 1;
		}
	}

	if(strcmp(cmd,"/tanqueservidor",true)==0){
	    if(IsPlayerAdmin(playerid)){
		    for(new v = 0; v < AmountServerVehicles; v++) {
				new tanque = GetVehicleTanque(GetVehicleModel(v));
				vStats[v][Combustivel] = tanque;
			    SendClientMessage(playerid, COLOR_FRENTISTA, "Todos os veículos do servidor foram abastecidos");
			    return 1;
			}
		}
	}

	if(strcmp(cmd, "/sexo", true) == 0) {
		if(pStats[playerid][Prof] == PROSTITUTA){
			new tmp[128];
    	    new plid;
	        tmp = strtok(cmdtext, idx);
	        plid = strval(tmp);
			if(!strlen(tmp)){
		    	SendClientMessage(playerid, COLOR_GRAY,"USO: /sexo [id]");
				return 1;
			}
			if(PlayerArea[playerid] != AreaStrip){
				SendClientMessage(playerid, COLOR_GRAY,"Você não está na boate.");
				return 1;
			}
		   	if(!IsPlayerConnected(plid)){
	       		SendClientMessage(playerid,COLOR_GRAY,"Jogador não conectado/logado");
				return 1;
			}
			if(GetPlayerServerMoney(plid) < 300){
	        	SendClientMessage(playerid, COLOR_GRAY, "Ele não tem dinheiro para pagar!");
				return 1;
			}
		    if(GetDistanceBetweenPlayers(playerid,plid) > 20){
		       	SendClientMessage(playerid,COLOR_GRAY,"Você está muito longe, chegue mais perto!");
				return 1;
			}
			if(playerid == plid){
				SendClientMessage(playerid, COLOR_GRAY, "Você não pode transar com si mesma.");
				return 1;
			}
			else {
				SendClientMessage(plid, COLOR_PROSTITUTA, "A prostituta está lhe oferecendo uma transa numa cama bem confortável!");
				SendClientMessage(plid, COLOR_PROSTITUTA, "Se quiser transar com a prostituta basta digitar /aceitar se não /recusar.");
				Transacama[plid] = 1;
				ParaAceitar[plid] = ACEITAR_SEXO;
				Prostitutacama[plid] = playerid;
				SendClientMessage(playerid, COLOR_PROSTITUTA, "A proposta foi enviada! Aguarde...");
				return 1;
			}
		} else {
			new tmp[128];
    	    new plid;
    	    new string[128];
	        tmp = strtok(cmdtext, idx);
	        plid = strval(tmp);
			if(!strlen(tmp)){
		    	SendClientMessage(playerid, COLOR_GRAY,"USO: /sexo [id]");
				return 1;
			}
		   	if(!IsPlayerConnected(plid)){
	       		SendClientMessage(playerid,COLOR_GRAY,"Jogador não conectado/logado");
				return 1;
			}
		    if(GetDistanceBetweenPlayers(playerid,plid) > 20){
		       	SendClientMessage(playerid,COLOR_GRAY,"Você está muito longe, chegue mais perto!");
				return 1;
			}
			if(pStats[plid][Prof] == PROSTITUTA){
				SendClientMessage(playerid, COLOR_GRAY, "Você não pode fazer isso com uma Prostituta!");
				return 1;
			}
			if(GetPlayerServerMoney(playerid) < 300){
	        	SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para pagar o quarto no Motel. Custo: $300,00.");
				return 1;
			}
			if(playerid == plid){
				SendClientMessage(playerid, COLOR_GRAY, "Você não pode transar com si mesma.");
				return 1;
			}
			else {
			    SendClientMessage(plid, COLOR_BLUE_PLUS, " ");
				format(string, sizeof(string), "   Olá! Uhh baby, %s está propondo um sexo com você. Nessa situação você é mulher!", PlayerName(playerid));
				SendClientMessage(plid, COLOR_BLUE_PLUS, string);
				SendClientMessage(plid, COLOR_BLUE_PLUS, "Para aceitar: /aceitar se não /recusar.");
				Sex2a2[playerid] = plid;
				Sex2a2[plid] = playerid;
				Transacama[plid] = 0;
				ParaAceitar[plid] = ACEITAR_SEXO;
				SendClientMessage(playerid, COLOR_WHITE, "A proposta foi enviada. Aguarde...");
				return 1;
			}
		}
	}

	if(strcmp(cmd, "/mudarposicao", true) == 0){
		if(pStats[playerid][Prof] == PROSTITUTA || IsPlayerAdmin(playerid)){
			new tmp[128];
		  	tmp = strtok(cmdtext, idx);
	    	new animacao;
			if(!strlen(tmp)) {
				SendClientMessage(playerid,COLOR_PROSTITUTA,"/mudarposicao [1-4]");
				return 1;
			}
			animacao = strval(tmp);
			if(animacao < 1 || animacao > 4) {
				SendClientMessage(playerid,COLOR_PROSTITUTA,"/mudarposicao [1-4]");
				return 1;
			}
			if(animacao == 1) {
				ApplyAnimation(playerid,"benchpress","gym_bp_up_B",4.1,0,1,1,1,1);
 			} else if(animacao == 2) {
				ApplyAnimation(playerid,"MD_END","END_SC1_SMO",4.1,0,1,1,1,1);
			} else if(animacao == 3) {
				ApplyAnimation(playerid,"FINALE","FIN_Land_Car",4.1,0,1,1,1,1);
			} else if(animacao == 4) {
				ApplyAnimation(playerid,"FINALE","FIN_Land_Die",4.1,0,1,1,1,1);
			}
			SendClientMessage(playerid, COLOR_WHITE, "Posição mudada!");
			return 1;
		}
		return 0;
	}

	if(strcmp(cmd, "/meter", true) == 0){
		if(Transacama[playerid] == 1){
			if(GetDistanceBetweenPlayers(playerid,Prostitutacama[playerid]) > 5){
			    SendClientMessage(playerid,COLOR_GRAY,"Você está muito longe, chegue mais perto!");
				return 1;
			}
			if(Metendo[playerid] == 1){
			    SendClientMessage(playerid, COLOR_GRAY, "Você já está metendo!");
			    return 1;
			}
			new plid = Prostitutacama[playerid];
			Metendo[playerid] = 1;
			ApplyAnimation(playerid,"WAYFARER","WF_Back",4.1,0,1,1,1,1);
			ApplyAnimation(playerid,"WAYFARER","WF_Back",4.1,0,1,1,1,1);
			SendClientMessage(playerid, COLOR_PROSTITUTA,"Para transar não mexe a câmera e fique apertando -W- respectivamente.");
			SendClientMessage(plid,     COLOR_PROSTITUTA,"Seu cliente começou a meter, lá vem a dor, prepare-se...");
			SetTimerEx("JaEra",42000,0,"dd",playerid,plid);
			if(pStats[playerid][Camisinha] == 0){
			    SendClientMessage(playerid, COLOR_PROSTITUTA,"Você não está usando camisinha poderá pegar uma doença, rese para que essa puta não passe para você!");
				SemCamisa[playerid] = SetTimerEx("SemCamisinha",10000,0,"d",playerid);
			}
			return 1;
		} else {
	        for(new i=0; i<MAX_SLOTS; i++){
	            if(Sex2a2[i] == playerid){
					Metendo[playerid] = 1;
					SendClientMessage(playerid, COLOR_PROSTITUTA,"	Vai começar!");
					SendClientMessage(i,     COLOR_PROSTITUTA,"	A dor vai começar! hahaha prepare-se...");
					SetTimerEx("IniciandoSex",4000,0,"dd",playerid,i);
					SetTimerEx("JaEra",4000,0,"dd",playerid,i);
					if(pStats[playerid][Camisinha] == 0){
					    SendClientMessage(playerid, COLOR_PROSTITUTA,"	Você não está usando camisinha poderá pegar uma doença, rese para que essa puta não passe para você!");
						SemCamisa[playerid] = SetTimerEx("SemCamisinha",10000,0,"d",playerid);
					}
					return 1;
				}
			}
		}
	}

	if(strcmp(cmd,"/pagarstrip",true) == 0){
		new tmp[128];
		new plid,pickupmoney;
		tmp = strtok(cmdtext,idx);
		plid = strval(tmp);
		if(!strlen(tmp)){
		SendClientMessage(playerid, COLOR_GRAY, "USO: /pagarstrip [ID/da/striper]");
		return 1;
		}
		if(plid == playerid){
		SendClientMessage(playerid, COLOR_GRAY, "Você não pode pagar você mesmo!");
		return 1;
		}
		if(PlayerArea[playerid] != AreaStrip || PlayerArea[plid] != AreaStrip){
		SendClientMessage(playerid, COLOR_GRAY, "Você e o jogador selecionado devem estar na boate!");
		return 1;
		}
		if(FazendoStrip[playerid] == 1){
		SendClientMessage(playerid, COLOR_GRAY, "Sinto muito você está fazendo strip-tease no momento!");
		return 1;
		}
		if(pStats[plid][Prof] != PROSTITUTA){
		SendClientMessage(playerid, COLOR_GRAY, "Ei, esse jogador não é Prostituta!");
		return 1;
		}
		if(FazendoStrip[plid] == 0){
		SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está fazendo strip!");
		return 1;
		}
		if(GetDistanceBetweenPlayers(playerid,plid) > 10){
		SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto!");
		return 1;
		}
		if(GetPlayerServerMoney(playerid) < 50){
		SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro!");
		return 1;
		}
		else{
			SetPlayerControl(playerid,0);
			PlayerPay(playerid, plid, 50);
			SendClientMessage(playerid, COLOR_PROSTITUTA, "Você pagou $50,00 dólares para a striper!");
			new str[128];
			format(str,sizeof(str),"O jogador %s lhe pagou $50,00 dólares pelo strip-tease!",PlayerName(playerid));
			SendClientMessage(plid, COLOR_PROSTITUTA, str);
			KillTimer(TimerStrip[plid]);
			FST[plid] = 1;
			ApplyAnimation(playerid,"STRIP","PLY_CASH",4.1,0,1,1,1,1);
			ApplyAnimation(plid,"STRIP","STR_A2B",4.1,0,1,1,1,1);
			TimerStrip[plid] = SetTimerEx("FazendoStripTease",4500,false,"d",plid);
			new Float:X,Float:Y,Float:Z;
			GetPlayerPos(plid,X,Y,Z);
			GetXYInFrontOfPlayer(plid,X,Y,0.4);
			pickupmoney = CreatePickup(1212,1,X,Y,Z-0.7);
			SetTimerEx("DestruirPickupGrana",1300,false,"dd",playerid,pickupmoney);
			return 1;
		}
	}
	if(strcmp(cmd,"/fazerstrip",true) == 0){
   		if(pStats[playerid][Prof] == PROSTITUTA){
	  		if(PlayerArea[playerid] == AreaStrip){
	  			ApplyAnimation(playerid,"STRIP","STR_Loop_A",4.1,0,1,1,1,1);
	  			FazendoStrip[playerid] = 1;
	  			SetPlayerControl(playerid,0);
	  			SendClientMessage(playerid, COLOR_PROSTITUTA, "O strip começou!");
	  			SendClientMessage(playerid, COLOR_PROSTITUTA, "Digite as teclas:");
	  			SendClientMessage(playerid, COLOR_PROSTITUTA, "Cima, Baixo, Esquerda, Direita");
	  			SendClientMessage(playerid, COLOR_PROSTITUTA, "Para parar de fazer strip-tease digite /pararstrip");
	  			TimerStrip[playerid] = SetTimerEx("FazendoStripTease",100,false,"d",playerid);
	  			CheckStripKey[playerid] = SetTimerEx("CheckStripTeaseKey", 200, true, "d", playerid);
	  			return 1;
  			}
  			else{
				SendClientMessage(playerid, COLOR_GRAY, "Você não está na boate.");
				return 1;
			}
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "Você não é Prostituta!");
			return 1;
		}
	}
    if(strcmp(cmd,"/pararstrip",true) == 0){
		if(FazendoStrip[playerid] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Você não está fazendo strip!");
			return 1;
	   	}
	   	else{
			KillTimer(CheckStripKey[playerid]);
			ClearAnimations(playerid);
		   	FazendoStrip[playerid] = 0;
		   	KillTimer(TimerStrip[playerid]);
		   	FST[playerid] = 0;
		   	SetPlayerControl(playerid,1);
		   	SendClientMessage(playerid, COLOR_PROSTITUTA, "O strip-tease acabou!");
		   	return 1;
	   	}
	}
	if(strcmp(cmd, "/strip-tease", true) == 0) {
		if(pStats[playerid][Prof] == PROSTITUTA || IsPlayerAdmin(playerid)){
			new tmp[128];
    	    new plid;
	        tmp = strtok(cmdtext, idx);
	        plid = strval(tmp);
			if(!strlen(tmp)){
		    	SendClientMessage(playerid, COLOR_GRAY,"USO: /strip-tease [id]");
				return 1;
			}
			if(PlayerArea[playerid] != AreaStrip){
				SendClientMessage(playerid, COLOR_GRAY,"Você não está na boate.");
				return 1;
			}
		   	if(!IsPlayerConnected(plid)){
	       		SendClientMessage(playerid,COLOR_GRAY,"Jogador não conectado/logado");
				return 1;
			}
			if(GetPlayerServerMoney(plid) < 200){
	        	SendClientMessage(playerid, COLOR_GRAY, "Ele não tem dinheiro para pagar!");
				return 1;
			}
		    if(GetDistanceBetweenPlayers(playerid,plid) > 20){
		       	SendClientMessage(playerid,COLOR_GRAY,"Você está muito longe, chegue mais perto!");
				return 1;
			}
			if(plid == playerid){
				SendClientMessage(playerid, COLOR_GRAY, "Você não pode fazer strip-tease para si mesma.");
				return 1;
			}
			else {
				SendClientMessage(plid, COLOR_PROSTITUTA, "A prostituta está lhe oferecendo um strip tease na boate.");
				SendClientMessage(plid, COLOR_PROSTITUTA, "Se quiser assistir basta digitar /aceitostrip se não /recusarstrip.");
				Strip2[plid] = 1;
				Prostitutacama2[plid] = playerid;
				SendClientMessage(playerid, COLOR_PROSTITUTA, "A proposta foi enviada! Aguarde.");
				return 1;
			}
		}
	}

	if(strcmp(cmd, "/aceitostrip", true) == 0){
		if(Strip2[playerid] == 1){
			Strip2[playerid] = 0;
			SendClientMessage(playerid, COLOR_PROSTITUTA,"O show vai começar...");
	        SetPlayerPos(Prostitutacama2[playerid], 1208.7369,-6.3787,1001.3281);
	        SetPlayerPos(playerid, 1204.4965,-6.4623,1000.9219);
	        SetPlayerInterior(playerid,2);
	        SetPlayerInterior(Prostitutacama2[playerid],2);
	        SetPlayerControl(Prostitutacama2[playerid],0);
	        ApplyAnimation(playerid,"LAPDAN1","LAPDAN_P",4.1,0,1,1,1,1);
			SendClientMessage(playerid, COLOR_PROSTITUTA,"Você pagou para a prostituta $200 pelo strip!");
			PlayerPay(playerid, Prostitutacama2[playerid], 200);
	        SetTimerEx("Strip",2000,0,"d",Prostitutacama2[playerid]);
			return 1;
		}
		if(Strip2[playerid] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Você não fechou acordo com a prostituta!");
	   		return 1;
		}
	}

	if(strcmp(cmd, "/recusarstrip", true) == 0){
	    if(Strip2[playerid] == 1){
	        Strip2[playerid] = 0;
	        SendClientMessage(playerid, COLOR_GREEN, "Você não aceitou a proposta!");
	        return 1;
	    }
		if(Strip2[playerid] == 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não fechou acordo com a prostituta!");
	        return 1;
	    }
	}

	if(strcmp(cmd, "/tocarcampainha", true) == 0) {
		new pickupid = GetPickupHouse[playerid];
	    if(GetPickupHouse[playerid] == -1) return SendClientMessage(playerid, COLOR_GRAY, "EI, você não está em nenhuma casa, se estiver saiá e entre novamente nela!");
	    if(!compare(pckStats[pickupid][PickupDono],"NONE") && strlen(pckStats[pickupid][PickupDono]) > 0){
			for(new i = 0; i < MAX_SLOTS; i++){
			    if(NaCasa[i] == 1 && PickupEntradaCasa[i] == GetPickupHouse[playerid]){
			        SendClientMessage(i, COLOR_BLUE_PLUS, "* DING DONG");
			        PlayerPlaySound(i,1057,0.0,0.0,0.0);
			        SendClientMessage(i, COLOR_WHITE, "Tem alguém tocando a campainha, vá verificar quem é...");
				}
			}
			SendClientMessage(playerid, COLOR_BLUE_PLUS, "* DING DONG");
			PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
			return 1;
		} else {
			SendClientMessage(playerid, COLOR_GRAD, "PSIU... Isso não é uma casa");
			return 1;
		}
	}
	if(strcmp(cmd, "/liberartelefone", true) == 0) {
	    if(!compare(PlayerName(playerid), propStats[14][Dono1]) && !IsPropertyPartner(playerid,14)) return SendClientMessage(playerid, COLOR_GRAY, "Você não é dono nem sócio da ECTVL.");
	    new tmp[128];
	    new plid;
	    new casaid;
	    tmp = strtok(cmdtext,idx);
	    plid = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /liberartelefone [id] [casaid]");
	    tmp = strtok(cmdtext,idx);
	    casaid = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /liberartelefone [id] [casaid]");
		if(casaid < 1 && casaid > 10 && casaid == 0)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /liberartelefone [id] [casaid]");
		    SendClientMessage(playerid, COLOR_GRAY, "Entre 1 e 10");
		    return 1;
		}
		new casa = GetHouses(plid, casaid);
		if(casa == -1){
		    SendClientMessage(playerid, COLOR_GRAY, " Ele não tem nenhuma casa com esse ID.");
		    return 1;
		}
		if(pckStats[casa][SemTelefone] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Senhor, o telefone desse jogador não está cortado!");
		pckStats[casa][ContaTelefone] = 0;
		pckStats[casa][SemTelefone] = 0;
		SendClientMessage(playerid, COLOR_WHITE, "Telefone liberado...");
		return 1;
	}
	if(strcmp(cmd, "/liberarluz", true) == 0) {
	    if(!compare(PlayerName(playerid), propStats[13][Dono1]) && !IsPropertyPartner(playerid,13)) return SendClientMessage(playerid, COLOR_GRAY, "Você não é dono nem sócio da COEVL.");
	    new tmp[128];
	    new plid;
	    new casaid;
	    tmp = strtok(cmdtext,idx);
	    plid = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /liberarluz [id] [casaid]");
	    tmp = strtok(cmdtext,idx);
	    casaid = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /liberarluz [id] [casaid]");
		if(casaid < 1 && casaid > 10 && casaid == 0)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /liberarluz [id] [casaid]");
		    SendClientMessage(playerid, COLOR_GRAY, "Entre 1 e 10");
		    return 1;
		}
		new casa = GetHouses(plid, casaid);
		if(casa == -1){
		    SendClientMessage(playerid, COLOR_GRAY, " Ele não tem nenhuma casa com esse ID.");
		    return 1;
		}
		if(pckStats[casa][SemLuz] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Senhor, a luz desse jogador não está cortada!");
		pckStats[casa][ContaLuz] = 0;
		pckStats[casa][SemLuz] = 0;
		SendClientMessage(playerid, COLOR_WHITE, "Luz liberada...");
		return 1;
	}
	
	if(strcmp(cmd, "/pagartelefone", true) == 0) {
	    new string[128];
		new tmp[128];
		new casaid;
	    tmp = strtok(cmdtext,idx);
	    casaid = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /pagartelefone [casaid]");
		if(casaid < 1 && casaid > 10 && casaid == 0)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /pagartelefone [casaid]");
		    SendClientMessage(playerid, COLOR_GRAY, "Entre 1 e 10");
		    return 1;
		}
		if(PlayerArea[playerid] != AreaECTVL){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está na ECTVL (Empresa de Contas Telefônicas Virtual Life)");
		    return 1;
		}
		new casa = GetHouses(playerid, casaid);
		if(casa == -1){
		    SendClientMessage(playerid, COLOR_GRAY, "Sr, você não tem casa nesse ID.");
		    return 1;
		}
		if(GetPlayerServerMoney(playerid) < pckStats[casa][ContaTelefone]){
		    SendClientMessage(playerid, COLOR_GRAY, "O senhor não tem dinheiro, sendo assim eu não posso fazer nada, sinto muito!");
			format(string,sizeof(string),"CUSTO: $%d",pckStats[casa][ContaTelefone]);
			SendClientMessage(playerid, COLOR_GRAY, string);
			return 1;
		}
		if(pckStats[casa][SemTelefone] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Senhor, seu telefone não está cortado!");
		    return 1;
		}
		AddPlayerMoney(playerid,-pckStats[casa][ContaTelefone], -1);
		AcrescentarLucro(12,pckStats[casa][ContaTelefone]);
		format(string,sizeof(string),"OK senhor, seu telefone foi liberado novamente pelo custo de $%d",pckStats[casa][ContaTelefone]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		pckStats[casa][ContaTelefone] = 0;
		pckStats[casa][SemTelefone] = 0;
		return 1;
	}
	if(strcmp(cmd, "/pagarluz", true) == 0) {
	    new string[128];
		new tmp[128];
		new casaid;
	    tmp = strtok(cmdtext,idx);
	    casaid = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /pagarluz [casaid]");
		if(casaid < 1 && casaid > 10 && casaid == 0)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /pagarluz [casaid]");
		    SendClientMessage(playerid, COLOR_GRAY, "Entre 1 e 10");
		    return 1;
		}
		if(PlayerArea[playerid] != AreaCOEVL){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está na COEVL (Companhia Elétrica Virtual Life)");
		    return 1;
		}
		new casa = GetHouses(playerid, casaid);
		if(casa == -1){
		    SendClientMessage(playerid, COLOR_GRAY, "Sr, você não tem casa nesse ID.");
		    return 1;
		}
		if(GetPlayerServerMoney(playerid) < pckStats[casa][ContaLuz] ){
		    SendClientMessage(playerid, COLOR_GRAY, "O senhor não tem dinheiro, sendo assim eu não posso fazer nada, sinto muito!");
			format(string,sizeof(string),"CUSTO: $%d",pckStats[casa][ContaLuz] );
			SendClientMessage(playerid, COLOR_GRAY, string);
			return 1;
		}
		if(pckStats[casa][SemLuz] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Senhor, sua Luz não está cortado!");
		    return 1;
		}
		AddPlayerMoney(playerid,-pckStats[casa][ContaLuz] ,-1);
		AcrescentarLucro(13,pckStats[casa][ContaLuz]);
		format(string,sizeof(string),"OK senhor, sua luz foi liberada novamente pelo custo de $%d",pckStats[casa][ContaLuz] );
		SendClientMessage(playerid, COLOR_WHITE, string);
		pckStats[casa][ContaLuz] = 0;
		pckStats[casa][SemLuz] = 0;
		return 1;
	}
	if(strcmp(cmd, "/minhapickup", true) == 0 && IsPlayerAdmin(playerid)) {
		new msg[128];
		format(msg,sizeof(msg),"Sua pickup: %d",GetPickupHouse[playerid]);
		SendClientMessage(playerid, COLOR_WHITE, msg);
		return 1;
	}
	if(strcmp(cmd, "/entrarhotel", true) == 0) {
		if(PlayerArea[playerid] == AreaHotel){
		    NoHotel[playerid] = 1;
		    GetPlayerPos(playerid,HotelLastPos[playerid][0],HotelLastPos[playerid][1],HotelLastPos[playerid][2]);
    		SetPlayerPos(playerid,PosHoteis[PlayerHotel[playerid]][hotelX],PosHoteis[PlayerHotel[playerid]][hotelY],PosHoteis[PlayerHotel[playerid]][hotelZ]);
			SetPlayerInterior(playerid,PosHoteis[PlayerHotel[playerid]][hotelInt]);
			SendClientMessage(playerid, COLOR_WHITE, "Para sair do hotel digite /sairhotel");
			return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um hotel!");
		    return 1;
		}
	}
	if(strcmp(cmd, "/sairhotel", true) == 0) {
	    if(NoHotel[playerid] == 1){
			NoHotel[playerid] = 0;
		    SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid,HotelLastPos[playerid][0],HotelLastPos[playerid][1],HotelLastPos[playerid][2]);
			return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um hotel!");
		    return 1;
		}
	}
	if(strcmp(cmd, "/entrar", true) == 0) {
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você deve estar fora de um veículo para entrar em uma porta...");
		new pickupid = GetPickupServer[playerid];
		if(pickupid == 22){
			if(HoraJogo < 7 || HoraJogo > 24){
   				SendClientMessage(playerid, COLOR_GRAY, "Loja de registros de cofre fechada, abrimos das 07:00 até às 24:00");
				return 1;
			}
			SendTextDrawArea(playerid, COLOR_CORRETOR, "Loja de registro ~n~de cofres");
			PlayerArea[playerid] = AreaCofre;
			SetPlayerPos(playerid,1490.9890,1305.4993,1093.2964);
			SetPlayerInterior(playerid,3);
			SendClientMessage(playerid, COLOR_LIGHT_RED, "Virtual Life RPG - Loja de registro de cofres:");
			SendClientMessage(playerid, COLOR_LIGHT_RED, "Aqui é onde ficam todos os registros de cofres do jogo!");
			SendClientMessage(playerid, COLOR_WHITE, "Comandos disponíveis:");
			SendClientMessage(playerid, COLOR_WHITE, "/registrarcofre [senha] : Registrar uma senha para o seu cofre!");
			SendClientMessage(playerid, COLOR_WHITE, "/minhasenhacofre : Ver a senha do seu cofre...");
			SendClientMessage(playerid, COLOR_WHITE, "/cofreinfo [casaid]: Ver o que está guardado em seu cofre!");
		}
		else if(pickupid == 49){
			if(HoraJogo < 6 || HoraJogo > 24){
   				SendClientMessage(playerid, COLOR_GRAY, "Didier Sachs fechada, abrimos das 06:00 até às 24:00");
				return 1;
			}
			SendTextDrawArea(playerid, COLOR_BLUE, "Didier Sachs");
		    PlayerArea[playerid] = AreaDidierSachs;
		    SetPlayerPos(playerid,204.3330,-166.6950,1000.5234);
		    SetPlayerInterior(playerid,14);
		    SendClientMessage(playerid, COLOR_WHITE, "Didier Sachs: para adquirir uma nova skin digite /comprarskin [ID/da/skin]");
		    SendClientMessage(playerid, COLOR_WHITE, "Didier Sachs: para experimentar uma skin digite /experimentarskin [ID/da/skin]");
		}
		else if(pickupid == 50){
			if(HoraJogo < 5 || HoraJogo > 22){
				SendClientMessage(playerid, COLOR_GRAY, "Pro Laps fechada, abrimos das 05:00 até às 22:00");
				return 1;
			}
			SendTextDrawArea(playerid, COLOR_BLUE, "Pro Laps");
		    PlayerArea[playerid] = AreaProLaps;
		    SetPlayerPos(playerid,207.0562,-138.3951,1003.5078);
		    SetPlayerInterior(playerid,3);
		    SendClientMessage(playerid, COLOR_WHITE, "Pro Laps: para adquirir uma nova skin digite /comprarskin [ID/da/skin]");
            SendClientMessage(playerid, COLOR_WHITE, "Pro Laps: para experimentar uma skin digite /experimentarskin [ID/da/skin]");
		}
		else if(pickupid == 51){
			if(HoraJogo < 5 || HoraJogo > 23){
   				SendClientMessage(playerid, COLOR_GRAY, "Victim fechada, abrimos das 05:00 até às 23:00");
				return 1;
			}
			SendTextDrawArea(playerid, COLOR_BLUE, "Victim");
			PlayerArea[playerid] = AreaVictim;
		    SetPlayerPos(playerid,226.2940,-7.4315,1002.2109);
		    SetPlayerInterior(playerid,5);
		    SendClientMessage(playerid, COLOR_WHITE, "Victim: para adquirir uma nova skin digite /comprarskin [ID/da/skin]");
		    SendClientMessage(playerid, COLOR_WHITE, "Victim: para experimentar uma skin digite /experimentarskin [ID/da/skin]");
		}
		else if(pickupid == 52){
			if(HoraJogo < 4 || HoraJogo > 22){
   				SendClientMessage(playerid, COLOR_GRAY, "Binco fechada, abrimos das 04:00 até às 22:00");
				return 1;
			}
			SendTextDrawArea(playerid, COLOR_BLUE, "Binco");
		    PlayerArea[playerid] = AreaBinco;
		    SetPlayerPos(playerid,207.7106,-109.3912,1005.1328);
		    SetPlayerInterior(playerid,15);
		    SendClientMessage(playerid, COLOR_WHITE, "Binco: para adquirir uma nova skin digite /comprarskin [ID/da/skin]");
		    SendClientMessage(playerid, COLOR_WHITE, "Binco: para experimentar uma skin digite /experimentarskin [ID/da/skin]");
		}
		else if(pickupid == 53){
			if(HoraJogo < 6 || HoraJogo > 24){
   				SendClientMessage(playerid, COLOR_GRAY, "Sub-Urban fechada, abrimos das 06:00 até às 24:00");
				return 1;
			}
			SendTextDrawArea(playerid, COLOR_BLUE, "Sub Urban");
		    PlayerArea[playerid] = AreaSubUrban;
		    SetPlayerPos(playerid,203.7780,-48.4924,1001.8047);
		    SetPlayerInterior(playerid,1);
		    SendClientMessage(playerid, COLOR_WHITE, "Sub Urban: para adquirir uma nova skin digite /comprarskin [ID/da/skin]");
		    SendClientMessage(playerid, COLOR_WHITE, "Sub Urban: para experimentar uma skin digite /experimentarskin [ID/da/skin]");
		}
		else if(pickupid == 54){
		    SetPlayerPos(playerid,502.0535,-69.5163,998.7578);
		    SetPlayerInterior(playerid,11);
		    SendTextDrawArea(playerid, COLOR_BARMAN, "Bar");
  			PlayerArea[playerid] = AreaBar;
			SetPlayerCheckpoint(playerid,498.6165,-75.9877,998.7578,2.0);
		    CheckpointStatus[playerid] = BALCAO_BAR;
			for(new i=0;i<MAX_SLOTS;i++){
				if(i != playerid){
					if(pStats[i][Prof] == BARMAN){
						if(GetDistanceBetweenPlayers(playerid, i) < 100){
	                       	DisablePlayerCheckpoint(playerid);
	             			CheckpointStatus[playerid] = NONE;
						}
					}
				}
			}
		}
		else if(pickupid == 55){
		    SetPlayerPos(playerid,1204.9303,-11.9801,1000.9219);
		    SetPlayerInterior(playerid,2);
		    SendTextDrawArea(playerid, COLOR_PROSTITUTA, "Boate");
		    PlayerArea[playerid] = AreaStrip;
			SetTimerEx("MostrarMensagemArea",1500,0,"d",playerid);
		}
		else if(pickupid == 56){
		    SetPlayerPos(playerid,493.3910,-22.4116,1000.6797);
		    SetPlayerInterior(playerid,17);
		    SendTextDrawArea(playerid, COLOR_GREEN, "Balada");
			SetPlayerCheckpoint(playerid,499.9472,-20.8251,1000.6797,2.0);
			CheckpointStatus[playerid] = BALCAO_BAR;
			PlayerArea[playerid] = AreaBalada;
			SetTimerEx("MostrarMensagemArea",1000,0,"d",playerid);
		}
		else if(pickupid == 57){
  			if(TemProfissao(VENDEDOR_DE_ARMAS))
  			{
	   			GameTextForPlayer(playerid,"~r~Fechada", 5000,0);
		   		SendClientMessage(playerid, COLOR_GRAY, "Senhor nossa loja está fechada, existem vendedores online, compre armas com eles.");
				return 1;
			}
			SendTextDrawArea(playerid, COLOR_VENDEDOR_DE_ARMAS, "Ammu-Nation");
		    SetPlayerPos(playerid,316.6105,-169.9380,999.6010);
		    PickupAmmuSelect[playerid] = 1;
		    SetPlayerInterior(playerid,6);
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid,312.1087,-165.4865,999.6010,2.0);
		    CheckpointStatus[playerid] = ARMAS;
		    SendClientMessage(playerid, COLOR_LIGHT_RED, "|================| Bem vindo à Ammu Nation |================|");
		    SendClientMessage(playerid, COLOR_WHITE, "Ammu Nation: para adquirir armas entre no checkpoint...");
		}
		else if(pickupid == 58){
  			if(TemProfissao(VENDEDOR_DE_ARMAS))
  			{
	   			GameTextForPlayer(playerid,"~r~Fechada", 5000,0);
		   		SendClientMessage(playerid, COLOR_GRAY, "Senhor nossa loja está fechada, existem vendedores online, compre armas com eles.");
				return 1;
			}
			SendTextDrawArea(playerid, COLOR_VENDEDOR_DE_ARMAS, "Ammu-Nation");
		    SetPlayerPos(playerid,316.6105,-169.9380,999.6010);
		    PickupAmmuSelect[playerid] = 2;
		    SetPlayerInterior(playerid,6);
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid,312.1087,-165.4865,999.6010,3.5);
		    CheckpointStatus[playerid] = ARMAS;
		    SendClientMessage(playerid, COLOR_LIGHT_RED, "|================| Bem vindo à Ammu Nation |================|");
		    SendClientMessage(playerid, COLOR_WHITE, "Ammu Nation: para adquirir armas entre no checkpoint...");
		}
		else if(pickupid == 59){
			if(DelegaciaAberta == 3)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "A Delegacia está fechada para todos, portanto você não pode entrar!");
				return 1;
			}
			if(DelegaciaAberta == 2)
			{
			    if(pStats[playerid][Prof] != DELEGADO)
			    {
			    	SendClientMessage(playerid, COLOR_GRAY, "A Delegacia está somente aberta para Delegados...");
					return 1;
				}
			}
			if(DelegaciaAberta == 1)
			{
			    if(pStats[playerid][Prof] != COP_MILITAR && pStats[playerid][Prof] != COP_RODOVIARIO && pStats[playerid][Prof] != COP_SWAT && pStats[playerid][Prof] != DELEGADO)
				{
				    SendClientMessage(playerid, COLOR_GRAY, "A Delegacia está aberta somente para quem trabalha no Departamento...");
					return 1;
				}
			}
		    SetPlayerPos(playerid,246.7840,63.9002,1003.6406);
		    SetPlayerInterior(playerid, 6);
		    SendTextDrawArea(playerid, COLOR_CENTRAL, "Delegacia");
			PlayerArea[playerid] = AreaDelegacia;
			SetTimerEx("MostrarMensagemArea",1500,0,"d",playerid);
		}
		else if(pickupid == 60){
			if(HoraJogo < 5 || HoraJogo > 22)
			{
   				SendClientMessage(playerid, COLOR_GRAY, "Loteria de Cavalos fechada, abrimos das 05:00 até às 22:00");
				return 1;
			}
		    SetPlayerPos(playerid,832.8324,7.4180,1004.1797);
		    SetPlayerInterior(playerid,3);
		    SendTextDrawArea(playerid, COLOR_BROWN, "Loteria de ~n~cavalos");
	        PlayerArea[playerid] = AreaLCavalos;
			SetTimerEx("MostrarMensagemArea",1500,0,"d",playerid);
		}
		else if(pickupid == 61){
		    SendTextDrawArea(playerid, COLOR_JUIZ, "Loja de ~n~utilidades");
		    SetPlayerPos(playerid,-31.0222,-89.7937,1003.5469);
		    SetPlayerInterior(playerid,18);
		    PickupUtilidadesSelect[playerid] = 1;
			PlayerArea[playerid] = AreaCreditos;
			SetTimerEx("MostrarMensagemArea",1500,0,"d",playerid);
			SetTimerEx("MostrarMensagemArea",5000,0,"d",playerid);
		}
		else if(pickupid == 62){
		    SendTextDrawArea(playerid, COLOR_JUIZ, "Loja de ~n~utilidades");
		    SetPlayerPos(playerid,-31.0222,-89.7937,1003.5469);
		    SetPlayerInterior(playerid,18);
		    PickupUtilidadesSelect[playerid] = 2;
			PlayerArea[playerid] = AreaCreditos;
			SetTimerEx("MostrarMensagemArea",1500,0,"d",playerid);
			SetTimerEx("MostrarMensagemArea",5000,0,"d",playerid);
		}
		else if(pickupid == 63){
		    SendTextDrawArea(playerid, COLOR_JUIZ, "Loja de ~n~utilidades");
		    SetPlayerPos(playerid,-31.0222,-89.7937,1003.5469);
		    SetPlayerInterior(playerid,18);
		    PickupUtilidadesSelect[playerid] = 3;
			PlayerArea[playerid] = AreaCreditos;
			SetTimerEx("MostrarMensagemArea",1500,0,"d",playerid);
			SetTimerEx("MostrarMensagemArea",5000,0,"d",playerid);
		}
		else if(pickupid == 64){
		    SendTextDrawArea(playerid, COLOR_JUIZ, "Loja de ~n~utilidades");
		    SetPlayerPos(playerid,-31.0222,-89.7937,1003.5469);
		    SetPlayerInterior(playerid,18);
		    PickupUtilidadesSelect[playerid] = 4;
			PlayerArea[playerid] = AreaCreditos;
			SetTimerEx("MostrarMensagemArea",1500,0,"d",playerid);
			SetTimerEx("MostrarMensagemArea",5000,0,"d",playerid);
		}
		else if(pickupid == 65){
		    SendTextDrawArea(playerid, COLOR_JUIZ, "Loja de ~n~utilidades");
		    SetPlayerPos(playerid,-31.0222,-89.7937,1003.5469);
		    SetPlayerInterior(playerid,18);
		    PickupUtilidadesSelect[playerid] = 5;
			PlayerArea[playerid] = AreaCreditos;
			SetTimerEx("MostrarMensagemArea",1500,0,"d",playerid);
			SetTimerEx("MostrarMensagemArea",5000,0,"d",playerid);
		}
		else if(pickupid == 66){
		    SendTextDrawArea(playerid, COLOR_LIGHT_GREEN, "Burger Shot");
		    SetPlayerPos(playerid,363.4130,-74.5787,1001.5078);
		    SetPlayerInterior(playerid,10);
		    PickupBurgerShotSelect[playerid] = 1;
		    SetPlayerCheckpoint(playerid,376.3405,-67.4712,1001.5078,2.0);
		    CheckpointStatus[playerid] = CARDAPIO;
		    SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "Bem vindo à Burger Shot!");
		    SendClientMessage(playerid, COLOR_LIGHT_GREEN, "Se quiser comer algo, vá até o CheckPoint (marca vermelha) no radar");
		}
		else if(pickupid == 80){
		    SendTextDrawArea(playerid, COLOR_LIGHT_GREEN, "Burger Shot");
		    SetPlayerPos(playerid,363.4130,-74.5787,1001.5078);
		    SetPlayerInterior(playerid,10);
		    PickupBurgerShotSelect[playerid] = 2;
		    SetPlayerCheckpoint(playerid,376.3405,-67.4712,1001.5078,2.0);
		    CheckpointStatus[playerid] = CARDAPIO;
		    SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "Bem vindo à Burger Shot!");
		    SendClientMessage(playerid, COLOR_LIGHT_GREEN, "Se quiser comer algo, vá até o CheckPoint (marca vermelha) no radar");
		}
		else if(pickupid == 47){
		    if(ValorDia != 0)
			{
				new string[128];
		       	format(string,sizeof(string),"O Estádio fica aberto apenas dias de domingo, hoje é %s",DiaName[ValorDia]);
    	 		SendClientMessage(playerid, COLOR_GRAY, string);
				return 1;
			}
			SendTextDrawArea(playerid, COLOR_WHITE, "Estadio");
		    SetPlayerPos(playerid,-1465.4435,1560.3199,1052.7500);
	    	SetPlayerInterior(playerid,14);
		}
		else if(pickupid == 33){
		    SendTextDrawArea(playerid, COLOR_VENDEDOR_DE_ARMAS, "Loja de ~n~municoes");
		    SetPlayerPos(playerid,315.6061,-127.8440,1004.0625);
		    SetPlayerInterior(playerid,7);
		    DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,308.4588,-142.7652,1004.0625,1.5);
			CheckpointStatus[playerid] = LOJA_MUNICOES;
		}
		else if(pickupid == 37){
		    SetPlayerPos(playerid,2528.1272,-1679.1464,1015.4986);
		    SetPlayerInterior(playerid,1);
		}
		else if(pickupid == 35){
		    SetPlayerPos(playerid,2447.8704,-1704.4509,1013.5078);
		    SetPlayerInterior(playerid,2);
		}
		else if(pickupid == 45){
			if(HoraJogo < 9 || HoraJogo > 20){
   				SendClientMessage(playerid, COLOR_GRAY, "Corretora de Propriedades fechada, abrimos das 09:00 até às 20:00");
				return 1;
			}
			SendTextDrawArea(playerid, COLOR_BLUE, "Corretora de ~n~propriedades");
		    SetPlayerPos(playerid,278.7329,-1613.8917,97.4182);
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid,272.3840,-1613.9673,97.4182,2.0);
		    CheckpointStatus[playerid] = CORRETORA_PROPRIEDADES;
		}
		else if(pickupid == 42){
			if(HoraJogo < 5 || HoraJogo > 24){
   				SendClientMessage(playerid, COLOR_GRAY, "Loteria fechada, abrimos das 05:00 até às 24:00");
				return 1;
			}
		    SetPlayerPos(playerid,-2161.7053,642.8295,1052.3750);
		    SetPlayerInterior(playerid,1);
		    SendTextDrawArea(playerid, COLOR_JUIZ, "Loteria");
			PlayerArea[playerid] = AreaLoteria;
			SendClientMessage(playerid, COLOR_LIGHT_RED, "|================| Bem vindo à Loteria |================|");
			SendClientMessage(playerid, COLOR_WHITE, "Quer tentar sorte? Caso queira digite:");
			SendClientMessage(playerid, COLOR_WHITE, "/loteria [0-20] [0-20] : Para comprar um bilhete de aposta (Custo: $200,00 dólares).");
			SendClientMessage(playerid, COLOR_JUIZ, "Prêmios nos valores entre $10000,00 e $30000,00 dólares...");
		}
		else if(pickupid == 39){
			SetPlayerPos(playerid,245.3983,112.6224,1003.2188);
			SetPlayerInterior(playerid,10);
		}
		else if(pickupid == 43){
		    SendTextDrawArea(playerid, COLOR_WHITE, "Agencia de ~n~empregos");
		    SetPlayerInterior(playerid,3);
		    SetPlayerFacingAngle(playerid,90);
		    SetPlayerPos(playerid,387.9047,171.1747,1008.3828);
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid,362.7719,173.7793,1008.3828,2.0);
		    CheckpointStatus[playerid] = AGENCIA_EMPREGOS;
		    SendClientMessage(playerid, COLOR_WHITE, "Entre no CheckPoint (marca vermelha) para ver as profissões disponíveis.");
		}
		else if(pickupid == 24){
		    if(HoraJogo < 7 || HoraJogo > 20){
   				SendClientMessage(playerid, COLOR_GRAY, "Banco fechado, abrimos das 07:00 até às 21:00");
				return 1;
			}
			SetPlayerVirtualWorld(playerid,1);
	    	SetPlayerInterior(playerid,0);
	    	SetPlayerFacingAngle(playerid,260.9407);
	    	SetPlayerPos(playerid,2306.1553,-13.2539,26.7422);
	    	pickupbancoselecionada[playerid] = 1;
	        PlayerArea[playerid] = AreaBanco;
			SendTextDrawArea(playerid, COLOR_DARK_GREEN, "Banco");
			SetTimerEx("MostrarMensagemArea",1500,0,"d",playerid);
		}
		else if(pickupid == 25){
		    if(HoraJogo < 10 || HoraJogo > 23){
	    		SendClientMessage(playerid, COLOR_GRAY, "Banco fechado, abrimos das 10:00 até às 00:00");
		 		return 1;
			}
			SetPlayerVirtualWorld(playerid,2);
	    	SetPlayerInterior(playerid,0);
	    	SetPlayerFacingAngle(playerid,260.9407);
	    	SetPlayerPos(playerid,2306.1553,-13.2539,26.7422);
	    	pickupbancoselecionada[playerid] = 2;
	        PlayerArea[playerid] = AreaBanco;
			SendTextDrawArea(playerid, COLOR_DARK_GREEN, "Banco");
			SetTimerEx("MostrarMensagemArea",1500,0,"d",playerid);
		}
    	else if(pickupid == 26){
    	    if(HoraJogo < 8 || HoraJogo > 18){
			    SendClientMessage(playerid, COLOR_GRAY, "Banco fechado, abrimos das 08:00 até às 19:00");
				return 1;
			}
			SetPlayerVirtualWorld(playerid,3);
		    SetPlayerInterior(playerid,0);
		    SetPlayerFacingAngle(playerid,260.9407);
		    SetPlayerPos(playerid,2306.1553,-13.2539,26.7422);
		    pickupbancoselecionada[playerid] = 3;
	        PlayerArea[playerid] = AreaBanco;
			SendTextDrawArea(playerid, COLOR_DARK_GREEN, "Banco");
			SetTimerEx("MostrarMensagemArea",1500,0,"d",playerid);
		}
    	else if(pickupid == 27){
        	if(HoraJogo > 19){
			    SendClientMessage(playerid, COLOR_GRAY, "Banco fechado, abrimos das 00:00 até às 20:00");
				return 1;
			}
			SetPlayerVirtualWorld(playerid,4);
	    	SetPlayerInterior(playerid,0);
	    	SetPlayerFacingAngle(playerid,260.9407);
	    	SetPlayerPos(playerid,2306.1553,-13.2539,26.7422);
	    	pickupbancoselecionada[playerid] = 4;
	        PlayerArea[playerid] = AreaBanco;
			SendTextDrawArea(playerid, COLOR_DARK_GREEN, "Banco");
			SetTimerEx("MostrarMensagemArea",1500,0,"d",playerid);
		}
		else if(pickupid == 83){
		    SendTextDrawArea(playerid, COLOR_PINK, "Seguradora");
		    SetPlayerInterior(playerid, 1);
		    SetPlayerFacingAngle(playerid, 281.2211);
        	SetPlayerPos(playerid, 2162.0996, 1602.8569, 999.9801);
        	DisablePlayerCheckpoint(playerid);
        	SetPlayerCheckpoint(playerid, 2169.4170, 1605.4910, 999.9712, 2.0);
        	SendTextDrawArea(playerid, COLOR_PINK, "Seguradora");
        	CheckpointStatus[playerid] = SEGURADORA;
        	SendClientMessage(playerid, COLOR_PINK, "[SEGURADORA] Vá até o Checkpoint para adquirir seguro.");
		}
		else if(pickupid == 85){
		    if(SalaDelegado[playerid] == 0 && pStats[playerid][Prof] != DELEGADO)
		    {
		        SendClientMessage(playerid, COLOR_GRAY, "Você não foi chamado para entrar aqui.");
		        return 1;
		    }
		    SalaDelegado[playerid] = 0;
		    SetPlayerInterior(playerid, 5);
		    SetPlayerPos(playerid, 321.9479,302.6125,999.1484);
		    SetPlayerFacingAngle(playerid, 177.9889);
		    if(pStats[playerid][Prof] != DELEGADO)
		    {
		    	SendClientMessage(playerid, COLOR_DELEGADO, "Bem-Vindo à sala do Delegado.");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_DELEGADO, "Bem-Vindo à sua sala");
			}
		}
		else if(pickupid == 87){
		    SendTextDrawArea(playerid, COLOR_AGRICULTOR, "Fazenda");
		    SetPlayerInterior(playerid, 3);
		    SetPlayerPos(playerid, 293.0435, 310.0034, 999.1484);
		    SetPlayerFacingAngle(playerid, 104.9233);
		    PlayerArea[playerid] = AreaCoopFazenda;
		}
		else if(pickupid == 89){
		    SendTextDrawArea(playerid, COLOR_WHEAT, "Loja de ~n~Donuts");
		    SetPlayerInterior(playerid, 17);
		    SetPlayerPos(playerid, 376.9678, -193.2767, 1000.6328);
		    SetPlayerFacingAngle(playerid, 352.2155);
		    SetPlayerCheckpoint(playerid, 379.2350, -186.7154, 1000.6328, 2.0);
		    CheckpointStatus[playerid] = DONUTS;
		    SendClientMessage(playerid, COLOR_WHEAT, "[DONUTS] <BEM VINDO À LOJA DE DONUTS>");
		    SendClientMessage(playerid, COLOR_WHEAT, "[DONUTS] Temos Donuts saborosos à sua espera (se você tiver dinheiro é claro).");
		}
		else if(pickupid == 92){
		    SetPlayerPos(playerid,678.4282,-453.1841,-25.6172);
			SetPlayerFacingAngle(playerid,87.3506);
			SetPlayerInterior(playerid,1);
			DisablePlayerCheckpoint(playerid);
			NoRestaurante[playerid] = 1;
			SetPlayerCheckpoint(playerid,683.9002,-455.4134,-25.6099,1.5);
			SendTextDrawArea(playerid, COLOR_BROWN, "Restaurante");
			CheckpointStatus[playerid] = RESTAURANTE;
		    SendClientMessage(playerid, COLOR_GREEN, "[RESTAURANTE] <BEM VINDO AO RESTAURANTE>");
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma porta de entrada.");
		}
		return 1;
	}
	if(strcmp(cmd, "/sair", true) == 0) {
		new pickupid = GetPickupServer[playerid];
	   	if(pickupid == 23){
 	   		PlayerArea[playerid] = AreaNone;
		    SetPlayerPos(playerid,1845.6234,-1866.1049,13.5752);
		    SetPlayerInterior(playerid,0);
  		}
		else if(pickupid == 67){
	    	SetPlayerPos(playerid,452.4577,-1479.4701,30.8395);
	    	PlayerArea[playerid] = AreaNone;
			SetPlayerInterior(playerid,0);
		}
		else if(pickupid == 68){
		    SetPlayerPos(playerid,497.9007,-1358.6243,16.5186);
		    PlayerArea[playerid] = AreaNone;
		    SetPlayerInterior(playerid,0);
		}
		else if(pickupid == 69){
		    SetPlayerPos(playerid,458.6580,-1500.4800,31.0444);
		    PlayerArea[playerid] = AreaNone;
		    SetPlayerInterior(playerid,0);
		}
		else if(pickupid == 70){
		    SetPlayerPos(playerid,2245.2300,-1663.8357,15.4766);
		    PlayerArea[playerid] = AreaNone;
		    SetPlayerInterior(playerid,0);
		}
		else if(pickupid == 71){
		    SetPlayerPos(playerid,2111.6140,-1212.7043,23.9647);
		    PlayerArea[playerid] = AreaNone;
		    SetPlayerInterior(playerid,0);
		}
		else if(pickupid == 72){
		    SetPlayerPos(playerid,2308.3047,-1644.2471,14.8270);
		    SetPlayerInterior(playerid,0);
	        PlayerArea[playerid] = AreaNone;
	        DisablePlayerCheckpoint(playerid);
	        CheckpointStatus[playerid] = NONE;
		}
		else if(pickupid == 73){
		    SetPlayerPos(playerid,2421.2444,-1222.3062,25.3649);
		    SetPlayerInterior(playerid,0);
	        DisablePlayerCheckpoint(playerid);
	        CheckpointStatus[playerid] = NONE;
	        PlayerArea[playerid] = AreaNone;
		}
		else if(pickupid == 74){
		    SetPlayerPos(playerid,1833.9900,-1681.7484,13.4503);
		    SetPlayerInterior(playerid,0);
		    PlayerPlaySound(playerid, 1188, 0.0, 0.0, 0.0);
			sombalada[playerid] = 0;
	        PlayerArea[playerid] = AreaNone;
			DisablePlayerCheckpoint(playerid);
			CheckpointStatus[playerid] = NONE;
		}
		else if(pickupid == 75){
			if(PickupAmmuSelect[playerid] == 1){
			    SetPlayerPos(playerid,1365.3528,-1279.0581,13.5469);
			}
			else{
			    SetPlayerPos(playerid,2400.6978,-1979.9229,13.5469);
			}
			DisablePlayerCheckpoint(playerid);
			CheckpointStatus[playerid] = NONE;
			PickupAmmuSelect[playerid] = 0;
		    SetPlayerInterior(playerid,0);
		}
		else if(pickupid == 76){
		    SetPlayerPos(playerid,1553.1730,-1675.0323,16.1953);
		    SetPlayerInterior(playerid,0);
			PlayerArea[playerid] = AreaNone;
		}
		else if(pickupid == 78){
		    if(PickupUtilidadesSelect[playerid] == 1) 	   SetPlayerPos(playerid,1315.4430,-900.6385,39.5781);
			else if(PickupUtilidadesSelect[playerid] == 2) SetPlayerPos(playerid,1929.8149,-1776.3326,13.5469);
            else if(PickupUtilidadesSelect[playerid] == 3) SetPlayerPos(playerid,999.4342,-920.1180,42.1797);
            else if(PickupUtilidadesSelect[playerid] == 4) SetPlayerPos(playerid,1352.4203,-1758.5322,13.5078);
            else if(PickupUtilidadesSelect[playerid] == 5) SetPlayerPos(playerid,1832.4796,-1842.6014,13.5781);
			PickupUtilidadesSelect[playerid] = 0;
			SetPlayerInterior(playerid,0);
		    PlayerArea[playerid] = AreaNone;
		}
		else if(pickupid == 77){
		    SetPlayerPos(playerid,1631.3468,-1168.5192,24.0781);
       	 	SetPlayerInterior(playerid,0);
		    PlayerArea[playerid] = AreaNone;
		}
		else if(pickupid == 79){
		    if(PickupBurgerShotSelect[playerid] == 1) 	   SetPlayerPos(playerid,811.6748,-1616.1306,13.5469);
			else if(PickupBurgerShotSelect[playerid] == 2) SetPlayerPos(playerid,1199.1923,-918.6677,43.1197);
			PickupBurgerShotSelect[playerid] = 0;
			SetPlayerInterior(playerid,0);
			DisablePlayerCheckpoint(playerid);
			CheckpointStatus[playerid] = NONE;
			SendClientMessage(playerid, COLOR_LIGHT_GREEN, "A Burger Shot lhe agradece pela visita!");
		}
		else if(pickupid == 48){
		    SetPlayerPos(playerid,2694.3291,-1702.7571,11.3968);
		    SetPlayerInterior(playerid,0);
		}
		else if(pickupid == 34){
    	    SetPlayerPos(playerid,1990.7200,-1994.6937,13.5469);
		    SetPlayerInterior(playerid,0);
		    DisablePlayerCheckpoint(playerid);
			CheckpointStatus[playerid] = NONE;
		}
		else if(pickupid == 38){
		    SetPlayerPos(playerid,2514.6113,-1674.0127,13.6615);
		    SetPlayerInterior(playerid,0);
		}
		else if(pickupid == 36){
		    SetPlayerPos(playerid,2460.3733,-1687.6772,13.5333);
		    SetPlayerInterior(playerid,0);
		}
		else if(pickupid == 46){
	    	DisablePlayerCheckpoint(playerid);
		    CheckpointStatus[playerid] = NONE;
		    SetPlayerPos(playerid,2867.4526,-1406.6439,11.0222);
		    SetPlayerInterior(playerid,0);
		}
		else if(pickupid == 41){
	    	SetPlayerPos(playerid,1737.6434,-1588.6013,13.5431);
	    	SetPlayerInterior(playerid,0);
		    PlayerArea[playerid] = AreaNone;
		}
		else if(pickupid == 40){
			SetPlayerPos(playerid,245.9066,66.4157,1003.6406);
			SetPlayerInterior(playerid,6);
  		}
		else if(pickupid == 44){
			SetPlayerInterior(playerid,0);
			SetPlayerFacingAngle(playerid,168.6);
			SetPlayerPos(playerid,1310.0126,-1370.7745,13.5797);
		}
		else if(pickupid == 28){
			if(pickupbancoselecionada[playerid] == 1){
			    SetPlayerVirtualWorld(playerid,0);
				SetPlayerInterior(playerid,0);
			    SetPlayerFacingAngle(playerid,260.9407);
			    SetPlayerPos(playerid,1770.7097,-1658.8129,14.4207);
			    pickupbancoselecionada[playerid] = 0;
	 		}
	   		else if(pickupbancoselecionada[playerid] == 2){
	   		    SetPlayerVirtualWorld(playerid,0);
				SetPlayerInterior(playerid,0);
			    SetPlayerFacingAngle(playerid,260.9407);
			    SetPlayerPos(playerid,1385.2159,-1017.0630,26.5754);
			    pickupbancoselecionada[playerid] = 0;
	   		}
			else if(pickupbancoselecionada[playerid] == 3){
			    SetPlayerVirtualWorld(playerid,0);
				SetPlayerInterior(playerid,0);
			    SetPlayerFacingAngle(playerid,260.9407);
			    SetPlayerPos(playerid,419.8152,-1430.3162,32.3457);
			    pickupbancoselecionada[playerid] = 0;
	    	}
	   		else if(pickupbancoselecionada[playerid] == 4){
	   		    SetPlayerVirtualWorld(playerid,0);
				SetPlayerInterior(playerid,0);
	    		SetPlayerFacingAngle(playerid,260.9407);
	    		SetPlayerPos(playerid,2867.9150,-1436.2626,10.9672);
	   			pickupbancoselecionada[playerid] = 0;
	    	}
  			if(PlayerArea[playerid] == AreaBanco){
                new msg[128];
				format(msg,sizeof(msg),"SERVIDOR: %s saiu do BANCO.",PlayerName(playerid));
				writelog(msg);
				PlayerArea[playerid] = AreaNone;
				if(BancoRoubando[playerid] != 0){
                    SendClientMessage(playerid, COLOR_ASSALTANTE, "Agora saia daí...");
                    SendClientMessage(playerid, COLOR_ASSALTANTE, "A grana está contigo, a polícia pode ir atrás de você ainda.");
					if(BancoRoubando[playerid] == 1){
					    new assalt;
					    assalt = minrand(100,200);
						AddPlayerMoney(playerid, assalt, 3);
						BancoRoubando[playerid] = 0;
					}
					else if(BancoRoubando[playerid] == 2){
					    new assalt;
					    assalt = minrand(200,300);
						AddPlayerMoney(playerid, assalt, 3);
						BancoRoubando[playerid] = 0;
					}
					else if(BancoRoubando[playerid] == 3){
					    new assalt;
					    assalt = minrand(300,400);
						AddPlayerMoney(playerid, assalt, 3);
						BancoRoubando[playerid] = 0;
					}
					else if(BancoRoubando[playerid] == 4){
					    new assalt;
					    assalt = minrand(400,600);
						AddPlayerMoney(playerid, assalt, 3);
						BancoRoubando[playerid] = 0;
					}
					else if(BancoRoubando[playerid] == 5){
					    new assalt;
					    assalt = minrand(500,600);
						AddPlayerMoney(playerid, assalt, 3);
						BancoRoubando[playerid] = 0;
					}
					SetTimerEx("Assalto",300000,0,"d",playerid);
				}
			}
		}
		else if(pickupid == 84){
		    CheckpointStatus[playerid] = NONE;
		    DisablePlayerCheckpoint(playerid);
			SetPlayerInterior(playerid, 0);
			SetPlayerFacingAngle(playerid, 271.0616);
			SetPlayerPos(playerid, 1737.0745, -1270.8171, 13.5449);
		}
		else if(pickupid == 86){
		    SetPlayerInterior(playerid, 6);
		    SetPlayerPos(playerid, 246.2153, 87.6283, 1003.6406);
		    SetPlayerFacingAngle(playerid, 354.8556);
		    if(pStats[playerid][Prof] != DELEGADO)
		    {
		    	SendClientMessage(playerid, COLOR_DELEGADO, "Você saiu da sala do Delegado, só poderá entrar denovo quando for chamado.");
			}
		}
		else if(pickupid == 88){
		    SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, -1060.5527, -1195.2561, 129.5891);
		    PlayerArea[playerid] = AreaNone;
		}
		else if(pickupid == 90){
		    SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, 1037.9948, -1339.9211, 13.7352);
		    DisablePlayerCheckpoint(playerid);
		    SendClientMessage(playerid, COLOR_WHEAT, "[DONUTS] Volte sempre (quando tiver dinheiro).");
		}
		else if(pickupid == 93){
		    SetPlayerPos(playerid,1477.3245,-1880.2889,13.5469);
			SetPlayerInterior(playerid,0);
			DisablePlayerCheckpoint(playerid);
			RemoveTextDrawArea(playerid);
			NoRestaurante[playerid] = 0;
		    SendClientMessage(playerid, COLOR_GREEN, "[RESTAURANTE] Volte sempre.");
		}
	    else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma porta de saída!");
		    return 1;
		}
		RemoveTextDrawArea(playerid);
		return 1;
	}

	if(strcmp(cmd,"/ligarcomputador",true)==0)
	{
	    if(NaCasa[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma casa!");
		if(pckStats[PickupEntradaCasa[playerid]][Computador] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem computador!");
			return 1;
		}
		if(InComputer[playerid] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você já está em um computador!");
		for(new i = 0; i < MAX_SLOTS; i++)
		{
		    if(IsPlayerConnected(i) && NaCasa[i] == 1 && PickupEntradaCasa[i] == PickupEntradaCasa[playerid] && InComputer[i] == 1)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Já tem alguém no computador dessa casa...");
				return 1;
			}
		}
		InComputer[playerid] = 1;
		SetPlayerControl(playerid,false);
		AntInt[playerid] = GetPlayerInterior(playerid);
	    SetPlayerInterior(playerid,0);
		SetPlayerCameraPos(playerid,AntPos[playerid][0],AntPos[playerid][1],AntPos[playerid][2]+1.0);
		SetPlayerCameraLookAt(playerid,AntPos[playerid][0],AntPos[playerid][1],AntPos[playerid][2]-0.3);
		SendClientMessage(playerid, COLOR_BLUE, "Conectado ao computador...");
		SendClientMessage(playerid, COLOR_JUIZ, "|------------------------------| Comandos disponíveis |------------------------------|");
		SendClientMessage(playerid, COLOR_WHITE,"|-| /propinfo [propriedade] : ver as informações de uma propriedade |-|");
		SendClientMessage(playerid, COLOR_WHITE,"|-| /inflacao : ver os preços dos alimentos, gasolina e eletrodomésticos |-|");
		SendClientMessage(playerid, COLOR_WHITE,"|-| /tocarmusica : para tocar uma música pelo computador |-|");
		return 1;
	}
	if(strcmp(cmd,"/desligarcomputador",true)==0)
	{
	    if(InComputer[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está em um computador!");
		InComputer[playerid] = 0;
		SendClientMessage(playerid, COLOR_BLUE, "Computador desligado...");
		SetPlayerInterior(playerid,AntInt[playerid]);
		SetCameraBehindPlayer(playerid);
		SetPlayerControl(playerid,true);
		PlayerPlaySound(playerid, 1186, 0.0,0.0,0.0);
		ComputerMusicEnable[playerid] = false;
		return 1;
	}
	if(strcmp(cmd,"/propinfo",true) == 0)
	{
	    if(InComputer[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está em um computador!");
	    new prop = strval(strtok(cmdtext,idx));
	    if(prop < 1 || prop >= sizeof Propriedades)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /propinfo [propriedade]");
		    SendClientMessage(playerid, COLOR_GRAY, "Verifique se a propriedade é válida: /propriedades");
		    return 1;
		}
		new string[128];
		format(string, sizeof string, "|==================== [ %s ] ====================|", Propriedades[prop][PropName]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		if(compare(propStats[prop][Dono1], "NONE"))
		{
			SendClientMessage(playerid, COLOR_BLUE, "Dono: Nenhum");
		}
		else
		{
		    format(string, sizeof string, "Dono: %s", propStats[prop][Dono1]);
		    SendClientMessage(playerid, COLOR_BLUE, string);
		}
		if(compare(propStats[prop][Socio1], "NONE"))
		{
			SendClientMessage(playerid, COLOR_BLUE, "Sócio 1: Nenhum");
		}
		else
		{
		    format(string, sizeof string, "Sócio 1: %s", propStats[prop][Socio1]);
		    SendClientMessage(playerid, COLOR_BLUE, string);
		}
		if(compare(propStats[prop][Socio2], "NONE"))
		{
			SendClientMessage(playerid, COLOR_BLUE, "Sócio 2: Nenhum");
		}
		else
		{
		    format(string, sizeof string, "Sócio 2: %s", propStats[prop][Socio2]);
		    SendClientMessage(playerid, COLOR_BLUE, string);
		}
		if(compare(propStats[prop][Socio3], "NONE"))
		{
			SendClientMessage(playerid, COLOR_BLUE, "Sócio 3: Nenhum");
		}
		else
		{
		    format(string, sizeof string, "Sócio 3: %s", propStats[prop][Socio3]);
		    SendClientMessage(playerid, COLOR_BLUE, string);
		}
		format(string, sizeof string, "Semana passada: $%d,00 dólares", propStats[prop][SemanaPassada]);
		SendClientMessage(playerid, COLOR_BLUE, string);
		format(string, sizeof string, "Semana retrasada: $%d,00 dólares", propStats[prop][SemanaRetrasada]);
		SendClientMessage(playerid, COLOR_BLUE, string);
		return 1;
	}
	if(strcmp(cmd,"/tocarmusica",true)==0)
	{
		ComputerMusicEnable[playerid] = true;
		SendClientMessage(playerid, COLOR_BLUE, "Música ligada... Use /pararmusica para desligar");
		SendClientMessage(playerid, COLOR_BLUE, "Pressione Shift / Espaço para trocar a música...");
		return 1;
	}
	if(strcmp(cmd,"/pararmusica",true)==0)
	{
	    PlayerPlaySound(playerid, 1186, 0.0,0.0,0.0);
		ComputerMusicEnable[playerid] = false;
		SendClientMessage(playerid, COLOR_BLUE, "Música desligada...");
		return 1;
	}
	if(strcmp(cmd,"/inflacao",true)==0)
	{
		if(InComputer[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você deve estar conectado à um computador para ver essas informações!");
		new str[128];
		SendClientMessage(playerid, COLOR_JUIZ, "|---------------------------------| PREÇOS ATUAIS |---------------------------------|");
		format(str,sizeof str,"Televisão: $%d,00 dólares - Rádio: $%d,00 dólares - Geladeira: $%d,00 dólares - Fogão: $%d,00 dólares",ValorTV,ValorRadio,ValorGeladeira,ValorFogao);
		SendClientMessage(playerid, COLOR_WHITE, str);
		format(str,sizeof str,"Cofre: $%d,00 dólares - Guarda-Roupas: $%d,00 dólares",ValorCofre,ValorGuardaRoupas);
		SendClientMessage(playerid, COLOR_WHITE, str);
		format(str,sizeof str,"Computador: $%d,00 dólares - Celular: $%d,00 dólares - Gasolina: $%d,00 dólares - Camarao: $%d,00 dólares",ValorComputador,ValorCelular,ValorGasolina,ValorCamarao);
		SendClientMessage(playerid, COLOR_WHITE, str);
		format(str,sizeof str,"Frango: $%d,00 dólares - Peixe: $%d,00 dólares - Pizza: $%d,00 dólares - Salada: $%d,00 dólares",ValorFrango,ValorPeixe,ValorPizza,ValorSalada);
		SendClientMessage(playerid, COLOR_WHITE, str);
		format(str,sizeof str,"Refrigerante: $%d,00 dólares - Suco: $%d,00 dólares - Carne: $%d,00 dólares - Strogonoff: $%d,00 dólares",ValorRefrigerante,ValorSuco,ValorCarne,ValorStrogonoff);
		SendClientMessage(playerid, COLOR_WHITE, str);
		format(str,sizeof str,"Linguiça: $%d,00 dólares",ValorLinguica);
		SendClientMessage(playerid, COLOR_WHITE, str);
		return 1;
	}
	if(strcmp(cmd, "/entrarcasa", true) == 0) {
        new pickupid = GetPickupHouse[playerid];
		if(pickupid == -1) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na entrada de uma casa!");
	    if(!compare(pckStats[pickupid][PickupDono],"NONE") && strlen(pckStats[pickupid][PickupDono]) > 0){
			new ID = IDName(pckStats[pickupid][PickupDono]);
			if(ID == INVALID_PLAYER_ID)
			{
			    if(!MoradorConvidado(playerid,pickupid) && (pStats[playerid][LocouCasa] == 0 || !compare(pStats[playerid][DonoCasaAlugada],pckStats[pickupid][PickupDono])))
			    {
			        SendClientMessage(playerid, COLOR_GRAY, "Você não pode entrar aqui pois não foi convidado e não é o proprietario dessa casa!");
        	    	SendClientMessage(playerid, COLOR_WHITE, "Para tocar a campainha digite /tocarcampainha");
					return 1;
			    }
			}
			else
			{
				if(ID != playerid && !IsConvidado(playerid, ID) && !MoradorConvidado(playerid,pickupid) && (pStats[playerid][LocouCasa] == 0 || !compare(pStats[playerid][DonoCasaAlugada],pckStats[pickupid][PickupDono])))
				{
					SendClientMessage(playerid, COLOR_GRAY, "Você não pode entrar aqui pois não foi convidado e não é o proprietario dessa casa!");
        	    	SendClientMessage(playerid, COLOR_WHITE, "Para tocar a campainha digite /tocarcampainha");
					return 1;
				}
			}
			NaCasa[playerid] = 1;
			GetPlayerPos(playerid,EntradaCasa[playerid][0],EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
			PickupEntradaCasa[playerid] = pickupid;
			SetPlayerVirtualWorld(playerid,pickupid);
			RadioJogadorLigado(playerid);
			SendClientMessage(playerid, COLOR_WHITE, "Para sair da casa digite /saircasa");
			SendClientMessage(playerid, COLOR_WHITE, "Para olhar pela janela digite /olharpelajanela");
			new interiorid = GetHouseInt(pickupid);
			SetPlayerInterior(playerid, Interiores[interiorid][hInt]);
			SetPlayerPos(playerid, Interiores[interiorid][hX], Interiores[interiorid][hY], Interiores[interiorid][hZ]);
			return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Esteja em frente a uma casa para usar esse comando.");
			return 1;
		}
	}
	if(strcmp(cmd, "/saircasa", true) == 0) {
		if(NaCasa[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
		    return 1;
		}
		if(EmLigacao[playerid] == 1 && extensao[playerid] == EXTENSION_TELEFONE){
		    SendClientMessage(playerid, COLOR_GRAY, "Você está no telefone, não pode sair da casa!");
		    return 1;
		}
		else{
		    DesligarJogadorRadio(playerid);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerInterior(playerid,0);
		    SetPlayerPos(playerid,EntradaCasa[playerid][0],EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
			NaCasa[playerid] = 0;
			PickupEntradaCasa[playerid] = 0;
			CorrectPassword[playerid] = 0;
			return 1;
		}
	}

	if(strcmp(cmd, "/convidar", true) == 0) {
	    new tmp[128];
	    new plid;
	    tmp = strtok(cmdtext,idx);
	    plid = strval(tmp);
	    if(!strlen(tmp)){
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /convidar [id]");
	        return 1;
		}
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		    return 1;
		}
		if(IsConvidado(plid,playerid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Ele já é seu convidado!");
		    return 1;
		}
		else{
		    new string[128];
		    format(string,sizeof(string),"%s lhe convidou para entrar na casa dele!",PlayerName(playerid));
		    SendClientMessage(plid, COLOR_GREEN, string);
		    SendClientMessage(plid, COLOR_WHITE, "Para aceitar o convite digite /aceitar ou /recusar");
		    SendClientMessage(playerid, COLOR_GREEN, "Espere o jogador aceitar o convite!");
			ParaAceitar[plid] = ACEITAR_CONVITE;
			TimerCancel[plid] = SetTimerEx("Cancelar",60000,0,"d",plid);
			Convidando[plid] = playerid;
			return 1;
		}
	}

	if(strcmp(cmd, "/expulsar", true) == 0) {
	    new tmp[128];
	    new plid;
	    tmp = strtok(cmdtext,idx);
	    plid = strval(tmp);
	    if(!strlen(tmp)){
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /expulsar [id]");
	        return 1;
		}
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		    return 1;
		}
		if(!IsConvidado(plid,playerid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Ele não é seu convidado!");
		    return 1;
		}
		else{
		    if(NaCasa[plid] == 1){
				if(strcmp(pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid),true) == 0 && strlen(PlayerName(playerid)) == strlen(pckStats[PickupEntradaCasa[playerid]][PickupDono])){
				    DesligarJogadorRadio(plid);
		    		SetPlayerVirtualWorld(plid,0);
		    		SetPlayerInterior(plid,0);
		    		SetPlayerPos(plid,EntradaCasa[plid][0]+0.7,EntradaCasa[plid][1],EntradaCasa[plid][2]);
					NaCasa[plid] = 0;
				}
			}
		    new string[128];
		    format(string,sizeof(string),"%s lhe expulsou da casa dele!",PlayerName(playerid));
		    SendClientMessage(plid, COLOR_GREEN, string);
		    SendClientMessage(playerid, COLOR_GREEN, "Jogador expulso!");
			for(new i = 0; i < QtConvidados[playerid]; i++){
			    if(Convidado[playerid][i] == plid) Convidado[playerid][i] = INVALID_PLAYER_ID;
			}
			return 1;
		}
	}
	if(strcmp(cmd,"/cofreinfo",true) == 0) {
	    new string[128];
		new tmp[128];
		new casaid;
	    tmp = strtok(cmdtext,idx);
	    casaid = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /cofreinfo [casaid]");
		if(casaid < 1 && casaid > 10 && casaid == 0)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /cofreinfo [casaid]");
		    SendClientMessage(playerid, COLOR_GRAY, "Entre 1 e 10");
		    return 1;
		}
        if(PlayerArea[playerid] != AreaCofre) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na loja de registros de cofres!");
		new h = GetHouses(playerid, casaid);
		if(h == -1){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não possui casa com esse ID.");
		    return 1;
		}
		SendClientMessage(playerid, COLOR_LIGHT_RED, "Informações sobre seu cofre:");
		format(string,sizeof(string),"Dinheiro guardado: $%d",pckStats[h][DinheiroCofre]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string,sizeof(string),"Slot 0: Arma %d com %d munições | Slot 1: Arma %d com %d munições",pckStats[h][ArmasCofre][0],pckStats[h][ArmasAmmoCofre][0],pckStats[h][ArmasCofre][1],pckStats[h][ArmasAmmoCofre][1]);
 		SendClientMessage(playerid, COLOR_WHITE, string);
 		format(string,sizeof(string),"Slot 2: Arma %d com %d munições | Slot 3: Arma %d com %d munições",pckStats[h][ArmasCofre][2],pckStats[h][ArmasAmmoCofre][2],pckStats[h][ArmasCofre][3],pckStats[h][ArmasAmmoCofre][3]);
 		SendClientMessage(playerid, COLOR_WHITE, string);
 		format(string,sizeof(string),"Slot 4: Arma %d com %d munições | Slot 5: Arma %d com %d munições",pckStats[h][ArmasCofre][4],pckStats[h][ArmasAmmoCofre][4],pckStats[h][ArmasCofre][5],pckStats[h][ArmasAmmoCofre][5]);
 		SendClientMessage(playerid, COLOR_WHITE, string);
 		format(string,sizeof(string),"Slot 6: Arma %d com %d munições | Slot 7: Arma %d com %d munições",pckStats[h][ArmasCofre][6],pckStats[h][ArmasAmmoCofre][6],pckStats[h][ArmasCofre][7],pckStats[h][ArmasAmmoCofre][7]);
 		SendClientMessage(playerid, COLOR_WHITE, string);
 		format(string,sizeof(string),"Slot 8: Arma %d com %d munições | Slot 9: Arma %d com %d munições",pckStats[h][ArmasCofre][8],pckStats[h][ArmasAmmoCofre][8],pckStats[h][ArmasCofre][9],pckStats[h][ArmasAmmoCofre][9]);
 		SendClientMessage(playerid, COLOR_WHITE, string);
 		format(string,sizeof(string),"Slot 10: Arma %d com %d munições | Slot 11: Arma %d com %d munições",pckStats[h][ArmasCofre][10],pckStats[h][ArmasAmmoCofre][10],pckStats[h][ArmasCofre][11],pckStats[h][ArmasAmmoCofre][11]);
 		SendClientMessage(playerid, COLOR_WHITE, string);
 		format(string,sizeof(string),"Slot 12: Arma %d com %d munições",pckStats[h][ArmasCofre][12],pckStats[h][ArmasAmmoCofre][12]);
 		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string,sizeof(string),"Maconha: %d | Cocaína: %d | Heroína: %d",pckStats[h][MaconhaCofre],pckStats[h][CocainaCofre],pckStats[h][HeroinaCofre]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string,sizeof(string),"Essas são suas informações de cofre Senhor %s.",PlayerName(playerid));
		SendClientMessage(playerid, COLOR_LIGHT_RED, string);
		return 1;
	}
	if(strcmp(cmd,"/olharpelajanela",true) == 0) {
		if(NaCasa[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Esteja em uma casa para usar esse comando!");
		if(OlhandoJanela[playerid] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você já está olhando pela janela.");
		new pck = PickupEntradaCasa[playerid], Float:x, Float:y;
		GetPlayerPos(playerid, PosJanela[playerid][0], PosJanela[playerid][1], PosJanela[playerid][2]);
		IntJanela[playerid] = GetPlayerInterior(playerid);
		WorldJanela[playerid] = GetPlayerVirtualWorld(playerid);
		OlhandoJanela[playerid] = 1;
		SetPlayerControl(playerid, false);
		GetXYInFrontOfPlayer(playerid, x, y, 5.0);
		TimerJanela[playerid] = SetTimerEx("OlhandoPelaJanela", 100, false, "df", playerid, pckStats[pck][pZ]);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerCameraPos(playerid, pckStats[pck][pX], pckStats[pck][pY], pckStats[pck][pZ]);
		SetPlayerCameraLookAt(playerid, x, y, pckStats[pck][pZ]);
		SetPlayerPos(playerid, pckStats[pck][pX], pckStats[pck][pY], pckStats[pck][pZ] - 5.0);
		SendClientMessage(playerid, COLOR_JUIZ, "Olhando pela janela...");
		SendClientMessage(playerid, COLOR_JUIZ, "Comandos: /parardeolharpelajanela /inverterrotacao /pararrotacao /continuarrotacao");
		return 1;
	}
	if(strcmp(cmd,"/inverterrotacao",true) == 0) {
        if(OlhandoJanela[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está olhando pela janela.");
        JanelaSentidoHorario[playerid] = !JanelaSentidoHorario[playerid];
        if(JanelaSentidoHorario[playerid])
        {
            SendClientMessage(playerid, COLOR_JUIZ, "Janela invertida para o sentido horário...");
            return 1;
        }
		SendClientMessage(playerid, COLOR_JUIZ, "Janela invertida para o sentido anti-horário...");
  		return 1;
	}
	if(strcmp(cmd,"/pararrotacao",true) == 0) {
	    if(OlhandoJanela[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está olhando pela janela.");
	    KillTimer(TimerJanela[playerid]);
	    SendClientMessage(playerid, COLOR_JUIZ, "Rotação parada.");
	    return 1;
	}
	if(strcmp(cmd,"/continuarrotacao",true) == 0) {
	    if(OlhandoJanela[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está olhando pela janela.");
	    KillTimer(TimerJanela[playerid]);
	    new Float:off, Float:z;
	    GetPlayerPos(playerid, off, off, z);
	    TimerJanela[playerid] = SetTimerEx("OlhandoPelaJanela", 100, false, "df", playerid, z + 5.0);
	    SendClientMessage(playerid, COLOR_JUIZ, "Rotação continuando...");
	    return 1;
	}
	if(strcmp(cmd,"/parardeolharpelajanela",true) == 0) {
	    if(OlhandoJanela[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está olhando pela janela.");
	    KillTimer(TimerJanela[playerid]);
	    OlhandoJanela[playerid] = 0;
	    SetPlayerControl(playerid, true);
	    SetPlayerPos(playerid, PosJanela[playerid][0], PosJanela[playerid][1], PosJanela[playerid][2]);
	    SetPlayerInterior(playerid, IntJanela[playerid]);
	    SetPlayerVirtualWorld(playerid, WorldJanela[playerid]);
	    SetCameraBehindPlayer(playerid);
	    SendClientMessage(playerid, COLOR_JUIZ, "Pronto...");
		return 1;
	}
	if(strcmp(cmd,"/minhasenhacofre",true) == 0) {
	    new string[128];
		new tmp[128];
		new casaid;
	    tmp = strtok(cmdtext,idx);
	    casaid = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /minhasenhacofre [casaid]");
		if(casaid < 1 && casaid > 10 && casaid == 0)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /minhasenhacofre [casaid]");
		    SendClientMessage(playerid, COLOR_GRAY, "Entre 1 e 10");
		    return 1;
		}
        if(PlayerArea[playerid] != AreaCofre) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na loja de registros de cofres!");
		if(GetHouses(playerid, casaid) == -1){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem casa nesse ID.");
		    return 1;
		}
		new casa = GetHouses(playerid, casaid);
		format(string,sizeof(string),"[COFRE] A senha do cofre da sua casa de ID: %d, é: %s", casaid, pckStats[casa][SenhaCofre]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
 	}
	if(strcmp(cmd,"/registrarcofre",true) == 0) {
	    new string[128];
		new tmp[128];
		new casaid;
	    tmp = strtok(cmdtext,idx);
	    casaid = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /registrarcofre [casaid]");
		if(casaid < 1 && casaid > 10 && casaid == 0)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /registrarcofre [casaid]");
		    SendClientMessage(playerid, COLOR_GRAY, "Entre 1 e 10");
		    return 1;
		}
	    tmp = strtok(cmdtext,idx);
	    if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /registrarcofre [casaid] [senha]");
        if(PlayerArea[playerid] != AreaCofre) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na loja de registros de cofres!");
		new casa = GetHouses(playerid, casaid);
		if(casa == -1){
		    SendClientMessage(playerid, COLOR_GRAY, "	Você não possui casa nenhuma casa esse ID.");
		    return 1;
		}
		set(pckStats[casa][SenhaCofre],tmp);
		format(string,sizeof(string),"OK... Você trocou a senha do seu cofre para %s",tmp);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		return 1;
	}

	if(strcmp(cmd,"/cofresenha",true) == 0) {
	    new tmp[128];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /cofresenha [casaid] [senha]");
		if(NaCasa[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Esteja em uma casa para usar esse comando!");
		if(CorrectPassword[playerid] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você já acessou a senha desse cofre.");
		if(strcmp(tmp,pckStats[PickupEntradaCasa[playerid]][SenhaCofre],true) == 0) {
		    CorrectPassword[playerid] = 1;
		    SendClientMessage(playerid, COLOR_GREEN, "Senha do cofre aceita, digite /cofre para ver as opções com ele!");
			return 1;
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "SENHA RECUSADA, essa não é a senha certa, portanto não podemos aceitar...");
			return 1;
		}
	}
	if(strcmp(cmd,"/cofre",true) == 0) {
	    if(CorrectPassword[playerid] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "USE: /cofresenha [senha] para acessar a senha e ter acesso ao cofre...");
			return 1;
		}
		if(NaCasa[playerid] == 1){
			ShowMenuForPlayer(cofremenu,playerid);
			SetPlayerControl(playerid,0);
			return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
		    return 1;
		}
	}

	if(strcmp(cmd,"/guardarroupa",true) == 0) {
		if(NaCasa[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma casa!");
		    return 1;
		}
		if(pckStats[PickupEntradaCasa[playerid]][GuardaRoupas] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem Guarda-Roupas.");
		    return 1;
		}
		if(pckStats[PickupEntradaCasa[playerid]][SkinRoupa][0] != 0 && pckStats[PickupEntradaCasa[playerid]][SkinRoupa][1] != 0 && pckStats[PickupEntradaCasa[playerid]][SkinRoupa][2] != 0 && pckStats[PickupEntradaCasa[playerid]][SkinRoupa][3] != 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Seu guarda-roupas está lotado terá que tirar uma peça para por essa.");
		    return 1;
		}
		for(new s = 0; s < 3; s++){
	    	if(pckStats[PickupEntradaCasa[playerid]][SkinRoupa][s] == 0) {
		    	pckStats[PickupEntradaCasa[playerid]][SkinRoupa][s] = GetPlayerSkin(playerid);
		 		if(Profissoes[pStats[playerid][Prof]][ProfSkin] == GetPlayerSkin(playerid)){
				    SetPlayerSkin(playerid, 252);
				    pStats[playerid][Skin] = 252;
				    SendClientMessage(playerid, COLOR_JUIZ, "Você guardou a sua roupa de profissão.");
				    return 1;
				}
			    SetPlayerSkin(playerid, 252);
			    pStats[playerid][Skin] = 252;
			    SendClientMessage(playerid, COLOR_JUIZ, "Você guardou a sua roupa.");
			    return 1;
			}
		}
	}

	if(strcmp(cmd,"/experimentarroupa",true) == 0) {
	    new roupaid;
	    new tmp[128];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_GRAY, "USO: /experimentarroupa [roupaid]");
			return 1;
		}
        roupaid = strval(tmp);
		if(roupaid < 1 && roupaid > 4 && roupaid == 0)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /vestirrroupa [roupaid]");
		    SendClientMessage(playerid, COLOR_GRAY, "Entre 1 e 4");
		    return 1;
		}
 		if(NaCasa[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma casa!");
		    return 1;
		}
		if(pckStats[PickupEntradaCasa[playerid]][GuardaRoupas] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem Guarda-Roupas.");
		    return 1;
		}
		if(pckStats[PickupEntradaCasa[playerid]][SkinRoupa][0] == 0 && pckStats[PickupEntradaCasa[playerid]][SkinRoupa][1] == 0 && pckStats[PickupEntradaCasa[playerid]][SkinRoupa][2] == 0 && pckStats[PickupEntradaCasa[playerid]][SkinRoupa][3] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Seu guarda-roupas está vazio como poderá experimentar uma roupa.");
		    return 1;
		}
	   	if(pckStats[PickupEntradaCasa[playerid]][SkinRoupa][roupaid] == GetPlayerSkin(playerid)) {
		    SendClientMessage(playerid, COLOR_GRAY, "Você já está vestido com uma roupa igual como quer experimentar?");
		    return 1;
		}
		if(pckStats[PickupEntradaCasa[playerid]][SkinRoupa][roupaid-1] != 0){
			SetPlayerSkin(playerid, pckStats[PickupEntradaCasa[playerid]][SkinRoupa][roupaid-1]);
			KillTimer(ExperimentandoSkin[playerid]);
   			ExperimentandoSkin[playerid] = SetTimerEx("TirarSkinLoja",10000,0,"d",playerid);
		    SendClientMessage(playerid, COLOR_JUIZ, "Você está experimentando uma roupa, gostou?");
		    SetPlayerControl(playerid, true);
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem roupa nessa gaveta do Guarda-Roupa.");
		}
		return 1;
	}

	if(strcmp(cmd,"/vestirroupa",true) == 0) {
	    new tmp[128];
	    new roupaid;
	    tmp = strtok(cmdtext,idx);
	    roupaid = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /vestirrroupa [roupaid]");
		if(roupaid < 1 && roupaid > 4 && roupaid == 0)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /vestirrroupa [roupaid]");
		    SendClientMessage(playerid, COLOR_GRAY, "Entre 1 e 4");
		    return 1;
		}
		if(NaCasa[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma casa!");
		    return 1;
		}
		if(pckStats[PickupEntradaCasa[playerid]][GuardaRoupas] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem Guarda-Roupas.");
		    return 1;
		}
		if(pckStats[PickupEntradaCasa[playerid]][SkinRoupa][0] == 0 && pckStats[PickupEntradaCasa[playerid]][SkinRoupa][1] == 0 && pckStats[PickupEntradaCasa[playerid]][SkinRoupa][2] == 0 && pckStats[PickupEntradaCasa[playerid]][SkinRoupa][3] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Seu guarda-roupas está vazio como poderá tirar uma roupa.");
		    return 1;
		}
		if(pckStats[PickupEntradaCasa[playerid]][SkinRoupa][roupaid-1] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem esssa roupa, como poderá vestir?");
		    return 1;
		}
	    SetPlayerSkin(playerid, pckStats[PickupEntradaCasa[playerid]][SkinRoupa][roupaid-1]);
	    pStats[playerid][Skin] = pckStats[PickupEntradaCasa[playerid]][SkinRoupa][roupaid-1];
	    pckStats[PickupEntradaCasa[playerid]][SkinRoupa][roupaid-1] = 0;
	    SendClientMessage(playerid, COLOR_JUIZ, "Roupa vestidade, que tal essa roupa?");
	    return 1;
	}

	
	if(strcmp(cmd,"/radio",true)==0){
	    if(IsPlayerConnected(playerid)){
	        if(NaCasa[playerid] == 0){
				SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
				return 1;
			}
			if(pckStats[PickupEntradaCasa[playerid]][Radio] == 0){
				SendClientMessage(playerid, COLOR_GRAY, "Essa casa não possui rádio!");
				return 1;
			}
			if(pckStats[PickupEntradaCasa[playerid]][SemLuz] == 1){
				SendClientMessage(playerid, COLOR_GRAY, "Essa casa está sem luz...");
				return 1;
			}
	        if(sombalada[PickupEntradaCasa[playerid]] == 0){
				SendClientMessage(playerid, COLOR_COP_SWAT, "Sintonizando...");
				RadioLigado(playerid);
				SendClientMessage(playerid, COLOR_WHITE, "Pressione 'Shift / Barra de espaço' , para mudar a frequencia!");
				SendClientMessage(playerid, COLOR_WHITE, "Para dançar digite /dancar [1-3]");
				SendClientMessage(playerid, COLOR_WHITE, "Para desligar o radio digite /radio");
				return 1;
			} else {
				SendClientMessage(playerid, COLOR_COP_SWAT, "Desligando rádio...");
				DesligarRadio(playerid);
			 	return 1;
			}
		}
	}
	if(strcmp(cmd,"/verprevisao",true) == 0) {
		if(TVligada[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está assistindo Televisão!");
		new str[128];
	    format(str,sizeof(str),"New Paper's Life: informando a previsão do tempo: %s",WeatherName[weatherprevisao]);
		SendClientMessage(playerid, COLOR_GREEN, str);
		return 1;
	}
	if(strcmp(cmd,"/ligartv",true) == 0) {
	    new tmp[128];
	    new canal;
	    tmp = strtok(cmdtext,idx);
	    canal = strval(tmp);
	    if(!strlen(tmp)){
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /ligartv [canal]");
	        return 1;
		}
		if(NaCasa[playerid] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
			return 1;
		}
		if(pckStats[PickupEntradaCasa[playerid]][TV] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Essa casa não possui TV!");
			return 1;
		}
		if(pckStats[PickupEntradaCasa[playerid]][SemLuz] == 1){
			SendClientMessage(playerid, COLOR_GRAY, "Essa casa está sem luz...");
			return 1;
		}
		if(!IsPlayerConnected(canal)){
		    SendClientMessage(playerid, COLOR_GRAY, "Canal inválido no momento!");
		    return 1;
		}
		if(TVligada[playerid] == 1){
			SendClientMessage(playerid, COLOR_GRAY, "Você já está assistindo TV...");
			return 1;
		}
		if(canal == playerid){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não pode se assistir!");
		    return 1;
		}
		else{
		    GetPlayerPos(playerid,AntPos[playerid][0],AntPos[playerid][1],AntPos[playerid][2]);
			AntInt[playerid] = GetPlayerInterior(playerid);
		    SendClientMessage(playerid, COLOR_WHITE, "Digite /verprevisao para ver a previsão do tempo pela TV.");
			SendClientMessage(playerid, COLOR_WHITE, "Para mudar o canal pressione: Num Lock 4 / Num Lock 6");
			SendClientMessage(playerid, COLOR_WHITE, "Quando terminar de assistir, digite /desligartv");
			SetPlayerInterior(playerid,GetPlayerInterior(canal));
			TogglePlayerSpectating(playerid,1);
			if(IsPlayerInAnyVehicle(canal)) PlayerSpectateVehicle(playerid,GetPlayerVehicleID(canal));
			else PlayerSpectatePlayer(playerid,canal);
	        PlayerSpec[playerid] = canal;
			Spectator[canal] = playerid;
			TVligada[playerid] = 1;
			new string[128];
			format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Canal: ~w~%d", canal);
			GameTextForPlayer(playerid,string,5000,3);
			return 1;
		}
	}
	if(strcmp(cmd,"/desligartv",true) == 0) {
	    if(TVligada[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está assistindo TV...");
	    DesligarTV(playerid);
	    return 1;
	}
    if(strcmp(cmd, "/outros", true) == 0) {
        if(PlayerArea[playerid] != AreaCreditos) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na 24/7!");
        ShowMenuForPlayer(Outros,playerid);
		SetPlayerControl(playerid,0);
		return 1;
	}
    if(strcmp(cmd, "/comer", true) == 0) {
        if(pStats[playerid][Sanduiche] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhum sanduíche consigo!");
        pStats[playerid][Sanduiche] = 0;
        AddPlayerHealth(playerid, 10);
      	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
      	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
        SendClientMessage(playerid, COLOR_PARAMEDICO, "Hun... 10 pontinhos de HP. Chame um Vendedor de Pizza, para comer mais.");
        return 1;
	}
	if(strcmp(cmd, "/eletrodomesticos", true) == 0) {
		if(PlayerArea[playerid] != AreaCreditos) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na 24/7!");
		DestroyMenuEx(Eletrodomesticos);
		Eletrodomesticos = CreateMenu("Eletrodomesticos",2,30.0,140.0,220.0,0.0);
		if(IsValidMenu(Eletrodomesticos)){
		    new string[128];
		    SetMenuColumnHeader(Eletrodomesticos,0,"Item");
		    SetMenuColumnHeader(Eletrodomesticos,1,"Preo");
	  	    AddMenuItem(Eletrodomesticos,0,"Televisao");
	  	    format(string,sizeof(string),"$%d",ValorTV);
	  	    AddMenuItem(Eletrodomesticos,1,string);
	  	    AddMenuItem(Eletrodomesticos,0,"Radio");
	  	    format(string,sizeof(string),"$%d",ValorRadio);
	  	    AddMenuItem(Eletrodomesticos,1,string);
	  	    AddMenuItem(Eletrodomesticos,0,"Geladeira");
	  	    format(string,sizeof(string),"$%d",ValorGeladeira);
	  	    AddMenuItem(Eletrodomesticos,1,string);
	  	    AddMenuItem(Eletrodomesticos,0,"Fogao");
	     	format(string,sizeof(string),"$%d",ValorFogao);
	        AddMenuItem(Eletrodomesticos,1,string);
	     	AddMenuItem(Eletrodomesticos,0,"Telefone");
	     	format(string,sizeof(string),"$%d",ValorTelefone);
	     	AddMenuItem(Eletrodomesticos,1,string);
	     	AddMenuItem(Eletrodomesticos,0,"Computador");
	     	format(string,sizeof(string),"$%d",ValorComputador);
	  	    AddMenuItem(Eletrodomesticos,1,string);
	     	AddMenuItem(Eletrodomesticos,0,"Guarda-Roupas");
	     	format(string,sizeof(string),"$%d",ValorGuardaRoupas);
	  	    AddMenuItem(Eletrodomesticos,1,string);
	     	AddMenuItem(Eletrodomesticos,0,"Cofre");
	     	format(string,sizeof(string),"$%d",ValorCofre);
	  	    AddMenuItem(Eletrodomesticos,1,string);
	  	    AddMenuItem(Eletrodomesticos,0,"Alarme simples");
	  	    AddMenuItem(Eletrodomesticos,1,"$1300");
	  	    AddMenuItem(Eletrodomesticos,0,"Alarme avanado");
	  	    AddMenuItem(Eletrodomesticos,1,"$2200");
		}
		ShowMenuForPlayer(Eletrodomesticos,playerid);
		SetPlayerControl(playerid,0);
		return 1;
	}

	if(strcmp(cmd, "/alimentacao", true) == 0) {
		if(PlayerArea[playerid] != AreaCreditos) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na 24/7!");
        DestroyMenuEx(ComidaLoja);
		ComidaLoja = CreateMenu("Comidas & Bebidas",2,30.0,140.0,220.0,0.0);
		if(IsValidMenu(ComidaLoja)){
		    new string[128];
		    SetMenuColumnHeader(ComidaLoja,0,"Item");
		    SetMenuColumnHeader(ComidaLoja,1,"Preo");
	  	    AddMenuItem(ComidaLoja,0,"Frango");
			format(string,sizeof(string),"$%d",ValorFrango);
	  	    AddMenuItem(ComidaLoja,1,string);
	  	    AddMenuItem(ComidaLoja,0,"Peixe");
	  	   	format(string,sizeof(string),"$%d",ValorPeixe);
	  	    AddMenuItem(ComidaLoja,1,string);
	  	    AddMenuItem(ComidaLoja,0,"Pizza");
	  	 	format(string,sizeof(string),"$%d",ValorPizza);
	  	    AddMenuItem(ComidaLoja,1,string);
	  	    AddMenuItem(ComidaLoja,0,"Salada");
	  		format(string,sizeof(string),"$%d",ValorSalada);
	  	    AddMenuItem(ComidaLoja,1,string);
	  	    AddMenuItem(ComidaLoja,0,"Refrigerante");
	  	    format(string,sizeof(string),"$%d",ValorRefrigerante);
	  	    AddMenuItem(ComidaLoja,1,string);
	   	    AddMenuItem(ComidaLoja,0,"Suco");
	   	    format(string,sizeof(string),"$%d",ValorSuco);
	  	    AddMenuItem(ComidaLoja,1,string);
	  	    AddMenuItem(ComidaLoja,0,"Carne");
	  	    format(string,sizeof(string),"$%d",ValorCarne);
	  	    AddMenuItem(ComidaLoja,1,string);
	  	    AddMenuItem(ComidaLoja,0,"Strogonoff");
	  	    format(string,sizeof(string),"$%d",ValorStrogonoff);
	  	    AddMenuItem(ComidaLoja,1,string);
	  	    AddMenuItem(ComidaLoja,0,"Camarao");
	  	    format(string,sizeof(string),"$%d",ValorCamarao);
	  	    AddMenuItem(ComidaLoja,1,string);
	  	    AddMenuItem(ComidaLoja,0,"Linguia");
	  	    format(string,sizeof(string),"$%d",ValorLinguica);
	  	    AddMenuItem(ComidaLoja,1,string);
		}
		ShowMenuForPlayer(ComidaLoja,playerid);
		SetPlayerControl(playerid,0);
		return 1;
	}
	if(strcmp(cmd, "/colocartv", true) == 0) {
	    ColocarTV(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/colocarradio", true) == 0) {
	    ColocarRadio(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/colocargeladeira", true) == 0) {
	    ColocarGeladeira(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/colocarfogao", true) == 0) {
	    ColocarFogao(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/colocartelefone", true) == 0) {
	    ColocarTelefone(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/colocarcomputador", true) == 0) {
	    ColocarComputador(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/colocarcofre", true) == 0) {
	    ColocarCofre(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/colocarguardaroupas", true) == 0) {
	    ColocarGuardaRoupas(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/instalaralarmebasico", true) == 0) {
	    InstalarAlarmeBasico(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/instalaralarmeavancado", true) == 0) {
	    InstalarAlarmeAvancado(playerid);
	    return 1;
	}
    if(strcmp(cmd, "/retirartv", true) == 0) {
	    RetirarTV(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/retirarradio", true) == 0) {
	    RetirarRadio(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/retirargeladeira", true) == 0) {
	    RetirarGeladeira(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/retirarfogao", true) == 0) {
	    RetirarFogao(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/retirartelefone", true) == 0) {
	    RetirarTelefone(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/retirarcomputador", true) == 0) {
	    RetirarComputador(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/retirarguardaroupas", true) == 0) {
	    RetirarGuardaRoupas(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/retirarcofre", true) == 0) {
	    RetirarCofre(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/servir", true) == 0) {
	    new tmp[128];
	    new string[128];
	    new id;
		tmp = strtok(cmdtext,idx);
		id = strval(tmp);
		if(!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /servir [id] [refeição]");
		    return 1;
		}
		if(GetDistanceBetweenPlayers(playerid,id) > 7){
		    SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto!");
		    return 1;
		}
		if(!IsPlayerConnected(id)){
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado!");
		    return 1;
		}
		tmp = strtok(cmdtext,idx);
		if(strcmp(tmp,"frango",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("frango")){
		    if(Frangos[playerid] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui frango!");
			Frangos[playerid]--;
			AddPlayerHealth(id, 10);
			ApplyAnimation(playerid,"FOOD","EAT_Chicken",4.1,0,1,1,0,1);
			SendClientMessage(playerid, COLOR_CORRETOR, "Frango servido!");
			pStats[id][Fome] -= 10;
			format(string,sizeof(string),"O Mestre Cuca %s lhe serviu um delicioso Frango Xadrez.",PlayerName(playerid));
			SendClientMessage(id, COLOR_CORRETOR, string);
			return 1;
		}
		else if(strcmp(tmp,"peixe",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("peixe")){
		    if(Peixes[playerid] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui peixe!");
			Peixes[playerid]--;
			AddPlayerHealth(id, 20);
			pStats[id][Fome] -= 20;
			ApplyAnimation(playerid,"FOOD","EAT_Chicken",4.1,0,1,1,0,1);
			SendClientMessage(playerid, COLOR_CORRETOR, "Peixe servido!");
			format(string,sizeof(string),"O Mestre cuca %s lhe serviu um - Peixe à Delícia. -",PlayerName(playerid));
			SendClientMessage(id, COLOR_CORRETOR, string);
			return 1;
		}
		else if(strcmp(tmp,"pizza",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("pizza")){
		    if(Pizzas[playerid] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui pizza!");
			Pizzas[playerid]--;
			AddPlayerHealth(id, 10);
			pStats[id][Fome] -= 15;
			ApplyAnimation(id, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			SendClientMessage(playerid, COLOR_CORRETOR, "Pizza servida!");
			format(string,sizeof(string),"O Mestre Cuca %s lhe serviu uma Pizza de Mussarela.",PlayerName(playerid));
			SendClientMessage(id, COLOR_CORRETOR, string);
			return 1;
		}
		else if(strcmp(tmp,"carne",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("carne")){
		    if(Carnes[playerid] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui carne!");
			Carnes[playerid]--;
			AddPlayerHealth(id, 20);
			pStats[id][Fome] -= 50;
			ApplyAnimation(id, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			SendClientMessage(playerid, COLOR_CORRETOR, "Carne servida!");
			format(string,sizeof(string),"O Mestre Cuca %s lhe serviu uma Carne ao Molho de Madeira.",PlayerName(playerid));
			SendClientMessage(id, COLOR_CORRETOR, string);
			return 1;
		}
		else if(strcmp(tmp,"strogonoff",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("strogonoff")){
		    if(Strogonoffes[playerid] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui strogonoff!");
			Strogonoffes[playerid]--;
			AddPlayerHealth(id, 20);
			pStats[id][Fome] -= 80;
			ApplyAnimation(id, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			SendClientMessage(playerid, COLOR_CORRETOR, "Strogonoff servido!");
			format(string,sizeof(string),"O Mestre Cuca %s lhe serviu um magnífico Strogonoff!",PlayerName(playerid));
			SendClientMessage(id, COLOR_CORRETOR, string);
			return 1;
		}
		else if(strcmp(tmp,"camarao",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("camarao")){
		    if(Camaroes[playerid] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui camarão!");
			Camaroes[playerid]--;
			AddPlayerHealth(id, 20);
			pStats[id][Fome] -= 100;
			ApplyAnimation(id, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			SendClientMessage(playerid, COLOR_CORRETOR, "Camarão servido!");
			format(string,sizeof(string),"O Mestre Cuca %s lhe serviu um prato com Camarões ao Alho e Óleo!",PlayerName(playerid));
			SendClientMessage(id, COLOR_CORRETOR, string);
			return 1;
		}
		else if(strcmp(tmp,"linguica",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("linguica")){
		    if(Linguicas[playerid] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui linguiça!");
			Linguicas[playerid]--;
			AddPlayerHealth(id, 10);
			pStats[id][Fome] -= 30;
			ApplyAnimation(id, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			SendClientMessage(playerid, COLOR_CORRETOR, "Linguiça servida!");
			format(string,sizeof(string),"O Mestre Cuca %s lhe serviu um prato com as -Linguiças Tá Dentro-",PlayerName(playerid));
			SendClientMessage(id, COLOR_CORRETOR, string);
			return 1;
		}
		else if(strcmp(tmp,"salada",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("salada")) {
		    if(pStats[playerid][Salada] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui salada!");
		    pStats[playerid][Salada] -= 1;
			AddPlayerHealth(id, 25);
			pStats[id][Fome] -= 50;
			ApplyAnimation(id, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			SendClientMessage(playerid, COLOR_CORRETOR, "Salada servida!");
			format(string,sizeof(string),"O Mestre Cuca %s lhe serviu um prato especial com: Cenoura, Alface, Brocolis -Light Life-",PlayerName(playerid));
			SendClientMessage(id, COLOR_CORRETOR, string);
			return 1;
		}
		else if(strcmp(tmp,"refrigerante",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("refrigerante")) {
		    if(pStats[playerid][Refrigerante] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui refrigerante!");
		    pStats[playerid][Refrigerante] -= 1;
			AddPlayerHealth(id, 5);
			pStats[id][Fome] -= 15;
			ApplyAnimation(id, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			SendClientMessage(playerid, COLOR_CORRETOR, "Refrigerante servido!");
			format(string,sizeof(string),"O jogador %s lhe serviu um refrigerante!",PlayerName(playerid));
			SendClientMessage(id, COLOR_CORRETOR, string);
			return 1;
		}
		else if(strcmp(tmp,"suco",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("suco")) {
		    if(pStats[playerid][Suco] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui suco!");
		    pStats[playerid][Suco] -= 1;
			AddPlayerHealth(id, 10);
			pStats[id][Fome] -= 20;
			ApplyAnimation(id, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			SendClientMessage(playerid, COLOR_CORRETOR, "Suco servido!");
			format(string,sizeof(string),"%s lhe serviu um Suco.",PlayerName(playerid));
			SendClientMessage(id, COLOR_CORRETOR, string);
			return 1;
		}
		else if(strcmp(tmp,"sorvete",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("sorvete")) {
		    new sabor[128];
		    sabor = strtok(cmdtext,idx);
			if(strcmp(sabor,"napolitano",true,strlen(sabor)) == 0 && strlen(sabor) == strlen("napolitano")) {
				if(pStats[playerid][SorveteNapolitano] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem sorvete napolitano!");
				pStats[playerid][SorveteNapolitano] -= 1;
    			AddPlayerHealth(id, 2);
    			pStats[id][Fome] -= 10;
				ApplyAnimation(id, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
				SendClientMessage(playerid, COLOR_CORRETOR, "Sorvete servido!");
				format(string,sizeof(string),"%s lhe serviu um Sorvete Napolitano!",PlayerName(playerid));
				SendClientMessage(id, COLOR_CORRETOR, string);
				return 1;
			}
			else if(strcmp(sabor,"chocolate",true,strlen(sabor)) == 0 && strlen(sabor) == strlen("chocolate")) {
				if(pStats[playerid][SorveteChocolate] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem sorvete de chocolate!");
				pStats[playerid][SorveteChocolate] -= 1;
    			AddPlayerHealth(id, 2);
    			pStats[id][Fome] -= 10;
				ApplyAnimation(id, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
				SendClientMessage(playerid, COLOR_CORRETOR, "Sorvete servido!");
				format(string,sizeof(string),"%s lhe serviu um Sorvete Chocolate!",PlayerName(playerid));
				SendClientMessage(id, COLOR_CORRETOR, string);
				return 1;
			}
			else if(strcmp(sabor,"flocos",true,strlen(sabor)) == 0 && strlen(sabor) == strlen("flocos")) {
				if(pStats[playerid][SorveteFlocos] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem sorvete de flocos!");
				pStats[playerid][SorveteFlocos] -= 1;
    			AddPlayerHealth(id, 2);
    			pStats[id][Fome] -= 10;
				ApplyAnimation(id, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
				SendClientMessage(playerid, COLOR_CORRETOR, "Sorvete servido!");
				format(string,sizeof(string),"%s lhe serviu um Sorvete de Flocos!",PlayerName(playerid));
				SendClientMessage(id, COLOR_CORRETOR, string);
				return 1;
			}
			return SendClientMessage(playerid, COLOR_GRAY, "USO: /servir [id] sorvete [sabor: napolitano, chocolate ou flocos]");
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /servir [id] [refeição: frango,peixe,pizza,salada,refrigerante,carne,strogonoff,camarao,linguica ou suco]");
		    return 1;
		}
	}

	if(strcmp(cmd, "/cozinhar", true) == 0) {
	    new tmp[128];
	    if(NaCasa[playerid] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
		    return 1;
		}
		if(AlimentoCozinhando[playerid] != 0) return SendClientMessage(playerid, COLOR_GRAY, "Você já está cozinhando!");
 		if(pckStats[PickupEntradaCasa[playerid]][Fogao] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Essa casa não possui Fogão!");
			return 1;
		}
		if(pckStats[PickupEntradaCasa[playerid]][SemLuz] == 1){
			SendClientMessage(playerid, COLOR_GRAY, "Essa casa está sem luz...");
			return 1;
		}
		tmp = strtok(cmdtext,idx);
		if(strcmp(tmp,"frango",true,strlen(tmp)) == 0 && (strlen(tmp) == strlen("Frango"))) {
		    if(pStats[playerid][Culinaria] < 10) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem pontos de culinária suficiente para cozinhar um frango! Pontos necessários = 10");
		    if(pStats[playerid][Frango] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Sem frango...");
			SendClientMessage(playerid, COLOR_WHITE, "Cozinhando frango... Aguarde isso deve demorar uns 30 minutos");
			AlimentoCozinhando[playerid] = 1;
			SetPlayerControl(playerid,0);
			TempoCozinhando[playerid] = SetTimerEx("Cozinhando",35000,0,"d",playerid);
			return 1;
		}
		else if(strcmp(tmp,"peixe",true,strlen(tmp)) == 0 && (strlen(tmp) == strlen("Peixe"))) {
		    if(pStats[playerid][Culinaria] < 30) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem pontos de culinária suficiente para cozinhar um peixe! Pontos necessários = 30");
		    if(pStats[playerid][Peixe] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Sem peixe...");
		    SendClientMessage(playerid, COLOR_WHITE, "Cozinhando peixe... Aguarde isso deve demorar uns 45 minutos");
            AlimentoCozinhando[playerid] = 2;
            SetPlayerControl(playerid,0);
			TempoCozinhando[playerid] = SetTimerEx("Cozinhando",50000,0,"d",playerid);
			return 1;
		}
		else if(strcmp(tmp,"pizza",true,strlen(tmp)) == 0 && (strlen(tmp) == strlen("Pizza"))) {
		    if(pStats[playerid][Pizza] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Sem pizza...");
		    SendClientMessage(playerid, COLOR_WHITE, "Fazendo pizza... Isso deve demorar uma hora no mínimo");
            AlimentoCozinhando[playerid] = 3;
            SetPlayerControl(playerid,0);
			TempoCozinhando[playerid] = SetTimerEx("Cozinhando",60000,0,"d",playerid);
			return 1;
		}
		else if(strcmp(tmp,"carne",true,strlen(tmp)) == 0 && (strlen(tmp) == strlen("carne"))) {
		    if(pStats[playerid][Carne] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Sem carne...");
		    SendClientMessage(playerid, COLOR_WHITE, "Cozinhando carne... Aguarde isso deve demorar uns 25 minutos");
            AlimentoCozinhando[playerid] = 4;
            SetPlayerControl(playerid,0);
			TempoCozinhando[playerid] = SetTimerEx("Cozinhando",25000,0,"d",playerid);
			return 1;
		}
		else if(strcmp(tmp,"strogonoff",true,strlen(tmp)) == 0 && (strlen(tmp) == strlen("strogonoff"))) {
		    if(pStats[playerid][Culinaria] < 50) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem pontos de culinária suficiente para fazer um strogonoff! Pontos necessários = 50");
		    if(pStats[playerid][Strogonoff] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Sem strogonoff...");
			SendClientMessage(playerid, COLOR_WHITE, "Fazendo strogonoff... Aguarde isso deve demorar uns 45 minutos");
            AlimentoCozinhando[playerid] = 5;
            SetPlayerControl(playerid,0);
			TempoCozinhando[playerid] = SetTimerEx("Cozinhando",45000,0,"d",playerid);
			return 1;
		}
		else if(strcmp(tmp,"camarao",true,strlen(tmp)) == 0 && (strlen(tmp) == strlen("camarao"))) {
		    if(pStats[playerid][Culinaria] < 60) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem pontos de culinária suficiente para fazer um camarão! Pontos necessários = 60");
		    if(pStats[playerid][Camarao] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Sem camarão...");
			SendClientMessage(playerid, COLOR_WHITE, "Cozinhando camarão... Aguarde isso deve demorar uns 50 minutos");
            AlimentoCozinhando[playerid] = 6;
            SetPlayerControl(playerid,0);
			TempoCozinhando[playerid] = SetTimerEx("Cozinhando",50000,0,"d",playerid);
			return 1;
		}
		else if(strcmp(tmp,"linguica",true,strlen(tmp)) == 0 && (strlen(tmp) == strlen("linguica"))) {
		    if(pStats[playerid][Linguica] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Sem linguiça...");
			SendClientMessage(playerid, COLOR_WHITE, "Cozinhando linguiça... Aguarde isso deve demorar uns 30 minutos");
            AlimentoCozinhando[playerid] = 7;
            SetPlayerControl(playerid,0);
			TempoCozinhando[playerid] = SetTimerEx("Cozinhando",30000,0,"d",playerid);
			return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /cozinhar [frango, peixe, pizza, carne, strogonoff, camarao ou linguica]");
		    return 1;
		}
	}

	if(strcmp(cmd, "/guardarcomida", true) == 0) {
	    new string[128];
	    new tmp[128];
	    new quant;
	    if(NaCasa[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
		    return 1;
		}
 		if(pckStats[PickupEntradaCasa[playerid]][Geladeira] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Essa casa não possui Geladeira!");
			return 1;
		}
	    tmp = strtok(cmdtext, idx);
	    if((strcmp("frango", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("frango"))){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "/guardarcomida frango [quantidade]");
				return 1;
			}
			quant = strval(tmp);
		    if(quant >= pStats[playerid][Frango]){
				SendClientMessage(playerid, COLOR_GRAY, "Você não tem essa quantidade de frango na sacola.");
				return 1;
			}
			pckStats[PickupEntradaCasa[playerid]][FrangoGeladeira] += quant;
			pStats[playerid][Frango] -= quant;
			format(string, sizeof(string), "Foram guardadas %d bandeja(s) de frango na geladeira.", quant);
			SendClientMessage(playerid, COLOR_GREEN, string);
		    return 1;
		}
		else if((strcmp("salada", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("salada"))){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "/guardarcomida salada [quantidade]");
				return 1;
			}
			quant = strval(tmp);
		    if(quant > pStats[playerid][Salada]){
				SendClientMessage(playerid, COLOR_GRAY, "Você não tem essa quantidade de salada na sacola.");
				return 1;
			}
			pckStats[PickupEntradaCasa[playerid]][SaladaGeladeira] += quant;
			pStats[playerid][Salada] -= quant;
			format(string, sizeof(string), "Foram guardadas %d bandeja(s) de saladas na geladeira.", quant);
			SendClientMessage(playerid, COLOR_GREEN, string);
		    return 1;
		}
		else if((strcmp("peixe", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("peixe"))){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "/guardarcomida peixe [quantidade]");
				return 1;
			}
			quant = strval(tmp);
		    if(quant > pStats[playerid][Peixe]){
				SendClientMessage(playerid, COLOR_GRAY, "Você não tem essa quantidade de peixe na sacola.");
				return 1;
			}
			pckStats[PickupEntradaCasa[playerid]][PeixeGeladeira] += quant;
			pStats[playerid][Peixe] -= quant;
			format(string, sizeof(string), "Foram guardadas %d bandeja(s) de peixes na geladeira.", quant);
			SendClientMessage(playerid, COLOR_GREEN, string);
		    return 1;
		}
		else if((strcmp("pizza", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("pizza"))){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "/guardarcomida pizza [quantidade]");
				return 1;
			}
			quant = strval(tmp);
		    if(quant > pStats[playerid][Pizza]){
				SendClientMessage(playerid, COLOR_GRAY, "Você não tem essa quantidade de pizzas na sacola.");
				return 1;
			}
			pckStats[PickupEntradaCasa[playerid]][PizzaGeladeira] += quant;
			pStats[playerid][Pizza] -= quant;
			format(string, sizeof(string), "Foram guardadas %d caixa(s) de pizzas na geladeira.", quant);
			SendClientMessage(playerid, COLOR_GREEN, string);
		    return 1;
		}
		else if((strcmp("refrigerante", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("refrigerante"))){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "/guardarcomida refrigerante [latas]");
				return 1;
			}
			quant = strval(tmp);
		    if(quant > pStats[playerid][Refrigerante]){
				SendClientMessage(playerid, COLOR_GRAY, "Você não tem essa quantidade de latas na sacola.");
				return 1;
			}
			pckStats[PickupEntradaCasa[playerid]][RefriGeladeira] += quant;
			pStats[playerid][Refrigerante] -= quant;
			format(string, sizeof(string), "Foram guardadas %d lata(s) de refrigerantes na geladeira.", quant);
			SendClientMessage(playerid, COLOR_GREEN, string);
		    return 1;
		}
		else if((strcmp("suco", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("suco"))){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "/guardarcomida suco [garrafas]");
				return 1;
			}
			quant = strval(tmp);
		    if(quant > pStats[playerid][Suco]){
				SendClientMessage(playerid, COLOR_GRAY, "Você não tem essa quantidade de garrafas na sacola.");
				return 1;
			}
			pckStats[PickupEntradaCasa[playerid]][SucoGeladeira] += quant;
			pStats[playerid][Suco] -= quant;
			format(string, sizeof(string), "Foram guardadas %d garrafa(s) de suco na geladeira.", quant);
			SendClientMessage(playerid, COLOR_GREEN, string);
			return 1;
		}
		else if((strcmp("carne", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("carne"))){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "/guardarcomida carne [quantidade]");
				return 1;
			}
			quant = strval(tmp);
		    if(quant > pStats[playerid][Carne]){
				SendClientMessage(playerid, COLOR_GRAY, "Você não tem essa quantidade de carne na sacola.");
				return 1;
			}
			pckStats[PickupEntradaCasa[playerid]][CarneGeladeira] += quant;
			pStats[playerid][Carne] -= quant;
			format(string, sizeof(string), "Foram guardadas %d carne(s) na geladeira.", quant);
			SendClientMessage(playerid, COLOR_GREEN, string);
			return 1;
		}
		else if((strcmp("strogonoff", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("strogonoff"))){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "/guardarcomida strogonoff [quantidade]");
				return 1;
			}
			quant = strval(tmp);
		    if(quant > pStats[playerid][Strogonoff]){
				SendClientMessage(playerid, COLOR_GRAY, "Você não tem essa quantidade de strogonoff na sacola.");
				return 1;
			}
			pckStats[PickupEntradaCasa[playerid]][StrogonoffGeladeira] += quant;
			pStats[playerid][Strogonoff] -= quant;
			format(string, sizeof(string), "Foram guardados %d strogonoff(es) na geladeira.", quant);
			SendClientMessage(playerid, COLOR_GREEN, string);
			return 1;
		}
		else if((strcmp("camarao", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("camarao"))){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "/guardarcomida camarao [quantidade]");
				return 1;
			}
			quant = strval(tmp);
		    if(quant > pStats[playerid][Camarao]){
				SendClientMessage(playerid, COLOR_GRAY, "Você não tem essa quantidade de camarão na sacola.");
				return 1;
			}
			pckStats[PickupEntradaCasa[playerid]][CamaraoGeladeira] += quant;
			pStats[playerid][Camarao] -= quant;
			format(string, sizeof(string), "Foram guardados %d camarão(oes) na geladeira.", quant);
			SendClientMessage(playerid, COLOR_GREEN, string);
			return 1;
		}
		else if((strcmp("linguica", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("linguica"))){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "/guardarcomida linguiça [quantidade]");
				return 1;
			}
			quant = strval(tmp);
		    if(quant > pStats[playerid][Linguica]){
				SendClientMessage(playerid, COLOR_GRAY, "Você não tem essa quantidade de linguiça na sacola.");
				return 1;
			}
			pckStats[PickupEntradaCasa[playerid]][LinguicaGeladeira] += quant;
			pStats[playerid][Linguica] -= quant;
			format(string, sizeof(string), "Foram guardadas %d linguiça(s) na geladeira.", quant);
			SendClientMessage(playerid, COLOR_GREEN, string);
			return 1;
		}
		else {
	    	SendClientMessage(playerid, COLOR_GRAY,"USO: /guardarcomida [frango,peixe,salada,pizza,refrigerante,suco,carne,strogonoff,camarao,linguica] [quantidade]");
			return 1;
		}
	}
	if(strcmp(cmd, "/retirarcomida", true) == 0) {
	    new tmp[128];
	    if(NaCasa[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
		    return 1;
		}
 		if(pckStats[PickupEntradaCasa[playerid]][Geladeira] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Essa casa não possui Geladeira!");
			return 1;
		}
		tmp = strtok(cmdtext,idx);
		if(strcmp(tmp,"frango",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("frango")){
		    if(pckStats[PickupEntradaCasa[playerid]][FrangoGeladeira] <= 0){
		    	SendClientMessage(playerid, COLOR_GRAY, "Você não tem frango, verifique seus mantimentos em /geladeira.");
                return 1;
			}
			pStats[playerid][Frango]++;
			pckStats[PickupEntradaCasa[playerid]][FrangoGeladeira]--;
			SendClientMessage(playerid, COLOR_GREEN, "Você retirou um frango da geladeira!");
			return 1;
		}
		if(strcmp(tmp,"peixe",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("peixe")) {
		    if(pckStats[PickupEntradaCasa[playerid]][PeixeGeladeira] <= 0){
		    	SendClientMessage(playerid, COLOR_GRAY, "Você não tem peixe, verifique seus mantimentos em /geladeira.");
                return 1;
			}
			pStats[playerid][Peixe]++;
			pckStats[PickupEntradaCasa[playerid]][PeixeGeladeira]--;
			SendClientMessage(playerid, COLOR_GREEN, "Você retirou um peixe da geladeira!");
			return 1;
		}
		if(strcmp(tmp,"salada",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("salada")) {
		    if(pckStats[PickupEntradaCasa[playerid]][SaladaGeladeira] <= 0){
		    	SendClientMessage(playerid, COLOR_GRAY, "Você não tem salada, verifique seus mantimentos em /geladeira.");
                return 1;
			}
			pStats[playerid][Salada]++;
			pckStats[PickupEntradaCasa[playerid]][SaladaGeladeira]--;
			SendClientMessage(playerid, COLOR_GREEN, "Você retirou uma salada da geladeira!");
			return 1;
		}
		if(strcmp(tmp,"pizza",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("pizza")) {
		    if(pckStats[PickupEntradaCasa[playerid]][PizzaGeladeira] <= 0){
		    	SendClientMessage(playerid, COLOR_GRAY, "Você não tem pizza, verifique seus mantimentos em /geladeira.");
                return 1;
			}
			pStats[playerid][Pizza]++;
			pckStats[PickupEntradaCasa[playerid]][PizzaGeladeira]--;
			SendClientMessage(playerid, COLOR_GREEN, "Você retirou uma pizza da geladeira!");
			return 1;
		}
		if(strcmp(tmp,"refrigerante",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("refrigerante")) {
		    if(pckStats[PickupEntradaCasa[playerid]][RefriGeladeira] <= 0){
		    	SendClientMessage(playerid, COLOR_GRAY, "Você não tem refrigerante, verifique seus mantimentos em /geladeira.");
		    	return 1;
			}
			pStats[playerid][Refrigerante]++;
			pckStats[PickupEntradaCasa[playerid]][RefriGeladeira]--;
			SendClientMessage(playerid, COLOR_GREEN, "Você retirou um refrigerante da geladeira!");
			return 1;
		}
		if(strcmp(tmp,"suco",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("suco")) {
		    if(pckStats[PickupEntradaCasa[playerid]][SucoGeladeira] <= 0){
		    	SendClientMessage(playerid, COLOR_GRAY, "Você não tem suco, verifique seus mantimentos em /geladeira.");
		    	return 1;
			}
			pStats[playerid][Suco]++;
			pckStats[PickupEntradaCasa[playerid]][SucoGeladeira]--;
			SendClientMessage(playerid, COLOR_GREEN, "Você retirou um suco da geladeira!");
			return 1;
		}
		if(strcmp(tmp,"carne",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("carne")) {
		    if(pckStats[PickupEntradaCasa[playerid]][CarneGeladeira] <= 0){
		    	SendClientMessage(playerid, COLOR_GRAY, "Você não tem carne, verifique seus mantimentos em /geladeira.");
		    	return 1;
			}
			pStats[playerid][Carne]++;
			pckStats[PickupEntradaCasa[playerid]][CarneGeladeira]--;
			SendClientMessage(playerid, COLOR_GREEN, "Você retirou uma carne da geladeira!");
			return 1;
		}
		if(strcmp(tmp,"strogonoff",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("strogonoff")) {
		    if(pckStats[PickupEntradaCasa[playerid]][StrogonoffGeladeira] <= 0){
		    	SendClientMessage(playerid, COLOR_GRAY, "Você não tem strogonoff, verifique seus mantimentos em /geladeira.");
		    	return 1;
			}
			pStats[playerid][Strogonoff]++;
			pckStats[PickupEntradaCasa[playerid]][StrogonoffGeladeira]--;
			SendClientMessage(playerid, COLOR_GREEN, "Você retirou um strogonoff da geladeira!");
			return 1;
		}
		if(strcmp(tmp,"camarao",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("camarao")) {
		    if(pckStats[PickupEntradaCasa[playerid]][CamaraoGeladeira] <= 0){
		    	SendClientMessage(playerid, COLOR_GRAY, "Você não tem camarão, verifique seus mantimentos em /geladeira.");
		    	return 1;
			}
			pStats[playerid][Camarao]++;
			pckStats[PickupEntradaCasa[playerid]][CamaraoGeladeira]--;
			SendClientMessage(playerid, COLOR_GREEN, "Você retirou um camarão da geladeira!");
			return 1;
		}
		if(strcmp(tmp,"linguica",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("linguica")) {
		    if(pckStats[PickupEntradaCasa[playerid]][LinguicaGeladeira] <= 0){
		    	SendClientMessage(playerid, COLOR_GRAY, "Você não tem linguiça, verifique seus mantimentos em /geladeira.");
		    	return 1;
			}
			pStats[playerid][Linguica]++;
			pckStats[PickupEntradaCasa[playerid]][LinguicaGeladeira]--;
			SendClientMessage(playerid, COLOR_GREEN, "Você retirou uma linguiça da geladeira!");
			return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "/retirarcomida [refeição: frango, peixe, salada, pizza, refrigerante, suco, carne, strogonoff, camarao ou linguica]");
			return 1;
		}
	}

	if(strcmp(cmd, "/geladeira", true) == 0) {
	    new string[128];
	    if(NaCasa[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
		    return 1;
		}
		if(pckStats[PickupEntradaCasa[playerid]][Geladeira] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Essa casa não possui Geladeira!");
			return 1;
		}
		SendClientMessage(playerid, COLOR_WHITE, "|---| Geladeira |---|");
		SendClientMessage(playerid, COLOR_LIGHT_RED, "   ");
		if(pckStats[PickupEntradaCasa[playerid]][FrangoGeladeira] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Falta Frango.");
		}
		else {
	  		format(string, sizeof(string), "Bandejas de Frango: %d", pckStats[PickupEntradaCasa[playerid]][FrangoGeladeira]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		if(pckStats[PickupEntradaCasa[playerid]][PeixeGeladeira] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Falta Peixe.");
		}
		else {
			format(string, sizeof(string), "Bandejas de Peixe: %d", pckStats[PickupEntradaCasa[playerid]][PeixeGeladeira]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		if(pckStats[PickupEntradaCasa[playerid]][SaladaGeladeira] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Falta Salada.");
		}
		else {
			format(string, sizeof(string), "Bandejas de Salada: %d", pckStats[PickupEntradaCasa[playerid]][SaladaGeladeira]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		if(pckStats[PickupEntradaCasa[playerid]][PizzaGeladeira] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Falta Pizza.");
		}
		else {
			format(string, sizeof(string), "Caixas de Pizza: %d", pckStats[PickupEntradaCasa[playerid]][PizzaGeladeira]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		if(pckStats[PickupEntradaCasa[playerid]][RefriGeladeira] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Falta Refrigerante.");
		}
		else {
			format(string, sizeof(string), "Latas de Refrigeranteo: %d", pckStats[PickupEntradaCasa[playerid]][RefriGeladeira]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		if(pckStats[PickupEntradaCasa[playerid]][SucoGeladeira] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Falta Suco.");
		}
		else {
			format(string, sizeof(string), "Garrafas de Suco: %d", pckStats[PickupEntradaCasa[playerid]][SucoGeladeira]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		if(pckStats[PickupEntradaCasa[playerid]][CarneGeladeira] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Falta Carne.");
		}
		else {
			format(string, sizeof(string), "Bandejas de Carne: %d", pckStats[PickupEntradaCasa[playerid]][CarneGeladeira]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		if(pckStats[PickupEntradaCasa[playerid]][StrogonoffGeladeira] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Falta Strogonoff.");
		}
		else {
			format(string, sizeof(string), "Potes de Strogonoff: %d", pckStats[PickupEntradaCasa[playerid]][StrogonoffGeladeira]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		if(pckStats[PickupEntradaCasa[playerid]][CamaraoGeladeira] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Falta Camarão.");
		}
		else {
			format(string, sizeof(string), "Bandejas de Camarão: %d", pckStats[PickupEntradaCasa[playerid]][CamaraoGeladeira]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		if(pckStats[PickupEntradaCasa[playerid]][LinguicaGeladeira] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Falta Linguiça.");
		}
		else {
			format(string, sizeof(string), "Bandejas de Linguiça: %d", pckStats[PickupEntradaCasa[playerid]][LinguicaGeladeira]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/roubartv", true) == 0) {
	    if(pStats[playerid][Prof] != ASSALTANTE) return SendClientMessage(playerid, COLOR_GRAY, "Você não é Assaltante.");
		if(NaCasa[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
		if(pStats[playerid][PTV] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você já tem uma TV, venda ela pra alguém. /colocartv. Cobre por fora.");
		if(pckStats[PickupEntradaCasa[playerid]][TV] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem TV!!");
		pStats[playerid][PTV] = 1;
		pckStats[PickupEntradaCasa[playerid]][TV] = 0;
		new alarme = pckStats[PickupEntradaCasa[playerid]][Alarme];
		if(alarme == 0) return SendClientMessage(playerid, COLOR_GREEN, "Roubo concluído, agora você pode colocar essa TV em sua casa ou vendela para alguém.");
		AcusacaoCrime(playerid, "Alarme Casa", pckStats[PickupEntradaCasa[playerid]][PickupDono] , "Assalto a Residência (TV)", 2, 0, 0, 1);
		for(new i=0; i<MAX_SLOTS; i++){
        	if(pStats[i][Prof] == COP_MILITAR || pStats[i][Prof] == DELEGADO || pStats[i][Prof] == COP_RODOVIARIO || pStats[i][Prof] == COP_SWAT){
				GetPlayerPos(playerid,CPLocal[i][0],CPLocal[i][1],CPLocal[i][2]);
			}
		}
	}
	if(strcmp(cmd, "/roubarradio", true) == 0) {
	    if(pStats[playerid][Prof] != ASSALTANTE) return SendClientMessage(playerid, COLOR_GRAY, "Você não é Assaltante.");
		if(NaCasa[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
		if(pStats[playerid][PRadio] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você já tem um rádio, venda ele pra alguém. /colocarradio. Cobre por fora.");
		if(pckStats[PickupEntradaCasa[playerid]][Radio] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem rádio!!");
		pStats[playerid][PRadio] = 1;
		pckStats[PickupEntradaCasa[playerid]][Radio] = 0;
		new alarme = pckStats[PickupEntradaCasa[playerid]][Alarme];
		if(alarme == 0) return SendClientMessage(playerid, COLOR_GREEN, "Roubo concluído, agora você pode colocar esse Radio em sua casa ou vendela para alguém.");
		AcusacaoCrime(playerid, "Alarme Casa", pckStats[PickupEntradaCasa[playerid]][PickupDono] , "Assalto a Residência (Radio)", 2, 0, 0, 1);
		for(new i=0; i<MAX_SLOTS; i++){
        	if(pStats[i][Prof] == COP_MILITAR || pStats[i][Prof] == DELEGADO || pStats[i][Prof] == COP_RODOVIARIO || pStats[i][Prof] == COP_SWAT){
				GetPlayerPos(playerid,CPLocal[i][0],CPLocal[i][1],CPLocal[i][2]);
			}
		}
	}
	if(strcmp(cmd, "/roubarfogao", true) == 0) {
	    if(pStats[playerid][Prof] != ASSALTANTE) return SendClientMessage(playerid, COLOR_GRAY, "Você não é Assaltante.");
		if(NaCasa[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
		if(pStats[playerid][PFogao] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você já tem um fogão, venda ele pra alguém. /colocartv. Cobre por fora.");
		if(pckStats[PickupEntradaCasa[playerid]][Fogao] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem fogão!!");
		pStats[playerid][PFogao] = 1;
		pckStats[PickupEntradaCasa[playerid]][Fogao] = 0;
		new alarme = pckStats[PickupEntradaCasa[playerid]][Alarme];
		if(alarme == 0) return SendClientMessage(playerid, COLOR_GREEN, "Roubo concluído, agora você pode colocar esse Fogão em sua casa ou vendela para alguém.");
		AcusacaoCrime(playerid, "Alarme Casa", pckStats[PickupEntradaCasa[playerid]][PickupDono] , "Assalto a Residência (Fogão)", 2, 0, 0, 1);
		for(new i=0; i<MAX_SLOTS; i++){
        	if(pStats[i][Prof] == COP_MILITAR || pStats[i][Prof] == DELEGADO || pStats[i][Prof] == COP_RODOVIARIO || pStats[i][Prof] == COP_SWAT){
				GetPlayerPos(playerid,CPLocal[i][0],CPLocal[i][1],CPLocal[i][2]);
			}
		}
	}
	if(strcmp(cmd, "/roubargeladeira", true) == 0) {
	    if(pStats[playerid][Prof] != ASSALTANTE) return SendClientMessage(playerid, COLOR_GRAY, "Você não é Assaltante.");
		if(NaCasa[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");

		if(pStats[playerid][PGeladeira] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você já tem uma geladeira, venda ela pra alguém. /colocartv. Cobre por fora.");
		if(pckStats[PickupEntradaCasa[playerid]][Geladeira] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem geladeira!!");
		pStats[playerid][PGeladeira] = 1;
		pckStats[PickupEntradaCasa[playerid]][Geladeira] = 0;
		new alarme = pckStats[PickupEntradaCasa[playerid]][Alarme];
		if(alarme == 0) return SendClientMessage(playerid, COLOR_GREEN, "Roubo concluído, agora você pode colocar essa Geladeira em sua casa ou vendela para alguém.");
		AcusacaoCrime(playerid, "Alarme Casa", pckStats[PickupEntradaCasa[playerid]][PickupDono] , "Assalto a Residência (Geladeira)", 2, 0, 0, 1);
		for(new i=0; i<MAX_SLOTS; i++){
        	if(pStats[i][Prof] == COP_MILITAR || pStats[i][Prof] == DELEGADO || pStats[i][Prof] == COP_RODOVIARIO || pStats[i][Prof] == COP_SWAT){
				GetPlayerPos(playerid,CPLocal[i][0],CPLocal[i][1],CPLocal[i][2]);
			}
		}
	}
	if(strcmp(cmd, "/porcasaavenda", true) == 0) {
	    if(pStats[playerid][Prof] != CORRETOR && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não é Corretor de imóveis!");
		new valor;
		valor = strval(strtok(cmdtext,idx));
		if(pStats[playerid][VendendoCasas] >= 5) return SendClientMessage(playerid, COLOR_GRAY, "Você só pode colocar 5 casas à venda no máximo!");
       	new bool:valid_price = false;
		for(new i = 0; i < sizeof Interiores; i++)
		{
		    if(valor == Interiores[i][hPrice])
		    {
		        valid_price = true;
		        break;
		    }
		}
		if(!valid_price)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Valor inválido, veja todos os valores em /regras1 >> lacuna 5");
		    return 1;
		}
		new pickupcasa = LastCasa;
		LastCasa++;
		new File:pckfile = fopen(PickupFile(pickupcasa),io_write);
		fclose(pckfile);
		GetPlayerPos(playerid,pckStats[pickupcasa][pX],pckStats[pickupcasa][pY],pckStats[pickupcasa][pZ]);
		CreatePickup(1273,1,pckStats[pickupcasa][pX],pckStats[pickupcasa][pY],pckStats[pickupcasa][pZ]);
		set(pckStats[pickupcasa][CorretorVenda],PlayerName(playerid));
		pckStats[pickupcasa][Vendendo] = 1;
		pckStats[pickupcasa][PickupValor] = valor;
		pStats[playerid][VendendoCasas]++;
		SendClientMessage(playerid, COLOR_CORRETOR, "Casa colocada a venda, aguarde um comprador...");
		return 1;
	}
	if(strcmp(cmd, "/redefinirpreco", true) == 0) {
	    if(pStats[playerid][Prof] != CORRETOR && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não é Corretor de imóveis!");
		new valor = strval(strtok(cmdtext,idx));
		new bool:valid_price = false;
		for(new i = 0; i < sizeof Interiores; i++)
		{
		    if(valor == Interiores[i][hPrice])
		    {
		        valid_price = true;
		        break;
		    }
		}
		if(!valid_price)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Valor inválido, veja todos os valores em /regras1 >> lacuna 5");
		    return 1;
		}
		new pickupcasa = GetPickupHouse[playerid];
		if(!IsPlayerAdmin(playerid))
		{
		    if(pckStats[pickupcasa][Vendendo] == 0)
		    {
		        SendClientMessage(playerid, COLOR_GRAY, "Você só pode redefinir o preço de uma casa à venda.");
		        return 1;
		    }
		    if(!compare(pckStats[pickupcasa][CorretorVenda], PlayerName(playerid)))
		    {
		        SendClientMessage(playerid, COLOR_GRAY, "Você não é o responsável por essa venda.");
		        return 1;
		    }
		}
		pckStats[pickupcasa][PickupValor] = valor;
		SendClientMessage(playerid, COLOR_CORRETOR, "Valor da casa redefinido.");
		return 1;
	}
	if(strcmp(cmd, "/tirarcasaavenda", true) == 0) {
	    if(pStats[playerid][Prof] != CORRETOR && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não é Corretor de imóveis!");
		new pickupcasa = GetPickupHouse[playerid];
		if(pckStats[pickupcasa][Vendendo] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Você deve estar em uma casa a venda!");
			return 1;
		}
		if(!compare(PlayerName(playerid),pckStats[pickupcasa][CorretorVenda]) && !IsPlayerAdmin(playerid)){
			SendClientMessage(playerid, COLOR_GRAY, "Não foi você quem colocou essa casa a venda, então você não pode tira-la!");
			return 1;
		}
		set(pckStats[pickupcasa][PickupDono], "NULL");
  		DestroyPickup(sizeof Pickups + pickupcasa);
  		CreatePickup(1273, 1, INVALID_POS_X, INVALID_POS_Y, INVALID_POS_Z);
  		set(pckStats[pickupcasa][CorretorVenda],"NONE");
  		pckStats[pickupcasa][Vendendo] = 0;
  		pckStats[pickupcasa][PickupValor] = 0;
  		pckStats[pickupcasa][pX] = INVALID_POS_X;
  		pckStats[pickupcasa][pY] = INVALID_POS_Y;
  		pckStats[pickupcasa][pZ] = INVALID_POS_Z;
  		pStats[playerid][VendendoCasas]--;
		SendClientMessage(playerid, COLOR_CORRETOR, "Casa retirada de venda...");
		return 1;
	}
	if(strcmp(cmd, "/tomarpossevenda", true) == 0) {
	    if(pStats[playerid][Prof] != CORRETOR && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não é Corretor de imóveis!");
		new pickupcasa = GetPickupHouse[playerid];
		if(pckStats[pickupcasa][Vendendo] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Você deve estar em uma casa a venda!");
			return 1;
		}
		if(!compare("Servidor",pckStats[pickupcasa][CorretorVenda]) && !IsPlayerAdmin(playerid)){
			SendClientMessage(playerid, COLOR_GRAY, "Essa casa não foi colocada a venda pelo servidor!");
			return 1;
		}
		if(pStats[playerid][VendendoCasas] >= 5){
			SendClientMessage(playerid, COLOR_GRAY, "Você só pode colocar 5 casas à venda no máximo!");
		    return 1;
		}
		pStats[playerid][VendendoCasas]++;
		set(pckStats[pickupcasa][CorretorVenda], PlayerName(playerid));
		AcrescentarXpoints(playerid, 1);
		SendClientMessage(playerid, COLOR_CORRETOR, "Muito bom, essa venda agora é sua...");
		return 1;
	}
	if(strcmp(cmd, "/comprarcasaavenda", true) == 0){
	    new pickupcasa = GetPickupHouse[playerid];
	    if(pickupcasa == -1){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não está na entrada de uma casa!");
			return 1;
		}
		if(pckStats[GetPickupHouse[playerid]][Vendendo] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Você deve estar em uma casa a venda!");
			return 1;
		}
		if(GetPlayerServerMoney(playerid) < pckStats[GetPickupHouse[playerid]][PickupValor]){
		    new string[128];
		    format(string,sizeof(string),"Você não tem dinheiro. Custo: $%d,00 dólares",pckStats[GetPickupHouse[playerid]][PickupValor]);
			SendClientMessage(playerid, COLOR_GRAY, string);
			return 1;
		}
		new string[128];
		if(!compare(pckStats[GetPickupHouse[playerid]][CorretorVenda], "Servidor"))
		{
			if(!IsStringAName(pckStats[GetPickupHouse[playerid]][CorretorVenda])){
				SendClientMessage(playerid, COLOR_GRAY, "O corretor tem que estar conectado.");
				return 1;
			}
			new id = IDName(pckStats[GetPickupHouse[playerid]][CorretorVenda]);
			pStats[id][VendendoCasas]--;
			Pay(id, pckStats[GetPickupHouse[playerid]][PickupValor] / 10);
			format(string,sizeof(string),"O jogador %s comprou uma casa sua a venda pelo valor de $%d,00 dólares, você recebeu 10 por cento do valor!",PlayerName(playerid),pckStats[GetPickupHouse[playerid]][PickupValor]);
			SendClientMessage(id, COLOR_CORRETOR, string);
		}
		RemovePlayerFromHotel(playerid);
		new Float:ang;
		GetPlayerPos(playerid,pStats[playerid][SpawnPosX],pStats[playerid][SpawnPosY],pStats[playerid][SpawnPosZ]);
		GetPlayerFacingAngle(playerid,pStats[playerid][SpawnPosAng]);
		AddPlayerMoney(playerid, -pckStats[GetPickupHouse[playerid]][PickupValor], -1);
		DestroyPickup(sizeof Pickups + pickupcasa);
		CreatePickup(1272,1,pStats[playerid][SpawnPosX],pStats[playerid][SpawnPosY],pStats[playerid][SpawnPosZ]);
		pStats[playerid][SpawnPosAng] = ang;
		SendClientMessage(playerid, COLOR_WHITE, "Casa adquirida...");
  		pckStats[pickupcasa][pX] = pStats[playerid][SpawnPosX];
		pckStats[pickupcasa][pY] = pStats[playerid][SpawnPosY];
		pckStats[pickupcasa][pZ] = pStats[playerid][SpawnPosZ];
		set(pckStats[pickupcasa][PickupDono],PlayerName(playerid));
		new str2[128];
		format(str2,sizeof(str2),"VL%d",pickupcasa);
		set(pckStats[pickupcasa][SenhaCofre],str2);
  		pckStats[pickupcasa][Vendendo] = 0;
  		set(pckStats[pickupcasa][CorretorVenda],"NONE");
  		pckStats[pickupcasa][ContaLuz] = 0;
  		pckStats[pickupcasa][TV] = 0;
  		pckStats[pickupcasa][Radio] = 0;
  		pckStats[pickupcasa][Geladeira] = 0;
  		pckStats[pickupcasa][Fogao] = 0;
  		pckStats[pickupcasa][MaconhaCofre] = 0;
  		pckStats[pickupcasa][HeroinaCofre] = 0;
  		pckStats[pickupcasa][CocainaCofre] = 0;
  		pckStats[pickupcasa][DinheiroCofre] = 0;
		format(string,sizeof(string),"[CORRETORA] A senha do seu cofre no momento é VL%d mas você pode troca-la com /registrarcofre [senha]",pickupcasa);
		SendClientMessage(playerid, COLOR_CORRETOR, string);
		format(string,sizeof(string),"[CORRETORA] Essa é sua casa de ID: %d", GetPHouseKeyID(playerid,pickupcasa));
		SendClientMessage(playerid, COLOR_CORRETOR, string);
		return 1;
	}
	if(strcmp(cmd, "/casa", true) == 0) {
	    if(pStats[playerid][Prof] == CORRETOR || IsPlayerAdmin(playerid)){
			new plid,valor;
			new string[128];
			new tmp[128];
			new distancia;
			tmp = strtok(cmdtext, idx);
			if(IsStringAName(tmp)){
				plid = IDName(tmp);
			}
			else{
				plid = strval(tmp);
			}
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/casa [ID/Nome do comprador] [valor]");
				return 1;
			}
			tmp = strtok(cmdtext,idx);
			valor = strval(tmp);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/casa [ID/Nome do comprador] [valor]");
				return 1;
			}
			if(pStats[plid][XL] < 5){
			    SendClientMessage(playerid, COLOR_GRAY, "O jogador precisa de 5 ou mais pontos de XL pra comprar uma casa!");
				return 1;
			}
			if(GetPlayerServerMoney(plid) < valor){
			    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não possui dinheiro!");
			    return 1;
			}
			distancia = GetDistanceBetweenPlayers(playerid, plid);
		 	if(distancia > 30){
			    SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto.");
				return 1;
			}
			if(GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não pode vender casas em um interior!");
			new bool:valid_price = false;
			for(new i = 0; i < sizeof Interiores; i++)
			{
			    if(valor == Interiores[i][hPrice])
			    {
			        valid_price = true;
			        break;
			    }
			}
			if(!valid_price)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Valor inválido, veja todos os valores em /regras1 >> lacuna 5");
			    return 1;
			}
			if(GetQtHouses(playerid) == 10){
			    SendClientMessage(playerid, COLOR_GRAY, "Ele estourou o limite de casas do servidor, já possui 10 casas.");
				return 1;
			}
			if(IsPlayerConnected(plid) && Logado[plid] == 1){
           		ParaAceitar[plid] = ACEITAR_CASA;
				envconvite[plid] = playerid;
				GetPlayerPos(playerid,iX[plid],iY[plid],iZ[plid]);
				GetPlayerFacingAngle(playerid,iang[plid]);
				ivalorcasa[plid] = valor;
				SendClientMessage(playerid, COLOR_CORRETOR, "Ótimo! Agora espere o outro jogador aceitar a casa.");
				format(string,sizeof(string),"O Corretor %s está lhe oferecendo uma casa por $%d",PlayerName(playerid), valor);
				SendClientMessage(plid, COLOR_CORRETOR, string);
				SendClientMessage(plid, COLOR_CORRETOR, "Para aceitar digite: /aceitar ou /recusar");
		    	TimerCancel[plid] = SetTimerEx("Cancelar",60000,0,"d",plid);
				return 1;
			} else {
	  			SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado");
				return 1;
			}
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Corretor de Imoveis");
			return 1;
		}
	}
    if(strcmp(cmd, "/cdocumentos", true) == 0)
    {
        if(NaCasa[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você deve estar no interior de uma casa...");
        SendClientMessage(playerid, COLOR_WHITE, "Documentação da Casa:");
		new string[128], cid = PickupEntradaCasa[playerid];
		format(string, sizeof string, "ID/N° da casa: %d", cid);
		SendClientMessage(playerid, COLOR_JUIZ, string);
		format(string, sizeof string, "Valor da casa: $%d,00 dólares", pckStats[cid][PickupValor]);
		SendClientMessage(playerid, COLOR_JUIZ, string);
		format(string, sizeof string, "Proprietário: %s", pckStats[cid][PickupDono]);
		SendClientMessage(playerid, COLOR_JUIZ, string);
		format(string, sizeof string, "Telefone da casa: %d", pckStats[cid][TelefoneNumb]);
		SendClientMessage(playerid, COLOR_JUIZ, string);
		if(pckStats[cid][SemTelefone] == 1)
		{
		    SendClientMessage(playerid, COLOR_JUIZ, "Essa casa está com o telefone cortado, portanto não há como efetuar ligações, somente receber.");
		}
		if(pckStats[cid][SemLuz] == 1)
		{
			SendClientMessage(playerid, COLOR_JUIZ, "Essa casa está com a luz cortada, qualquer eletrodoméstico dela não irá funcionar.");
		}
		return 1;
    }
	if(strcmp(cmd, "/hotel", true) == 0) {
		if(PlayerArea[playerid] == AreaHotel){
		    if(HotelLastP[PlayerHotel[playerid]] >= MAX_HOTEL_PLAYERS){
		        SendClientMessage(playerid, COLOR_GRAY, "Limite de jogadores em hotéis excedido pelo gamemode...");
		        return 1;
			}
			if(GetPlayerServerMoney(playerid) < 1500){
       			SendClientMessage(playerid, COLOR_GRAY, "Você não tem com você $1500 para pagar.");
				return 1;
			} else {
				if(fexist(PlayerFile(PlayerName(playerid)))) {
				    RemovePlayerFromHotel(playerid);
					ApplyPlayerInHotel(playerid);
	    			AddPlayerMoney(playerid,-1500,-1);
	    			AcrescentarLucro(15,1500);
	    			SendClientMessage(playerid, COLOR_GREEN, "Agora você está hospedado aqui. Obrigado por escolher este Hotel.");
		           	SendClientMessage(playerid, COLOR_GREEN, "Você ficará hospedado até ter um emprego e condições de comprar sua casa.");
					return 1;
        		}
			}
		} else {
    		SendClientMessage(playerid, COLOR_GRAY, "Ei... Você não está em um Hotel.");
       		SendClientMessage(playerid, COLOR_WHITE, "Procure um taxista e peça para lhe levar à um.");
       		SendClientMessage(playerid, COLOR_WHITE, "Se tiver uma casa verde no radar HÁ VAGAS!");
    		return 1;
       	}
    }
	if(strcmp(cmd, "/seretirarhotel", true) == 0) {
	    if(pStats[playerid][Hotel] == -1)
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não está hospedado em um hotel.");
			return 1;
	    }
		RemovePlayerFromHotel(playerid);
		pStats[playerid][SpawnPosX] = 1685.4244;
		pStats[playerid][SpawnPosY] = -2333.4529;
		pStats[playerid][SpawnPosZ] = 13.5469;
		pStats[playerid][SpawnPosAng] = 360;
		SendClientMessage(playerid, COLOR_GREEN, "Retirado do Hotel... Agora continuará sem um lar por enquanto.");
		return 1;
	}
	if(strcmp(cmd, "/pagar", true) == 0)
	{
		new string[128];
	    new tmp[128];
	    new plid;
	    new pagamento;
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAY, "/pagar [id] [quantidade]");
			return 1;
		}
		plid = strval(tmp);
		if(plid == playerid)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não pode se auto-pagar.");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAY, "USO: /pagar [id] [quantidade]");
			return 1;
		}
		if(GetDistanceBetweenPlayers(playerid, plid) > 15.0)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto do jogador para pagá-lo.");
		    return 1;
		}
 		pagamento = strval(tmp);
		if(pagamento > GetPlayerServerMoney(playerid) || pagamento <= 0)
		{
			SendClientMessage(playerid, COLOR_GRAY, "Você não tem esse dinheiro ou não está querendo pagar de forma justa.");
			return 1;
		}
		if(pagamento < 50)
		{
			SendClientMessage(playerid, COLOR_GRAY, "O Valor mínimo é de $50.");
			return 1;
		}
 		if(IsPlayerConnected(plid) && Logado[plid])
		{
   			SendClientMessage(playerid, COLOR_JUIZ, "Jogador pago.");
   			if(pStats[plid][Prof] == VENDEDOR_DE_CARROS || pStats[plid][Prof] == CORRETOR || pStats[plid][Prof] == VENDEDOR_DE_ARMAS)
   			{
   			    format(string, sizeof(string), "Você recebeu um pagamento de $%d,00 dólares por %s.", pagamento / 10, PlayerName(playerid));
   			}
   			else
   			{
				format(string, sizeof(string), "Você recebeu um pagamento de $%d,00 dólares por %s.", pagamento, PlayerName(playerid));
			}
			SendClientMessage(plid, COLOR_WHITE, string);
			if(pStats[plid][Prof] == VENDEDOR_DE_CARROS || pStats[plid][Prof] == CORRETOR || pStats[plid][Prof] == VENDEDOR_DE_ARMAS)
			{
				PlayerPay(playerid, plid, pagamento, 10);
			}
			else
			{
				PlayerPay(playerid, plid, pagamento);
			}
			return 1;
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "O jogador não está conectado/logado.");
			return 1;
		}
	}

	if(strcmp(cmd,"/minhaslatas",true)==0){
		if(pStats[playerid][Prof] == DESEMPREGADO || pStats[playerid][Prof] == LIXEIRO || IsPlayerAdmin(playerid)){
			new string[128];
		    format(string,sizeof(string),"Você possui %d latas!",pStats[playerid][Latas]);
		    SendClientMessage(playerid, COLOR_WHITE, string);
		    return 1;
	    } else {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é desempregado portanto não possui latinhas");
		    return 1;
		}
	}

	if(strcmp(cmd, "/venderlatas",true)==0){
		if(pStats[playerid][Prof] == DESEMPREGADO || pStats[playerid][Prof] == LIXEIRO || IsPlayerAdmin(playerid)){
			if(PlayerArea[playerid] == AreaLixao){
		 		AddPlayerMoney(playerid,pStats[playerid][Latas]*5, 3);
				new string[128];
			    format(string,sizeof(string),"Você vendeu %d latinhas e recebeu $%d por isso.",pStats[playerid][Latas],pStats[playerid][Latas]*10);
				SendClientMessage(playerid, COLOR_DESEMPREGADO, string);
				pStats[playerid][Latas] = 0;
				DisablePlayerCheckpoint(playerid);
				EntregandoLatas[playerid] = 0;
				CheckpointStatus[playerid] = NONE;
				Pay(playerid, pStats[playerid][Latas] * 10);
				return 1;
			} else {
			 	SendClientMessage(playerid, COLOR_GRAY, "Você não está na área de reciclagem do lixão");
			 	return 1;
			 }
		 } else {
			 SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão");
			 return 1;
		 }
    }
	if(strcmp(cmd,"/pararcoleta",true)==0){
		if(pStats[playerid][Prof] == DESEMPREGADO || pStats[playerid][Prof] == LIXEIRO || IsPlayerAdmin(playerid)){
			if(CatarLatinha[playerid] == 1){
				DisablePlayerCheckpoint(playerid);
		        CatarLatinha[playerid] = 0;
		        SendClientMessage(playerid, COLOR_DESEMPREGADO, "Você parou de coletar latinhas.");
		        new string[128];
		        format(string,sizeof(string),"Você possui %d latinhas",pStats[playerid][Latas]);
		        SendClientMessage(playerid, COLOR_BLUE_PLUS,string);
		        Missao[playerid] = 0;
		        return 1;
			 }else{
				SendClientMessage(playerid, COLOR_GRAY, "Você não está coletando latinhas.");
		    	return 1;
		   	}
	   	} else {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão.");
		    return 1;
		}
	}
	if(strcmp(cmd,"/pegarlata",true)==0){
	    if(pStats[playerid][Prof] == DESEMPREGADO || pStats[playerid][Prof] == LIXEIRO || IsPlayerAdmin(playerid)){
	        if(CatarLatinha[playerid] == 1){
				SendClientMessage(playerid,COLOR_GRAY,"Você já está coletando latinhas!");
				return 1;
			}
			else {
			    if(pStats[playerid][Latas] == 0) pStats[playerid][LatasNecessarias] = 30;
                CatarLatinha[playerid] = 1;
                DisablePlayerCheckpoint(playerid);
				SendClientMessage(playerid,COLOR_DESEMPREGADO,"Agora você terá que coletar latinhas e levar para a reciclagem.");
				new latinhas = random(37);
				CheckpointStatus[playerid] = COLETANDO_LATAS;
				SetPlayerCheckpoint(playerid,Latinhas[latinhas][0],Latinhas[latinhas][1],Latinhas[latinhas][2],3.0);
				Missao[playerid] = 1;
				return 1;
			}
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Você possui um emprego! Pegar lata é coisa de vagabundo...");
			return 1;
		}
	}

	if(strcmp(cmd, "/fazercorrida", true) == 0 && IsPlayerAdmin(playerid)){
        SetPlayerNextRace1CP(playerid);
        return 1;
	}

	if(strcmp(cmd, "/fazerderby", true) == 0){
		if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão!");
	    new tmp[128];
	    new mins,string[128];
	    tmp = strtok(cmdtext,idx);
	 	mins = strval(tmp);
		if(mins <= 2 || mins >= 8) return SendClientMessage(playerid, COLOR_GRAY, "USE: /fazerderby [3-7]");
		if(DerbyAvisado == 1) return  SendClientMessage(playerid, COLOR_GRAY, "Já há um Derby em andamento!");
		SendClientMessageToAll(COLOR_WHITE, " ");
		SendClientMessageToAll(COLOR_WHITE, "[ESTÁDIO] Está achando sua vida monótona?");
		SendClientMessageToAll(COLOR_WHITE, "[ESTÁDIO] Chegou a sua hora de competir no nosso estádio!!!");
		SendClientMessageToAll(COLOR_WHITE, "[ESTÁDIO] Que tal um CRASH/DERBY ? Venha já para o nosso estádio");
		SendClientMessageToAll(COLOR_WHITE, "[ESTÁDIO] Está interessado? /participar.");
		format(string,sizeof(string), 		"[ESTÁDIO] As inscrições acabarão daqui à %d horas",mins);
		SendClientMessageToAll(COLOR_WHITE, string);
		SendClientMessageToAll(COLOR_WHITE, " ");
		SendClientMessage(playerid, COLOR_JUIZ, "Derby feito!");
		format(string,sizeof(string),"%s iniciou um derby daqui a %d minutos.",PlayerName(playerid),mins);
		print(string);
		writelog(string);
		DMinutosRestantes = mins;
		SetTimer("ContandoDerby",60000,0);
		DerbyAvisado = 1;
		return 1;
	}
	if(strcmp(cmd,"/abastecerarma",true) == 0){
	    if(MiniGame[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está no evento!");
	    if(Equipe[playerid] != 2) return SendClientMessage(playerid, COLOR_GRAY, "Você não é da equipe policial!");
		if(PlayerArea[playerid] != AreaCopPL) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na base policial!");
		SetPlayerControl(playerid,0);
		SendClientMessage(playerid, COLOR_WHITE, "Abastecendo sua arma...");
		SetTimerEx("AbastecerArma",5000,0,"d",playerid);
	    return 1;
	}
	if(strcmp(cmd,"/equipectc",true) == 0){
	    if(!AgoraNoCTC[playerid]) return SendClientMessage(playerid, COLOR_GRAY, "Você não está liberado para escolher uma equipe!");
	    new tmp[128];
	    tmp = strtok(cmdtext,idx);
	    if(compare(tmp,"azul")){
	        AgoraNoCTC[playerid] = 0;
	        new string[128];
			format(string,sizeof(string),"[CAPTURE THE CARS] %s entrou para a equipe azul.",PlayerName(playerid));
			SendClientMessageToAll(COLOR_LIXEIRO, string);
			SetPlayerCTCGroup(playerid,1);
 			return 1;
		}
		else if(compare(tmp,"laranja")){
            AgoraNoCTC[playerid] = 0;
            new string[128];
			format(string,sizeof(string),"[CAPTURE THE CARS] %s entrou para a equipe laranja.",PlayerName(playerid));
			SendClientMessageToAll(COLOR_LIXEIRO, string);
			SetPlayerCTCGroup(playerid,2);
		 	return 1;
		}
		return SendClientMessage(playerid, COLOR_GRAY, "USO: /equipectc [azul/laranja]");
	}
	if(strcmp(cmd,"/equipe",true) == 0){
	    if(!EscolhendoEquipe[playerid]) return SendClientMessage(playerid, COLOR_GRAY, "Você não está liberado para escolher uma equipe!");
	    new tmp[128];
	    tmp = strtok(cmdtext,idx);
	    if(compare(tmp,"ladroes")){
	        EscolhendoEquipe[playerid] = 0;
 			SetLadraoPL(playerid);
 			new string[128];
 			format(string,sizeof(string),"[POLÍCIA E LADRÃO] %s entrou para a equipe dos ladrões",PlayerName(playerid));
			SendClientMessageToAll(COLOR_LIGHT_YELLOW, string);
 			return 1;
		}
		if(compare(tmp,"policiais")){
            EscolhendoEquipe[playerid] = 0;
		 	SetPolicialPL(playerid);
		 	new string[128];
		 	format(string,sizeof(string),"[POLÍCIA E LADRÃO] %s entrou para a equipe dos policiais",PlayerName(playerid));
			SendClientMessageToAll(COLOR_LIGHT_YELLOW, string);
		 	return 1;
		}
		return SendClientMessage(playerid, COLOR_GRAY, "USO: /equipe [ladroes/policiais]");
	}
	if(strcmp(cmd, "/iniciarctc", true) == 0 && IsPlayerAdmin(playerid)) return FimInscCTC();
	if(strcmp(cmd, "/fimctc", true) == 0 && IsPlayerAdmin(playerid)) return FimCTC();
	if(strcmp(cmd,"/sairctc",true) == 0){
        if(MiniGame[playerid] == 2){
            RemovePlayerFromMiniGame(playerid);
            GangZoneHideForPlayer(playerid, EquipeAzul);
			GangZoneHideForPlayer(playerid, EquipeLaranja);
 			SetPlayerWantedLevelColor(playerid);
			EquipeCTC[playerid] = 0;
			SetPlayerPos(playerid,1019.2133,-1134.7303,23.8281);
			return 1;
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "Você não está no Capture The Cars!");
			return 1;
		}
	}
	if(strcmp(cmd,"/setarequipectc",true) == 0 && IsPlayerAdmin(playerid)){
	    new plid = strval(strtok(cmdtext,idx));
	    if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado!");
	    new tmp[128];
	    tmp = strtok(cmdtext,idx);
	    if(compare(tmp,"azul")){
	        AgoraNoCTC[plid] = 0;
			SetPlayerCTCGroup(plid,1);
 			return 1;
		}
		else if(compare(tmp,"laranja")){
            AgoraNoCTC[plid] = 0;
			SetPlayerCTCGroup(plid,2);
		 	return 1;
		}
		return SendClientMessage(playerid, COLOR_GRAY, "USO: /setarequipectc [id] [azul/laranja]");
	}
	if(strcmp(cmd,"/entrarctc",true) == 0){
		if(!Logado[playerid]) return SendClientMessage(playerid, COLOR_GRAY, "Você não está logado!");
		if(CTCAberto == 1) return SendClientMessage(playerid, COLOR_GRAY, "O evento já iniciou!");
		if(PlayerArea[playerid] != AreaEntretenimentos) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na área de entretenimentos!");
		if(MiniGame[playerid] == 2) return SendClientMessage(playerid, COLOR_GRAY, "Você já está no Capture The Cars!");
		SetPlayerMiniGame(playerid, 2);
		new string[128];
		format(string,sizeof(string),"[CAPTURE THE CARS] %s entrou para o evento.",PlayerName(playerid));
		SendClientMessageToAll(COLOR_LIXEIRO, string);
		SendClientMessage(playerid, COLOR_WHITE, "Feito, espere o evento iniciar para escolher a equipe!");
		return 1;
	}
	if(strcmp(cmd,"/entrarpl",true) == 0){
		if(!Logado[playerid]) return SendClientMessage(playerid, COLOR_GRAY, "Você não está logado!");
		if(PLIniciou == 1) return SendClientMessage(playerid, COLOR_GRAY, "O evento já iniciou!");
		if(PlayerArea[playerid] != AreaEntretenimentos) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na área de entretenimentos!");
		if(MiniGame[playerid] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você já está no Polícia e Ladrão!");
		SetPlayerMiniGame(playerid, 1);
		new string[128];
		format(string,sizeof(string),"[POLÍCIA E LADRÃO] %s entrou para o evento.",PlayerName(playerid));
		SendClientMessageToAll(COLOR_LIGHT_YELLOW, string);
		SendClientMessage(playerid, COLOR_WHITE, "Feito, espere o evento iniciar para escolher a equipe!");
		return 1;
	}
	if(strcmp(cmd,"/iniciarpl",true) == 0){
	    if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Apenas admins podem iniciar o evento!");
		if(PLIniciou == 1) return SendClientMessage(playerid, COLOR_GRAY, "O evento já está iniciado!");
		if(!Logado[playerid]) return SendClientMessage(playerid, COLOR_GRAY, "Você não está logado!");
		PLIniciou = 1;
		QtCapturados = 0;
		SendClientMessageToAll(COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] Evento iniciado! Digitem \"/equipe [ladroes/policiais]\" para entrarem em uma equipe!");
		for(new i = 0; i < MAX_SLOTS; i++){
	    	if(IsPlayerConnected(i) && MiniGame[i] == 1){
				EscolhendoEquipe[i] = 1;
			}
		}
		CtPL = TIMER_PL;
		TimerPL = SetTimer("EndPL",60000,0);
		return 1;
	}
	if(strcmp(cmd,"/fimpl",true) == 0){
        if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Apenas admins podem finalizar o evento!");
        if(PLIniciou == 0) return SendClientMessage(playerid, COLOR_GRAY, "O evento não está iniciado!");
		if(!Logado[playerid]) return SendClientMessage(playerid, COLOR_GRAY, "Você não está logado!");
        PLIniciou = 0;
        QtCapturados = 0;
		for(new i = 0; i < MAX_SLOTS; i++){
			if(IsPlayerConnected(i) && MiniGame[i] == 1) RetirarPL(i);
		}
		return 1;
	}
	if(strcmp(cmd,"/sairpl",true) == 0){
		RetirarPL(playerid);
		return 1;
	}

	if(strcmp(cmd,"/capturecars",true) == 0){
        if(!IsPlayerAdmin(playerid)){
			SendClientMessage(playerid, COLOR_GRAY, "Apenas admins podem Iniciar o Evento.");
			return 1;
		}
		if(CaptureCAberto == 1){
			SendClientMessage(playerid, COLOR_GRAY, "O evento já está iniciado.");
			return 1;
		}
		if(ValorDia != 0){
			SendClientMessage(playerid, COLOR_GRAY, "Você só pode iniciar o evento no Domingo.");
			return 1;
		}
		CaptureCAberto = 1;
		SendClientMessageToAll(COLOR_PINK," ");
		SendClientMessageToAll(COLOR_PINK,"|==================| [CTC] Capture The Cars |==================|");
		SendClientMessageToAll(COLOR_TRAFICANTE, "[CTC] As inscrições para o CTC foram abertas, para se inscrever");
		SendClientMessageToAll(COLOR_TRAFICANTE, "digite: /inscreverctc. Você tem 2 minutos.");
		SendClientMessageToAll(COLOR_PINK," ");
  		SetTimer("FimInscCTC",120000,0);
		return 1;
	}

	if(strcmp(cmd,"/inscreverctc",true) == 0){
		if(pStats[playerid][HistoriaFeita] == 0) {
   			SendClientMessage(playerid, COLOR_GRAY, "Termine a história para participar do CTC!");
   			return 1;
	 	}
		if(CaptureCAberto == 0){
			SendClientMessage(playerid, COLOR_GRAY, "O evento está fechado.");
			return 1;
		}
		if(MiniGame[playerid] == 2){
			SendClientMessage(playerid, COLOR_GRAY, "Você já está no Evento.");
			return 1;
		}
		if(CTCAberto == 1){
			SendClientMessage(playerid, COLOR_GRAY, "O Evento já começou.");
			return 1;
		}
		SetPlayerMiniGame(playerid, 2);
		SendClientMessage(playerid, COLOR_GREEN, "[CTC] Você está inscrito no evento. Você será teletransportado para o local.");
		return 1;
	}

//Sistema de Gangues
	if(strcmp(cmd, "/conquistarterritorio", true) == 0){
		if(!IsPlayerInGang(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma gangue!");
		if(!compare(gStats[GetGangID(pStats[playerid][GangueNome])][GangDono],PlayerName(playerid))) return SendClientMessage(playerid, COLOR_GRAY, "Você não comanda sua gangue!");
	    if(GetPlayerZone(playerid) == -1) return SendClientMessage(playerid, COLOR_GRAY, "Você deve estar em um território para poder usar esse comando!");
		if(pStats[playerid][ConquistouTerritorio] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você já conquistou um território vazio, agora domine um ou atinja 24 de nível com sua gangue!");
		if(compare(GangControlZone[GetPlayerZone(playerid)],"NONE")){
		    pStats[playerid][ConquistouTerritorio] = 1;
        	SetZoneForGang(GetPlayerZone(playerid),pStats[playerid][GangueNome]);
			SendClientMessage(playerid, COLOR_BLUE, "Território adquirido!");
			return 1;
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "Esse território já possui dono, VAZA DAQUI!");
			return 1;
		}
	}
	if(strcmp(cmd, "/atacarterritorio", true) == 0)
	{
	    if(!IsPlayerInGang(playerid))
		{
			SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma gangue!");
			AttackZone[playerid] = -1;
			CanAttack[playerid] = false;
			return 1;
		}
		if(pStats[playerid][Morrendo] == 1)
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você está morrendo... Não pode efetuar um ataque.");
			AttackZone[playerid] = -1;
			CanAttack[playerid] = false;
			return 1;
	    }
		if(AttackZone[playerid] == -1)
		{
			SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe pedido para atacar esse território.");
			AttackZone[playerid] = -1;
			CanAttack[playerid] = false;
			return 1;
		}
		if(GetPlayerZone(playerid) != AttackZone[playerid])
		{
	 		SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar no território para atacá-lo.");
	 		AttackZone[playerid] = -1;
			CanAttack[playerid] = false;
	 		return 1;
		}
		if(IsZoneAttacked(AttackZone[playerid]))
		{
	 		SendClientMessage(playerid, COLOR_GRAY, "Já há um ataque em andamento nesse território.");
	 		AttackZone[playerid] = -1;
			CanAttack[playerid] = false;
	 		return 1;
		}
		if(!CanAttack[playerid])
		{
			SendClientMessage(playerid, COLOR_GRAY, "Aguarde mais tempo para começar a atacar.");
			AttackZone[playerid] = -1;
			CanAttack[playerid] = false;
			return 1;
		}
		new enemy[128], count = 0;
		set(enemy, GangControlZone[AttackZone[playerid]]);
		for(new i = 0; i < MAX_SLOTS; i++)
		{
		    if(IsPlayerConnected(i) && Logado[i] && compare(pStats[i][GangueNome], enemy))
		    {
		        count++;
		    }
		}
		if(count > 2)
		{
		    set(ZoneAttacked[AttackZone[playerid]], pStats[playerid][GangueNome]);
		    AddGangLevel(pStats[playerid][GangueNome], 1);
			new str[128];
			format(str, sizeof str, "[INFO] ATENÇÃO GANGUE: o membro %s começou um ataque em %s contra a gangue %s, Rápido, ajudem-no...", PlayerName(playerid), zones[AttackZone[playerid]][zonename], GangControlZone[AttackZone[playerid]]);
			SendClientMessageGang(pStats[playerid][GangueNome], COLOR_WHITE, str);
			format(str, sizeof str, "[INFO] ATENÇÃO: um território da sua gangue está sendo atacado em %s pela gangue %s, Rápido vá defende-lo...", zones[AttackZone[playerid]][zonename], pStats[playerid][GangueNome]);
			SendClientMessageGang(GangControlZone[AttackZone[playerid]], COLOR_GRAY, str);
			SendClientMessage(playerid, COLOR_JUIZ, "Ataque iniciado... Mantenha-se no território...");
			CreateGangZonesForAll();
			SetTimerEx("GangCombat", 3000, false, "ddddd", AttackZone[playerid], GetGangID(pStats[playerid][GangueNome]), GetGangID(GangControlZone[AttackZone[playerid]]), 15, 70);
            AttackZone[playerid] = -1;
			CanAttack[playerid] = false;
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAY, "É necessário mais jogadores da outra gangue conectados para começar um ataque...");
			AttackZone[playerid] = -1;
			CanAttack[playerid] = false;
			return 1;
		}
	}
	
	if(strcmp(cmd, "/criargangue",true) == 0){
	    if(IsPlayerInGang(playerid) == 1){
			SendClientMessage(playerid, COLOR_GRAY, "Você já está numa gangue!");
			return 1;
		}
		if(pStats[playerid][Respeito] < 20){
			SendClientMessage(playerid, COLOR_GRAY, "Você não tem Respeito suficiente para criar uma gangue, mínimo: 20");
			return 1;
		}
		if(pStats[playerid][XL] < 10){
			SendClientMessage(playerid, COLOR_GRAY, "Você não tem Level suficiente para criar uma gangue, mínimo: 20");
			return 1;
		}
		if(LastGNG >= MAX_GANGUES){
			SendClientMessage(playerid, COLOR_GRAY, "O gamemode excedeu o limite de gangues...");
			return 1;
		}
		new gangname[128],gangcolor,gangfile[128],msg[128],bool:searched=false;
		gangname = strtok(cmdtext,idx);
		if(!strlen(gangname)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /criargangue [nome da gangue] [cor da gangue]");
			return 1;
		}
		for(new s = 0; s < strlen(gangname); s++){
			if(strfind(gangname," ",false,s) != -1 || strfind(gangname,"*",false,s) != -1 || strfind(gangname,"'",false,s) != -1 || strfind(gangname,"/",false,s) != -1 || strfind(gangname,"?",false,s) != -1 || strfind(gangname,">",false,s) != -1
			|| strfind(gangname,"<",false,s) != -1 || strfind(gangname,":",false,s) != -1 || strfind(gangname,"?",false,s) != -1 || strfind(gangname,"\"",false,s) != -1 || strfind(gangname,"|",false,s) != -1 || strfind(gangname,"!",false,s) != -1){
				SendClientMessage(playerid, COLOR_GRAY, "Sem caracteres especiais nem barra de espaço no nome da gangue (\" * < > \\ / ? | : ' !)");
				return 1;
			}
		}
		set(gangfile,GangFile(gangname));
		if(fexist(gangfile)) return SendClientMessage(playerid, COLOR_GRAY, "Essa gangue já existe!");
		gangcolor = strval(strtok(cmdtext,idx));
		if(gangcolor < 1 || gangcolor >= sizeof(GangColors)){
		    format(msg,sizeof(msg),"Cores de gang de 1 até %d",sizeof(GangColors) - 1);
			SendClientMessage(playerid, COLOR_GRAY, msg);
			return 1;
		}
  		for(new gng = 0; gng < LastGNG; gng++){
	        if(compare(Gangues[gng],"NONE")){
	            set(Gangues[gng],gangname);
	            searched=true;
	            break;
			}
   		}
		if(!searched){
		    if(LastGNG >= MAX_GANGUES){
				SendClientMessage(playerid, COLOR_GRAY, "O gamemode excedeu o limite de gangues...");
				return 1;
			}
		   	set(Gangues[LastGNG],gangname);
			LastGNG++;
		}
		new string[128];
		new File:gngfile = fopen(gangfile,io_write);
		fclose(gngfile);
		gStats[GetGangID(gangname)][GangMembros] = 0;
		gStats[GetGangID(gangname)][GangPontos] = 0;
		gStats[GetGangID(gangname)][GangLevel] = 0;
		gStats[GetGangID(gangname)][GangColor] = gangcolor;
		set(pStats[playerid][GangueNome],gangname);
		set(gStats[GetGangID(gangname)][GangDono],PlayerName(playerid));
		SendClientMessageToAll(COLOR_PINK,"New Paper's Life:");
	    SendClientMessageToAll(COLOR_WHITE, "[JORNAL] O Alarme de algum banco foi acionado, a polícia foi avisada.");
		format(string, sizeof(string), "[JORNAL] Há indícios que uma nova gangue chamada %s foi fundada na cidade", pStats[playerid][GangueNome]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	
	if(strcmp(cmd, "/dargangue",true) == 0){
		new tmp[128];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAY, "USO: /dargangue [id]");
			return 1;
		}
		new plid = strval(tmp);
		if(!IsPlayerConnected(plid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		    return 1;
		}
		if(!IsPlayerInGang(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma gangue.");
		    return 1;
		}
		if(strcmp(PlayerName(playerid), gStats[GetGangID(pStats[playerid][GangueNome])][GangDono]))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é o dono da gangue.");
		    return 1;
		}
		if(!IsPlayerInGang(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está em uma gangue.");
		    return 1;
		}
		if(!compare(pStats[playerid][GangueNome], pStats[plid][GangueNome]))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está na mesma gangue que você.");
		    return 1;
		}
		set(gStats[GetGangID(pStats[playerid][GangueNome])][GangDono], PlayerName(plid));
		for(new i = 0; i < gStats[GetGangID(pStats[playerid][GangueNome])][GangMembros]; i++)
		{
		    if(compare(MembersGang[GetGangID(pStats[playerid][GangueNome])][i], PlayerName(plid)))
		    {
		        set(MembersGang[GetGangID(pStats[playerid][GangueNome])][i], PlayerName(playerid));
		        break;
		    }
		}
		new string[128];
		format(string, sizeof string, "Posse da gangue entregue para %s", PlayerName(plid));
		SendClientMessage(playerid, COLOR_JUIZ, string);
		format(string, sizeof string, "%s lhe entregou a posse da gangue.", PlayerName(playerid));
		SendClientMessage(plid, COLOR_JUIZ, string);
		return 1;
	}
	if(strcmp(cmd, "/mudarnomegangue",true) == 0){
		new tmp[128];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAY, "USO: /mudarnomegangue [nome]");
			return 1;
		}
		for(new s = 0; s < strlen(tmp); s++){
			if(strfind(tmp," ",false,s) != -1 || strfind(tmp,"*",false,s) != -1 || strfind(tmp,"'",false,s) != -1 || strfind(tmp,"/",false,s) != -1 || strfind(tmp,"?",false,s) != -1 || strfind(tmp,">",false,s) != -1
			|| strfind(tmp,"<",false,s) != -1 || strfind(tmp,":",false,s) != -1 || strfind(tmp,"?",false,s) != -1 || strfind(tmp,"\"",false,s) != -1 || strfind(tmp,"|",false,s) != -1 || strfind(tmp,"!",false,s) != -1){
				SendClientMessage(playerid, COLOR_GRAY, "Sem caracteres especiais nem barra de espaço no nome da gangue (\" * < > \\ / ? | : ' !)");
				return 1;
			}
		}
		if(!IsPlayerInGang(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma gangue.");
		    return 1;
		}
		if(strcmp(PlayerName(playerid), gStats[GetGangID(pStats[playerid][GangueNome])][GangDono]))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é o dono da gangue.");
		    return 1;
		}
		if(GetGangID(tmp) != -1)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Já existe uma gangue com esse nome.");
		    return 1;
		}
		new gngid = GetGangID(pStats[playerid][GangueNome]);
		set(Gangues[gngid], tmp);
		for(new i = 0; i < gStats[gngid][GangMembros]; i++)
		{
		    if(!compare(MembersGang[gngid][i], "NONE"))
		    {
		        if(!IsStringAName(MembersGang[gngid][i]))
		        {
		            SetValue(PlayerFile(MembersGang[gngid][i]), "GangueNome", tmp);
		        }
		        else
		        {
		            new id = IDName(MembersGang[gngid][i]);
		            set(pStats[id][GangueNome], tmp);
		        }
		    }
		}
		set(pStats[playerid][GangueNome], tmp);
		new string[128];
		format(string, sizeof(string), "[INFO] O nome da sua gangue mudou para %s.", tmp);
		SendClientMessageGang(tmp, COLOR_JUIZ, string);
		return 1;
	}
	if(strcmp(cmd,"/setarrespeito",true) == 0 && IsPlayerAdmin(playerid)){
		new plid = strval(strtok(cmdtext,idx));
		if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado!");
		new respect = strval(strtok(cmdtext,idx));
		pStats[plid][Respeito] = respect;
		SendClientMessage(playerid, COLOR_JUIZ, "Feito");
		return 1;
	}
	if(strcmp(cmd, "/sacardinheiroarea",true) == 0)
	{
	    if(!IsPlayerInGang(playerid))
	    {
			SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma gangue!");
			return 1;
	    }
	    if(!IsPlayerInGangTerritory(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não está em um dos territórios de sua gangue.");
			return 1;
	    }
	    if(!compare(gStats[GetGangID(pStats[playerid][GangueNome])][GangDono],PlayerName(playerid)) && pStats[playerid][GangueCargo] != 5 && pStats[playerid][GangueCargo] != 6)
	    {
            SendClientMessage(playerid, COLOR_GRAY, "Você não é o Líder, Braço-Direito ou Torre da gangue!");
            return 1;
		}
		if(IsZoneAttacked(GetPlayerZone(playerid)))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não pode sacar dinheiro enquanto a área estiver sendo atacada!");
            return 1;
		}
		new tmp[128];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /sacardinheiroarea [quantidade]");
		    return 1;
		}
		new amount = strval(tmp);
		if(amount < 0)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não pode depositar com esse comando.");
		    return 1;
		}
		if(amount > ZoneCash[GetPlayerZone(playerid)])
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Esse território não possui essa quantidade de dinheiro.");
		    return 1;
		}
		ZoneCash[GetPlayerZone(playerid)] -= amount;
		AddPlayerMoney(playerid, amount, 2);
		new string[128];
		format(string, sizeof string, "Dinheiro sacado, total de dinheiro da área: $%d,00 dólares.", ZoneCash[GetPlayerZone(playerid)]);
		SendClientMessage(playerid, COLOR_JUIZ, string);
		return 1;
	}
	if(strcmp(cmd, "/depositardinheiroarea",true) == 0)
	{
	    if(!IsPlayerInGang(playerid))
	    {
			SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma gangue!");
			return 1;
	    }
	    if(!IsPlayerInGangTerritory(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não está em um dos territórios de sua gangue.");
			return 1;
	    }
	    new tmp[128];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /sacardinheiroarea [quantidade]");
		    return 1;
		}
		new amount = strval(tmp);
		if(amount < 0)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não pode sacar com esse comando.");
		    return 1;
		}
		if(amount > GetPlayerServerMoney(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem essa quantidade de dinheiro.");
		    return 1;
		}
		if(amount + ZoneCash[GetPlayerZone(playerid)] >= 10000)
		{
		    amount = 10000 - ZoneCash[GetPlayerZone(playerid)];
		    new string[128];
		    format(string, sizeof string, "Você depositou $%d,00 dólares e a área já completou seu limite de dinheiro.", amount);
		    SendClientMessage(playerid, COLOR_JUIZ, string);
		}
		else
		{
		    new string[128];
		    format(string, sizeof string, "Você depositou $%d,00 dólares, saldo atual da área: $%d,00 dólares", amount, amount + ZoneCash[GetPlayerZone(playerid)]);
		    SendClientMessage(playerid, COLOR_JUIZ, string);
		}
		AddPlayerMoney(playerid, -amount, -1);
		ZoneCash[GetPlayerZone(playerid)] += amount;
		return 1;
	}
	if(strcmp(cmd, "/extratoarea",true) == 0)
	{
	    if(!IsPlayerInGang(playerid))
	    {
			SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma gangue!");
			return 1;
	    }
	    if(!IsPlayerInGangTerritory(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não está em um dos territórios de sua gangue.");
			return 1;
	    }
	    new string[128];
	    format(string, sizeof string, "Extrato contido na área: $%d,00 dólares", ZoneCash[GetPlayerZone(playerid)]);
	    SendClientMessage(playerid, COLOR_JUIZ, string);
	    return 1;
	}
	if(strcmp(cmd,"/comprararmas",true) == 0){
	    if(!IsPlayerInGang(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma gangue.");
		    return 1;
		}
 	    if(pStats[playerid][GangueCargo] != 4 && !compare(gStats[GetGangID(pStats[playerid][GangueNome])][GangDono], PlayerName(playerid)))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não é Líder/Traficante da sua gangue.");
	        return 1;
	    }
   		SetPlayerCheckpoint(playerid, 2379.2722, -2016.0083, 14.8329, 3.0);
    	CheckpointStatus[playerid] = TRAFICANDO_ARMAS;
    	SendClientMessage(playerid, COLOR_JUIZ, "Siga o Checkpoint no radar para comprar as armas.");
    	SendClientMessage(playerid, COLOR_WHITE, "Lembrando: Você terá um desconto de $400,00 dólares para comprar as armas.");
    	SendClientMessage(playerid, COLOR_WHITE, "O preço visto no Menu será o original, sem o desconto, portanto subtraia 400 para saber o certo.");
     	SendClientMessage(playerid, COLOR_WHITE, "Colete: $100,00 dólares , Bomba Relógio: $1000,00 dólares , Rojão: $100,00 dólares , Flash: $300,00 dólares.");
		return 1;
 	}
 	if(strcmp(cmd,"/minhasarmas",true) == 0)
 	{
 	    if(!IsPlayerInGang(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma gangue.");
		    return 1;
		}
 	    if(pStats[playerid][GangueCargo] != 4 && !compare(gStats[GetGangID(pStats[playerid][GangueNome])][GangDono], PlayerName(playerid)))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não é Líder/Traficante da sua gangue.");
	        return 1;
	    }
 	    new str[128];
 	    for(new w = 0; w < 5; w++)
 	    {
 	        if(ArmasTrafico[playerid][w] == 0)
 	        {
 	            format(str, sizeof str, "Arma de slot %d: Nenhuma", w + 2);
 	            SendClientMessage(playerid, COLOR_WHITE, str);
 	        }
			else
			{
			    format(str, sizeof str, "Arma de slot %d: %s/%d", w + 2, RPGWeapons[ArmasTrafico[playerid][w]][Info_ArmaNome], RPGWeapons[ArmasTrafico[playerid][w]][Info_Municao] + 20);
				SendClientMessage(playerid, COLOR_WHITE, str);
			}
 	    }
 	    format(str, sizeof str, "Colete: %s", SimNao[ArmasTrafico[playerid][5]]);
 	    SendClientMessage(playerid, COLOR_WHITE, str);
 	    format(str, sizeof str, "Bomba-Relógio: %s , Flash", SimNao[ArmasTrafico[playerid][6]], ArmasTrafico[playerid][8]);
 	    SendClientMessage(playerid, COLOR_WHITE, str);
 	    format(str, sizeof str, "Rojões: %d", ArmasTrafico[playerid][7]);
 	    SendClientMessage(playerid, COLOR_WHITE, str);
 	    format(str, sizeof str, "Maconha: %d , Cocaína: %d , Heroína: %d", Maconha[playerid], Cocaina[playerid], Heroina[playerid]);
 	    SendClientMessage(playerid, COLOR_WHITE, str);
		return 1;
 	}
 	if(strcmp(cmd,"/dararma",true) == 0)
 	{
		if(!IsPlayerInGang(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma gangue.");
		    return 1;
		}
 	    if(pStats[playerid][GangueCargo] != 4 && !compare(gStats[GetGangID(pStats[playerid][GangueNome])][GangDono], PlayerName(playerid)))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não é Líder/Traficante da sua gangue.");
	        return 1;
	    }
 	    new tmp[128];
 	    tmp = strtok(cmdtext, idx);
 	    if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /dararma [id] [slot]");
 	    new plid = strval(tmp);
		if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		if(!IsPlayerInGang(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está em uma gangue.");
		if(strcmp(pStats[playerid][GangueNome], pStats[plid][GangueNome])) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na mesma gangue que esse jogador.");
 	    if(GetDistanceBetweenPlayers(playerid, plid) > 10) return SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto desse jogador.");
        tmp = strtok(cmdtext, idx);
 	    if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /dararma [id] [slot]");
 	    new slot = strval(tmp);
 	    if(slot < 2 || slot > 6) return SendClientMessage(playerid, COLOR_GRAY, "Slot de 2 à 6.");
 	    if(ArmasTrafico[playerid][slot - 2] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui uma arma desse slot.");
 	    GiveWeapon(plid, ArmasTrafico[playerid][slot - 2], RPGWeapons[ArmasTrafico[playerid][slot - 2]][Info_Municao] + 20);
		new string[128];
		format(string, sizeof string, "Você deu a arma %s/%d para o jogador %s.", RPGWeapons[ArmasTrafico[playerid][slot - 2]][Info_ArmaNome], RPGWeapons[ArmasTrafico[playerid][slot - 2]][Info_Municao] + 20, PlayerName(plid));
		SendClientMessage(playerid, COLOR_JUIZ, string);
		format(string, sizeof string, "O Traficante da sua gangue %s lhe deu uma arma %s/%d.", PlayerName(playerid), RPGWeapons[ArmasTrafico[playerid][slot - 2]][Info_ArmaNome], RPGWeapons[ArmasTrafico[playerid][slot - 2]][Info_Municao] + 20);
		SendClientMessage(plid, COLOR_JUIZ, string);
		ArmasTrafico[playerid][slot - 2] = 0;
		return 1;
	}
	if(strcmp(cmd,"/darcolete",true) == 0)
	{
	    if(!IsPlayerInGang(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma gangue.");
		    return 1;
		}
 	    if(pStats[playerid][GangueCargo] != 4 && !compare(gStats[GetGangID(pStats[playerid][GangueNome])][GangDono], PlayerName(playerid)))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não é Líder/Traficante da sua gangue.");
	        return 1;
	    }
 		new tmp[128];
 	    tmp = strtok(cmdtext, idx);
 	    if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /darcolete [id]");
 	    new plid = strval(tmp);
 	    if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		if(!IsPlayerInGang(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está em uma gangue.");
		if(strcmp(pStats[playerid][GangueNome], pStats[plid][GangueNome])) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na mesma gangue que esse jogador.");
 	    if(GetDistanceBetweenPlayers(playerid, plid) > 10) return SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto desse jogador.");
		if(ArmasTrafico[playerid][5] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui um colete.");
		new Float:armcheck;
		GetPlayerArmour(plid, armcheck);
		if(armcheck >= MAX_ARMOUR) return SendClientMessage(playerid, COLOR_GRAY, "Esse jogador já está com um colete.");
		SetPlayerArmourEx(plid, MAX_ARMOUR);
		new string[128];
		format(string, sizeof string, "O Traficante da sua gangue %s lhe deu um colete.", PlayerName(playerid));
		SendClientMessage(plid, COLOR_JUIZ, string);
		format(string, sizeof string, "Colete entregue para o jogador %s.", PlayerName(plid));
		SendClientMessage(playerid, COLOR_JUIZ, string);
		ArmasTrafico[playerid][5] = 0;
		return 1;
	}
	if(strcmp(cmd,"/darbombarelogio",true) == 0)
	{
	    if(!IsPlayerInGang(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma gangue.");
		    return 1;
		}
 	    if(pStats[playerid][GangueCargo] != 4 && !compare(gStats[GetGangID(pStats[playerid][GangueNome])][GangDono], PlayerName(playerid)))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não é Líder/Traficante da sua gangue.");
	        return 1;
	    }
	    new tmp[128];
 	    tmp = strtok(cmdtext, idx);
 	    if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /darbombarelogio [id]");
 	    new plid = strval(tmp);
		if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		if(!IsPlayerInGang(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está em uma gangue.");
		if(strcmp(pStats[playerid][GangueNome], pStats[plid][GangueNome])) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na mesma gangue que esse jogador.");
 	    if(GetDistanceBetweenPlayers(playerid, plid) > 10) return SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto desse jogador.");
        if(ArmasTrafico[playerid][6] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui uma bomba relógio.");
        if(pStats[plid][ClockBomb] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Esse jogador já possui uma bomba relógio.");
		pStats[plid][ClockBomb] = 1;
		new string[128];
		format(string, sizeof string, "O Traficante da sua gangue %s lhe deu uma bomba relógio.", PlayerName(playerid));
		SendClientMessage(plid, COLOR_JUIZ, string);
		format(string, sizeof string, "Bomba relógio entregue para o jogador %s.", PlayerName(plid));
		SendClientMessage(playerid, COLOR_JUIZ, string);
		ArmasTrafico[playerid][6] = 0;
		return 1;
	}
	if(strcmp(cmd,"/darrojao",true) == 0)
	{
	    if(!IsPlayerInGang(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma gangue.");
		    return 1;
		}
 	    if(pStats[playerid][GangueCargo] != 4 && !compare(gStats[GetGangID(pStats[playerid][GangueNome])][GangDono], PlayerName(playerid)))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não é Líder/Traficante da sua gangue.");
	        return 1;
	    }
	    new tmp[128];
 	    tmp = strtok(cmdtext, idx);
 	    if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /darrojao [id] [quantidade]");
 	    new plid = strval(tmp);
		if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		if(!IsPlayerInGang(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está em uma gangue.");
		if(strcmp(pStats[playerid][GangueNome], pStats[plid][GangueNome])) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na mesma gangue que esse jogador.");
 	    if(GetDistanceBetweenPlayers(playerid, plid) > 10) return SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto desse jogador.");
        tmp = strtok(cmdtext, idx);
 	    if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /darrojao [id] [quantidade]");
 	    new amount = strval(tmp);
		if(amount < 1 || amount > 3) return SendClientMessage(playerid, COLOR_GRAY, "Quantidade de 1 à 3.");
		if(ArmasTrafico[playerid][7] < amount) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui essa quantidade de rojões.");
		if(pStats[plid][Rocket] + amount > 3) amount = 3 - pStats[plid][Rocket];
		if(amount < 0) amount = 0;
		pStats[plid][Rocket] += amount;
		new string[128];
		format(string, sizeof string, "O Traficante da sua gangue %s lhe deu %d rojões.", PlayerName(playerid), amount);
		SendClientMessage(plid, COLOR_JUIZ, string);
		format(string, sizeof string, "%d rojões entregue(s) para o jogador %s.", amount, PlayerName(plid));
		SendClientMessage(playerid, COLOR_JUIZ, string);
		ArmasTrafico[playerid][7] -= amount;
		return 1;
	}
	if(strcmp(cmd,"/darflash",true) == 0)
	{
	    if(!IsPlayerInGang(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma gangue.");
		    return 1;
		}
 	    if(pStats[playerid][GangueCargo] != 4 && !compare(gStats[GetGangID(pStats[playerid][GangueNome])][GangDono], PlayerName(playerid)))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não é Líder/Traficante da sua gangue.");
	        return 1;
	    }
	    new tmp[128];
 	    tmp = strtok(cmdtext, idx);
 	    if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /darflash [id] [quantidade]");
 	    new plid = strval(tmp);
		if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		if(!IsPlayerInGang(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está em uma gangue.");
		if(strcmp(pStats[playerid][GangueNome], pStats[plid][GangueNome])) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na mesma gangue que esse jogador.");
 	    if(GetDistanceBetweenPlayers(playerid, plid) > 10) return SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto desse jogador.");
        tmp = strtok(cmdtext, idx);
 	    if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /darflash [id] [quantidade]");
 	    new amount = strval(tmp);
		if(amount < 1 || amount > 3) return SendClientMessage(playerid, COLOR_GRAY, "Quantidade de 1 à 3.");
		if(ArmasTrafico[playerid][8] < amount) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui essa quantidade de flash's.");
		if(pStats[plid][Flash] + amount > 3) amount = 3 - pStats[plid][Flash];
		if(amount < 0) amount = 0;
		pStats[plid][Flash] += amount;
		new string[128];
		format(string, sizeof string, "O Traficante da sua gangue %s lhe deu %d flash's.", PlayerName(playerid), amount);
		SendClientMessage(plid, COLOR_JUIZ, string);
		format(string, sizeof string, "%d flash's entregue(s) para o jogador %s.", amount, PlayerName(plid));
		SendClientMessage(playerid, COLOR_JUIZ, string);
		ArmasTrafico[playerid][8] -= amount;
		return 1;
	}
	if(strcmp(cmd,"/darmaconha",true) == 0)
	{
	    if(!IsPlayerInGang(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma gangue.");
		    return 1;
		}
 	    if(pStats[playerid][GangueCargo] != 4 && !compare(gStats[GetGangID(pStats[playerid][GangueNome])][GangDono], PlayerName(playerid)))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não é Líder/Traficante da sua gangue.");
	        return 1;
	    }
	    new tmp[128];
 	    tmp = strtok(cmdtext, idx);
 	    if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /darmaconha [id] [quantidade]");
 	    new plid = strval(tmp);
 	    if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		if(!IsPlayerInGang(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está em uma gangue.");
		if(strcmp(pStats[playerid][GangueNome], pStats[plid][GangueNome])) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na mesma gangue que esse jogador.");
 	    if(GetDistanceBetweenPlayers(playerid, plid) > 10) return SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto desse jogador.");
 	    tmp = strtok(cmdtext, idx);
 	    if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /darmaconha [id] [quantidade]");
 	    new amount = strval(tmp);
 	    if(amount < 1 || amount > 3) return SendClientMessage(playerid, COLOR_GRAY, "Quantidade de 1 à 3.");
 	    if(Maconha[playerid] < amount) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui essa quantidade.");
 	    if(Maconha[plid] + amount > 3) amount = 3 - Maconha[plid];
 	    if(amount < 0) amount = 0;
 	    Maconha[plid] += amount;
 	    Maconha[playerid] -= amount;
 	    new string[128];
 	    format(string, sizeof string, "O Traficante da sua gangue %s lhe deu %d maconha(s), use /fumar.", PlayerName(playerid), amount);
		SendClientMessage(plid, COLOR_JUIZ, string);
		format(string, sizeof string, "%d maconha(s) entregues para o jogador %s.", amount, PlayerName(plid));
		SendClientMessage(playerid, COLOR_JUIZ, string);
		return 1;
	}
	if(strcmp(cmd,"/darcocaina",true) == 0)
	{
	    if(!IsPlayerInGang(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma gangue.");
		    return 1;
		}
 	    if(pStats[playerid][GangueCargo] != 4 && !compare(gStats[GetGangID(pStats[playerid][GangueNome])][GangDono], PlayerName(playerid)))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não é Líder/Traficante da sua gangue.");
	        return 1;
	    }
	    new tmp[128];
 	    tmp = strtok(cmdtext, idx);
 	    if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /darcocaina [id] [quantidade]");
 	    new plid = strval(tmp);
 	    if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		if(!IsPlayerInGang(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está em uma gangue.");
		if(strcmp(pStats[playerid][GangueNome], pStats[plid][GangueNome])) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na mesma gangue que esse jogador.");
 	    if(GetDistanceBetweenPlayers(playerid, plid) > 10) return SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto desse jogador.");
 	    tmp = strtok(cmdtext, idx);
 	    if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /darcocaina [id] [quantidade]");
 	    new amount = strval(tmp);
 	    if(amount < 1 || amount > 3) return SendClientMessage(playerid, COLOR_GRAY, "Quantidade de 1 à 3.");
 	    if(Cocaina[playerid] < amount) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui essa quantidade.");
 	    if(Cocaina[plid] + amount > 3) amount = 3 - Cocaina[plid];
 	    if(amount < 0) amount = 0;
 	    Cocaina[plid] += amount;
 	    Cocaina[playerid] -= amount;
 	    new string[128];
 	    format(string, sizeof string, "O Traficante da sua gangue %s lhe deu %d cocaína(s), use /cheirar.", PlayerName(playerid), amount);
		SendClientMessage(plid, COLOR_JUIZ, string);
		format(string, sizeof string, "%d cocaína(s) entregues para o jogador %s.", amount, PlayerName(plid));
		SendClientMessage(playerid, COLOR_JUIZ, string);
		return 1;
	}
	if(strcmp(cmd,"/darheroina",true) == 0)
	{
	    if(!IsPlayerInGang(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma gangue.");
		    return 1;
		}
 	    if(pStats[playerid][GangueCargo] != 4 && !compare(gStats[GetGangID(pStats[playerid][GangueNome])][GangDono], PlayerName(playerid)))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não é Líder/Traficante da sua gangue.");
	        return 1;
	    }
	    new tmp[128];
 	    tmp = strtok(cmdtext, idx);
 	    if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /darheroina [id] [quantidade]");
 	    new plid = strval(tmp);
 	    if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		if(!IsPlayerInGang(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está em uma gangue.");
		if(strcmp(pStats[playerid][GangueNome], pStats[plid][GangueNome])) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na mesma gangue que esse jogador.");
 	    if(GetDistanceBetweenPlayers(playerid, plid) > 10) return SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto desse jogador.");
 	    tmp = strtok(cmdtext, idx);
 	    if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /darheroina [id] [quantidade]");
 	    new amount = strval(tmp);
 	    if(amount < 1 || amount > 3) return SendClientMessage(playerid, COLOR_GRAY, "Quantidade de 1 à 3.");
 	    if(Heroina[playerid] < amount) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui essa quantidade.");
 	    if(Heroina[plid] + amount > 3) amount = 3 - Heroina[plid];
 	    if(amount < 0) amount = 0;
 	    Heroina[plid] += amount;
 	    Heroina[playerid] -= amount;
 	    new string[128];
 	    format(string, sizeof string, "O Traficante da sua gangue %s lhe deu %d heroina(s), use /injetar.", PlayerName(playerid), amount);
		SendClientMessage(plid, COLOR_JUIZ, string);
		format(string, sizeof string, "%d heroina(s) entregues para o jogador %s.", amount, PlayerName(plid));
		SendClientMessage(playerid, COLOR_JUIZ, string);
		return 1;
	}
	if(strcmp(cmd,"/minhagangue",true) == 0){
		if(IsPlayerInGang(playerid)){
			new msg[128], col = GetGangColor(pStats[playerid][GangueNome]);
			format(msg,sizeof(msg),"Sua gangue: %s",pStats[playerid][GangueNome]);
			SendClientMessage(playerid, col, msg);
			format(msg,sizeof(msg),"Líder da gangue: %s",gStats[GetGangID(pStats[playerid][GangueNome])][GangDono]);
			SendClientMessage(playerid, col, msg);
			format(msg,sizeof(msg),"Pontuação da gangue: %d ponto(s)",gStats[GetGangID(pStats[playerid][GangueNome])][GangPontos]);
			SendClientMessage(playerid, col, msg);
			format(msg,sizeof(msg),"Nível da gangue: %d ponto(s)",gStats[GetGangID(pStats[playerid][GangueNome])][GangLevel]);
			SendClientMessage(playerid, col, msg);
			format(msg,sizeof(msg),"Respeito necessário para entrar na gangue: %d ponto(s)",Porcentagem(gStats[GetGangID(pStats[playerid][GangueNome])][GangPontos],10));
			SendClientMessage(playerid, col, msg);
            format(msg,sizeof(msg),"Total de membros da gangue: %d",QtGangMembers(pStats[playerid][GangueNome]));
			SendClientMessage(playerid, col, msg);
			return 1;
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma gangue!");
			return 1;
		}
	}
	if(strcmp(cmd,"/mudarcorgangue",true) == 0){
	    if(!IsPlayerInGang(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma gangue...");
        if(!compare(gStats[GetGangID(pStats[playerid][GangueNome])][GangDono],PlayerName(playerid)) && pStats[playerid][GangueCargo] != 5 && pStats[playerid][GangueCargo] != 6) return SendClientMessage(playerid, COLOR_GRAY, "Você não é o Líder, Braço-Direito ou Torre da gangue!");
		new gangcolor = strval(strtok(cmdtext,idx));
		if(gangcolor < 1 || gangcolor >= sizeof(GangColors)){
		    new msg[128];
		    format(msg,sizeof(msg),"Cores de gang de 1 até %d",sizeof(GangColors) - 1);
			SendClientMessage(playerid, COLOR_GRAY, msg);
			return 1;
		}
		gStats[GetGangID(pStats[playerid][GangueNome])][GangColor] = gangcolor;
		CreateGangZonesForAll();
		SendClientMessage(playerid, GangColors[gangcolor], "Cor da gangue alterada...");
		return 1;
	}
	if(strcmp(cmd,"/definirskin", true) == 0){
		new tmp[128],string[128];
		tmp = strtok(cmdtext,idx);
		new slot = strval(tmp),skin;
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /definirskin [slot: 1 até 5] [id da skin]");
		tmp = strtok(cmdtext,idx);
		skin = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /definirskin [slot: 1 até 5] [id da skin]");
		if(slot < 1 || slot > 5) return SendClientMessage(playerid, COLOR_GRAY, "Slot de 1 à 5");
        if(!compare(gStats[GetGangID(pStats[playerid][GangueNome])][GangDono],PlayerName(playerid)) && pStats[playerid][GangueCargo] != 5 && pStats[playerid][GangueCargo] != 6) return SendClientMessage(playerid, COLOR_GRAY, "Você não é o Líder, Braço-Direito ou Torre da gangue!");
		if(!IsValidSkin(skin)) return SendClientMessage(playerid, COLOR_GRAY, "Skin inválida!");
		gStats[GetGangID(pStats[playerid][GangueNome])][SkinSlot][slot - 1] = skin;
		format(string,128,"Você definiu a skin %d para o slot %d de sua gangue!",skin,slot);
		SendClientMessage(playerid, GetGangColor(pStats[playerid][GangueNome]), string);
		return 1;
	}
	if(strcmp(cmd,"/usarskingangue", true) == 0){
	    new slot = strval(strtok(cmdtext,idx))-1,str[128];
	    if(!IsPlayerInGangTerritory(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você deve estar no território de sua gangue para usar esse comando!");
	    if(slot < 0 || slot > 4) return SendClientMessage(playerid, COLOR_GRAY, "USO: /usarskingangue [slot: 1 à 5]");
	    format(str,sizeof(str),"SkinSlot%d",slot);
	    SendClientMessage(playerid, GetGangColor(pStats[playerid][GangueNome]), "Skin da sua gangue adquirida!");
	    SetPlayerSkin(playerid,gStats[GetGangID(pStats[playerid][GangueNome])][SkinSlot][slot]);
	    pStats[playerid][Skin] = gStats[GetGangID(pStats[playerid][GangueNome])][SkinSlot][slot];
		return 1;
	}
	if(strcmp(cmd,"/definircargo", true) == 0)
	{
	    if(!IsPlayerInGang(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma gangue.");
	        return 1;
	    }
	    if(!compare(gStats[GetGangID(pStats[playerid][GangueNome])][GangDono], PlayerName(playerid)) && pStats[playerid][GangueCargo] != 5 && pStats[playerid][GangueCargo] != 6)
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não é o Líder, Braço-Direito ou Torre da sua gangue.");
	        return 1;
	    }
	    new tmp[128];
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /definircargo [id] [cargo]");
	        SendClientMessage(playerid, COLOR_GRAY, "CARGOS DISPONÍVEIS: Recruta, Soldado, Motorista da Gang, Piloto, Fogueteiro, Sequestrador da Gangue, Assaltante da Gangue, Olheiro, Traficante, Torre, Braço-Direito");
	        return 1;
	    }
	    new plid = strval(tmp);
	    if(plid == playerid)
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não pode definir seu próprio cargo.");
	        return 1;
	    }
	    if(!IsPlayerConnected(plid))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
	        return 1;
	    }
	    if(!IsPlayerInGang(plid))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está em uma gangue.");
	        return 1;
	    }
	    if(!compare(pStats[plid][GangueNome], pStats[playerid][GangueNome]))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está na mesma gangue que você.");
	        return 1;
	    }
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /definircargo [id] [cargo]");
	        SendClientMessage(playerid, COLOR_GRAY, "CARGOS DISPONÍVEIS: Recruta, Soldado, Motorista da Gang, Piloto, Fogueteiro, Sequestrador da Gangue, Assaltante da Gangue, Olheiro, Traficante, Torre, Braço-Direito");
	        return 1;
	    }
		for(new p = 0; p < sizeof GangPosts; p++)
		{
			if(compare(tmp, GangPosts[p]))
			{
			    pStats[plid][GangueCargo] = p;
			    new str[128];
			    format(str, sizeof str, "Cargo de %s definido para %s.", PlayerName(plid), tmp);
			    SendClientMessage(playerid, COLOR_JUIZ, str);
			    format(str, sizeof str, "Seu cargo de gangue foi definido para %s pelo líder, digite /ganguefuncao para ver sua função na gangue agora.", tmp);
				SendClientMessage(plid, COLOR_JUIZ, str);
				return 1;
			}
		}
		SendClientMessage(playerid, COLOR_GRAY, "USO: /definircargo [id] [cargo]");
        SendClientMessage(playerid, COLOR_GRAY, "CARGOS DISPONÍVEIS: Recruta, Soldado, Motorista da Gang, Piloto, Fogueteiro, Sequestrador da Gangue, Assaltante da Gangue, Olheiro, Traficante, Torre, Braço-Direito");
     	return 1;
	}
	if(strcmp(cmd,"/chamarparagangue",true) == 0){
	    new tmp[128],plid,gangname[128];
		set(gangname, pStats[playerid][GangueNome]);
		if(gStats[GetGangID(pStats[playerid][GangueNome])][GangMembros] >= MAX_GANGUE_PLAYERS){
			SendClientMessage(playerid, COLOR_GRAY, "Limite de membros por gangue excedido pelo gamemode.");
            return 1;
		}
		tmp = strtok(cmdtext,idx);
	    if(!strlen(tmp)){
	    	SendClientMessage(playerid, COLOR_GRAY, "USO: /chamarparagangue [id]");
		    return 1;
		}
		plid = strval(tmp);
		if(!IsPlayerConnected(plid)){
            SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado!");
		    return 1;
		}
		if(IsPlayerInGang(plid)){
			SendClientMessage(playerid, COLOR_GRAY, "Esse jogador já está em uma gangue!");
			return 1;
		}
		new gangfile[128],msg[128];
		set(gangfile,GangFile(gangname));
		if(!fexist(gangfile)) return SendClientMessage(playerid, COLOR_GRAY, "Gangue inexistente!");
		if(!compare(gStats[GetGangID(pStats[playerid][GangueNome])][GangDono],PlayerName(playerid)) && pStats[playerid][GangueCargo] != 5 && pStats[playerid][GangueCargo] != 6) return SendClientMessage(playerid, COLOR_GRAY, "Você não é o Líder, Braço-Direito ou Torre da gangue!");
		if(gStats[GetGangID(pStats[playerid][GangueNome])][GangMembros] - (5 + (gStats[GetGangID(pStats[playerid][GangueNome])][GangPontos] / 6)) > 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não pode chamar mais membros para sua gangue, ganhe mais pontos para isso!");
		if(pStats[plid][Respeito] < Porcentagem(gStats[GetGangID(pStats[playerid][GangueNome])][GangPontos],10)){
			format(msg,sizeof(msg),"Esse jogador não tem Respeito o suficiente para entrar na sua gangue, mínimo: %d",Porcentagem(gStats[GetGangID(pStats[playerid][GangueNome])][GangPontos],25));
			SendClientMessage(playerid, COLOR_GRAY, msg);
			return 1;
		}
		format(GangInviteFile[plid],128,gangfile);
		format(GangInviteNome[plid],128,gangname);
		GangInviteID[plid] = playerid;
		GangInvite[plid] = 1;
		format(msg,sizeof(msg),"%s está lhe chamando para a gangue \"%s\"",PlayerName(playerid),gangname);
		SendClientMessage(plid, COLOR_LIXEIRO, msg);
		SendClientMessage(plid, COLOR_LIXEIRO, "Para aceitar digite /aceitar ou /recusar");
		SendClientMessage(playerid, COLOR_LIXEIRO, "Membro chamado, aguarde resposta!");
		ParaAceitar[plid] = ACEITAR_GANGUE;
		return 1;
	}

	if(strcmp(cmd,"/expulsardagangue",true) == 0){
		new tmp[128],plid,gangname[128],gangfile[128];
        set(gangname, pStats[playerid][GangueNome]);
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_GRAY, "USO: /expulsardagangue [id]");
			return 1;
		}
		plid = strval(tmp);
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
			return 1;
		}
		if(!IsPlayerInGang(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está em uma gangue!");
		    return 1;
		}
		set(gangfile,GangFile(gangname));
		if(!fexist(gangfile)){
		    SendClientMessage(playerid, COLOR_GRAY, "Gangue inexistente!");
		    return 1;
		}
		if(!compare(gStats[GetGangID(gangname)][GangDono],PlayerName(playerid)) && pStats[playerid][GangueCargo] != 5 && pStats[playerid][GangueCargo] != 6){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é o Líder, Braço-Direito ou Torre dessa gangue!");
		    return 1;
		}
		new bool:searched=false;
		for(new g = 0; g < gStats[GetGangID(gangname)][GangMembros]; g++){
			if(compare(MembersGang[GetGangID(gangname)][g],PlayerName(plid))){
			    set(MembersGang[GetGangID(gangname)][g],"NONE");
				set(pStats[plid][GangueNome], "NONE");
			    pStats[plid][GangueCargo] = 0;
			    searched=true;
			    break;
			}
		}
		if(!searched){
			SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está na sua gangue!");
			return 1;
		}
	}

	if(strcmp(cmd,"/sairgangue",true) == 0){
	    if(!IsPlayerInGang(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma gangue!");
		    return 1;
	    }
	    new gangname[128];
	    set(gangname, pStats[playerid][GangueNome]);
	    if(compare(gStats[GetGangID(gangname)][GangDono],PlayerName(playerid)))
		{
			SendClientMessage(playerid, COLOR_GRAY, "Você é o dono da sua gangue, portanto não pode sair!");
			return 1;
		}
		new str[200];
		format(str, sizeof str, "%s desistiu de participar da gangue e saiu dela...", PlayerName(playerid));
		SendClientMessageGang(pStats[playerid][GangueNome], COLOR_GRAY, str);
		for(new g = 0; g < gStats[GetGangID(gangname)][GangMembros]; g++)
		{
			if(compare(MembersGang[GetGangID(gangname)][g], PlayerName(playerid)))
			{
			    set(MembersGang[GetGangID(gangname)][g], "NONE");
			}
		}
		set(pStats[playerid][GangueNome], "NONE");
		pStats[playerid][GangueCargo] = 0;
		SendClientMessage(playerid, COLOR_WHITE, "Você saiu da sua gangue...");
		return 1;
	}

	if(strcmp(cmd,"/ganguecores",true) == 0)
	{
	    new gangcolor = strval(strtok(cmdtext,idx));
	    if(gangcolor < 1 || gangcolor > sizeof(GangColors) / 8)
	    {
	        new str[128];
	        format(str, sizeof str, "USO: /ganguecores [1-%d]", sizeof(GangColors) / 8);
	        SendClientMessage(playerid, COLOR_GRAY, str);
	        return 1;
	    }
	    SendClientMessage(playerid, COLOR_LIGHT_RED, "Cores de gangues do Virtual Life RPG:");
	    for(new c = ((gangcolor - 1) * 8) + 1; c < (((gangcolor - 1) * 8) + 8) + 1; c++)
	    {
	        if(c >= sizeof(GangColors)) return 1;
	        new str[128];
	        format(str, sizeof str, "Essa é a cor de ID %d.", c);
	        SendClientMessage(playerid, GangColors[c], str);
	    }
	    if(gangcolor < sizeof(GangColors) / 8)
	    {
	        new str[128];
	        format(str, sizeof str, "Para ver mais cores de gangues digite /ganguecores %d", gangcolor + 1);
	        SendClientMessage(playerid, COLOR_WHITE, str);
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "Essas são as cores de gangues do Virtual Life RPG.");
	    }
	    return 1;
	}
	if(strcmp(cmd,"/removergangue",true) == 0){
		new gangname[128], gangfile[128];
		set(gangname, pStats[playerid][GangueNome]);
		set(gangfile, GangFile(gangname));
		if(!fexist(gangfile)) return SendClientMessage(playerid, COLOR_GRAY, "Essa gangue não existe!");
		if(!compare(gStats[GetGangID(gangname)][GangDono],PlayerName(playerid))){
			SendClientMessage(playerid, COLOR_GRAY, "Você não comanda essa gangue!");
			return 1;
		}
		else{
		    new str[128];
			for(new z = 0; z < sizeof(zones); z++){
				if(compare(GangControlZone[z],pStats[playerid][GangueNome])){
				    set(GangControlZone[z],"NONE");
				    CreateGangZonesForAll();
				}
			}
			for(new g = 0; g < gStats[GetGangID(gangname)][GangMembros]; g++){
				if(!compare(MembersGang[GetGangID(gangname)][g],"NONE")){
				    if(!IsStringAName(MembersGang[GetGangID(gangname)][g]))
						SetValue(PlayerFile(MembersGang[GetGangID(gangname)][g]),"GangueNome","NONE");
					else
					    set(pStats[IDName(MembersGang[GetGangID(gangname)][g])][GangueNome], "NONE");
				}
			}
			set(Gangues[GetGangID(gangname)],"NONE");
			set(pStats[playerid][GangueNome],"NONE");
			pStats[playerid][ConquistouTerritorio] = 0;
			fremove(gangfile);
			format(str,sizeof(str),"[NOTICIAS] %s desiste de ser um líder gangster e resolve acabar com a gangue %s",PlayerName(playerid),gangname);
			SendClientMessageToAll(COLOR_WHITE,str);
			SendClientMessageToAll(COLOR_WHITE,"[NOTICIAS] \"Esse é um grande passo para a civilização!\" afirma o Delegado.");
			return 1;
		}
	}
	

	if(strcmp(cmd,"/realizarassalto",true) == 0){
	    if(!IsPlayerInGang(playerid)){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não pertence a nenhuma gang não poderá fazer assaltos.");
	        return 1;
		}
		if(pStats[playerid][GangueCargo] > 3){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não pode realizar assaltos em quadrilhas, apenas: Traficante, Torre, Braço-Direito e Líder podem iniciar.");
	        return 1;
		}
		new string[128];
		new gangueiros = 0;
		for(new i = 0; i < MAX_SLOTS; i++){
		    if(GetDistanceBetweenPlayers(playerid,i) < 80){
		        if(compare(pStats[playerid][GangueNome], pStats[i][GangueNome])){
		            gangueiros++;
				}
			}
		}
		if(gangueiros < 3){
	        SendClientMessage(playerid, COLOR_GRAY, "Para realizar um assalto é necessário no mínimo 3 Gangsters.");
	        return 1;
		}
		if(IniciandoAssalto[playerid] != 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Você já está realizando um assalto.");
	        return 1;
		}
		if(CalmaAssalto[playerid] != 0){
	        SendClientMessage(playerid, COLOR_GRAY, "O Tempo para assaltar não passou tenha calma!");
	        return 1;
		}
		for(new i = 0; i < MAX_SLOTS; i++){
		    if(GetDistanceBetweenPlayers(playerid,i) < 80){
		        if(compare(pStats[playerid][GangueNome], pStats[i][GangueNome])){
					new tmp[128];
					tmp = strtok(cmdtext,idx);
					if(compare(tmp, "banco")){
						if(PlayerArea[playerid] == AreaBanco){
  						    IniciandoAssalto[playerid] = 1;
						    IniciandoAssalto[i] = 1;
						    GameTextForPlayer(playerid, "~r~ Assaltando...", 5000,0);
						    GameTextForPlayer(i, "~r~ Assaltando...", 5000,0);
							SendClientMessage(playerid, COLOR_ASSALTANTE, "Assalto em andamento...");
							SendClientMessage(playerid, COLOR_ASSALTANTE, "Assalto em andanmento, fiquem próximo para que o assalto não seja cancelado, mínimo 2 gangsters.");
							SetTimerEx("AssaltoGang",5000,0,"dd",playerid, IniciandoAssalto[playerid]);
						}
					}
					else if(compare(tmp, "pizzaria")){
						if(PlayerArea[playerid] == AreaPizzaria){
  						    IniciandoAssalto[playerid] = 2;
						    IniciandoAssalto[i] = 2;
						    GameTextForPlayer(playerid, "~r~ Assaltando...", 5000,0);
						    GameTextForPlayer(i, "~r~ Assaltando...", 5000,0);
							SendClientMessage(playerid, COLOR_ASSALTANTE, "Assalto em andamento...");
							SendClientMessage(playerid, COLOR_ASSALTANTE, "Assalto em andanmento, fiquem próximo para que o assalto não seja cancelado, mínimo 2 gangsters.");
							SetTimerEx("AssaltoGang",5000,0,"dd",playerid, IniciandoAssalto[playerid]);
						}
					}
					else if(compare(tmp, "posto")){
						if(PlayerArea[playerid] == AreaPosto){
  						    IniciandoAssalto[playerid] = 3;
						    IniciandoAssalto[i] = 3;
						    GameTextForPlayer(playerid, "~r~ Assaltando...", 5000,0);
						    GameTextForPlayer(i, "~r~ Assaltando...", 5000,0);
							SendClientMessage(playerid, COLOR_ASSALTANTE, "Assalto em andamento...");
							SendClientMessage(playerid, COLOR_ASSALTANTE, "Assalto em andanmento, fiquem próximo para que o assalto não seja cancelado, mínimo 2 gangsters.");
							SetTimerEx("AssaltoGang",5000,0,"dd",playerid, IniciandoAssalto[playerid]);
						}
					}
					format(string, sizeof string, "Para ganhar mais dinheiro no %s, fique o maior tempo possível.", tmp);
					SendClientMessage(playerid, COLOR_ASSALTANTE, string);
				}
			}
		}
		return 1;
	}

	if(strcmp(cmd,"/comprarpropriedade",true) == 0)
	{
	    new prop = strval(strtok(cmdtext,idx));
	    if(prop < 1 || prop >= sizeof Propriedades)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /comprarpropriedade [propriedade] [valor]");
		    SendClientMessage(playerid, COLOR_GRAY, "Verifique se a propriedade é válida: /propriedades");
		    return 1;
		}
		new value = strval(strtok(cmdtext,idx));
		if(value <= 0)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /comprarpropriedade [propriedade] [valor]");
		    SendClientMessage(playerid, COLOR_GRAY, "Valor acima de 0.");
		    return 1;
		}
		if(GetPlayerServerMoney(playerid) < value)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Tenha o dinheiro à oferecer nas mãos...");
		    return 1;
		}
		if(compare(propStats[prop][Dono1], "NONE"))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Essa propriedade não tem dono... Compre-a na Corretora de Propriedades.");
		    return 1;
		}
		new owner = IDName(propStats[prop][Dono1]);
		if(owner == -1)
		{
		    new string[128];
		    SendClientMessage(playerid, COLOR_GRAY, "O dono dessa propriedade não está conectado.");
		    format(string, sizeof string, "Dono da propriedade: %s", propStats[prop][Dono1]);
		    SendClientMessage(playerid, COLOR_GRAY, string);
		    return 1;
		}
		new string[128];
		format(string, sizeof string, "Proposta oferecida para comprar a propriedade \"%s\".", Propriedades[prop][PropName]);
		SendClientMessage(playerid, COLOR_BLUE, string);
		format(string, sizeof string, "%s está lhe oferecendo $%d,00 pela sua propriedade \"%s\".", PlayerName(playerid), value, Propriedades[prop][PropName]);
		SendClientMessage(owner, COLOR_BLUE, string);
		SendClientMessage(owner, COLOR_BLUE, "Digite /aceitar para abrir mão da propriedade, caso contrário, /recusar");
        ParaAceitar[owner] = ACEITAR_NEGOCIO;
		Negociador[owner] = playerid;
		PropriedadeEscolhida[playerid] = prop;
		ValorOferecido[owner] = value;
		NegocianteName[owner] = PlayerName(playerid);
		return 1;
	}
	if(strcmp(cmd,"/venderpropriedade",true) == 0)
	{
	    new prop = strval(strtok(cmdtext,idx));
	    if(prop < 1 || prop >= sizeof Propriedades)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /venderpropriedade [propriedade]");
		    SendClientMessage(playerid, COLOR_GRAY, "Verifique se a propriedade é válida: /propriedades");
		    return 1;
		}
		if(!compare(propStats[prop][Dono1], PlayerName(playerid)))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é o dono da propriedade.");
		    return 1;
		}
		SellProperty(prop);
		AddPlayerMoney(playerid, Propriedades[prop][PropValue] / 2, 4);
		new string[128];
		format(string, sizeof string, "[NOTICIAS] %s decidiu vender sua propriedade \"%s\" para o servidor.", PlayerName(playerid), Propriedades[prop][PropName]);
		SendClientMessageToAll(COLOR_WHITE, string);
		SendClientMessageToAll(COLOR_WHITE, "Todos funcionários que ali trabalhavam agora foram demitidos...");
		format(string, sizeof string, "Propriedade vendida, você recebeu $%d,00 dólares.", Propriedades[prop][PropValue] / 2);
		SendClientMessage(playerid, COLOR_BLUE, string);
		return 1;
	}
	if(strcmp(cmd,"/investir",true) == 0)
	{
	    new prop = strval(strtok(cmdtext,idx));
	    if(prop < 1 || prop >= sizeof Propriedades)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /investir [propriedade] [valor]");
		    SendClientMessage(playerid, COLOR_GRAY, "Verifique se a propriedade é válida: /propriedades");
		    return 1;
		}
		if(!compare(propStats[prop][Dono1], PlayerName(playerid)) && !IsPropertyPartner(playerid, prop))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é o dono nem sócio da propriedade.");
		    return 1;
		}
		new value = strval(strtok(cmdtext,idx));
		if(value <= 0)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /investir [propriedade] [valor]");
		    SendClientMessage(playerid, COLOR_GRAY, "Valor acima de 0.");
		    return 1;
		}
		if(GetPlayerServerMoney(playerid) < value)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Tenha o valor de investimento nas mãos.");
		    return 1;
		}
		AcrescentarInvestimento(prop, value);
		AddPlayerMoney(playerid, -value, -1);
		SendClientMessage(playerid, COLOR_BLUE, "Dinheiro investido em sua propriedade... Boa Sorte!");
		return 1;
	}
	if(strcmp(cmd,"/funcionarios",true) == 0)
	{
	    new prop = strval(strtok(cmdtext,idx));
	    if(prop < 1 || prop >= sizeof Propriedades)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /funcionarios [propriedade]");
		    SendClientMessage(playerid, COLOR_GRAY, "Verifique se a propriedade é válida: /propriedades");
		    return 1;
		}
		if(!compare(propStats[prop][Dono1], PlayerName(playerid)) && !IsPropertyPartner(playerid, prop))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Somente Donos e Sócios tem acesso à essas informações.");
		    return 1;
		}
		new string[128];
		format(string, sizeof string, "|=============== [ Funcionários da propriedade \"%s\" ] ===============|", Propriedades[prop][PropName]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		new count = 0;
		for(new i = 0; i < MAX_SLOTS; i++)
		{
			if(IsPropertyPartner(i, prop))
			{
			    format(string, sizeof string, "ID: %d - Nome: %s - Ocupação: Sócio - Salário: 10 porcento do rendimento da propriedade", i, PlayerName(i));
				SendClientMessage(playerid, COLOR_BLUE, string);
				count++;
			}
			else if(pStats[i][Propriedade] == prop)
			{
			    format(string, sizeof string, "ID: %d - Nome: %s - Ocupação: Empregado - Salário: $%d,00 dólares", i, PlayerName(i), Profissoes[pStats[i][Prof]][ProfPay] + pStats[i][AumentoPropriedade]);
                SendClientMessage(playerid, COLOR_BLUE, string);
                count++;
			}
		}
		if(count > 0)
		{
		    format(string, sizeof string, "Total de funcionários conectados: %d.", count);
		    SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_BLUE, "Nenhum funcionário conectado.");
		}
		return 1;
	}
	if(strcmp(cmd,"/contratar",true) == 0)
	{
	    new plid = strval(strtok(cmdtext,idx));
	    if(!IsPlayerConnected(plid))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
	        return 1;
	    }
	    new prop = strval(strtok(cmdtext,idx));
		if(prop < 1 || prop >= sizeof Propriedades)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /contratar [id] [propriedade]");
		    SendClientMessage(playerid, COLOR_GRAY, "Verifique se a propriedade é válida: /propriedades");
		    return 1;
		}
		if(pStats[plid][Propriedade] != 0)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Ele já trabalha em uma propriedade.");
		    return 1;
		}
		if(!compare(PlayerName(playerid), propStats[prop][Dono1]) && !IsPropertyPartner(playerid, prop))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é dono nem sócio dessa propriedade.");
		    return 1;
		}
		new bool:p = false;
		for(new j = 0; j < 3; j++)
		{
		    if(ProfissoesContrato[prop][j] == pStats[plid][Prof])
		    {
				p = true;
				break;
		    }
		}
		if(!p)
		{
			SendClientMessage(playerid, COLOR_GRAY, "Essa propriedade não admite funcionários desse ramo.");
			return 1;
		}
		new string[128];
		SendClientMessage(playerid, COLOR_BLUE, "Proposta de trabalho enviada, aguarde a resposta.");
		format(string, sizeof string, "%s está lhe oferecendo um contrato para trabalhar na propriedade \"%s\"", PlayerName(playerid), Propriedades[prop][PropName]);
		SendClientMessage(plid, COLOR_BLUE, string);
		SendClientMessage(plid, COLOR_BLUE, "Para aceitar o contrato digite /aceitar, caso contrário, /recusar");
		PropriedadeContrato[plid] = prop;
		ParaAceitar[plid] = ACEITAR_CONTRATO;
		TimerCancel[plid] = SetTimerEx("Cancelar", 60000, 0, "d", plid);
		return 1;
	}
	if(strcmp(cmd,"/demitir",true) == 0)
	{
	    new plid = strval(strtok(cmdtext,idx));
	    if(!IsPlayerConnected(plid))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
	        return 1;
	    }
	    new prop = strval(strtok(cmdtext,idx));
		if(prop < 1 || prop >= sizeof Propriedades)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /demitir [id] [propriedade]");
		    SendClientMessage(playerid, COLOR_GRAY, "Verifique se a propriedade é válida: /propriedades");
		    return 1;
		}
		if(pStats[plid][Propriedade] != prop)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Ele não trabalha nessa propriedade...");
		    return 1;
		}
		if(!compare(PlayerName(playerid), propStats[prop][Dono1]) && !IsPropertyPartner(playerid, prop))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é dono nem sócio dessa propriedade.");
		    return 1;
		}
		pStats[plid][Propriedade] = 0;
		pStats[plid][AumentoPropriedade] = 0;
		SendClientMessage(playerid, COLOR_BLUE, "Jogador demitido...");
		new string[128];
		format(string, sizeof string, "Você foi demitido da propriedade \"%s\" , lamento :(", Propriedades[prop][PropName]);
		SendClientMessage(plid, COLOR_BLUE, string);
		return 1;
	}
	if(strcmp(cmd,"/setarsalario",true) == 0)
	{
	    new plid = strval(strtok(cmdtext,idx));
	    if(!IsPlayerConnected(plid))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
	        return 1;
	    }
	    new salario = strval(strtok(cmdtext,idx));
	    if(salario < Profissoes[pStats[plid][Prof]][ProfPay])
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /setarsalario [id] [salario]");
	        SendClientMessage(playerid, COLOR_GRAY, "Salário acima do que o jogador já recebe pela profissão.");
	        return 1;
	    }
	    new prop = pStats[plid][Propriedade];
	    if(prop == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não trabalha em nenhuma propriedade.");
	        return 1;
	    }
	    if(!compare(PlayerName(playerid), propStats[prop][Dono1]) && !IsPropertyPartner(playerid, prop))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é dono nem sócio da propriedade em que ele trabalha.");
		    return 1;
		}
		pStats[plid][AumentoPropriedade] = salario - Profissoes[pStats[plid][Prof]][ProfPay];
		new string[128];
		SendClientMessage(playerid, COLOR_BLUE, "Salário setado, informações sobre o salário desse jogador:");
		format(string, sizeof string, "Salário da profissão: $%d,00 dólares - Salário da Propriedade: $%d,00 dólares - Total: $%d,00 dólares.", Profissoes[pStats[plid][Prof]][ProfPay], pStats[plid][AumentoPropriedade], salario);
		SendClientMessage(playerid, COLOR_BLUE, string);
		format(string, sizeof string, "%s setou o seu salário da propriedade para $%d,00 dólares", PlayerName(playerid), pStats[plid][AumentoPropriedade]);
		SendClientMessage(plid, COLOR_BLUE, string);
		format(string, sizeof string, "Salário Total: $%d,00 dólares.", salario);
		SendClientMessage(plid, COLOR_BLUE, string);
		return 1;
	}
	if(strcmp(cmd,"/pedirdemissao",true) == 0)
	{
	    if(pStats[playerid][Propriedade] == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não trabalha para uma propriedade.");
	        return 1;
	    }
	    SendClientMessage(playerid, COLOR_BLUE, "OK... Você pediu demissão, Boa Sorte daqui pra frente...");
	    new id = IDName(propStats[pStats[playerid][Propriedade]][Dono1]);
	    if(id != -1)
	    {
	        SendClientMessage(id, COLOR_BLUE, "%s pediu demissão da propriedade, acho que ele não estava satisfeito com o salário...");
	    }
	    pStats[playerid][Propriedade] = 0;
	    pStats[playerid][AumentoPropriedade] = 0;
	    return 1;
	}
	if(strcmp(cmd,"/nomearsocio",true) == 0)
	{
	    new plid = strval(strtok(cmdtext,idx));
	    if(!IsPlayerConnected(plid))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
	        return 1;
	    }
	    new prop = strval(strtok(cmdtext,idx));
		if(prop < 1 || prop >= sizeof Propriedades)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /nomearsocio [id] [propriedade]");
		    SendClientMessage(playerid, COLOR_GRAY, "Verifique se a propriedade é válida: /propriedades");
		    return 1;
		}
		if(!compare(propStats[prop][Dono1], PlayerName(playerid)))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é o dono da propriedade.");
		    return 1;
		}
		if(IsPropertyPartner(plid, prop))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador já é sócio dessa propriedade.");
		    return 1;
		}
		SendClientMessage(playerid, COLOR_BLUE, "Proposta de nomeação de sócio enviada, aguarde resposta...");
		new string[128];
		format(string, sizeof string, "%s está lhe oferecendo para ser sócio da propriedade \"%s\"", PlayerName(playerid), Propriedades[prop][PropName]);
		SendClientMessage(plid, COLOR_BLUE, string);
		SendClientMessage(plid, COLOR_BLUE, "Para aceitar a proposta digite /aceitar, caso contrário, /recusar");
        ParaAceitar[plid] = ACEITAR_SOCIO;
		PropriedadeNomeacao[plid] = prop;
		JogadorNomeacao[plid] = playerid;
		TimerCancel[plid] = SetTimerEx("Cancelar", 60000, 0, "d", plid);
		return 1;
	}
	if(strcmp(cmd,"/desnomearsocio",true) == 0)
	{
	    new plid = strval(strtok(cmdtext,idx));
	    if(!IsPlayerConnected(plid))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
	        return 1;
	    }
	    new prop = strval(strtok(cmdtext,idx));
		if(prop < 1 || prop >= sizeof Propriedades)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /desnomearsocio [id] [propriedade]");
		    SendClientMessage(playerid, COLOR_GRAY, "Verifique se a propriedade é válida: /propriedades");
		    return 1;
		}
		if(!compare(propStats[prop][Dono1], PlayerName(playerid)))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é o dono da propriedade.");
		    return 1;
		}
		if(!IsPropertyPartner(plid, prop))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não é sócio dessa propriedade.");
		    return 1;
		}
		RemovePropertyPartner(plid, prop);
		SendClientMessage(playerid, COLOR_BLUE, "Jogador desnomeado sócio da propriedade...");
		new string[128];
		format(string, sizeof string, "Você foi desnomeado sócio da propriedade \"%s\" , lamento :(", Propriedades[prop][PropName]);
		SendClientMessage(plid, COLOR_BLUE, string);
		return 1;
	}
	if(strcmp(cmd,"/pedirdesnomeacao",true) == 0)
	{
	    new prop = strval(strtok(cmdtext,idx));
		if(prop < 1 || prop >= sizeof Propriedades)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /pedirdesnomeacao [propriedade]");
		    SendClientMessage(playerid, COLOR_GRAY, "Verifique se a propriedade é válida: /propriedades");
		    return 1;
		}
		if(!IsPropertyPartner(playerid, prop))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é sócio dessa propriedade.");
		    return 1;
		}
		RemovePropertyPartner(playerid, prop);
		SendClientMessage(playerid, COLOR_BLUE, "Pedido de desnomeação atendido, olha lá hein?! Não vai poder mais voltar atrás.");
        new id = IDName(propStats[prop][Dono1]);
	    if(id != -1)
	    {
	        SendClientMessage(id, COLOR_BLUE, "%s pediu desnomeação de sócio da propriedade...");
	    }
		return 1;
	}
	if(strcmp(cmd, "/bankstats", true) == 0) {
	    if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão!");
		new plid = strval(strtok(cmdtext,idx));
		new string[128];
		if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador desconectado.");
		format(string,sizeof(string),"Informações bancárias de %s",PlayerName(plid));
		SendClientMessage(playerid, COLOR_JUIZ, string);
		format(string,sizeof(string),"Saldo: $%d,00 dólares",pStats[plid][Banco]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string,sizeof(string),"Aplicação: $%d,00 dólares",pStats[plid][PInvestimento]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	if(strcmp(cmd, "/status", true) == 0) {
	    new tmp[128];
	    tmp = strtok(cmdtext,idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /status [pessoal, profissional, documentacao, habitual, pertences]");
			return 1;
	    }
		new string[256];
		if(strcmp(tmp, "pessoal", true) == 0)
		{
		    SendClientMessage(playerid, COLOR_LIGHT_RED, "Seu status Pessoal:");
            format(string,sizeof(string),"Data de nascimento: %s - Idade: %d anos", ApplyZeroString(pStats[playerid][Data],'/'), GetPlayerAge(playerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string,sizeof(string),"Skin atual: %d - Respeito: %d - Multa Pública: $%d", pStats[playerid][Skin], pStats[playerid][Respeito], pStats[playerid][MultaPublica]);
			SendClientMessage(playerid, COLOR_WHITE, string);
            format(string,sizeof(string),"Data de Registro: %s - Último acesso: %s", pStats[playerid][DataRegistro], pStats[playerid][DataUltima]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			if(pStats[playerid][DiasConectado] == 0){
            	format(string,sizeof(string),"Tempo de Jogo: Nenhum Dia - Horas: %d - Minutos: %d", pStats[playerid][HorasConectado], pStats[playerid][MinutosConectado]);
			} else if(pStats[playerid][DiasConectado] > 0 && pStats[playerid][DiasConectado] < 2 ) {
            	format(string,sizeof(string),"Tempo de Jogo: 1 Dia - Horas: %d - Minutos: %d", pStats[playerid][HorasConectado], pStats[playerid][MinutosConectado]);
			} else {
            	format(string,sizeof(string),"Tempo de Jogo: Dias: %d - Horas: %d -  Minutos: %d", pStats[playerid][DiasConectado], pStats[playerid][HorasConectado], pStats[playerid][MinutosConectado]);
			}
			SendClientMessage(playerid, COLOR_WHITE, string);
			return 1;
		}
		else if(strcmp(tmp, "profissional", true) == 0)
		{
		    SendClientMessage(playerid, COLOR_LIGHT_RED, "Seu status Profissional:");
            format(string, sizeof(string), "Profissão: %s - Xpoints: %d - Level: %d - Xpoints para conseguir um Level: %d", Profissoes[pStats[playerid][Prof]][ProfName], pStats[playerid][Xpoints], pStats[playerid][XL], Profissoes[pStats[playerid][Prof]][ProfXpoint]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "Salário da profissão: $%d,00 dólares - Skin de trabalho: %d - Pontuação em Culinária: %d", Profissoes[pStats[playerid][Prof]][ProfPay], Profissoes[pStats[playerid][Prof]][ProfSkin], pStats[playerid][Culinaria]);
			SendClientMessage(playerid, COLOR_WHITE, string);
 			new own_props[256], own_amount, soc_props[256], soc_amount, is_official = 0;
 			if(pStats[playerid][Propriedade] != 0)
		 	{
		  		is_official = 1;
			}
			for(new p = 1; p < sizeof Propriedades; p++)
			{
			    if(compare(PlayerName(playerid), propStats[p][Dono1]))
			    {
			        strcat(own_props, Propriedades[p][PropName]);
			        strcat(own_props, " ");
			        own_amount += 1;
			    }
			    if(IsPropertyPartner(playerid, p))
			    {
			        strcat(soc_props, Propriedades[p][PropName]);
			        strcat(soc_props, " ");
			        soc_amount += 1;
			    }
			}
			format(string, sizeof(string), "Funcionário de propriedade: %s - Salário da propriedade: $%d,00 dólares.", SimNao[is_official], pStats[playerid][AumentoPropriedade]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "Propriedades em seu nome: %s [%d]", own_props, own_amount);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "Propriedades em que é sócio: %s [%d]", soc_props, soc_amount);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return 1;
		}
		else if(strcmp(tmp, "documentacao", true) == 0)
		{
		    SendClientMessage(playerid, COLOR_LIGHT_RED, "Sua Documentação:");
            if(pStats[playerid][Porte] == 0){
		    	format(string,sizeof(string), "Porte de armas CAT1: Não - Porte de armas CAT2: Não");
			}
			if(pStats[playerid][Porte] == 1){
			    format(string,sizeof(string), "Porte de armas CAT1: Sim - Porte de armas CAT2: Não");
			}
			if(pStats[playerid][Porte] == 2){
			    format(string,sizeof(string), "Porte de armas CAT1: Sim - Porte de armas CAT2: Sim");
			}
			new concat_string[256];
			format(concat_string, sizeof(concat_string), " - Passaporte: %s - Empréstimo bancário: $%d,00", SimNao[pStats[playerid][Passaporte]], pStats[playerid][Divida]);
			strcat(string, concat_string);
			SendClientMessage(playerid, COLOR_WHITE, string);
			if(pStats[playerid][HabTerrestre] == 0 && pStats[playerid][HabAerea] == 0 && pStats[playerid][HabNautica] == 0){
				SendClientMessage(playerid, COLOR_WHITE, "Você não possui nenhuma habilitação para dirigir");
			}
			else if(pStats[playerid][HabTerrestre] == 1 && pStats[playerid][HabAerea] == 0 && pStats[playerid][HabNautica] == 0){
				SendClientMessage(playerid, COLOR_WHITE, "Você só possui a Habilitação Terrestre");
			}
			else if(pStats[playerid][HabTerrestre] == 0 && pStats[playerid][HabAerea] == 1 && pStats[playerid][HabNautica] == 0){
				SendClientMessage(playerid, COLOR_WHITE, "Você só possui a Habilitação Aérea");
			}
			else if(pStats[playerid][HabTerrestre] == 0 && pStats[playerid][HabAerea] == 0 && pStats[playerid][HabNautica] == 1){
				SendClientMessage(playerid, COLOR_WHITE, "Você só possui a Habilitação Naútica");
			}
			else if(pStats[playerid][HabTerrestre] == 1 && pStats[playerid][HabAerea] == 1 && pStats[playerid][HabNautica] == 0){
				SendClientMessage(playerid, COLOR_WHITE, "Você possui as Habilitações Terrestre e Aérea");
			}
			else if(pStats[playerid][HabTerrestre] == 0 && pStats[playerid][HabAerea] == 1 && pStats[playerid][HabNautica] == 1){
				SendClientMessage(playerid, COLOR_WHITE, "Você possui as Habilitações Náutica e Aérea");
			}
			else if(pStats[playerid][HabTerrestre] == 1 && pStats[playerid][HabAerea] == 0 && pStats[playerid][HabNautica] == 1){
				SendClientMessage(playerid, COLOR_WHITE, "Você possui as Habilitações Náutica e Terrestre");
			}
			else if(pStats[playerid][HabTerrestre] == 1 && pStats[playerid][HabAerea] == 1 && pStats[playerid][HabNautica] == 1){
				SendClientMessage(playerid, COLOR_WHITE, "Você possui todas as Habilitações");
			}
			return 1;
		}
		else if(strcmp(tmp, "habitual", true) == 0)
		{
		    SendClientMessage(playerid, COLOR_LIGHT_RED, "Seu status Habitual:");
            format(string,sizeof(string),"Heroína: %d injeções - Maconha: %d cigarro(s) - Cocaína: %d grama(s) - Teor alcóolico: %d mg", pStats[playerid][DosesHeroina], pStats[playerid][DosesMaconha], pStats[playerid][DosesCocaina], pStats[playerid][Alcool]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			if(pStats[playerid][Fome] < 3)
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Nível de fome: Sem Fome.");
			}
			else if(pStats[playerid][Fome] < 7)
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Nível de fome: Com pouca Fome.");
			}
			else if(pStats[playerid][Fome] < 10)
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Nível de fome: Fome aumentando...");
			}
			else if(pStats[playerid][Fome] < 15)
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Nível de fome: Bastante Fome, dá pra encarar um rodizio.");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Nível de fome: Você está faminto e perdendo saúde, precisa comer imediatamente.");
			}
			return 1;
		}
		else if(strcmp(tmp, "pertences", true) == 0)
		{
		    new imovel[64];
			SendClientMessage(playerid, COLOR_LIGHT_RED, "Seus Pertences:");
		    format(string, sizeof(string), "Número do seu celular: %d - Seguro de vida: %s - Iscas para pescar: %d", pStats[playerid][PhoneNumb], SimNao[pStats[playerid][Seguro]], pStats[playerid][Iscas]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			if(GetQtHouses(playerid) == 0){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não tem casa!");
				return 1;
			}
			if(GetQtHouses(playerid) != 0){
			    for(new p = 1; p < GetQtHouses(playerid) + 1; p++){
					new casa = GetHouses(playerid, p);
					if(casa != -1){
						new zone[28];
						GetZone(casa, zone, 28);
					    format(imovel, sizeof imovel, "Nº%d - Localizado: %s - Valor de imóvel: $%d,00 dólares", GetPHouseKeyID(playerid,GetHouses(playerid, p)),zone, pckStats[casa][PickupValor]);
						format(string, sizeof(string), "Imóvel: %s - Seguro de imóvel: %s", imovel, SimNao[pckStats[casa][SeguroDaCasa]]);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
			} else {
		    	format(imovel, sizeof imovel, "Nenhum");
				format(string, sizeof(string), "Imóvel: %s - Veículos em seu nome: %d", imovel, GetQtVehicles(playerid));
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			format(string, sizeof(string), "Veículos em seu nome: %d", GetQtVehicles(playerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "Chaves Mestras: %d - Numero Loteria: %d %d - Cavalo apostado: %d", pStats[playerid][ChaveMestra],pStats[playerid][NumeroLoteria1],pStats[playerid][NumeroLoteria2],pStats[playerid][Cavalo]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "Camisinha(s): %d - Cartao Telefonico: %d - Bomba Relógio: %d: - Rojão: %d - Flash: %d",pStats[playerid][Camisinha],pStats[playerid][CartaoTelefonico],pStats[playerid][ClockBomb], pStats[playerid][Rocket], pStats[playerid][Flash]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			if(pStats[playerid][Peixe] != 0 || pStats[playerid][Frango] != 0 || pStats[playerid][Carne] != 0 || pStats[playerid][Camarao] != 0 || pStats[playerid][Salada] != 0){
				format(string, sizeof(string), "Peixes: %d - Frango: %d - Carne: %d - Camarão: %d - Salada: %d", pStats[playerid][Peixe],pStats[playerid][Frango],pStats[playerid][Carne],pStats[playerid][Camarao],pStats[playerid][Salada]);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
 			if(pStats[playerid][Pizza] != 0 || pStats[playerid][Sanduiche] != 0 || pStats[playerid][Strogonoff] != 0 || pStats[playerid][Linguica] != 0){
				format(string, sizeof(string), "Pizza: %d - Sanduiche: %d - Strogonoff: %d - Linguiça: %d",pStats[playerid][Pizza], pStats[playerid][Sanduiche],pStats[playerid][Strogonoff],pStats[playerid][Linguica]);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			if(pStats[playerid][Refrigerante] != 0 || pStats[playerid][Suco]  != 0 || pStats[playerid][SorveteChocolate]  != 0 || pStats[playerid][SorveteNapolitano]  != 0 || pStats[playerid][SorveteFlocos] != 0 ){
				format(string, sizeof(string), "Refrigerante: %d - Suco: %d - Sorvete Chocolate: %d - Sorvete Napolitano: %d - Sorvete Flocos: %d", pStats[playerid][Refrigerante],pStats[playerid][Suco],pStats[playerid][SorveteChocolate],pStats[playerid][SorveteNapolitano],pStats[playerid][SorveteFlocos]);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			if(pStats[playerid][ABasico] != 0 || pStats[playerid][AAvancado] != 0 || pStats[playerid][PTV]  != 0 || pStats[playerid][PRadio] != 0){
				format(string, sizeof(string), "Alarme Basico: %s - Alarme Avançado: %s - Televisão: %s - Radio: %s", SimNao[pStats[playerid][ABasico]],SimNao[pStats[playerid][AAvancado]],SimNao[pStats[playerid][PTV]],SimNao[pStats[playerid][PRadio]]);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			if(pStats[playerid][PGeladeira]  != 0 || pStats[playerid][PComputador]  != 0 ||  pStats[playerid][PFogao] != 0){
				format(string, sizeof(string), "Geladeira: %s - Computador: %s - Fogao: %s", SimNao[pStats[playerid][PGeladeira]],SimNao[pStats[playerid][PComputador]],SimNao[pStats[playerid][PFogao]]);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /status [pessoal, profissional, documentacao, habitual, pertences]");
			return 1;
		}
    }
   	if(strcmp(cmd, "/checarstatus", true) == 0) {
	    if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão!");
		new plid = strval(strtok(cmdtext,idx));
		if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador desconectado.");
		new string[128], string2[128];
		format(string,sizeof(string),"|--------------------------------------| Status de %s || ID: %d |--------------------------------------|",PlayerName(plid),plid);
		SendClientMessage(playerid, COLOR_LIGHT_RED, string);
		format(string,sizeof(string),"|---| Profissão: %s || Xpoints: %d || Level: %d || Xpoints para conseguir um Level: %d |---| ",Profissoes[pStats[plid][Prof]][ProfName],pStats[plid][Xpoints],pStats[plid][XL],Profissoes[pStats[plid][Prof]][ProfXpoint]);
		SendClientMessage(playerid, COLOR_LIGHT_YELLOW, string);
		if(GetQtHouses(plid) == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem casa!");
			return 1;
		}
		new imovel[64];
		if(GetQtHouses(playerid) != 0){
		    for(new p = 1; p < GetQtHouses(plid) + 1; p++){
				new casa = GetHouses(plid, p);
				if(casa != -1){
					new zone[28];
					GetZone(casa, zone, 28);
				    format(imovel, sizeof imovel, "Nº%d - Localizado: %s - Valor de imóvel: $%d,00 dólares", GetPHouseKeyID(plid,GetHouses(plid, p)),zone, pckStats[casa][PickupValor]);
					format(string, sizeof(string), "Imóvel: %s - Seguro de imóvel: %s", imovel, SimNao[pckStats[casa][SeguroDaCasa]]);
					SendClientMessage(playerid, COLOR_WHITE, string);
				}
			}
		} else {
	    	format(imovel, sizeof imovel, "Nenhum");
			format(string, sizeof(string), "Imóvel: %s - Veículos em seu nome: %d", imovel, GetQtVehicles(plid));
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		format(string, sizeof(string), "Veículos em seu nome: %d", GetQtVehicles(plid));
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string,sizeof(string),"|---| Skin atual: %d || Skin de trabalho %d || Iscas para pescar: %d || Número de celular: %d || Seguro de vida: %s |---|",pStats[plid][Skin],Profissoes[pStats[plid][Prof]][ProfSkin],pStats[plid][Iscas],pStats[plid][PhoneNumb],SimNao[pStats[plid][Seguro]]);
		SendClientMessage(playerid, COLOR_LIGHT_YELLOW, string);
		format(string,sizeof(string),"|---| Respeito: %d || Empréstimo bancário: $%d,00 || Dívidas à pagar: $%d,00 || Teor alcóolico: %d mg |---|",pStats[plid][Respeito],pStats[plid][Emprestimo],pStats[plid][Divida],pStats[plid][Alcool]);
		SendClientMessage(playerid, COLOR_LIGHT_YELLOW, string);
		format(string,sizeof(string),"|---| Heroína: %d injeções || Maconha: %d cigarro(s) || Cocaína: %d grama(s) |---|",pStats[plid][DosesHeroina],pStats[plid][DosesMaconha],pStats[plid][DosesCocaina]);
		SendClientMessage(playerid, COLOR_LIGHT_YELLOW, string);
		format(string,sizeof(string),"|---| Pontos de culinária: %d || Quantidade de chaves mestras: %d |---|",pStats[plid][Culinaria],pStats[plid][ChaveMestra]);
		SendClientMessage(playerid, COLOR_LIGHT_YELLOW, string);
		format(string,sizeof(string),"|---| Data de nascimento: %s || Idade: %d anos |---|",pStats[plid][Data],GetPlayerAge(plid));
		SendClientMessage(playerid, COLOR_LIGHT_YELLOW, string);
		if(pStats[playerid][Porte] == 0){
		    format(string,sizeof(string), "|---| Porte de armas CAT1: Não || Porte de armas CAT2: Não");
		}
		if(pStats[plid][Porte] == 1){
		    format(string,sizeof(string), "|---| Porte de armas CAT1: Sim || Porte de armas CAT2: Não");
		}
		if(pStats[plid][Porte] == 2){
		    format(string,sizeof(string), "|---| Porte de armas CAT1: Sim || Porte de armas CAT2: Sim");
		}
		format(string2,sizeof(string2), " || Passaporte: %s |---|",SimNao[pStats[plid][Passaporte]]);
		strcat(string,string2);
		SendClientMessage(playerid, COLOR_LIGHT_YELLOW, string);
		if(pStats[plid][HabTerrestre] == 0 && pStats[plid][HabAerea] == 0 && pStats[plid][HabNautica] == 0){
			SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "|---| Você não possui nenhuma habilitação para dirigir |---|");
		}
		else if(pStats[plid][HabTerrestre] == 1 && pStats[plid][HabAerea] == 0 && pStats[plid][HabNautica] == 0){
			SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "|---| Você só possui a Habilitação Terrestre |---|");
		}
		else if(pStats[plid][HabTerrestre] == 0 && pStats[plid][HabAerea] == 1 && pStats[plid][HabNautica] == 0){
			SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "|---| Você só possui a Habilitação Aérea |---|");
		}
		else if(pStats[plid][HabTerrestre] == 0 && pStats[plid][HabAerea] == 0 && pStats[plid][HabNautica] == 1){
			SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "|---| Você só possui a Habilitação Naútica |---|");
		}
		else if(pStats[plid][HabTerrestre] == 1 && pStats[plid][HabAerea] == 1 && pStats[plid][HabNautica] == 0){
			SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "|---| Você possui as Habilitações Terrestre e Aérea |---|");
		}
		else if(pStats[plid][HabTerrestre] == 0 && pStats[plid][HabAerea] == 1 && pStats[plid][HabNautica] == 1){
			SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "|---| Você possui as Habilitações Náutica e Aérea |---|");
		}
		else if(pStats[plid][HabTerrestre] == 1 && pStats[plid][HabAerea] == 0 && pStats[plid][HabNautica] == 1){
			SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "|---| Você possui as Habilitações Náutica e Terrestre |---|");
		}
		else if(pStats[plid][HabTerrestre] == 1 && pStats[plid][HabAerea] == 1 && pStats[plid][HabNautica] == 1){
			SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "|---| Você possui todas as Habilitações |---|");
		}
		return 1;
    }

	if(strcmp(cmd, "/entregardocumentos", true) == 0) {
		new string[128];
	    new tmp[128];
	    new plid;
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_GRAY, "/entregardocumentos [ID/do/COP]");
			return 1;
		}
		plid = strval(tmp);
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador desconectado!");
		    return 1;
		}
		if(GetDistanceBetweenPlayers(playerid,plid) > 15){
		    SendClientMessage(playerid, COLOR_GRAY, "Fique mais próximo do jogador!");
		    return 1;
		}
		if(EntregouDocs[playerid] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Seus documentos não estão com você!");
		    return 1;
		}
		if(ComDocs[plid] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse policial já está checando os documentos de outro jogador, AGUARDE...");
			return 1;
		}
		EntregouDocs[playerid] = 1;
		ComDocs[plid] = 1;
		ReceiveDocs[playerid] = plid;
		GiveDocs[plid] = playerid;
		format(string,sizeof(string),"Documentos entregados para %s",PlayerName(plid));
		SendClientMessage(playerid, COLOR_JUIZ, string);
		format(string,sizeof(string),"%s lhe entregou seus documentos, para ve-los digite /verdocumentos",PlayerName(playerid));
		SendClientMessage(plid, COLOR_JUIZ, string);
		return 1;
	}
	if(strcmp(cmd, "/verdocumentos", true) == 0) {
		new string[128];
	   	new hab[6];
    	new prof;
	   	if(ComDocs[playerid] == 1){
   			if(IsPlayerConnected(GiveDocs[playerid])){
		    	hab[0] = pStats[GiveDocs[playerid]][HabTerrestre];
		    	hab[1] = pStats[GiveDocs[playerid]][HabNautica];
		    	hab[2] = pStats[GiveDocs[playerid]][HabAerea];
	           	hab[3] = pStats[GiveDocs[playerid]][Porte];
	           	hab[4] = pStats[GiveDocs[playerid]][Passaporte];
				hab[5] = pStats[GiveDocs[playerid]][MultaPublica];
	           	prof = pStats[GiveDocs[playerid]][Prof];
				format(string, sizeof(string), "Identidade de: %s", PlayerName(GiveDocs[playerid]));
				SendClientMessage(playerid, COLOR_JUIZ, string);
				format(string, sizeof(string), "Skin :: %d", pStats[GiveDocs[playerid]][Skin]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Profissão de %s :: %s", PlayerName(GiveDocs[playerid]), Profissoes[prof][ProfName]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				if(hab[0] == 0){
				    SendClientMessage(playerid, COLOR_YELLOW, "Habilitação de Carros e Motos: NÃO");
				}
				if(hab[0] == 1){
				    SendClientMessage(playerid, COLOR_WHITE, "Habilitação de Carros e Motos: SIM");
				}
				if(hab[1] == 0){
   					SendClientMessage(playerid, COLOR_YELLOW, "Habilitação Náutica: NÃO");
				}
				if(hab[1] == 1){
				    SendClientMessage(playerid, COLOR_WHITE, "Habilitação Náutica: SIM");
				}
				if(hab[2] == 0){
			    	SendClientMessage(playerid, COLOR_YELLOW, "Habilitação Aérea: NÃO");
				}
				if(hab[2] == 1){
				    SendClientMessage(playerid, COLOR_WHITE, "Habilitação Aérea: SIM");
				}
   				if(hab[3] == 0){
				    SendClientMessage(playerid, COLOR_YELLOW, "Porte de armas CAT1: NÃO");
			    	SendClientMessage(playerid, COLOR_YELLOW, "Porte de armas CAT2: NÃO");
				}
				if(hab[3] == 1){
				    SendClientMessage(playerid, COLOR_WHITE,  "Porte de armas CAT1: SIM");
			   	 	SendClientMessage(playerid, COLOR_YELLOW, "Porte de armas CAT2: NÃO");
				}
				if(hab[3] == 2){
			    	SendClientMessage(playerid, COLOR_WHITE, "Porte de armas CAT1: SIM");
			    	SendClientMessage(playerid, COLOR_WHITE, "Porte de armas CAT2: SIM");
				}
				if(hab[4] == 0){
				    SendClientMessage(playerid, COLOR_YELLOW, "Passaporte: NÃO");
				}
				if(hab[4] == 1){
				    SendClientMessage(playerid, COLOR_WHITE, "Passaporte: SIM");
				}
				if(hab[5] == 0){
				    SendClientMessage(playerid, COLOR_YELLOW, "Multa Pública: NÃO");
				}
				if(hab[5] > 0){
					format(string, sizeof(string), "Multa Pública: SIM . Valor: $%d", pStats[GiveDocs[playerid]][MultaPublica]);
					SendClientMessage(playerid, COLOR_WHITE, string);
				}
				return 1;
			}
			else{
				SendClientMessage(playerid, COLOR_GRAY, "O jogador que lhe mostrou os documentos está desconectado!");
			}
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está com nenhum documento nas mãos!");
		}
		return 1;
	}
	if(strcmp(cmd, "/devolverdocumentos", true) == 0){
	    new string[128];
		if(ComDocs[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está com nenhum documento nas mãos!");
			return 1;
		}
		if(GetDistanceBetweenPlayers(playerid,GiveDocs[playerid]) > 10){
		    SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto do jogador para poder devolver os documentos!");
		    return 1;
		}
		format(string,sizeof(string),"Documentos devolvidos para %s",PlayerName(GiveDocs[playerid]));
		SendClientMessage(playerid, COLOR_JUIZ, string);
		format(string,sizeof(string),"%s lhe devolveu seus documentos!",PlayerName(playerid));
		SendClientMessage(GiveDocs[playerid], COLOR_JUIZ, string);
		EntregouDocs[GiveDocs[playerid]] = 0;
		ComDocs[playerid] = 0;
		GiveDocs[playerid] = -1;
		ReceiveDocs[playerid] = -1;
		return 1;
	}
    if(strcmp(cmd, "/plantarmilho", true) == 0) {
	    if(pStats[playerid][Prof] == AGRICULTOR || IsPlayerAdmin(playerid)){
	        if(PlayerArea[playerid] != AreaFazenda){
	            SendClientMessage(playerid, COLOR_GRAY, "Você não está na FAZENDA.");
				return 1;
			}
			new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
			if(modelo != 532){
	            SendClientMessage(playerid, COLOR_GRAY, "Você não está em um Combine para plantar.");
				return 1;
			}
			if(FazendaInProgress[playerid] == 1){
			    SendClientMessage(playerid, COLOR_GRAY, "A colheita ainda não está pronta... AGUARDE.");
				return 1;
			}
			SendClientMessage(playerid, COLOR_AGRICULTOR, "Espere a colheita e o ensacamento para poder ir vender.");
		   	FazendaInProgress[playerid] = 1;
		   	if(weatherprevisao == 8 || weatherprevisao == 16){
		   	    SetTimerEx("Fazenda",50000,0,"d",playerid);
		   	    SendClientMessage(playerid, COLOR_AGRICULTOR, "Sorte sua, agora estamos em época de chuva, sua colheita irá sair mais rápido!");
			} else {
			  	SetTimerEx("Fazenda",80000,0,"d",playerid);
            }
       	   	return 1;
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Você não tem permissão!");
			return 1;
		}
	}

	if(strcmp(cmd,"/vendermilho",true) == 0) {
	    if(pStats[playerid][Prof] == AGRICULTOR || IsPlayerAdmin(playerid)){
		    if(PlayerArea[playerid] != AreaCoopFazenda){
		        SendClientMessage(playerid, COLOR_GRAY, "Você não está na Fazenda.");
				return 1;
			} else {
			    if(QtMilho[playerid] == 0){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem milho para vender.");
					return 1;
				} else {
				    new quantia,sacas;
				    quantia = minrand(60,150);
				    sacas = minrand(2,8);
				    new amount = floatround((quantia * sacas));
					new msg[128];
					format(msg, sizeof(msg),"Você vendeu %d sacas (100 Kg) de milho por $%d cada e faturou $%d com a venda.",sacas,quantia,amount);
					SendClientMessage(playerid,COLOR_AGRICULTOR,msg);
					QtMilho[playerid] = 0;
					Pay(playerid, amount);
					return 1;
				}
			}
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Você não tem permissão para isso!");
			return 1;
		}
	}
	if(strcmp(cmd, "/tirarleite", true) == 0) {
	    if(pStats[playerid][Prof] == AGRICULTOR || IsPlayerAdmin(playerid)){
	        if(PlayerArea[playerid] != AreaLeite){
	            SendClientMessage(playerid, COLOR_GRAY, "Você não está no CURRAL.");
				return 1;
			}
		    if(LeiteInProgress[playerid] == 1){
			    SendClientMessage(playerid, COLOR_GRAY, "Você tá tirando o leite da vaca. Aguarde");
				return 1;
			}
			if(VacaVazia[playerid] >= 6){
			    SendClientMessage(playerid, COLOR_GRAY, "Assim é demais, as vacas estão secas espere um pouco para poder tirar mais.");
				SetTimerEx("VacaCheia",300000,0,"d",playerid);
				return 1;
			}
			SendClientMessage(playerid, COLOR_AGRICULTOR, "Cê tá tirando o leite pera um pedaço aí.");
			SendClientMessage(playerid, COLOR_AGRICULTOR, "Cê já sai de baixo da vaca. Calminha sô!");
            ApplyAnimation(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 1, 0, 0, 0);
			LeiteInProgress[playerid] = 1;
			VacaVazia[playerid] = VacaVazia[playerid] + 1;
			SetTimerEx("LeiteA",45000,0,"d",playerid);
			return 1;
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Você não tem permissão!");
			return 1;
		}
	}
	if(strcmp(cmd,"/venderleite",true) == 0) {
	    if(pStats[playerid][Prof] == AGRICULTOR || IsPlayerAdmin(playerid)){
		    if(PlayerArea[playerid] != AreaCoopFazenda){
		        SendClientMessage(playerid, COLOR_GRAY, "Você não está na Venda do Milho/Leite");
				return 1;
			} else {
			    if(QtLeite[playerid] == 0){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem leite para vender!");
					return 1;
				} else {
					new msg[128];
					new quantia;
					new vamover = minrand(20,80);
					quantia = QtLeite[playerid]*vamover;
					format(msg, sizeof(msg),"Você vendeu %d engradados (30 Lts) de leite por $%d cada e faturou $%d com a venda.",QtLeite[playerid],vamover,quantia);
					SendClientMessage(playerid,COLOR_AGRICULTOR,msg);
					QtLeite[playerid] = 0;
					Pay(playerid, quantia);
					return 1;
				}
			}
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Você não tem permissão para isso!");
			return 1;
		}
	}

	if(strcmp(cmd, "/tirarhabilitacao", true) == 0) {
	    if(pStats[playerid][HabTerrestre] == 0){
	        if(NoTeste[playerid] == 0){
				if(AceitouTeste[playerid] == 0){
				    if(PlayerArea[playerid] == AreaAutoEscola){
						if(JaExisteAuto == 0){
							if(!TemProfissao(INSTRUTOR)){
								SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO ESCOLA] Caso queira realizar o teste digite: /aceitar ou /recusar.");
								ParaAceitar[playerid] = ACEITAR_TESTEAUTO;
								AceitouTeste[playerid] = 1;
								TimerCancel[playerid] = SetTimerEx("Cancelar",60000,0,"d",playerid);
								return 1;
							} else {
							    SendClientMessage(playerid, COLOR_GRAY, "Há instrutores no jogo, contate-os para tirar habilitação.");
							    return 1;
							}
						} else {
						    SendClientMessage(playerid, COLOR_GRAY, "Alguém está retirando a habilitação aguarde.");
						    return 1;
						}
					} else {
					    SendClientMessage(playerid, COLOR_GRAY, "Você não está na Auto-Escola.");
					    return 1;
					}
				} else {
				    SendClientMessage(playerid, COLOR_GRAY, "Você já está com uma proposta de Teste a caminho.");
				    return 1;
				}
			} else {
			    SendClientMessage(playerid, COLOR_GRAY, "Você já está em um teste!");
			    return 1;
			}
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "Você já tem carteira!");
		    return 1;
		}
	}


   	if(strcmp(cmd, "/habaerea", true) == 0) {
	    if(pStats[playerid][Prof] == INSTRUTOR || IsPlayerAdmin(playerid)){
		    new tmp[128];
		    new plid;
		    new string[128];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "USO: /habaero [id].");
				return 1;
			}
	        plid = strval(tmp);
			if(IsPlayerConnected(plid)){
			    if(pStats[plid][HabAerea] == 0){
			        if(ParteLendoLeisA[playerid] == 0 || ParteFLTest[playerid] == 0){
			            if(InstrutorOcupado[playerid] == 0){
						    if(GetDistanceBetweenPlayers(playerid,plid) > 20){
						       	SendClientMessage(playerid,COLOR_GRAY,"[AUTO ESCOLA] Para oferecer seus serviços é preciso que você esteje perto.");
								return 1;
							}
 							format(string, sizeof(string), "[AUTO ESCOLA] %s está lhe oferecendo o teste para habilitação áerea. Custo: $2400.", PlayerName(playerid));
	 						SendClientMessage(plid, COLOR_INSTRUTOR, string);
	 						SendClientMessage(plid, COLOR_INSTRUTOR, "[AUTO ESCOLA] Caso queira realizar o teste digite: /aceitar ou  /recusar.");
							SendClientMessage(playerid, COLOR_WHITE, "[AUTO ESCOLA] A proposta foi enviada. Aguarde resposta.");
							ParaAceitar[plid] = ACEITAR_TESTEAEREO;
							InstrutorNovo[plid] = playerid;
							envconvite[plid] = playerid;
							TimerCancel[plid] = SetTimerEx("Cancelar",60000,0,"d",plid);
							return 1;
						} else {
						    SendClientMessage(playerid, COLOR_GRAY, "Você já está realizando um teste!");
						    return 1;
						}
					} else {
					    SendClientMessage(playerid, COLOR_GRAY, "Ele já está realizando o teste.");
					    return 1;
					}
				} else{
				    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador já tem habilitação de direção aérea!");
					return 1;
				}
			}
			else{
			    SendClientMessage(playerid, COLOR_GRAY, "Ele não está conectado");
				return 1;
			}
		} else {
            SendClientMessage(playerid, COLOR_GRAY, "Você não está autorizado a executar este comando.");
			return 1;
		}
	}

	
	if(strcmp(cmd, "/agendarteste", true) == 0) {
		new tmp[128];
		new plid;
		tmp = strtok(cmdtext,idx);
		plid = strval(tmp);
		if(!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /agendarteste [id]");
		    return 1;
		}
		if(pStats[plid][Prof] != INSTRUTOR){
		    SendClientMessage(playerid, COLOR_GRAY, "Você só pode agendar teste com um instrutor!");
		    return 1;
		}
		if(NaAgenda[playerid] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Você já agendou um teste!");
		    return 1;
		}
		if(AgendaTestes >= 7){
		    SendClientMessage(playerid, COLOR_GRAY, "A agenda está lotada! Espere o instrutor terminar o teste para apaga-la!");
		    return 1;
		}
		else{
			NaAgenda[playerid] = 1;
			Agendado[playerid] = AgendaTestes;
			AgendaTestes++;
			SendClientMessage(playerid, COLOR_GREEN, "Agendado... Digite /agendatestes para ver que está agendado!");
			new string[128];
			format(string,sizeof(string),"%s acabou de agendar um teste!",PlayerName(playerid));
			SendClientMessage(plid, COLOR_GREEN, string);
			return 1;
		}
	}
	if(strcmp(cmd, "/agendatestes", true) == 0){
	    if(AgendaTestes == 1){
			return SendClientMessage(playerid, COLOR_GRAY, "A agenda de testes está vazia!");
		}
		else{
		    SendClientMessage(playerid, COLOR_YELLOW, "Agenda de testes da auto-escola:");
	    	new string[128];
	    	for(new i=0; i<AgendaTestes; i++){
				for(new p=0; p<MAX_SLOTS; p++){
					if(Agendado[p] == i && NaAgenda[p] == 1){
					    format(string,sizeof(string),"%d - %s",i,PlayerName(p));
					    SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/apagaragenda", true) == 0) {
	    if(AgendaTestes == 1){
			return SendClientMessage(playerid, COLOR_GRAY, "A agenda de testes está vazia!");
		}
		else{
		    AgendaTestes = 1;
			for(new p=0; p<MAX_SLOTS; p++){
				NaAgenda[p] = 0;
				Agendado[p] = 0;
			}
			new string[128];
			format(string,sizeof(string),"%s apagou a agenda de testes da auto escola!",PlayerName(playerid));
			SendClientMessageToAll(COLOR_WHITE, string);
		}
		return 1;
	}

	if(strcmp(cmd, "/cancelarteste", true) == 0) {
	    if(pStats[playerid][Prof] == INSTRUTOR || IsPlayerAdmin(playerid)){
			new tmp[128];
			new plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "USO: /cancelarteste [id].");
				return 1;
			}
			if(NoTeste[plid] == 0 || ParteLendoLeisA[playerid] <= 0){
				SendClientMessage(playerid, COLOR_GRAY, "Ele não está no Teste.");
				return 1;
			}
			ParteLendoLeisA[playerid] = 0;
			ParteFLTest[playerid] = 0;
	     	KillTimer(TempoLeisTransito[plid]);
			KillTimer(TempoRua[plid]);
			FazendoTesteRua[plid] = 0;
			Chance[plid] = 0;
			NoTeste[plid] = 0;
			InstrutorOcupado[playerid] = 0;
			CheckpointStatus[plid] = NONE;
			DisablePlayerCheckpoint(plid);
			SendClientMessage(plid, COLOR_INSTRUTOR, "Seu teste foi cancelado pelo Instrutor.");
			SendClientMessage(plid, COLOR_INSTRUTOR, "Teste cancelado!");
			return 1;
		}
	}
	if(strcmp(cmd, "/testeterrestre", true) == 0) {
	    if(pStats[playerid][Prof] == INSTRUTOR || IsPlayerAdmin(playerid)){
			new tmp[128];
			new plid;
			new string[128];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "USO: /testeterrestre [id].");
				return 1;
			}
    	    plid = strval(tmp);
			if(IsPlayerConnected(plid)){
			    if(pStats[plid][HabTerrestre] != 1){
			        if(NoTeste[plid] == 0){
			            if(InstrutorOcupado[playerid] == 0){
						    if(GetDistanceBetweenPlayers(playerid,plid) > 20){
						       	SendClientMessage(playerid,COLOR_GRAY,"[AUTO ESCOLA] Para oferecer seus serviços é preciso que você esteje perto.");
								return 1;
							}
 							format(string, sizeof(string), "[AUTO ESCOLA] %s está lhe oferecendo o teste para habilitação terrestre. Custo: $800.", PlayerName(playerid));
	 						SendClientMessage(plid, COLOR_INSTRUTOR, string);
	 						SendClientMessage(plid, COLOR_INSTRUTOR, "[AUTO ESCOLA] Caso queira realizar o teste digite: /aceitar ou  /recusar.");
							SendClientMessage(playerid, COLOR_WHITE, "[AUTO ESCOLA] A proposta foi enviada. Aguarde resposta.");
							ParaAceitar[plid] = ACEITAR_TESTE;
							envconvite[plid] = playerid;
							TimerCancel[plid] = SetTimerEx("Cancelar",60000,0,"d",plid);
							return 1;
						} else {
						    SendClientMessage(playerid, COLOR_GRAY, "Você já está realizando um teste!");
						    return 1;
						}
					} else {
					    SendClientMessage(playerid, COLOR_GRAY, "Esse aprendiz já está realizando o teste.");
					    return 1;
					}
				} else {
				    SendClientMessage(playerid, COLOR_GRAY, "O Jogador já tem carteira.");
				    return 1;
				}
			} else {
			    SendClientMessage(playerid, COLOR_GRAY, "Jogador não logado.");
			    return 1;
			}
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão.");
		    return 1;
		}
	}
	if(strcmp(cmd,"/concordo",true) == 0){
	    new string[128];
 		if(LiAsLeis[playerid] == 1){
			if(ParteLendoLeisA[playerid] == 20){
	        	KillTimer(TempoLeisTransito[playerid]);
	            LiAsLeis[playerid] = 0;
				SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] Você concordou com as Leis de San Andreas, arrume as malas vamos ao aeroporto.");
				SetTimerEx("TesteAereo",4000,0,"d",playerid, InstrutorNovo[playerid]);
				ParteLendoLeisA[playerid] = 0;
				return 1;
			}
 		    if(AceitouTeste[playerid] == 0){
	        	KillTimer(TempoLeisTransito[playerid]);
	            LiAsLeis[playerid] = 0;
				format(string, sizeof(string), "[AUTO-ESCOLA] %s concordou com as leis de trânsito. O Teste proseguirá...", PlayerName(playerid));
				SendClientMessage(InstrutorNovo[playerid], COLOR_LIGHT_RED, string);
				SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Você concordou com as Leis de Los Santos, o teste prosseguirá...");
				SetTimerEx("AvancoDirecao",6000,0,"dd",InstrutorNovo[playerid],playerid);
				return 1;
			}
			if(AceitouTeste[playerid] == 1){
	        	KillTimer(TempoLeisTransito[playerid]);
	            LiAsLeis[playerid] = 0;
				SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Você concordou com as Leis de Los Santos, o teste prosseguirá...");
				SetTimerEx("AutoTeste",4000,0,"d",playerid);
				return 1;
			}
		}
	}

	if(strcmp(cmd,"/discordo",true) == 0){
	    new string[128];
		if(LiAsLeis[playerid] == 1){
		 	if(AceitouTeste[playerid] == 0){
		     	KillTimer(TempoLeisTransito[playerid]);
				NoTeste[playerid] = 0;
				InstrutorOcupado[InstrutorNovo[playerid]] = 0;
				LiAsLeis[playerid] = 0;
				format(string, sizeof(string), "[AUTO-ESCOLA] %s disconcordou das leis de trânsito. O teste dele foi cancelado!", PlayerName(playerid));
				SendClientMessage(InstrutorNovo[playerid], COLOR_LIGHT_RED, string);
				SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Você disconcordou das Leis de Los Santos. Seu teste foi cancelado!");
				return 1;
			}
			if(AceitouTeste[playerid] == 1){
		     	KillTimer(TempoLeisTransito[playerid]);
				NoTeste[playerid] = 0;
				LiAsLeis[playerid] = 0;
				JaExisteAuto = 0;
	            AceitouTeste[playerid] = 0;
				SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Você disconcordou das Leis de Los Santos. Seu teste foi cancelado!");
				return 1;
			}
			if(ParteLendoLeisA[playerid] == 1){
		     	KillTimer(TempoLeisTransito[playerid]);
				LiAsLeis[playerid] = 0;
	            ParteLendoLeisA[playerid] = 0;
				SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Você disconcordou das Leis de San Andreas. Seu teste áereo foi cancelado!");
				return 1;
			}
		}
	}
	
	if(strcmp(cmd, "/habnautica", true) == 0) {
		if(pStats[playerid][Prof] == INSTRUTOR || IsPlayerAdmin(playerid)){
			new tmp[128];
			new plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_GRAY, "USO: /habnautica [id].");
			return 1;
			}
    	    plid = strval(tmp);
			if(IsPlayerConnected(plid)){
				if(pStats[plid][HabNautica] == 0){
			    	pStats[plid][HabNautica] = 1;
			    	SendClientMessage(playerid, COLOR_GREEN, "Habilitação de direção náutica concedida.");
			    	SendClientMessage(plid, COLOR_GREEN, "Você recebeu a habilitação de direção náutica.");
                    return 1;
				}
				else{
				    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador já tem habilitação de direção naútica.");
				    return 1;
				}
			}
			else{
			    SendClientMessage(playerid, COLOR_GRAY, "ID inválido");
				return 1;
			}
		} else {
            SendClientMessage(playerid, COLOR_GRAY, "Você não está autorizado a executar este comando.");
			return 1;
		}
	}
	if(strcmp(cmd, "/tirarpassaporte", true) == 0) {
		new pickupid = GetPickupServer[playerid];
		if(pickupid == 81){
			if(!TemProfissao(JUIZ)){
				if(GetPlayerServerMoney(playerid) >= 100){
			    	pStats[playerid][Passaporte] = 1;
			    	SendClientMessage(playerid, COLOR_JUIZ, " ");
				   	SendClientMessage(playerid, COLOR_JUIZ, "[JUIZ] Passaporte Inter-Estadual concedido.");
				   	SendClientMessage(playerid, COLOR_JUIZ, "Não abuse das fronteiras, não contrabandeie, não faça nada errado para nos prejudicar.");
					AddPlayerMoney(playerid, -100, -1);
				   	return 1;
				} else {
				    SendClientMessage(playerid, COLOR_JUIZ, "[SECRETÁRIA JUIZ] Você não tem dinheiro, retire-se. Próximo da fila...");
					return 1;
				}
			} else {
			    SendClientMessage(playerid, COLOR_JUIZ, "[SECRETÁRIA JUIZ] O Juiz está na cidade contate ele.");
				return 1;
			}
		} else {
			SendClientMessage(playerid, COLOR_GRAY, "Você não está no local de concessão de passaportes.");
			return 1;
		}
	}

	if(strcmp(cmd, "/tirarporte", true) == 0) {
		new pickupid = GetPickupServer[playerid];
		if(pickupid == 82){
			if(!TemProfissao(DELEGADO)){
			    if(ImpossivelTirarPorte[playerid] == 0){
					if(GetPlayerServerMoney(playerid) >= 400){
					    if(pStats[playerid][Porte] == 0){
						   	SendClientMessage(playerid, COLOR_DELEGADO, "[Escrivão] Responda as perguntas para checarmos se você tem condições de portar armas de Categoria 1.");
							SetTimerEx("TirandoPorte",7000,0,"d",playerid);
						} else if(pStats[playerid][Porte] == 1){
						   	SendClientMessage(playerid, COLOR_DELEGADO, "[Escrivão] Responda as perguntas para checarmos se você tem condições de portar armas de Categoria 2.");
							SetTimerEx("TirandoPorte2",7000,0,"d",playerid);
						} else {
						   	SendClientMessage(playerid, COLOR_DELEGADO, "[Escrivão] Consta na sua ficha que seu nome tem todos os Portes. Cat. 1 e Cat. 2.");
						}
					   	return 1;
					} else {
					    SendClientMessage(playerid, COLOR_DELEGADO, "[Escrivão] Você não tem dinheiro, retire-se.");
						return 1;
					}
				} else {
				    SendClientMessage(playerid, COLOR_DELEGADO, "[Escrivão] Esqueceu? Você ERROU no porte, volte depois!");
					return 1;
				}
			} else {
			    SendClientMessage(playerid, COLOR_DELEGADO, "[Escrivão] O Delegado está na cidade, procure ele.");
				return 1;
			}
		} else {
			SendClientMessage(playerid, COLOR_GRAY, "Você não está no local de concessão de Portes de Armas..");
			return 1;
		}
	}

	if(strcmp(cmd, "/passaporte", true) == 0) {
	    if(pStats[playerid][Prof] == JUIZ || IsPlayerAdmin(playerid)){
		    new tmp[128];
		    new plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "USO: /passaporte [id]");
				return 1;
			}
	        plid = strval(tmp);
			if(IsPlayerConnected(plid)){
			    pStats[plid][Passaporte] = 1;
			   	SendClientMessage(playerid, COLOR_JUIZ, "Passaporte nacional concedido.");
			   	SendClientMessage(plid, COLOR_GREEN, "O Juiz lhe concedeu passaporte, agora você tem");
               	SendClientMessage(plid, COLOR_GREEN, "livre circulação alem dos limites de Los Santos.");
			   	return 1;
			} else {
			    SendClientMessage(playerid, COLOR_GRAY, "ID inválido");
				return 1;
			}
		} else {
			SendClientMessage(playerid, COLOR_GRAY, "Você não está autorizado a conceder porte de armas.");
			return 1;
		}
	}

	if (strcmp(cmd, "/ordem", true)==0){
		if(pStats[playerid][Prof] == DELEGADO || IsPlayerAdmin(playerid)){
			new tmp[128];
			new string[128];
		    strmid(tmp, cmdtext, 8, strlen(cmdtext));
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "USO: /ordem [ qual ordem aos oficiais? ]");
				return 1;
			}
		    SendClientMessage(playerid, COLOR_DELEGADO, "Você enviou uma ordem aos policiais de Los Santos.");
		    for(new i=0; i<MAX_SLOTS; i++){
		       if(pStats[i][Prof] == COP_MILITAR || pStats[i][Prof] == COP_RODOVIARIO || pStats[i][Prof] == JUIZ || pStats[i][Prof] == COP_SWAT){
					format(string, sizeof(string), "O Delegado %s ordenou aos policiais:", PlayerName(playerid));
					SendClientMessage(i, COLOR_COP_RODOVIARIO, string);
					SendClientMessage(i, COLOR_WHITE, tmp);
		        }
			}
			return 1;
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, " Ei... Você não é Delegado, sua profissão é outra");
    	}
	}
    if(strcmp(cmd, "/porte", true) == 0){
		if(pStats[playerid][Prof] == DELEGADO || IsPlayerAdmin(playerid)){
		    new plid = strval(strtok(cmdtext,idx));
			new porteid = strval(strtok(cmdtext,idx));
			if(porteid < 1 || porteid > 2)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "USO: /porte [id] [1-2]");
			    return 1;
			}
			if(!IsPlayerConnected(plid))
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
			    return 1;
			}
			if(GetDistanceBetweenPlayers(playerid, plid) > 15.0)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto para conceder o porte.");
			    return 1;
			}
			if(pStats[plid][Porte] == 2 || (porteid == 1 && pStats[plid][Porte] == 1))
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador já possui esse porte de armas.");
			    return 1;
			}
			pStats[plid][Porte] = porteid;
			new string[128];
			format(string, sizeof string, "Porte de armas CAT%d concedido.", porteid);
			SendClientMessage(playerid, COLOR_DELEGADO, string);
			format(string, sizeof string, "O Delegado %s lhe concedeu o porte de armas CAT%d.", PlayerName(playerid), porteid);
			SendClientMessage(plid, COLOR_DELEGADO, string);
			return 1;
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "Apenas o Delegado pode dar Porte de Armas.");
			return 1;
    	}
	}
    if(strcmp(cmd, "/removerporte", true) == 0)
	{
	    new plid = strval(strtok(cmdtext,idx));
		new porteid = strval(strtok(cmdtext,idx));
		if(porteid < 1 || porteid > 2)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /removerporte [id] [1-2]");
		    return 1;
		}
		if(!IsPlayerConnected(plid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		    return 1;
		}
		if(GetDistanceBetweenPlayers(playerid, plid) > 15.0)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto para remover o porte.");
		    return 1;
		}
		if(pStats[plid][Porte] == 0 || (porteid == 2 && pStats[plid][Porte] == 1))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não possui esse porte.");
		    return 1;
		}
		pStats[plid][Porte] = 0;
		new string[128];
		format(string, sizeof string, "Porte de armas CAT%d removido.", porteid);
		SendClientMessage(playerid, COLOR_DELEGADO, string);
		format(string, sizeof string, "O Delegado %s removeu o seu porte de armas CAT%d.", PlayerName(playerid), porteid);
		SendClientMessage(plid, COLOR_DELEGADO, string);
		return 1;
	}
 	if(strcmp(cmd, "/portedearmas", true) == 0) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED, "Lista de armas permitidas em Los Santos-SA. São duas categorias armas leves e armas pesadas");
	    SendClientMessage(playerid, COLOR_LIGHT_RED, "qualquer cidadão de Los Santos que usar armas sem porte será preso, e aguardará o julgamento.");
	    SendClientMessage(playerid, COLOR_WHITE, "CAT1: Faca, Desert Eagle, 9mm com silenciador");
		SendClientMessage(playerid, COLOR_WHITE, "CAT2: Escopeta Calibre 12, Escopeta de Combate, MP5, AK47, M4, Country Rifle");
    	SendClientMessage(playerid, COLOR_LIGHT_RED, "Decreto nº1925/2008 armas permitidas - DELEGADO: Texugo. Los Santos-SA");
		return 1;
	}
	if(strcmp(cmd,"/verjornais",true)==0){
		for(new jn = 0; jn < LastJN; jn++){
		    new string[128];
			if(!fexist(JornalFile(Jornais[jn]))) continue;
		    if(!compare(Jornais[jn],"NONE")){
			    SendClientMessage(playerid, COLOR_JORNALISTA, "[JORNAL] Jornais de Los Santos:");
				format(string, sizeof string, "[ Nome do Jornal: %s ] [ Escritor: %s ]", Jornais[jn], jStats[jn][Autor]);
				SendClientMessage(playerid, COLOR_JORNALISTA, string);
				SendClientMessage(playerid, COLOR_WHITE, "Para ler o jornal digite: /lerjornal [nome do jornal] [caderno]");
				return 1;
			}
		}
	}
			
	if(strcmp(cmd,"/criarjornal",true)==0){
	    if(pStats[playerid][Prof] != JORNALISTA && !IsPlayerAdmin(playerid)){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não é Jornalista!");
	        return 1;
		}
		if(LastJN >= MAX_JORNAIS){
			SendClientMessage(playerid, COLOR_GRAY, "O gamemode excedeu o limite de jornais...");
			return 1;
		}
		new tmp[128];
  		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /criarjornal [título do jornal]");
			return 1;
		}
		if(pStats[playerid][Jornal] == 1){
	        SendClientMessage(playerid, COLOR_GRAY, "Você já tem um jornal!");
			return 1;
		}
	   	for(new s = 0; s < strlen(tmp); s++){
			if(strfind(tmp,"*",false,s) != -1 || strfind(tmp,"'",false,s) != -1 || strfind(tmp,"/",false,s) != -1 || strfind(tmp,"?",false,s) != -1 || strfind(tmp,">",false,s) != -1
			|| strfind(tmp,"<",false,s) != -1 || strfind(tmp,":",false,s) != -1 || strfind(tmp,"?",false,s) != -1 || strfind(tmp,"\"",false,s) != -1 || strfind(tmp,"|",false,s) != -1 || strfind(tmp,"!",false,s) != -1){
				SendClientMessage(playerid, COLOR_GRAY, "Sem caracteres especiais no jornal (\" * < > \\ / ? | : ' !)");
				
				return 1;
			}
		}
		CriarJornal(playerid,tmp);
 		return 1;
	}
	if(strcmp(cmd,"/escreverjornal",true)==0){
	    if(pStats[playerid][Jornal] == 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não tem jornal!");
			return 1;
		}
	    new tmp[128],linha,texto[128],titulo[128],caderno[128],c,jfile[128];
	    format(titulo,sizeof(titulo),pStats[playerid][TituloJornal]);
		caderno = strtok(cmdtext,idx);
		if(!compare(caderno,"Esportes") && !compare(caderno,"Homicidios") && !compare(caderno,"Mercadorias") && !compare(caderno,"Empresas") && !compare(caderno,"Outros")){
			SendClientMessage(playerid, COLOR_GRAY, "Caderno inválido, veja todos em \"/cadernos\"");
			SendClientMessage(playerid, COLOR_GRAY, "OBS: Não esqueça de digitar todas as letras maiúsculas e minúsculas corretamente!");
			return 1;
		}
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /escreverjornal [caderno] [linha] [texto]");
		    return 1;
		}
		linha = strval(tmp);
		if(linha <= 0 || linha >= 4){
		    SendClientMessage(playerid, COLOR_GRAY, "Linha de 1 à 3");
		    return 1;
		}
		if(compare(caderno,"Esportes")){
			strmid(texto,cmdtext,27,strlen(cmdtext));
			c=1;
		}
        else if(compare(caderno,"Homicidios")){
			strmid(texto,cmdtext,29,strlen(cmdtext));
			c=2;
		}
        else if(compare(caderno,"Mercadorias")){
			strmid(texto,cmdtext,30,strlen(cmdtext));
			c=3;
		}
        else if(compare(caderno,"Empresas")){
			strmid(texto,cmdtext,27,strlen(cmdtext));
			c=4;
		}
        else if(compare(caderno,"Outros")){
			strmid(texto,cmdtext,25,strlen(cmdtext));
			c=5;
		}
		if(strlen(texto) <= 0){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /escreverjornal [caderno] [linha] [texto]");
		    return 1;
		}
		if(strfind(texto,";",true) != -1 || strfind(texto,"\\",true) != -1){
 			SendClientMessage(playerid, COLOR_GRAY, "No texto não deve conter nenhum \";, \\\"");
		    return 1;
		}
		set(jfile,JornalFile(titulo));
		if(!fexist(jfile)) return SendClientMessage(playerid, COLOR_GRAY, "Um erro foi encontrado...");
		if(c == 1){
			SendClientMessage(playerid, COLOR_WHITE, "Texto escrito no caderno de Esportes:");
   			if(linha == 1) 		set(jStats[GetJornalID(titulo)][CEsporte1],texto);
			else if(linha == 2) set(jStats[GetJornalID(titulo)][CEsporte2],texto);
			else if(linha == 3) set(jStats[GetJornalID(titulo)][CEsporte3],texto);
		}
		else if(c == 2){
		    SendClientMessage(playerid, COLOR_WHITE, "Texto escrito no caderno de Homicidios:");
		    if(linha == 1) 		set(jStats[GetJornalID(titulo)][CHomicidios1],texto);
			else if(linha == 2) set(jStats[GetJornalID(titulo)][CHomicidios2],texto);
			else if(linha == 3) set(jStats[GetJornalID(titulo)][CHomicidios3],texto);
		}
		else if(c == 3){
		    SendClientMessage(playerid, COLOR_WHITE, "Texto escrito no caderno de Mercadorias:");
		    if(linha == 1) 		set(jStats[GetJornalID(titulo)][CMercadorias1],texto);
			else if(linha == 2) set(jStats[GetJornalID(titulo)][CMercadorias2],texto);
			else if(linha == 3) set(jStats[GetJornalID(titulo)][CMercadorias3],texto);
		}
		else if(c == 4){
		    SendClientMessage(playerid, COLOR_WHITE, "Texto escrito no caderno de Empresas:");
		    if(linha == 1) 		set(jStats[GetJornalID(titulo)][CEmpresas1],texto);
			else if(linha == 2) set(jStats[GetJornalID(titulo)][CEmpresas2],texto);
			else if(linha == 3) set(jStats[GetJornalID(titulo)][CEmpresas3],texto);
		}
		else if(c == 5){
		    SendClientMessage(playerid, COLOR_WHITE, "Texto escrito no caderno de outras informações:");
            if(linha == 1) 		set(jStats[GetJornalID(titulo)][COutros1],texto);
			else if(linha == 2) set(jStats[GetJornalID(titulo)][COutros2],texto);
			else if(linha == 3) set(jStats[GetJornalID(titulo)][COutros3],texto);
		}
		SendClientMessage(playerid, COLOR_JUIZ, texto);
		return 1;
	}
	if(strcmp(cmd,"/lerjornal",true)==0){
		new tmp[128],titulo[128],caderno[128],str[128],string[128];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /lerjornal [titulo do jornal] [caderno]");
		    return 1;
		}
		set(titulo,tmp);
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /lerjornal [titulo do jornal] [caderno]");
			format(string,sizeof(string),"|==================| %s's Paper's - %s: |==================|",titulo,caderno);
			SendClientMessage(playerid, COLOR_PINK, string);
			SendClientMessage(playerid, COLOR_YELLOW,"ºººººººººº Cadernos:");
	   		SendClientMessage(playerid, COLOR_WHITE, "ºººººººººº Esportes");
           	SendClientMessage(playerid, COLOR_LIGHT_RED, "ºººººººººº Homicidios");
           	SendClientMessage(playerid, COLOR_CONTRABANDISTA, "ºººººººººº Mercadorias");
           	SendClientMessage(playerid, COLOR_GREEN, "ºººººººººº Empresas");
			SendClientMessage(playerid, COLOR_WHITE, "ºººººººººº Outros");
		    return 1;
		}
		set(caderno,tmp);
		set(str,JornalFile(titulo));
		if(!fexist(str)){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jornal não existe!");
		    return 1;
		}
		format(string,sizeof(string),"|==================| %s's Paper's - %s: |==================|",titulo,caderno);
		SendClientMessage(playerid, COLOR_PINK, string);
		if(compare(caderno,"Esportes")){
		    if(!compare(jStats[GetJornalID(titulo)][CEsporte1],"NONE")) 		SendClientMessage(playerid, COLOR_WHITE, jStats[GetJornalID(titulo)][CEsporte1]);
			if(!compare(jStats[GetJornalID(titulo)][CEsporte2],"NONE")) 		SendClientMessage(playerid, COLOR_WHITE, jStats[GetJornalID(titulo)][CEsporte2]);
			if(!compare(jStats[GetJornalID(titulo)][CEsporte3],"NONE")) 		SendClientMessage(playerid, COLOR_WHITE, jStats[GetJornalID(titulo)][CEsporte3]);
		}
        else if(compare(caderno,"Homicidios")){
            if(!compare(jStats[GetJornalID(titulo)][CHomicidios1],"NONE")) 		SendClientMessage(playerid, COLOR_WHITE, jStats[GetJornalID(titulo)][CHomicidios1]);
			if(!compare(jStats[GetJornalID(titulo)][CHomicidios2],"NONE")) 		SendClientMessage(playerid, COLOR_WHITE, jStats[GetJornalID(titulo)][CHomicidios2]);
			if(!compare(jStats[GetJornalID(titulo)][CHomicidios3],"NONE"))  	SendClientMessage(playerid, COLOR_WHITE, jStats[GetJornalID(titulo)][CHomicidios3]);
		}
        else if(compare(caderno,"Mercadorias")){
            if(!compare(jStats[GetJornalID(titulo)][CMercadorias1],"NONE")) 	SendClientMessage(playerid, COLOR_CONTRABANDISTA, jStats[GetJornalID(titulo)][CMercadorias1]);
			if(!compare(jStats[GetJornalID(titulo)][CMercadorias2],"NONE"))		SendClientMessage(playerid, COLOR_CONTRABANDISTA, jStats[GetJornalID(titulo)][CMercadorias2]);
			if(!compare(jStats[GetJornalID(titulo)][CMercadorias3],"NONE"))		SendClientMessage(playerid, COLOR_CONTRABANDISTA, jStats[GetJornalID(titulo)][CMercadorias3]);
		}
        else if(compare(caderno,"Empresas")){
            if(!compare(jStats[GetJornalID(titulo)][CEmpresas1],"NONE")) 		SendClientMessage(playerid, COLOR_GREEN, jStats[GetJornalID(titulo)][CEmpresas1]);
			if(!compare(jStats[GetJornalID(titulo)][CEmpresas2],"NONE")) 		SendClientMessage(playerid, COLOR_GREEN, jStats[GetJornalID(titulo)][CEmpresas2]);
			if(!compare(jStats[GetJornalID(titulo)][CEmpresas3],"NONE")) 		SendClientMessage(playerid, COLOR_GREEN, jStats[GetJornalID(titulo)][CEmpresas3]);
		}
        else if(compare(caderno,"Outros")){
            if(!compare(jStats[GetJornalID(titulo)][COutros1],"NONE")) 			SendClientMessage(playerid, COLOR_WHITE, jStats[GetJornalID(titulo)][COutros1]);
			if(!compare(jStats[GetJornalID(titulo)][COutros2],"NONE")) 			SendClientMessage(playerid, COLOR_WHITE, jStats[GetJornalID(titulo)][COutros2]);
			if(!compare(jStats[GetJornalID(titulo)][COutros3],"NONE")) 			SendClientMessage(playerid, COLOR_WHITE, jStats[GetJornalID(titulo)][COutros3]);
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Caderno inexistente, veja todos em \"/cadernos\"");
		    return 1;
		}
		return 1;
	}
	if(strcmp(cmd,"/excluirjornal",true)==0){
	    ExcluirJornal(playerid);
	    return 1;
	}
	if(strcmp(cmd,"/ativarcamera",true)==0){
	    if(!IsPlayerInAnyVehicle(playerid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em um veículo de reportagem!");
		    return 1;
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 488){
		    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em um helicóptero de reportagem!");
		    return 1;
		}
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
		    SendClientMessage(playerid, COLOR_GRAY, "Para ativar a câmera você deve estar como passageiro e não como piloto...");
		    return 1;
		}
		if(CameraAtiva[playerid] == 1){
			SendClientMessage(playerid, COLOR_GRAY, "Sua camera está ativada...");
		    return 1;
		}
		CameraAtiva[playerid] = 1;
		TempoFilmando[playerid] = SetTimerEx("Filmando",100,1,"d",playerid);
		TempoFilmando2[playerid] = SetTimerEx("Filmando2",240000,1,"d",playerid);
		SetPlayerControl(playerid,0);
		SendClientMessage(playerid, COLOR_JUIZ, "Camera ativada...");
		return 1;
	}
	if(strcmp(cmd,"/desativarcamera",true)==0){
		if(!CameraAtiva[playerid]) return SendClientMessage(playerid, COLOR_GRAY, "Sua camera nao esta ativada...");
		CameraAtiva[playerid] = 0;
		KillTimer(TempoFilmando[playerid]);
		KillTimer(TempoFilmando2[playerid]);
		SetCameraBehindPlayer(playerid);
		SetPlayerControl(playerid,1);
		SendClientMessage(playerid, COLOR_JUIZ, "Camera desativada...");
		return 1;
	}
    if(strcmp(cmd,"/publicar",true)==0){
	    if(pStats[playerid][Prof] == JORNALISTA || IsPlayerAdmin(playerid)){
	    	new tmp[128];
	    	new msg[128];
	    	strmid(tmp,cmdtext,9,strlen(cmdtext));
	    	if(!strlen(tmp)) {
	        	SendClientMessage(playerid,COLOR_GRAY,"/publicar [texto]");
				return 1;
			}
			if(!IsPlayerInAnyVehicle(playerid)){
			    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em um veículo de reportagem!");
			    return 1;
			}
			if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 488){
			    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em um helicóptero de reportagem!");
			    return 1;
			}
   			format(msg,sizeof(msg),"Anúncio publicado por %s",PlayerName(playerid));
		    SendClientMessageToAll(COLOR_YELLOW,msg);
		    GameTextForAll(tmp,5000,0);
		    return 1;
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Você não tem permissão!");
			return 1;
		}
	}

	if(strcmp(cmd,"/noticia",true)==0){
	    if(pStats[playerid][Prof] == JORNALISTA || IsPlayerAdmin(playerid)){
	    	new tmp[128];
	    	new msg[128];
	    	strmid(tmp,cmdtext,9,strlen(cmdtext));
	    	if(!strlen(tmp)) {
	        	SendClientMessage(playerid,COLOR_GRAY,"/noticia [texto]");
				return 1;
			}
			if(!IsPlayerInAnyVehicle(playerid)){
			    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em um veículo de reportagem!");
			    return 1;
			}
			if(!IsSANNews(GetPlayerVehicleID(playerid))){
			    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em um veículo/helicóptero de reportagem!");
			    return 1;
			}
		 	format(msg,sizeof(msg),"Extra Extra! Notícias de San Andreas, %s informa:",PlayerName(playerid));
		    SendClientMessageToAll(COLOR_YELLOW,msg);
		    SendClientMessageToAll(COLOR_PINK,tmp);
		    return 1;
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Você não tem permissão!");
			return 1;
		}
	}

	if(strcmp(cmd,"/propaganda",true)==0){
	    if(pStats[playerid][Prof] == JORNALISTA || IsPlayerAdmin(playerid)){
	    	new tmp[128];
	    	strmid(tmp,cmdtext,12,strlen(cmdtext));
	    	if(!strlen(tmp)) {
	        	SendClientMessage(playerid,COLOR_GRAY,"/propaganda [texto]");
				return 1;
            }
			if(!IsPlayerInAnyVehicle(playerid)){
			    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em um veículo de reportagem!");
			    return 1;
			}
			if(!IsSANNews(GetPlayerVehicleID(playerid))){
			    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em um veículo/helicóptero de reportagem!");
			    return 1;
			}
   			SendClientMessageToAll(COLOR_YELLOW,"--Propagandas Jornal San News--");
		    SendClientMessageToAll(COLOR_PINK,tmp);
		    return 1;
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Você não tem permissão!");
			return 1;
		}
	}
	if(strcmp(cmd,"/entrevistar", true) == 0){
	    if(pStats[playerid][Prof] != JORNALISTA && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não é Jornalista!");
		new tmp[ 256 ] , plid, string[ 256 ];
		tmp=strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /entrevistar [id]");
		plid=strval(tmp);
		if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distance;
		GetPlayerPos(playerid,x,y,z);
		GetPlayerPos(plid,x2,y2,z2);
		distance = floatsqroot((x - x2) * (x - x2) + (y - y2) * (y - y2) + (z - z2) * (z - z2));
		if(distance > 7){
			SendClientMessage(playerid, COLOR_GRAY, "Fique mais próximo do jogador para entrevista-lo...");
			return 1;
		}
		SendClientMessage(playerid, COLOR_JORNALISTA, "Aguarde o outro jogador ver se aceita dar entrevista...");
   		format(string,sizeof(string),"O jornalista %s está querendo lhe entrevistar, para aceitar dar entrevista digite /darentrevista, caso contrário /naodarentrevista",PlayerName(playerid));
		SendClientMessage(plid, COLOR_JORNALISTA, string);
		Entrevista[plid][0]=1;
		Entrevista[plid][4]=playerid;
		return 1;
	}
	if(strcmp(cmd, "/darentrevista", true) == 0){
		if(Entrevista[playerid][0]==0) return SendClientMessage(playerid, COLOR_GRAY, "Nenhum jornalista está querendo lhe entrevistar!");
		new id = Entrevista[playerid][4],Float:x,Float:y,Float:z;
		AcrescentarXpoints(id,1);
		Entrevista[playerid][0]=0;
	    Entrevista[id][1]=1;
		Entrevista[playerid][2]=1;
		Entrevista[id][3]=playerid;
		Entrevista[playerid][4]=id;
		new string[128];
		format(string,sizeof(string),"[TV] Telespectadores, %s está dando uma entrevista ao-vivo na TV, ligue sua TV para assistir na íntegra.",PlayerName(playerid));
		SendClientMessageToAll(COLOR_JORNALISTA, string);
		SendClientMessage(id, COLOR_JORNALISTA, "O jogador aceitou dar entrevista...");
		SendClientMessage(playerid, COLOR_WHITE, "A entrevista começou...");
		SetPlayerControl(playerid,0);
		SetPlayerControl(id,0);
		GetPlayerPos(playerid,x,y,z);
		GetXYInFrontOfPlayer(playerid,x,y,1.0);
		CamEntrevista[playerid][0]=x;
		CamEntrevista[playerid][1]=y;
		CamEntrevista[playerid][2]=z+1.0;
		GetPlayerPos(playerid,x,y,z);
		CamEntrevista[playerid][3]=x;
		CamEntrevista[playerid][4]=y;
		CamEntrevista[playerid][5]=z+0.5;
		SetPlayerCameraPos(playerid,CamEntrevista[playerid][0],CamEntrevista[playerid][1],CamEntrevista[playerid][2]);
		SetPlayerCameraLookAt(playerid,CamEntrevista[playerid][3],CamEntrevista[playerid][4],CamEntrevista[playerid][5]);
		SetPlayerCameraPos(id,CamEntrevista[playerid][0],CamEntrevista[playerid][1],CamEntrevista[playerid][2]);
		SetPlayerCameraLookAt(id,CamEntrevista[playerid][3],CamEntrevista[playerid][4],CamEntrevista[playerid][5]);
		return 1;
	}
	if(strcmp(cmd,"/naodarentrevista", true) == 0){
	    if(Entrevista[playerid][0]==0) return SendClientMessage(playerid, COLOR_GRAY, "Nenhum jornalista está querendo lhe entrevistar!");
	    new id=Entrevista[playerid][4];
	    Entrevista[playerid][0]=0;
	    SendClientMessage(playerid, COLOR_WHITE, "Entrevista recusada...");
	    SendClientMessage(id, COLOR_GRAY, "O jogador se recusou a dar entrevista...");
	    return 1;
	}
	if(strcmp(cmd,"/terminarentrevista", true) == 0){
	    if(Entrevista[playerid][1] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está entrevistando ninguém...");
	    new id=Entrevista[playerid][3];
	    Entrevista[id][0]=0;
	    Entrevista[playerid][1]=0;
	    Entrevista[id][2]=0;
	    SetPlayerControl(playerid,1);
		SetPlayerControl(id,1);
		SetCameraBehindPlayer(playerid);
		SetCameraBehindPlayer(id);
		SendClientMessageSpectators(playerid, COLOR_JUIZ, "A entrevista acaba por aqui, obrigado queridos telespectadores...");
		SendClientMessageSpectators(id, COLOR_WHITE, "A entrevista acaba por aqui, obrigado queridos telespectadores...");
		SendClientMessage(playerid, COLOR_JORNALISTA, "Fim da entrevista...");
		SendClientMessage(id, COLOR_WHITE, "A entrevista acabou, a Empresa de Jornalismo Virtual Life lhe agradece...");
		return 1;
	}
	if(strcmp(cmd, "/limpar", true) == 0) {
		if(pStats[playerid][Prof] == ADVOGADO){
			new distancia;
			new plid;
			new tmp[128];
			tmp = strtok(cmdtext, idx);
	        plid = strval(tmp);
			if(!strlen(tmp)){
		    	SendClientMessage(playerid, COLOR_GRAY,"USO: /limpar [id]");
				return 1;
			}
			if(GetPlayerWantedLevel(plid) <= 0){
		    	SendClientMessage(playerid, COLOR_GRAY,"Ele não está sendo Procurado pela polícia.");
				return 1;
			}
			distancia = GetDistanceBetweenPlayers(playerid, plid);
	 		if(distancia > 15){
		  		SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto!");
				return 1;
			}
			if(compare(Crime[plid][Motivo], "Homicídio")){
		  		SendClientMessage(playerid, COLOR_GRAY, "Você não pode limpar alguém por Homicídio.");
				return 1;
			}
			if(compare(Motivos[pStats[plid][LastBustedReason]][mName], "Homicidio")){
		  		SendClientMessage(playerid, COLOR_GRAY, "Você não pode limpar alguém por Homicídio.");
				return 1;
			}
			new valor;
			valor = (GetPlayerWantedLevel(plid)*500);
		    SendClientMessage(playerid,COLOR_ADVOGADO,"[ADVOGADO] Proposta oferecida, agora espere o outro jogador aceitar.");
		    new string[128];
		    format(string,sizeof(string),"[ADVOGADO] Pronto, você ofereceu a %s no valor de $%d, a possibilidade de ele tirar as %d estrelas de procurado.",PlayerName(plid), valor, GetPlayerWantedLevel(plid));
            SendClientMessage(playerid, COLOR_ADVOGADO, string);
		    format(string,sizeof(string),"[ADVOGADO] %s está te oferecendo no valor de $%d, seu serviço para remover as estrelas de procurado, digite /aceitar ou /recusar para recusa-la.",PlayerName(playerid), valor);
            SendClientMessage(plid, COLOR_ADVOGADO, string);
			ParaAceitar[plid] = ACEITAR_LIMPAR;
			AdvogadoDele[plid] = playerid;
			return 1;
 		}
	}
	if(strcmp(cmd, "/advogado", true)==0){
 		SendClientMessage(playerid, COLOR_ADVOGADO, "Um dos advogados de Los Santos irá lhe defender no Tribunal.");
   		for(new i=0; i<MAX_SLOTS; i++){
     		if(IsPlayerConnected(i) && pStats[i][Prof] == ADVOGADO || IsPlayerAdmin(i)){
     		    new string[128];
				format(string, sizeof(string), "[ESCRITORIO] %s solicita um advogado, por favor atenda-o.", PlayerName(playerid));
				SendClientMessage(i, COLOR_ADVOGADO, string);
				return 1;
			}
			return 1;
		}
	}
	if(strcmp(cmd, "/definirpreco", true) == 0)
	{
      	if(IsPlayerAdmin(playerid))
 		{
			new tmp[128],selectedcar,value,carname[40],string[128];
			tmp = strtok(cmdtext,idx);
			if(strcmp("Infernus",tmp,true) == 0){
				selectedcar = 0;
				carname = "Infernus";
			}
			else if(strcmp("Turismo",tmp,true) == 0){
			    selectedcar = 1;
				carname = "Turismo";
			}
			else if(strcmp("Sultan",tmp,true) == 0){
			    selectedcar = 2;
				carname = "Sultan";
			}
			else if(strcmp("Sabre",tmp,true) == 0){
				selectedcar = 3;
				carname = "Sabre";
			}
			else if(strcmp("Phoenix",tmp,true) == 0){
	            selectedcar = 4;
				carname = "Phoenix";
			}
			else if(strcmp("Cheetah",tmp,true) == 0){
			    selectedcar = 5;
				carname = "Cheetah";
			}
			else if(strcmp("FCR-900",tmp,true) == 0){
			    selectedcar = 6;
				carname = "FCR-900";
			}
			else if(strcmp("NRG-500",tmp,true) == 0){
			    selectedcar = 7;
				carname = "NRG-500";
			}
			else{
				SendClientMessage(playerid, COLOR_GRAY, "USO: /definirpreco [carro] [preco]");
				SendClientMessage(playerid, COLOR_GRAY, "CARROS: Infernus, Turismo, Sultan, Sabre, Phoenix, Cheetah, FCR-900, NRG-500");
				return 1;
			}
			tmp = strtok(cmdtext,idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "USO: /definirpreco [carro] [preco]");
				SendClientMessage(playerid, COLOR_GRAY, "CARROS: Infernus, Turismo, Sultan, Sabre, Phoenix, Cheetah, FCR-900, NRG-500");
				return 1;
			}
			value = strval(tmp);
			if(value < 10 || value > 100){
			    SendClientMessage(playerid, COLOR_GRAY, "Valor de $10,00 até $100,00 dólares");
			    return 1;
			}
			CarPrice[selectedcar] = value;
			format(string,sizeof(string),"Você definiu o preço do veículo %s para $%d,00 dólares",carname,value);
			SendClientMessage(playerid, COLOR_GREEN, string);
			return 1;
	    } else {
	        SendClientMessage(playerid,COLOR_GRAY,"Você não tem permissão!");
	    	return 1;
	    }
	}
	if(strcmp(cmd, "/alugar", true) == 0)
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo.");
	        return 1;
	    }
		new vehid = GetVehicleRentID(GetPlayerVehicleID(playerid));
		if(vehid == -1)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo de aluguel.");
	        return 1;
		}
		if(CarroAlugado[playerid] != -1)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você só pode alugar 1 veículo por vez.");
	        return 1;
		}
		new time = strval(strtok(cmdtext, idx));
		if(time < 7 || time > 40)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /alugar [tempo]");
		    SendClientMessage(playerid, COLOR_GRAY, "Tempo de 7 à 40 minutos.");
		    return 1;
		}
		new value = time * CarPrice[vehid];
		if(GetPlayerServerMoney(playerid) < value)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro, vide /alugueis para saber o preço.");
		    return 1;
		}
		PodeSair[playerid] = 0;
		SetPlayerControl(playerid, true);
		AddPlayerMoney(playerid, -value, -1);
		CarroAlugado[playerid] = vehid;
		TempoAluguel[playerid] = SetTimerEx("EncerrarAluguel", time * 60000, 0, "d", playerid);
		new string[128];
		format(string, sizeof string, "[LOCADORA] Veículo alugado por %d minutos [Valor: $%d,00 dólares]", time, value);
		SendClientMessage(playerid, COLOR_GREEN, string);
		return 1;
	}
	if(strcmp(cmd, "/alugueis", true) == 0) {
	    new string[128];
	    SendClientMessage(playerid, COLOR_LIGHT_RED, "Preço dos veículos de aluguel:");
	    format(string,sizeof(string),"Infernus: $%d,00 dólares por minuto",CarPrice[0]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    format(string,sizeof(string),"Turismo: $%d,00 dólares por minuto",CarPrice[1]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    format(string,sizeof(string),"Sultan: $%d,00 dólares por minuto",CarPrice[2]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    format(string,sizeof(string),"Sabre: $%d,00 dólares por minuto",CarPrice[3]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    format(string,sizeof(string),"Phoenix: $%d,00 dólares por minuto",CarPrice[4]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    format(string,sizeof(string),"Cheetah: $%d,00 dólares por minuto",CarPrice[5]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    format(string,sizeof(string),"FCR-900: $%d,00 dólares por minuto",CarPrice[6]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    format(string,sizeof(string),"NRG-500: $%d,00 dólares por minuto",CarPrice[7]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    return 1;
	}
	if(strcmp(cmd, "/transportar", true) == 0) {
		if(pStats[playerid][Prof] == SEGURANÇA || IsPlayerAdmin(playerid))
		{
			if(PlayerArea[playerid] != AreaForte)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Você não está na Area Forte.");
				return 1;
			}
			if(!IsPlayerInAnyVehicle(playerid))
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo.");
				return 1;
			}
			if(IsSecurity(GetPlayerVehicleID(playerid))){
				new sec_id = GetVehicleSecurityID(GetPlayerVehicleID(playerid));
				Malote[sec_id] = 1;
				SendClientMessage(playerid, COLOR_SEGURANÇA, "Carro Forte carregado, transporte o dinheiro para o Banco.");
				SendClientMessage(playerid, COLOR_SEGURANÇA, "Cuidado! Assaltantes podem estar à sua espera, use /escolta para solicitar escolta policial.");
				return 1;
			} else {
			    SendClientMessage(playerid, COLOR_GRAY, "Você não está em Carro Forte.");
				return 1;
			}
	    }
		else
		{
	        SendClientMessage(playerid, COLOR_GRAY, "Você não é Segurança.");
			return 1;
		}
	}
	if(strcmp(cmd,"/pegardinheiro",true) == 0){
	    if(pStats[playerid][Prof] == SEGURANÇA || IsPlayerAdmin(playerid))
		{
			if(!IsPlayerInAnyVehicle(playerid))
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo.");
				return 1;
			}
			if(!IsSecurity(GetPlayerVehicleID(playerid)))
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Você não está em Carro Forte.");
				return 1;
			}
			new sec_id = GetVehicleSecurityID(GetPlayerVehicleID(playerid));
			if(Malote[sec_id] == 0)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Esse Carro Forte não está carregado.");
			    return 1;
			}
			Malote[sec_id] = 0;
			PegouGrana[playerid] = 1;
			SendClientMessage(playerid, COLOR_SEGURANÇA, "Dinheiro pego, deposite-o no Banco.");
			return 1;
	    }
		else
		{
	        SendClientMessage(playerid, COLOR_GRAY, "Você não é Segurança.");
			return 1;
		}
	}
	if(strcmp(cmd,"/depositardinheiro",true) == 0)
	{
	    if(pStats[playerid][Prof] == SEGURANÇA || IsPlayerAdmin(playerid))
		{
	        if(PlayerArea[playerid] != AreaBanco)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Você deve estar em um Banco.");
			    return 1;
			}
			if(PegouGrana[playerid] == 0)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Você deve pegar o dinheiro do Carro Forte.");
			    return 1;
			}
			PegouGrana[playerid] = 0;
			new str[128];
			new value = (random(6) + 2) * 100;
			format(str, sizeof str, "Dinheiro depositado, você recebeu $%d,00 dólares.", value);
			SendClientMessage(playerid, COLOR_SEGURANÇA, str);
		    Pay(playerid, value);
		    KillTimer(RetomarTrabalho[playerid]);
			return 1;
		} else {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não é Segurança.");
			return 1;
		}
	}

	if(strcmp(cmd, "/escolta", true) == 0)
	{
	    if(pStats[playerid][Prof] == SEGURANÇA || IsPlayerAdmin(playerid))
		{
		    if(!IsPlayerInAnyVehicle(playerid))
		    {
		        SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo.");
		        return 1;
		    }
		    if(!IsSecurity(GetPlayerVehicleID(playerid)))
		    {
		        SendClientMessage(playerid, COLOR_GRAY, "Você não está em um Carro Forte.");
		        return 1;
		    }
            new sec_id = GetVehicleSecurityID(GetPlayerVehicleID(playerid));
            if(Malote[sec_id] == 0)
            {
                SendClientMessage(playerid, COLOR_GRAY, "Esse Carro Forte não está carregado.");
                return 1;
            }
			new string[128], zone[28];
			GetPlayer2DZone(playerid, zone, 28);
			SendClientMessage(playerid, COLOR_SEGURANÇA, "Escolta solicitada...");
			format(string, sizeof string, "[CENTRAL] %s está pedindo escolta policial para transportar o malote [Local: %s]", PlayerName(playerid), zone);
			SendClientMessagePolicia(COLOR_CENTRAL, string);
			SendClientMessagePolicia(COLOR_CENTRAL, "[CENTRAL] Pegue um veículo e vá antes que algum assaltante roube o dinheiro.");
			return 1;
		} else {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não é Segurança.");
			return 1;
		}
	}
	/*
	if(strcmp(cmd, "/reforco", true) == 0) {
	    if(pStats[playerid][Prof] == COP_MILITAR || pStats[playerid][Prof] == EXERCITO || pStats[playerid][Prof] == COP_RODOVIARIO || pStats[playerid][Prof] == COP_SWAT || pStats[playerid][Prof] == COP_NARCOTICOS || pStats[playerid][Prof] == DELEGADO || IsPlayerAdmin(playerid)){
			for(new i=0; i<MAX_SLOTS; i++){
           		if(pStats[i][Prof] == COP_SWAT || pStats[i][Prof] == EXERCITO || pStats[i][Prof] == COP_RODOVIARIO || pStats[i][Prof] == COP_MILITAR || pStats[i][Prof] == COP_NARCOTICOS || pStats[i][Prof] == DELEGADO){
					ChamadoReforco[playerid][i] = 0;
		            new string[128];
		            new zone[28];
		            GetPlayer2DZone(playerid, zone, 28);
					format(string,sizeof(string),"[CENTRAL] Todas as unidades, Oficial solicitando reforço, rápido [Oficial: %s] [Local: %s]",PlayerName(playerid), zone);
					SendClientMessagePolicia(COLOR_CENTRAL, string);
					SendClientMessagePolicia(COLOR_CENTRAL, "[CENTRAL] Caso queira responder o chamado digite: [ /res ]");
					ChamadoReforco[playerid][i] = 1;
					return 1;
				}
			}
		}
	}
	*/
	if(strcmp(cmd, "/res", true) == 0) {
	    if(pStats[playerid][Prof] == COP_MILITAR || pStats[playerid][Prof] == EXERCITO || pStats[playerid][Prof] == COP_RODOVIARIO || pStats[playerid][Prof] == COP_SWAT || pStats[playerid][Prof] == COP_NARCOTICOS || pStats[playerid][Prof] == DELEGADO){
			for(new i=0; i<MAX_SLOTS; i++){
     			if(pStats[i][Prof] == COP_SWAT || pStats[i][Prof] == EXERCITO || pStats[i][Prof] == COP_RODOVIARIO || pStats[i][Prof] == COP_MILITAR || pStats[i][Prof] == COP_NARCOTICOS || pStats[i][Prof] == DELEGADO){
					if(i != playerid){
						if(ChamadoReforco[playerid][i] == 1){
	   						ChamadoReforco[playerid][i] = 0;
				            new string[128];
							SendClientMessage(playerid, COLOR_CENTRAL, "[CENTRAL] Reforço confirmando oficial.");
							format(string,sizeof(string),"[CENTRAL] [Oficial: %s] Respondeu o chamado do Oficial %s",PlayerName(i),PlayerName(playerid));
							SendClientMessagePolicia(COLOR_CENTRAL, string);
							SendClientMessage(i,COLOR_CENTRAL, "[CENTRAL] Reforço a caminho, caso necessitem de mais, avisem-nos.");
       						SetPlayerMarkerForPlayer(playerid, i, ProfColors[pStats[playerid][Prof]]);
       						SetPlayerMarkerForPlayer(i, playerid, ProfColors[pStats[i][Prof]]);
							return 1;
						} else {
							SendClientMessage(playerid,COLOR_CENTRAL, "[CENTRAL] Nenhuma solicitação de Reforço.");
							return 1;
						}
					}
				}
			}
 		}
 		else if(pStats[playerid][Prof] == ENTREGADOR_PIZZA){
  			if(RaceCheckpointStatus[playerid] != PEDIDO){
    			if(CheckpointStatus[playerid] != ENTREGANDO_PIZZA){
					if(IsMotoPizza(GetPlayerVehicleID(playerid))){
	    				if(PizzasMoto[GetVehicleMotoPizzaID(GetPlayerVehicleID(playerid))] > 0){
	    				    new i = EntregaPizzaILigada[playerid];
							EntregaPizzaILigada[playerid] = 0;
							SetPlayerRaceCheckpoint(playerid,1,LocalRadarPizza[playerid][0],LocalRadarPizza[playerid][1],LocalRadarPizza[playerid][2],0.0,0.0,0.0,2.0);
							SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, " ");
							SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, "[PIZZARIA] A posição da entrega está no seu radar!");
							SendClientMessage(i, COLOR_ENTREGADOR_PIZZA, "[PIZZARIA] Senhor, um entregador atendeu seu pedido, ele está a caminho, aguarde.");
							RaceCheckpointStatus[playerid] = PEDIDO;
							EntregandoIndoProCliente[i] = 1;
							ASuaPizzaChegou[playerid] = i;
							return 1;
						} else {
						    SendClientMessage(playerid, COLOR_GRAY, "Sua moto não tem Pizzas");
							return 1;
						}
					} else {
					    SendClientMessage(playerid, COLOR_GRAY, "Você não está na moto.");
						return 1;
					}
				} else {
				    SendClientMessage(playerid, COLOR_GRAY, "Você já está entregando pizzas.");
					return 1;
				}
			} else {
			    SendClientMessage(playerid, COLOR_GRAY, "Você já tem uma solicitação, vá até o local.");
				return 1;
			}
		} else if(pStats[playerid][Prof] == TAXISTA || pStats[playerid][Prof] == MOTO_TAXISTA){
		    if(CorridaToI[playerid] != -1 && FazendoCorrida[playerid] == 0){
		        new pass = CorridaToI[playerid];
		        new string[128];
				FazendoCorrida[playerid] = 1;
				format(string,sizeof(string),"[YELLOW'S Taxis] %s atendeu seu pedido, aguarde ele está a caminho.",PlayerName(playerid));
				SendClientMessage(pass, COLOR_TAXISTA, string);
				SendClientMessage(playerid, COLOR_TAXISTA, "[YELLOW'S Taxis] Foi marcado um CheckPoint em seu radar, siga-o para ir até o passageiro!");
				SendClientMessage(playerid, COLOR_WHITE,   "Para desativa-lo digite /desativarcheckpoint");
				SetPlayerRaceCheckpoint(playerid,1,LocalRadarTaxi[playerid][0],LocalRadarTaxi[playerid][1],LocalRadarTaxi[playerid][2],0.0,0.0,0.0,2.0);
				RaceCheckpointStatus[playerid] = SERVICO;
	     	   	for(new i=0; i<MAX_SLOTS; i++){
			    	if((pStats[i][Prof] == TAXISTA || pStats[i][Prof] == MOTO_TAXISTA) && i != playerid){
						format(string,sizeof(string),"[YELLOW'S Taxis] %s atendeu o pedido de %s, espere outro chamado.",PlayerName(playerid), PlayerName(CorridaToI[playerid]));
						SendClientMessage(i, COLOR_TAXISTA, string);
						CorridaToI[i] = -1;
					}
				}
				return 1;
			} else {
			   SendClientMessage(playerid, COLOR_GRAY, "Você já está em uma corrida, VÁ PEGAR O PASSAGEIRO ou desative.");
			   return 1;
			}
		} else if(pStats[playerid][Prof] == TRAFICANTE){
			if(RaceCheckpointStatus[playerid] != DEIXARDROGA){
				new pass = EntregaDrogaILigada[playerid];
			    new string[128];
				format(string,sizeof(string),"[MORRO] %s atendeu seu pedido de droga, aguarde ele está a caminho.",PlayerName(playerid));
				SendClientMessage(pass, COLOR_TRAFICANTE, string);
				SendClientMessage(playerid, COLOR_TRAFICANTE, "[MORRO] Foi marcado um CheckPoint em seu radar, siga-o para ir deixar a droga.");
				SendClientMessage(playerid, COLOR_WHITE,   "Para desativa-lo digite /desativarcheckpoint");
				SetPlayerRaceCheckpoint(playerid,1,LocalRadarDroga[playerid][0],LocalRadarDroga[playerid][1],LocalRadarDroga[playerid][2],0.0,0.0,0.0,2.0);
				RaceCheckpointStatus[playerid] = DEIXARDROGA;
	 		} else {
			    SendClientMessage(playerid, COLOR_TRAFICANTE, "[MORRO] Você já tem uma solicitação vá entregar ou cancele.");
			    return 1;
			}
		} else if(pStats[playerid][Prof] == VENDEDOR_DE_ARMAS){
			if(RaceCheckpointStatus[playerid] != DEIXARARMA){
				new pass = EntregaArmaILigada[playerid];
			    new string[128];
				format(string,sizeof(string),"[AMMU-NATION] %s atendeu seu pedido de arna, aguarde ele está a caminho.",PlayerName(playerid));
				SendClientMessage(pass, COLOR_VENDEDOR_DE_ARMAS, string);
				SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS, "[AMMU-NATION] Foi marcado um CheckPoint em seu radar, siga-o para ir deixar a arna.");
				SendClientMessage(playerid, COLOR_WHITE,   "Para desativa-lo digite /desativarcheckpoint");
				SetPlayerRaceCheckpoint(playerid,1,LocalRadarDroga[playerid][0],LocalRadarDroga[playerid][1],LocalRadarDroga[playerid][2],0.0,0.0,0.0,2.0);
				RaceCheckpointStatus[playerid] = DEIXARARMA;
	 		} else {
		    	SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS, "[AMMU-NATION] Você já tem uma solicitação vá entregar ou cancele.");
		    	return 1;
			}
		}

	}
	if(strcmp(cmd, "/rastrear", true) == 0) {
	    if(pStats[playerid][Prof] != COP_MILITAR && pStats[playerid][Prof] != COP_RODOVIARIO && pStats[playerid][Prof] != COP_SWAT && pStats[playerid][Prof] != DELEGADO && !IsPlayerAdmin(playerid)){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não trabalha no departamento policial!");
	        return 1;
		}
	    new tmp[128], plid;
	    tmp = strtok(cmdtext,idx);
	    plid = strval(tmp);
	    if(!strlen(tmp)){
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /rastrear [id]");
	        return 1;
		}
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador desconectado!");
		    return 1;
		}
		if(!Logado[plid]){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador tem que estar logado!");
		    return 1;
		}
		if(!fexist(PlayerFile(PlayerName(plid)))){
		    SendClientMessage(playerid, COLOR_GRAY, "UM ERRO OCORREU!!!");
		    return 1;
		}
		if(Rastreado[plid] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Um oficial já está rastreando os veículos desse jogador!");
		    return 1;
		}
		if(GetQtVehicles(plid) == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não possui nenhum veículo!");
		    return 1;
		}
		if(Rastreando[playerid] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Você já está rastreando um veículo!");
		    return 1;
		}
		new veh = -1;
		for(new v = 1; v < GetQtVehicles(plid) + 1; v++){
			if(GetVehicles(plid, v) != -1 && JaDestruido[GetVehicles(plid, v)] == 0){
   				veh = GetVehicles(plid, v);
				break;
			}
		}
		if(veh == -1){
	    	SendClientMessage(playerid, COLOR_GRAY, "Nenhum veículo encontrado, todos parecem estar vendidos ou destruídos!");
	    	return 1;
		}
		new Float:X,Float:Y,Float:Z,string[128];
		GetVehiclePos(veh,X,Y,Z);
		SetPlayerCheckpoint(playerid,X,Y,Z,3.0);
		CheckpointStatus[playerid] = RASTREAMENTO;
		Rastreador[playerid] = plid;
		Rastreando[playerid] = 1;
		VeiculoRastreando[playerid] = 1;
		Rastreado[plid] = 1;
		Rastreador2[plid] = playerid;
		format(string,sizeof(string),"%s está rastreando seus veículos",PlayerName(playerid));
		SendClientMessage(plid, COLOR_COP_SWAT, string);
		SendClientMessage(playerid, COLOR_COP_SWAT, "Rastreador ativado no veículo de ID 1, para alterar pressione:");
		SendClientMessage(playerid, COLOR_PALHA, "Num Lock 4: Veículo de ID anterior.");
		SendClientMessage(playerid, COLOR_PALHA, "Num Lock 6: Veículo de ID inferior.");
		return 1;
	}
	if(strcmp(cmd, "/desativarrastreador", true) == 0) {
	    if(!Rastreando[playerid]){
	        SendClientMessage(playerid, COLOR_GRAY, "Seu rastreador está desativado!");
	        return 1;
		}
		DesativarRastreador(playerid);
		return 1;
	}

	if(strcmp(cmd, "/algemar", true) == 0) {
	    if(pStats[playerid][Prof] != COP_MILITAR && pStats[playerid][Prof] != COP_RODOVIARIO && pStats[playerid][Prof] != COP_SWAT && pStats[playerid][Prof] != DELEGADO) return SendClientMessage(playerid, COLOR_GRAY, "Você não trabalha no departamento de polícia.");
        if(pStats[playerid][Morrendo] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você está morrendo, não pode sequestrar ninguém.");
		if(Algemou[playerid]==1) return SendClientMessage(playerid, COLOR_GRAY, "Você já algemou alguém...");
	    new tmp[128],plid,string[128];
	    tmp=strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /algemar [id]");
		plid=strval(tmp);
		if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
		if(PodeAlgemar[playerid] == plid){
			new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez;
			GetPlayerPos(playerid,x,y,z);
			GetPlayerPos(plid,x2,y2,z2);
			distancex = x - x2;
			distancey = y - y2;
			distancez = z - z2;
			if(floatround(distancex) < 2 && floatround(distancex) > -2 && floatround(distancey) < 2 && floatround(distancey) > -2 && floatround(distancez) < 2 && floatround(distancez) > -2){
			    SetPlayerControl(plid,0);
			    Algemado[plid]=1;
				Algemou[playerid]=1;
				AlgemaInfo[plid][0]=playerid;
			    AlgemaInfo[playerid][1]=plid;
			    SendClientMessage(playerid, COLOR_COP_SWAT, "Jogador algemado...");
			    SendClientMessage(playerid, COLOR_JUIZ, "Comandos: /chutar /levantar /empurrar /levar /largar /colocarnoveiculo /tirardoveiculo");
			    format(string,128,"Você foi algemado pelo oficial Sr. %s",PlayerName(playerid));
			    SendClientMessage(plid, COLOR_GRAY, string);
			    return 1;
			}
			else{
			    SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto do jogador para algema-lo");
			    return 1;
			}
		} else {
		    if(plid != playerid)
			{
				if(IsPlayerBackOfPlayer(plid, playerid))
				{
				    if(GetPlayerWantedLevel(plid) < 1)
				    {
				        SendClientMessage(playerid, COLOR_GRAY, "O jogador deve estar sendo procurado para você algema-lo à força.");
				        return 1;
				    }
				    SetPlayerControl(plid,0);
				    Algemado[plid]=1;
					Algemou[playerid]=1;
					AlgemaInfo[plid][0]=playerid;
				    AlgemaInfo[playerid][1]=plid;
				    SendClientMessage(playerid, COLOR_COP_SWAT, "Você algemou ele!");
				    SendClientMessage(playerid, COLOR_JUIZ, "Comandos: /chutar /levantar /empurrar /levar /largar /colocarnoveiculo /tirardoveiculo");
				    format(string,128,"Você foi algemado pelo oficial Sr. %s",PlayerName(playerid));
				    SendClientMessage(plid, COLOR_GRAY, string);
				    return 1;
  				}
  				else
  				{
  				    SendClientMessage(playerid, COLOR_GRAY, "Chegue atrás do jogador para algemá-lo.");
  				    return 1;
  				}
			}
	    }
	}

	if(strcmp(cmd, "/chutar", true) == 0) {
	    if(pStats[playerid][Prof] == ASSASSINO){
	        if(Amarrou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não amarrou ninguém...");
	        new plid=AmarradoInfo[playerid][1];
	        if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
	        new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez,Float:getdistance,Float:newx,Float:newy;
	        GetPlayerPos(playerid,x,y,z);
	        GetXYInFrontOfPlayer(playerid,x,y,0.3);
			GetPlayerPos(plid,x2,y2,z2);
			distancex=x-x2;
			distancey=y-y2;
			distancez=z-z2;
			getdistance=(distancex*distancex+distancey*distancey+distancez*distancez);
			if(getdistance<3){
			    GetXYInFrontOfPlayer(playerid,newx,newy,0.4);
				SetPlayerPos(plid,newx,newy,z+0.2);
				new Float:h;
			    GetPlayerHealth(plid,h);
				if(h > 5) SetPlayerHealthEx(plid, h-2);
				else SetPlayerHealthEx(plid, 1);
				GameTextForPlayer(playerid,"~w~toma...",2000,4);
				GameTextForPlayer(playerid,"~r~] uii doeu ]",2000,4);
		    	ApplyAnimation(playerid,"FIGHT_D","FightD_1",4.1,0,1,1,1,1);
		    	ApplyAnimation(plid,"FIGHT_C","HitC_3",4.1,0,1,1,1,1);
		    	return 1;
			} else {
			    SendClientMessage(playerid, COLOR_GRAY, "O jogador deve estar na sua frente...");
			    return 1;
			}
		} else {
        	if(Algemou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não algemou ninguém...");
	        new plid=AlgemaInfo[playerid][1];
	        if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
	        new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez,Float:getdistance,Float:newx,Float:newy;
	        GetPlayerPos(playerid,x,y,z);
	        GetXYInFrontOfPlayer(playerid,x,y,0.3);
			GetPlayerPos(plid,x2,y2,z2);
			distancex=x-x2;
			distancey=y-y2;
			distancez=z-z2;
			getdistance=(distancex*distancex+distancey*distancey+distancez*distancez);
			if(getdistance<3){
			    GetXYInFrontOfPlayer(playerid,newx,newy,0.4);
				SetPlayerPos(plid,newx,newy,z+0.2);
				new Float:h;
			    GetPlayerHealth(plid,h);
				if(h > 5) SetPlayerHealthEx(plid, h-2);
				else SetPlayerHealthEx(plid, 1);
				GameTextForPlayer(playerid,"~w~toma...",2000,4);
				GameTextForPlayer(playerid,"~r~] uii doeu ]",2000,4);
		    	ApplyAnimation(playerid,"FIGHT_D","FightD_1",4.1,0,1,1,1,1);
		    	ApplyAnimation(plid,"FIGHT_C","HitC_3",4.1,0,1,1,1,1);
		    	return 1;
			} else{
			    SendClientMessage(playerid, COLOR_GRAY, "O jogador deve estar na sua frente...");
			    return 1;
			}
		}
	}
	if(strcmp(cmd, "/levantar", true) == 0) {
	    if(pStats[playerid][Prof] == ASSASSINO){
	        if(Amarrou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não amarrou ninguém...");
	        new plid=AmarradoInfo[playerid][1];
	        if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
	        new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez,Float:getdistance;
	        GetPlayerPos(playerid,x,y,z);
	        GetXYInFrontOfPlayer(playerid,x,y,0.3);
			GetPlayerPos(plid,x2,y2,z2);
			distancex=x-x2;
			distancey=y-y2;
			distancez=z-z2;
			getdistance=(distancex*distancex+distancey*distancey+distancez*distancez);
			if(getdistance<3){
				SetPlayerControl(plid, 1);
				SetPlayerSpecialAction(plid, SPECIAL_ACTION_HANDSUP);
				ClearAnimations(plid);
				SetTimerEx("SetPlayerControl", 1000, 0, "dd", plid, 0);
			    SendClientMessage(playerid, COLOR_ASSASSINO, "Jogador levantado...");
			    SendClientMessage(plid, COLOR_ASSASSINO, "O sequestrador te levantou...");
		    	return 1;
			} else {
			    SendClientMessage(playerid, COLOR_GRAY, "O jogador deve estar na sua frente...");
			    return 1;
			}
		} else {
        	if(Algemou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não algemou ninguém...");
	        new plid=AlgemaInfo[playerid][1];
	        if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
	        new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez,Float:getdistance;
	        GetPlayerPos(playerid,x,y,z);
	        GetXYInFrontOfPlayer(playerid,x,y,0.3);
			GetPlayerPos(plid,x2,y2,z2);
			distancex=x-x2;
			distancey=y-y2;
			distancez=z-z2;
			getdistance=(distancex*distancex+distancey*distancey+distancez*distancez);
			if(getdistance<3){
				SetPlayerControl(plid, 1);
				SetPlayerSpecialAction(plid, SPECIAL_ACTION_HANDSUP);
				ClearAnimations(plid);
				SetTimerEx("SetPlayerControl", 1000, 0, "dd", plid, 0);
			    SendClientMessage(playerid, COLOR_COP_SWAT, "Jogador levantado...");
			    SendClientMessage(plid, COLOR_COP_SWAT, "O policial te levantou...");
		    	return 1;
			} else{
			    SendClientMessage(playerid, COLOR_GRAY, "O jogador deve estar na sua frente...");
			    return 1;
			}
		}
	}
	if(strcmp(cmd, "/empurrar", true) == 0) {
		if(pStats[playerid][Prof] == ASSASSINO){
	        if(Amarrou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não amarrou ninguém...");
	        new plid=AmarradoInfo[playerid][1];
	        if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
	        new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez,Float:getdistance,Float:newx,Float:newy;
	        GetPlayerPos(playerid,x,y,z);
	        GetXYInFrontOfPlayer(playerid,x,y,0.3);
			GetPlayerPos(plid,x2,y2,z2);
			distancex=x-x2;
			distancey=y-y2;
			distancez=z-z2;
			getdistance=(distancex*distancex+distancey*distancey+distancez*distancez);
			if(getdistance<3){
			    GetXYInFrontOfPlayer(playerid,newx,newy,0.7);
				SetPlayerPos(plid,newx,newy,z);
				SendClientMessage(playerid, COLOR_ASSASSINO, "Empurrado...");
				SendClientMessage(plid, COLOR_ASSASSINO, "O sequestrador te empurrou!");
				ApplyAnimation(playerid,"CHOPPA","CHOPPA_Pushes",4.1,0,1,1,1,1);
		    	return 1;
			}
			else{
			    SendClientMessage(playerid, COLOR_GRAY, "O jogador deve estar na sua frente...");
			    return 1;
			}
		} else {
        	if(Algemou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não algemou ninguém...");
       		new plid=AlgemaInfo[playerid][1];
	    	if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
	    	new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez,Float:getdistance,Float:newx,Float:newy;
	        GetPlayerPos(playerid,x,y,z);
	        GetXYInFrontOfPlayer(playerid,x,y,0.3);
			GetPlayerPos(plid,x2,y2,z2);
			distancex=x-x2;
			distancey=y-y2;
			distancez=z-z2;
			getdistance=(distancex*distancex+distancey*distancey+distancez*distancez);
			if(getdistance<3){
			    GetXYInFrontOfPlayer(playerid,newx,newy,0.7);
				SetPlayerPos(plid,newx,newy,z);
				SendClientMessage(playerid, COLOR_JUIZ, "Empurrado...");
				SendClientMessage(plid, COLOR_JUIZ, "O policial lhe empurrou");
				ApplyAnimation(playerid,"CHOPPA","CHOPPA_Pushes",4.1,0,1,1,1,1);
		    	return 1;
			}
			else{
			    SendClientMessage(playerid, COLOR_GRAY, "O jogador deve estar na sua frente...");
			    return 1;
			}
		}
	}
	if(strcmp(cmd, "/levar", true) == 0) {
		if(pStats[playerid][Prof] == ASSASSINO){
	        if(Amarrou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não amarrou ninguém...");
			new plid=AmarradoInfo[playerid][1];
			if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
	        new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez,Float:getdistance;
	        GetPlayerPos(playerid,x,y,z);
	        GetXYInFrontOfPlayer(playerid,x,y,0.3);
			GetPlayerPos(plid,x2,y2,z2);
			distancex=x-x2;
			distancey=y-y2;
			distancez=z-z2;
			getdistance=(distancex*distancex+distancey*distancey+distancez*distancez);
			if(getdistance<3){
			    SendClientMessage(playerid, COLOR_JUIZ, "OK... Leve esse jogador próximo à um veículo para coloca-lo nele...");
			    SendClientMessage(playerid, COLOR_COP_SWAT, "/largar para largar o jogador...");
				LevandoJogador[playerid] = 1;
			    TimerLevando[playerid]=SetTimerEx("LevarJogador",300,1,"dd",playerid,plid);
		    	return 1;
			}
			else{
			    SendClientMessage(playerid, COLOR_GRAY, "O jogador deve estar na sua frente...");
			    return 1;
			}
		} else {
			if(Algemou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não algemou ninguém...");
			new plid=AlgemaInfo[playerid][1];
			if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
	        new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez,Float:getdistance;
	        GetPlayerPos(playerid,x,y,z);
	        GetXYInFrontOfPlayer(playerid,x,y,0.3);
			GetPlayerPos(plid,x2,y2,z2);
			distancex=x-x2;
			distancey=y-y2;
			distancez=z-z2;
			getdistance=(distancex*distancex+distancey*distancey+distancez*distancez);
			if(getdistance<3){
			    SendClientMessage(playerid, COLOR_JUIZ, "OK... Leve esse jogador próximo à um veículo policial para coloca-lo nele...");
			    SendClientMessage(playerid, COLOR_COP_SWAT, "/largar para largar o jogador...");
				LevandoJogador[playerid] = 1;
			    TimerLevando[playerid]=SetTimerEx("LevarJogador",300,1,"dd",playerid,plid);
		    	return 1;
			}
			else{
			    SendClientMessage(playerid, COLOR_GRAY, "O jogador deve estar na sua frente...");
			    return 1;
			}
		}
	}
	if(strcmp(cmd, "/largar", true) == 0) {
		if(pStats[playerid][Prof] == ASSASSINO){
	        if(Amarrou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não amarrou ninguém...");
			new plid=AmarradoInfo[playerid][1];
			if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
			if(LevandoJogador[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está levando nenhum jogador...");
			LevandoJogador[playerid] = 0;
			KillTimer(TimerLevando[playerid]);
			SendClientMessage(playerid, COLOR_COP_SWAT, "Feito...");
			return 1;
		} else {
	    	if(Algemou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não algemou ninguém...");
			new plid=AlgemaInfo[playerid][1];
			if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
			if(LevandoJogador[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está levando nenhum jogador...");
			LevandoJogador[playerid] = 0;
			KillTimer(TimerLevando[playerid]);
			SendClientMessage(playerid, COLOR_COP_SWAT, "Feito...");
			return 1;
		}
	}
	if(strcmp(cmd, "/colocarnoveiculo", true) == 0) {
		if(pStats[playerid][Prof] == ASSASSINO){
	        if(Amarrou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não amarrou ninguém...");
			new plid=AmarradoInfo[playerid][1];
			if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
			if(LevandoJogador[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está levando nenhum jogador...");
			if(GetDistancePlayerToCar(plid,5)==0) return SendClientMessage(playerid, COLOR_GRAY, "Esse jogador deve estar próximo à um veículo.");
			new rand=random(2)+2;
			PutPlayerInVehicle(plid,GetPlayerCars[plid],rand);
			GetPlayerCars[plid]=INVALID_VEHICLE_ID;
			KillTimer(TimerLevando[playerid]);
			LevandoJogador[playerid]=0;
			SendClientMessage(playerid, COLOR_GRAY, "Ele foi colocado no carro, leve-o para o cativeiro, siga o CheckPoint no radar...");
			SendClientMessage(plid, COLOR_GRAY, "Você foi colocado no veículo, acho que ele está te levando para o Cativeiro.");
			return 1;
		} else {
        	if(Algemou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não algemou ninguém...");
			new plid=AlgemaInfo[playerid][1];
			if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
			if(LevandoJogador[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está levando nenhum jogador...");
			if(GetDistanceToCopCars(plid,5)==0 || GetCopCars[plid]==INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_GRAY, "Esse jogador deve estar próximo à um veículo policial...");
			new rand=random(2)+2;
			PutPlayerInVehicle(plid,GetCopCars[plid],rand);
			GetCopCars[plid]=INVALID_VEHICLE_ID;
			LevandoJogador[playerid]=0;
			SetPlayerControl(plid,0);
			KillTimer(TimerLevando[playerid]);
			SendClientMessage(playerid, COLOR_COP_SWAT, "Jogador colocado no veículo, leve-o para a Delegacia, siga o CheckPoint no radar...");
			SendClientMessage(plid, COLOR_GRAY, "Você foi colocado no veículo policial...");
			SetPlayerRaceCheckpoint(playerid,1,1535.4200,-1666.4794,13.3828,0.0,0.0,0.0,4.0);
			RaceCheckpointStatus[playerid] = ENTREGANDO_PRISIONEIRO1;
			return 1;
		}
	}
	if(strcmp(cmd, "/tirardoveiculo", true) == 0) {
		if(pStats[playerid][Prof] == ASSASSINO){
	        if(Amarrou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não amarrou ninguém...");
			new plid=AmarradoInfo[playerid][1];
			if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
	        if(!IsPlayerInAnyVehicle(plid)) return SendClientMessage(playerid, COLOR_GRAY, "O jogador não está em um veículo...");
			SendClientMessage(playerid, COLOR_GRAY, "O jogador foi tirado do carro!");
			SendClientMessage(plid, COLOR_GRAY, "Você foi tirado do veículo.");
			RemovePlayerFromVehicle(plid);
			return 1;
		} else {
        	if(Algemou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não algemou ninguém...");
			new plid=AlgemaInfo[playerid][1];
			if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
	        if(!IsPlayerInAnyVehicle(plid)) return SendClientMessage(playerid, COLOR_GRAY, "O jogador não está em um veículo...");
			SendClientMessage(playerid, COLOR_COP_SWAT, "Jogador tirado do veículo, leve-o para a Delegacia, siga o CheckPoint no radar...");
			SendClientMessage(plid, COLOR_GRAY, "Você foi tirado do veículo policial...");
			RemovePlayerFromVehicle(plid);
			return 1;
		}
	}
	if(strcmp(cmd, "/desalgemar", true) == 0) {
		if(Algemou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não algemou ninguém...");
		new tmp[128],plid,string[128];
		tmp=strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /desalgemar [id]");
		plid=strval(tmp);
		if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
		if(AlgemaInfo[playerid][1] != plid || AlgemaInfo[plid][0] != playerid) return SendClientMessage(playerid, COLOR_GRAY, "Você não algemou esse jogador...");
        new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez;
		GetPlayerPos(playerid,x,y,z);
		GetPlayerPos(plid,x2,y2,z2);
		distancex = x - x2;
		distancey = y - y2;
		distancez = z - z2;
		if(floatround(distancex) < 2 && floatround(distancex) > -2 && floatround(distancey) < 2 && floatround(distancey) > -2 && floatround(distancez) < 2 && floatround(distancez) > -2){
		    SetPlayerControl(plid,1);
		    ClearAnimations(plid);
		    Algemado[plid]=0;
			Algemou[playerid]=0;
			LevandoJogador[playerid]=0;
			GetCopCars[plid]=INVALID_VEHICLE_ID;
			AlgemaInfo[plid][0]=-1;
		    AlgemaInfo[playerid][1]=-1;
		    SendClientMessage(playerid, COLOR_COP_SWAT, "Algemas removidas do jogador");
		    format(string,128,"O oficial Sr. %s removeu suas algemas, está livre...",PlayerName(playerid));
		    SendClientMessage(plid, COLOR_COP_SWAT, string);
		    return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto do jogador para desalgema-lo");
		    return 1;
		}
	}
	if(strcmp(cmd, "/desamarrar", true) == 0) {
		new tmp[128],plid,string[128];
		tmp=strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /desamarrar [id]");
		plid=strval(tmp);
		if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
		if(playerid == plid) return SendClientMessage(playerid, COLOR_GRAY, "Você não pode se auto-desamarrar.");
        new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez;
		GetPlayerPos(playerid,x,y,z);
		GetPlayerPos(plid,x2,y2,z2);
		distancex = x - x2;
		distancey = y - y2;
		distancez = z - z2;
		if(floatround(distancex) < 2 && floatround(distancex) > -2 && floatround(distancey) < 2 && floatround(distancey) > -2 && floatround(distancez) < 2 && floatround(distancez) > -2){
			Sequestro[plid] = 0;
			Cativeiro[plid] = 0;
			CelularBloqueado[plid] = 0;
			SetPlayerControl(plid,1);
			ClearAnimations(plid);
		    Amarrado[plid]=0;
			Amarrou[playerid]=0;
			AmarradoInfo[plid][0]=-1;
		    AmarradoInfo[playerid][1]=-1;
			EstouComSequestro[playerid] = 0;
			CelularBloqueado[playerid] = 0;
		    SendClientMessage(playerid, COLOR_GRAY, "Desamarrado e libertado.");
		    format(string,128,"%s te desamarrou, aconselho CORRER!!!",PlayerName(playerid));
		    SendClientMessage(plid, COLOR_GRAY, string);
		    return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto do jogador para desamarra-lo");
		    return 1;
		}
	}
	if(strcmp(cmd, "/megafone", true) == 0) {
	    if(IsPolice(GetPlayerVehicleID(playerid)))
		{
		    new say[128];
		    strmid(say, cmdtext, 9, strlen(cmdtext));
			new mf_say[128];
			format(mf_say, sizeof mf_say, "[MEGA FONE] %s: o< %s", PlayerName(playerid), say);
			new Float:X1, Float:Y1, Float:Z1, Float:X2, Float:Y2, Float:Z2;
			GetPlayerPos(playerid, X1, Y1, Z1);
			for(new i = 0; i < MAX_SLOTS; i++)
			{
				if(IsPlayerConnected(i) && Logado[i] == 1)
				{
					GetPlayerPos(i, X2, Y2, Z2);
					if(floatsqroot(floatpower(X1 - X2, 2) + floatpower(Y1 - Y2, 2) + floatpower(Z1 - Z2, 2)) < MEGA_FONE_RADIUS)
					{
					    SendClientMessage(i, COLOR_COP_SWAT, mf_say);
					}
				}
			}
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma viatura policial para usar o Mega Fone!");
			return 1;
		}
	}
	if(strcmp(cmd, "/abrirdelegacia", true) == 0)
	{
	    if(pStats[playerid][Prof] != DELEGADO && !IsPlayerAdmin(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não é Delegado, não tem permissão para usar esse comando...");
			return 1;
		}
	    new p_open[128];
	    p_open = strtok(cmdtext, idx);
	    if(!strlen(p_open))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /abrirdelegacia [para quem?]");
	        SendClientMessage(playerid, COLOR_GRAY, "NOMES DISPONÍVEIS: Todos, Policiais, Delegados, Ninguem.");
			return 1;
		}
		if(strcmp(p_open, "Todos", true) == 0)
		{
		    DelegaciaAberta = 0;
		    SendClientMessage(playerid, COLOR_DELEGADO, "A Delegacia foi aberta para todos...");
		    return 1;
		}
		if(strcmp(p_open, "Policiais", true) == 0)
		{
		    DelegaciaAberta = 1;
		    SendClientMessage(playerid, COLOR_DELEGADO, "A Delegacia foi aberta somente para Policiais...");
		    return 1;
		}
		if(strcmp(p_open, "Delegados", true) == 0)
		{
		    DelegaciaAberta = 2;
		    SendClientMessage(playerid, COLOR_DELEGADO, "A Delegacia foi aberta somente para Delegados...");
		    return 1;
		}
		if(strcmp(p_open, "Ninguem", true) == 0)
		{
		    DelegaciaAberta = 3;
		    SendClientMessage(playerid, COLOR_DELEGADO, "A Delegacia foi trancada para todos...");
		    return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /abrirdelegacia [para quem?]");
	        SendClientMessage(playerid, COLOR_GRAY, "NOMES DISPONÍVEIS: Todos, Policiais, Delegados, Ninguem.");
			return 1;
		}
	}
	if(strcmp(cmd, "/pegarequipamento", true) == 0)
	{
	    if(PlayerArea[playerid] != AreaDelegacia)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está na delegacia.");
		    return 1;
		}
		if(PegouEquipamento[playerid] == 1)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você já pegou equipamento, espere mais para pegar denovo...");
		    return 1;
		}
		new w[13], a;
		for(new s = 0; s < 13; s++)
		{
			GetWeaponData(playerid, s, w[s], a);
		}
	    if(pStats[playerid][Prof] == COP_MILITAR)
	    {
	        GiveWeapon(playerid, 3, 1);
	        if(w[3] == 0)
	        {
	        	GiveWeapon(playerid, 25, 50);
			}
			new Float:arm;
	        GetPlayerArmour(playerid, arm);
	        if(arm < 20)
	        {
	        	SetPlayerArmourEx(playerid, 20);
			}
			PegouEquipamento[playerid] = 1;
			TimerPegarEquipamento[playerid] = SetTimerEx("PegandoEquipamento", 900000, 0, "d", playerid);
			SendClientMessage(playerid, COLOR_CENTRAL, "Equipamento pego, você recebeu:");
			SendClientMessage(playerid, COLOR_CENTRAL, "Cacetete, Shotgun/50 , Colete (20 porcento)");
			SendClientMessage(playerid, COLOR_CENTRAL, "Você só recebeu as armas das quais o slot estava vazio...");
			return 1;
	    }
	    else if(pStats[playerid][Prof] == COP_RODOVIARIO)
	    {
	        GiveWeapon(playerid, 3, 1);
	        if(w[2] == 0)
	        {
	        	GiveWeapon(playerid, 23, 100);
			}
			new Float:arm;
	        GetPlayerArmour(playerid, arm);
	        if(arm < 20)
	        {
	        	SetPlayerArmourEx(playerid, 20);
			}
			PegouEquipamento[playerid] = 1;
			TimerPegarEquipamento[playerid] = SetTimerEx("PegandoEquipamento", 900000, 0, "d", playerid);
			SendClientMessage(playerid, COLOR_CENTRAL, "Equipamento pego, você recebeu:");
			SendClientMessage(playerid, COLOR_CENTRAL, "Cacetete , 9mm c/ silenciador/100 , Colete (20 porcento)");
			SendClientMessage(playerid, COLOR_CENTRAL, "Você só recebeu as armas das quais o slot estava vazio...");
	        return 1;
	    }
	    else if(pStats[playerid][Prof] == COP_SWAT)
	    {
	        if(w[8] == 0)
	        {
	        	GiveWeapon(playerid, 17, 5);
			}
			if(w[2] == 0)
	        {
				GiveWeapon(playerid, 24, 40);
			}
			if(w[3] == 0)
	        {
				GiveWeapon(playerid, 27, 50);
			}
			if(w[4] == 0)
	        {
				GiveWeapon(playerid, 29, 120);
			}
			if(w[5] == 0)
	        {
				GiveWeapon(playerid, 31, 90);
			}
			PegouEquipamento[playerid] = 1;
			TimerPegarEquipamento[playerid] = SetTimerEx("PegandoEquipamento", 900000, 0, "d", playerid);
			SetPlayerArmourEx(playerid, MAX_ARMOUR);
			SendClientMessage(playerid, COLOR_CENTRAL, "Equipamento pego, você recebeu:");
			SendClientMessage(playerid, COLOR_CENTRAL, "Bombas de gás/5 , Desert Eagle/40 , Combat Shotgun/50 , MP5/120 , M4/90 , Colete");
			SendClientMessage(playerid, COLOR_CENTRAL, "Você só recebeu as armas das quais o slot estava vazio...");
            return 1;
	    }
	    else if(pStats[playerid][Prof] == DELEGADO)
	    {
	        if(w[2] == 0)
	        {
	        	GiveWeapon(playerid, 24, 60);
			}
			if(w[3] == 0)
	        {
				GiveWeapon(playerid, 27, 30);
			}
			if(w[4] == 0)
	        {
	        	GiveWeapon(playerid, 29, 70);
			}
			SetPlayerArmourEx(playerid, MAX_ARMOUR);
			PegouEquipamento[playerid] = 1;
			TimerPegarEquipamento[playerid] = SetTimerEx("PegandoEquipamento", 900000, 0, "d", playerid);
			SendClientMessage(playerid, COLOR_CENTRAL, "Equipamento pego, você recebeu:");
			SendClientMessage(playerid, COLOR_CENTRAL, "Desert Eagle/60 , Combat Shotgun/30 , MP5/70 , Colete");
			SendClientMessage(playerid, COLOR_CENTRAL, "Você só recebeu as armas das quais o slot estava vazio...");
            return 1;
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não trabalha no Departamento de Policia.");
	        return 1;
	    }
	}
	if(strcmp(cmd, "/promover", true) == 0) {
	    if(pStats[playerid][Prof] == DELEGADO || IsPlayerAdmin(playerid))
	    {
	        new tmp[128];
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COLOR_GRAY, "USO: /promover [id]");
	            return 1;
	        }
	        new plid = strval(tmp);
	        if(!IsPlayerConnected(plid) || !Logado[plid])
	        {
	            SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
	            return 1;
	        }
	        if(GetDistanceBetweenPlayers(playerid, plid) > 15.0)
	        {
	            SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto do jogador para promove-lo.");
	            return 1;
	        }
	        if(plid == playerid && !IsPlayerAdmin(playerid))
	        {
	            SendClientMessage(playerid, COLOR_GRAY, "Você não tem o direito de se auto-promover.");
	            return 1;
	        }
	        if(pStats[plid][Prof] == COP_MILITAR)
	        {
	            if(pStats[plid][XL] < Profissoes[COP_RODOVIARIO][ProfLevel])
	            {
					new str[128];
					format(str, sizeof str, "Esse jogador não tem level suficiente para ser promovido. Seu Level: %d , Necessário: %d", pStats[plid][XL], Profissoes[COP_RODOVIARIO][ProfLevel]);
					SendClientMessage(playerid, COLOR_GRAY, str);
					return 1;
	            }
	            SendClientMessage(playerid, COLOR_DELEGADO, "Jogador promovido.");
	            SendClientMessage(plid, COLOR_CENTRAL, "Parabéns! Você foi promovido para Policial Rodoviário, isso aí, continue assim e não pare nem quando chegar ao topo...");
	            AplicarProfissao(plid, COP_RODOVIARIO, true);
	            return 1;
	        }
	        else if(pStats[plid][Prof] == COP_RODOVIARIO)
	        {
	            if(pStats[plid][XL] < Profissoes[COP_SWAT][ProfLevel])
	            {
					new str[128];
					format(str, sizeof str, "Esse jogador não tem level suficiente para ser promovido. Seu Level: %d , Necessário: %d", pStats[plid][XL], Profissoes[COP_SWAT][ProfLevel]);
					SendClientMessage(playerid, COLOR_GRAY, str);
					return 1;
	            }
	            SendClientMessage(playerid, COLOR_DELEGADO, "Jogador promovido.");
	            SendClientMessage(plid, COLOR_CENTRAL, "PARABÉNS! Você foi promovido para Policial SWAT, isso aí, agora as coisas vão ficar mais difíceis, mesmo assim mostre que");
	            SendClientMessage(plid, COLOR_CENTRAL, "você realmente merece esse cargo, olha lá hein, não vai desistir, falta pouco pra chegar ao topo da carreira.");
	            AplicarProfissao(plid, COP_SWAT, true);
	            return 1;
	        }
	        else if(pStats[plid][Prof] == COP_SWAT)
	        {
	            if(pStats[plid][XL] < Profissoes[DELEGADO][ProfLevel])
	            {
					new str[128];
					format(str, sizeof str, "Esse jogador não tem level suficiente para ser promovido. Seu Level: %d , Necessário: %d", pStats[plid][XL], Profissoes[DELEGADO][ProfLevel]);
					SendClientMessage(playerid, COLOR_GRAY, str);
					return 1;
	            }
	            SendClientMessage(playerid, COLOR_DELEGADO, "Jogador promovido.");
	            SendClientMessage(plid, COLOR_CENTRAL, "MEUS PARABÉNS! Você foi promovido para Delegado, chegou ao topo da carreira policial, isso que é");
	            SendClientMessage(plid, COLOR_CENTRAL, "mostrar esforço na carreira, à partir de agora você fará parte da administração policial.");
	            AplicarProfissao(plid, DELEGADO, true);
	            return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não trabalha no Departamento de Polícia de Los Santos, ou já é Delegado.");
	            return 1;
	        }
	    }
	}
	if(strcmp(cmd, "/rebaixar", true) == 0) {
	    if(pStats[playerid][Prof] == DELEGADO || IsPlayerAdmin(playerid))
	    {
	        new tmp[128];
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COLOR_GRAY, "USO: /rebaixar [id]");
	            return 1;
	        }
	        new plid = strval(tmp);
	        if(!IsPlayerConnected(plid) || !Logado[plid])
	        {
	            SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
	            return 1;
	        }
	        if(GetDistanceBetweenPlayers(playerid, plid) > 15.0)
	        {
	            SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto do jogador para rebaixa-lo.");
	            return 1;
	        }
	        if(plid == playerid && !IsPlayerAdmin(playerid))
	        {
	            SendClientMessage(playerid, COLOR_GRAY, "Você não tem o direito de se auto-rebaixar.");
	            return 1;
	        }
	        if(pStats[plid][Prof] == COP_MILITAR)
	        {
	            SendClientMessage(playerid, COLOR_DELEGADO, "Jogador demitido.");
				SendClientMessage(plid, COLOR_CENTRAL, "Você está demitido da carreira policial... Agora procure arranjar outro emprego, vai ser difícil");
				SendClientMessage(plid, COLOR_CENTRAL, "começar tudo denovo sendo que muitos já perderam os pontos com você.");
				AplicarProfissao(plid, DESEMPREGADO);
				return 1;
			}
	        if(pStats[plid][Prof] == COP_RODOVIARIO)
	        {
	            SendClientMessage(playerid, COLOR_DELEGADO, "Jogador rebaixado.");
	            SendClientMessage(plid, COLOR_CENTRAL, "Péssimas notícias, você foi rebaixado para Policial Militar, não faz mal, se esforce no trabalho");
                SendClientMessage(plid, COLOR_CENTRAL, "e mostre que você merece ser Policial Rodoviário...");
				AplicarProfissao(plid, COP_MILITAR, true);
	            return 1;
	        }
	        else if(pStats[plid][Prof] == COP_SWAT)
	        {
	            SendClientMessage(playerid, COLOR_DELEGADO, "Jogador rebaixado.");
                SendClientMessage(plid, COLOR_CENTRAL, "Vixe... Sinto muito, você foi rebaixado para Policial Rodoviário...");
	            SendClientMessage(plid, COLOR_CENTRAL, "Não se dê por vencido, recupere seu cargo de SWAT e mostre que você merece.");
				AplicarProfissao(plid, COP_RODOVIARIO, true);
	            return 1;
	        }
	        else if(pStats[plid][Prof] == DELEGADO)
	        {
	            SendClientMessage(playerid, COLOR_DELEGADO, "Jogador rebaixado.");
	            SendClientMessage(plid, COLOR_CENTRAL, "Eita, um passo atrás... Você foi rebaixado para Policial SWAT, agora não fará mais parte");
	            SendClientMessage(plid, COLOR_CENTRAL, "da administração policial, mesmo assim, siga em frente para recuperar a profissão.");
	            AplicarProfissao(plid, COP_SWAT, true);
	            return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não trabalha no Departamento de Polícia de Los Santos.");
	            return 1;
	        }
	    }
	}
	if(strcmp(cmd, "/confiscar", true) == 0)
	{
	    if(pStats[playerid][Prof] == COP_MILITAR || pStats[playerid][Prof] == COP_RODOVIARIO || pStats[playerid][Prof] == COP_SWAT || pStats[playerid][Prof] == DELEGADO || IsPlayerAdmin(playerid))
		{
		    new tmp[128];
		    new string[128];
		    tmp = strtok(cmdtext, idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid, COLOR_GRAY, "USO: /confiscar [id] [armas/celular/chavesmestras/habilitacao/porte/passaporte]");
		        return 1;
		    }
		    new plid = strval(tmp);
		    if(!IsPlayerConnected(plid))
		    {
		        SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		        return 1;
		    }
		    if(GetDistanceBetweenPlayers(playerid, plid) > 7)
		    {
		        SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto do jogador.");
		        return 1;
		    }
		    tmp = strtok(cmdtext, idx);
		    if(compare(tmp, "armas"))
		    {
		        SendClientMessage(playerid, COLOR_CENTRAL, "Armas confiscadas...");
		        format(string, sizeof string, "Suas armas sem porte foram confiscadas por %s.", PlayerName(playerid));
				SendClientMessage(plid, COLOR_CENTRAL, string);
				ConfiscarArmas(plid);
		        return 1;
		    }
		    else if(compare(tmp, "celular"))
		    {
		       	if(pStats[plid][PhoneNumb] == 0){
		   			SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não tem celular!");
		  			return 1;
				}
				if(pStats[plid][GCell] == 1){
		   			SendClientMessage(playerid, COLOR_GRAY, "O celular desse jogador está guardado, peça para ele pega-lo!");
		   			return 1;
				}
 				for(new p=1000; p<LastPN; p++)
				 {
        	    	if(strcmp(PlayerName(plid),CelularesNum[p-1000],true) == 0)
					{
        	    	    AcrescentarXpoints(playerid, 1);
						set(CelularesNum[p-1000],"NONE");
						SendClientMessage(playerid, COLOR_CENTRAL, "Celular confiscado.");
						format(string, sizeof(string), "[CENTRAL COP] O Oficial da Políca Sr. %s lhe rendeu e confiscou seu celular.",PlayerName(playerid));
						SendClientMessage(plid, COLOR_CENTRAL, string);
						pStats[plid][PhoneNumb] = 0;
					}
				}
		       	return 1;
		    }
		    else if(compare(tmp, "chavesmestras"))
		    {
		        UsingChaveMestra[plid] = -1;
		        pStats[plid][ChaveMestra] = 0;
		        SendClientMessage(playerid, COLOR_CENTRAL, "Chaves Mestras confiscadas...");
				format(string, sizeof string, "O oficial Sr. %s confiscou suas chaves mestras.", PlayerName(playerid));
				SendClientMessage(plid, COLOR_CENTRAL, string);
				AcrescentarXpoints(playerid,1);
		        return 1;
		    }
		    else if(compare(tmp, "habilitacao"))
		    {
		        if(pStats[plid][HabTerrestre] == 0){
		   			SendClientMessage(playerid, COLOR_GRAY, "Ele não tem Habilitação Terrestre não poderá Confiscar");
		  			return 1;
				}
				AcrescentarXpoints(playerid,1);
		        pStats[plid][HabTerrestre] = 0;
				format(string, sizeof(string), "[CENTRAL] Habilitação Terrestre de %s confiscada, bom trabalho!",PlayerName(plid));
				SendClientMessage(playerid, COLOR_CENTRAL, string);
				format(string, sizeof(string), "[CENTRAL] O Oficial da Políca Sr. %s confiscou sua Habilitação Terrestre.",PlayerName(playerid));
				SendClientMessage(plid, COLOR_CENTRAL, string);
				SendClientMessage(plid, COLOR_CENTRAL, "[CENTRAL] Terá que refazer o teste e se tiver multas terá que pagar");
		        return 1;
		    }
		    else if(compare(tmp, "porte"))
		    {
		        if(pStats[plid][Porte] == 0){
		   			SendClientMessage(playerid, COLOR_GRAY, "Ele não tem Porte de Armas não poderá Confiscar");
		  			return 1;
				}
				AcrescentarXpoints(playerid,1);
		        pStats[plid][Porte] = 0;
				format(string, sizeof(string), "[CENTRAL] Porte de Armas de %s confiscado, bom trabalho!",PlayerName(plid));
				SendClientMessage(playerid, COLOR_CENTRAL, string);
				format(string, sizeof(string), "[CENTRAL] O Oficial da Políca Sr. %s confiscou seu Porte de Armas, comporte-se.",PlayerName(playerid));
				SendClientMessage(plid, COLOR_CENTRAL, string);
		        return 1;
		    }
		    else if(compare(tmp, "passaporte"))
		    {
		    	AcrescentarXpoints(playerid,1);
		        pStats[plid][Passaporte] = 0;
				format(string, sizeof(string), "[CENTRAL] Passaporte de %s confiscado, bom trabalho!",PlayerName(plid));
				SendClientMessage(playerid, COLOR_CENTRAL, string);
				format(string, sizeof(string), "[CENTRAL] O Oficial da Políca Sr. %s confiscou seu Passaporte, não poderá sair dos Limites de Los Santos.",PlayerName(playerid));
				SendClientMessage(plid, COLOR_CENTRAL, string);
		        return 1;
      	    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_GRAY, "USO: /confiscar [id] [armas/celular/chavesmestras/habilitacao/porte/passaporte]");
		        return 1;
		    }
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não trabalha no Departamento de polícia de Los Santos.");
		    return 1;
		}
	}
	if(strcmp(cmd, "/prender", true) == 0)
	{
	    if(pStats[playerid][Prof] == COP_MILITAR || pStats[playerid][Prof] == COP_RODOVIARIO || pStats[playerid][Prof] == COP_SWAT || pStats[playerid][Prof] == DELEGADO || IsPlayerAdmin(playerid))
		{
			new plid = strval(strtok(cmdtext,idx));
			new reason[128];
			reason = strtok(cmdtext,idx);
			new r = -1;
			for(new m = 0; m < sizeof Motivos; m++)
			{
			    if(compare(Motivos[m][mTag], reason))
			    {
			        r = m;
			        break;
			    }
			}
			if(r == -1)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "USO: /prender [id] [motivo]");
			    SendClientMessage(playerid, COLOR_GRAY, "Motivos: h (homicidio) , a (assalto) , r (roubo) , d (desacato) , c (corrupao) , i (indenizacao)");
			    SendClientMessage(playerid, COLOR_GRAY, "Motivos: con (contrabando) , f (fuga de prisao) , th (tentativa de homicidio , dp (destruindo patrimonio)");
                SendClientMessage(playerid, COLOR_GRAY, "Motivos: fq (formando quadrilha) , pd (portando drogas) , pa (portando armas sem porte) s (sequestro)");
                SendClientMessage(playerid, COLOR_GRAY, "Motivos: db (dirigindo bebado) , t (trafico) , td (transportando drogas) , su (suspeito)");
				return 1;
			}
			if(IsPlayerConnected(plid) && Logado[plid] == 1){
			    if(GetDistanceBetweenPlayers(playerid, plid) > 15){
			        SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto!");
					return 1;
				}
				if(GetPlayerState(plid) == PLAYER_STATE_DRIVER){
				    SendClientMessage(playerid, COLOR_GRAY, "Ele não pode estar dirigindo.");
				    return 1;
				}
				if(plid == playerid){
				    SendClientMessage(playerid, COLOR_GRAY, "Quer se auto-prender?");
				    return 1;
				}
				new string[128];
				Prisioneiro[playerid] = plid;
				SeEntregando[plid] = 1;
				PolicialApreendendo[plid] = playerid;
				pStats[plid][HorasPreso] += Motivos[r][mTime];
				pStats[plid][Fianca] = 0;
				pStats[plid][LastBustedReason] = r;
				if(pStats[plid][HorasPreso] > 20)
				{
				    pStats[plid][HorasPreso] = 20;
				}
				format(string, sizeof(string), "[POLICIA] O Oficial Sr: %s está pedindo uma prisão de %d horas por %s", PlayerName(playerid), Motivos[r][mTime], Motivos[r][mName]);
				SendClientMessage(plid, COLOR_CENTRAL, string);
				SendClientMessage(plid, COLOR_CENTRAL, "Para se entregar digite /entregar ou /naoentregar");
				SendClientMessage(plid, COLOR_WHITE, "OBS: Se você se entregar irá ficar preso menos tempo...");
				SendClientMessage(playerid, COLOR_CENTRAL, "Foi solicitado ao outro suspeito, insista que ele digite /entregar, para seguir com o procedimento de prisão.");
	   			TempoPreso[plid] = SetTimerEx("PrendendoJogador", 20000, 0, "dd",playerid, plid);
 				return 1;
			}
			else{
    	        SendClientMessage(playerid, COLOR_GRAY, "Jogador não está conectado/logado");
				return 1;
			}
		} else {
			SendClientMessage(playerid, COLOR_GRAY, "Você não faz parte do departamento de policia!");
			return 1;
		}
	}


	if(strcmp(cmd, "/consultar", true) == 0){
	    if(IsPlayerConnected(playerid)) {
			if(IsPolice(GetPlayerVehicleID(playerid))){
			    new string[128];
			    new tmp[128];
			    new plid;
			    tmp = strtok(cmdtext,idx);
			    plid = strval(tmp);
				if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /consultar [id]");
				if(IsPlayerConnected(plid)){
					format(string, sizeof(string),"|=====| Consulta de Crimes de %s |=====|", PlayerName(plid));
   					SendClientMessage(playerid, COLOR_LIGHT_RED, string);
					format(string, sizeof(string), "Nome : %s", PlayerName(plid));
					SendClientMessage(playerid, COLOR_WHITE,string);
					format(string, sizeof(string), "Crime : %s", Crime[plid][Motivo]);
					SendClientMessage(playerid, COLOR_WHITE,string);
					format(string, sizeof(string), "Vítima : %s", Crime[plid][Vitima]);
					SendClientMessage(playerid, COLOR_WHITE,string);
					format(string, sizeof(string), "Denunciado por : %s", Crime[plid][Reportado]);
					SendClientMessage(playerid, COLOR_WHITE,string);
					SendClientMessage(playerid, COLOR_LIGHT_RED,"_______________________________________");
				} else {
				    SendClientMessage(playerid, COLOR_GRAY, "   Este Jogador não está conectado.");
				    return 1;
				}
			} else if(pStats[playerid][Prof] == ADVOGADO){
			    new string[128];
			    new tmp[128];
			    new plid;
			    tmp = strtok(cmdtext,idx);
			    plid = strval(tmp);
				if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /consultar [id]");
				if(IsPlayerConnected(plid)){
					format(string, sizeof(string),"|=====| Consulta de Crimes de %s |=====|", PlayerName(plid));
   					SendClientMessage(playerid, COLOR_LIGHT_RED, string);
					format(string, sizeof(string), "Nome : %s", PlayerName(plid));
					SendClientMessage(playerid, COLOR_WHITE,string);
					format(string, sizeof(string), "Crime : %s", Crime[plid][Motivo]);
					SendClientMessage(playerid, COLOR_WHITE,string);
					format(string, sizeof(string), "Vítima : %s", Crime[plid][Vitima]);
					SendClientMessage(playerid, COLOR_WHITE,string);
					format(string, sizeof(string), "Denunciado por : %s", Crime[plid][Reportado]);
					SendClientMessage(playerid, COLOR_WHITE,string);
					SendClientMessage(playerid, COLOR_LIGHT_RED,"_______________________________________");
				} else {
				    SendClientMessage(playerid, COLOR_GRAY, "   Este Jogador não está conectado.");
				    return 1;
				}
			} else  {
			    SendClientMessage(playerid, COLOR_GRAY, "   Você não está em um veículo da polícia ou no Departamento de Polícia.");
				return 1;
			}
		}
		return 1;
	}



	if(strcmp(cmd, "/checarficha", true) == 0)
	{
	    if(pStats[playerid][Prof] == ADVOGADO || pStats[playerid][Prof] == JUIZ || pStats[playerid][Prof] == COP_MILITAR || pStats[playerid][Prof] == COP_RODOVIARIO || pStats[playerid][Prof] == COP_SWAT || pStats[playerid][Prof] == DELEGADO || IsPlayerAdmin(playerid))
		{
	    	new tmp[128];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAY, "USO: /checarficha [nome]");
			    return 1;
			}
			if(PlayerArea[playerid] != AreaDelegacia)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Você não está na delegacia.");
			    return 1;
			}
			if(!fexist(PlayerFile(tmp)))
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Jogador inexistente.");
			    return 1;
			}
			new string[128];
			format(string, sizeof string, "|=====| Ficha Criminal de %s |=====|", tmp);
   			SendClientMessage(playerid, COLOR_LIGHT_RED, string);
			if(IsStringAName(tmp))
			{
			    new id = IDName(tmp);
			    format(string, sizeof string, "Foi preso %d vez(es)", pStats[id][AmountBusted]);
			    SendClientMessage(playerid, COLOR_WHITE, string);
				new amntlvl = GetPlayerWantedLevel(id);
				if(amntlvl <= 0)
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Atualmente não situado na lista de procurados.");
				}
                else
                {
                    format(string, sizeof string, "Atual procurado nível %d.", amntlvl);
                    SendClientMessage(playerid, COLOR_WHITE, string);
                }
                new busted = pStats[id][Preso];
                if(busted == 0)
                {
                    SendClientMessage(playerid, COLOR_WHITE, "Atualmente não está preso.");
                    if(pStats[id][AmountBusted] > 0)
                	{
                    	format(string, sizeof string, "Ultima prisão por: %s", Motivos[pStats[id][LastBustedReason]][mName]);
                    	SendClientMessage(playerid, COLOR_WHITE, string);
                	}
                }
                else
                {
                    new reason = pStats[id][LastBustedReason];
                    format(string, sizeof string, "Atualmente preso por %s.", Motivos[reason][mName]);
                    SendClientMessage(playerid, COLOR_WHITE, string);
                }
			    return 1;
			}
			else
			{
                format(string, sizeof string, "Foi preso %d vez(es)", strval(GetValue(PlayerFile(tmp), "AmountBusted")));
			    SendClientMessage(playerid, COLOR_WHITE, string);
			    new amntlvl = strval(GetValue(PlayerFile(tmp), "Wanted"));
			    if(amntlvl <= 0)
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Atualmente não situado na lista de procurados.");
				}
				else
				{
				    format(string, sizeof string, "Atual procurado nível %d.", amntlvl);
                    SendClientMessage(playerid, COLOR_WHITE, string);
				}

                new busted = strval(GetValue(PlayerFile(tmp), "Preso"));
                if(busted == 0)
                {
                    SendClientMessage(playerid, COLOR_WHITE, "Atualmente não está preso.");
                    if(strval(GetValue(PlayerFile(tmp), "AmountBusted")) > 0)
                	{
                	    format(string, sizeof string, "Ultima prisão por: %s", Motivos[strval(GetValue(PlayerFile(tmp), "LastBustedReason"))][mName]);
                	    SendClientMessage(playerid, COLOR_WHITE, string);
                	}
                }
                else
                {
                    new reason = strval(GetValue(PlayerFile(tmp), "LastBustedReason"));
                    format(string, sizeof string, "Atualmente preso por %s.", Motivos[reason][mName]);
                    SendClientMessage(playerid, COLOR_WHITE, string);
                }
			    return 1;
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não trabalha no departamento de polícia!");
		    return 1;
		}
	}
	if(strcmp(cmd, "/entregar", true) == 0) {
	    if(SeEntregando[playerid] == 1){
	        new string[128];
 			KillTimer(TempoPreso[playerid]);
 			pStats[playerid][Fianca] = 0;
			format(string,sizeof(string),"Você se entregou ao oficial Sr: %s, ele vai ler seus Direitos",PlayerName(PolicialApreendendo[playerid]));
            SendClientMessage(playerid, COLOR_COP_SWAT, string);
		    SeEntregando[playerid] = 0;
            SetTimerEx("PrendendoJogador",5000,0,"dd",PolicialApreendendo[playerid],playerid);
            return 1;
        } else {
            SendClientMessage(playerid, COLOR_GRAY, "Não há nenhum mandato contra você");
			return 1;
		}
	}
	if(strcmp(cmd, "/naoentregar", true) == 0) {
	    if(SeEntregando[playerid] == 1){
	        new string[128];
	        KillTimer(TempoPreso[playerid]);
	        pStats[playerid][LastBustedReason] = 9;
	        SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 1);
			SendClientMessage(playerid, COLOR_COP_SWAT, "Você não se entregou e seu nome foi automaticamente colocado na lista de procurados com base na Lei Estadual Nº5473/2.");
	        format(string, sizeof(string), "O Suspeito %s foi colocado na lista de procurados pelo oficial: %s",PlayerName(playerid),PlayerName(PolicialApreendendo[playerid]));
			SendClientMessageToAll(COLOR_COP_SWAT,string);
			SeEntregando[playerid] = 0;
			return 1;
        } else {
            SendClientMessage(playerid, COLOR_GRAY, "Não há nenhum mandato contra você");
			return 1;
		}
	}
    if(strcmp(cmd, "/revistar", true) == 0) {
        if(pStats[playerid][Prof] == COP_MILITAR || pStats[playerid][Prof] == COP_RODOVIARIO || pStats[playerid][Prof] == COP_SWAT || pStats[playerid][Prof] == DELEGADO){
            new tmp[128];
           	new plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/revistar [id]");
				return 1;
			}
 			plid = strval(tmp);
   			if(!IsPlayerConnected(plid)){
 				SendClientMessage(playerid, COLOR_GRAY, "Este jogador não está conectado.");
				return 1;
			}
		    if(GetDistanceBetweenPlayers(playerid, plid) > 20){
		        SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe!");
				return 1;
			}
			if(Revistando[playerid] == 1 || Revistado[plid] == 1){
		        SendClientMessage(playerid, COLOR_GRAY, "Você já está revistando, ou o jogador está sendo revistado.");
				return 1;
			}
			if(plid == playerid){
		        SendClientMessage(playerid, COLOR_GRAY, "Você que se auto revistar?");
				return 1;
			}
			SendClientMessage(playerid,COLOR_CENTRAL,"[CENTRAL] O Suspeito recebeu a mensagem pedindo que encosta na parede para ser revistado.");
   			new string[128];
   			SendClientMessage(plid, COLOR_GREEN, " ");
		    format(string,sizeof(string),"[OFICIAL] Senhor %s peço que encoste na parede e deixe eu realizar a revista em seu corpo.",PlayerName(plid));
            SendClientMessage(plid, COLOR_COP_SWAT, string);
            SendClientMessage(plid, COLOR_COP_SWAT,"[OFICIAL] Compreenda minha solicitação digitando: /autorizar, /naoautorizar");
			Revistando[playerid] = 1;
			Revistado[plid] = 1;
			AindaNaoAceitou[plid] = 1;
			SetTimerEx("NaoAceitou",30000,0,"dd",playerid,plid);
		    OficialSolicitou[plid] = playerid;
		    return 1;
		}
	}
    if(strcmp(cmd, "/autorizar", true) == 0) {
   		if(!IsPlayerConnected(OficialSolicitou[playerid])){
 			SendClientMessage(playerid, COLOR_GRAY, "O policial não está mais online.");
 			return 1;
		}
	    if(GetDistanceBetweenPlayers(playerid, OficialSolicitou[playerid]) > 20){
	        SendClientMessage(playerid, COLOR_GRAY, "Você está muito distante do policial.");
			return 1;
		}
		if(Revistando[OficialSolicitou[playerid]] != 1 || Revistado[playerid] != 1){
	        SendClientMessage(playerid, COLOR_GRAY, "Você já está revistando, ou o jogador está sendo revistado.");
			return 1;
		}
		AindaNaoAceitou[playerid] = 0;
		AcrescentarXpoints(OficialSolicitou[playerid], 1);
		SendClientMessage(playerid, COLOR_COP_SWAT, "[OFICIAL] Obrigado, mãos para o alto.");
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
		SendClientMessage(playerid, COLOR_COP_SWAT, "[OFICIAL] Encontrei:");
		SendClientMessage(OficialSolicitou[playerid], COLOR_COP_SWAT, "[OFICIAL] Ele tem:");
		new string[128];
		if(Heroina[playerid] > 0){
			format(string,sizeof(string), "[OFICIAL] %d injeções de heroína.", Heroina[playerid]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string,sizeof(string), "[OFICIAL] %d injeções de heroína.", Heroina[playerid]);
			SendClientMessage(OficialSolicitou[playerid], COLOR_WHITE, string);
		}
		if(Cocaina[playerid] > 0){
			format(string,sizeof(string), "[OFICIAL] %d gramas de pó de Cocaína.", Cocaina[playerid]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string,sizeof(string), "[OFICIAL] %d gramas de pó de Cocaína.", Cocaina[playerid]);
			SendClientMessage(OficialSolicitou[playerid], COLOR_WHITE, string);
		}
		if(Maconha[playerid] > 0){
			format(string,sizeof(string), "[OFICIAL] %d papelotes de maconha.", Maconha[playerid]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string,sizeof(string), "[OFICIAL] %d papelotes de maconha", Maconha[playerid]);
			SendClientMessage(OficialSolicitou[playerid], COLOR_WHITE, string);
		}
		if((Maconha[playerid] == 0) && (Cocaina[playerid] == 0) && (Heroina[playerid] ==0)){
			SendClientMessage(playerid, COLOR_COP_SWAT, "[OFICIAL] Momento irei checar se há armas.");
			SendClientMessage(OficialSolicitou[playerid], COLOR_COP_SWAT, "[OFICIAL] Sem Drogas, checando armas...");
		}
		SetTimerEx("VerArmas",5000,0,"dd",OficialSolicitou[playerid],playerid);
		return 1;
	}

	if(strcmp(cmd, "/naoautorizar", true) == 0) {
   		if(!IsPlayerConnected(OficialSolicitou[playerid])){
 			SendClientMessage(playerid, COLOR_GRAY, "O policial não está mais online.");
 			return 1;
		}
	    if(GetDistanceBetweenPlayers(playerid, OficialSolicitou[playerid]) > 20){
	        SendClientMessage(playerid, COLOR_GRAY, "Você está muito distante do policial.");
			return 1;
		}
		if(Revistando[OficialSolicitou[playerid]] != 1 || Revistado[playerid] != 1){
	        SendClientMessage(playerid, COLOR_GRAY, "Você já está revistando, ou o jogador está sendo revistado.");
			return 1;
		}
		if(AindaNaoAceitou[playerid] == 1){
			Revistando[OficialSolicitou[playerid]] = 0;
			Revistado[playerid] = 0;
			AindaNaoAceitou[playerid] = 0;
		    SendClientMessage(OficialSolicitou[playerid], COLOR_COP_SWAT,"[OFICIAL] A revista não foi concluída o jogador não aceitou.");
		    SendClientMessage(OficialSolicitou[playerid], COLOR_COP_SWAT,"[OFICIAL] Ele pode ser um suspeito verifique");
		    SendClientMessage(playerid, COLOR_COP_SWAT,"Você não aceitou a revista.");
			return 1;
		}
	}
    if(strcmp(cmd, "/apreenderveiculo", true) == 0)
	{
        if(pStats[playerid][Prof] == COP_MILITAR || pStats[playerid][Prof] == COP_RODOVIARIO || pStats[playerid][Prof] == COP_SWAT || pStats[playerid][Prof] == DELEGADO)
		{
			if(!IsPlayerInAnyVehicle(playerid))
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo.");
			    return 1;
			}
			new vid = GetPlayerVehicleID(playerid);
			if(vid < AmountServerVehicles)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Você não pode apreender um veículo do servidor.");
			    return 1;
			}
			if(vStats[vid][Confiscado] == 1)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Esse veículo já está confiscado ¬¬'");
			    return 1;
			}
			if(vStats[vid][Dividas] <= 0 && DrogasPlantadas[vid] == 0)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Esse veículo não tem dívidas nem drogas plantadas.");
			    return 1;
			}
			ConfiscandoVeiculo[playerid] = vid;
			if(vStats[vid][VTravas] > 0)
			{
			    vStats[vid][VTravas] = 1;
			}
			if(vStats[vid][VAlarme] > 0)
			{
			    vStats[vid][VAlarme] = 2;
			}
			SetPlayerControl(playerid, 1);
			SendClientMessage(playerid, COLOR_GREEN, "Fazendo ligação direta... Feito!");
			SendClientMessage(playerid, COLOR_GREEN, "Desativando Travas e Alarmes... Feito!");
			SendClientMessage(playerid, COLOR_CENTRAL, "Leve o veículo para a Delegacia e estacione-o lá (/estacionar).");
       		return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não trabalha no Departamento de Polícia.");
		    return 1;
		}
	}

    if(strcmp(cmd, "/liberarveiculo", true) == 0)
	{
        if(pStats[playerid][Prof] == COP_MILITAR || pStats[playerid][Prof] == COP_RODOVIARIO || pStats[playerid][Prof] == COP_SWAT || pStats[playerid][Prof] == DELEGADO)
		{
			new tmp[128];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAY, "USO: /liberarveiculo [id]");
			    return 1;
			}
			new plid = strval(tmp);
			if(!IsPlayerConnected(plid))
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
			    return 1;
			}
			if(!IsPlayerInAnyVehicle(playerid))
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo.");
			    return 1;
			}
			new vid = GetPlayerVehicleID(playerid);
			if(vid < AmountServerVehicles)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Veículos do servidor não são confiscados...");
			    return 1;
			}
			if(vStats[vid][Confiscado] == 0)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Esse veículo não está confiscado.");
			    return 1;
			}
			if(vStats[vid][Dividas] > 0)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Ele deve pagar as dívidas do veículo primeiro.");
			    return 1;
			}
			if(!compare(PlayerName(plid), vStats[vid][VDono]))
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Ele não é o dono do veículo.");
			    return 1;
			}
			SendClientMessage(playerid, COLOR_CENTRAL, "Veículo liberado.");
			SendClientMessage(plid, COLOR_CENTRAL, "Seu veículo foi liberado, da próxima vez, mantenha as dívidas em dia e cuide melhor dele.");
			SendClientMessage(plid, COLOR_CENTRAL, "AVISO: Qualquer Trava ou Alarme foram desativados, reative-os.");
			vStats[vid][Confiscado] = 0;
			return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não trabalha no Departamento de Polícia.");
		    return 1;
		}
	}

    if(strcmp(cmd, "/vexame", true) == 0)
	{
    	if(pStats[playerid][Prof] == COP_MILITAR || pStats[playerid][Prof] == COP_RODOVIARIO || pStats[playerid][Prof] == COP_SWAT || pStats[playerid][Prof] == DELEGADO)
		{
 			if(!IsPlayerInAnyVehicle(playerid))
 			{
	  			SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em um veículo!");
		  		return 1;
		  	}
		  	else
		  	{
 				if(DrogasPlantadas[GetPlayerVehicleID(playerid)] > 0)
			 	{
		  			new msg[128];
				  	format(msg,sizeof(msg),"Foram encontradas %d droga(s) plantada(s) nesse veículo!",DrogasPlantadas[GetPlayerVehicleID(playerid)]);
				  	SendClientMessage(playerid, COLOR_COP_SWAT, msg);
				  	SendClientMessage(playerid, COLOR_COP_SWAT, "Apreenda-o com /apreenderveiculo");
			  		return 1;
			  	}
			  	else
			  	{
			  		SendClientMessage(playerid, COLOR_GRAY, "Não há nenhuma droga nesse veiculo!");
				  	return 1;
			  	}
		  	}
 		}
	  	else
	  	{
	 	 	SendClientMessage(playerid, COLOR_GRAY, "Você não é Narcótico!");
		  	return 1;
	  	}
	}
	if(strcmp(cmd, "/exame", true) == 0) {
	    if(pStats[playerid][Prof] == COP_MILITAR || pStats[playerid][Prof] == COP_RODOVIARIO || pStats[playerid][Prof] == COP_SWAT || pStats[playerid][Prof] == DELEGADO){
	        new tmp[128];
	        new msg[128];
	        new plid;
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp)) {
	            SendClientMessage(playerid,COLOR_GRAY,"USO: /exame [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid) && Logado[playerid] == 1){
			    if(GetDistanceBetweenPlayers(playerid,plid) > 20){
			        SendClientMessage(playerid,COLOR_GRAY,"Você está muito longe, chegue mais perto!");
					return 1;
				} else {
				    SendClientMessage(playerid,COLOR_COP_SWAT,"Resultados do exame anti-dopping:");
				    format(msg, sizeof(msg), "Heroina : %d doses injetadas",pStats[plid][DosesHeroina]);
				    SendClientMessage(playerid,COLOR_WHITE,msg);
				    format(msg, sizeof(msg), "Maconha : %d doses fumadas",pStats[plid][DosesMaconha]);
				    SendClientMessage(playerid,COLOR_WHITE,msg);
				    format(msg, sizeof(msg), "Cocaína : %d doses cheiradas",pStats[plid][DosesCocaina]);
				    SendClientMessage(playerid,COLOR_WHITE,msg);
				    SendClientMessage(playerid,COLOR_COP_SWAT,"Exame anti-dopping concluído!");
					return 1;
				}
			}
			else {
			    SendClientMessage(playerid,COLOR_GRAY,"Jogador não conectado/logado");
				return 1;
			}
		} else {
			SendClientMessage(playerid,COLOR_GRAY,"Você não tem permissão para isso!");
			return 1;
		}
	}
    if(strcmp(cmd, "/arrombarcasa", true) == 0) {
        new pickupid = GetPickupHouse[playerid];
		if(GetPickupHouse[playerid] == -1) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na entrada de uma casa!");
	    if(pStats[playerid][Prof] != ASSALTANTE){
		    if(!compare(pckStats[pickupid][PickupDono],"NONE") && strlen(pckStats[pickupid][PickupDono]) > 0){
				if(Mandato[playerid] != pickupid){
				    SendClientMessage(playerid, COLOR_GRAY, "Você não tem mandato para entrar aqui, o Juiz deve lhe conceder um!");
					return 1;
				}
	       		NaCasa[playerid] = 1;
				GetPlayerPos(playerid,EntradaCasa[playerid][0],EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
				PickupEntradaCasa[playerid] = pickupid;
				SetPlayerVirtualWorld(playerid,pickupid);
				RadioJogadorLigado(playerid);
				SendClientMessage(playerid, COLOR_COP_SWAT, "Arrombamento concluído, verifique o que tem por ai antes que acabe o prazo!");
				SendClientMessage(playerid, COLOR_WHITE, "Para sair da casa digite /saircasa");
				new interiorid = GetHouseInt(pickupid);
				SetPlayerInterior(playerid, Interiores[interiorid][hInt]);
				SetPlayerPos(playerid, Interiores[interiorid][hX], Interiores[interiorid][hY], Interiores[interiorid][hZ]);
				return 1;
			}
			else{
			    SendClientMessage(playerid, COLOR_GRAY, "Esteja em frente a uma casa para usar esse comando.");
				return 1;
			}
		} else {
		    if(pStats[playerid][ChaveMestra] <= 0)
			{
		    	SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhuma chave mestra!");
		    	return 1;
		    }
		    pStats[playerid][ChaveMestra]--;
		    new r = random(5);
		    if(r > 0)
		    {
		        SendClientMessage(playerid, COLOR_GRAY, "Sua chave mestra quebrou, tente novamente...");
		        return 1;
		    }
		    NaCasa[playerid] = 1;
			GetPlayerPos(playerid,EntradaCasa[playerid][0],EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
			PickupEntradaCasa[playerid] = GetPickupHouse[playerid];
			SetPlayerVirtualWorld(playerid,GetPickupHouse[playerid]);
			SendClientMessage(playerid, COLOR_WHITE, "Para sair da casa digite /saircasa");
			new interiorid = GetHouseInt(pickupid);
			SetPlayerInterior(playerid, Interiores[interiorid][hInt]);
			SetPlayerPos(playerid, Interiores[interiorid][hX], Interiores[interiorid][hY], Interiores[interiorid][hZ]);
			new alarme = pckStats[PickupEntradaCasa[playerid]][Alarme];
			if(alarme == 0) return SendClientMessage(playerid, COLOR_GREEN, "Arrombamento concluído!");
			AcusacaoCrime(playerid, "Alarme Casa", pckStats[PickupEntradaCasa[playerid]][PickupDono] , "Arrombamento a Residência", 2, 0, 0, 1);
			SetPlayerVirtualWorld(playerid,0);
    		SetPlayerInterior(playerid,0);
    		SetPlayerPos(playerid,EntradaCasa[playerid][0]+0.7,EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
			NaCasa[playerid] = 0;
			for(new i=0; i<MAX_SLOTS; i++){
	        	if(pStats[i][Prof] == COP_MILITAR || pStats[i][Prof] == DELEGADO || pStats[i][Prof] == COP_RODOVIARIO || pStats[i][Prof] == COP_SWAT){
					GetPlayerPos(playerid,CPLocal[i][0],CPLocal[i][1],CPLocal[i][2]);
				}
			}
		}
	}
	if(strcmp(cmd,"/rastrearcasamandato",true) == 0) {
	    if(Mandato[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem mandato para arrombar nenhuma casa!");
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid,1,pckStats[Mandato[playerid]][pX],pckStats[Mandato[playerid]][pY],pckStats[Mandato[playerid]][pZ],0.0,0.0,0.0,4.0);
		SendClientMessage(playerid, COLOR_COP_SWAT, "Siga o CheckPoint (marca vermelha) no radar para ir até a casa...");
        RaceCheckpointStatus[playerid] = RASTREANDO_CASA;
		return 1;
	}
	if(strcmp(cmd,"/entregarmandato",true) == 0) {
	    if(pStats[playerid][Prof] != JUIZ) return SendClientMessage(playerid, COLOR_GRAY, "Você não é Juiz!");
		new tmp[128],plid,owner[MAX_PLAYER_NAME],mins,havehouse,pselect=-1,string[128];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /entregarmandato [id] [dono da casa] [minutos]");
		plid = strval(tmp);
		if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador desconectado.");
		if(Mandato[plid] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Esse jogador já tem um mandato...");
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /entregarmandato [id] [dono da casa] [minutos]");
		set(owner,tmp);
		for(new p = 0 ; p < MAX_CASAS; p ++){
			if(compare(owner,pckStats[p][PickupDono])){
				havehouse = 1;
				pselect = p;
				break;
			}
		}
	    if(pStats[plid][Prof] != COP_SWAT && pStats[plid][Prof] != COP_RODOVIARIO && pStats[plid][Prof] != COP_MILITAR && pStats[plid][Prof] != DELEGADO && pStats[plid][Prof] != JUIZ) return SendClientMessage(playerid, COLOR_GRAY, "Ele não tem permissão para receber isso, apenas oficiais e policais.");
		if(!havehouse || pselect==-1) return SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não tem casa!");
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /entregarmandato [id] [dono da casa] [minutos]");
		mins = strval(tmp);
		if(mins < 2 || mins > 24) return SendClientMessage(playerid, COLOR_GRAY, "Sr. Juiz, o máximo de tempo que o jogador pode ter um mandato é de 1 dia (24 mins) e o mínimo 2 mins");
		Mandato[plid] = pselect;
		TempoMandato[plid] = SetTimerEx("FimMandato", mins * 60000, 0, "d", plid);
		format(string,sizeof(string),"O Sr. Juiz %s lhe concedeu um mandato na casa de %s por %d minutos",PlayerName(playerid),owner,mins);
		SendClientMessage(plid, COLOR_COP_SWAT, string);
		SendClientMessage(plid, COLOR_COP_SWAT, "Digite /arrombarcasa para arrombar a casa...");
		SendClientMessage(plid, COLOR_COP_SWAT, "Se não sabe onde a casa fica, digite /rastrearcasamandato");
		SendClientMessage(playerid, COLOR_JUIZ, "Mandato concedido!");
		return 1;
	}
	if(strcmp(cmd,"/tribunal",true) == 0)
	{
		if(pStats[playerid][Prof] == JUIZ || IsPlayerAdmin(playerid))
		{
			if(GetPlayerInterior(playerid) != 10)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Você não está no Tribunal.");
			    return 1;
			}
			if(JuizTribunal != -1)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Já há um julgamento ocorrendo.");
			    return 1;
			}
			new tmp[128];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAY, "USO: /tribunal [id 1] [id 2]");
			    return 1;
			}
			new plid = strval(tmp);
			if(!IsPlayerConnected(plid) || !Logado[plid])
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Jogador 1 não conectado/logado.");
			    return 1;
			}
			if(GetPlayerInterior(plid) != 10 && pStats[plid][Preso] == 0)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "O jogador 1 deve estar no Tribunal ou preso para participar de um julgamento.");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAY, "USO: /tribunal [id 1] [id 2]");
			    return 1;
			}
			new playa = strval(tmp);
			if(!IsPlayerConnected(playa) || !Logado[playa])
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Jogador 2 não conectado/logado.");
			    return 1;
			}
			if(GetPlayerInterior(playa) != 10 && pStats[playa][Preso] == 0)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "O jogador 2 deve estar no Tribunal ou preso para participar de um julgamento.");
			    return 1;
			}
			if(pStats[plid][Morrendo] == 1 || pStats[playa][Morrendo] == 1)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Um desses jogadores está morrendo.");
			    return 1;
			}
			JuizTribunal = playerid;
			Audiencia[0] = plid;
			Audiencia[1] = playa;
			Advogados[0] = -1;
			Advogados[1] = -1;
			SendClientMessage(playerid, COLOR_JUIZ, "Julgamento iniciado.");
			new str[128];
			format(str, sizeof str, "[TRIBUNAL] O Juiz %s iniciou um julgamento entre %s e %s.", PlayerName(plid), PlayerName(playa));
			SendClientMessage(playerid, COLOR_JUIZ, str);
			SendClientMessage(playa, COLOR_JUIZ, str);
			SendClientMessage(plid, COLOR_JUIZ, str);
			for(new i = 0; i < MAX_SLOTS; i++)
			{
			    if(pStats[i][Prof] == ADVOGADO && !pStats[i][Preso] && i != playa && i != plid)
			    {
			        SendClientMessage(i, COLOR_ADVOGADO, str);
			        SendClientMessage(i, COLOR_ADVOGADO, "[TRIBUNAL] Se um desses participantes é seu cliente, vá defende-lo no Tribunal.");
			    }
			}
			if(pStats[plid][Preso] == 1)
			{
			    SendClientMessage(plid, COLOR_JUIZ, "[TRIBUNAL] Você foi retirado da cela para o julgamento.");
			    KillTimer(PrisaoTimer[plid][0]);
			}
			if(pStats[playa][Preso] == 1)
			{
			    SendClientMessage(playa, COLOR_JUIZ, "[TRIBUNAL] Você foi retirado da cela para o julgamento.");
			    KillTimer(PrisaoTimer[playa][0]);
			}
			AcrescentarXpoints(playerid, 1);
			SendClientMessage(plid, COLOR_JUIZ, "Digite /meuadvogado [id] para declarar alguém como seu Advogado.");
			SendClientMessage(playa, COLOR_JUIZ, "Digite /meuadvogado [id] para declarar alguém como seu Advogado.");
			SetPlayerControl(plid, false);
			SetPlayerControl(playa, false);
			SetPlayerInterior(playerid, 10);
			SetPlayerPos(playerid, 246.9226, 125.3442, 1003.2188);
			SetPlayerFacingAngle(playerid, 180.2396);
			SetPlayerInterior(plid, 10);
			SetPlayerPos(plid, 249.7836, 121.6792, 1003.2188);
			SetPlayerFacingAngle(plid, 2.6013);
			SetPlayerInterior(playa, 10);
			SetPlayerPos(playa, 243.7810, 121.8285, 1003.2518);
			SetPlayerFacingAngle(playa, 0.7213);
			GameTextForPlayer(playerid, "~g~~h~julgamento iniciado", 3000, 0);
			GameTextForPlayer(plid, "~g~~h~julgamento iniciado", 3000, 0);
			GameTextForPlayer(playa, "~g~~h~julgamento iniciado", 3000, 0);
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Juiz.");
		    return 1;
		}
	}
	if(strcmp(cmd,"/meuadvogado",true) == 0)
	{
	    if(JuizTribunal == -1)
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Não há nenhum julgamento ocorrendo.");
	        return 1;
	    }
	    if(playerid != Audiencia[0] && playerid != Audiencia[1])
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não faz parte do julgamento.");
	        return 1;
	    }
        new tmp[128];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /meuadvogado [id]");
		    return 1;
		}
		new plid = strval(tmp);
		if(!IsPlayerConnected(plid) || !Logado[plid])
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		    return 1;
		}
		if(pStats[plid][Prof] != ADVOGADO)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não exerce a profissão de Advogado.");
		    return 1;
		}
		if(GetPlayerInterior(plid) != 10)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está no Tribunal.");
		    return 1;
		}
		if(playerid == Audiencia[0])
		{
			if(Advogados[0] != -1)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Você já declarou alguém como seu Advogado.");
		    	return 1;
			}
			if(Advogados[1] == plid)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Você não pode declarar o mesmo Advogado que o outro jogador.");
		    	return 1;
			}
			Advogados[0] = plid;
			SetPlayerPos(plid, 249.2834, 123.7461, 1003.2188);
		}
		else if(playerid == Audiencia[1])
		{
			if(Advogados[1] != -1)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Você já declarou alguém como seu Advogado.");
		    	return 1;
			}
			if(Advogados[0] == plid)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Você não pode declarar o mesmo Advogado que o outro jogador.");
		    	return 1;
			}
			Advogados[1] = plid;
			SetPlayerPos(plid, 244.9500, 123.7337, 1003.2188);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não faz parte do julgamento.");
	        return 1;
		}
		AcrescentarXpoints(plid, 1);
		SendClientMessage(playerid, COLOR_JUIZ, "Advogado declarado.");
		new str[128];
		format(str, sizeof str, "[TRIBUNAL] %s declarou você como seu Advogado, defenda-o.", PlayerName(playerid));
		SendClientMessage(plid, COLOR_ADVOGADO, str);
		format(str, sizeof str, "[TRIBUNAL] %s declarou %s como seu advogado.", PlayerName(playerid), PlayerName(plid));
		SendClientMessage(JuizTribunal, COLOR_JUIZ, str);
		SendClientMessage(Audiencia[0], COLOR_JUIZ, str);
		SendClientMessage(Audiencia[1], COLOR_JUIZ, str);
		return 1;
	}
	if(strcmp(cmd,"/declararpreso",true) == 0)
	{
		if(pStats[playerid][Prof] == JUIZ || IsPlayerAdmin(playerid))
		{
		    if(JuizTribunal == -1)
	    	{
	        	SendClientMessage(playerid, COLOR_GRAY, "Não há nenhum julgamento ocorrendo.");
	        	return 1;
	    	}
		    if(JuizTribunal != playerid)
			{
		        SendClientMessage(playerid, COLOR_GRAY, "Você não é o responsável pelo julgamento.");
			    return 1;
			}
			new tmp[128];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAY, "USO: /declararpreso [id] [minutos] [fianca]");
			    return 1;
			}
			new plid = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAY, "USO: /declararpreso [id] [minutos] [fianca]");
			    return 1;
			}
			new mins = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAY, "USO: /declararpreso [id] [minutos] [fianca]");
			    return 1;
			}
			new fianca = strval(tmp);
			if(fianca < 0)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "O valor da fiança deve ser maior que 0.");
			    return 1;
			}
			if(mins < 1 || mins > 20)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Minutos de 1 à 20.");
			    return 1;
			}
			if(plid != Audiencia[0] && plid != Audiencia[1])
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Você só pode declarar preso os jogadores que fazem parte do julgamento.");
			    return 1;
			}
			AcrescentarXpoints(playerid, 1);
			pStats[plid][Preso] = 1;
			pStats[plid][HorasPreso] = mins;
			pStats[plid][Fianca] = fianca;
			SavePlayer(PlayerName(plid), plid);
			new str[128];
			if(fianca > 0)
			{
				format(str, sizeof str, "[TRIBUNAL] O Juiz decretou prisão de %d horas (minutos reais) para o jogador %s [Valor da Fiança: $%d,00 dólares]", mins, PlayerName(plid), fianca);
			}
			else
			{
			    format(str, sizeof str, "[TRIBUNAL] O Juiz decretou prisão de %d horas (minutos reais) para o jogador %s [Sem Fiança]", mins, PlayerName(plid));
			}
			SendClientMessage(playerid, COLOR_JUIZ, str);
			SendClientMessage(Audiencia[0], COLOR_JUIZ, str);
			SendClientMessage(Audiencia[1], COLOR_JUIZ, str);
			if(Advogados[0] != -1)
			{
			    SendClientMessage(Advogados[0], COLOR_JUIZ, str);
			}
			if(Advogados[1] != -1)
			{
			    SendClientMessage(Advogados[1], COLOR_JUIZ, str);
			}
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Juiz.");
		    return 1;
		}
	}
	if(strcmp(cmd,"/fimtribunal",true) == 0)
	{
	    if(pStats[playerid][Prof] == JUIZ || IsPlayerAdmin(playerid))
		{
		    if(JuizTribunal == -1)
	    	{
	        	SendClientMessage(playerid, COLOR_GRAY, "Não há nenhum julgamento ocorrendo.");
	        	return 1;
	    	}
			if(JuizTribunal != playerid)
			{
		        SendClientMessage(playerid, COLOR_GRAY, "Você não é o responsável pelo julgamento.");
			    return 1;
			}
			new plid = Audiencia[0], playa = Audiencia[1];
			SendClientMessage(playerid, COLOR_JUIZ, "[TRIBUNAL] Julgamento encerrado.");
			SendClientMessage(playa, COLOR_JUIZ, "[TRIBUNAL] O Juiz encerrou o julgamento.");
			SendClientMessage(plid, COLOR_JUIZ, "[TRIBUNAL] O Juiz encerrou o julgamento.");
			GameTextForPlayer(playerid, "~g~~h~julgamento encerrado", 3000, 0);
			GameTextForPlayer(plid, "~g~~h~julgamento encerrado", 3000, 0);
			GameTextForPlayer(playa, "~g~~h~julgamento encerrado", 3000, 0);
			if(Advogados[0] != -1)
			{
       			AcrescentarXpoints(Advogados[0],3);
			    SendClientMessage(Advogados[0], COLOR_JUIZ, "[TRIBUNAL] O Juiz encerrou o julgamento, já pode se retirar do Tribunal.");
			    Advogados[0] = -1;
			    SendClientMessage(Advogados[0], COLOR_JUIZ, "[TRIBUNAL] O Estado de Los Santos lhe deu $2000 dolares como pagamento, poderá pedir mais ao seu cliente.");
       			AddPlayerMoney(Advogados[0],2000,7);
			}
			if(Advogados[1] != -1)
			{
			    AcrescentarXpoints(Advogados[1],3);
                SendClientMessage(Advogados[1], COLOR_JUIZ, "[TRIBUNAL] O Juiz encerrou o julgamento, já pode se retirar do Tribunal.");
			    Advogados[1] = -1;
			    SendClientMessage(Advogados[1], COLOR_JUIZ, "[TRIBUNAL] O Estado de Los Santos lhe deu $2000 dolares como pagamento, poderá pedir mais ao seu cliente.");
			    AddPlayerMoney(Advogados[1],2000,7);
			}
			if(pStats[plid][Preso] == 1)
			{
			    SetPlayerFacingAngle(plid, 0);
				SetPlayerInterior(plid, 6);
				PrisaoTimer[plid][0] = SetTimerEx("AvisoTempoRestante",60000, 0, "d", plid);
				SetPlayerPos(plid, 264.3445, 77.8834, 1001.0391);
				SendClientMessage(plid, COLOR_JUIZ, "[TRIBUNAL] Julgamento encerrado, bem-vindo à cela.");
				if(pStats[plid][Fianca] > 0)
				{
		    		new str[128];
		    		format(str, sizeof str, "Você pode pagar fiança no valor de $%d,00 dólares, use /pagarfianca.", pStats[plid][Fianca]);
		    		SendClientMessage(plid, COLOR_WHITE, str);
				}
			}
			if(pStats[playa][Preso] == 1)
			{
			    SetPlayerFacingAngle(playa, 0);
				SetPlayerInterior(playa, 6);
				PrisaoTimer[playa][0] = SetTimerEx("AvisoTempoRestante",60000, 0, "d", playa);
				SetPlayerPos(playa, 264.3445, 77.8834, 1001.0391);
				SendClientMessage(playa, COLOR_JUIZ, "[TRIBUNAL] Julgamento encerrado, bem-vindo à cela.");
				if(pStats[playa][Fianca] > 0)
				{
		    		new str[128];
		    		format(str, sizeof str, "Você pode pagar fiança no valor de $%d,00 dólares, use /pagarfianca.", pStats[playa][Fianca]);
		    		SendClientMessage(playa, COLOR_WHITE, str);
				}
			}
			SetPlayerControl(playa, true);
			SetPlayerControl(plid, true);
			JuizTribunal = -1;
			Audiencia[0] = -1;
			Audiencia[1] = -1;
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Juiz.");
		    return 1;
		}
	}
	if(strcmp(cmd, "/chamarsala", true) == 0)
	{
		if(pStats[playerid][Prof] == DELEGADO || IsPlayerAdmin(playerid))
		{
		    new tmp[128];
		    new plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAY, "USO: /chamarsala [id]");
				return 1;
			}
	        plid = strval(tmp);
	        if(GetDistanceBetweenPlayers(playerid, plid) > 15.0)
	        {
	            SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto para chamar o jogador.");
				return 1;
	        }
	        if(pStats[plid][Morrendo] == 1 || pStats[plid][Preso] == 1)
	        {
	            SendClientMessage(playerid, COLOR_GRAY, "O jogador não pode estar preso nem morrendo.");
				return 1;
	        }
			SendClientMessage(playerid, COLOR_DELEGADO, "Jogador chamado para sua sala.");
			SendClientMessage(plid, COLOR_DELEGADO, "O Delegado está chamando você para comparecer em sua sala.");
		    SalaDelegado[plid] = 1;
	        return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Delegado.");
		    return 1;
		}
	}
  	if(strcmp(cmd, "/soltar", true) == 0) {
	    if(pStats[playerid][Prof] == JUIZ || pStats[playerid][Prof] == DELEGADO || IsPlayerAdmin(playerid))
		{
		    new tmp[128];
		    new plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "USO: /soltar [id]");
				return 1;
			}
	        plid = strval(tmp);
	        if(plid == playerid)
	        {
	            SendClientMessage(playerid, COLOR_GRAY, "Você não pode se auto-soltar.");
	            return 1;
	        }
			if(IsPlayerConnected(plid) && Logado[playerid] == 1)
			{
				if(pStats[plid][Preso] == 0)
				{
				    SendClientMessage(playerid,COLOR_GRAY,"O jogador não está preso!");
					return 1;
				}
				else
				{
				    AcrescentarXpoints(playerid, 1);
	   				PrisaoTimer[plid][1] = 0;
	   				KillTimer(PrisaoTimer[plid][0]);
			    	format(tmp, sizeof(tmp), "Você foi solto por %s", PlayerName(playerid));
			    	SendClientMessage(plid, COLOR_COP_SWAT, tmp);
					SetPlayerFree(plid);
					return 1;
				}
			}
			else
			{
	            SendClientMessage(playerid, COLOR_GRAY, "Jogador não está conectado/logado");
				return 1;
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Juiz/Delegado.");
			return 1;
		}
	}

	if(strcmp(cmd, "/tomarsorvete", true) == 0) {
	    if(PlayerArea[playerid] != AreaSorveteria){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não está na sorveteria!");
	        return 1;
		}
	   	if(TomandoSorvete[playerid] == 1){
            SendClientMessage(playerid, COLOR_GRAY, "Ei... Você já está tomando sorvete! Tome esse ai primeiro para poder tomar outro.");
	   		return 1;
	   	} else {
	   	    ShowMenuForPlayer(Sorvetes,playerid);
	   	    SetPlayerControl(playerid,0);
	   	    return 1;
		}
	}

    if(strcmp(cmd, "/comprarsorvete", true) == 0) {
	    if(PlayerArea[playerid] != AreaSorveteria){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não está na sorveteria!");
	        return 1;
		}
	   	else {
	   	    ShowMenuForPlayer(Sorvetes2,playerid);
	   	    SetPlayerControl(playerid,0);
	   	    return 1;
		}
	}
	if(strcmp(cmd, "/cone", true) == 0) {
 		if(pStats[playerid][Prof] == COP_RODOVIARIO || pStats[playerid][Prof] == COP_SWAT || IsPlayerAdmin(playerid)){
 		    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
 		        SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar fora do carro");
 		        return 1;
 		    }
          	new Float:X, Float:Y, Float:Z;
            GetPlayerPos(playerid,X, Y, Z);
			new cone = CreateObject(1238,X, Y, Z-0.7, 0, 0, 0);
			SetTimerEx("DestruirCone", 120000, false, "d", cone);
            SendClientMessage(playerid, COLOR_GREEN, "Você adicionou um cone neste local.");
			return 1;
		}
		else{
			SendClientMessage(playerid, COLOR_GREEN, "Você não é Policial Rodoviario");
            return 1;
		}
	}
	if(strcmp(cmd, "/pagardivida", true) == 0) {
		new tmp[128], str[128], string[128], vehid;
	    tmp = strtok(cmdtext,idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /pagardivida [pessoal ou veicular] [id]");
			return 1;
	    }
		if(strcmp(tmp, "pessoal", true) == 0)
		{
			if(PlayerArea[playerid] != AreaDelegacia){
		        SendClientMessage(playerid, COLOR_GRAY, "Você não está na Delegacia!");
				return 1;
			}
			if(pStats[playerid][MultaPublica] == 0){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não tem multa pública, como poderá pagar uma multa?");
			    return 1;
			}
			if(GetPlayerServerMoney(playerid) < pStats[playerid][MultaPublica]){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro!");
			    format(str,sizeof(str),"A sua multa pública está avaliada em $%d",pStats[playerid][MultaPublica]);
			    SendClientMessage(playerid, COLOR_GRAY, str);
				return 1;
			} else {
			    ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,0,1);
			    AddPlayerMoney(playerid,-pStats[playerid][MultaPublica],-1);
				format(str,sizeof(str),"[DELEGACIA] Você pagou sua multa pública de $%d.",pStats[playerid][MultaPublica]);
				SendClientMessage(playerid, COLOR_CENTRAL, str);
				pStats[playerid][MultaPublica] = 0;
				return 1;
			}
		}
		else if(strcmp(tmp, "veicular", true) == 0)
		{
		    tmp = strtok(cmdtext,idx);
		    vehid = strval(tmp);
		    if(!strlen(tmp)){
		        SendClientMessage(playerid, COLOR_GRAY, "USO: /pagardivida [veicular] [ID/do/veículo]");
		        return 1;
			}
			if(PlayerArea[playerid] != AreaDelegacia){
		        SendClientMessage(playerid, COLOR_GRAY, "Você não está na Delegacia!");
				return 1;
			}
			if(GetQtVehicles(playerid) == 0){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhum veículo, como poderá pagar uma multa?");
			    return 1;
			}
			if(vehid <= 0 || vehid > GetQtVehicles(playerid)){
			    SendClientMessage(playerid, COLOR_GRAY, "USO: /pagardivida [ID/do/veículo]");
				format(string,sizeof(string),"ID de 1 até %d",GetQtVehicles(playerid) + 1);
				SendClientMessage(playerid, COLOR_GRAY, string);
				return 1;
			}
			if(GetVehicles(playerid, vehid) == -1){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não tem mais um veículo desse ID...");
			    return 1;
			}
			new vid = GetVehicles(playerid, vehid);
			if(vStats[vid][Dividas] <= 0){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não possui multa para pagar!");
			    return 1;
			}
			new divida = vStats[vid][Dividas];
			if(vStats[vid][Confiscado] == 1)
			{
			    divida += 500;
			    if(GetPlayerServerMoney(playerid) < divida)
				{
				    SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro!");
				    format(str,sizeof(str),"A multa desse veículo está avaliada em $%d,00 dólares",divida - 500);
				    SendClientMessage(playerid, COLOR_GRAY, str);
				    SendClientMessage(playerid, COLOR_GRAY, "Entretanto, você deve pagar mais $500,00 dólares para liberarmos o veículo.");
					return 1;
				}
			}
			else if(GetPlayerServerMoney(playerid) < divida){
   				SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro!");
			    format(str,sizeof(str),"A multa desse veículo está avaliada em $%d,00 dólares",divida);
			    SendClientMessage(playerid, COLOR_GRAY, str);
				return 1;
			}
			ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,0,1);
		    AddPlayerMoney(playerid,-divida,-1);
		   	vStats[vid][Dividas] = 0;
		    if(vStats[vid][Confiscado] == 0)
		    {
				format(str,sizeof(str),"[DELEGACIA] Você pagou sua multa veicular de $%d. Tome cuidado, estamos de olho!",divida);
				SendClientMessage(playerid, COLOR_CENTRAL, str);
			}
			else
			{
			    format(str,sizeof(str),"[DELEGACIA] Você pagou sua multa veicular de $%d.",divida - 500);
				SendClientMessage(playerid, COLOR_CENTRAL, str);
				SendClientMessage(playerid, COLOR_CENTRAL, "[DELEGACIA] Mais $500,00 dólares foram cobrados para liberar o veículo.");
    			SendClientMessage(playerid, COLOR_CENTRAL, "[DELEGACIA] Pode pega-lo, ele está na garagem (peça para um policial abri-la caso necessário).");
				SendClientMessage(playerid, COLOR_CENTRAL, "[DELEGACIA] Qualquer Trava ou Alarme foram desativados, reative-os.");
			}
			vStats[vid][Confiscado] = 0;
			return 1;
		}
		else
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /pagardivida [pessoal ou veicular] [id]");
			return 1;
	    }
	}

	if(strcmp(cmd, "/multar", true) == 0) {
	    if(pStats[playerid][Prof] == COP_MILITAR || pStats[playerid][Prof] == COP_RODOVIARIO || pStats[playerid][Prof] == COP_SWAT || pStats[playerid][Prof] == DELEGADO){
			new tmp[128];
	    	new plid;
	    	new quant;
	    	new distancia;
		    tmp = strtok(cmdtext,idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid, COLOR_GRAY, "USO: /multar [pessoa ou veiculo] [id] [quantidade]");
				return 1;
		    }
			new string[256];
			if(strcmp(tmp, "pessoa", true) == 0)
			{
				tmp = strtok(cmdtext,idx);
				if(!strlen(tmp)){
				    SendClientMessage(playerid,COLOR_GRAY,"USO: /multar [pessoa] [id] [quantia]");
				    return 1;
				}
				plid = strval(tmp);
				tmp = strtok(cmdtext,idx);
				if(!strlen(tmp)){
				    SendClientMessage(playerid,COLOR_GRAY,"USO: /multar [pessoa] [id] [quantia]");
				    return 1;
				}
	        	quant = strval(tmp);
	 			if(quant > 1000 || quant <= 0){
					SendClientMessage(playerid, COLOR_GRAY, "Você não está querendo multar de forma justa.");
					return 1;
				}
				distancia = GetDistanceBetweenPlayers(playerid, plid);
			 	if(distancia > 15){
				    SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto!");
					return 1;
				}
				if(JaMultou[playerid] == 1){
				    SendClientMessage(playerid, COLOR_GRAY, "Você só pode multar alguém de 1 em 1 minuto!");
					return 1;
				}
				if(JogadorMultado[plid]==1){
				    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador acabou de ser multado aguarde!");
					return 1;
				}
				if(IsPlayerConnected(plid)){
				    pStats[plid][MultaPublica] += quant;
					JaMultou[playerid] = 1;
					SetTimerEx("ZerarMultou",60000,0,"d",playerid);
					format(string,sizeof(string), "[CENTRAL] Multa pública aplicada e registrada no nome: %s por %s, valor da multa: $%d",PlayerName(plid), PlayerName(playerid), quant);
					SendClientMessage(playerid, COLOR_CENTRAL, string);
					format(string, sizeof(string), "[CENTRAL] O Oficial %s lhe deu uma multa de $%d.", PlayerName(playerid), quant);
					SendClientMessage(plid, COLOR_CENTRAL, string);
					SendClientMessage(plid, COLOR_COP_MILITAR, "Para efetuar o pagamento você deve ir até a Delegacia.");
					format(string,sizeof(string), "Multa pública aplicada e registrada no nome: %s por %s, valor da multa: $%d",PlayerName(plid), PlayerName(playerid), quant);
					writelog(string);
					print(string);
					if(JogadorMultado[plid]==0){
					    JogadorMultado[plid]=1;
					    SetTimerEx("ZerarJogadorMultado",130000,false,"d",plid);
						AcrescentarXpoints(playerid,1);
					}
				} else {
				   	SendClientMessage(playerid, COLOR_GRAY, "O jogador não está conectado!");
					return 1;
				}
			}
			else if(strcmp(tmp, "veiculo", true) == 0)
			{
				tmp = strtok(cmdtext,idx);
				if(!strlen(tmp)){
				    SendClientMessage(playerid,COLOR_GRAY,"/multar [veiculo] [id] [quantia]");
				    return 1;
				}
				plid = strval(tmp);
				tmp = strtok(cmdtext,idx);
				if(!strlen(tmp)){
				    SendClientMessage(playerid,COLOR_GRAY,"/multar [veiculo] [id] [quantia]");
				    return 1;
				}
	        	quant = strval(tmp);
	 			if(quant > 1000 || quant <= 0){
					SendClientMessage(playerid, COLOR_GRAY, "Você não está querendo multar de forma justa.");
					return 1;
				}
				distancia = GetDistanceBetweenPlayers(playerid, plid);
			 	if(distancia > 15){
				    SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto!");
					return 1;
				}
				if(JaMultou[playerid] == 1){
				    SendClientMessage(playerid, COLOR_GRAY, "Você só pode multar alguém de 1 em 1 minuto!");
					return 1;
				}
				if(JogadorMultado[plid]==1){
				    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador acabou de ser multado aguarde!");
					return 1;
				}
				if(IsPlayerConnected(plid)){
				    if(IsPlayerInAnyVehicle(plid)){
					    if(GetPlayerVehicleID(plid) < AmountServerVehicles){
					        SendClientMessage(playerid, COLOR_JUIZ, "Esse veículo pertence ao governo, verifique se é um veículo apropriado para o trabalho desse jogador!");
							SendClientMessage(playerid, COLOR_JUIZ, "Se não for, prenda-o por roubo de automóvel");
							return 1;
						} else {
							format(string, sizeof(string), "[CENTRAL COP] O Soldado %s lhe deu uma multa de $%d.", PlayerName(playerid), quant);
							SendClientMessage(plid, COLOR_CENTRAL, string);
							SendClientMessage(plid, COLOR_COP_MILITAR, "Para efetuar o pagamento você deve ir até a Delegacia.");
							SendClientMessage(playerid, COLOR_GREEN, "Multa dada.");
							vStats[GetPlayerVehicleID(plid)][Dividas] += quant;
							AddPlayerMoney(playerid,50,3);
						}
						format(string,sizeof(string), "O oficial %s multou %s em $%d,00 dólares",PlayerName(playerid),PlayerName(plid),quant);
						JaMultou[playerid] = 1;
						writelog(string);
						print(string);
						SetTimerEx("ZerarMultou",60000,0,"d",playerid);
						SendClientMessageAdmin(COLOR_LIGHT_YELLOW, string);
						if(JogadorMultado[plid]==0){
						    JogadorMultado[plid]=1;
						    SetTimerEx("ZerarJogadorMultado",130000,false,"d",plid);
							AcrescentarXpoints(playerid,1);
						}
					} else {
					    SendClientMessage(playerid, COLOR_GRAY, "Ele tem que estar em um veículo!");
						return 1;
					}
				} else {
				   	SendClientMessage(playerid, COLOR_GRAY, "O jogador não está conectado!");
					return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid,COLOR_GRAY,"USO: /multar [pessoa ou veiculo] [id] [quantidade]");
			    return 1;
			}
		}
	}

	if(strcmp(cmd, "/procurar", true)==0){
	    if(pStats[playerid][Prof] == COP_MILITAR || pStats[playerid][Prof] == COP_RODOVIARIO || pStats[playerid][Prof] == COP_SWAT || pStats[playerid][Prof] == DELEGADO || IsPlayerAdmin(playerid)){
		    new plid = strval(strtok(cmdtext,idx));
			new reason[128];
			reason = strtok(cmdtext,idx);
			new r = -1;
			for(new m = 0; m < sizeof Motivos; m++)
			{
			    if(compare(Motivos[m][mTag], reason))
			    {
			        r = m;
			        break;
			    }
			}
			if(r == -1)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "USO: /procurar [id] [motivo]");
			    SendClientMessage(playerid, COLOR_GRAY, "Motivos: h (homicidio) , a (assalto) , r (roubo) , d (desacato) , c (corrupao) , i (indenizacao)");
			    SendClientMessage(playerid, COLOR_GRAY, "Motivos: con (contrabando) , f (fuga de prisao) , th (tentativa de homicidio , dp (destruindo patrimonio)");
                SendClientMessage(playerid, COLOR_GRAY, "Motivos: fq (formando quadrilha) , pd (portando drogas) , pa (portando armas sem porte) s (sequestro)");
                SendClientMessage(playerid, COLOR_GRAY, "Motivos: db (dirigindo bebado) , t (trafico) , td (transportando drogas) , su (suspeito)");
				return 1;
			}
			if(pStats[plid][Preso] == 1)
			{
				SendClientMessage(playerid, COLOR_GRAY, "Esse jogador está preso.");
				return 1;
			}
			if(plid == playerid)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Você não pode se auto-procurar.");
			    return 1;
			}
			if(GetPlayerWantedLevel(plid) > 5)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador já está no nível máximo de procurado.");
			    return 1;
			}
			if(IsPlayerConnected(plid) && Logado[playerid] == 1){
				new string[128];
				SendClientMessage(playerid, COLOR_CENTRAL, "[CENTRAL] Suspeito colocado na lista de procurados.");
				SendClientMessage(plid, COLOR_CENTRAL, "[CENTRAL] Você foi colocado na lista de procurados pela polícia.");
				if(Motivos[r][mEstrelas] + GetPlayerWantedLevel(plid) > 5){
					SetPlayerWantedLevel(plid, 5);
				} else {
					SetPlayerWantedLevel(plid, GetPlayerWantedLevel(plid) + Motivos[r][mEstrelas]);
				}
				format(string, sizeof(string), "[CENTRAL] Motivo: %s, Estrelas: %d", Motivos[r][mName], GetPlayerWantedLevel(plid));
				SendClientMessage(plid, COLOR_CENTRAL, string);
   				SendClientMessage(plid, COLOR_CENTRAL, "Caso você se entregar(/render), irá ficar menos tempo preso.");
				format(string,sizeof(string),"[CENTRAL] %s foi colocado nos procurados pelo Oficial: %s. Motivo: %s, Estrelas: %s.",PlayerName(plid), PlayerName(playerid),Motivos[r][mName], GetPlayerWantedLevel(plid));
				SendClientMessagePolicia(COLOR_CENTRAL, string);
				pStats[plid][Fianca] = 0;
				pStats[plid][HorasPreso] += Motivos[r][mTime];
				pStats[plid][LastBustedReason] = r;
				if(pStats[plid][HorasPreso] > 20)
				{
				    pStats[plid][HorasPreso] = 20;
				}
				return 1;
			} else {
	            SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
				return 1;
			}
		} else {
			SendClientMessage(playerid, COLOR_GRAY, "Você não faz parte do departamento de policia!");
			return 1;
		}
	}


	if (strcmp(cmd, "/desprocurar", true)==0){
	    if(pStats[playerid][Prof] == COP_MILITAR || pStats[playerid][Prof] == COP_RODOVIARIO || pStats[playerid][Prof] == COP_SWAT || pStats[playerid][Prof] == DELEGADO || IsPlayerAdmin(playerid)){
		    new tmp[128];
		    new plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "USO: /desprocurar [id]");
				return 1;
			}
	        plid = strval(tmp);
	        if(GetPlayerWantedLevel(plid)==0){
	            SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está sendo procurado!");
	            return 1;
			}
			if(plid == playerid)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Você não pode se auto-desprocurar.");
			    return 1;
			}
			if(IsPlayerConnected(plid) && Logado[plid] == 1){
			    SendClientMessage(playerid, COLOR_CENTRAL, "Jogador retirado da lista de procurados.");
				SendClientMessage(plid, COLOR_CENTRAL, "Você foi retirado da lista de procurados");
				SetPlayerWantedLevel(plid, 0);
				pStats[plid][HorasPreso] = 0;
				pStats[plid][Fianca] = 0;
				SetPlayerWantedLevelColor(plid);
				return 1;
			}
			else{
	            SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado");
				return 1;
			}
		} else {
			SendClientMessage(playerid, COLOR_GRAY, "Você não faz parte do departamento de policia!");
			return 1;
		}
	}
    if(strcmp(cmd, "/desmanche", true) == 0) {
        if(pStats[playerid][Prof] == ASSALTANTE || IsPlayerAdmin(playerid)){
            if(DesmancheValor == 0)
            {
                SendClientMessage(playerid, COLOR_GRAY, "A gente num quer nenhum carro agora maluco...");
                return 1;
            }
            if(PlayerArea[playerid] != AreaDesmanche)
            {
                SendClientMessage(playerid, COLOR_GRAY, "Tu num tá na área mermão...");
                return 1;
            }
            if(!IsPlayerInAnyVehicle(playerid))
            {
                SendClientMessage(playerid, COLOR_GRAY, "Maluco nem em carro tu tá...");
                return 1;
            }
            if(GetPlayerVehicleID(playerid) < AmountServerVehicles)
            {
                SendClientMessage(playerid, COLOR_GRAY, "Nóis num tamo afim de carro de trabalho maluco...");
                return 1;
            }
            RemovePlayerFromVehicle(playerid);
            SetVehicleToRespawn(GetPlayerVehicleID(playerid));
            SetVehiclePos(GetPlayerVehicleID(playerid), INVALID_POS_X, INVALID_POS_Y, INVALID_POS_Z);
            SetVehicleHealth(GetPlayerVehicleID(playerid), 0);
			new string[128];
			format(string, sizeof(string), "[DESMANCHE] Vlw maluco, tu é responsa, toma aí umas verdinhas: $%d,00", DesmancheValor);
			SendClientMessage(playerid, COLOR_ASSALTANTE, string);
			Pay(playerid, DesmancheValor);
			DesmancheValor = 0;
			for(new i = 0; i < MAX_SLOTS; i++)
			{
			    if(IsPlayerConnected(i) && Logado[i] && pStats[i][Prof] == ASSALTANTE)
			    {
			        SendClientMessage(i, COLOR_ASSALTANTE, "[DESMANCHE] Já recebemo uma lata maluco, agora num precisa mais, só dando um aviso aí...");
			    }
			}
			return 1;
        } else {
	    	SendClientMessage(playerid, COLOR_GRAY, "Você não é Assaltante!");
			return 1;
		}
    }
    if(strcmp(cmd, "/desmanchevalor", true) == 0) {
        if(DesmancheValor == 0)
        {
            SendClientMessage(playerid, COLOR_ASSALTANTE, "[DESMANCHE] A gente num tá afim de lata nenhuma agora rapá...");
            return 1;
        }
        else
        {
            new string[128];
            format(string, sizeof string, "[DESMANCHE] Nóis tamo pagando $%d por qualquer lata...", DesmancheValor);
            SendClientMessage(playerid, COLOR_ASSALTANTE, string);
            return 1;
        }
    }
    if(strcmp(cmd, "/assaltar", true) == 0) {
	    if(pStats[playerid][Prof] == ASSALTANTE || IsPlayerAdmin(playerid)){
        	if(PlayerArea[playerid] == AreaBanco){
				if(TempoAssalto[playerid] == 0){
					SendClientMessage(playerid, COLOR_ASSALTANTE, "Assaltando...");
					SendClientMessage(playerid, COLOR_ASSALTANTE, "Quanto mais tempo ficar mais roubará, a polícia pode ser alertada.");
					TempoAssalto[playerid] = 1;
				    GameTextForPlayer(playerid, "~r~ Roubando...", 5000,0);
					BancoRoubando[playerid] = 1;
 					SetTimerEx("AssaltandoBanco",10000,0,"d",playerid);
 					return 1;
				} else {
					SendClientMessage(playerid,COLOR_GRAY,"Você já assaltou espere a poeira baixar para assaltar novamente!");
					return 1;
				}
			} else {
			    SendClientMessage(playerid,COLOR_GRAY,"Você não está na área de um banco!");
			    return 1;
			}
		} else {
	    	SendClientMessage(playerid, COLOR_GRAY, "Você não é Assaltante!");
			return 1;
		}
	}
	if(strcmp(cmd, "/roubar", true)==0){
	    if(pStats[playerid][Prof] == ASSALTANTE || IsPlayerAdmin(playerid)){
	        new tmp[128], plid, distancia, string[128], rand;
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
		    	SendClientMessage(playerid, COLOR_GRAY,"USO: /roubar [id]");
				return 1;
			}
			plid = strval(tmp);
			if(pStats[plid][Prof] == ASSALTANTE){
		    	SendClientMessage(playerid, COLOR_GRAY,"Você não pode se auto-assaltar ou assaltar um Assaltante!");
				return 1;
			}
		   	if(RouboMao[playerid] == 1){
		    	SendClientMessage(playerid, COLOR_GRAY,"Calma. Espere a poeira baixar para realizar outro assalto.");
				return 1;
			}
			if(!IsPlayerConnected(plid)){
		    	SendClientMessage(playerid, COLOR_GRAY,"O Jogador não está conectado.");
				return 1;
			}
			distancia = GetDistanceBetweenPlayers(playerid, plid);
			if(distancia > 15){
		    	SendClientMessage(playerid, COLOR_GRAY,"Para realizar o roubo você tem que estar mais próximo.");
				return 1;
			}
			if(plid == playerid){
		    	SendClientMessage(playerid, COLOR_GRAY,"Querendo roubar a si próprio!");
				return 1;
			}
			new grana = GetPlayerServerMoney(plid);
			if(grana < 40){
		    	SendClientMessage(playerid, COLOR_GRAY,"Não vale a pena assaltar ele. Está praticamente sem grana.");
				return 1;
			}
			rand = random(2);
			if(rand == 0){
			    if(IsPlayerTransparent(playerid)){
					format(string, sizeof(string), "Alguém tentou lhe assaltar, mas não obteve sucesso.");
				    SendClientMessage(plid, COLOR_LIGHT_RED, string);
					format(string, sizeof(string), "O seu roubo contra %s falhou.",PlayerName(plid));
				    SendClientMessage(playerid, COLOR_GRAY, string);
				    RouboMao[playerid] = 1;
					SetTimerEx("RouboMao",180000,false,"d",playerid);
   					return 1;
   				} else {
     				format(string, sizeof(string), "O Assaltante %s tentou lhe assaltar, mas não obteve sucesso.",PlayerName(playerid));
				    SendClientMessage(plid, COLOR_LIGHT_RED, string);
					format(string, sizeof(string), "O seu roubo contra %s falhou.",PlayerName(plid));
				    SendClientMessage(playerid, COLOR_GRAY, string);
				    RouboMao[playerid] = 1;
					SetTimerEx("RouboMao",180000,false,"d",playerid);
				}
			} else {
				if(IsPlayerTransparent(playerid)){
					new roubo = random(grana);
					format(string, sizeof(string), "Alguém lhe roubou, ele estava de capuz! Conseguiu roubar: $%d dólares de você.", roubo);
					SendClientMessage(plid, COLOR_LIGHT_RED, string);
		            AddPlayerMoney(plid,-roubo,-1);
					format(string, sizeof(string), "Você conseguiu roubar $%d dólares de %s",roubo,PlayerName(plid));
				    SendClientMessage(playerid, COLOR_ASSALTANTE, string);
                    ApplyAnimation(plid,"FIGHT_C","HitC_3",4.1,0,1,1,1,1);
		           	Pay(playerid, roubo);
		           	RouboMao[playerid] = 1;
		           	SetTimerEx("RouboMao",180000,false,"d",playerid);
					new sorte = random(4);
					if(sorte == 4){
						SendClientMessageToAll(COLOR_JORNALISTA, "[JORNAL] Informantes da polícia, acabam de nos informar que alguém foi assaltado. [Pricipal suspeito: Desconhecido]");
						AcusacaoCrime(playerid, "NONE", PlayerName(plid) , "Roubo", 2, 0, 0, 1);
					}
				} else {
					new roubo = random(grana);
					format(string, sizeof(string), "Alguém lhe roubou, ele ainda está próximo a você! Conseguiu roubar: $%d dólares de você.", roubo);
					SendClientMessage(plid, COLOR_LIGHT_RED, string);
		            AddPlayerMoney(plid,-roubo,-1);
					format(string, sizeof(string), "Você conseguiu roubar $%d dólares de %s",roubo,PlayerName(plid));
				    SendClientMessage(playerid, COLOR_ASSALTANTE, string);
				    ApplyAnimation(plid,"FIGHT_C","HitC_3",4.1,0,1,1,1,1);
		           	Pay(playerid, roubo);
		           	RouboMao[playerid] = 1;
		           	SetTimerEx("RouboMao",180000,false,"d",playerid);
					new sorte = random(4);
					if(sorte == 4){
						format(string,sizeof(string),"[JORNAL] Informantes da polícia, acabam de nos informar que alguém foi assaltado. [Pricipal suspeito: %s]",PlayerName(playerid));
						SendClientMessageToAll(COLOR_JORNALISTA, string);
						pStats[playerid][HorasPreso] += Motivos[2][mTime];
						pStats[playerid][LastBustedReason] = 2;
						AcusacaoCrime(playerid, "NONE", PlayerName(plid) , "Roubo", 2, 0, 0, 1);
					}
				}
			}
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Assaltante.");
			return 1;
		}
	}
	
	if(strcmp(cmd, "/bafometro", true) == 0) {
	    if(pStats[playerid][Prof] == COP_MILITAR || pStats[playerid][Prof] == COP_RODOVIARIO || pStats[playerid][Prof] == COP_SWAT || IsPlayerAdmin(playerid)){
		    new tmp[128];
		    new string[128];
      		new plid;
			new distancia;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/bafometro [id]");
				return 1;
			}
         	plid = strval(tmp);
			if(IsPlayerConnected(plid) && Logado[playerid] == 1){
	    		distancia = GetDistanceBetweenPlayers(playerid, plid);
			    if(distancia > 15){
			        SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto!");
					return 1;
				}
				format(string, sizeof(string), "O Bafômetro mostrou: %d MG de alcool no sangue do suspeito.", pStats[plid][Alcool]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "O Oficial Sr. %s utilizou o bafômetro em você.");
				SendClientMessage(plid, COLOR_WHITE, string);
				if(pStats[plid][Alcool] > 3){
					SendClientMessage(playerid, COLOR_LIGHT_RED, "Atenção. Suspeito com quantidade de alcool acima do permitido.");
					return 1;
				} else if(pStats[plid][Alcool] < 3){
					SendClientMessage(playerid, COLOR_COP_SWAT, "Suspeito Com quantidade de alcool permitada pela lei.");
					return 1;
				}
			} else {
	            SendClientMessage(playerid, COLOR_GRAY, "Jogador não está conectado/logado");
				return 1;
			}
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não faz parte do departamento de policia!");
			return 1;
		}
	}
	if(strcmp(cmd, "/vender", true) == 0)
	{
	    if(pStats[playerid][Prof] == VENDEDOR_DE_ARMAS || IsPlayerAdmin(playerid))
		{
		    new plid = strval(strtok(cmdtext, idx));
		    if(!IsPlayerConnected(plid))
		    {
		        SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		        return 1;
		    }
		    if(plid == playerid)
		    {
		        SendClientMessage(playerid, COLOR_GRAY, "Você não pode vender armas para si mesmo.");
		        return 1;
		    }
		    if(GetDistanceBetweenPlayers(playerid, plid) > 15.0)
		    {
		        SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto.");
		        return 1;
		    }
			new tmp[128];
			tmp = strtok(cmdtext,idx);
			if(compare(tmp, "arma"))
			{
				new weaponid = strval(strtok(cmdtext,idx));
			    if(weaponid == 1 || weaponid == 2 || weaponid == 3 || weaponid == 4 || weaponid == 5 || weaponid == 6 || weaponid == 7 ||
			 	weaponid == 8 || weaponid == 9 || weaponid == 10 || weaponid == 11 || weaponid == 12 || weaponid == 13 || weaponid == 14 ||
			  	weaponid == 15 || weaponid == 17 || weaponid == 23 || weaponid == 24 || weaponid == 25 ||
			  	weaponid == 27 || weaponid == 29 || weaponid == 30 || weaponid == 31 || weaponid == 33)
			  	{
			  	    new string[128];
				   	format(string,sizeof(string),"[AMMU] Você ofereceu a arma %s por $%d a %s, aguarde resposta.",RPGWeapons[weaponid][Info_ArmaNome], RPGWeapons[weaponid][Info_ArmaValor], PlayerName(plid));
		      		SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS , string);
			 		format(string,sizeof(string),"[AMMU] O Vendedor de Armas %s está lhe oferencendo uma %s com %d munição, por $%d",PlayerName(playerid),RPGWeapons[weaponid][Info_ArmaNome], RPGWeapons[weaponid][Info_Municao], RPGWeapons[weaponid][Info_ArmaValor]);
		      		SendClientMessage(plid, COLOR_VENDEDOR_DE_ARMAS , string);
					SendClientMessage(plid, COLOR_CORRETOR, "Para aceitar digite: /aceitar ou /recusar");
					ParaAceitar[plid] = ACEITAR_ARMA;
			 		Armas[plid] = weaponid;
		   			VendedorVirou[plid] = playerid;
			  	}
			  	else
			  	{
			  	    SendClientMessage(playerid, COLOR_GRAY, "USO: /vender [id] [arma] [id da arma] [municao]");
			  	    SendClientMessage(playerid, COLOR_GRAY, "Veja as armas em /armas");
			  	    return 1;
			  	}
			}
			else if(compare(tmp, "camuflagem"))
			{
			    if(pStats[plid][Camuflagem] > 0)
			    {
			        SendClientMessage(playerid, COLOR_GRAY, "Esse jogador já está camuflado.");
			        return 1;
			    }
			    new mins = strval(strtok(cmdtext,idx));
			    if(mins < 1 || mins > 30)
			    {
			        SendClientMessage(playerid, COLOR_GRAY, "USO: /vender [id] [camuflagem] [minutos]");
 	    			SendClientMessage(playerid, COLOR_GRAY, "Minutos de 1 à 30.");
			  	    return 1;
			    }
			    SetPlayerTransparent(plid, 2);
			    pStats[plid][Camuflagem] = mins;
				TimerCamuflagem[plid] = SetTimerEx("PassandoCamuflagem", 60000, 0, "d", plid);
				SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS, "Camuflagem aplicada, peça para o jogador usar /pagar");
				new string[128];
				format(string, sizeof string, "O Vendedor de armas %s lhe aplicou uma camuflagem por %d minutos.", PlayerName(playerid), mins);
				SendClientMessage(plid, COLOR_VENDEDOR_DE_ARMAS, string);
				return 1;
			}
			else if(compare(tmp, "colete"))
			{
			    new Float:col;
			    GetPlayerArmour(plid, col);
			    if(col >= MAX_ARMOUR)
			    {
			        SendClientMessage(playerid, COLOR_GRAY, "Esse jogador já tem colete.");
			        return 1;
			    }
				SetPlayerArmourEx(plid, MAX_ARMOUR);
				SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS, "Colete vendido, peça para o jogador usar /pagar");
				new string[128];
				format(string, sizeof string, "O Vendedor de armas %s lhe vendeu um colete.", PlayerName(playerid));
				SendClientMessage(plid, COLOR_VENDEDOR_DE_ARMAS, string);
				return 1;
			}
			else if(compare(tmp, "bombarelogio"))
			{
			    if(pStats[plid][ClockBomb] == 1)
			    {
			        SendClientMessage(playerid, COLOR_GRAY, "Esse jogador já possui bomba relógio.");
			        return 1;
			    }
			    pStats[plid][ClockBomb] = 1;
			    SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS, "Bomba relógio vendida, peça para o jogador usar /pagar");
				new string[128];
				format(string, sizeof string, "O Vendedor de armas %s lhe vendeu uma bomba relógio.", PlayerName(playerid));
				SendClientMessage(plid, COLOR_VENDEDOR_DE_ARMAS, string);
				return 1;
			}
			else if(compare(tmp, "rojao"))
			{
			    new amount = strval(strtok(cmdtext,idx));
			    if(IsPlayerInGang(plid) && pStats[plid][GangueCargo] == 2)
				{
		    		if(pStats[plid][Rocket] == 7) return SendClientMessage(playerid, COLOR_GRAY, "Esse jogador já tem 7 rojões...");
		    		if(amount < 1 || amount > 7) return SendClientMessage(playerid, COLOR_GRAY, "USO: /vender [id] [rojao] [quantidade: 1 à 7]");
		    		if(amount + pStats[plid][Rocket] > 7) amount = 7 - pStats[plid][Rocket];
				}
				else
				{
		    		if(pStats[plid][Rocket] == 3) return SendClientMessage(playerid, COLOR_GRAY, "Esse jogador já tem 3 rojões...");
		    		if(amount < 1 || amount > 3) return SendClientMessage(playerid, COLOR_GRAY, "USO: /vender [id] [rojao] [quantidade: 1 à 3]");
					if(amount + pStats[plid][Rocket] > 3) amount = 3 - pStats[plid][Rocket];
				}
				pStats[plid][Rocket] += amount;
				new string[128];
				format(string, sizeof string, "Você vendeu %d rojão(ões) para o jogador, peça para ele usar /pagar", amount);
				SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS, string);
				format(string, sizeof string, "O Vendedor de Armas %s lhe vendeu %d rojão(ões).", PlayerName(playerid), amount);
				SendClientMessage(plid, COLOR_VENDEDOR_DE_ARMAS, string);
				return 1;
			}
			else if(compare(tmp, "flash"))
			{
			    new amount = strval(strtok(cmdtext,idx));
			    if(pStats[plid][Flash] == 3) return SendClientMessage(playerid, COLOR_GRAY, "Esse jogador já tem 3 flash's.");
			    if(amount < 1 || amount > 3) return SendClientMessage(playerid, COLOR_GRAY, "USO: /vender [id] [flash] [quantidade: 1 à 3]");
				if(amount + pStats[plid][Flash] > 3) amount = 3 - pStats[plid][Flash];
				pStats[plid][Flash] += amount;
				new string[128];
				format(string, sizeof string, "Você vendeu %d flash's para o jogador, peça para ele usar /pagar", amount);
				SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS, string);
				format(string, sizeof string, "O Vendedor de Armas %s lhe vendeu %d flash's.", PlayerName(playerid), amount);
				SendClientMessage(plid, COLOR_VENDEDOR_DE_ARMAS, string);
				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAY, "USO: /vender [id] [arma/camuflagem/colete/bombarelogio/rojao/flash]");
			    return 1;
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Vendedor de Armas.");
		    return 1;
		}
	}
	if(strcmp(cmd, "/premios", true) == 0) {
		if(pStats[playerid][Prof] == ASSASSINO || IsPlayerAdmin(playerid)){
			new string[128];
			new qt = 0;
			for(new i = 0; i < MAX_SLOTS; i++){
				if(pStats[i][ValorCabeca] > 0 && IsPlayerConnected(i)) {
				    format(string,sizeof(string),"ID: %d | Nome: %s | Valor da cabeça: $%d,00 dólares",i,PlayerName(i),pStats[i][ValorCabeca]);
					SendClientMessage(playerid, COLOR_ASSASSINO, string);
					qt++;
				}
			}
			if(qt == 0){
				SendClientMessage(playerid, COLOR_GRAY, "Ninguém com a cabeça premiada conectado nesse instante!");
			}
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "Você não é Assassino!");
		}
		return 1;
	}
	if(strcmp(cmd, "/sequestrar", true) == 0) {
	    if(pStats[playerid][Prof] == ASSASSINO || IsPlayerAdmin(playerid)){
			new tmp[128];
			new plid;
	    	new distancia;
			tmp = strtok(cmdtext, idx);
			plid = strval(tmp);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/sequestrar [id]");
				return 1;
	        }
			if(pStats[playerid][Morrendo] == 1){
			    SendClientMessage(playerid, COLOR_GRAY, "Você está morrendo, não pode sequestrar ninguém.");
				return 1;
			}
         	if(Sequestro[plid] == 1) {
				SendClientMessage(playerid, COLOR_GRAY, "Esta Pessoa já está Sequestrada!");
				return 1;
			}
			if(Cativeiro[plid] == 1) {
				SendClientMessage(playerid, COLOR_GRAY, "Esta Pessoa já está no Cativeiro!");
				return 1;
			}
			if(EstouComSequestro[playerid] == 1) {
				SendClientMessage(playerid, COLOR_GRAY, "Você já está com um sequestro em andamento.");
				return 1;
			}
			distancia = GetDistanceBetweenPlayers(playerid, plid);
			if(distancia > 10) {
   				SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto!");
				return 1;
			}
			if(plid == playerid){
   				SendClientMessage(playerid, COLOR_GRAY, "Você não pode se auto-sequestrar.");
				return 1;
			}
			if(pStats[plid][XL] < 5){
   				SendClientMessage(playerid, COLOR_GRAY, "Não sequestre novatos!");
				return 1;
			}
	        if(IsPlayerConnected(plid) && Logado[playerid] == 1) {
				new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez;
				GetPlayerPos(playerid,x,y,z);
				GetPlayerPos(plid,x2,y2,z2);
				distancex = x - x2;
				distancey = y - y2;
				distancez = z - z2;
				if(floatround(distancex) < 2 && floatround(distancex) > -2 && floatround(distancey) < 2 && floatround(distancey) > -2 && floatround(distancez) < 2 && floatround(distancez) > -2){
		    		SetPlayerControl(plid,0);
		    		SendClientMessage(playerid, COLOR_ASSASSINO, "Individuo sequestrado, tome cuidado com a polícia.");
		    		SendClientMessage(playerid, COLOR_JUIZ, "Comandos: /chutar /empurrar /levar /largar /colocarnoveiculo /desamarrar");
					SendClientMessage(plid,COLOR_LIGHT_RED, "[AMARRADO] Rápido alguém te amarrou por trás. Pegue seu celular ligue rápido para a policia /190, pode ser um sequestrador!!");
					Sequestrador[plid] = playerid;
					Sequestro[plid] = 1;
					EstouComSequestro[playerid] = 1;
		    		Amarrado[plid]=1;
					Amarrou[playerid]=1;
					AmarradoInfo[plid][0]=playerid;
		    		AmarradoInfo[playerid][1]=plid;
					TimerSequestro[playerid] = SetTimerEx("LigandoPolicia",15000,0,"dd",playerid,plid);
					new foi = 0;
					new string[128];
					for(new i=0; i<MAX_SLOTS; i++){
						if(IsPlayerConnected(i) && Logado[i] == 1 && GetDistanceBetweenPlayers(i,playerid) < 40){
						    if(i != playerid && i != plid){
						        foi = 1;
						     	if(IsPlayerTransparent(playerid)){
							        SendClientMessage(playerid, COLOR_RED, "Alguém viu o sequestro, ainda bem que está camuflado, mais é bom sair dai logo.");
									format(string,sizeof(string)," Rápido!! %s ele está próximo a você e foi amarrado pelo sequestrador, chame a polícia.",PlayerName(plid));
									SendClientMessage(i, COLOR_WHITE, string);
								} else {
							        SendClientMessage(playerid, COLOR_RED, " Corra, alguém viu o sequestro e o seu rosto, ele poderá avisar a polícia.");
									format(string,sizeof(string)," Você viu tudo, %s foi amarrado pelo %s, chame a polícia sem que ele perceba.",PlayerName(plid), PlayerName(playerid));
									SendClientMessage(i, COLOR_WHITE, string);
								}
							}
						}
					}
					new policia = random(7);
				    if(policia == 1 && foi == 0){
				    	AcusacaoCrime(playerid, "NONE", PlayerName(plid) , "Sequestro", 4, 0, 0, 1);
						SendClientMessage(playerid, COLOR_GRAY, "Mano, a polícia recebeu uma ligação de alguém que viu seu sequestro, é bom estar usando camuflagem!");
					}
		    		return 1;
				} else {
			    	SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto para imobilizá-lo");
			    	return 1;
				}
			} else{
    	        SendClientMessage(playerid, COLOR_GRAY, "Jogador não está conectado/logado");
				return 1;
			}
		}
	}

    if(strcmp(cmd, "/resgate", true) == 0)
	{
	  	if(Cativeiro[playerid] == 1)
		{
			Sequestro[playerid] = 0;
			Cativeiro[playerid] = 0;
			EstouComSequestro[Sequestrador[playerid]] = 0;
			SetPlayerControl(playerid,1);
		    Amarrado[playerid]=0;
			Amarrou[Sequestrador[playerid]]=0;
			AmarradoInfo[playerid][0]=-1;
		    AmarradoInfo[Sequestrador[playerid]][1]=-1;
		    KillTimer(TimerSequestro[Sequestrador[playerid]]);
			SendClientMessage(playerid, COLOR_GREEN, "Você pagou o resgate no valor de $1000 e foi solto (dinheiro retirado do banco).");
			pStats[playerid][Banco] -= 1000;
			Pay(Sequestrador[playerid], 1000);
			SendClientMessage(Sequestrador[playerid], COLOR_ASSASSINO, "Você recebeu a fuga no valor de $1000!");
		    SavePlayer(PlayerName(playerid),playerid);
			LogarPlayer(playerid);
			return 1;
		} else {
			SendClientMessage(playerid, COLOR_GRAY, "Você não está sequestrado!");
			return 1;
		}
	}

	if (strcmp(cmd, "/pedirarma", true)==0){
		new tmp[128];
		new string[128];
	    strmid(tmp, cmdtext, 10, strlen(cmdtext));
		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_GRAY, "/pedirarma [arma]");
			return 1;
		}
		if(pStats[playerid][PhoneNumb] == 0){
			SendClientMessage(playerid, COLOR_YELLOW, "Você não tem celular!");
			return 1;
		}
		else{
		    for(new i=0; i<MAX_SLOTS; i++){
		        if(pStats[i][Prof] == VENDEDOR_DE_ARMAS){
	    			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
					SetTimerEx("AcaoEspecial",6000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		           	SendClientMessage(playerid,COLOR_VENDEDOR_DE_ARMAS,"A mensagem foi enviada para o vendedor de armas.");
					format(string, sizeof(string), "%s pediu a arma: %s", PlayerName(playerid), tmp);
					SendClientMessageVendedor(COLOR_JUIZ, string);
				    SendClientMessage(playerid, COLOR_COP_SWAT, "Pedido de arma enviado!");
		        }
			}
            return 1;
		}
 	}

	if(strcmp(cmd, "/medemitir", true) == 0) {
	    if(pStats[playerid][Prof] == DESEMPREGADO) return SendClientMessage(playerid, COLOR_GRAY, "Tá querendo se demitir de desempregado?");
		PedindoDemissao[playerid] = 1;
		SendClientMessage(playerid, COLOR_WHITE, "Atenção!!! Se pedir demissão será desempregado");
		SendClientMessage(playerid, COLOR_WHITE, "Tem certeza que quer se demitir?");
		SendClientMessage(playerid, COLOR_WHITE, "/sim | /nao");
		return 1;
	}
	if(strcmp(cmd, "/sim", true) == 0) {
		if(PedindoDemissao[playerid] == 1){
		    if(pStats[playerid][Prof] == DESEMPREGADO)
		    {
		        SendClientMessage(playerid, COLOR_GRAY, "Você já está sem emprego...");
		        return 1;
		    }
			AplicarProfissao(playerid, DESEMPREGADO);
		} else if(AeroOfereceuTaxi[playerid] == 1){
     	    AeroOfereceuTaxi[playerid] = 0;
     		if(TemProfissao(TAXISTA) || TemProfissao(MOTO_TAXISTA)){
     		    SendClientMessage(playerid, COLOR_TAXISTA, "[Aeroporto] Taxistas informados. Aguarde.");
     	    	for(new i=0; i<MAX_SLOTS; i++){
			    	if(pStats[i][Prof] == TAXISTA || pStats[i][Prof] == MOTO_TAXISTA){
						SendClientMessage(i, COLOR_TAXISTA, "[Companhia] Taxistas, foi solicitado um táxi no aeroporto, vamos... peguem o passageiro.");
					}
				}
			}
		} else {
			SendClientMessage(playerid, COLOR_GRAY, "Não foi oferecido a você nenhuma proposta de Sim ou Não.");
		}
		return 1;
	}
	if(strcmp(cmd,"/nao",true) == 0) {
	    if(PedindoDemissao[playerid] == 1){
	    	SendClientMessage(playerid, COLOR_WHITE, "Pedido de demissão recusado!");
		    PedindoDemissao[playerid] = 0;
		} else if(AeroOfereceuTaxi[playerid] == 1){
     	    AeroOfereceuTaxi[playerid] = 0;
	    	SendClientMessage(playerid, COLOR_WHITE, "[Aeroporto] Obrigado, táxi recusado.");
		} else {
			SendClientMessage(playerid, COLOR_GRAY, "Não foi oferecido a você nenhuma proposta de Sim ou Não.");
		}
		return 1;
	}
	if(strcmp(cmd, "/kick", true) == 0) {
		if(IsPlayerAdmin(playerid)){
			new plid = strval(strtok(cmdtext,idx));
			if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador desconectado!");
            new motivo[128];
            new string[128];
			motivo = strtok(cmdtext,idx);
			if(!strlen(motivo)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /kick [id] [motivo]");
            new Hora,Minuto,Segundo,Ano,Mes,Dia;
            gettime(Hora,Minuto,Segundo);
			getdate(Ano,Mes,Dia);
			format(string,sizeof(string),"[%s/%s/%s - %s:%s:%s] %s kickado por %s | Motivo: %s",ApplyZero(Dia),ApplyZero(Mes),ApplyZero(Ano),ApplyZero(Hora),ApplyZero(Minuto),ApplyZero(Segundo),PlayerName(plid),PlayerName(playerid),motivo);
            writebanlog(string);
            format(string,sizeof(string),"%s foi kickado do servidor. MOTIVO: %s",PlayerName(plid),motivo);
			writelog(string);
			print(string);
			SendClientMessageToAll(COLOR_WHITE, string);
            Kick(plid);
			return 1;
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão!");
		}
	}


    if(strcmp(cmd, "/demitindoazarados", true) == 0){
		if(IsPlayerAdmin(playerid)){
			new tmp[128];
			new plid;
			tmp = strtok(cmdtext,idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAY, "USO: /demitindoazarados [id/do/jogador]");
				return 1;
			}
			plid = strval(tmp);
			if(!IsPlayerConnected(plid))
			{
				SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado");
				return 1;
			}
			if(pStats[plid][Prof] == DESEMPREGADO)
			{
				SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não possui uma profissão!");
				return 1;
			}
			else
			{
			    AplicarProfissao(plid, DESEMPREGADO);
			    SendClientMessage(playerid, COLOR_WHITE, "Feito.");
			    SendClientMessage(plid, COLOR_LIGHT_RED, "Você foi demitido da sua profissão por algum administrador...");
				return 1;
			}
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão!");
			return 1;
		}
	}
	if(strcmp(cmd, "/desbanir", true) == 0) {
		if(IsPlayerAdmin(playerid)){
			new pname[128];
			pname = strtok(cmdtext,idx);
			if(!strlen(pname)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /desbanir [nome]");
			if(!fexist(PlayerFile(pname))) return SendClientMessage(playerid, COLOR_GRAY, "Conta inexistente!");
			if(strval(GetValue(PlayerFile(pname),"Banido")) == 0) return SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está Banido!");
			SetValue(PlayerFile(pname),"Banido","0");
			SendClientMessage(playerid, COLOR_JUIZ, "Desbanido...");
			return 1;
		}
	}
	if(strcmp(cmd, "/banir", true) == 0) {
		if(IsPlayerAdmin(playerid)){
			new plid = strval(strtok(cmdtext,idx));
			if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador desconectado!");
            new motivo[128];
            new string[128];
			if(plid < 10) strmid(motivo, cmdtext, 9, strlen(cmdtext));
			else if(plid < 100) strmid(motivo, cmdtext, 10, strlen(cmdtext));
			else strmid(motivo, cmdtext, 11, strlen(cmdtext));
			if(!strlen(motivo)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /banir [id] [motivo]");
            new Hora,Minuto,Segundo,Ano,Mes,Dia;
            gettime(Hora,Minuto,Segundo);
			getdate(Ano,Mes,Dia);
			format(string,sizeof(string),"[%s/%s/%s - %s:%s:%s] %s banido por %s | Motivo: %s",ApplyZero(Dia),ApplyZero(Mes),ApplyZero(Ano),ApplyZero(Hora),ApplyZero(Minuto),ApplyZero(Segundo),PlayerName(plid),PlayerName(playerid),motivo);
            writebanlog(string);
            format(string,sizeof(string),"%s foi banido do servidor... MOTIVO: %s",PlayerName(plid),motivo);
			writelog(string);
			print(string);
            Banir(plid,motivo);
			return 1;
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão!");
			return 1;
		}
	}
    if(strcmp(cmd,"/dinheiro",true)==0)
	{
		if(IsPlayerAdmin(playerid))
		{
			new tmp[128];
			new plid,quantidade;
			tmp = strtok(cmdtext,idx);
			plid = strval(tmp);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAY, "USO: /dinheiro [id] [quantidade]");
				return 1;
			}
			tmp = strtok(cmdtext,idx);
			quantidade = strval(tmp);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAY, "USO: /dinheiro [id] [quantidade]");
				return 1;
			}
			if(IsPlayerConnected(plid)){
				AddPlayerMoney(plid, quantidade, 11);
				SendClientMessage(playerid, COLOR_GREEN, "Feito.");
				return 1;
			}
			else{
				SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado.");
				return 1;
			}
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão.");
			return 1;
		}
	}
	if(strcmp(cmd,"/setarinterior",true) == 0 && IsPlayerAdmin(playerid)){
		new tmp[128];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /setarinterior [id] [interior]");
		new plid = strval(tmp);
		if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /setarinterior [id] [interior]");
		SetPlayerInterior(plid,strval(tmp));
		SendClientMessage(playerid, COLOR_GREEN, "Feito.");
		return 1;
	}
	if(strcmp(cmd, "/acrescentarxpoints", true) == 0 && IsPlayerAdmin(playerid)) {
	    new plid = strval(strtok(cmdtext,idx)), arg = strval(strtok(cmdtext,idx));
	    if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
	    if(arg <= 0) return SendClientMessage(playerid, COLOR_GRAY, "USO: /acrescentarxpoints [id] [xpoints]");
		SendClientMessage(playerid, COLOR_GREEN, "Feito.");
		AcrescentarXpoints(plid,arg);
		return 1;
	}
	if(strcmp(cmd, "/diminuirxpoints", true) == 0 && IsPlayerAdmin(playerid)) {
	    new plid = strval(strtok(cmdtext,idx)), arg = strval(strtok(cmdtext,idx));
	    if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
	    if(arg <= 0) return SendClientMessage(playerid, COLOR_GRAY, "USO: /diminuirxpoints [id] [xpoints]");
		SendClientMessage(playerid, COLOR_GREEN, "Feito.");
		DiminuirXpoints(plid,arg);
		return 1;
	}
	if(strcmp(cmd, "/minhaweather", true) == 0 && IsPlayerAdmin(playerid)) {
	    new wid = strval(strtok(cmdtext,idx));
		SetPlayerWeather(playerid, wid);
		new msg[128];
		format(msg, sizeof msg, "Weather setada para %d.", wid);
		SendClientMessage(playerid, COLOR_WHITE, msg);
		return 1;
	}
	if(strcmp(cmd, "/setarlevel", true) == 0 && IsPlayerAdmin(playerid)) {
	    new tmp[128];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /setarlevel [id] [level]");
		    return 1;
		}
		new plid = strval(tmp);
		if(!IsPlayerConnected(plid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		    return 1;
		}
        tmp = strtok(cmdtext,idx);
		if(!strlen(tmp))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /setarlevel [id] [level]");
		    return 1;
		}
		new arg = strval(tmp);
		if(arg < 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Level inválido, tem que ser maior que 1");
		    return 1;
		}
		SendClientMessage(playerid, COLOR_GREEN, "Feito.");
		pStats[plid][XL] = arg;
		return 1;
	}
	if(strcmp(cmd, "/admincomandos", true) == 0 && IsPlayerAdmin(playerid)) {
	    SendClientMessage(playerid, COLOR_LIGHT_RED, "Comandos de administradores do Virtual Life RPG:");
		SendClientMessage(playerid, COLOR_WHITE, "/a /empregandosortudos /setarlevel /diminuixpoints /acrescentarxpoints /setarinterior");
		SendClientMessage(playerid, COLOR_WHITE, "/setarrespeito /ir /trazer /salvararquivos /zerarlevel /zerarrespeito /spawnvehicle");
		SendClientMessage(playerid, COLOR_WHITE, "/resetarprecos /anunciaralugueis /spauto /setaremprego /adminmsg /propresult");
		SendClientMessage(playerid, COLOR_WHITE, "/anunciarprocurados /anunciarvendas /tratartodos /bankstats /zerarxpoints /setarvida");
		SendClientMessage(playerid, COLOR_WHITE, "/specplayer /specvehicle /specoff  /tirargangue /colocargangue /setarcolete /goto");
		SendClientMessage(playerid, COLOR_WHITE, "/movetofront /movetoback /movetoright /movetoleft /addganglevel /carregarcarro /setararma");
        SendClientMessage(playerid, COLOR_WHITE, "/logarplayer /paralisar /desparalisar /ativartxt /desativartxt /atualizardata /tanqueservidor");
		return 1;
	}
	if(strcmp(cmd, "/propresult", true) == 0 && IsPlayerAdmin(playerid)) {
	    PropertiesResult();
	    return 1;
	}
	if(strcmp(cmd, "/ativartxt", true) == 0 && IsPlayerAdmin(playerid)) {
	    AdminText[playerid] = 1;
	    SendClientMessage(playerid, COLOR_GREEN, "Textos ativados.");
	    return 1;
	}
	if(strcmp(cmd, "/desativartxt", true) == 0 && IsPlayerAdmin(playerid)) {
	    AdminText[playerid] = 0;
	    SendClientMessage(playerid, COLOR_GREEN, "Textos desativados.");
	    return 1;
	}
	if(strcmp(cmd, "/paralisar", true) == 0 && IsPlayerAdmin(playerid)) {
	    new tmp[128];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /paralisar [id]");
		    return 1;
		}
		new plid = strval(tmp);
		SetPlayerControl(plid, false);
		SendClientMessage(playerid, COLOR_GREEN, "Feito.");
		return 1;
	}
	if(strcmp(cmd, "/desparalisar", true) == 0 && IsPlayerAdmin(playerid)) {
	    new tmp[128];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /desparalisar [id]");
		    return 1;
		}
		new plid = strval(tmp);
		if(PodeSair[plid] == 1)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador está em um veículo de aluguel ou sem gasolina, peça para ele digiter F ou ENTER.");
		    return 1;
		}
		SetPlayerControl(plid, true);
		SendClientMessage(playerid, COLOR_GREEN, "Feito.");
		return 1;
	}
	if(strcmp(cmd, "/a", true) == 0 && IsPlayerAdmin(playerid)) {
	    new text[128];
	    strmid(text, cmdtext, 3, strlen(cmdtext));
	    if(!strlen(text)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /a [texto]");
		new msg[128];
		format(msg, sizeof msg, "[ADMIN] %s: %s", PlayerName(playerid), text);
		SendClientMessageAdmin(COLOR_JUIZ, msg);
		return 1;
	}
	if(strcmp(cmd, "/goto", true) == 0 && IsPlayerAdmin(playerid)) {
	    new tmp[128];
	   	tmp = strtok(cmdtext,idx);
	   	if(!strlen(tmp)){
	   		SendClientMessage(playerid, COLOR_GRAY, "  ");
	   	    SendClientMessage(playerid, COLOR_GRAY, "SINTAXE CORRETA: /goto [nome do local]");
			SendClientMessage(playerid, COLOR_GRAY, "Nomes disponíveis: Delegacia, Sorveteria, Balada, Posto, Banco, Tuning, Fazenda");
			SendClientMessage(playerid, COLOR_GRAY, "Ammu-Nation, Hospital, Hotel, Skate, Emprego, Aeroporto, Pay'n'Spray, Seguradora");
			SendClientMessage(playerid, COLOR_GRAY, "Boate, Desmanche, Lixao, Auto-Escola, COEVL, Pizzaria, Loteria, 24/7, Energia");
			SendClientMessage(playerid, COLOR_GRAY, "Cavalos, Estadio, Propriedades, Bar, Restaurante, Concessionaria, BurgerShot");
			SendClientMessage(playerid, COLOR_GRAY, "Pesca, Cofre, Municao, Locadora, Praia, Morro, Ryder, Sweet, ECTVL, Chaveiro");
			SendClientMessage(playerid, COLOR_GRAY, "Binco, SubUrban, Victim, DidierSachs, ProLaps, Entretenimentos, Customizacao");
	   		return 1;
	   	}
		new localid = -1;
		for(new l = 0; l < sizeof GPSLocations; l++)
	   	{
	   	    if(compare(tmp, GPSLocations[l][GPS_LocationName]))
	   	    {
				if(localid != -1)
				{
				    new Float:dis[2];
				    new Float:X, Float:Y, Float:Z;
				    GetPlayerPos(playerid, X, Y, Z);
				    dis[0] += floatpower(X - GPSLocations[l][GPS_LocationX], 2);
				    dis[0] += floatpower(Y - GPSLocations[l][GPS_LocationY], 2);
				    dis[0] += floatpower(Z - GPSLocations[l][GPS_LocationZ], 2);
					dis[1] += floatpower(X - GPSLocations[localid][GPS_LocationX], 2);
				    dis[1] += floatpower(Y - GPSLocations[localid][GPS_LocationY], 2);
				    dis[1] += floatpower(Z - GPSLocations[localid][GPS_LocationZ], 2);
					if(floatsqroot(dis[0]) < floatsqroot(dis[1]))
					{
					    localid = l;
					}
				}
				else
				{
				    localid = l;
				}
	   	    }
	   	}
	   	if(localid == -1)
	   	{
	   	    SendClientMessage(playerid, COLOR_GRAY, "SINTAXE CORRETA: /goto [nome do local]");
			SendClientMessage(playerid, COLOR_GRAY, "Nomes disponíveis: Delegacia, Sorveteria, Balada, Posto, Banco, Tuning, Fazenda");
			SendClientMessage(playerid, COLOR_GRAY, "Ammu-Nation, Hospital, Hotel, Skate, Emprego, Aeroporto, Pay'n'Spray, Seguradora");
			SendClientMessage(playerid, COLOR_GRAY, "Boate, Desmanche, Lixao, Auto-Escola, COEVL, Pizzaria, Loteria, 24/7, Energia");
			SendClientMessage(playerid, COLOR_GRAY, "Cavalos, Estadio, Propriedades, Bar, Restaurante, Concessionaria, BurgerShot");
			SendClientMessage(playerid, COLOR_GRAY, "Pesca, Cofre, Municao, Locadora, Praia, Morro, Ryder, Sweet, ECTVL, Chaveiro");
			SendClientMessage(playerid, COLOR_GRAY, "Binco, SubUrban, Victim, DidierSachs, ProLaps, Entretenimentos, Customizacao");
	   		return 1;
	   	}
	   	SetPlayerInterior(playerid, 0);
	   	SetPlayerVirtualWorld(playerid, 0);
	   	NaCasa[playerid] = 0;
	   	PickupEntradaCasa[playerid] = 0;
		if(!IsPlayerInAnyVehicle(playerid))
		{
	   		SetPlayerPos(playerid, GPSLocations[localid][GPS_LocationX], GPSLocations[localid][GPS_LocationY], GPSLocations[localid][GPS_LocationZ]);
		}
		else
		{
		    SetVehiclePos(GetPlayerVehicleID(playerid), GPSLocations[localid][GPS_LocationX], GPSLocations[localid][GPS_LocationY], GPSLocations[localid][GPS_LocationZ]);
		}
		SendClientMessage(playerid, COLOR_JUIZ, "Feito.");
		return 1;
	}
	if(strcmp(cmd, "/atualizardata", true) == 0 && IsPlayerAdmin(playerid)) {
	    new msgdata[128];
    	format(msgdata,sizeof(msgdata),"~g~~h~%s ~n~~g~~h~%s/%s/%s",DiaNameGT[ValorDia],ApplyZero(DiaJogo),ApplyZero(MesJogo),ApplyZero(AnoJogo));
    	TextDrawSetString(TextData[0], msgdata);
		format(msgdata,sizeof(msgdata)," ~n~ ~n~~g~~h~%s ~n~~g~~h~%s/%s/%s",DiaNameGT[ValorDia],ApplyZero(DiaJogo),ApplyZero(MesJogo),ApplyZero(AnoJogo));
 		TextDrawSetString(TextData[1], msgdata);
 		SendClientMessage(playerid, COLOR_GREEN, "Texto da data atualizado.");
	}
	if(strcmp(cmd, "/setarvida", true) == 0 && IsPlayerAdmin(playerid)) {
	    new tmp[128];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /setarvida [id] [vida]");
		    return 1;
		}
		new plid = strval(tmp);
		if(!IsPlayerConnected(plid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		    return 1;
		}
        tmp = strtok(cmdtext,idx);
		if(!strlen(tmp))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /setarvida [id] [vida]");
		    return 1;
		}
		new Float:health = floatstr(tmp);
		SetPlayerHealthEx(plid, health);
		SendClientMessage(playerid, COLOR_GREEN, "Feito.");
		return 1;
	}
	if(strcmp(cmd, "/setarcolete", true) == 0 && IsPlayerAdmin(playerid)) {
	    new tmp[128];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /setarcolete [id] [colete]");
		    return 1;
		}
		new plid = strval(tmp);
		if(!IsPlayerConnected(plid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		    return 1;
		}
        tmp = strtok(cmdtext,idx);
		if(!strlen(tmp))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /setarcolete [id] [colete]");
		    return 1;
		}
		new Float:armour = floatstr(tmp);
		SetPlayerArmourEx(plid, armour);
		SendClientMessage(playerid, COLOR_GREEN, "Feito.");
		return 1;
	}
	if(strcmp(cmd, "/setararma", true) == 0 && IsPlayerAdmin(playerid)) {
	    new tmp[128];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /setararma [id] [arma] [municao]");
		    return 1;
		}
		new plid = strval(tmp);
		if(!IsPlayerConnected(plid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		    return 1;
		}
        tmp = strtok(cmdtext,idx);
		if(!strlen(tmp))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /setararma [id] [arma] [municao]");
		    return 1;
		}
		new weapon = strval(tmp);
		if((weapon < 1 || weapon > 15) && weapon != 17 && (weapon < 23 || weapon > 25) && weapon != 27 && (weapon < 29 || weapon > 31) && weapon != 33)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Arma inválida, veja todas disponíveis em /armas");
		    return 1;
		}
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /setararma [id] [arma] [municao]");
		    return 1;
		}
		new ammo = strval(tmp);
		GiveWeapon(plid, weapon, ammo);
		SendClientMessage(playerid, COLOR_GREEN, "Feito.");
		return 1;
	}
	if(strcmp(cmd, "/coq", true) == 0 && IsPlayerAdmin(playerid)) {
	    SetPlayerInterior(playerid, 1);
	    SetPlayerPos(playerid, 452.489990, -18.179698, 1001.132812);
	    return 1;
	}
	if(strcmp(cmd, "/ir", true) == 0 && IsPlayerAdmin(playerid)) {
		new tmp[128];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /ir [id]");
		    return 1;
		}
		new plid = strval(tmp);
		if(!IsPlayerConnected(plid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		    return 1;
		}
		new Float:X, Float:Y, Float:Z;
		if(!IsPlayerInAnyVehicle(plid))
		{
			GetPlayerPos(plid, X, Y, Z);
		}
		else
		{
		    GetVehiclePos(GetPlayerVehicleID(plid), X, Y, Z);
		}
		SetPlayerInterior(playerid, GetPlayerInterior(plid));
	   	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(plid));
	    NaCasa[playerid] = NaCasa[plid];
	    EntradaCasa[playerid][0] = EntradaCasa[plid][0];
	    EntradaCasa[playerid][1] = EntradaCasa[plid][1];
	    EntradaCasa[playerid][2] = EntradaCasa[plid][2];
		PickupEntradaCasa[playerid] = PickupEntradaCasa[plid];
		PickupAmmuSelect[playerid] = PickupAmmuSelect[plid];
	 	PickupUtilidadesSelect[playerid] = PickupUtilidadesSelect[plid];
	 	PickupBurgerShotSelect[playerid] = PickupBurgerShotSelect[plid];
	 	pickupbancoselecionada[playerid] = pickupbancoselecionada[plid];
		if(!IsPlayerInAnyVehicle(playerid))
		{
	   		SetPlayerPos(playerid, X + 1, Y + 1, Z);
		}
		else
		{
		    SetVehiclePos(GetPlayerVehicleID(playerid), X + 1, Y + 1, Z);
		}
		SendClientMessage(playerid, COLOR_GREEN, "Feito.");
		return 1;
	}
	if(strcmp(cmd, "/trazer", true) == 0 && IsPlayerAdmin(playerid)) {
		new tmp[128];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /trazer [id]");
		    return 1;
		}
		new plid = strval(tmp);
		if(!IsPlayerConnected(plid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		    return 1;
		}
		new Float:X, Float:Y, Float:Z;
		if(!IsPlayerInAnyVehicle(playerid))
		{
		    GetPlayerPos(playerid, X, Y, Z);
		}
		else
		{
			GetVehiclePos(GetPlayerVehicleID(playerid), X, Y, Z);
		}
		SetPlayerInterior(plid, GetPlayerInterior(playerid));
	   	SetPlayerVirtualWorld(plid, GetPlayerVirtualWorld(playerid));
	    NaCasa[plid] = NaCasa[playerid];
	    EntradaCasa[plid][0] = EntradaCasa[playerid][0];
	    EntradaCasa[plid][1] = EntradaCasa[playerid][1];
    	EntradaCasa[plid][2] = EntradaCasa[playerid][2];
		PickupEntradaCasa[plid] = PickupEntradaCasa[playerid];
		PickupEntradaCasa[plid] = PickupEntradaCasa[playerid];
		PickupAmmuSelect[plid] = PickupAmmuSelect[playerid];
	 	PickupUtilidadesSelect[plid] = PickupUtilidadesSelect[playerid];
	 	PickupBurgerShotSelect[plid] = PickupBurgerShotSelect[playerid];
	 	pickupbancoselecionada[plid] = pickupbancoselecionada[playerid];
		if(!IsPlayerInAnyVehicle(plid))
		{
			SetPlayerPos(plid, X + 1, Y + 1, Z);
		}
		else
		{
		    SetVehiclePos(GetPlayerVehicleID(plid), X + 1, Y + 1, Z);
		}
		SendClientMessage(playerid, COLOR_GREEN, "Feito.");
		return 1;
	}
	if(strcmp(cmd, "/spawnvehicle", true) == 0 && IsPlayerAdmin(playerid)) {
		new tmp[128];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			if(!IsPlayerInAnyVehicle(playerid))
			{
			    SendClientMessage(playerid, COLOR_GRAY, "USO: /spawnvehicle [id] , ou esteja em um veículo.");
			    return 1;
			}
		    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		}
		else
		{
		    if(!IsPlayerInAnyVehicle(strval(tmp)))
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está em um veículo.");
			    return 1;
			}
		    SetVehicleToRespawn(GetPlayerVehicleID(strval(tmp)));
		}
		SendClientMessage(playerid, COLOR_GREEN, "Feito.");
		return 1;
	}
	if(strcmp(cmd, "/movetofront", true) == 0 && IsPlayerAdmin(playerid)) {
	    new Float:x,Float:y,Float:z,Float:dis;
	    dis=Float:floatstr(strtok(cmdtext,idx));
	    GetPlayerPos(playerid,x,y,z);
		GetXYInFrontOfPlayer(playerid,x,y,(dis>0.0)?dis:1.5);
	    SetPlayerPos(playerid,x,y,z);
	    return 1;
	}
	if(strcmp(cmd, "/movetoback", true) == 0 && IsPlayerAdmin(playerid)) {
	    new Float:x,Float:y,Float:z,Float:dis;
	    dis=Float:floatstr(strtok(cmdtext,idx));
	    GetPlayerPos(playerid,x,y,z);
		GetXYInBackOfPlayer(playerid,x,y,(dis>0.0)?dis:1.5);
	    SetPlayerPos(playerid,x,y,z);
	    return 1;
	}
	if(strcmp(cmd, "/movetoright", true) == 0 && IsPlayerAdmin(playerid)) {
	    new Float:x,Float:y,Float:z,Float:dis;
	    dis=Float:floatstr(strtok(cmdtext,idx));
	    GetPlayerPos(playerid,x,y,z);
		GetXYInRightOfPlayer(playerid,x,y,(dis>0.0)?dis:1.5);
	    SetPlayerPos(playerid,x,y,z);
	    return 1;
	}
	if(strcmp(cmd, "/movetoleft", true) == 0 && IsPlayerAdmin(playerid)) {
	    new Float:x,Float:y,Float:z,Float:dis;
	    dis=Float:floatstr(strtok(cmdtext,idx));
	    GetPlayerPos(playerid,x,y,z);
		GetXYInLeftOfPlayer(playerid,x,y,(dis>0.0)?dis:1.5);
	    SetPlayerPos(playerid,x,y,z);
	    return 1;
	}
	if(strcmp(cmd, "/sin", true) == 0 && IsPlayerAdmin(playerid))
	{
		new angle_negative = strval(strtok(cmdtext,idx)) % 2;
		new coord[128]; coord = strtok(cmdtext,idx);
		new Float:distance = Float:floatstr(strtok(cmdtext,idx));
		if(coord[0] == 'X' || coord[0] == 'x')
		{
		    new Float:pos[4];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    GetPlayerFacingAngle(playerid, pos[3]);
		    if(angle_negative) pos[3] = -pos[3];
		    SetPlayerPos(playerid, pos[0] + distance * floatsin(pos[3], degrees), pos[1], pos[2]);
		}
		else if(coord[0] == 'Y' || coord[0] == 'y')
		{
		    new Float:pos[4];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    GetPlayerFacingAngle(playerid, pos[3]);
		    if(angle_negative) pos[3] = -pos[3];
		    SetPlayerPos(playerid, pos[0], pos[1] + distance * floatsin(pos[3], degrees), pos[2]);
		}
		else if(coord[0] == 'Z' || coord[0] == 'z')
		{
		    new Float:pos[4];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    GetPlayerFacingAngle(playerid, pos[3]);
		    if(angle_negative) pos[3] = -pos[3];
		    SetPlayerPos(playerid, pos[0], pos[1], pos[2] + distance * floatsin(pos[3], degrees));
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USE: /sin [angle_negative] [coord] [distance]");
		}
		return 1;
	}
	if(strcmp(cmd, "/cos", true) == 0 && IsPlayerAdmin(playerid))
	{
		new angle_negative = strval(strtok(cmdtext,idx)) % 2;
		new coord[128]; coord = strtok(cmdtext,idx);
		new Float:distance = Float:floatstr(strtok(cmdtext,idx));
		if(coord[0] == 'X' || coord[0] == 'x')
		{
		    new Float:pos[4];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    GetPlayerFacingAngle(playerid, pos[3]);
		    if(angle_negative) pos[3] = -pos[3];
		    SetPlayerPos(playerid, pos[0] + distance * floatcos(pos[3], degrees), pos[1], pos[2]);
		}
		else if(coord[0] == 'Y' || coord[0] == 'y')
		{
		    new Float:pos[4];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    GetPlayerFacingAngle(playerid, pos[3]);
		    if(angle_negative) pos[3] = -pos[3];
		    SetPlayerPos(playerid, pos[0], pos[1] + distance * floatcos(pos[3], degrees), pos[2]);
		}
		else if(coord[0] == 'Z' || coord[0] == 'z')
		{
		    new Float:pos[4];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    GetPlayerFacingAngle(playerid, pos[3]);
		    if(angle_negative) pos[3] = -pos[3];
		    SetPlayerPos(playerid, pos[0], pos[1], pos[2] + distance * floatcos(pos[3], degrees));
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USE: /cos [angle_negative] [coord] [distance]");
		}
		return 1;
	}
	if(strcmp(cmd, "/tan", true) == 0 && IsPlayerAdmin(playerid))
	{
		new angle_negative = strval(strtok(cmdtext,idx)) % 2;
		new coord[128]; coord = strtok(cmdtext,idx);
		new Float:distance = Float:floatstr(strtok(cmdtext,idx));
		if(coord[0] == 'X' || coord[0] == 'x')
		{
		    new Float:pos[4];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    GetPlayerFacingAngle(playerid, pos[3]);
		    if(angle_negative) pos[3] = -pos[3];
		    SetPlayerPos(playerid, pos[0] + distance * floattan(pos[3], degrees), pos[1], pos[2]);
		}
		else if(coord[0] == 'Y' || coord[0] == 'y')
		{
		    new Float:pos[4];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    GetPlayerFacingAngle(playerid, pos[3]);
		    if(angle_negative) pos[3] = -pos[3];
		    SetPlayerPos(playerid, pos[0], pos[1] + distance * floattan(pos[3], degrees), pos[2]);
		}
		else if(coord[0] == 'Z' || coord[0] == 'z')
		{
		    new Float:pos[4];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    GetPlayerFacingAngle(playerid, pos[3]);
		    if(angle_negative) pos[3] = -pos[3];
		    SetPlayerPos(playerid, pos[0], pos[1], pos[2] + distance * floattan(pos[3], degrees));
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USE: /tan [angle_negative] [coord] [distance]");
		}
		return 1;
	}
	if(strcmp(cmd, "/empregandosortudos", true) == 0 && IsPlayerConnected(playerid)) {
		if(IsPlayerAdmin(playerid) == 1) {
		    new profid = strval(strtok(cmdtext,idx));
		    if(profid < 1 || profid >= sizeof Profissoes)
		    {
		        new string[128];
		        format(string, sizeof string, "USO: /empregandosortudos [1-%d]", sizeof Profissoes - 1);
		        SendClientMessage(playerid, COLOR_GRAY, string);
		        return 1;
		    }
			SendClientMessage(playerid, COLOR_JUIZ, "Feito.");
			AplicarProfissao(playerid, profid);
			return 1;
		} else {
			SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão para isso!");
			return 1;
		}
	}
    if(strcmp(cmd, "/setaremprego", true) == 0 && IsPlayerConnected(playerid)) {
		if(IsPlayerAdmin(playerid) == 1) {
		    new plid = strval(strtok(cmdtext,idx));
		    new profid = strval(strtok(cmdtext,idx));
		    if(profid < 1 || profid >= sizeof Profissoes)
		    {
		        new string[128];
		        format(string, sizeof string, "USO: /setaremprego [id] [1-%d]", sizeof Profissoes - 1);
		        SendClientMessage(playerid, COLOR_GRAY, string);
		        return 1;
		    }
			SendClientMessage(playerid, COLOR_JUIZ, "Feito.");
			AplicarProfissao(plid, profid);
			return 1;
		} else {
			SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão para isso!");
			return 1;
		}
	}
	if(strcmp(cmd, "/r", true)==0){
		new tmp[128];
	    strmid(tmp, cmdtext, 3, strlen(cmdtext));
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAY, "USO: /r [texto]");
			return 1;
		}
		if(pStats[playerid][Prof] == COP_MILITAR || pStats[playerid][Prof] == COP_RODOVIARIO || pStats[playerid][Prof] == COP_SWAT || pStats[playerid][Prof] == DELEGADO)
		{
		    new string[128];
		    for(new i = 0; i < MAX_SLOTS; i++)
		    {
		        if(IsPlayerInAnyVehicle(i) && IsPolice(GetPlayerVehicleID(i)))
		        {
					format(string, sizeof string, "[RADIO POLICIA] %s: %s", PlayerName(playerid), tmp);
					SendClientMessage(i, COLOR_CENTRAL, string);
		        }
		        else if(pStats[i][Prof] == COP_MILITAR || pStats[i][Prof] == COP_RODOVIARIO || pStats[i][Prof] == COP_SWAT || pStats[i][Prof] == DELEGADO)
		        {
		            format(string, sizeof string, "[WALKTOKIE COP] %s: %s", PlayerName(playerid), tmp);
					SendClientMessage(i, COLOR_CENTRAL, string);
		        }
		    }
		    return 1;
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você deve estar em um veículo de profissão para falar no rádio.");
			return 1;
		}
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Para falar no rádio você deve estar dirigindo.");
			return 1;
		}
		new veh = GetPlayerVehicleID(playerid);
		if(IsTaxi(veh) || IsMotoTaxi(veh))
		{
		    new string[128];
		    format(string, sizeof string, "[RADIO TAXI] %s: %s", PlayerName(playerid), tmp);
		    for(new i = 0; i < MAX_SLOTS; i++)
		    {
		        if(IsTaxi(GetPlayerVehicleID(i)) || IsMotoTaxi(GetPlayerVehicleID(i)))
		        {
		            SendClientMessage(i, COLOR_TAXISTA, string);
		        }
		    }
		}
		else if(IsMotoPizza(veh))
		{
		    new string[128];
		    format(string, sizeof string, "[RADIO PIZZA] %s: %s", PlayerName(playerid), tmp);
		    for(new i = 0; i < MAX_SLOTS; i++)
		    {
		        if(IsMotoPizza(GetPlayerVehicleID(i)))
		        {
		            SendClientMessage(i, COLOR_ENTREGADOR_PIZZA, string);
		        }
		    }
		}
        else if(IsBus(veh))
		{
		    new string[128];
		    format(string, sizeof string, "[RADIO ONIBUS] %s: %s", PlayerName(playerid), tmp);
		    for(new i = 0; i < MAX_SLOTS; i++)
		    {
		        if(IsBus(GetPlayerVehicleID(i)))
		        {
		            SendClientMessage(i, COLOR_MOTORISTA_DE_ONIBUS, string);
		        }
		    }
		}
        else if(IsTruck(veh))
		{
		    new string[128];
		    format(string, sizeof string, "[RADIO CAMINHAO] %s: %s", PlayerName(playerid), tmp);
		    for(new i = 0; i < MAX_SLOTS; i++)
		    {
		        if(IsTruck(GetPlayerVehicleID(i)))
		        {
		            SendClientMessage(i, COLOR_CAMINHONEIRO, string);
		        }
		    }
		}
		else if(IsSANNews(veh))
		{
		    new string[128];
		    format(string, sizeof string, "[RADIO JORNAL] %s: %s", PlayerName(playerid), tmp);
		    for(new i = 0; i < MAX_SLOTS; i++)
		    {
		        if(IsSANNews(GetPlayerVehicleID(i)))
		        {
		            SendClientMessage(i, COLOR_JORNALISTA, string);
		        }
		    }
		}
        else if(IsDumper(veh))
		{
		    new string[128];
		    format(string, sizeof string, "[RADIO PEDRA] %s: %s", PlayerName(playerid), tmp);
		    for(new i = 0; i < MAX_SLOTS; i++)
		    {
		        if(IsDumper(GetPlayerVehicleID(i)))
		        {
		            SendClientMessage(i, COLOR_PEDREIRA, string);
		        }
		    }
		}
	    else if(IsAmbulance(veh))
		{
		    new string[128];
		    format(string, sizeof string, "[RADIO MEDICO] %s: %s", PlayerName(playerid), tmp);
		    for(new i = 0; i < MAX_SLOTS; i++)
		    {
		        if(IsAmbulance(GetPlayerVehicleID(i)))
		        {
		            SendClientMessage(i, COLOR_PARAMEDICO, string);
		        }
		    }
		}
		else if(IsTrashmaster(veh))
		{
		    new string[128];
		    format(string, sizeof string, "[RADIO LIMPEZA] %s: %s", PlayerName(playerid), tmp);
		    for(new i = 0; i < MAX_SLOTS; i++)
		    {
		        if(IsTrashmaster(GetPlayerVehicleID(i)))
		        {
		            SendClientMessage(i, COLOR_LIXEIRO, string);
		        }
		    }
		}
		else if(IsTowtruck(veh))
		{
		    new string[128];
		    format(string, sizeof string, "[RADIO GUINCHO] %s: %s", PlayerName(playerid), tmp);
		    for(new i = 0; i < MAX_SLOTS; i++)
		    {
		        if(IsTowtruck(GetPlayerVehicleID(i)))
		        {
		            SendClientMessage(i, COLOR_MECANICO, string);
		        }
		    }
		}
		else if(IsSecurity(veh))
		{
		    new string[128];
		    format(string, sizeof string, "[RADIO SEGURANÇA] %s: %s", PlayerName(playerid), tmp);
		    for(new i = 0; i < MAX_SLOTS; i++)
		    {
		        if(IsSecurity(GetPlayerVehicleID(i)))
		        {
		            SendClientMessage(i, COLOR_SEGURANÇA, string);
		        }
		    }
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você deve estar em um veículo de profissão para falar no rádio.");
		}
		return 1;
	}

	if(strcmp(cmdtext, "/profissao", true)==0){
		if(pStats[playerid][Prof] == DESEMPREGADO) {
			SendClientMessage(playerid, COLOR_LIGHT_RED, "Desempregado - Comandos:");
            SendClientMessage(playerid, COLOR_WHITE, "/pegarlata : Começa a fazer um circuito pegando latas. A cada 30 latas = 1XP");
            SendClientMessage(playerid, COLOR_WHITE, "/minhaslatas : Verifica quantas latas você possui!");
        	SendClientMessage(playerid, COLOR_WHITE, "/pararcoleta : Pára de coletar latinhas!");
        	SendClientMessage(playerid, COLOR_WHITE, "/venderlatas : Vende suas latas!");
        	SendClientMessage(playerid, COLOR_WHITE, "Você receberá 1 Xpoint a cada 30 latas coletadas.");
        	SendClientMessage(playerid, COLOR_WHITE, "Essa profissão não costuma trazer muito futuro aos jogadores, sugerimos que você escolha outra na agência!");
        	SendClientMessage(playerid, COLOR_WHITE, "Se não sabe onde é, digite /GPS lixao");
		}
		else if(pStats[playerid][Prof] == BARMAN) {
			SendClientMessage(playerid, COLOR_LIGHT_RED, "Barman - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/oferecer [id] [Bebida] : Oferece ao jogador uma bebida.");
			SendClientMessage(playerid, COLOR_WHITE, "Bebidas Quentes: Whisky, vodka, pinga");
			SendClientMessage(playerid, COLOR_WHITE, "Bebidas Geladas: cerveja, energetico, suco, guarana, agua");
			SendClientMessage(playerid, COLOR_WHITE, "Preços: Whisky: $60 | Vodka: $50 | Pinga: $25 | Cerveja: $40");
			SendClientMessage(playerid, COLOR_WHITE, "Preços: Energetico: $35 | Suco: $25 | Guarana: $20 | Água: $15");
			SendClientMessage(playerid, COLOR_WHITE, "/entregarbebidas : Entregar bebidas para um local.");
			SendClientMessage(playerid, COLOR_WHITE, "Cuidado! Se a polícia pegar o seu cliente dirigindo bêbado, ele vai preso! Avise-o.");
			SendClientMessage(playerid, COLOR_WHITE, "Locais de entregas de bebidas: Restaurante, Bar, Balada e Boate, para ver os que precisam abastecer digite /abastecimentos");
		}
		else if(pStats[playerid][Prof] == ASSASSINO) {
			SendClientMessage(playerid, COLOR_LIGHT_RED, "Assassino - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/sequestrar [id] : Sequestra uma pessoa para ganhar $$!");
            SendClientMessage(playerid, COLOR_WHITE, "/mandarmatar [id] : Comando que outro jogador poderá pedir para algum assassino mandar matar alguém.");
            SendClientMessage(playerid, COLOR_WHITE, "/premios : Ver os jogadores com a cabeça premiada.");
			SendClientMessage(playerid, COLOR_WHITE, "Você também poderá matar jogadores com a cabeça premiada para poder ganhar $$ e XL.");
			SendClientMessage(playerid, COLOR_WHITE, "Quando sequestrar um jogador, coloque-o em um carro de sequestro.");
		}
		else if(pStats[playerid][Prof] == VENDEDOR_DE_CARROS) {
			SendClientMessage(playerid, COLOR_LIGHT_RED,  "Vendedor de Veículos - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/vendercarro [modelo] [ID/Nome do comprador] [cor1] [cor2] : Vende um carro (esteja com ele na posição de spawn).");
			SendClientMessage(playerid, COLOR_WHITE, "/trocardono [id] : Troca o dono do veículo");
			SendClientMessage(playerid, COLOR_WHITE, "OBS: Não é mais preciso o ângulo ao setar carros!");
			SendClientMessage(playerid, COLOR_WHITE, "REQUERIMENTO: Não venda veículos para si mesmo, caso contrário será demitido na hora!");
			SendClientMessage(playerid, COLOR_WHITE, "Se quiser um veículo peça para um Administrador ou compre na concessionária ou a outro Vendedor de Carros.");
            SendClientMessage(playerid, COLOR_WHITE, "Peça para os jogadores lhe pagarem com o comando /pagar");
		}
		else if(pStats[playerid][Prof] == CORRETOR) {
			SendClientMessage(playerid, COLOR_LIGHT_RED, "Corretor de Imóveis - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/casa [ID/Nome do comprador] : Seta a casa para alguém (esteja na posiçao exterior à casa).");
			SendClientMessage(playerid, COLOR_WHITE, "/porcasaavenda [valor] : Colocar uma casa a venda e aguardar compradores.");
			SendClientMessage(playerid, COLOR_WHITE, "/redefinirpreco [valor] : Redefinir o valor de uma de suas casas colocadas à venda.");
			SendClientMessage(playerid, COLOR_WHITE, "/tirarcasaavenda : Tirar uma casa de venda, você deve estar nela.");
			SendClientMessage(playerid, COLOR_WHITE, "/comprarcasaavenda : Esse é o comando que os jogadores digitam pra comprar uma casa a venda.");
			SendClientMessage(playerid, COLOR_WHITE, "/tomarpossevenda : Toma posse de uma casa que esteja sendo vendida pelo servidor.");
            SendClientMessage(playerid, COLOR_WHITE, "O limite de casas a venda que você pode colocar à venda é 5, portanto selecione bem...");
			SendClientMessage(playerid, COLOR_WHITE, "REQUERIMENTO: Não venda imóveis para si mesmo, caso contrário será demitido na hora!");
            SendClientMessage(playerid, COLOR_WHITE, "Se quiser um imóvel peça para um Administrador ou compre de outro Corretor de Imóveis");
		}
		else if(pStats[playerid][Prof] == SEGURANÇA) {
			SendClientMessage(playerid, COLOR_LIGHT_RED, "Segurança - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/r [texto] : Rádio que você poderá usar para se comunicar com os jogadores que estão nos veículos da sua profissão.");
 	    	SendClientMessage(playerid, COLOR_WHITE, "/contratarseguranca [id] [valor] : Esse é o comando que os jogadores usam para lhe contratar.");
 	    	SendClientMessage(playerid, COLOR_WHITE, "/demitirseguranca [id] : Esse é o comando que os jogadores usam para lhe demitir.");
			SendClientMessage(playerid, COLOR_WHITE, "/transportar : Transporta a grana do Banco Central 24/7 de Las Venturas para outro banco.");
			SendClientMessage(playerid, COLOR_WHITE, "/pegardinheiro : Pega o dinheiro de um Carro Forte para depositar.");
        	SendClientMessage(playerid, COLOR_WHITE, "/depositardinheiro : Deposita o dinheiro em um Banco.");
           	SendClientMessage(playerid, COLOR_WHITE, "/escolta : Solicita escolta policial para carregar o dinheiro.");
           	SendClientMessage(playerid, COLOR_WHITE, "Cuidado! Assaltantes podem estar à sua espera, não deixe-os entrar no Carro Forte.");
		 	SendClientMessage(playerid, COLOR_WHITE, "Quando algum jogador lhe oferecer proposta de contrato, não esqueça de digitar /aceitar ou /recusar");
		}
		else if(pStats[playerid][Prof] == MOTORISTA_PARTICULAR) {
		    SendClientMessage(playerid, COLOR_LIGHT_RED, "Motorista Particular - Comandos:");
	    	SendClientMessage(playerid, COLOR_WHITE, "/lavarlimosine : Lavar uma limosine da LuxLimosine.");
			SendClientMessage(playerid, COLOR_WHITE, "/revisarlimosine : Revisar uma limosine da LuxLimosine.");
			SendClientMessage(playerid, COLOR_WHITE, "Procure por pessoas interessadas em seus serviços...");
		}
		else if(pStats[playerid][Prof] == MOTORISTA_DE_ONIBUS) {
		    SendClientMessage(playerid, COLOR_LIGHT_RED, "Motorista de ônibus - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/r [texto] : Rádio que você poderá usar para se comunicar com os jogadores que estão nos veículos da sua profissão.");
			SendClientMessage(playerid, COLOR_WHITE, "/terminais : Ativar o CheckPoint dos terminais, você irá até eles buscando passageiros!");
			SendClientMessage(playerid, COLOR_WHITE, "/desativarterminais : Desativar o CheckPoint dos terminais...");
			SendClientMessage(playerid, COLOR_WHITE, "/informartransporte : Comando utilizado para informar que existe ônibus em circulação.");
			SendClientMessage(playerid, COLOR_WHITE, "/destrancar : Destrancar um ônibus.");
			SendClientMessage(playerid, COLOR_WHITE, "Terminais: Bar, Sorveteria, Restaurante, Balada, Corretora de propriedades, Loteria, Aeroporto, Hospital,");
			SendClientMessage(playerid, COLOR_WHITE, "Posto, Banco, Loja de registro de cofres, Loja de utilidades 24/7 e Pizzaria");
			SendClientMessage(playerid, COLOR_WHITE, "Dirigindo seu ônibus e indo para os terminais você conseguirá ganhar Xpoint.");
			SendClientMessage(playerid, COLOR_WHITE, "Tarifa automática, ao entrar o passageiro pagará.");
		}
		else if(pStats[playerid][Prof] == CAMINHONEIRO) {
		    SendClientMessage(playerid, COLOR_LIGHT_RED, "Caminhoneiro - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/r [texto] : Rádio que você poderá usar para se comunicar com os jogadores que estão nos veículos da sua profissão.");
			SendClientMessage(playerid, COLOR_WHITE, "/carga [id] : Mostra a algum policial a documentação da carga.");
			SendClientMessage(playerid, COLOR_WHITE, "/carregar: Para carregar o caminhão, antes de seguir viagem");
            SendClientMessage(playerid, COLOR_WHITE, "-Carregamento em Geral: Carrega o caminhão com destino certo");
            SendClientMessage(playerid, COLOR_WHITE, "-Combustível: É necessário deixar a carga em algum posto");
            SendClientMessage(playerid, COLOR_WHITE, "-Drogas: É mais rentável porém pode acontecer imprevistos");
            SendClientMessage(playerid, COLOR_WHITE, "-Roupas: É necessário deixar a carga em alguma loja de roupas BINCO");
		}
		else if(pStats[playerid][Prof] == PESCADOR) {
		    SendClientMessage(playerid, COLOR_LIGHT_RED, "Pescador - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/iscas [quantia/de/iscas] : Para pegar iscas (Você deve estar em uma cooperativa de pesca).");
	    	SendClientMessage(playerid, COLOR_WHITE, "/pescar : Joga a rede para pescar, você deve estar na área de pesca.");
        	SendClientMessage(playerid, COLOR_WHITE, "/venderpesca : Vende seu pescado em uma cooperativa, você deve estar em uma.");
			SendClientMessage(playerid, COLOR_WHITE, "/minhasiscas : Ver sua quantidade de iscas.");
			SendClientMessage(playerid, COLOR_WHITE, "Agora que você é pescador não precisará pagar as suas iscas!");
		}
		else if(pStats[playerid][Prof] == ENTREGADOR_PIZZA) {
		    SendClientMessage(playerid, COLOR_LIGHT_RED, "Entregador de Pizza - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/r [texto] : Rádio que você poderá usar para se comunicar com os jogadores que estão nos veículos da sua profissão.");
			SendClientMessage(playerid, COLOR_WHITE, "/pegarpizza : Para entregar as pizzas é necessário ter pizzas na moto.");
	    	SendClientMessage(playerid, COLOR_WHITE, "/pizza : Para vender uma pizza à um cliente");
	    	SendClientMessage(playerid, COLOR_WHITE, "/entregarpizza : Começa a entrega de pizzas automática.");
	    	SendClientMessage(playerid, COLOR_WHITE, "/pararentrega : Parar a entrega de pizzas automática.");
	    	SendClientMessage(playerid, COLOR_WHITE, "/verpizzas : Ver a quantidade de pizzas que a moto tem.");
   	    	SendClientMessage(playerid, COLOR_WHITE, "Para pedir uma pizza, os clientes podem digitar /servico pizza.");
   	    	SendClientMessage(playerid, COLOR_WHITE, "Você receberá 1 Xpoint a cada 5 entregas de pizzas automáticas.");
		}
		else if(pStats[playerid][Prof] == TAXISTA) {
			SendClientMessage(playerid, COLOR_LIGHT_RED, "Taxista - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/r [texto] : Rádio que você poderá usar para se comunicar com os jogadores que estão nos veículos da sua profissão.");
			SendClientMessage(playerid, COLOR_WHITE, "/ttaxi [id] : Começa a rodar o taxímetro (o passageiro tem que estar no seu carro).");
			SendClientMessage(playerid, COLOR_WHITE, "/entregas : Inicia a entrega de encomendas e pacotes pela cidade.");
			SendClientMessage(playerid, COLOR_WHITE, "/pararentregas : Cancela as entregas de pacotes pela cidade.");
			SendClientMessage(playerid, COLOR_WHITE, "/GPS [nome do local] : Para ligar o GPS.");
			SendClientMessage(playerid, COLOR_WHITE, "/desligargps : Para desligar o GPS.");
			SendClientMessage(playerid, COLOR_WHITE, "/informartransporte : Comando utilizado para informar que existe Taxista.");
			SendClientMessage(playerid, COLOR_WHITE, "/destrancar : Destrancar um taxi.");
  			SendClientMessage(playerid, COLOR_WHITE, "Os passageiros entram em contato a cooperativa de taxi pelo comando /servico [taxi]");
		}
		else if(pStats[playerid][Prof] == MOTO_TAXISTA) {
			SendClientMessage(playerid, COLOR_LIGHT_RED,  "Mototaxista - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/r [texto] : Rádio que você poderá usar para se comunicar com os jogadores que estão nos veículos da sua profissão.");
			SendClientMessage(playerid, COLOR_WHITE, "/mtaxi [id] : Começa a cobrança da viagem.");
			SendClientMessage(playerid, COLOR_WHITE, "/entregas : Inicia a entrega de encomendas e pacotes pela cidade.");
			SendClientMessage(playerid, COLOR_WHITE, "/pararentregas : Cancela as entregas de pacotes pela cidade.");
			SendClientMessage(playerid, COLOR_WHITE, "/GPS [nome do local] : Para ligar o GPS.");
			SendClientMessage(playerid, COLOR_WHITE, "/desligargps : Para desligar o GPS.");
			SendClientMessage(playerid, COLOR_WHITE, "/informartransporte : Comando utilizado para informar que existe Taxista.");
			SendClientMessage(playerid, COLOR_WHITE, "/destrancar : Destrancar uma mototaxi.");
            SendClientMessage(playerid, COLOR_WHITE, "As motos de taxi estão na Central dos Taxistas");
		}
		else if(pStats[playerid][Prof] == INSTRUTOR) {
			SendClientMessage(playerid, COLOR_LIGHT_RED, "Instrutor de Direção - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/testeterrestre [id] : Inicia o Teste Terrestre para Habilitar uma pessoa a dirigir veículos terrestres (carros e motos).");
			SendClientMessage(playerid, COLOR_WHITE, "/habaerea [id] : Habilita uma pessoa a dirigir veículos aereos (aviões e helicopteros).");
			SendClientMessage(playerid, COLOR_WHITE, "/habnautica [id] : Habilita uma pessoa a dirigir veículos nauticos (barcos).");
			SendClientMessage(playerid, COLOR_WHITE, "/carteiras : Ver o valor das carteiras | /destrancar : Destrancar um veículo da auto escola.");
			SendClientMessage(playerid, COLOR_WHITE, "/agendarteste [id] : Esse é o comando que os jogadores usam para agendar um teste com você.");
			SendClientMessage(playerid, COLOR_WHITE, "/agendatestes : Ver a agenda de testes da auto escola. | /apagaragenda : Apagar a agenda de testes da auto escola.");
			SendClientMessage(playerid, COLOR_WHITE, "/cancelarteste : Para cancelar algum teste.");
		}
		else if(pStats[playerid][Prof] == TRAFICANTE) {
			SendClientMessage(playerid, COLOR_LIGHT_RED, "Traficante - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/pegardroga : Cria o CP do local aonde você pega as drogas para vender.");
			SendClientMessage(playerid, COLOR_WHITE, "/maconha [id] [teor] : Vender maconha, pode ser detectado  no  sangue da pessoa.");
			SendClientMessage(playerid, COLOR_WHITE, "/cocaina [id] [teor] : Vender cocaina, pode detectar no sangue da pessoa.");
			SendClientMessage(playerid, COLOR_WHITE, "/heroina [id] [teor] : Vender heroína, pode ser detectado no sangue da pessoa.");
			SendClientMessage(playerid, COLOR_WHITE, "/meubolso : Mostra a quantidade de papelotes de cada droga.");
			SendClientMessage(playerid, COLOR_WHITE, "/plantardrogas : Plantar drogas em um veículo.");
			SendClientMessage(playerid, COLOR_WHITE, "/pararplantacao : Para parar sua plantação de drogas em um veículo.");
			SendClientMessage(playerid, COLOR_WHITE, "Cuidado! Se a polícia te pegar em flagrante vendendo/plantando drogas, você será preso!");
		}
		else if(pStats[playerid][Prof] == JORNALISTA) {
		    SendClientMessage(playerid, COLOR_LIGHT_RED, "Jornalista - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/r [texto] : Rádio que você poderá usar para se comunicar com os jogadores que estão nos veículos da sua profissão.");
			SendClientMessage(playerid, COLOR_WHITE, "/noticia [texto] : Publicar uma noticia. Ex:empregos(informado pelo ADM), e o que acontence em de San Andreas");
	    	SendClientMessage(playerid, COLOR_WHITE, "/propaganda [texto] : Publica uma propaganda de alguma pessoa ou serviço");
	    	SendClientMessage(playerid, COLOR_WHITE, "/publicar [texto] : Publicar um anúncio na tela!");
            SendClientMessage(playerid, COLOR_WHITE, "/jornalinfo : Ver as informações de jornal.");
            SendClientMessage(playerid, COLOR_WHITE, "/entrevistar [id] : Pedir para entrevistar um jogador, ele deve aceitar com /darentrevista");
			SendClientMessage(playerid, COLOR_WHITE, "/terminarentrevista : Finalizar sua entrevista.");
            SendClientMessage(playerid, COLOR_LIGHT_RED, "/profissao2 para ver mais comandos da sua profissão.");
		}
		else if(pStats[playerid][Prof] == PARAMEDICO) {
		    SendClientMessage(playerid, COLOR_LIGHT_RED, "Paramédico - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/r [texto] : Rádio que você poderá usar para se comunicar com os jogadores que estão nos veículos da sua profissão.");
			SendClientMessage(playerid, COLOR_WHITE, "/pegarkit : Pegar o Kit para poder fazer o curativo/salvamento.");
	    	SendClientMessage(playerid, COLOR_WHITE, "/curar [id] : Curar um jogador.");
            SendClientMessage(playerid, COLOR_WHITE, "/salvar [id] : Salvar um jogador quando ele estiver inconsciente.");
			SendClientMessage(playerid, COLOR_WHITE, "/tratamentodrogas [id] : Faz um tratamento para remover as drogas do paciente.");
	    	SendClientMessage(playerid, COLOR_WHITE, "/venderremedio [id] [quantidade] : Vender remédio ao jogador.");
			SendClientMessage(playerid, COLOR_WHITE, "/tratardoenca [id] : Tratar a doença de um jogador.");
            SendClientMessage(playerid, COLOR_WHITE, "/vacinar [id] : Vacinar um jogador.");
            SendClientMessage(playerid, COLOR_WHITE, "Seu objetivo é manter Los Santos saudável, você é imune à doenças contagiosas.");
		}
		else if(pStats[playerid][Prof] == ADVOGADO) {
			SendClientMessage(playerid, COLOR_LIGHT_RED, "Advogado - Comandos:");
            SendClientMessage(playerid, COLOR_WHITE, "/advogado : Comando digitado pelos clientes para solicitar um advogado.");
            SendClientMessage(playerid, COLOR_WHITE, "/meuadvogado [id] : Durante o julgamento, os jogadores podem usar esse comando para declararem você como seus advogados");
            SendClientMessage(playerid, COLOR_WHITE, "/checarficha [nome] : Checa a ficha criminal de um jogador, pode lhe ajudar na defesa contra pessoas com ficha suja.");
            SendClientMessage(playerid, COLOR_WHITE, "/consultar [id] : Consulta se aconteceu alguma denuncia aquele jogador.");
            SendClientMessage(playerid, COLOR_WHITE, "/limpar [id] : Para 'Limpar' o jogador para que desapareca suas estrelas de procurado.");
            SendClientMessage(playerid, COLOR_WHITE, "Esteja na Delegacia para checar a ficha criminal de alguém.");
			SendClientMessage(playerid, COLOR_WHITE, "Seu objetivo é defender seus clientes de acusações perante a presença de um Juiz.");
			SendClientMessage(playerid, COLOR_WHITE, "Evite discussões fora do julgamento, podem causar problemas à você e seu cliente...");
            SendClientMessage(playerid, COLOR_WHITE, "Peça para os jogadores lhe pagarem com /pagar");
		}
  		else if(pStats[playerid][Prof] == JUIZ) {
		    SendClientMessage(playerid, COLOR_LIGHT_RED, "Juiz - Comandos:");
		    SendClientMessage(playerid, COLOR_WHITE, "/checarficha [nome] : Checa a ficha criminal de um jogador.");
			SendClientMessage(playerid, COLOR_WHITE, "/tribunal [id 1] [id 2] : Inicia um julgamento entre 2 jogadores.");
			SendClientMessage(playerid, COLOR_WHITE, "/soltar [id] : Após seu veredicto, você usa este comando para determinar a soltura do réu.");
			SendClientMessage(playerid, COLOR_WHITE, "/declararpreso [id] [minutos] [fianca] : Durante o julgamento, declara a prisão de um jogador.");
			SendClientMessage(playerid, COLOR_WHITE, "/fimtribunal : Declara o fim do tribunal, dado com aceitação das partes.");
			SendClientMessage(playerid, COLOR_WHITE, "/entregarmandato [id] [dono da casa] [minutos] : Conceder mandato para arrombar uma casa à um policial");
			SendClientMessage(playerid, COLOR_WHITE, "OBS: Fiança no valor de $0,00 dólares = SEM FIANÇA.");
		}
		else if(pStats[playerid][Prof] == COP_MILITAR || pStats[playerid][Prof] == COP_RODOVIARIO || pStats[playerid][Prof] == COP_SWAT)
		{
			SendClientMessage(playerid, COLOR_LIGHT_RED, "Policial Militar/Rodoviário/SWAT - Comandos:");
    		SendClientMessage(playerid, COLOR_WHITE, "/r [texto] : Falar na rádio policial.");
    		SendClientMessage(playerid, COLOR_WHITE, "/prender [id] [motivo] : Prender um jogador.");
    		SendClientMessage(playerid, COLOR_WHITE, "/bafometro [id] : Checar o nível de alcool no sangue de um jogador.");
    		SendClientMessage(playerid, COLOR_WHITE, "/cone : Criar um cone para blitz policial.");
    		SendClientMessage(playerid, COLOR_WHITE, "/multar [pessoa/veiculo] [id] [quantidade] : Aplicar uma multa à um jogador ou veículo.");
    		SendClientMessage(playerid, COLOR_WHITE, "/procurar [id] [motivo] : Aplicar um jogador na lista de procurados.");
    		SendClientMessage(playerid, COLOR_WHITE, "/desprocurar [id] : Retirar um jogador da lista de procurados.");
    		SendClientMessage(playerid, COLOR_WHITE, "/portedearmas : Checar o porte de armas.");
    		SendClientMessage(playerid, COLOR_LIGHT_RED, "Para ver mais comandos policiais digite /profissao2");
		}
		else if(pStats[playerid][Prof] == DELEGADO) {
		    SendClientMessage(playerid, COLOR_LIGHT_RED, "Delegado - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/r [texto] : Falar na rádio policial.");
    		SendClientMessage(playerid, COLOR_WHITE, "/prender [id] [motivo] : Prender um jogador.");
    		SendClientMessage(playerid, COLOR_WHITE, "/bafometro [id] : Checar o nível de alcool no sangue de um jogador.");
    		SendClientMessage(playerid, COLOR_WHITE, "/cone : Criar um cone para blitz policial.");
    		SendClientMessage(playerid, COLOR_WHITE, "/multar [pessoa/veiculo] [id] [quantidade] : Aplicar uma multa à um jogador ou veículo.");
    		SendClientMessage(playerid, COLOR_WHITE, "/procurar [id] [motivo] : Aplicar um jogador na lista de procurados.");
    		SendClientMessage(playerid, COLOR_WHITE, "/desprocurar [id] : Retirar um jogador da lista de procurados.");
    		SendClientMessage(playerid, COLOR_WHITE, "/portedearmas : Checar o porte de armas.");
    		SendClientMessage(playerid, COLOR_LIGHT_RED, "Para ver mais comandos policiais digite /profissao2");
		}
	    else if(pStats[playerid][Prof] == LIXEIRO) {
  	        SendClientMessage(playerid, COLOR_LIGHT_RED, "Lixeiro - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/r [texto] : Rádio que você poderá usar para se comunicar com os jogadores que estão nos veículos da sua profissão.");
			SendClientMessage(playerid, COLOR_WHITE, "/coletarlixo : Iniciar missão de coleção de lixo.");
        	SendClientMessage(playerid, COLOR_WHITE, "/lixao : Deposita o lixo coletado com \"/coletarlixo\" no Lixão.");
        	SendClientMessage(playerid, COLOR_WHITE, "/pararcoletalixo : Cancelar a missão de coleção de lixo.");
            SendClientMessage(playerid, COLOR_WHITE, "/pegarlata : Começa a fazer um circuito pegando latas.");
            SendClientMessage(playerid, COLOR_WHITE, "/minhaslatas : Verifica quantas latas você possui!");
        	SendClientMessage(playerid, COLOR_WHITE, "/pararcoleta : Para de coletar latinhas!");
        	SendClientMessage(playerid, COLOR_WHITE, "/venderlatas : Vende suas latas!");
		}
		else if(pStats[playerid][Prof] == CONTRABANDISTA) {
 	        SendClientMessage(playerid, COLOR_LIGHT_RED, "Contrabandista - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/contrabando : Inicia um contrabando. Veja os contrabandos do gamemode:");
			SendClientMessage(playerid, COLOR_WHITE, "-Pacote: Contrabando no navio em San Fierro perto da boate do Jizzys");
			SendClientMessage(playerid, COLOR_WHITE, "-Carro: Contrabando de carros, o traficante do morro pede, os triads checam e dispacham o carro");
			SendClientMessage(playerid, COLOR_WHITE, "-Armas: Contrabando de armas ilegais.");
			SendClientMessage(playerid, COLOR_WHITE, "-Drogas: Contrabando de drogas, o traficante do morro lhe informa onde você pode conseguir grana transportando drogas.");
			SendClientMessage(playerid, COLOR_WHITE, "/cancelarcontrabando : Cancela o contrabando!");
		 	SendClientMessage(playerid, COLOR_WHITE, "Atenção! Se a polícia te pegar fazendo contrabando você será preso");
		 	SendClientMessage(playerid, COLOR_WHITE, "e a mercadoria será apreendida!");
		}
		else if(pStats[playerid][Prof] == AGRICULTOR) {
 	        SendClientMessage(playerid, COLOR_LIGHT_RED, "Agricultor - Comandos:");
  			SendClientMessage(playerid, COLOR_WHITE, "/plantarmilho : Planta o milho no campo.");
          	SendClientMessage(playerid, COLOR_WHITE, "/vendermilho : Vende o milho colhido na fazenda.");
          	SendClientMessage(playerid, COLOR_WHITE, "/tirarleite : Tira leite das vacas.");
          	SendClientMessage(playerid, COLOR_WHITE, "/venderleite : Vende o leite das vacas na fazenda.");
		}
		else if(pStats[playerid][Prof] == ASSALTANTE) {
 	        SendClientMessage(playerid, COLOR_LIGHT_RED, "Assaltante - Comandos:");
  			SendClientMessage(playerid, COLOR_WHITE, "/assaltar : Chegue em um banco, digite, depois fuja.");
  			SendClientMessage(playerid, COLOR_WHITE, "/roubar [id] : Para assaltar um jogador.");
  			SendClientMessage(playerid, COLOR_WHITE, "/desmanche : Vende o carro para o desmanche");
  			SendClientMessage(playerid, COLOR_WHITE, "/desmanchevalor : Ver quanto o desmanche está oferecendo por algum veículo.");
  			SendClientMessage(playerid, COLOR_WHITE, "/roubarcelular [id] : Roubar o celular de um jogador.");
  			SendClientMessage(playerid, COLOR_WHITE, "/escondercarro : Esconder um carro, você tem que estar em um esconderijo.");
  			SendClientMessage(playerid, COLOR_WHITE, "/roubarcarroforte : Rouba um carro forte, você precisa estar próximo dele.");
			SendClientMessage(playerid, COLOR_WHITE, "Procure esconderijos em Los Santos, ao entrar em um esse será identificado para você...");
			SendClientMessage(playerid, COLOR_WHITE,  "/profissao2 para ver mais comandos de sua profissão.");
		}
		else if(pStats[playerid][Prof] == FRENTISTA) {
 	        SendClientMessage(playerid, COLOR_LIGHT_RED, "Frentista - Comandos:");
 			SendClientMessage(playerid, COLOR_WHITE, "/abastecerveiculo [litros] : Abastece um veículo.");
 			SendClientMessage(playerid, COLOR_WHITE, "/vendergalao [id] [1-20] : Vende um galão de combustível para um jogador.");
 			SendClientMessage(playerid, COLOR_WHITE, "Você também pode abastecer veículos do governo/servidor, irá receber por isso.");
 			SendClientMessage(playerid, COLOR_WHITE, "Peça para os jogadores usarem /pagar para receber pelos seus serviços.");
		}
		else if(pStats[playerid][Prof] == PEDREIRA) {
 	        SendClientMessage(playerid, COLOR_LIGHT_RED, "Carregador da Pedreira - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/r [texto] : Rádio que você poderá usar para se comunicar com os jogadores que estão nos veículos da sua profissão.");
			SendClientMessage(playerid, COLOR_WHITE, "/carregarcaminhao : Carrega o caminhão na Pedreira!");
        	SendClientMessage(playerid, COLOR_WHITE, "O Descarregamento é feito quando você entra no CheckPoint de uma das obras.");
		}
		else if(pStats[playerid][Prof] == VENDEDOR_DE_ARMAS) {
 	        SendClientMessage(playerid, COLOR_LIGHT_RED, "Vendedor de Armas  - Comandos:");
  			SendClientMessage(playerid, COLOR_WHITE, "/vender [id] [arma/camuflagem/colete/bombarelogio/rojao/flash] : Vender algum equipamento para um jogador.");
        	SendClientMessage(playerid, COLOR_WHITE, "/armas : Ver os ID's das armas.");
        	SendClientMessage(playerid, COLOR_WHITE, "Os jogadores podem entrar em contato com você pelo comando /servico [diskarma]");
        	SendClientMessage(playerid, COLOR_WHITE, "Peça para os jogadores lhe pagarem com /pagar");
		}
		else if(pStats[playerid][Prof] == MECANICO) {
		    SendClientMessage(playerid, COLOR_LIGHT_RED, "Mecânico - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/r [texto] : Rádio que você poderá usar para se comunicar com os jogadores que estão nos veículos da sua profissão.");
			SendClientMessage(playerid, COLOR_WHITE, "/consertar : Conserta o carro em que você estiver dirigindo.");
		    SendClientMessage(playerid, COLOR_WHITE, "/pintar [cor 1] [cor 2] : Parâmetros desnecessários.");
		    SendClientMessage(playerid, COLOR_WHITE, "/placa [nome] : Mudar a placa de um veículo | /colocarfume : Colocar fumê em um veículo.");
		    SendClientMessage(playerid, COLOR_WHITE, "/colocarairbag : Colocar airbag em um veículo.");
            SendClientMessage(playerid, COLOR_WHITE, "/instalarkit : Instalar Kit de Travas e Alarmes em um veículo.");
			SendClientMessage(playerid, COLOR_WHITE, "Você pode rebocar os veículos apertando LMB e levá-los para os seus devidos lugares.");
		    SendClientMessage(playerid, COLOR_WHITE, "Atenção: Não esqueça de cobrar pelas customizações feitas nos veículo, peça para os jogadores lhe pagarem com /pagar");
		    SendClientMessage(playerid, COLOR_WHITE, "AVISO: Enquanto haver mecânico no jogo, a loja de customização não ficará em funcionamento.");
		}
		else if(pStats[playerid][Prof] == PROSTITUTA) {
 	        SendClientMessage(playerid, COLOR_LIGHT_RED, "Prostituta - Comandos:");
  			SendClientMessage(playerid, COLOR_WHITE, "/strip-tease [id] : Oferece um strip-tease na boate!");
        	SendClientMessage(playerid, COLOR_WHITE, "/sexo [id] : Oferece uma transa na cama de um hotel.");
        	SendClientMessage(playerid, COLOR_WHITE, "/mudarposicao [1-4] : Troca a posição na hora do sexo!");
        	SendClientMessage(playerid, COLOR_WHITE, "/fazerstrip : Começa a fazer strip-tease na boate!");
        	SendClientMessage(playerid, COLOR_WHITE, "/pararstrip : Parar de fazer strip-tease na boate!");
        	SendClientMessage(playerid, COLOR_WHITE, "/pagarstrip [ID/da/striper] : Esse é o comando que os jogadores usam para pagar o strip-tease!");
		}
    	return 1;
	}

	if(strcmp(cmd,"/profissao2",true) == 0) {
	    if(pStats[playerid][Prof] == COP_MILITAR || pStats[playerid][Prof] == COP_RODOVIARIO || pStats[playerid][Prof] == COP_SWAT) {
    		SendClientMessage(playerid, COLOR_LIGHT_RED, "Policial Militar/Rodoviário/SWAT - Comandos Parte II:");
    		SendClientMessage(playerid, COLOR_WHITE, "/confiscar [id] [armas/celular/chavesmestras/habilitacao/porte/passaporte] : Confiscar objetos de um jogador.");
    		SendClientMessage(playerid, COLOR_WHITE, "/apreenderveiculo : Apreender um veículo por dívidas ou drogas plantadas.");
    		SendClientMessage(playerid, COLOR_WHITE, "/liberarveiculo [id] : Liberar um veículo apreendido.");
    		SendClientMessage(playerid, COLOR_WHITE, "/revistar [id] : Revistar um jogador.");
    		SendClientMessage(playerid, COLOR_WHITE, "/megafone [mensagem] : Falar no Mega Fone.");
    		SendClientMessage(playerid, COLOR_WHITE, "/checarficha [nome] : Checa a Ficha Criminal de um jogador.");
    		SendClientMessage(playerid, COLOR_WHITE, "/reforco : Solicita reforço onde estiver. |  /consultar [id] : Checa se ocorreu alguma denúncia.");
    		SendClientMessage(playerid, COLOR_WHITE, "/pegarequipamento : Pegar equipamento de combate.");
    		SendClientMessage(playerid, COLOR_LIGHT_RED, "Para ver mais comandos policiais digite /profissao3");
    	}
		else if(pStats[playerid][Prof] == DELEGADO) {
			SendClientMessage(playerid, COLOR_LIGHT_RED,  "Delegado - Comandos Parte II:");
	    	SendClientMessage(playerid, COLOR_WHITE, "/confiscar [id] [armas/celular/chavesmestras/habilitacao/porte/passaporte] : Confiscar objetos de um jogador.");
    		SendClientMessage(playerid, COLOR_WHITE, "/apreenderveiculo : Apreender um veículo por dívidas ou drogas plantadas.");
    		SendClientMessage(playerid, COLOR_WHITE, "/liberarveiculo [id] : Liberar um veículo apreendido.");
    		SendClientMessage(playerid, COLOR_WHITE, "/revistar [id] : Revistar um jogador.");
    		SendClientMessage(playerid, COLOR_WHITE, "/megafone [mensagem] : Falar no Mega Fone.");
    		SendClientMessage(playerid, COLOR_WHITE, "/checarficha [nome] : Checa a Ficha Criminal de um jogador.");
    		SendClientMessage(playerid, COLOR_WHITE, "/reforco : Solicita reforço onde estiver |  /consultar [id] : Checa se ocorreu alguma denúncia.");
    		SendClientMessage(playerid, COLOR_WHITE, "/pegarequipamento : Pegar equipamento de combate.");
    		SendClientMessage(playerid, COLOR_LIGHT_RED, "Para ver mais comandos policiais digite /profissao3");
		}
		else if(pStats[playerid][Prof] == ASSALTANTE) {
			SendClientMessage(playerid, COLOR_LIGHT_RED,  "Assaltante - Comandos Parte II:");
			SendClientMessage(playerid, COLOR_WHITE, "/arrombarcasa : Iniciar o roubo de uma casa, você precisa ter chave mestra.");
			SendClientMessage(playerid, COLOR_WHITE, "/roubartv : Roubar a televisão de uma casa.");
			SendClientMessage(playerid, COLOR_WHITE, "/roubarradio : Roubar o rádio de uma casa.");
			SendClientMessage(playerid, COLOR_WHITE, "/roubarfogao : Roubar o fogão de uma casa.");
            SendClientMessage(playerid, COLOR_WHITE, "/roubargeladeira : Roubar a geladeira de uma casa.");
			SendClientMessage(playerid, COLOR_WHITE, "/cofresenha [senha] : Comando para tentar abrir o cofre de uma casa.");
		}
		else if(pStats[playerid][Prof] == JORNALISTA){
			SendClientMessage(playerid, COLOR_LIGHT_RED, "Jornalista - Comandos Parte II:");
			SendClientMessage(playerid, COLOR_WHITE, "/ativarcamera : Ativar a câmera de filmagem (você deve estar como passageiro no helicóptero de reportagem)");
			SendClientMessage(playerid, COLOR_WHITE, "/desativarcamera : Desativar a câmera de filmagem.");
			SendClientMessage(playerid, COLOR_WHITE, "Os Jogadores poderão ver a visão da câmera e as entrevistas pela Televisão");
   			SendClientMessage(playerid, COLOR_WHITE, "Veja dicas de publicações no \"/publicar\" em /dicaspublicar");
			SendClientMessage(playerid, COLOR_WHITE, "REQUERIMENTOS: Não anuncie bobagens, evite erros de escrita, não abrevie palavras, por exemplo: trocando \"que\" por \"q\"");
			SendClientMessage(playerid, COLOR_WHITE, "OBS: Peça para os jogadores pagarem os anúncios com /pagar");
		}
		return 1;
	}
	if(strcmp(cmd,"/profissao3",true) == 0) {
	    if(pStats[playerid][Prof] == COP_MILITAR || pStats[playerid][Prof] == COP_RODOVIARIO || pStats[playerid][Prof] == COP_SWAT) {
    		SendClientMessage(playerid, COLOR_LIGHT_RED, "Policial Militar/Rodoviário/SWAT - Comandos Parte III:");
    		SendClientMessage(playerid, COLOR_WHITE, "/rastrear [id] : Rastrear os veículos de um jogador.");
    		SendClientMessage(playerid, COLOR_WHITE, "/exame [id] : Realizar o exame Anti-Dopping em um jogador");
    		SendClientMessage(playerid, COLOR_WHITE, "/vexame : Checar se um veículo está com drogas plantadas.");
    		SendClientMessage(playerid, COLOR_WHITE, "/algemar [id] : Algemar um jogador à força caso ele não se entregue.");
            SendClientMessage(playerid, COLOR_WHITE, "/entregarvdocumentos [placa] : Ver os documentos de um veículo através da placa.");
			SendClientMessage(playerid, COLOR_WHITE, "Ao abordar alguém, peça para que o mesmo digite /render");
    		SendClientMessage(playerid, COLOR_WHITE, "Ao abordar um Caminhoneiro, peça para que ele digite /carga [id]");
    		SendClientMessage(playerid, COLOR_WHITE, "Você pode capturar jogadores procurados e receber recompensas.");
    		SendClientMessage(playerid, COLOR_WHITE, "Aperte 2 na viatura para solicitar que algum veículo encoste.");
		}
		else if(pStats[playerid][Prof] == DELEGADO) {
			SendClientMessage(playerid, COLOR_LIGHT_RED,  "Delegado - Comandos Parte III:");
			SendClientMessage(playerid, COLOR_WHITE, "/rastrear [id] : Rastrear os veículos de um jogador.");
    		SendClientMessage(playerid, COLOR_WHITE, "/exame [id] : Realizar o exame Anti-Dopping em um jogador");
    		SendClientMessage(playerid, COLOR_WHITE, "/vexame : Checar se um veículo está com drogas plantadas.");
    		SendClientMessage(playerid, COLOR_WHITE, "/algemar [id] : Algemar um jogador à força caso ele não se entregue.");
    		SendClientMessage(playerid, COLOR_WHITE, "Ao abordar alguém, peça para que o mesmo digite /render");
    		SendClientMessage(playerid, COLOR_WHITE, "Ao abordar um Caminhoneiro, peça para que ele digite /carga [id]");
    		SendClientMessage(playerid, COLOR_WHITE, "Você pode capturar jogadores procurados e receber recompensas.");
    		SendClientMessage(playerid, COLOR_WHITE, "Aperte 2 na viatura para solicitar que algum veículo encoste.");
    		SendClientMessage(playerid, COLOR_LIGHT_RED, "Para ver mais comandos policiais digite /profissao4");
		}
		return 1;
	}
	if(strcmp(cmd,"/profissao4",true) == 0) {
		if(pStats[playerid][Prof] == DELEGADO) {
		    SendClientMessage(playerid, COLOR_LIGHT_RED,  "Delegado - Comandos Parte IV:");
		    SendClientMessage(playerid, COLOR_WHITE, "/ordem : Enviar uma ordem aos policiais.");
			SendClientMessage(playerid, COLOR_WHITE, "/soltar [id] : Soltar um jogador da prisão.");
			SendClientMessage(playerid, COLOR_WHITE, "/porte [id] [porte] : Conceder porte à alguém.");
			SendClientMessage(playerid, COLOR_WHITE, "/removerporte [id] [porte] : Remover o porte de alguém.");
        	SendClientMessage(playerid, COLOR_WHITE, "/abrirdelegacia : Define quem pode entrar na Delegacia de Los Santos.");
        	SendClientMessage(playerid, COLOR_WHITE, "/chamarsala [id] : Chamar algum jogador para a sua sala (usada para interrogatórios).");
        	SendClientMessage(playerid, COLOR_WHITE, "/promover [id] : Promover um policial.");
        	SendClientMessage(playerid, COLOR_WHITE, "/rebaixar [id] : Rebaixar um policial.");
        	SendClientMessage(playerid, COLOR_WHITE, "/entregarvdocumentos [placa/id] : Ver os documentos de um veículo através da placa.");
		}
		return 1;
	}
	if(strcmp(cmd,"/consertar",true)==0){
	    if(pStats[playerid][Prof] == MECANICO || IsPlayerAdmin(playerid)){
	        if(IsPlayerInAnyVehicle(playerid)){
	            new vehid = GetPlayerVehicleID(playerid);
				new Float:X, Float:Y, Float:Z, Float:ang;
				GetVehiclePos(vehid, X, Y, Z);
				GetVehicleZAngle(vehid, ang);
				SetVehicleToRespawn(vehid);
				GameTextForPlayer(playerid, "~w~consertando...", 10000, 0);
				SetTimerEx("ConsertarVeiculo", 10000, 0, "dffff", playerid, vehid, X, Y, Z, ang);
				SendClientMessage(playerid, COLOR_MECANICO, "Consertando veículo...");
				return 1;
			} else {
			    SendClientMessage(playerid,COLOR_GRAY,"Você não está em um veículo!");
			}
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Você não é mecânico!");
		}
		return 1;
	}
    if(strcmp(cmd,"/pintar",true)==0){
		if(pStats[playerid][Prof] == MECANICO || IsPlayerAdmin(playerid)){
			if(IsPlayerInAnyVehicle(playerid)){
			    if(GetPlayerVehicleID(playerid) < AmountServerVehicles){
		            new vehid = GetPlayerVehicleID(playerid);
		            new tmp[128];
		            new colors[2];
		            colors[0] = -1;
		            colors[1] = -1;
		            tmp = strtok(cmdtext, idx);
		            if(strlen(tmp) > 0)
		            {
		           		colors[0] = VehicleColor(strval(tmp));
					}
					tmp = strtok(cmdtext, idx);
		            if(strlen(tmp) > 0)
		            {
		           		colors[1] = VehicleColor(strval(tmp));
					}
					while(colors[0] == -1) { colors[0] = RandomVehicleColor(); }
	    			while(colors[1] == -1) { colors[1] = RandomVehicleColor(); }
					ChangeVehicleColor(vehid, colors[0], colors[1]);
					SaveColors(vehid, colors[0], colors[1]);
					SendClientMessage(playerid,COLOR_MECANICO,"Veículo pintado...");
	  			} else {
				    SendClientMessage(playerid,COLOR_GRAY,"Você não pintar veículos do servidor.");
				}
  			} else {
			    SendClientMessage(playerid,COLOR_GRAY,"Você não está em um veículo!");
			}
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Você não é mecânico!");
		}
		return 1;
	}
	if(strcmp(cmd,"/colocarfume",true)==0){
	    if(pStats[playerid][Prof] == MECANICO || IsPlayerAdmin(playerid)){
	        if(!IsPlayerInAnyVehicle(playerid))
		    {
		        SendClientMessage(playerid,COLOR_GRAY,"Você não está em um veículo.");
		        return 1;
		    }
			if(vStats[GetPlayerVehicleID(playerid)][Fume] == 1)
			{
			    SendClientMessage(playerid,COLOR_GRAY,"Esse veículo já tem fumê.");
		        return 1;
			}
			vStats[GetPlayerVehicleID(playerid)][Fume] = 1;
			SendClientMessage(playerid, COLOR_MECANICO, "Filtros de fumê colocados.");
			return 1;
        } else {
		    SendClientMessage(playerid,COLOR_GRAY,"Você não é mecânico!");
		    return 1;
		}

	}
	if(strcmp(cmd,"/instalarkit",true)==0){
        if(pStats[playerid][Prof] == MECANICO || IsPlayerAdmin(playerid)){
            if(!IsPlayerInAnyVehicle(playerid))
		    {
		        SendClientMessage(playerid,COLOR_GRAY,"Você não está em um veículo.");
		        return 1;
		    }
			if(vStats[GetPlayerVehicleID(playerid)][VAlarme] > 0)
			{
			    SendClientMessage(playerid,COLOR_GRAY,"Esse veículo já tem Kit de Travas e Alarmes.");
		        return 1;
			}
		    new vehid = GetPlayerVehicleID(playerid);
			if(vehid < AmountServerVehicles)
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Você não pode comprar travas para um veículo do servidor.");
			    return 1;
			}
			vStats[GetPlayerVehicleID(playerid)][VAlarme] = 1;
			vStats[GetPlayerVehicleID(playerid)][VTravas] = 1;
			SendClientMessage(playerid, COLOR_MECANICO, "Alarme instalado.");
			return 1;
        } else {
		    SendClientMessage(playerid,COLOR_GRAY,"Você não é mecânico!");
		    return 1;
		}
	}
	if(strcmp(cmd,"/colocarairbag",true)==0){
		if(pStats[playerid][Prof] == MECANICO || IsPlayerAdmin(playerid)){
		    if(!IsPlayerInAnyVehicle(playerid))
		    {
		        SendClientMessage(playerid,COLOR_GRAY,"Você não está em um veículo.");
		        return 1;
		    }
			if(vStats[GetPlayerVehicleID(playerid)][Airbag] > 0)
			{
			    SendClientMessage(playerid,COLOR_GRAY,"Esse veículo já possui airbag.");
		        return 1;
			}
			vStats[GetPlayerVehicleID(playerid)][Airbag] = 4;
			SendClientMessage(playerid, COLOR_MECANICO, "Airbag colocado no veículo.");
			return 1;
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Você não é mecânico!");
		    return 1;
		}
	}
	if(strcmp(cmd,"/placa",true) == 0) {
  		if(pStats[playerid][Prof] == MECANICO || IsPlayerAdmin(playerid)){
   			new tmp[128];
   			strmid(tmp,cmdtext,7,15);
			if(!strlen(tmp)){
			   	SendClientMessage(playerid, COLOR_GRAY, "Uso: /placa [nome]");
			   	SendClientMessage(playerid, COLOR_GRAY, "O máximo de caracteres do nome é 8");
			   	return 1;
		   	}
		   	if(AcharVeiculoPorPlaca(tmp) != -1){
				SendClientMessage(playerid, COLOR_GRAY, "Essa placa já existe em outro veículo...");
				return 1;
			}
		   	for(new s = 0; s < strlen(tmp); s++){
				if(strfind(tmp,"_",false,s) != -1 || strfind(tmp,"*",false,s) != -1 || strfind(tmp,"'",false,s) != -1 || strfind(tmp,"/",false,s) != -1 || strfind(tmp,"?",false,s) != -1 || strfind(tmp,">",false,s) != -1
				|| strfind(tmp,"<",false,s) != -1 || strfind(tmp,":",false,s) != -1 || strfind(tmp,"?",false,s) != -1 || strfind(tmp,"\"",false,s) != -1 || strfind(tmp,"|",false,s) != -1 || strfind(tmp,"!",false,s) != -1){
					SendClientMessage(playerid, COLOR_GRAY, "Sem caracteres especiais na nova placa (\" _ * < > \\ / ? | : ' !)");
					return 1;
				}
			}
		   	new string[128];
		   	if(IsPlayerInAnyVehicle(playerid)){
		   	    if(GetPlayerVehicleID(playerid) >= AmountServerVehicles){
			   		SetVehicleNumberPlate(GetPlayerVehicleID(playerid),tmp);
			   		format(string, sizeof(string),"Placa do veículo mudada para %s",tmp);
			   		SendClientMessage(playerid, COLOR_MECANICO,string);
			   		SalvarPlaca(GetPlayerVehicleID(playerid),tmp);
				  	return 1;
				} else {
				    SendClientMessage(playerid, COLOR_GRAY, "Você não pode mudar a placa de um veículo do servidor...");
					return 1;
				}
   			} else {
       			SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em um veiculo!");
       			return 1;
       		}
   		} else {
	       	SendClientMessage(playerid, COLOR_GRAY, "Você não é mecânico!");
	       	return 1;
 		}
	}
 	if(strcmp(cmd,"/verplaca",true) == 0) {
        if(IsPlayerInAnyVehicle(playerid)){
			new string[128];
			format(string, sizeof(string), "Placa do veículo: %s", vStats[GetPlayerVehicleID(playerid)][VPlaca]);
			SendClientMessage(playerid, COLOR_MECANICO, string);
			return 1;
		} else {
			SendClientMessage(playerid, COLOR_GRAY, "Você precisa estar em um veículo para usar este comando.");
			return 1;
		}
	}

	if(strcmp(cmd, "/texuguicionssss",true)==0 && IsPlayerInAnyVehicle(playerid)){
	    new id = GetPlayerVehicleID(playerid);
	    new model = GetVehicleModel(id);
	    switch(model){
	        case 581,523,462,521,463,522,461,448,468,586: AddVehicleComponent(id,1010);
		}
		return 1;
	}
	if(strcmp(cmd, "/mtaxi", true) == 0 && IsPlayerConnected(playerid)) {
		if(pStats[playerid][Prof] == MOTO_TAXISTA || IsPlayerAdmin(playerid)) {
	        new tmp[128];
	        new plid;
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp)) {
	            SendClientMessage(playerid, COLOR_GRAY, "/mtaxi [id]");
	            return 1;
			}
			plid = strval(tmp);
			if(!IsPlayerConnected(plid)){
        	    SendClientMessage(playerid, COLOR_GRAY, "O jogador não está conectado/logado.");
        	    return 1;
			}
			if(Taximetro[plid][0] == 1 || MTaximetro[plid][0] == 1){
				SendClientMessage(playerid, COLOR_GRAY, "O Taxímetro já está rodando");
				return 1;
			}
			new vehid = GetPlayerVehicleID(playerid);
			if(!IsPlayerInVehicle(plid,vehid)){
			    SendClientMessage(playerid, COLOR_GRAY, "Ele tem que estar no seu veículo!");
				return 1;
			}
      		if(!IsMotoTaxi(GetPlayerVehicleID(playerid)))
			{
   				SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma Moto autorizada. Tem que ser uma WayFarrer da Yellow's Taxi");
				return 1;
			}
  		   	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
  		   	    if(plid != playerid){
					SendClientMessage(playerid, COLOR_MOTO_TAXISTA, "O Moto-Taxímetro começou a rodar");
				    SendClientMessage(plid, COLOR_MOTO_TAXISTA, "O Moto-Taxímetro já está rodando. A corrida está sendo cobrada a partir de agora.");
				    MTaximetro[plid][0] = 1;
					MTaximetro[plid][1] = playerid;
					new warn[128];
		            format(warn, sizeof warn, "**** O Taxímetro de %s começou a rodar para o jogador %s ****", PlayerName(playerid), PlayerName(plid));
     				SendClientMessageAdmin(COLOR_YELLOW, warn);
					return 1;
				} else {
					SendClientMessage(playerid, COLOR_GRAY, "Você não pode ligar o Moto-Taxímetro para você.");
					return 1;
				}
			} else {
				SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar dirigindo");
				return 1;
			}
	   	} else {
       		SendClientMessage(playerid, COLOR_GRAY, "Você não é Moto-taxista.");
			return 1;
		}
	}
	if(strcmp(cmd, "/destrancar", true) == 0) {
	    if(!IsPlayerInAnyVehicle(playerid))
		{
     		SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
       		return 1;
		}
		if(GetPlayerVehicleID(playerid) >= AmountServerVehicles)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não pode destrancar um veículo de outro jogador, somente do servidor.");
       		return 1;
		}
		SendClientMessage(playerid, COLOR_GREEN, "Veículo destrancado...");
		for(new i = 0; i < MAX_SLOTS; i++)
		{
  			if(i != playerid)
  			{
   				SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid), i, 0, 0);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ttaxi", true) == 0 && IsPlayerConnected(playerid)) {
	    if(pStats[playerid][Prof] == TAXISTA || IsPlayerAdmin(playerid)){
			new tmp[128];
	    	new plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/ttaxi [id]");
			}
        	plid = strval(tmp);
        	if(!IsPlayerConnected(plid)){
        	    SendClientMessage(playerid, COLOR_GRAY, "O jogador não está conectado/logado.");
        	    return 1;
			}
			if(plid == playerid){
				SendClientMessage(playerid, COLOR_GRAY, "Você não pode ligar o taximetro pra você.");
				return 1;
			}
			if(Taximetro[plid][0] == 1 || MTaximetro[plid][0] == 1){
				SendClientMessage(playerid, COLOR_GRAY, "O Taxímetro já está rodando");
				return 1;
			}
			new vehid = GetPlayerVehicleID(playerid);
			if(!IsPlayerInVehicle(plid,vehid)){
			    SendClientMessage(playerid, COLOR_GRAY, "Ele tem que estar no seu veículo!");
				return 1;
			}
			if(IsTaxi(GetPlayerVehicleID(playerid))){
  		    	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
  		    	    if(plid != playerid){
		            	SendClientMessage(playerid, COLOR_TAXISTA, "O taxímetro começou a rodar.");
		                SendClientMessage(plid, COLOR_TAXISTA, "O taxímetro começou a rodar. A bandeirada de $20 foi cobrada.");
		                PlayerPay(plid, playerid, 20);
		                Taximetro[plid][0] = 1;
		                Taximetro[plid][1] = playerid;
		                new warn[128];
		                format(warn, sizeof warn, "**** O Taxímetro de %s começou a rodar para o jogador %s ****", PlayerName(playerid), PlayerName(plid));
		                SendClientMessageAdmin(COLOR_YELLOW, warn);
		  		        return 1;
					} else {
						SendClientMessage(playerid, COLOR_GRAY, "Você não pode ligar o Taxímetro para você.");
						return 1;
					}
				} else {
					SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar dirigindo");
					return 1;
				}
			} else {
				SendClientMessage(playerid, COLOR_GRAY, "Você não está em um Carro da Yellow's'Taxi.");
				return 1;
			}
	   	} else {
       		SendClientMessage(playerid, COLOR_GRAY, "Você não é taxista.");
			return 1;
		}
	}

	if(strcmp(cmd, "/entregas", true) == 0 && IsPlayerConnected(playerid)) {
	    if(pStats[playerid][Prof] == TAXISTA){
			if(!IsTaxi(GetPlayerVehicleID(playerid))){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um taxi da sua cooperativa!");
                return 1;
			}
  	    	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
				if(Taximetro[playerid][0] == 0){
				    if(EntregandoEncomendas[playerid] == 0){
				        if(QuantidadeEncomendas[playerid] <= 0){
							SetPlayerRaceCheckpoint(playerid,1,1631.2957,-1138.4460,23.9063,0.0,0.0,0.0,4.0);
				            SendClientMessage(playerid, COLOR_TAXISTA, "Vá pegar as encomendas na Cooperativa, siga o Checkpoint.");
							RaceCheckpointStatus[playerid] = PEGANDO_ENCOMENDAS;
							return 1;
				        } else {
				        	EntregandoEncomendas[playerid] = 1;
							new locais = random(53);
							DisablePlayerCheckpoint(playerid);
							SetPlayerCheckpoint(playerid,EntregaEncomendasTaxi[locais][0],EntregaEncomendasTaxi[locais][1],EntregaEncomendasTaxi[locais][2],4.0);
							SendClientMessage(playerid, COLOR_TAXISTA, "Você ainda tinha pacotes, continue a entrega, vá até o local.");
							CheckpointStatus[playerid] = TAXISTA_AUTOMATICO;
							return 1;
						}
					}
				}
			}
		} else if(pStats[playerid][Prof] == MOTO_TAXISTA){
		    if(!IsMotoTaxi(GetPlayerVehicleID(playerid)))
			{
   				SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma Moto autorizada. Tem que ser uma WayFarrer da Yellow's Taxi");
				return 1;
			}
  	    	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
				if(Taximetro[playerid][0] == 0){
				    if(EntregandoEncomendas[playerid] == 0){
				        if(QuantidadeEncomendas[playerid] <= 0){
							SetPlayerRaceCheckpoint(playerid,1,1631.2957,-1138.4460,23.9063,0.0,0.0,0.0,4.0);
				            SendClientMessage(playerid, COLOR_TAXISTA, "Vá pegar as encomendas na Cooperativa, siga o Checkpoint.");
							RaceCheckpointStatus[playerid] = PEGANDO_ENCOMENDAS;
				        } else {
				        	EntregandoEncomendas[playerid] = 1;
							new locais = random(53);
							DisablePlayerCheckpoint(playerid);
							SetPlayerCheckpoint(playerid,EntregaEncomendasTaxi[locais][0],EntregaEncomendasTaxi[locais][1],EntregaEncomendasTaxi[locais][2],4.0);
							SendClientMessage(playerid, COLOR_TAXISTA, "Você ainda tinha pacotes, continue a entrega, vá até o local.");
							CheckpointStatus[playerid] = TAXISTA_AUTOMATICO;
						}
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/pararentregas", true) == 0) {
   		if(pStats[playerid][Prof] == TAXISTA || pStats[playerid][Prof] == MOTO_TAXISTA){
			if(RaceCheckpointStatus[playerid] == PEGANDO_ENCOMENDAS || CheckpointStatus[playerid] == TAXISTA_AUTOMATICO) {
			    EntregandoEncomendas[playerid] = 0;
				DisablePlayerRaceCheckpoint(playerid);
				DisablePlayerCheckpoint(playerid);
				RaceCheckpointStatus[playerid] = RNONE;
				CheckpointStatus[playerid] = NONE;
				SendClientMessage(playerid, COLOR_TAXISTA, "Entrega de encomendas e pacotes cancelada.");
				return 1;
			} else {
                SendClientMessage(playerid, COLOR_GRAY, "Você não está entregando encomendas...");
				return 1;
			}
		} else {
			SendClientMessage(playerid, COLOR_GRAY, "Você não é taxista ou moto-taxista");
			return 1;
		}
	}
	if(strcmp(cmd, "/passarhistoria", true) == 0) {
 		if(pStats[playerid][HistoriaFeita] == 1) {
	   		SendClientMessage(playerid, COLOR_GRAY, "Você já fez a história!");
	   		return 1;
	   	}
	   	DisablePlayerCheckpoint(playerid);
		CheckpointStatus[playerid] = NONE;
		SendClientMessage(playerid, COLOR_WHITE, "Caso a história continue, aguarde ela acabará.");
	   	SendClientMessage(playerid, COLOR_WHITE, "História passada!");
	   	pStats[playerid][HistoriaSelecionada] = 1;
	   	ParteHistoria[playerid] = 36;
	   	Historia(playerid);
	   	return 1;
	}
	if(strcmp(cmd, "/GPS", true) == 0) {
	    if(pStats[playerid][HistoriaFeita] == 0) {
	   		SendClientMessage(playerid, COLOR_GRAY, "Termine a história para usar o GPS!");
	   		return 1;
	   	}
	    if(GPSLigado[playerid] == 1){
	   		SendClientMessage(playerid, COLOR_GRAY, "Seu GPS já está ativado!");
	   		return 1;
	   	}
	   	if(!IsPlayerInAnyVehicle(playerid)){
	   		SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo, como poderá ligar o GPS?");
	   		return 1;
	   	}
 		new tmp[128];
	   	tmp = strtok(cmdtext,idx);
	   	if(!strlen(tmp)){
	   		SendClientMessage(playerid, COLOR_GRAY, "  ");
	   	    SendClientMessage(playerid, COLOR_GRAY, "SINTAXE CORRETA: /GPS [nome do local]");
			SendClientMessage(playerid, COLOR_GRAY, "Nomes disponíveis: Delegacia, Sorveteria, Balada, Posto, Banco, Tuning, Fazenda");
			SendClientMessage(playerid, COLOR_GRAY, "Ammu-Nation, Hospital, Hotel, Skate, Emprego, Aeroporto, Pay'n'Spray, Seguradora");
			SendClientMessage(playerid, COLOR_GRAY, "Boate, Desmanche, Lixao, Auto-Escola, COEVL, Pizzaria, Loteria, 24/7, Energia");
			SendClientMessage(playerid, COLOR_GRAY, "Cavalos, Estadio, Propriedades, Bar, Restaurante, Concessionaria, BurgerShot, Donuts");
			SendClientMessage(playerid, COLOR_GRAY, "Pesca, Cofre, Municao, Locadora, Praia, Morro, Ryder, Sweet, ECTVL, Chaveiro");
			SendClientMessage(playerid, COLOR_GRAY, "Binco, SubUrban, Victim, DidierSachs, ProLaps, Entretenimentos, Customizacao");
	   		return 1;
	   	}
		new localid = -1;
		for(new l = 0; l < sizeof GPSLocations; l++)
	   	{
	   	    if(compare(tmp, GPSLocations[l][GPS_LocationName]))
	   	    {
				if(localid != -1)
				{
				    new Float:dis[2];
				    new Float:X, Float:Y, Float:Z;
				    GetPlayerPos(playerid, X, Y, Z);
				    dis[0] += floatpower(X - GPSLocations[l][GPS_LocationX], 2);
				    dis[0] += floatpower(Y - GPSLocations[l][GPS_LocationY], 2);
				    dis[0] += floatpower(Z - GPSLocations[l][GPS_LocationZ], 2);
					dis[1] += floatpower(X - GPSLocations[localid][GPS_LocationX], 2);
				    dis[1] += floatpower(Y - GPSLocations[localid][GPS_LocationY], 2);
				    dis[1] += floatpower(Z - GPSLocations[localid][GPS_LocationZ], 2);
					if(floatsqroot(dis[0]) < floatsqroot(dis[1]))
					{
					    localid = l;
					}
				}
				else
				{
				    localid = l;
				}
	   	    }
	   	}
	   	if(localid == -1)
	   	{
	   	    SendClientMessage(playerid, COLOR_GRAY, "SINTAXE CORRETA: /GPS [nome do local]");
			SendClientMessage(playerid, COLOR_GRAY, "Nomes disponíveis: Delegacia, Sorveteria, Balada, Posto, Banco, Tuning, Fazenda");
			SendClientMessage(playerid, COLOR_GRAY, "Ammu-Nation, Hospital, Hotel, Skate, Emprego, Aeroporto, Pay'n'Spray, Seguradora");
			SendClientMessage(playerid, COLOR_GRAY, "Boate, Desmanche, Lixao, Auto-Escola, COEVL, Pizzaria, Loteria, 24/7, Energia");
			SendClientMessage(playerid, COLOR_GRAY, "Cavalos, Estadio, Propriedades, Bar, Restaurante, Concessionaria, BurgerShot, Donuts");
			SendClientMessage(playerid, COLOR_GRAY, "Pesca, Cofre, Municao, Locadora, Praia, Morro, Ryder, Sweet, ECTVL, Chaveiro");
			SendClientMessage(playerid, COLOR_GRAY, "Binco, SubUrban, Victim, DidierSachs, ProLaps, Entretenimentos, Customizacao");
	   		return 1;
	   	}
	   	else{
	   	    new str[128];
           	GPSLigado[playerid] = 1;
		   	DisablePlayerCheckpoint(playerid);
		   	SetPlayerCheckpoint(playerid, GPSLocations[localid][GPS_LocationX], GPSLocations[localid][GPS_LocationY], GPSLocations[localid][GPS_LocationZ], 3.0);
	   		CheckpointStatus[playerid] = DESTINO_GPS;
		   	format(str,sizeof(str),"Destino selecionado: %s", GPSLocations[localid][GPS_LocationName]);
		   	SendClientMessage(playerid, COLOR_BLUE, str);
		   	SendClientMessage(playerid, COLOR_BLUE, "Siga o Checkpoint no radar para chegar até lá.");
		   	return 1;
	   	}
	}
	if(strcmp(cmd, "/desligargps", true) == 0) {
 		if(GPSLigado[playerid] == 0){
	   		SendClientMessage(playerid, COLOR_GRAY, "Seu GPS não está ativado!");
	   		return 1;
	   	}
	   	if(pStats[playerid][HistoriaFeita] == 0) {
       		SendClientMessage(playerid, COLOR_GRAY, "Termine a história para usar o GPS!");
	   		return 1;
	   	}
	   	else{
		   	DisablePlayerCheckpoint(playerid);
		   	CheckpointStatus[playerid] = NONE;
		   	SendClientMessage(playerid, COLOR_WHITE, "GPS DESATIVADO...");
		   	GPSLigado[playerid] = 0;
		   	return 1;
	   	}
	}
	if(strcmp(cmd,"/pizza",true)==0){
	    if(pStats[playerid][Prof] == ENTREGADOR_PIZZA || IsPlayerAdmin(playerid)){
			if(IsMotoPizza(GetPlayerVehicleID(playerid))){
				new tmp[128];
		    	new plid;
	    		new distancia;
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_GRAY, "/pizza [id] [sabor].");
					return 1;
				}
	    	    plid = strval(tmp);
				distancia = GetDistanceBetweenPlayers(playerid, plid);
		 		if(distancia > 15){
			  		SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto!");
					return 1;
				}
				if(PizzasMoto[GetVehicleMotoPizzaID(GetPlayerVehicleID(playerid))] <= 0){
					SendClientMessage(playerid,COLOR_GRAY,"A sua moto não tem pizzas.");
					return 1;
				}
				if(GetPlayerServerMoney(plid) < 50){
			        SendClientMessage(playerid, COLOR_GRAY, "Ele não tem dinheiro para pagar a pizza. CUSTO: $50");
					return 1;
				}
				tmp = strtok(cmdtext,idx);
				if(strcmp(tmp,"frango",true,strlen(tmp)) == 0 && (strlen(tmp) == strlen("Frango")) ||
					strcmp(tmp,"calabresa",true,strlen(tmp)) == 0 && (strlen(tmp) == strlen("Calabresa")) ||
					strcmp(tmp,"mussarela",true,strlen(tmp)) == 0 && (strlen(tmp) == strlen("Mussarela")) ||
					strcmp(tmp,"mista",true,strlen(tmp)) == 0 && (strlen(tmp) == strlen("Mista")) ||
					strcmp(tmp,"frango com catupiry",true,strlen(tmp)) == 0 && (strlen(tmp) == strlen("Frango com Catupiry")) ||
					strcmp(tmp,"Portuguesa",true,strlen(tmp)) == 0 && (strlen(tmp) == strlen("Portuguesa"))) {
					if(IsPlayerConnected(plid)){
						if(plid != playerid){
						    SendClientMessage(playerid,COLOR_ENTREGADOR_PIZZA,"Uma pizza foi oferecida, agora espere o outro jogador aceitar.");
						    new string[128];
						    format(string,sizeof(string),"[PIZZARIA] %s está lhe oferecendo uma pizza de %s, digite /aceitar ou /recusar para recusa-la.",PlayerName(playerid), tmp);
		                    SendClientMessage(plid, COLOR_ENTREGADOR_PIZZA, string);
							OfertaDada[plid] = 1;
							ParaAceitar[plid] = ACEITAR_PIZZA;
						    VendedorProduto[plid] = playerid;
						    Produto[plid] = 1;
							return 1;
			    		} else {
						    SendClientMessage(playerid,COLOR_GRAY,"Você não pode vender Pizzas a você mesmo.");
							return 1;
						}
		    		} else {
					    SendClientMessage(playerid,COLOR_GRAY,"Jogador não conectado/logado");
						return 1;
					}
	    		} else {
				    SendClientMessage(playerid,COLOR_GRAY,"USO: /pizza [id] [mussarela, calabresa, mista, frango, portuguesa, frango com catupiry]");
					return 1;
				}
			} else {
				SendClientMessage(playerid,COLOR_GRAY,"Você não está numa moto Pizzaboy!");
				return 1;
			}
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Você não é entregador de pizza!");
		    return 1;
		}
	}
	if(strcmp(cmd,"/verpizzas",true) == 0) {
		if(pStats[playerid][Prof] == ENTREGADOR_PIZZA || IsPlayerAdmin(playerid)){
			if(IsMotoPizza(GetPlayerVehicleID(playerid))){
      			if(PizzasMoto[GetVehicleMotoPizzaID(GetPlayerVehicleID(playerid))] > 0){
					new string[128];
					format(string,sizeof(string),"A moto está com %d pizzas.",PizzasMoto[GetVehicleMotoPizzaID(GetPlayerVehicleID(playerid))]);
				    SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, string);
				    return 1;
				} else {
	   				SendClientMessage(playerid, COLOR_GRAY, "Essa moto não tem Pizzas!");
	   				return 1;
				}
			} else {
	   			SendClientMessage(playerid, COLOR_GRAY, "Você não está numa moto Pizzaboy!");
	   			return 1;
			}
 		} else {
	   		SendClientMessage(playerid, COLOR_GRAY, "Você não é Entregador de Pizza");
	   		return 1;
		}
	}
	if(strcmp(cmd,"/entregarpizza",true)==0){
	    if(pStats[playerid][Prof] == ENTREGADOR_PIZZA || IsPlayerAdmin(playerid)){
			if(IsMotoPizza(GetPlayerVehicleID(playerid))){
			    if(PizzasMoto[GetVehicleMotoPizzaID(GetPlayerVehicleID(playerid))] > 0){
				    if(PlayerArea[playerid] == AreaPizzaria){
				        if(CheckpointStatus[playerid] == ENTREGANDO_PIZZA){
			          		SendClientMessage(playerid, COLOR_LIGHT_RED, "Você já tem 1 pedido");
							return 1;
						} else {
		                    SendClientMessage(playerid,COLOR_ENTREGADOR_PIZZA,"O pedido foi dado, o local da entrega está no radar!");
							new pizzas = random(sizeof EntregaPizza);
							DisablePlayerCheckpoint(playerid);
							SetPlayerCheckpoint(playerid,EntregaPizza[pizzas][0],EntregaPizza[pizzas][1],EntregaPizza[pizzas][2],3.0);
							CheckpointStatus[playerid] = ENTREGANDO_PIZZA;
							return 1;
						}
					} else {
						SendClientMessage(playerid,COLOR_GRAY,"Você não está na pizzaria.");
						return 1;
					}
				} else {
					SendClientMessage(playerid,COLOR_GRAY,"A sua moto não tem pizzas.");
					return 1;
				}
			} else {
				SendClientMessage(playerid,COLOR_GRAY,"Você não está numa moto Pizzaboy!");
				return 1;
			}
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Não tens permissão para usar esse comando!");
		    return 1;
		}
	}
	if(strcmp(cmd,"/pegarpizza",true) == 0) {
		if(pStats[playerid][Prof] == ENTREGADOR_PIZZA || IsPlayerAdmin(playerid)){
		if(IsMotoPizza(GetPlayerVehicleID(playerid))){
			new tmp[128];
			new quantia;
		    tmp = strtok(cmdtext,idx);
		    quantia = strval(tmp);
		    if(!strlen(tmp)){
		   		SendClientMessage(playerid, COLOR_GRAY, "/pegarpizza [quantidade]");
		   		return 1;
		    }
		    if(PlayerArea[playerid] != AreaPizzaria){
		   		SendClientMessage(playerid, COLOR_GRAY, "Você não está na pizzaria.");
		   		return 1;
		    }
		    if(PizzasMoto[GetVehicleMotoPizzaID(GetPlayerVehicleID(playerid))] + quantia > 5){
			   SendClientMessage(playerid, COLOR_GRAY, "Só dá para levar 5 pizzas por moto.");
			   return 1;
			}
			else{
				new string[128];
			    format(string,sizeof(string),"Você pegou %d pizzas agora a moto tem %d pizzas.",quantia,PizzasMoto[GetVehicleMotoPizzaID(GetPlayerVehicleID(playerid))] + quantia);
			    SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, string);
				PizzasMoto[GetVehicleMotoPizzaID(GetPlayerVehicleID(playerid))] += quantia;
				return 1;
		   		}
			}else{
				SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma moto");
				return 1;
			}
		}else{
			SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão.");
			return 1;
		}
	}
    if(strcmp(cmd, "/revisarlimosine", true) == 0) {
		if(pStats[playerid][Prof] == MOTORISTA_PARTICULAR){
			if(IsStretch(GetPlayerVehicleID(playerid))) {
				if(LimoRevisada[GetVehicleStretchID(GetPlayerVehicleID(playerid))] == 0){
				    if(EntregaLimo[playerid] == 0){
						DisablePlayerCheckpoint(playerid);
			  			SetPlayerCheckpoint(playerid, 1042.4773,-1029.4556,31.8919, 3.0);
			  			CheckpointStatus[playerid] = REVISANDO_LIMOSINE;
			  			EntregaLimo[playerid] = 1;
						SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Vá até a oficina para revisar o motor do carro.");
						return 1;
					} else {
						SendClientMessage(playerid, COLOR_GRAY, "Você já está revisando uma limosine.");
						return 1;
					}
				} else {
					SendClientMessage(playerid, COLOR_GRAY, "Esta limosine já foi revisada.");
					return 1;
				}
		  	} else {
			  	SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em uma Limosine da LuxLimosine.");
			  	return 1;
			}
	  	} else {
		  	SendClientMessage(playerid, COLOR_GRAY, "Você não é Motorista.");
		  	return 1;
		}
	}
   	if(strcmp(cmd, "/lavarlimosine", true) == 0) {
		if(pStats[playerid][Prof] == MOTORISTA_PARTICULAR){
			if(LimoLavada[GetVehicleStretchID(GetPlayerVehicleID(playerid))] == 1){
		 		SendClientMessage(playerid, COLOR_GRAY, "A Limosine está limpa.");
		   		return 1;
		   	}
		   	if(CheckpointStatus[playerid] != LAVANDO_LIMOSINE)
		  	{
      			if(IsStretch(GetPlayerVehicleID(playerid)))
			  	{
					SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Leve a Limosine para o Lava-Jato.");
					SetPlayerCheckpoint(playerid, 1910.7260,-1776.1322,13.3828,3.0);
					CheckpointStatus[playerid] = LAVANDO_LIMOSINE;
	 	       		return 1;
		   		} else {
		 			SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma Limosine da empresa LuxLimosine.");
					return 1;
				}
			} else {
		 		SendClientMessage(playerid, COLOR_GRAY, "Você marcou a lavagem, vá para o Checkpoint");
				return 1;
			}
		}
	}
    if(strcmp(cmd, "/contratarseguranca", true) == 0) {
	    new tmp[128];
		new plid,valor;
		tmp = strtok(cmdtext,idx);
		plid = strval(tmp);
		if(!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /contratarseguranca [id] [valor]");
		    return 1;
		}
		if(pStats[playerid][NSegurancas] >= MAX_SEGURANCAS){
		    SendClientMessage(playerid, COLOR_GRAY, "Limite de seguranças por jogador excedido pelo gamemode!");
		    return 1;
		}
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador desconectado!");
		    return 1;
		}
		tmp = strtok(cmdtext,idx);
		valor = strval(tmp);
		if(!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /contratarseguranca [id] [valor]");
		    return 1;
		}
		if(pStats[plid][Prof] != SEGURANÇA){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não é segurança!");
		    return 1;
		}
		if(plid == playerid){
		    SendClientMessage(playerid, COLOR_GRAY, "Está querendo se auto-contratar?");
		    return 1;
		}
		if(pStats[plid][JaContratado] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador já está contratado!");
		    return 1;
		}
		if(ParaAceitar[plid] == ACEITAR_SCONTRATO){
		    SendClientMessage(playerid, COLOR_GRAY, "Espere o outro jogador responder.");
		    return 1;
		}
		for(new i=0; i<pStats[playerid][NSegurancas]; i++){
	    	if(strcmp(GetSegurancas[playerid][i],PlayerName(plid),true) == 0){
		       	SendClientMessage(playerid, COLOR_GRAY, "Ele já trabalha para você!");
		       	return 0;
			}
			SendClientMessage(playerid, COLOR_GREEN, "Contrato enviado!");
			new string[128];
			format(string,sizeof(string),"%s está lhe oferecendo um contrato por $%d:",PlayerName(playerid),valor);
			SendClientMessage(plid, COLOR_SEGURANÇA, string);
			SendClientMessage(plid, COLOR_SEGURANÇA, "Digite /aceitar para aceitar ou /recusar para recusar.");
			SegurancaContratado[plid] = 1;
			Scontratador[plid] = playerid;
			Svaloroferecido[plid] = valor;
			ParaAceitar[plid] = ACEITAR_SCONTRATO;
			TimerCancel[plid] = SetTimerEx("Cancelar",60000,0,"d",plid);
			return 1;
		}
	}
	if(strcmp(cmd, "/demitirseguranca", true) == 0) {
	    new tmp[128];
	    new plid;
	    tmp = strtok(cmdtext,idx);
	    plid = strval(tmp);
	    if(!strlen(tmp)){
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /demitirseguranca [id]");
	        return 1;
		}
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador desconectado!");
		    return 1;
		}
		for(new i=0; i<pStats[playerid][NSegurancas] + 1; i++){
	   		if(strcmp(GetSegurancas[playerid][i],PlayerName(plid),true) == 0){
	   		    set(GetSegurancas[playerid][i],"NONE");
	        	GetSegurancasValor[playerid][i] = 0;
	        	pStats[plid][JaContratado] = 0;
	        	SendClientMessage(playerid, COLOR_GREEN, "Segurança demitido!");
	        	SendClientMessage(plid, COLOR_GRAY, "Você foi demitido! Parece que não foi um bom segurança...");
	        	return 1;
			}
			else{
			    SendClientMessage(playerid, COLOR_GRAY, "Ele não trabalha para você!");
			    return 1;
			}
		}
	}
	if(strcmp(cmd, "/pescar", true) == 0) {
	    if(PescaInProgress[playerid] == 1) {
	    	SendClientMessage(playerid, COLOR_GRAY, "Calminha aê... Você já está pescando!");
	    	return 1;
	    }
		if(pStats[playerid][Iscas] < 1){
			SendClientMessage(playerid, COLOR_GRAY, "Você não possui iscas! Como poderá pescar?");
			return 1;
		} else {
			if(PlayerArea[playerid] == AreaPesca){
				SendClientMessage(playerid,COLOR_GREEN,"Você lançou a rede de pesca. Espere ela voltar para concluir a pesca.");
				SendClientMessage(playerid,COLOR_GREEN,"Enquanto ela não vem, fique apreciando a paisagem.");
				PescaInProgress[playerid] = 1;
				SetTimerEx("Pescando",50000,0,"d",playerid);
				return 1;
			} else {
				SendClientMessage(playerid,COLOR_GRAY,"Você não está na Área de pesca, a área de pesca fica descendo o riozinho da Cooperativa de Pesca.");
				return 1;
			}
		}
	}
	if(strcmp(cmd,"/minhasiscas",true) == 0){
	    new string[128];
	    if(pStats[playerid][Iscas] <= 0){
		    format(string,sizeof(string),"Você não possui nenhuma isca para pescar!");
		    SendClientMessage(playerid, COLOR_GRAY, string);
		    return 1;
		}
		else if(pStats[playerid][Iscas] == 1){
			format(string,sizeof(string),"Você possui 1 isca para pescar!");
			SendClientMessage(playerid, COLOR_PESCADOR, string);
	      	return 1;
		}
		else if(pStats[playerid][Iscas] > 1){
	      	format(string,sizeof(string),"Você possui %d iscas para pescar!",pStats[playerid][Iscas]);
	      	SendClientMessage(playerid, COLOR_PESCADOR, string);
	      	return 1;
	    }
	}
	if(strcmp(cmd, "/abastecimentos", true) == 0) {
		if(pStats[playerid][Prof] != BARMAN && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não é Barman!");
		new msg[128];
		SendClientMessage(playerid, COLOR_LIGHT_RED, "Abastecimento de bebidas:");
		format(msg,sizeof(msg),"Restaurante: %s",SimNao[RequerAbastecimento[ARestaurante]]);
		SendClientMessage(playerid, COLOR_WHITE, msg);
		format(msg,sizeof(msg),"Balada: %s",SimNao[RequerAbastecimento[ABalada]]);
		SendClientMessage(playerid, COLOR_WHITE, msg);
		format(msg,sizeof(msg),"Bar: %s",SimNao[RequerAbastecimento[ABar]]);
		SendClientMessage(playerid, COLOR_WHITE, msg);
		format(msg,sizeof(msg),"Boate: %s",SimNao[RequerAbastecimento[ABoate]]);
		SendClientMessage(playerid, COLOR_WHITE, msg);
		return 1;
	}
	if(strcmp(cmd, "/entregarbebidas", true) == 0) {
		if(pStats[playerid][Prof] != BARMAN && !IsPlayerAdmin(playerid)){
			SendClientMessage(playerid, COLOR_GRAY, "Você não é Barman!");
			return 1;
		}
		if(NoRestaurante[playerid] == 1){
		    if(RequerAbastecimento[ARestaurante] == 1){
				RequerAbastecimento[ARestaurante] = 0;
				SendClientMessage(playerid, COLOR_BARMAN, "Restaurante: Obrigado senhor, aqui está seu pagamento: $100");
				Pay(playerid, 100);
				return 1;
			}
		    else{
				SendClientMessage(playerid, COLOR_GRAY, "Restaurante: Lamento senhor, não estamos precisando de abastecimento de bebidas agora...");
				return 1;
			}
		}
		else if(PlayerArea[playerid] == AreaBalada){
		    if(RequerAbastecimento[ABalada] == 1){
				RequerAbastecimento[ABalada] = 0;
				SendClientMessage(playerid, COLOR_BARMAN, "Balada: Abastecimento feito, aqui está o dinheiro: $80, quando precisarmos novamente o chamaremos, obrigado!");
				Pay(playerid, 80);
				return 1;
			}
		    else{
				SendClientMessage(playerid, COLOR_GRAY, "Balada: Não necessitamos de bebidas no momento!");
				return 1;
			}
		}
		else if(PlayerArea[playerid] == AreaStrip){
		    if(RequerAbastecimento[ABoate] == 1){
				RequerAbastecimento[ABoate] = 0;
				SendClientMessage(playerid, COLOR_BARMAN, "Boate: Grato senhor, aqui está seu pagamento: $90");
				Pay(playerid, 90);
				return 1;
			}
		    else{
				SendClientMessage(playerid, COLOR_GRAY, "Boate: No momento temos bastante bebidas por aqui senhor, não requesitamos agora");
				return 1;
		    }
		}
		else if(PlayerArea[playerid] == AreaBar){
		    if(RequerAbastecimento[ABar] == 1){
				RequerAbastecimento[ABar] = 0;
				SendClientMessage(playerid, COLOR_BARMAN, "Bar: Bom trabalho, aqui está seu pagamento: $90");
				Pay(playerid, 90);
				return 1;
			}
		    else{
				SendClientMessage(playerid, COLOR_GRAY, "Bar: Não precisamos de bebidas no momento!");
				return 1;
		    }
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "Você não está em um local de entrega de bebidas! Locais: Bar, Restaurante, Boate e Balada");
			return 1;
		}
	}

	if(strcmp(cmd, "/oferecer", true) == 0){
        if(pStats[playerid][Prof] == BARMAN || IsPlayerAdmin(playerid)){
		    new plid = strval(strtok(cmdtext, idx));
		    new string[128];
		    if(!IsPlayerConnected(plid))
		    {
		        SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		        return 1;
		    }
		    if(plid == playerid)
		    {
		        SendClientMessage(playerid, COLOR_GRAY, "Você não pode vender bebidas para si mesmo.");
		        return 1;
		    }
		    if(GetDistanceBetweenPlayers(playerid, plid) > 20.0)
		    {
		        SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto.");
		        return 1;
		    }
			new tmp[128];
			tmp = strtok(cmdtext,idx);
			if(compare(tmp, "whisky"))
			{
				new teor = strval(tmp);
				if(teor < 1 || teor > 3){
			        SendClientMessage(playerid, COLOR_GRAY, "USO: /oferecer whisky [quantidade]");
 	    			SendClientMessage(playerid, COLOR_GRAY, "Doses de Whisky: de 1 à 3.");
			  	    return 1;
			    }
				if(GetPlayerServerMoney(plid) < 60*teor){
					SendClientMessage(playerid, COLOR_GRAY, "	Ele não possui dinheiro para comprar esse número de doses de Whisky.");
					return 1;
				}
		    	format(string,sizeof(string),"[BAR] Você ofereceu %d dose(s) de whisky a %s, espere o outro jogador aceitar.", teor, PlayerName(plid));
		    	SendClientMessage(playerid, COLOR_BARMAN, string);
		    	format(string,sizeof(string),"[BAR] %s está lhe oferecendo %d Dose(s) de Whisky Black Label, pelo preço de $%d. Para aceitar digite /aceitar ou /recusar para recusar.",PlayerName(playerid), teor, 60*teor);
		    	SendClientMessage(plid, COLOR_BARMAN, string);
		    	OfertaDada[plid] = 1;
				ParaAceitar[plid] = ACEITAR_BEBIDA;
		    	VendedorProduto[plid] = playerid;
		    	Produto[plid] = 2;
		    	TeorProduto[plid] = teor;
		    	ValorProduto[plid] = 60*teor;
				return 1;
			}
			else if(compare(tmp, "guarana"))
			{
				new teor = strval(tmp);
				if(teor < 1 || teor > 3){
			        SendClientMessage(playerid, COLOR_GRAY, "USO: /oferecer guarana [quantidade]");
	    			SendClientMessage(playerid, COLOR_GRAY, "Latinhas de Guaraná: de 1 à 3.");
			  	    return 1;
			    }
				if(GetPlayerServerMoney(plid) < 20*teor){
					SendClientMessage(playerid, COLOR_GRAY, "	Ele não possui dinheiro para comprar essa quantidade de Latinhas de Guaraná.");
					return 1;
				}
			   	format(string,sizeof(string),"[BAR] Você ofereceu %d latinha(s) de guaraná a %s, espere o outro jogador aceitar.", teor, PlayerName(plid));
		    	SendClientMessage(playerid, COLOR_BARMAN, string);
		    	format(string,sizeof(string),"[BAR] %s está lhe oferecendo %d Lata(s) de Guaraná Kuat, pelo preço de $%d. Para aceitar digite /aceitar ou /recusar para recusar.",PlayerName(playerid), teor, 60*teor);
		    	SendClientMessage(plid, COLOR_BARMAN, string);
				ParaAceitar[plid] = ACEITAR_BEBIDA;
			    Produto[plid] = 3;
			    ValorProduto[plid] = 20*teor;
			    TeorProduto[plid] = teor;
			    VendedorProduto[plid] = playerid;
			    OfertaDada[plid] = 1;
				return 1;
			}
			else if(compare(tmp, "pinga"))
			{
				new teor = strval(tmp);
				if(teor < 1 || teor > 5){
			        SendClientMessage(playerid, COLOR_GRAY, "USO: /oferecer pinga [quantidade]");
 	    			SendClientMessage(playerid, COLOR_GRAY, "Copos de Pinga: de 1 à 5.");
			  	    return 1;
			    }
				if(GetPlayerServerMoney(plid) < 25*teor){
					SendClientMessage(playerid, COLOR_GRAY, "	Ele não possui dinheiro para essa quantidade de Pinga.");
					return 1;
				}
		    	format(string,sizeof(string),"[BAR] Você ofereceu %d copos de pinga a %s, espere o outro jogador aceitar.", teor, PlayerName(plid));
		    	SendClientMessage(playerid, COLOR_BARMAN, string);
		    	format(string,sizeof(string),"[BAR] %s está lhe oferecendo %d Copo(s) de Pinga Ypioca, pelo preço de $%d. Para aceitar digite /aceitar ou /recusar para recusar.",PlayerName(playerid), teor, 60*teor);
		    	SendClientMessage(plid, COLOR_BARMAN, string);
    			ParaAceitar[plid] = ACEITAR_BEBIDA;
				Produto[plid] = 4;
			    ValorProduto[plid] = 25*teor;
			    TeorProduto[plid] = teor;
			    VendedorProduto[plid] = playerid;
			    OfertaDada[plid] = 1;
				return 1;
			}
			else if(compare(tmp, "cerveja"))
			{
				new teor = strval(tmp);
				if(teor < 1 || teor > 20){
			        SendClientMessage(playerid, COLOR_GRAY, "USO: /oferecer cerveja [quantidade]");
 	    			SendClientMessage(playerid, COLOR_GRAY, "Copos de Chopp: de 1 à 20.");
			  	    return 1;
			    }
				if(GetPlayerServerMoney(plid) < 40*teor){
					SendClientMessage(playerid, COLOR_GRAY, "	Ele não possui dinheiro para comprar essa quantidade de copos de cerveja.");
					return 1;
				}
				format(string,sizeof(string),"[BAR] Você ofereceu %d copos de cerveja a %s, espere o outro jogador aceitar.", teor, PlayerName(plid));
				SendClientMessage(playerid, COLOR_BARMAN, string);
				format(string,sizeof(string),"[BAR] %s está lhe oferecendo %d Copo(s) de Cerveja Antárctica, pelo preço de $%d. Para aceitar digite /aceitar ou /recusar para recusar.",PlayerName(playerid), teor, 40*teor);
				SendClientMessage(plid, COLOR_BARMAN, string);
				ParaAceitar[plid] = ACEITAR_BEBIDA;
   				Produto[plid] = 5;
			    ValorProduto[plid] = 40*teor;
			    TeorProduto[plid] = teor;
			    VendedorProduto[plid] = playerid;
			    OfertaDada[plid] = 1;
				return 1;
			}
			else if(compare(tmp, "suco"))
			{
				new teor = strval(tmp);
				if(teor < 1 || teor > 3){
			        SendClientMessage(playerid, COLOR_GRAY, "USO: /oferecer suco [quantidade]");
 	    			SendClientMessage(playerid, COLOR_GRAY, "Copos de Suco: de 1 à 3.");
			  	    return 1;
			    }
				if(GetPlayerServerMoney(plid) < 25*teor){
					SendClientMessage(playerid, COLOR_GRAY, "	Ele não possui dinheiro para comprar essa quantidade de suco.");
					return 1;
				}
				format(string,sizeof(string),"[BAR] Você ofereceu %d copos de suco a %s, espere o outro jogador aceitar.", teor, PlayerName(plid));
				SendClientMessage(playerid, COLOR_BARMAN, string);
				format(string,sizeof(string),"[BAR] %s está lhe oferecendo %d Copo(s) de Suco, pelo preço de $%d. Para aceitar digite /aceitar ou /recusar para recusar.",PlayerName(playerid), teor, 25*teor);
				SendClientMessage(plid, COLOR_BARMAN, string);
				ParaAceitar[plid] = ACEITAR_BEBIDA;
   				Produto[plid] = 6;
			    ValorProduto[plid] = 25*teor;
			    TeorProduto[plid] = teor;
			    VendedorProduto[plid] = playerid;
			    OfertaDada[plid] = 1;
				return 1;
			}
			else if(compare(tmp, "vodka"))
			{
				new teor = strval(tmp);
				if(teor < 1 || teor > 3){
			        SendClientMessage(playerid, COLOR_GRAY, "USO: /oferecer vodka [quantidade]");
 	    			SendClientMessage(playerid, COLOR_GRAY, "Doses de Vodka: de 1 à 3.");
			  	    return 1;
			    }
				if(GetPlayerServerMoney(plid) < 50*teor){
					SendClientMessage(playerid, COLOR_GRAY, "	Ele não possui dinheiro para comprar vodka.");
					return 1;
				}
				format(string,sizeof(string),"[BAR] Você ofereceu %d doses de vodka a %s, espere o outro jogador aceitar.", teor, PlayerName(plid));
				SendClientMessage(playerid, COLOR_BARMAN, string);
				format(string,sizeof(string),"[BAR] %s está lhe oferecendo %d Dose(s) de Vodka, pelo preço de $%d. Para aceitar digite /aceitar ou /recusar para recusar.",PlayerName(playerid), teor, 50*teor);
				SendClientMessage(plid, COLOR_BARMAN, string);
				ParaAceitar[plid] = ACEITAR_BEBIDA;
   				Produto[plid] = 7;
			    ValorProduto[plid] = 50*teor;
			    TeorProduto[plid] = teor;
			    VendedorProduto[plid] = playerid;
			    OfertaDada[plid] = 1;
				return 1;
			}
			else if(compare(tmp, "agua"))
			{
				new teor = strval(tmp);
				if(teor < 1 || teor > 3){
			        SendClientMessage(playerid, COLOR_GRAY, "USO: /oferecer agua [quantidade]");
 	    			SendClientMessage(playerid, COLOR_GRAY, "Garrafas de Água: de 1 à 3.");
			  	    return 1;
			    }
				if(GetPlayerServerMoney(plid) < 15*teor){
					SendClientMessage(playerid, COLOR_GRAY, "	Ele não possui dinheiro para comprar água.");
					return 1;
				}
				format(string,sizeof(string),"[BAR] Você ofereceu %d garrafas de água a %s, espere o outro jogador aceitar.", teor, PlayerName(plid));
				SendClientMessage(playerid, COLOR_BARMAN, string);
				format(string,sizeof(string),"[BAR] %s está lhe oferecendo %d Garrafinha(s) de Água, pelo preço de $%d. Para aceitar digite /aceitar ou /recusar para recusar.",PlayerName(playerid), teor, 15*teor);
				SendClientMessage(plid, COLOR_BARMAN, string);
				ParaAceitar[plid] = ACEITAR_BEBIDA;
   				Produto[plid] = 8;
			    ValorProduto[plid] = 15*teor;
			    TeorProduto[plid] = teor;
			    VendedorProduto[plid] = playerid;
			    OfertaDada[plid] = 1;
				return 1;
			}
			else if(compare(tmp, "energetico"))
			{
				new teor = strval(tmp);
				if(teor < 1 || teor > 3){
			        SendClientMessage(playerid, COLOR_GRAY, "USO: /oferecer energetico [quantidade]");
 	    			SendClientMessage(playerid, COLOR_GRAY, "Latas de Energético: de 1 à 3.");
			  	    return 1;
			    }
				if(GetPlayerServerMoney(plid) < 35*teor){
					SendClientMessage(playerid, COLOR_GRAY, "	Ele não possui dinheiro para comprar energético.");
					return 1;
				}
				format(string,sizeof(string),"[BAR] Você ofereceu %d energéticos a %s, espere o outro jogador aceitar.", teor, PlayerName(plid));
				SendClientMessage(playerid, COLOR_BARMAN, string);
				format(string,sizeof(string),"[BAR] %s está lhe oferecendo %d Energéticos pelo preço de $%d. Para aceitar digite /aceitar ou /recusar para recusar.",PlayerName(playerid), teor, 35*teor);
				SendClientMessage(plid, COLOR_BARMAN, string);
				ParaAceitar[plid] = ACEITAR_BEBIDA;
   				Produto[plid] = 9;
			    ValorProduto[plid] = 35*teor;
			    TeorProduto[plid] = teor;
			    VendedorProduto[plid] = playerid;
			    OfertaDada[plid] = 1;
				return 1;
			}
			else{
			    SendClientMessage(playerid, COLOR_GRAY, "USO: /oferecer [id] [bebida: whisky, cerveja, vodka, pinga, energetico, guarana, suco, agua]");
			    return 1;
			}
		}
	}
    if(strcmp(cmd, "/vendercelular", true) == 0) {
        if(PlayerArea[playerid] != AreaCreditos){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está na loja de utilidades 1,99");
		    return 1;
		}
		if(pStats[playerid][PhoneNumb] == 0){
			SendClientMessage(playerid, COLOR_WHITE, "Você não tem celular.");
			return 1;
		}
		else{
			AddPlayerMoney(playerid,250,4);
			SendClientMessage(playerid, COLOR_GREEN, "Celular vendido, você recebeu $250.");
			pStats[playerid][PhoneNumb] = 0;
			return 1;
		}
	}
	if(strcmp(cmd, "/celular", true) == 0) {
        if(PlayerArea[playerid] != AreaCreditos){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está na loja de utilidades 1,99");
		    return 1;
		}
		if(GetPlayerServerMoney(playerid) < ValorCelular){
		    new string[128];
		    format(string,sizeof(string),"Você não tem dinheiro para pagar. CUSTO: $%d",ValorCelular);
	        SendClientMessage(playerid, COLOR_GRAY, string);
			return 1;
		}
		if(pStats[playerid][PhoneNumb] != 0){
			SendClientMessage(playerid, COLOR_GRAY, "Você já tem celular.");
			return 1;
		}
	    new string[128];
		SendClientMessage(playerid,COLOR_LIGHT_RED,"Aguarde, processando...");
		new phone, bool:searched = false;
		for(new c = 1000; c < LastPN; c++)
		{
		    new playa[MAX_PLAYER_NAME];
		    set(playa, CelularesNum[c - 1000]);
		    if(IsStringAName(playa))
		    {
		        if(pStats[IDName(playa)][PhoneNumb] != c)
		        {
		            searched = true;
		            phone = c;
		            break;
		        }
		    }
		    else
		    {
				if(strval(GetValue(PlayerFile(playa), "PhoneNumb")) != c)
				{
				    searched = true;
				    phone = c;
				    break;
				}
		    }
		}
		if(!searched)
		{
		    if(LastPN - 1000 >= MAX_CELL){
		    	SendClientMessage(playerid, COLOR_GRAY, "Limite de celulares excedido pelo gamemode.");
				return 1;
			}
			phone = LastPN;
			LastPN++;
		}
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		AddPlayerMoney(playerid,-ValorCelular,-1);
		format(string, sizeof(string), "Celular obtido. Seu número: %d", phone);
		SendClientMessage(playerid, COLOR_PINK, string);
		set(CelularesNum[phone-1000],PlayerName(playerid));
		SendClientMessage(playerid, COLOR_WHITE, "[CENTRAL 24/7] Você pode digitar /ajuda para ver os comandos do seu celular.");
		pStats[playerid][PhoneNumb] = phone;
		if(ValorDia == 0){
        	pStats[playerid][CreditosCell] = 30;
			SendClientMessage(playerid, COLOR_LIGHT_RED, "[CENTRAL 24/7] Seu celular está recarregado em 30 créditos por causa da Promoção de Domingo!");
		}
		return 1;
	}
	if(strcmp(cmd, "/internar", true) == 0) {
	    if(PlayerArea[playerid] != AreaHosp){
			SendClientMessage(playerid, COLOR_GRAY, "Você não está no Hospital.");
			return 1;
		}
		if(GetPlayerServerMoney(playerid) < 1000 && pStats[playerid][XL] > 0){
            SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para se internar. Custo: $1000.");
			return 1;
		}
		KillTimer(TempoVicio[playerid]);
		KillTimer(TimerBebida[playerid]);
		KillTimer(TimerCarrinho[playerid]);
		KillTimer(TimerDoenca[playerid][0]);
		KillTimer(TimerDoenca[playerid][1]);
		GetPlayerPos(playerid, PosHosp[playerid][0], PosHosp[playerid][1], PosHosp[playerid][2]);
		SetPlayerCameraPos(playerid, PosHosp[playerid][0], PosHosp[playerid][1], PosHosp[playerid][2]);
		SetPlayerCameraLookAt(playerid, PosHosp[playerid][0]+4.0, PosHosp[playerid][1]+3.0, PosHosp[playerid][2]);
		SetPlayerPos(playerid, PosHosp[playerid][0]+4.0, PosHosp[playerid][1]+3.0, PosHosp[playerid][2]-15.000);
		SetPlayerHealthEx(playerid, MAX_HEALTH);
		SetPlayerControl(playerid, 0);
		TempoInternando[playerid] = SetTimerEx("Internando",40000,0,"d",playerid);
		SendClientMessage(playerid, COLOR_PARAMEDICO, "HOSPITAL: Internado, aguarde, em instantes você levará alta!");
		return 1;
	}
	if(strcmp(cmd, "/tomarvacina", true) == 0)
	{
		if(PlayerArea[playerid] != AreaHosp){
			SendClientMessage(playerid, COLOR_GRAY, "Você não está no Hospital.");
			return 1;
		}
		if(pStats[playerid][VacinaDuracao] > 0){
			SendClientMessage(playerid, COLOR_GRAY, "Bebeu? Fumou? Querendo tomar vacina 2 vezes? Melhor se internar de vez!");
			return 1;
		}
		if(GetPlayerServerMoney(playerid) < 250){
            SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para tomar vacina. Custo: $500.");
			return 1;
		}
		pStats[playerid][VacinaDuracao] = 7;
		AddPlayerMoney(playerid, -500, -1);
		SendClientMessage(playerid, COLOR_PARAMEDICO, "Você tomou vacina, isso irá impedir de se contaminar com Gripe Suína por 7 dias!");
		return 1;
	}
	if(strcmp(cmd, "/vacinar", true) == 0)
	{
	    if(pStats[playerid][Prof] != PARAMEDICO && !IsPlayerAdmin(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não é Paramédico.");
	        return 1;
	    }
	    new tmp[128];
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /vacinar [id]");
	        return 1;
	    }
	    new plid = strval(tmp);
	    if(!IsPlayerConnected(plid))
		{
	    	SendClientMessage(playerid, COLOR_GRAY, "O jogador não está conectado.");
			return 1;
		}
		if(plid == playerid)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não pode se auto-vacinar.");
	        return 1;
		}
		if(GetDistanceBetweenPlayers(playerid, plid) > 7)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto desse jogador para vaciná-lo.");
		    return 1;
		}
		if(pStats[plid][VacinaDuracao] > 0)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador já está vacinado.");
	        return 1;
		}
		pStats[plid][VacinaDuracao] = 7;
		SendClientMessage(playerid, COLOR_PARAMEDICO, "Jogador vacinado por 7 dias no jogo, peça para ele usar /pagar");
		new str[128];
		format(str, sizeof str, "O Paramédico %s lhe vacinou, você está imune contra doenças por 7 dias no jogo.", PlayerName(playerid));
		SendClientMessage(plid, COLOR_WHITE, str);
		return 1;
	}
    if(strcmp(cmd, "/tratamentodrogas", true) == 0)
	{
        if(pStats[playerid][Prof] == PARAMEDICO || IsPlayerAdmin(playerid))
		{
			new tmp[128];
			new plid;
			tmp = strtok(cmdtext,idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "USO: /tratamentodrogas [id]");
			    return 1;
			}
			plid = strval(tmp);
			if(!IsPlayerConnected(plid)){
			    SendClientMessage(playerid, COLOR_GRAY, "O jogador não está conectado");
				return 1;
			}
			if(Tratando[playerid] == 1){
			    SendClientMessage(playerid, COLOR_GRAY, "Você já tem um paciente, cure este primeiro!");
			    return 1;
			}
			if(GetDistanceBetweenPlayers(playerid,plid) > 7){
			    SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto!");
			    return 1;
			}
			if(pStats[plid][DosesMaconha] <= 0 && pStats[plid][DosesCocaina] <= 0 && pStats[plid][DosesHeroina] <= 0){
			    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não possui drogas no sangue.");
			    return 1;
			}
			if(plid == playerid){
				SendClientMessage(playerid, COLOR_GRAY, "Você não pode fazer tratamento em si mesmo.");
			    return 1;
			}
			if(GetPlayerServerMoney(plid) < 600){
			    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não possui dinheiro para pagar o tratamento, Custo: $600");
				return 1;
			}
   			new string[128];
			new total = pStats[plid][DosesHeroina] + pStats[plid][DosesMaconha] + pStats[plid][DosesCocaina];
			new seconds = total / 2;
			format(string,sizeof(string),"Aguarde... O tratamento durará %d segundo(s)",seconds);
			SendClientMessage(playerid, COLOR_PARAMEDICO, string);
			SendClientMessage(plid, COLOR_PARAMEDICO, string);
			Tratando[playerid] = 1;
			TimerCura[plid] = SetTimerEx("TratamentoDrogas", 1000 * seconds, 0, "dd", playerid, plid);
			return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Paramédico!");
		    return 1;
  		}
	}
	if(strcmp(cmd, "/venderremedio", true) == 0)
	{
	    if(pStats[playerid][Prof] != PARAMEDICO && !IsPlayerAdmin(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não é Paramédico.");
	        return 1;
	    }
	    new plid = strval(strtok(cmdtext, idx));
	    new amount = strval(strtok(cmdtext, idx));
	    if(amount < 1 || amount > 3)
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /venderremedio [id] [quantidade]");
	        SendClientMessage(playerid, COLOR_GRAY, "Quantidade de 1 à 3.");
	        return 1;
		}
		if(plid == playerid)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não pode vender remédios para si mesmo.");
		    return 1;
		}
		if(GetDistanceBetweenPlayers(playerid, plid) > 7)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto desse jogador para vender o remédio.");
		    return 1;
		}
	    if(pStats[plid][Remedios] >= 3)
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Esse jogador já tem 3 remédios, é o máximo que pode carregar.");
	        return 1;
	    }
	    if(amount + pStats[plid][Remedios] > 3)
		{
			amount = 3 - pStats[plid][Remedios];
		}
		pStats[plid][Remedios] += amount;
		new str[128];
		format(str, sizeof str, "Você vendeu %d remédio(s) para o jogador, peça para ele usar /pagar", amount);
		SendClientMessage(playerid, COLOR_PARAMEDICO, str);
		format(str, sizeof str, "O Paramédico %s lhe vendeu %d remédio(s), use /tomarremedio caso necessário", amount);
		SendClientMessage(plid, COLOR_PARAMEDICO, str);
		return 1;
	}
	if(strcmp(cmd, "/tomarremedio", true) == 0)
	{
	    if(pStats[playerid][Doenca] == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não está doente.");
	        return 1;
	    }
	    if(pStats[playerid][Remedios] <= 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não possui nenhum remédio.");
	        return 1;
	    }
	    new rand = random(6);
	    if(rand != 5)
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Ainda doente, o Remédio não funcionou...");
	        return 1;
	    }
	    KillTimer(TimerDoenca[playerid][0]);
		KillTimer(TimerDoenca[playerid][1]);
	    pStats[playerid][Doenca] = 0;
	    SendClientMessage(playerid, COLOR_WHITE, "Curado! O Remédio funcionou...");
	    return 1;
	}
	if(strcmp(cmd, "/tratardoenca", true) == 0)
	{
	    if(pStats[playerid][Prof] != PARAMEDICO && !IsPlayerAdmin(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não é Paramédico.");
	        return 1;
	    }
	    new tmp[128];
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /tratardoenca [id]");
	        return 1;
	    }
	    new plid = strval(tmp);
		if(!IsPlayerConnected(plid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		    return 1;
		}
		if(!IsPlayerInAnyVehicle(playerid) || !IsPlayerInVehicle(plid, GetPlayerVehicleID(playerid)) || GetPlayerState(plid) != PLAYER_STATE_PASSENGER || !IsAmbulance(GetPlayerVehicleID(playerid)))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "O jogador deve estar na sua Ambulância como passageiro.");
		    return 1;
		}
		if(pStats[plid][Doenca] == 0)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está doente.");
		    return 1;
		}
		if(Tratando[playerid] == 1)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Aguarde, você já está realizando um tratamento...");
		    return 1;
		}
		Tratando[playerid] = 1;
		KillTimer(TimerDoenca[plid][0]);
		KillTimer(TimerDoenca[plid][1]);
		SendClientMessage(playerid, COLOR_PARAMEDICO, "Tratando jogador...");
		SendClientMessage(plid, COLOR_PARAMEDICO, "Aguarde, o Paramédico está tratando sua doença...");
		SetTimerEx("TratarDoenca", 15000, false, "dd", playerid, plid);
		return 1;
	}
	if(strcmp(cmd, "/tratartodos", true) == 0) {
        if(IsPlayerAdmin(playerid)){
			for(new i = 0; i < MAX_SLOTS; i++){
			    if(pStats[i][Doenca] == 1){
					pStats[i][Doenca] = 0;
					SetPlayerWeather(i, weatherprevisao);
			    	SendClientMessage(playerid, COLOR_PARAMEDICO, "Todos curados.");
					return 1;
				}
			}
		}
	}
	if(strcmp(cmd, "/salvararquivos", true) == 0 && IsPlayerAdmin(playerid)) {
	    SavePCVPJGO();
	    SendClientMessage(playerid, COLOR_WHITE, "Os arquivos relacionados ao Virtual Life RPG foram salvos com sucesso!");
	    return 1;
	}
	if(strcmp(cmd, "/curar", true) == 0)
	{
	    if(pStats[playerid][Prof] != PARAMEDICO && !IsPlayerAdmin(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não é Paramédico.");
	        return 1;
	    }
		new tmp[128];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /curar [id]");
		    return 1;
		}
		new plid = strval(tmp);
		if(!IsPlayerConnected(plid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		    return 1;
		}
		if(pStats[plid][Morrendo] == 1)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador está morrendo, curativo não adianta, use /salvar");
		    return 1;
		}
		if(GetDistanceBetweenPlayers(playerid, plid) > 10){
  			SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto...");
  			return 1;
  		}
		if(kitmedico[playerid] <= 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhum Kit Médico, vá ao Hospital pegar.");
			return 1;
		}
		if(playerid == plid){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não pode se auto-curar ¬¬'");
			return 1;
		}
		new Float:playerhealth;
		GetPlayerHealth(plid, playerhealth);
		if(playerhealth > 20.0)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não precisa de curativo.");
		    return 1;
		}
		if(pStats[plid][Seguro] == 0)
		{
			SendClientMessage(playerid, COLOR_PARAMEDICO, "Curativos aplicados, peça para o jogador usar /pagar");
			new string[128];
			format(string, sizeof string, "O Paramédico %s lhe aplicou curativos, use /pagar", PlayerName(playerid));
			SendClientMessage(plid, COLOR_PARAMEDICO, string);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_PARAMEDICO, "Curativos aplicados, o seguro do jogador cobriu as despesas, você recebeu $100,00 dólares.");
			new string[128];
			format(string, sizeof string, "O Paramédico %s lhe aplicou curativos, seu seguro cobriu as despesas.", PlayerName(playerid));
			SendClientMessage(plid, COLOR_PARAMEDICO, string);
			Pay(playerid, 100);
		}
		SetPlayerHealthEx(plid, MAX_HEALTH);
		kitmedico[playerid] = kitmedico[playerid] -1;
		return 1;
	}
	if(strcmp(cmd, "/salvar", true) == 0)
	{
	    if(pStats[playerid][Prof] != PARAMEDICO && !IsPlayerAdmin(playerid)){
			SendClientMessage(playerid, COLOR_GRAY, "Você não é Paramédico!");
			return 1;
		}
		new tmp[128];
		new plid, string[128];
		tmp = strtok(cmdtext,idx);
		plid = strval(tmp);
        if(!strlen(tmp)){
            SendClientMessage(playerid, COLOR_GRAY, "/salvar [id]");
			return 1;
		}
		if(!IsPlayerConnected(plid)){
			SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado!");
			return 1;
		}
		if(pStats[plid][Morrendo] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está inconsciente!");
			return 1;
		}
  		if(GetDistanceBetweenPlayers(playerid,plid) > 10){
  			SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto!");
  			return 1;
  		}
		if(kitmedico[playerid] <= 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhum kitmedico, vá ao Hospital pegar.");
			return 1;
		}
		if(playerid == plid){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não pode se auto-salvar ¬¬'");
			return 1;
		}
		pStats[plid][Morrendo] = 0;
		AcabouMorrer[plid] = 0;
		KillTimer(TimerDeath[plid]);
		KillTimer(TimerDeathEffect[plid]);
		SetPlayerControl(plid,1);
		TextDrawHideForPlayer(plid, DeathAction);
		TextDrawHideForPlayer(plid, DeathText);
		SetPlayerHealthEx(plid, 10);
		SendClientMessage(playerid, COLOR_PARAMEDICO, "Jogador salvo, o governo lhe pagou $400,00 dólares");
		format(string,sizeof(string),"O Paramédico %s salvou sua vida.",PlayerName(playerid));
		SendClientMessage(plid, COLOR_PARAMEDICO, string);
		Pay(playerid, 400);
		ClearAnimations(plid);
    	kitmedico[playerid] = kitmedico[playerid] -1;
		for(new i=0; i<MAX_SLOTS; i++){
		    if(pStats[i][Prof] == JORNALISTA){
				format(string,sizeof(string),"[JORNAL]O Paramédico %s acabou de salvar %s, um morador viu e nos contactou, coloque no seu Jornal.",PlayerName(playerid),PlayerName(plid));
				SendClientMessage(i, COLOR_JORNALISTA, string);
			} else {
				new rand = random(4);
				if(rand == 0 || rand == 1 || rand == 2){
				    new rand2 = random(4);
				    if(rand2 == 0){
					    format(string,sizeof(string),"[NOTÍCIAS] O paramédico %s salvou a vida de %s, o governo lhe recompensou pelo trabalho!",PlayerName(playerid),PlayerName(plid));
						SendClientMessage(i,COLOR_WHITE, string);
					}
					if(rand2 == 1){
					    format(string,sizeof(string),"Excelente. Foi o que disse um morador quando viu o Paramédico %s salvar %s",PlayerName(playerid),PlayerName(plid));
						SendClientMessage(i,COLOR_WHITE, string);
					}
					if(rand2 == 2){
					    format(string,sizeof(string),"Tão rápido? %s está \"morto\" de felicidade por %s ter salvo sua vida.",PlayerName(plid),PlayerName(playerid));
						SendClientMessage(i,COLOR_WHITE, string);
					}
					if(rand2 == 3){
					    format(string,sizeof(string),"[HOSPITAL] %s vem se mostrando eficaz nos seus atendimentos, acabou de salvar %s",PlayerName(playerid),PlayerName(plid));
						SendClientMessage(i,COLOR_WHITE, string);
					}
				}
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/pegarkit", true) == 0) {
		if(pStats[playerid][Prof] == PARAMEDICO || IsPlayerAdmin(playerid)){
			if(PlayerArea[playerid] == AreaHosp){
	   			if(kitmedico[playerid] == 0){
					kitmedico[playerid] = kitmedico[playerid] + 5;
					SendClientMessage(playerid, COLOR_PARAMEDICO, "Você pegou um kit médico. Válido para 5 curativos/salvamentos.");
				    return 1;
				} else {
					SendClientMessage(playerid, COLOR_PARAMEDICO, "Você já possui um kit médico.");
				    return 1;
				}
			} else {
				SendClientMessage(playerid, COLOR_GRAY, "Você não está no hospital.");
			 	return 1;
			}
	 	} else {
			SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão.");
			return 1;
		}
   	}

//Contrabando
 	if(strcmp(cmd, "/contrabando", true) == 0) {
		if(pStats[playerid][Prof] == CONTRABANDISTA || IsPlayerAdmin(playerid)){
			if(Contrabando[playerid] == 1 || ContrabandoCar[playerid] == 1) {
				SendClientMessage(playerid, COLOR_GRAD, "Você já está na missão.");
				return 1;
			}
			new contr = random(4);
			if(contr == 0){
				RingTone[playerid] = 20;
				SetPlayerCheckpoint(playerid,-2328.99,1527.79,0.25,4.0);
				SendClientMessage(playerid, COLOR_PALHA, "Contrabando de Pacote.");
				Contrabando[playerid] = 1;
				Receita[playerid] = 1;
				SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Prossiga para o navio.");
				CheckpointStatus[playerid] = CONTRABANDO_INICIO;
	  			SetTimer("ContrabandoNavio",360000,false);
		        return 1;
		    }
		    if(contr == 1){
				RingTone[playerid] = 20;
			    SendClientMessage(playerid, COLOR_PALHA, "Contrabando de Carros.");
				SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Vá pegar o Carro no local indicado.");
				SetPlayerCheckpoint(playerid,2236.5403,-2213.8721,13.5469,3.0);
				ContrabandoCar[playerid] = 1;
				CheckpointStatus[playerid] = CONTRABANDO_CARRO1;
				SetTimer("ContrabandoNavio",360000,false);
				return 1;
			}
			if(contr == 2){
				RingTone[playerid] = 20;
				SendClientMessage(playerid, COLOR_PALHA, "Contrabando de Armas.");
				SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Vá falar com o negociante para ele lhe indicar onde estão as armas escondidas.");
				Contrabando[playerid] = 1;
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid,1854.1887,-1914.7314,15.2568,3.0);
				CheckpointStatus[playerid] = CONTRABANDO_ARMA1;
				SetTimer("ContrabandoNavio",360000,false);
				return 1;
			}
			if(contr == 3){
				RingTone[playerid] = 20;
				SendClientMessage(playerid, COLOR_PALHA, "Contrabando de Drogas.");
				SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Vá pegar as drogas com o traficante.");
				Contrabando[playerid] = 1;
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid,2145.0332,-978.2762,60.9297,3.0);
				CheckpointStatus[playerid] = CONTRABANDO_DROGA;
				SetTimer("ContrabandoNavio",360000,false);
				return 1;
			}
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Contrabandista!");
		    return 1;
		}
	}
   	if(strcmp(cmd, "/cancelarcontrabando", true) == 0) {
   		if(pStats[playerid][Prof] == CONTRABANDISTA || IsPlayerAdmin(playerid)){
			if(Contrabando[playerid] == 1 || ContrabandoCar[playerid] == 1) {
				if(AcabeiDeRecusar[playerid] == 0 || AcabeiDeRecusar[playerid] == 1){
					Contrabando[playerid] = 0;
					ContrabandoCar[playerid] = 0;
					Receita[playerid] = 0;
					AcabeiDeRecusar[playerid] = AcabeiDeRecusar[playerid] +1;
    				DisablePlayerCheckpoint(playerid);
					CheckpointStatus[playerid] = NONE;
					SendClientMessage(playerid, COLOR_GREEN, "Contrabando cancelado.");
					SendClientMessage(playerid, COLOR_GREEN, "Atenção, você cancelou nosso pedido, não queira encrenca!");
     				SetTimerEx("TerminarCancelamento",180000,0,"d",playerid);
					return 1;
				} else {
					SendClientMessage(playerid, COLOR_GRAY, "Você recusou 2 de nossos contrabandos, faça esse ou morra!");
					return 1;
				}
			} else {
				SendClientMessage(playerid, COLOR_GRAY, "Você não está contrabandeado.");
				return 1;
			}
		} else {
			SendClientMessage(playerid, COLOR_GRAY, "Você não é contrabandista.");
			return 1;
		}
	}
   	if(strcmp(cmd, "/pararentrega", true) == 0) {
   		if(pStats[playerid][Prof] == ENTREGADOR_PIZZA|| IsPlayerAdmin(playerid)){
			if(CheckpointStatus[playerid] == ENTREGANDO_PIZZA) {
			    CheckpointStatus[playerid] = NONE;
				DisablePlayerCheckpoint(playerid);
				SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, "Entrega de pizzas cancelada.");
				return 1;
			} else {
				SendClientMessage(playerid, COLOR_GRAY, "Você não está entregando pizzas!");
				return 1;
			}
		} else {
			SendClientMessage(playerid, COLOR_GRAY, "Você não é Entregador de Pizza!");
			return 1;
		}
	}
	if(strcmp(cmdtext, "/limparchat", true)==0) {
		if(IsPlayerAdmin(playerid)){
			for(new l=0;l<40;l++){
			    SendClientMessageToAll(COLOR_WHITE, " ");
			}
			return 1;
		}
		else{
		    return SendClientMessage(playerid, COLOR_WHITE, "SERVER: Unknown command.");
		}
	}
	
	if(strcmp(cmd, "/comprar", true) == 0){
		if(!Logado[playerid]) return SendClientMessage(playerid, COLOR_GRAY, "Você não está logado!");
        if(PlayerArea[playerid] != AreaCustomizacao){
            SendClientMessage(playerid, COLOR_GRAY, "Você não está na loja de customização!");
            return 1;
		}
		if(!IsPlayerInAnyVehicle(playerid)){
		    SendClientMessage(playerid,COLOR_GRAY,"Você não está em um veículo!");
			return 1;
		}
		new tmp[128];
		tmp = strtok(cmdtext,idx);
		if(compare(tmp, "placa")){
		 	strmid(tmp,cmdtext,12,20);
			if(!strlen(tmp)){
			   	SendClientMessage(playerid, COLOR_GRAY, "Uso: /comprar [placa] [nome]");
			   	SendClientMessage(playerid, COLOR_GRAY, "O máximo de caracteres do nome é 8");
			   	return 1;
		   	}
		   	if(AcharVeiculoPorPlaca(tmp) != -1){
				SendClientMessage(playerid, COLOR_GRAY, "Essa placa já existe em outro veículo...");
				return 1;
			}
		   	if(PlayerArea[playerid] != AreaCustomizacao){
	           	SendClientMessage(playerid, COLOR_GRAY, "Você não está na loja de customização!");
	           	return 1;
			}
	       	if(!IsPlayerInAnyVehicle(playerid)){
	           	SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
	           	return 1;
			}
			for(new s = 0; s < strlen(tmp); s++){
				if(strfind(tmp,"_",false,s) != -1 || strfind(tmp,"*",false,s) != -1 || strfind(tmp,"'",false,s) != -1 || strfind(tmp,"/",false,s) != -1 || strfind(tmp,"?",false,s) != -1 || strfind(tmp,">",false,s) != -1
				|| strfind(tmp,"<",false,s) != -1 || strfind(tmp,":",false,s) != -1 || strfind(tmp,"?",false,s) != -1 || strfind(tmp,"\"",false,s) != -1 || strfind(tmp,"|",false,s) != -1 || strfind(tmp,"!",false,s) != -1){
					SendClientMessage(playerid, COLOR_GRAY, "Sem caracteres especiais na nova placa (\" * _ < > \\ / ? | : ' !)");
					return 1;
				}
			}
			if(GetPlayerServerMoney(playerid) < 200){
		   	 	SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro! Custo: $200");
		    	return 1;
		    }
			SendClientMessage(playerid, COLOR_WHITE, "[LOJA] Placa do veículo alterada.");
		   	SalvarPlaca(GetPlayerVehicleID(playerid),tmp);
		} else if(compare(tmp, "conserto")){
			new Float:VehLife;
			GetVehicleHealth(GetPlayerVehicleID(playerid),VehLife);
			if(VehLife == 1000){
			    SendClientMessage(playerid, COLOR_GRAY, "Seu carro não está danificado! Não gaste dinheiro à toa.");
			    return 1;
			}
			if(GetPlayerServerMoney(playerid) < 100){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro! Custo: $100");
			    return 1;
			} else {
			    new Float:X,Float:Y,Float:Z,Float:ang;
			    GetVehiclePos(GetPlayerVehicleID(playerid),X,Y,Z);
			    GetVehicleZAngle(GetPlayerVehicleID(playerid),ang);
			    SendClientMessage(playerid, COLOR_WHITE, "Veículo enviado para conserto...");
			    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				GameTextForPlayer(playerid,"~w~consertando...",10000,0);
				SetTimerEx("ArrumandoVeiculo",10000,0,"ddffff",playerid,GetPlayerVehicleID(playerid),X,Y,Z,ang);
				return 1;
			}
		} else if(compare(tmp, "pintura")){
			new cor1,cor2;
		    tmp = strtok(cmdtext,idx);
		    cor1 = VehicleColor(strval(tmp));
		    if(!strlen(tmp)){
		        SendClientMessage(playerid, COLOR_GRAY, "USO: /comprar [pintura] [cor1] [cor2]");
		        return 1;
			}
			tmp = strtok(cmdtext,idx);
			cor2 = VehicleColor(strval(tmp));
			if(!strlen(tmp)){
		        SendClientMessage(playerid, COLOR_GRAY, "USO: /comprar [pintura] [cor1] [cor2]");
		        return 1;
			}
			if(cor1 == -1){
				new str[128];
				format(str, sizeof str, "Cor 1 inválida! Cores 1 e 2 de 0 à %d", MAX_COLORS);
			    SendClientMessage(playerid, COLOR_GRAY, str);
			    return 1;
			}
			if(cor2 == -1){
			    new str[128];
				format(str, sizeof str, "Cor 1 inválida! Cores 1 e 2 de 0 à %d", MAX_COLORS);
			    SendClientMessage(playerid, COLOR_GRAY, str);
			    return 1;
			}
	        if(PlayerArea[playerid] != AreaCustomizacao){
	            SendClientMessage(playerid, COLOR_GRAY, "Você não está na loja de customização!");
	            return 1;
			}
	        if(!IsPlayerInAnyVehicle(playerid)){
	            SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
	            return 1;
			}
			if(GetPlayerServerMoney(playerid) < 50){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro! Custo: $50");
			    return 1;
			} else {
			    ChangeVehicleColor(GetPlayerVehicleID(playerid),cor1,cor2);
			    SaveColors(GetPlayerVehicleID(playerid),cor1,cor2);
			    SendClientMessage(playerid, COLOR_WHITE, "Veículo pintado! A pintura custou $50");
			    AddPlayerMoney(playerid,-50,-1);
			    AcrescentarLucro(9,50);
			    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			    return 1;
			}
		} else if(compare(tmp, "alarme")){
	       	if(GetPlayerServerMoney(playerid) < 600){
		        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para pagar. CUSTO: $600");
				return 1;
			}
	        if(!strcmp(vStats[GetPlayerVehicleID(playerid)][VDono],PlayerName(playerid),true)){
	            if(vStats[GetPlayerVehicleID(playerid)][VAlarme] == 0){
					vStats[GetPlayerVehicleID(playerid)][VAlarme] = 1;
					AddPlayerMoney(playerid,-600,-1);
					AcrescentarLucro(9,600);
					SendClientMessage(playerid, COLOR_WHITE, "[LOJA] Alarme de carro adquirido, para instalar digite /acionar [travas/alarme/nada].");
					return 1;
				} else {
				    SendClientMessage(playerid, COLOR_GRAY, "Este carro já possui Alarme, caso queira usar digite: /acionar [travas/alarme/nada].");
				    return 1;
				}
			} else {
			    SendClientMessage(playerid, COLOR_GRAY, "Você não pode comprar um Alarme para um carro que não é seu.");
				return 1;
			}
	    } else if(compare(tmp, "travas")){
	       	if(GetPlayerServerMoney(playerid) < 600){
		        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para pagar. CUSTO: $600");
				return 1;
			}
	        if(!strcmp(vStats[GetPlayerVehicleID(playerid)][VDono],PlayerName(playerid),true)){
	            if(vStats[GetPlayerVehicleID(playerid)][VTravas] == 0){
					vStats[GetPlayerVehicleID(playerid)][VTravas] = 1;
					AddPlayerMoney(playerid,-600,-1);
					AcrescentarLucro(9,600);
					SendClientMessage(playerid, COLOR_WHITE, "[LOJA] Travas de portas adquiridas, para instalar digite /acionar [travas/alarme/nada].");
					return 1;
				} else {
				    SendClientMessage(playerid, COLOR_GRAY, "Este carro já possui Travas de Segurança, caso queira usar digite: /acionar [travas/alarme/nada].");
				    return 1;
				}
			} else {
			    SendClientMessage(playerid, COLOR_GRAY, "Você não pode comprar Travas de portas para um carro que não é seu.");
				return 1;
			}
	    } else if(compare(tmp, "radio")){
	       	if(GetPlayerServerMoney(playerid) < 400){
		        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para pagar. CUSTO: $400");
				return 1;
			}
	        if(vStats[GetPlayerVehicleID(playerid)][VRadio] == 1){
			    SendClientMessage(playerid, COLOR_GRAY, "Esse carro já possui Rádio.");
				return 1;
			}
			vStats[GetPlayerVehicleID(playerid)][VRadio] = 1;
			AddPlayerMoney(playerid,-400,-1);
			AcrescentarLucro(9,400);
			SendClientMessage(playerid, COLOR_WHITE, "[LOJA] Travas de portas adquiridas, para instalar digite /acionar [travas/alarme/nada].");
			return 1;
		} else if(compare(tmp, "fume")){
			if(GetPlayerServerMoney(playerid) < 800){
		   	 	SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro! Custo: $200");
		    	return 1;
			}
			if(vStats[GetPlayerVehicleID(playerid)][Fume] == 1){
		   	 	SendClientMessage(playerid, COLOR_GRAY, "Este veículo já possui fumê!!");
		    	return 1;
		    }
	 		if(!strcmp(vStats[GetPlayerVehicleID(playerid)][VDono], PlayerName(playerid), false)){
				SendClientMessage(playerid, COLOR_WHITE, "[LOJA] Filtros de fumê colocados, ninguém verá quem está dentro do carro..");
				vStats[GetPlayerVehicleID(playerid)][Fume] = 1;
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				AddPlayerMoney(playerid, -800, -1);
		   		return 1;
	 		} else {
		    	SendClientMessage(playerid, COLOR_GRAY, "Você não pode comprar Fumê de portas para um carro que não é seu.");
	 		    return 1;
			}
		} else if(compare(tmp, "airbag")){
			if(GetPlayerServerMoney(playerid) < 250){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro! Custo: $250,00 dólares.");
			    return 1;
			}
			new vehid=GetPlayerVehicleID(playerid);
			if(vStats[vehid][Airbag] > 0){
			    SendClientMessage(playerid, COLOR_GRAY, "Esse veículo já está com Airbag, consuma-o para comprar mais um!");
	            return 1;
			}
			AddPlayerMoney(playerid,-250,-1);
			vStats[vehid][Airbag] = 4;
			SendClientMessage(playerid, COLOR_WHITE, "Airbag comprado! Isso mesmo se cuide, afinal nunca se sabe o que pode acontecer...");
			return 1;
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /comprar [placa [nome]/conserto/pintura [cor1] [cor2]/alarme/travas/radio/fume/airbag]");
		    return 1;
		}
	}


	if(strcmp(cmd, "/acionar", true) == 0)
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo.");
	        return 1;
	    }
	    new vehid = GetPlayerVehicleID(playerid);
		if(vehid < AmountServerVehicles)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não pode ativar as travas em um veículo do servidor.");
		    return 1;
		}
		if(!compare(PlayerName(playerid), vStats[vehid][VDono]))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não é o proprietário do veículo.");
	        return 1;
	    }
		new opcao[128];
		opcao = strtok(cmdtext, idx);
		if(compare(opcao, "travas"))
		{
			if(vStats[vehid][VTravas] == 0){
			    SendClientMessage(playerid, COLOR_GRAY, "Para acionar esse sistema anti-furto você precisa comprar Travas.");
			    return 1;
			}
			vStats[vehid][VTravas] = 2;
			vStats[vehid][Trancado] = 1;
			SendClientMessage(playerid, COLOR_GREEN, "Travas do veículo acionadas.");
			SendClientMessage(playerid, COLOR_GREEN, "Pressione a tecla 2 para trancar/destrancar.");
			for(new i = 0; i < MAX_SLOTS; i++)
			{
			    if(IsPlayerConnected(i) && Logado[i] && i != playerid)
			    {
			        SetVehicleParamsForPlayer(vehid, i, 0, 1);
			    }
			}
			return 1;
		}
		else if(compare(opcao, "alarme"))
		{
			if(vStats[vehid][VAlarme] == 0){
			    SendClientMessage(playerid, COLOR_GRAY, "Para acionar esse sistema anti-furto compre um Alarme.");
			    return 1;
			}
		    vStats[vehid][VAlarme] = 2;
		    vStats[vehid][Trancado] = 0;
		    SendClientMessage(playerid, COLOR_GREEN, "Alarme acionado.");
		    for(new i = 0; i < MAX_SLOTS; i++)
			{
			    if(IsPlayerConnected(i) && Logado[i])
			    {
			        SetVehicleParamsForPlayer(vehid, i, 0, 0);
			    }
			}
		    return 1;
		}
		else if(compare(opcao, "nada"))
		{
		    vStats[vehid][VAlarme] = 1;
		    vStats[vehid][VTravas] = 1;
		    vStats[vehid][Trancado] = 0;
		    SendClientMessage(playerid, COLOR_GREEN, "Sistema Anti-Furto desativado...");
		    for(new i = 0; i < MAX_SLOTS; i++)
			{
			    if(IsPlayerConnected(i) && Logado[i])
			    {
			        SetVehicleParamsForPlayer(vehid, i, 0, 0);
			    }
			}
		    return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /acionar [travas/alarme/nada]");
		    return 1;
		}
	}
	if(strcmp(cmd, "/usarskin", true) == 0) {
	    if(Logado[playerid] == 1)
		{
	    	SetPlayerSkin(playerid,pStats[playerid][Skin]);
 	    	return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar logado!");
		    return 1;
		}
	}
	if(strcmp(cmd, "/skintrabalho", true) == 0) {
	    if(Logado[playerid] == 1)
		{
	    	SetPlayerSkin(playerid,Profissoes[pStats[playerid][Prof]][ProfSkin]);
	    	return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar logado!");
		    return 1;
		}
	}
	if(strcmp(cmd,"/skin",true) == 0) {
	    if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não é admin!");
     	new skin = strval ( strtok ( cmdtext, idx ));
		if(!IsValidSkin(skin)) return SendClientMessage(playerid, COLOR_GRAY, "ERRO: Skin inválido!");
		SetPlayerSkin(playerid,skin);
		return 1;
	}
	if(strcmp(cmd, "/skininfo", true) == 0) {
	    new skin = strval(strtok(cmdtext,idx));
		if(!IsValidSkin(skin)){
		    SendClientMessage(playerid, COLOR_GRAY, "Skin inválida!");
		    return 1;
		}
		new skin2, bool:searched=false;
		for(new s = 0; s < sizeof(SkinsType); s++)
		{
		    if(skin == SkinsType[s][0])
		    {
		        skin2 = s;
		        searched=true;
		        break;
			}
		}
		if(!searched){
		    SendClientMessage(playerid, COLOR_GRAY, "Skin inexistente!");
		    return 1;
		}
		if(SkinsType[skin2][1] == Null){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse skin não está a venda, talvez seja um skin específico para uma profissão ou não existe!");
		    return 1;
		}
		new string[128];
		format(string,sizeof(string),"Informações do skin %d",skin);
		SendClientMessage(playerid, COLOR_LIGHT_RED, string);
		if(SkinsType[skin2][1] == Binco) format(string,sizeof(string),"Esse skin está disponível na loja Binco, ele custa $%d",SkinsType[skin2][2]);
        if(SkinsType[skin2][1] == SubUrban) format(string,sizeof(string),"Esse skin está disponível na loja Sub Urban, ele custa $%d",SkinsType[skin2][2]);
        if(SkinsType[skin2][1] == ProLaps) format(string,sizeof(string),"Esse skin está disponível na loja Pro Laps, ele custa $%d",SkinsType[skin2][2]);
        if(SkinsType[skin2][1] == Victim) format(string,sizeof(string),"Esse skin está disponível na loja Victim, ele custa $%d",SkinsType[skin2][2]);
        if(SkinsType[skin2][1] == DidierSachs) format(string,sizeof(string),"Esse skin está disponível na loja Didier Sachs, ele custa $%d",SkinsType[skin2][2]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	if(strcmp(cmd, "/experimentarskin", true) == 0) {
		new skin;
		new tmp[128];
		new string[128];
  		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_GRAY, "/experimentarskin [ID/da/skin]");
			return 1;
		}
		skin = strval(tmp);
		new skin2, bool:searched=false;
		for(new s = 0; s < sizeof(SkinsType); s++)
		{
		    if(skin == SkinsType[s][0])
		    {
		        skin2 = s;
		        searched=true;
		        break;
			}
		}
		if(!searched){
		    SendClientMessage(playerid, COLOR_GRAY, "Skin inexistente!");
		    return 1;
		}
		if(GetPlayerInterior(playerid) == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em uma loja de roupas!");
		    return 1;
		}
		switch(SkinsType[skin2][1]){
		    case Binco:
		    {
		        if(PlayerArea[playerid] != AreaBinco){
		            SendClientMessage(playerid, COLOR_GRAY, "Essa skin é vendida nas lojas de roupas Binco, para compra-la vá até lá!");
					return 1;
				}
				else{
					format(string,sizeof(string),"Binco: Linda Skin não acha? Deseja comprar? /comprarskin %d",skin);
					SendClientMessage(playerid, COLOR_GREEN, string);
					SetPlayerSkin(playerid,skin);
					KillTimer(TimerLevando[ExperimentandoSkin[playerid]]);
        			ExperimentandoSkin[playerid] = SetTimerEx("TirarSkinLoja",10000,0,"d",playerid);
					return 1;
				}
			}
			case SubUrban:
			{
			    if(PlayerArea[playerid] != AreaSubUrban){
		            SendClientMessage(playerid, COLOR_GRAY, "Essa skin é vendida nas lojas de roupas Sub Urban, para compra-la vá até lá!");
					return 1;
				}
				else{
					format(string,sizeof(string),"Didier Sachs: Linda Skin não acha? Deseja comprar? /comprarskin %d",skin);
					SendClientMessage(playerid, COLOR_GREEN, string);
					SetPlayerSkin(playerid,skin);
					KillTimer(ExperimentandoSkin[playerid]);
        			ExperimentandoSkin[playerid] = SetTimerEx("TirarSkinLoja",10000,0,"d",playerid);
					return 1;
				}
			}
			case ProLaps:
			{
			    if(PlayerArea[playerid] != AreaProLaps){
		            SendClientMessage(playerid, COLOR_GRAY, "Essa skin é vendida nas lojas de roupas Pro Laps, para compra-la vá até lá!");
					return 1;
				}
				else{
					format(string,sizeof(string),"Pro Laps: Linda Skin não acha? Deseja comprar? /comprarskin %d",skin);
					SendClientMessage(playerid, COLOR_GREEN, string);
					SetPlayerSkin(playerid,skin);
					KillTimer(ExperimentandoSkin[playerid]);
        			ExperimentandoSkin[playerid] = SetTimerEx("TirarSkinLoja",10000,0,"d",playerid);
					return 1;
				}
			}
			case Victim:
			{
			    if(PlayerArea[playerid] != AreaVictim){
		            SendClientMessage(playerid, COLOR_GRAY, "Essa skin é vendida nas lojas de roupas Victim, para compra-la vá até lá!");
					return 1;
				}
				else{
					format(string,sizeof(string),"Victim: Linda Skin não acha? Deseja comprar? /comprarskin %d",skin);
					SendClientMessage(playerid, COLOR_GREEN, string);
					SetPlayerSkin(playerid,skin);
					KillTimer(ExperimentandoSkin[playerid]);
        			ExperimentandoSkin[playerid] = SetTimerEx("TirarSkinLoja",10000,0,"d",playerid);
					return 1;
				}
			}
			case DidierSachs:
			{
			    if(PlayerArea[playerid] != AreaDidierSachs){
		            SendClientMessage(playerid, COLOR_GRAY, "Essa skin é vendida nas lojas de roupas DidierSachs, para compra-la vá até lá!");
					return 1;
				}
				else{
					format(string,sizeof(string),"Didier Sachs: Linda Skin não acha? Deseja comprar? /comprarskin %d",skin);
					SendClientMessage(playerid, COLOR_GREEN, string);
					SetPlayerSkin(playerid,skin);
					KillTimer(ExperimentandoSkin[playerid]);
        			ExperimentandoSkin[playerid] = SetTimerEx("TirarSkinLoja",10000,0,"d",playerid);
					return 1;
				}
			}
		}
	}
	if(strcmp(cmd, "/comprarskin", true) == 0) {
	    new tmp[128];
		new skin;
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_GRAY, "/comprarskin [ID/da/skin]");
			return 1;
		}
    	skin = strval(tmp);
		if(!IsValidSkin(skin)){
		    SendClientMessage(playerid, COLOR_GRAY, "Skin inválida!");
		    return 1;
		}
		new skin2, bool:searched=false;
		for(new s = 0; s < sizeof(SkinsType); s++)
		{
		    if(skin == SkinsType[s][0])
		    {
		        skin2 = s;
		        searched=true;
		        break;
			}
		}
		if(!searched){
		    SendClientMessage(playerid, COLOR_GRAY, "Skin inexistente!");
		    return 1;
		}
		if(GetPlayerInterior(playerid) == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em uma loja de roupas!");
		    return 1;
		}
		if(GetPlayerServerMoney(playerid) < SkinsType[skin2][2]){
		    new msg[128];
			format(msg,sizeof(msg),"Você não tem dinheiro, CUSTO: $%d,00",SkinsType[skin2][2]);
		    SendClientMessage(playerid, COLOR_GRAY, msg);
			return 1;
		}
		switch(SkinsType[skin2][1]){
		    case Binco:
		    {
		        if(PlayerArea[playerid] != AreaBinco){
		            SendClientMessage(playerid, COLOR_GRAY, "Essa skin é vendida nas lojas de roupas Binco, para compra-la vá até lá!");
					return 1;
				}
				else{
				    SendClientMessage(playerid, COLOR_GREEN, "Binco: Compra de skin casual efetuada, obrigado senhor e volte sempre!");
					SetPlayerSkin(playerid,skin);
					pStats[playerid][Skin] = skin;
					AddPlayerMoney(playerid,-SkinsType[skin2][2],-1);
					return 1;
				}
			}
			case SubUrban:
			{
			    if(PlayerArea[playerid] != AreaSubUrban){
		            SendClientMessage(playerid, COLOR_GRAY, "Essa skin é vendida nas lojas de roupas Sub Urban, para compra-la vá até lá!");
					return 1;
				}
				else{
				    SendClientMessage(playerid, COLOR_GREEN, "Sub Urban: Compra de skin de gangue/pobre efetuada, obrigado senhor e volte sempre!");
					SetPlayerSkin(playerid,skin);
					pStats[playerid][Skin] = skin;
					AddPlayerMoney(playerid,-SkinsType[skin2][2],-1);
					return 1;
				}
			}
			case ProLaps:
			{
			    if(PlayerArea[playerid] != AreaProLaps){
		            SendClientMessage(playerid, COLOR_GRAY, "Essa skin é vendida nas lojas de roupas Pro Laps, para compra-la vá até lá!");
					return 1;
				}
				else{
				    SendClientMessage(playerid, COLOR_GREEN, "Pro Laps: Compra de skin esportiva efetuada, obrigado senhor e volte sempre!");
					SetPlayerSkin(playerid,skin);
					pStats[playerid][Skin] = skin;
					AddPlayerMoney(playerid,-SkinsType[skin2][2],-1);
					return 1;
				}
			}
			case Victim:
			{
			    if(PlayerArea[playerid] != AreaVictim){
		            SendClientMessage(playerid, COLOR_GRAY, "Essa skin é vendida nas lojas de roupas Victim, para compra-la vá até lá!");
					return 1;
				}
				else{
				    SendClientMessage(playerid, COLOR_GREEN, "Victim: Compra de skin diversa/rural efetuada, obrigado senhor e volte sempre!");
					SetPlayerSkin(playerid,skin);
					pStats[playerid][Skin] = skin;
					AddPlayerMoney(playerid,-SkinsType[skin2][2],-1);
					return 1;
				}
			}
			case DidierSachs:
			{
			    if(PlayerArea[playerid] != AreaDidierSachs){
		            SendClientMessage(playerid, COLOR_GRAY, "Essa skin é vendida nas lojas de roupas DidierSachs, para compra-la vá até lá!");
					return 1;
				}
				else{
				    SendClientMessage(playerid, COLOR_GREEN, "Didier Sachs: Compra de skin formal efetuada, obrigado senhor e volte sempre!");
					SetPlayerSkin(playerid,skin);
					pStats[playerid][Skin] = skin;
					AddPlayerMoney(playerid,-SkinsType[skin2][2],-1);
					return 1;
				}
			}
		}
	}
	if(strcmp(cmd,"/comprarpassagem",true) == 0){
	    if(!InStation[playerid]) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na estação do metrô!");
		if(GetPlayerServerMoney(playerid) < SUBWAY_PRICE) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar a passagem!");
		if(Metro[playerid] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você já está no metrô...");
		AddPlayerMoney(playerid,-SUBWAY_PRICE,-1);
		Metro[playerid] = 1;
		SetPlayerControl(playerid,false);
		SetPlayerInterior(playerid,10);
		SetPlayerCameraPos(playerid,0.0,0.0,0.0);
		SetPlayerCameraLookAt(playerid,5.0,12.0,30.0);
		PlayerPlaySound(playerid,1076,0.0,0.0,0.0);
		SendClientMessage(playerid, COLOR_WHITE, "[METRÔ] Bem-vindo, acomode-se bem ai e cuidado para não cair! ^^");
		return 1;
	}
	if(strcmp(cmd,"/descermetro",true) == 0){
	    if(Metro[playerid] == 0){
 			SendClientMessage(playerid, COLOR_GRAY, "Você não está no metrô!");
            return 1;
		}
	   	Metro[playerid] = 0;
	    SetPlayerPos(playerid,Stations[SubwayStation][Station_PosX],Stations[SubwayStation][Station_PosY],Stations[SubwayStation][Station_PosZ]);
		SetPlayerInterior(playerid,0);
		SetCameraBehindPlayer(playerid);
		SetPlayerControl(playerid,true);
		PlayerPlaySound(playerid,1077,0.0,0.0,0.0);
		SendClientMessage(playerid, COLOR_WHITE, "[METRÔ] Fim da viagem... Obrigado e volte sempre!");
		return 1;
	}
	if(strcmp(cmd, "/meuveiculoid", true) == 0){
	    if(!IsPlayerInAnyVehicle(playerid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhum veículo!");
		    return 1;
		}
	    if(!compare(vStats[GetPlayerVehicleID(playerid)][VDono],PlayerName(playerid))){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não é o dono do veículo!");
	        return 1;
		}
		if(GetPlayerVehicleKeyID(playerid,GetPlayerVehicleID(playerid)) == INVALID_VEHICLE_ID){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem mais veículo desse ID, talvez porque já tenha vendido!");
		    return 1;
		}
		new string[128];
		format(string,sizeof(string),"[INFO] Esse é seu veículo de ID %d",GetPlayerVehicleKeyID(playerid,GetPlayerVehicleID(playerid)));
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}

	if(strcmp(cmd, "/minhascasas", true) == 0){
		new string[128];
		format(string,sizeof(string),"[INFO] Nº Casas: %d",GetQtHouses(playerid));
		SendClientMessage(playerid, COLOR_WHITE, string);
		for(new v = 1; v < GetQtHouses(playerid) + 1; v++){
		  	new h = GetHouses(playerid, v);
			if(h != -1){
				format(string,sizeof(string),"Pickup = %d e ID: %d",GetHouses(playerid, v), GetPHouseKeyID(playerid,GetHouses(playerid, v)));
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
		}
		return 1;
	}


	if(strcmp(cmd, "/minhasscasas", true) == 0){
		new string[128];
		format(string,sizeof(string),"[INFO] Nº Casas: %d",GetQtHouses(playerid));
		SendClientMessage(playerid, COLOR_WHITE, string);
		for(new v = 1; v < GetQtHouses(playerid) + 1; v++){
		  	new h = GetPHouseKeyID(playerid,GetHouses(playerid, v));
			if(h != -1){
				format(string,sizeof(string),"Pickup = %d e ID: %d",GetHouses(playerid, v), GetPHouseKeyID(playerid,GetHouses(playerid, v)));
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
		}
		return 1;
	}


	if(strcmp(cmd, "/entregarvdocumentos", true) == 0)
	{
	    new tmp[128];
	    new plid;
	    new distancia;
     	strmid(tmp, cmdtext, 13, strlen(cmdtext));
		if(!IsPlayerInAnyVehicle(playerid))
		{
		    if(pStats[playerid][Prof] == COP_MILITAR || pStats[playerid][Prof] == COP_RODOVIARIO || pStats[playerid][Prof] == COP_SWAT || pStats[playerid][Prof] == DELEGADO)
		    {

		        if(!strlen(tmp))
		        {
		            SendClientMessage(playerid, COLOR_GRAY, "USO: /entregarvdocumentos [placa]");
		            return 1;
		        }
		        new vehid = AcharVeiculoPorPlaca(tmp);
		        if(vehid == -1)
		        {
		            SendClientMessage(playerid, COLOR_GRAY, "Não foi encontrado nenhum veículo com essa placa.");
		            return 1;
		        }
		        ShowVehicleDocuments(playerid, vehid);
		        return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo.");
				return 1;
			}
		}
		else
		{
		    tmp = strtok(cmdtext,idx);
		    plid = strval(tmp);
			if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /entregarvdocumentos [id]");
			distancia = GetDistanceBetweenPlayers(playerid, plid);
		 	if(distancia > 15){
			    SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto!");
				return 1;
			}
			if(ComVDocs[plid] != 0){
			    SendClientMessage(playerid, COLOR_GRAY, "Ele está com um documento de um veículo não pode checar o seu também.");
				return 1;
			}
			if(DocsVEntregue[GetPlayerVehicleID(playerid)] != 0){
			    SendClientMessage(playerid, COLOR_GRAY, "Esse veículo não está com o documento dele, procure com quem ele está.");
				return 1;
			}
			new string[128];
			ComVDocs[plid] = GetPlayerVehicleID(playerid);
			DocsVEntregue[GetPlayerVehicleID(playerid)] = playerid;
			format(string,sizeof(string),"Documentos do veículo entregue para %s",PlayerName(plid));
			SendClientMessage(playerid, COLOR_JUIZ, string);
			format(string,sizeof(string),"%s lhe entregou os documentos do veículo, para ve-los digite /vervdocumentos",PlayerName(playerid));
			SendClientMessage(plid, COLOR_JUIZ, string);
			return 1;
		}
	}
	if(strcmp(cmd, "/vervdocumentos", true) == 0) {
	   	if(ComVDocs[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está com nenhum documento veicular");
		    return 1;
		}
		ShowVehicleDocuments(playerid, ComVDocs[playerid]);
	    SendClientMessage(playerid, COLOR_JUIZ, "Para entregar digite: /devolvervdocumentos.");
		return 1;
	}

	if(strcmp(cmd, "/devolvervdocumentos", true) == 0){
		if(ComVDocs[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está com nenhum documento veicular!");
			return 1;
		}
		SendClientMessage(playerid, COLOR_JUIZ, "Documentos veicular devolvidos.");
	    for(new i=0; i<MAX_SLOTS; i++){
			if(IsPlayerInVehicle(i,ComVDocs[playerid])){
				SendClientMessage(i, COLOR_JUIZ, "Documentos veicular devolvidos.");
			}
		}
		DocsVEntregue[ComVDocs[playerid]] = 0;
		ComVDocs[playerid] = 0;
		return 1;
	}
	if(strcmp(cmd, "/emprestarchave", true) == 0) {
	    new tmp[128];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /emprestarchave [id]");
		    return 1;
		}
		if(!IsPlayerInAnyVehicle(playerid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
		    return 1;
		}
	    new plid = strval(tmp);
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado!");
		    return 1;
		}
		if(!compare(vStats[GetPlayerVehicleID(playerid)][VDono],PlayerName(playerid)) || !compare(vStats[GetPlayerVehicleID(playerid)][VChave],PlayerName(playerid))){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é o dono do veículo, ou não está com a chave!");
		    return 1;
		}
		if(GetDistanceBetweenPlayers(playerid,plid) > 20){
		    SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto para emprestar a chave ao jogador!");
		    return 1;
		}
		new string[128];
		set(vStats[GetPlayerVehicleID(playerid)][VChave],PlayerName(plid));
		SendClientMessage(playerid, COLOR_JUIZ, "Chave emprestada!");
		format(string,sizeof(string),"%s lhe emprestou a chave do carro dele!",PlayerName(playerid));
		SendClientMessage(plid, COLOR_WHITE, string);
		return 1;
	}
	if(strcmp(cmd, "/devolverchave", true) == 0) {
	    new tmp[128], plid, vinfo[128], qtdevolucao, string[128];
	    tmp = strtok(cmdtext,idx);
	    if(!strlen(tmp)){
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /devolverchave [id]");
	        return 1;
		}
		plid = strval(tmp);
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		    return 1;
		}
		if(GetDistanceBetweenPlayers(playerid,plid) > 20){
		    SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto para devolver a chave do jogador!");
		    return 1;
		}
		for(new v = AmountServerVehicles; v < AmountServerVehicles + AmountPlayerVehicles; v++){
		    set(vinfo,VehicleFile(v));
			if(!fexist(vinfo)) break;
			if(compare(vStats[v][VChave],PlayerName(playerid)) && compare(vStats[v][VDono],PlayerName(plid))){
			   	qtdevolucao++;
				set(vStats[v][VChave],PlayerName(plid));
			}
		}
		if(qtdevolucao == 0) return SendClientMessage(playerid, COLOR_GRAY, "Não foi devolvida nenhuma chave ao dono, pois você não está com nenhuma...");
		format(string,sizeof(string),"Foram devolvidas %d chave(s) ao dono!",qtdevolucao);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string,sizeof(string),"%s lhe devolveu %d chaves suas que estavam com ele",PlayerName(playerid),qtdevolucao);
		SendClientMessage(plid, COLOR_WHITE, string);
		return 1;
	}
	if(strcmp(cmd, "/trocardono", true)==0) {
	    if(pStats[playerid][Prof] == VENDEDOR_DE_CARROS || IsPlayerAdmin(playerid)){
	        if(IsPlayerInAnyVehicle(playerid)){
				new tmp[128], plid, vid;
				tmp = strtok(cmdtext,idx);
				if(!strlen(tmp)){
				    SendClientMessage(playerid,COLOR_GRAY,"/trocardono [id]");
				    return 1;
				}
				plid = strval(tmp);
				if(plid==playerid && !IsPlayerAdmin(playerid)){
				    SendClientMessage(playerid,COLOR_GRAY,"Você não pode mudar a documentação do carro para si mesmo");
				    return 1;
				}
				if(!IsPlayerConnected(plid)){
				    SendClientMessage(playerid,COLOR_GRAY,"Jogador não conectado/logado");
				    return 1;
				}
				vid=GetPlayerVehicleID(playerid);
				if(!IsStringAName(vStats[vid][VDono]) && !IsPlayerAdmin(playerid)){
				    SendClientMessage(playerid, COLOR_GRAY, "O dono do veículo tem que estar conectado!");
				    return 1;
				}
				if(compare(PlayerName(plid), vStats[GetPlayerVehicleID(playerid)][VDono])){
				    SendClientMessage(playerid, COLOR_GRAY, "Ele já é o dono desse veículo.");
				    return 1;
				}
				MudarDono(GetPlayerVehicleID(playerid),plid);
				SendClientMessage(playerid,COLOR_VENDEDOR_DE_CARROS,"Documentação trocada com sucesso");
				return 1;
			}
			else {
			    SendClientMessage(playerid,COLOR_GRAY,"Você não está em um veículo!");
			    return 1;
			}
		}
		else {
		    SendClientMessage(playerid,COLOR_GRAY,"EPA! Você não tem permissão para mexer nesse comando!");
		    return 1;
		}
	}
	if(strcmp(cmd, "/chamarparamorar",true) == 0) {
	    new tmp[128];
		new plid;
		new string[128];
		new casaid;
		tmp = strtok(cmdtext,idx);
		plid = strval(tmp);
		if(!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /chamarparamorar [id] [casaid]");
		    return 1;
		}
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		    return 1;
		}
	    tmp = strtok(cmdtext,idx);
	    casaid = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /chamarparamorar [id] [casaid]");
		if(casaid < 1 && casaid > 10 && casaid == 0)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /chamarparamorar [id] [casaid]");
		    SendClientMessage(playerid, COLOR_GRAY, "Entre 1 e 10");
		    return 1;
		}
		new casa = GetHouses(playerid, casaid);
		if(casa == -1){
		    SendClientMessage(playerid, COLOR_GRAY, " Você não tem casa nesse ID.");
		    return 1;
		}
		format(string,sizeof(string),"%s está oferecendo uma proposta de moradia em sua casa!",PlayerName(playerid));
		SendClientMessage(plid, COLOR_JUIZ, string);
		SendClientMessage(plid, COLOR_JUIZ, "Para aceitar digite /aceitar caso contrário digite /recusar.");
		SendClientMessage(playerid, COLOR_JUIZ, "Proposta de moradia oferecida para o outro jogador.");
		ParaAceitar[plid] = ACEITAR_MORADIA;
		PropostaMoradia[plid] = 1;
		CasaMoradia[plid] = casa;
		DonoPMoradia[plid] = playerid;
		return 1;
	}

	if(strcmp(cmd, "/cancelarmoradia", true) == 0) {
		if(pStats[playerid][ConvidadoCasa] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está morando na casa de nenhum jogador!");
		pStats[playerid][ConvidadoCasa] = 0;
		CasaMoradia[playerid] = 0;
		set(pStats[playerid][DonoCasaConvidada],"NONE");
		SendClientMessage(playerid, COLOR_WHITE, "Você saiu da sua casa de moradia!");
		return 1;
	}

	if(strcmp(cmd, "/alugarquarto", true) == 0) {
		new tmp[128];
		new plid;
		new casaid;
	    tmp = strtok(cmdtext,idx);
	    plid = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /alugarquarto [id/dono] [casaid]");
        tmp = strtok(cmdtext,idx);
	    casaid = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /alugarquarto [id/dono] [casaid]");
		if(casaid < 1 && casaid > 10 && casaid == 0)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /alugarquarto [id/dono] [casaid]");
		    SendClientMessage(playerid, COLOR_GRAY, "Entre 1 e 10");
		    return 1;
		}
		if(GetQtHouses(plid) == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você está tentando comprar uma casa que nem existe!");
			return 1;
		}
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "O jogador não está conectado/logado");
		    return 1;
		}
		new casinha = GetHouses(plid, casaid);
		if(casinha == -1){
		    SendClientMessage(playerid, COLOR_GRAY, "Ele não tem casa nesse ID.");
		    return 1;
		}
		if(pckStats[casinha][AlugandoCasa] == 0){
	    	SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está locando nenhuma casa!");
		    return 1;
		}
		if(GetPlayerServerMoney(playerid) < pckStats[casinha][ValorCasaAluguel]){
		    new string[128];
		    format(string,sizeof(string),"Você não tem dinheiro, CUSTO: $%d",pckStats[casinha][ValorCasaAluguel]);
			SendClientMessage(playerid, COLOR_GRAY, string);
			return 1;
		} else {
			set(pStats[playerid][DonoCasaAlugada],PlayerName(plid));
			pStats[playerid][LocouCasa] = 1;
			pStats[playerid][DiasDeAluguel] = pckStats[casinha][DiasCasaAluguel];
	    	if(compare(pckStats[casinha][PickupDono],PlayerName(plid))){
				pStats[playerid][SpawnPosX] = pckStats[casinha][pX];
				pStats[playerid][SpawnPosY] = pckStats[casinha][pY];
				pStats[playerid][SpawnPosZ] = pckStats[casinha][pZ];
			}
			AddPlayerMoney(playerid,-pckStats[casinha][ValorCasaAluguel],-1);
			pStats[playerid][BancoResidencia] += pckStats[casinha][ValorCasaAluguel];
		    new string[128];
		    format(string,sizeof(string), "[CORRETORA] Você alugou a casa de %s por $%d por %d dia(s)",PlayerName(plid),pckStats[casinha][ValorCasaAluguel],pStats[playerid][DiasDeAluguel]);
			SendClientMessage(playerid, COLOR_CORRETOR, string);
		    SendClientMessage(playerid, COLOR_GREEN, "Casa alugada!");
		    format(string,sizeof(string), "[CORRETORA] %s alugou sua casa!",PlayerName(playerid));
			SendClientMessage(plid, COLOR_CORRETOR, string);
			SendClientMessage(plid, COLOR_WHITE,"[INFO] Sua casa continua com o aluguel, caso queira parar /minhacasa ou /cancelaraluguel");
			AcrescentarLucro(15,100);
			return 1;
		}
	}
	
	if(strcmp(cmd, "/cancelaraluguel", true) == 0) {
	    if(pStats[playerid][LocouCasa] == 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não alugou nenhuma casa!");
	        return 1;
		}
		new string[128];
		format(string,sizeof(string),"%s cancelou o aluguel da casa de %s, ele diz que prefere morar sozinho!",PlayerName(playerid),pStats[playerid][DonoCasaAlugada]);
		SendClientMessageToAll(COLOR_WHITE, string);
		set(pStats[playerid][DonoCasaAlugada],"NONE");
		pStats[playerid][DiasDeAluguel] = 0;
		pStats[playerid][LocouCasa] = 0;
		return 1;
	}

	if(strcmp(cmd, "/minhacasa", true) == 0) {
		if(GetQtHouses(playerid) == 0) {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhuma casa!");
		    return 1;
		}
	    if(IsPlayerConnected(playerid) && Logado[playerid] == 1){
			new string[128];
			SetPlayerControl(playerid,0);
		    DestroyMenuEx(Casas);
        	Casas = CreateMenu("MinhasCasas",2,2,150,100,20);
        	SetMenuColumnHeader(Casas,0,"Casa");
    		SetMenuColumnHeader(Casas,1,"Local");
        	for(new p = 1; p < GetQtHouses(playerid) + 1; p++)
        	{
        	  	new h = GetHouses(playerid, p);
				if(h != -1){
	           		format(string,sizeof(string),"Casa: %d",GetPHouseKeyID(playerid,GetHouses(playerid, p)));
       				AddMenuItem(Casas, 0, string);
		    		new zone[28];
					GetZone(GetHouses(playerid, p), zone, 28);
  					AddMenuItem(Casas, 1, zone);
  				
	  			}
        	}
			ShowMenuForPlayer(Casas,playerid);
			SetPlayerControl(playerid,0);
			return 1;
        }
	}

	
	if(strcmp(cmd, "/comprarcasa",true) == 0){
		new pickupcasa = GetPickupHouse[playerid];
		new string[128];
	    if(pickupcasa == -1){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não está na entrada de uma casa!");
			return 1;
		}
		if(pckStats[GetPickupHouse[playerid]][Vendendo] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Você deve estar em uma casa a venda!");
			return 1;
		}
		if(GetPlayerServerMoney(playerid) < pckStats[GetPickupHouse[playerid]][PickupValor]){
		    format(string,sizeof(string),"Você não tem dinheiro. Custo: $%d,00 dólares",pckStats[pickupcasa][PickupValor]);
			SendClientMessage(playerid, COLOR_GRAY, string);
			return 1;
		}
	    SendClientMessage(playerid, COLOR_GREEN, "Casa comprada! Agora você tem um novo lar.");
        format(string,sizeof(string),"[CORRETORA] %s comprou o imóvel de %s no valor de $%d",PlayerName(playerid),pckStats[pickupcasa][PickupDono],pckStats[pickupcasa][PickupValor]);
	    SendClientMessageToAll(COLOR_CORRETOR, string);
	    VenderCasa(pickupcasa, pckStats[pickupcasa][PickupDono], playerid);
		return 1;
	}

	if(strcmp(cmd, "/participar", true) == 0) {
		if(DerbyAvisado == 1){
		    if(DerbyIniciou == 1){
		        SendClientMessage(playerid, COLOR_GRAY, "O derby já iniciou...");
		        return 1;
			}
			if(pStats[playerid][HistoriaFeita] == 0) {
	   			SendClientMessage(playerid, COLOR_GRAY, "Termine a história para participar do Derby!");
	   			return 1;
	   		}
		    if(OficializarParticipacao[playerid] == 1){
		        SendClientMessage(playerid, COLOR_GRAY, "Você já está inscrito, vá oficializar sua participação!");
		        return 1;
			}
			if(QtParticipantes() + QtDerbeiro() >= 10){
			    SendClientMessage(playerid, COLOR_GRAY, "Derby LOTADO, desculpe, talvez na próxima você consiga!");
			    return 1;
			}
			if(PlayerDerby[playerid] == 0){
				SendClientMessage(playerid, COLOR_PALHA, "[ESTÁDIO] Você foi inscrito com sucesso. Vá até o CP no radar para oficializar sua participação.");
				SetPlayerCheckpoint(playerid, 2687.7869,-1690.4769,9.4502,5.0);
				OficializarParticipacao[playerid] = 1;
				CheckpointStatus[playerid] = DERBY;
				SetTimerEx("CancelarDerby",DMinutosRestantes*60000,0,"d",playerid);
				new string[128];
				format(string,sizeof(string),"Participantes do Derby: %d/10",QtParticipantes());
				SendClientMessageToAll(COLOR_WHITE, string);
				return 1;
			} else {
			    SendClientMessage(playerid, COLOR_GRAY, "Você já está no Derby.");
			    return 1;
		 	}
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "As inscrições para o Derby não foram abertas ou já encerraram.");
		    return 1;
	 	}
	}


	if(strcmp(cmd, "/comprarchavemestra", true) == 0) {
		if(PlayerArea[playerid] != AreaChaveiro){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está no Chaveiro!");
		    return 1;
		}
		if(GetPlayerServerMoney(playerid) < 100){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro. Custo: $100");
		    return 1;
		}
		new string[128];
		AddPlayerMoney(playerid,-100,-1);
		pStats[playerid][ChaveMestra]++;
		format(string,sizeof(string),"Chave mestra adquirida, agora você tem %d chave(s)",pStats[playerid][ChaveMestra]);
        SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	if(strcmp(cmd, "/usarchavemestra", true) == 0) {
		if(PChaveMestra[playerid] == 0) {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não recebeu proposta para usar a chave mestra!");
		    return 1;
		}
		if(!IsPlayerInAnyVehicle(playerid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
		    SetPlayerControl(playerid,true);
			return 1;
		}
		if(pStats[playerid][ChaveMestra] <= 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhuma chave mestra!");
		    SetPlayerControl(playerid, true);
		    RemovePlayerFromVehicle(playerid);
			return 1;
		}
		new rand = random(5);
		SetPlayerControl(playerid,true);
		if(rand != 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Sua chave mestra quebrou! Você não conseguiu abrir o veículo...");
			RemovePlayerFromVehicle(playerid);
			pStats[playerid][ChaveMestra]--;
			return 1;
		}
		else{
			SendClientMessage(playerid, COLOR_WHITE, "Carro aberto! A chave mestra funcionou...");
			UsingChaveMestra[playerid] = GetPlayerVehicleID(playerid);
			PodeSair[playerid] = 0;
			return 1;
		}
	}

	if(strcmp(cmd, "/naousarchavemestra", true) == 0) {
	    if(PChaveMestra[playerid] == 0) {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não recebeu proposta para usar a chave mestra!");
		    return 1;
		}
		if(!IsPlayerInAnyVehicle(playerid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
		    SetPlayerControl(playerid,true);
			return 1;
		}
		if(pStats[playerid][ChaveMestra] <= 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhuma chave mestra!");
		    SetPlayerControl(playerid,true);
		    RemovePlayerFromVehicle(playerid);
			return 1;
		}
		RemovePlayerFromVehicle(playerid);
		SetPlayerControl(playerid,true);
		SendClientMessage(playerid, COLOR_WHITE, "Chave Mestra não usada!");
		return 1;
	}
	if(strcmp(cmd, "/usarcard", true) == 0) {
		if(!IsPlayerInAnyVehicle(playerid)){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
	        return 1;
		}
	    if(PropostaCard[playerid] == 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma proposta para usar o Virtual Card!");
	        return 1;
		}
		new vehicleid = GetPlayerVehicleID(playerid);
	    for(new i; i<MAX_SLOTS; i++)
	    {
	        if(IsPlayerInVehicle(i,vehicleid) && GetPlayerState(i)== PLAYER_STATE_DRIVER)
	        {
	            KillTimer(TimerCard[playerid]);
	            PropostaCard[playerid] = 0;
	            pStats[playerid][VirtualCard]--;
	            AddPlayerMoney(i,25,3);
	            SendClientMessage(playerid, COLOR_WHITE, "Virtual Card usado!");
	            SendClientMessage(i, COLOR_WHITE,   "Seu passageiro decidiu pagar com o Virtual Card, você recebeu $25,00");
     		}
	 	}
	 	return 1;
	}
	if(strcmp(cmd, "/naousarcard", true) == 0) {
		if(!IsPlayerInAnyVehicle(playerid)){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
	        return 1;
		}
	    if(PropostaCard[playerid] == 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma proposta para usar o Virtual Card!");
	        return 1;
		}
		new vehicleid = GetPlayerVehicleID(playerid);
	    for(new i; i<MAX_SLOTS; i++)
	    {
	        if(IsPlayerInVehicle(i,vehicleid) && GetPlayerState(i)== PLAYER_STATE_DRIVER)
	        {
	            KillTimer(TimerCard[playerid]);
	            NaoUsarCard(playerid,i);
     		}
	 	}
	 	return 1;
	}
	if(strcmp(cmd, "/bico", true) == 0) {
	    if(SM[playerid] != NONE){
	    	SendClientMessage(playerid, COLOR_GRAY, "Você já foi readmitido para uma submissão!");
		    return 1;
		}
		if(PlayerArea[playerid] == AreaMorro) {
		    if(SubMissaoAtiva[DROGAS]){
				SM[playerid] = DROGAS;
				new qtentregas = random(4) + 2;
				new string[128];
				format(string,sizeof(string),"Aew maluco, tu tem %d entregas pra fazer, vai rápido, se tu vacilar agente te quebra na porrada saco?!",qtentregas);
				SendClientMessage(playerid, COLOR_TRAFICANTE, string);
				SendClientMessage(playerid, COLOR_TRAFICANTE, "Ah e cuidado com os COPS, se eles te pegarem o problema é seu, maluco!");
				QtEntregasDrogas[playerid] = qtentregas;
				SubMissaoAtiva[DROGAS] = 0;
				new randcp = random(10);
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid,EntregaDrogaPos[randcp][0],EntregaDrogaPos[randcp][1],EntregaDrogaPos[randcp][2],2.5);
				CheckpointStatus[playerid] = ENTREGANDO_DROGAS;
				SendClientMessageToAll(COLOR_TRAFICANTE, "[MORRO] Vão vazando daqui, já pegamo um maluco pra faze o trampo...");
				if(!IsPlayerTransparent(playerid))
				{
					new r = random(4);
					if(r == 0){
						format(string,sizeof(string),"DENUNCIA: Morador anônimo denunciou que %s está fazendo o serviço de entregas de drogas, rápido peguem-no!", PlayerName(playerid));
						SendClientMessageToAll(COLOR_WHITE, string);
					}
				}
				return 1;
			} else{
   				SendClientMessage(playerid, COLOR_GRAY, "Maluco tu pirou? A gente num tá afim de ninguém pra entrega beck agora não!");
				return 1;
			}
		} else if(PlayerArea[playerid] == AreaBalada){
		    if(SubMissaoAtiva[DJ]){
		        SM[playerid] = DJ;
		        HaveDJ = 1;
		        SendClientMessage(playerid, COLOR_WHITE, "Hum... Então você quer ser o nosso DJ de hoje? Espero que se saiá bem, boa sorte!");
				new string[128];
				format(string,sizeof(string),"O cargo de DJ foi preenchido por %s, sinto muito aqueles outros que quiseram, talvez na próxima vocês tenham uma chance!",PlayerName(playerid));
				SendClientMessageToAll(COLOR_COP_MILITAR, string);
				SendClientMessage(playerid, COLOR_WHITE, "Pressione 'Shift / Barra de espaço' , para mudar a música!");
				SetPlayerControl(playerid,false);
				SetPlayerCameraPos(playerid,487.0688,-2.7831,1002.3828);
				SetPlayerCameraLookAt(playerid,487.6468,-14.4335,1000.6797);
				SetPlayerPos(playerid,476.0887,-15.1642,1003.6953);
				SubMissaoAtiva[DJ] = 0;
				TimerDJ[playerid] = SetTimerEx("FimDJ",300000,0,"d",playerid);
				return 1;
			} else{
				SendClientMessage(playerid, COLOR_GRAY, "Não estamos contratando DJ agora!");
				return 1;
			}
		} else if(PlayerArea[playerid] == AreaSorveteria){
  			if(SubMissaoAtiva[SORVETERIA]){
     			SM[playerid] = SORVETERIA;
        		SendClientMessage(playerid, COLOR_CLEAR_PINK, "Contratado, rápido vá entregar os sorvetes!");
		        new string[128];
		        format(string,sizeof(string),"[SORVETERIA] %s foi para o cargo de entrega de sorvetes, sinto muito galera, a vaga foi preenchida!",PlayerName(playerid));
				SendClientMessageToAll(COLOR_CLEAR_PINK, string);
				QtEntregasSorvetes[playerid] = 3;
				new randcp = random(9);
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid,EntregaSorvetePos[randcp][0],EntregaSorvetePos[randcp][1],EntregaSorvetePos[randcp][2],2.5);
				CheckpointStatus[playerid] = ENTREGANDO_SORVETE;
				SubMissaoAtiva[SORVETERIA] = 0;
				return 1;
			} else {
   				SendClientMessage(playerid, COLOR_GRAY, "Não estamos precisando de ninguém para entregar sorvetes neste momento!");
			    return 1;
			}
		} else if(PlayerArea[playerid] == AreaCimento){
		    if(SubMissaoAtiva[CIMENTO]){
      			SM[playerid] = CIMENTO;
	        	SendClientMessage(playerid, COLOR_PEDREIRA, " ----------------------------------------------------");
		        SendClientMessage(playerid, COLOR_PEDREIRA, "OK. O caminhão está aí. Pegue e vá descarregar o cimento.");
		        SendClientMessage(playerid, COLOR_PEDREIRA, " ----------------------------------------------------");
		        new string[128];
		        format(string,sizeof(string),"[Construção] %s está descarregando cimento nas construções de Los Santos!",PlayerName(playerid));
				SendClientMessageToAll(COLOR_PEDREIRA, string);
				EntregandoCimento[playerid] = 1;
				new randcp = random(3);
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid,PosCimento[randcp][0],PosCimento[randcp][1],PosCimento[randcp][2],5.0);
				CheckpointStatus[playerid] = CIMENTO_ENTREGA;
				SubMissaoAtiva[CIMENTO] = 0;
				return 1;
			} else {
   				SendClientMessage(playerid, COLOR_GRAY, "Não estamos precisando de motorista agora.");
			   	return 1;
			}
		} else if(PlayerArea[playerid] == AreaCemiterio){
  			if(SubMissaoAtiva[IML]){
		       	SM[playerid] = IML;
	        	new string[128];
		        format(string,sizeof(string),"[Cemitério] %s está pegando os corpos nos hospitais agora.",PlayerName(playerid));
				SendClientMessageToAll(COLOR_TURQUOISE, string);
    			SendClientMessage(playerid, COLOR_TURQUOISE, " -------------------------------------------------------------------------------");
       			SendClientMessage(playerid, COLOR_TURQUOISE, "Vá no Hospital marcado no Radar para pegar os corpos, não esqueça pegue o carro.");
		        SendClientMessage(playerid, COLOR_TURQUOISE, " -------------------------------------------------------------------------------");
				PegandoCorpos[playerid] = 1;
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid,1184.0129,-1323.1227,13.1519,5.0);
				CheckpointStatus[playerid] = IML_HOSPITAL;
				SubMissaoAtiva[IML] = 0;
				return 1;
			} else {
   				SendClientMessage(playerid, COLOR_GRAY, "Não estamos precisando de motorista agora.");
			    return 1;
			}
		} else if(PlayerArea[playerid] == AreaEstacao){
  			if(SubMissaoAtiva[POSTE]){
		        SM[playerid] = POSTE;
		        new string[128];
		        format(string,sizeof(string),"[COEVL] %s trata de arrumar os postes com defeito em Los Santos.",PlayerName(playerid));
				SendClientMessageToAll(COLOR_MECANICO, string);
     			SendClientMessage(playerid, COLOR_MECANICO, " -----------------------------------------------------------------------");
        		SendClientMessage(playerid, COLOR_MECANICO, "Pegue o carro e vá arrumar os postes. Os postes estão marcados no radar.");
		        SendClientMessage(playerid, COLOR_MECANICO, " -----------------------------------------------------------------------");
				ArrumandoPostes[playerid] = 5;
				new randcp = random(17);
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid,PosteDefeito[randcp][0],PosteDefeito[randcp][1],PosteDefeito[randcp][2],4.0);
				CheckpointStatus[playerid] = CONSERTANDO_POSTE;
				SubMissaoAtiva[POSTE] = 0;
				return 1;
			} else {
   				SendClientMessage(playerid, COLOR_GRAY, "Não estamos precisando que arrume os postes agora, volte depois.");
			    return 1;
			}
		} else {
  			SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhum local para admitir um cargo temporário!");
		    return 1;
		}
	}
	if(strcmp(cmd, "/informartransporte", true) == 0) {
	    new string[128];
		new zone[28];
		if(InformeiMinhaPos[playerid] == 1){
		    SendClientMessage(playerid, COLOR_GRAD, "Espere um pouco, para não floodar o Chat.");
		    return 1;
		}
    	GetPlayer2DZone(playerid, zone, 28);
	    if(pStats[playerid][Prof] == TAXISTA){
			if(IsTaxi(GetPlayerVehicleID(playerid))){
	  	    	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
		 			SendClientMessageToAll(COLOR_WHITE," ");
					format(string,sizeof(string),"Companhia de Táxi: %s está com seu táxi em circulação, [ Bairro atual: %s ]. Para chamar: /servico taxi.",PlayerName(playerid),zone);
		  			SendClientMessageToAll(COLOR_TAXISTA,string);
		 			SendClientMessageToAll(COLOR_WHITE," ");
					InformeiMinhaPos[playerid] = 1;
	       	    	SetTimerEx("ZerarInformeiPos",120000,0,"d",playerid);
					return 1;
				}
			}
		} else if(pStats[playerid][Prof] == MOTO_TAXISTA){
	    	if(!IsMotoTaxi(GetPlayerVehicleID(playerid)))
			{
   				SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma Moto autorizada. Tem que ser uma WayFarrer da Yellow's Taxi");
				return 1;
			}
  	    	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
		 		SendClientMessageToAll(COLOR_WHITE," ");
				format(string,sizeof(string),"Companhia de Táxi: %s está com sua moto-táxi em circulação, [ Bairro atual: %s ]. Para chamar: /servico taxi.",PlayerName(playerid),zone);
		 		SendClientMessageToAll(COLOR_TAXISTA,string);
				SendClientMessageToAll(COLOR_WHITE," ");
				InformeiMinhaPos[playerid] = 1;
	       	   	SetTimerEx("ZerarInformeiPos",120000,0,"d",playerid);
				return 1;
			}
		} else if(pStats[playerid][Prof] == MOTORISTA_DE_ONIBUS){
		    if(IsBus(GetPlayerVehicleID(playerid))){
	  	    	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
		 			SendClientMessageToAll(COLOR_WHITE," ");
					format(string,sizeof(string),"Companhia de Tranportes públicos: %s está com um ônibus em circulação, [ Bairro atual: %s ].",PlayerName(playerid),zone);
		  			SendClientMessageToAll(COLOR_TAXISTA,string);
		 			SendClientMessageToAll(COLOR_WHITE," ");
					InformeiMinhaPos[playerid] = 1;
	       	    	SetTimerEx("ZerarInformeiPos",120000,0,"d",playerid);
					return 1;
				}
			}
		}
	}
	if(strcmp(cmd, "/aceitar", true) == 0)
	{
	    if(ParaAceitar[playerid] == ACEITAR_NADA)
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma proposta...");
	        return 1;
	    }
		else if(ParaAceitar[playerid] == ACEITAR_CASA)
		{
	        new string[128];
	        PlayerPay(playerid, envconvite[playerid], ivalorcasa[playerid], 10);
			pStats[playerid][SpawnPosX] = iX[playerid];
			pStats[playerid][SpawnPosY] = iY[playerid];
			pStats[playerid][SpawnPosZ] = iZ[playerid];
			pStats[playerid][SpawnPosAng] = iang[playerid];
		    SendClientMessage(envconvite[playerid], COLOR_CORRETOR, "O jogador aceitou a casa e você recebeu 10 por cento do valor.");
		    SendClientMessage(playerid, COLOR_WHITE, "Assegure seu imóvel na seguradora, assim se vender será recompensado.");
			if(playerid != envconvite[playerid]) AcrescentarXpoints(envconvite[playerid],1);
		    new pickupcasa = -1;
		    for(new c = 0; c < LastCasa; c++)
		    {
		        if(compare(pckStats[c][PickupDono], "NULL"))
		        {
		            pickupcasa = c;
		            DestroyPickup(sizeof Pickups + c);
		            CreatePickup(1272,1,iX[playerid],iY[playerid],iZ[playerid]);
		        }
		    }
			if(pickupcasa == -1)
			{
			    pickupcasa = LastCasa;
		    	LastCasa++;
		    	CreatePickup(1272,1,iX[playerid],iY[playerid],iZ[playerid]);
			}
		    format(string,sizeof(string),"VL%d",pickupcasa);
			new File:pickupfile = fopen(PickupFile(pickupcasa),io_write);
			fclose(pickupfile);
			RemovePlayerFromHotel(playerid);
			pckStats[pickupcasa][ContaLuz] = 0;
			pckStats[pickupcasa][TV] = 0;
			pckStats[pickupcasa][Radio] = 0;
			pckStats[pickupcasa][Geladeira] = 0;
			pckStats[pickupcasa][Fogao] = 0;
			pckStats[pickupcasa][MaconhaCofre] = 0;
			pckStats[pickupcasa][HeroinaCofre] = 0;
			pckStats[pickupcasa][CocainaCofre] = 0;
			pckStats[pickupcasa][DinheiroCofre] = 0;
			pckStats[pickupcasa][SkinRoupa][0] = 0;
			pckStats[pickupcasa][SkinRoupa][1] = 0;
			pckStats[pickupcasa][SkinRoupa][2] = 0;
			pckStats[pickupcasa][SkinRoupa][3] = 0;
			pckStats[pickupcasa][pX] = iX[playerid];
			pckStats[pickupcasa][pY] = iY[playerid];
			pckStats[pickupcasa][pZ] = iZ[playerid];
			pckStats[pickupcasa][PickupValor] = ivalorcasa[playerid];
			set(pckStats[pickupcasa][PickupDono],PlayerName(playerid));
			set(pckStats[pickupcasa][CorretorVenda],"NONE");
		    format(string, sizeof(string), "[CORRETORA] %s te setou uma casa, para mais informações digite: /minhacasa.", PlayerName(envconvite[playerid]));
		    SendClientMessage(playerid, COLOR_CORRETOR, string);
			format(string,sizeof(string),"[CORRETORA] Essa é sua casa de ID: %d", GetPHouseKeyID(playerid,pickupcasa));
			SendClientMessage(playerid, COLOR_CORRETOR, string);
		}
		else if(ParaAceitar[playerid] == ACEITAR_VEICULO)
		{
			if(GetVehiclePrice(icarid[playerid]) > GetPlayerMoney(playerid)){
				SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, "Você não tem dinheiro para pagar o veículo.");
				return 1;
			}
			if(GetVehiclePrice(icarid[playerid]) > 10000 && pStats[playerid][XL] <= 1){
				SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, "Você não pode comprar um veículo por esse preço, pois não tem Level suficiente.");
				return 1;
			}
  			new string[128];
			new nomeveiculo[128];
		    nomeveiculo = GetVehicleModelName(icarid[playerid]);
     		format(string, sizeof(string), "Você vendeu um veículo [ Nome: %s ] para %s, dentro de 10 segundos o carro aparecerá.",nomeveiculo, PlayerName(playerid));
           	SendClientMessage(envconvite[playerid], COLOR_VENDEDOR_DE_CARROS, string);
           	SendClientMessage(envconvite[playerid], COLOR_VENDEDOR_DE_CARROS, "Peça para o jogador usar /pagar");
           	format(string, sizeof(string), "[AUTOS] %s lhe vendeu um veículo [ Nome: %s ] [ Valor: %d ].", PlayerName(envconvite[playerid]),nomeveiculo, GetVehiclePrice(icarid[playerid]));
			SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, string);
			AcrescentarLucro(14, GetVehiclePrice(icarid[playerid])/10);
   			PlayerPay(playerid, envconvite[playerid], GetVehiclePrice(icarid[playerid]), 10);
   			SetTimerEx("SetCar",10000,0,"dffffddd",icarid[playerid],iX[playerid],iY[playerid],iZ[playerid],iang[playerid],icor1[playerid],icor2[playerid],playerid);
			printf("O jogador %s setou um veiculo (id: %d) para %s.", PlayerName(envconvite[playerid]),icarid[playerid],PlayerName(playerid));
		}
	 	else if(ParaAceitar[playerid] == ACEITAR_SOCIO)
	 	{
	    	SetPropertyPartner(playerid, PropriedadeNomeacao[playerid]);
			SendClientMessage(JogadorNomeacao[playerid], COLOR_BLUE, "O jogador aceitou ser sócio da sua propriedade.");
			SendClientMessage(playerid, COLOR_BLUE, "Parabéns! Agora você é o novo sócio da propriedade, terá 10%% do rendimento da propriedade.");
			SendClientMessage(playerid, COLOR_BLUE, "Trabalhe bem, Boa Sorte!");
			PropriedadeNomeacao[playerid] = -1;
			JogadorNomeacao[playerid] = -1;
		}
	    else if(ParaAceitar[playerid] == ACEITAR_CONTRATO)
		{
			pStats[playerid][Propriedade] = PropriedadeContrato[playerid];
			for(new i = 0; i < MAX_SLOTS; i++)
			{
			    if(compare(PlayerName(i), propStats[PropriedadeContrato[playerid]][Dono1]))
			    {
			        new string[128];
			        format(string, sizeof string, "%s é o recém contratado de sua propriedade \"%s\".", PlayerName(playerid), Propriedades[PropriedadeContrato[playerid]][PropName]);
			        SendClientMessage(i, COLOR_BLUE, string);
				}
			}
			SendClientMessage(playerid, COLOR_BLUE, "Contrato aceito, meus parabéns, agora trabalhe exaustivamente atrás de um aumento.");
			PropriedadeContrato[playerid] = -1;
			pStats[playerid][AumentoPropriedade] = 0;
 		}
   		else if(ParaAceitar[playerid] == ACEITAR_SCONTRATO)
   		{
	   		if(!IsPlayerConnected(Scontratador[playerid])){
	   	        SendClientMessage(playerid, COLOR_GRAY, "O jogador se desconectou do servidor...");
	   	        return 1;
			}
			AcrescentarXpoints(playerid,2);
			SendClientMessage(Scontratador[playerid], COLOR_SEGURANÇA, "[CHEFE] Contrato Fechado! Meus Parabéns.");
			SendClientMessage(playerid, COLOR_SEGURANÇA, "Agora você tem um novo chefe.");
			new QtSegurancas;
			new JaContratado2;
			QtSegurancas = pStats[Scontratador[playerid]][NSegurancas];
			for(new i=0; i<QtSegurancas; i++){
				if(strcmp(GetSegurancas[Scontratador[playerid]][i],"NONE",true) == 0){
				    if(JaContratado2 == 0){
				        pStats[playerid][JaContratado] = 1;
						set(GetSegurancas[Scontratador[playerid]][i],PlayerName(playerid));
						GetSegurancasValor[Scontratador[playerid]][i] = Svaloroferecido[playerid];
				    	JaContratado2 = 1;
					}
				}
			}
			if(JaContratado2 == 0){
			    set(GetSegurancas[Scontratador[playerid]][QtSegurancas+1],PlayerName(playerid));
				GetSegurancasValor[Scontratador[playerid]][QtSegurancas+1] = Svaloroferecido[playerid];
		    	JaContratado2 = 1;
			}
		}
  		else if(ParaAceitar[playerid] == ACEITAR_TESTE)
  		{
		    new string[128];
			SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO ESCOLA] Seu teste iniciará em 10 segundos.");
			format(string, sizeof(string), "[AUTO ESCOLA] O teste terrestre com %s irá começar em 10 segundos.", PlayerName(playerid));
			SendClientMessage(envconvite[playerid],COLOR_INSTRUTOR, string);
			SetTimerEx("IniciarTesteLeis",10000,0,"dd",envconvite[playerid],playerid);
		}
  		else if(ParaAceitar[playerid] == ACEITAR_TESTEAUTO)
  		{
			SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO ESCOLA] Seu teste iniciará em 10 segundos.");
			SetTimerEx("LeisTerrestre",10000,0,"d",playerid);
			JaExisteAuto = 1;
			NoTeste[playerid] = 1;
      		DisablePlayerCheckpoint(playerid);
       		CheckpointStatus[playerid] = NONE;
		}
  		else if(ParaAceitar[playerid] == ACEITAR_DROGA)
  		{
			if(DrogaOferecida[playerid] == 0){
				SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma droga!");
				return 1;
			}
			if(!IsPlayerConnected(TraficanteTra[playerid])){
			    SendClientMessage(playerid, COLOR_GRAY, "O Traficante não tá aqui!");
			    return 1;
			}
		    if(GetDistanceBetweenPlayers(playerid,TraficanteTra[playerid]) > 20){
		       	SendClientMessage(playerid,COLOR_GRAY,"Você está muito longe, chegue mais perto do traficante!");
				return 1;
			}
		    new string[128];
		    if(DrogaOferecida[playerid] == 1){
			    if(GetPlayerServerMoney(playerid) < 200){
			       	SendClientMessage(playerid,COLOR_GRAY,"Você não tem dinheiro.");
					return 1;
				}
			    format(string,sizeof(string),"Bagulho vendido você vendeu %d papelotes de maconha.", QtdDrogaV[playerid]);
			    SendClientMessage(TraficanteTra[playerid], COLOR_TRAFICANTE,string);
				format(string,sizeof(string), "O Traficante %s lhe vendeu %d papelotes de maconha pra você ter efeito tem que fumar. /fumar.", PlayerName(TraficanteTra[playerid]),QtdDrogaV[playerid]);
				SendClientMessage(playerid, COLOR_WHITE, string);
			    DrogaOferecida[playerid] = 0;
			    MaconhaMao[TraficanteTra[playerid]] -= QtdDrogaV[playerid];
			    Maconha[playerid] = Maconha[playerid] + QtdDrogaV[playerid];
			    AddPlayerHealth(playerid, 10);
			    QtdDrogaV[playerid] = 0;
			    DrogasNegoci[TraficanteTra[playerid]] = 0;
			   	PlayerPay(playerid, TraficanteTra[playerid], 200);
			} else if(DrogaOferecida[playerid] == 2){
			    if(GetPlayerServerMoney(playerid) < 200){
			       	SendClientMessage(playerid,COLOR_GRAY,"Você não tem dinheiro.");
					return 1;
				}
			    format(string,sizeof(string),"PÓ vendido você vendeu %d saquinhos de cocaína.", QtdDrogaV[playerid]);
			    SendClientMessage(TraficanteTra[playerid], COLOR_TRAFICANTE,string);
				format(string,sizeof(string), "O Traficante %s lhe vendeu %d saquinhos de pó, para você ter efeito tem que cheirar. /cheirar.", PlayerName(TraficanteTra[playerid]),QtdDrogaV[playerid]);
				SendClientMessage(playerid, COLOR_WHITE, string);
			    DrogaOferecida[playerid] = 0;
			    CocainaMao[TraficanteTra[playerid]] -= QtdDrogaV[playerid];
			    Cocaina[playerid] = Cocaina[playerid] + QtdDrogaV[playerid];
			    AddPlayerHealth(playerid, 10);
			    QtdDrogaV[playerid] = 0;
			    DrogasNegoci[TraficanteTra[playerid]] = 0;
			   	PlayerPay(playerid, TraficanteTra[playerid], 200);
			} else if(DrogaOferecida[playerid] == 3){
			    if(GetPlayerServerMoney(playerid) < 250){
			       	SendClientMessage(playerid,COLOR_GRAY,"Você não tem dinheiro.");
					return 1;
				}
			    format(string,sizeof(string),"Heroína vendida! Você vendeu %d gramas de heroína.", QtdDrogaV[playerid]);
			    SendClientMessage(TraficanteTra[playerid], COLOR_TRAFICANTE,string);
				format(string,sizeof(string), "O Traficante %s lhe vendeu %d gramas de heroína, para você ter efeito tem que injetar. /injetar.", PlayerName(TraficanteTra[playerid]),QtdDrogaV[playerid]);
				SendClientMessage(playerid, COLOR_WHITE, string);
			    DrogaOferecida[playerid] = 0;
			    HeroinaMao[TraficanteTra[playerid]] -= QtdDrogaV[playerid];
			    Heroina[playerid] = Heroina[playerid] + QtdDrogaV[playerid];
			    AddPlayerHealth(playerid, 10);
			    QtdDrogaV[playerid] = 0;
			    DrogasNegoci[TraficanteTra[playerid]] = 0;
			   	PlayerPay(playerid, TraficanteTra[playerid], 250);
			}
		}
  		else if(ParaAceitar[playerid] == ACEITAR_CONVITE)
  		{
			new t = 0;
			if(Convidando[playerid] == -1) return SendClientMessage(playerid, COLOR_GRAY, "Você não recebeu nenhum convite!");
			SendClientMessage(Convidando[playerid], COLOR_GREEN, "O convite foi aceito!");
			SendClientMessage(playerid, COLOR_WHITE, "Convite aceito!");
			for(new i = 0; i < QtConvidados[Convidando[playerid]]; i++){
			    if(Convidado[Convidando[playerid]][i] == INVALID_PLAYER_ID && t == 0){
			        t = 1;
			        Convidado[Convidando[playerid]][i] = playerid;
			        break;
				}
			}
			if(t == 0){
		       	Convidado[Convidando[playerid]][QtConvidados[playerid]] = playerid;
				QtConvidados[Convidando[playerid]]++;
			}
			Convidando[playerid] = -1;
		}
  		else if(ParaAceitar[playerid] == ACEITAR_GANGUE)
  		{
			if(GangInvite[playerid] == 0){
		        SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe enviado nenhum convite para fazer parte de uma gangue!");
		        return 1;
		    }
		    new bool:searched=false;
		    for(new gng = 0; gng < gStats[GetGangID(GangInviteNome[playerid])][GangMembros]; gng++){
		        if(compare(MembersGang[GetGangID(GangInviteNome[playerid])][gng],"NONE")){
          			set(MembersGang[GetGangID(GangInviteNome[playerid])][gng],PlayerName(playerid));
		            searched=true;
		            break;
		        }
			}
		    if(!searched){
     			set(MembersGang[GetGangID(GangInviteNome[playerid])][gStats[GetGangID(GangInviteNome[playerid])][GangMembros]],PlayerName(playerid));
		       	gStats[GetGangID(GangInviteNome[playerid])][GangMembros]++;
			}
			pStats[playerid][GangueCargo] = 0;
		   	set(pStats[playerid][GangueNome],GangInviteNome[playerid]);
			SendClientMessage(playerid, COLOR_LIXEIRO, "Você aceitou entrar na gangue, agora você é um gangster!");
			SendClientMessage(GangInviteID[playerid], COLOR_LIXEIRO, "O jogador aceitou fazer parte de sua gangue!");
			GangInvite[playerid] = 0;
		}
  		else if(ParaAceitar[playerid] == ACEITAR_NEGOCIO)
		{
			if(!IsStringAName(NegocianteName[playerid])){
			    SendClientMessage(playerid, COLOR_GRAY, "Não era com ele que você decidiu fazer negócio!");
			    SendClientMessage(playerid, COLOR_GRAY, "O outro jogador deve ter saído do servidor.");
				PropriedadeEscolhida[Negociador[playerid]] = -1;
				ValorOferecido[playerid] = 0;
				Negociador[playerid] = 0;
				return 1;
			}
			else
			{
			    SetPropertyOwner(PropriedadeEscolhida[Negociador[playerid]], Negociador[playerid]);
				AddPlayerMoney(playerid, ValorOferecido[playerid], 4);
				AddPlayerMoney(Negociador[playerid], -ValorOferecido[playerid], -1);
				new string[128];
				format(string, sizeof string, "Propriedade vendida, você recebeu: $%d,00 dólares", ValorOferecido[playerid]);
				SendClientMessage(playerid, COLOR_BLUE, string);
				format(string, sizeof string, "Você é um exímio negociador, seu negócio de comprar a propriedade \"%s\" deu certo, Parabéns!", Propriedades[PropriedadeEscolhida[Negociador[playerid]]][PropName]);
				SendClientMessage(Negociador[playerid], COLOR_BLUE, string);
				GameTextForPlayer(Negociador[playerid], "~b~propriedade adquirida", 4000, 1);
				PropriedadeEscolhida[Negociador[playerid]] = -1;
				ValorOferecido[playerid] = 0;
				Negociador[playerid] = 0;
			}
		}
	    else if(ParaAceitar[playerid] == ACEITAR_PIZZA)
		{
		    if(OfertaDada[playerid] == 0){
		        SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma pizza!");
		        return 1;
			}
			if(Produto[playerid] != 1){
				SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma pizza!");
				return 1;
			}
			if(!IsPlayerConnected(VendedorProduto[playerid])){
			    SendClientMessage(playerid, COLOR_GRAY, "O outro jogador parece ter saído do servidor!");
			    return 1;
			}
			if(!IsPlayerInAnyVehicle(VendedorProduto[playerid])){
			    SendClientMessage(playerid, COLOR_GRAY, "Ei... O outro jogador saiu da moto de pizza!");
			    OfertaDada[playerid] = 0;
				Produto[playerid] = 0;
				return 1;
			}
			if(PizzasMoto[GetVehicleMotoPizzaID(GetPlayerVehicleID(VendedorProduto[playerid]))] == 0){
			    SendClientMessage(playerid, COLOR_GRAY, "A moto do outro jogador não possui pizzas!");
			    OfertaDada[playerid] = 0;
				Produto[playerid] = 0;
				return 1;
			}
   			new string[128];
		   	SendClientMessage(VendedorProduto[playerid],COLOR_ENTREGADOR_PIZZA,"Pizza aceita.");
		    SendClientMessage(playerid,COLOR_ENTREGADOR_PIZZA,"Você se deliciou com uma pizza da Well Stacked Pizza Co.");
		    PlayerPay(playerid, VendedorProduto[playerid], 50);
		    AddPlayerHealth(playerid, 20);
		    SendClientMessage(playerid, COLOR_WHITE, "Sua fome foi diminuída...");
			pStats[playerid][Fome] -= 8;
			if(pStats[playerid][Fome] < 0)
			{
			    pStats[playerid][Fome] = 0;
			}
		    ApplyAnimation(playerid,"FOOD","EAT_Pizza",4.1,0,1,1,0,1);
		    PizzasMoto[GetVehicleMotoPizzaID(GetPlayerVehicleID(VendedorProduto[playerid]))] --;
		    format(string,sizeof(string),"Foi entregue uma pizza, sua moto agora tem %d pizzas.",PizzasMoto[GetVehicleMotoPizzaID(GetPlayerVehicleID(VendedorProduto[playerid]))]);
		    SendClientMessage(VendedorProduto[playerid], COLOR_ENTREGADOR_PIZZA, string);
			OfertaDada[playerid] = 0;
			Produto[playerid] = 0;
		}
	    else if(ParaAceitar[playerid] == ACEITAR_BEBIDA)
		{
		    if(OfertaDada[playerid] == 0){
		        SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma bebida!");
		        return 1;
			}
			if(Produto[playerid] != 2 && Produto[playerid] != 3 && Produto[playerid] != 4 && Produto[playerid] != 5){
				SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma bebida!");
				return 1;
			}
			if(!IsPlayerConnected(VendedorProduto[playerid])){
			    SendClientMessage(playerid, COLOR_GRAY, "O outro jogador parece ter saído do servidor!");
			    return 1;
			}
			if(Produto[playerid] == 2){
			    new string[128];
		    	pStats[playerid][Alcool] = pStats[playerid][Alcool]+TeorProduto[playerid]*5;
				format(string, sizeof(string), "Você bebeu um bom whisky 12 anos mas o nivel de alcool no seu sangue agora é de: %d mg", pStats[playerid][Alcool]);
		 		SendClientMessage(playerid, COLOR_GREEN, string);
		  		SendClientMessage(VendedorProduto[playerid], COLOR_GREEN, "O whisky foi aceito");
		    	AddPlayerHealth(playerid, MAX_HEALTH);
		    	pStats[playerid][Fome] -= 5;
		   		PlayerPay(playerid, VendedorProduto[playerid], ValorProduto[playerid]);
				if(TeorProduto[playerid] > 3 && TeorProduto[playerid] < 7 || pStats[playerid][Alcool] > 8){
					ClearAnimations(playerid);
		    		ApplyAnimation(playerid,"PED", "WALK_DRUNK",10,0,1,0,0,0);
				    SendClientMessage(playerid,COLOR_GRAY,"Você bebeu demais e agora está tonto.");
			    	KillTimer(TimerBebida[playerid]);
					TimerBebida[playerid] = SetTimerEx("Bebado",10000,0,"d",playerid);
				}
				if(TeorProduto[playerid] == 7){
		   			ClearAnimations(playerid);
				    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
				    PlayerPlaySound(VendedorProduto[playerid],1169,0.0,0.0,0.0);
				    SendClientMessage(playerid,COLOR_GRAY,"Você bebeu demais e acabou vomitando.");
			    	KillTimer(TimerBebida[playerid]);
					TimerBebida[playerid] = SetTimerEx("Bebado",10000,0,"d",playerid);
				}
			}
			else if(Produto[playerid] == 3){
			    new string[128];
			    if(pStats[playerid][Alcool] > 0){
			        new bar = TeorProduto[playerid]*2;
  			    	pStats[playerid][Alcool] = pStats[playerid][Alcool]-bar;
  			    	if(pStats[playerid][Alcool] < 0){
  			    		pStats[playerid][Alcool] = 0;
  			    	}
  			        pStats[playerid][Fome] -= 5;
					format(string, sizeof(string), "Você tomou %s Latinha(s) de Guaraná, é bom pra diminuir a ressaca, o alcool no seu sangue baixou para: %d mg.", TeorProduto[playerid], pStats[playerid][Alcool]);
			  		SendClientMessage(playerid, COLOR_GREEN, string);
					format(string, sizeof(string), "Guaraná aceito. %s aceitou os %s Latinha(s) de Guaraná.", PlayerName(playerid), TeorProduto[playerid]);
			  		SendClientMessage(VendedorProduto[playerid], COLOR_GREEN, string);
			  	   	AddPlayerHealth(playerid, 4);
			   	   	PlayerPay(playerid, VendedorProduto[playerid], ValorProduto[playerid]);
  			    } else {
  			        new fome = 3*TeorProduto[playerid];
				    pStats[playerid][Fome] -= fome;
					format(string, sizeof(string), "Você tomou %s Latinha(s) de Guaraná, você aumentou sua vida e diminuiu sua fome.", TeorProduto[playerid]);
			  		SendClientMessage(playerid, COLOR_GREEN, string);
					format(string, sizeof(string), "Guaraná aceito. %s aceitou os %s Latinha(s) de Guaraná.", PlayerName(playerid), TeorProduto[playerid]);
			  		SendClientMessage(VendedorProduto[playerid], COLOR_GREEN, string);
			   	   	AddPlayerHealth(playerid, 7);
			   	   	PlayerPay(playerid, VendedorProduto[playerid], ValorProduto[playerid]);
			    }
  			}
			else if(Produto[playerid] == 4){
			    new string[128];
			    pStats[playerid][Alcool] = pStats[playerid][Alcool]+TeorProduto[playerid]*4;
				format(string, sizeof(string), "Você tomou uma pinga da boa, mas o teor de alcool no seu sangue é de: %d mg", pStats[playerid][Alcool]);
		 		SendClientMessage(playerid, COLOR_GREEN, string);
		    	SendClientMessage(VendedorProduto[playerid], COLOR_GREEN, "Pinga vendida.");
		       	AddPlayerHealth(playerid, 25);
		       	pStats[playerid][Fome] -= 5;
		       	PlayerPay(playerid, VendedorProduto[playerid], ValorProduto[playerid]);
				if(TeorProduto[playerid] > 3 && TeorProduto[playerid] < 7 || pStats[playerid][Alcool] > 8){
					ClearAnimations(playerid);
		    		ApplyAnimation(playerid,"PED", "WALK_DRUNK",10,0,1,0,0,0);
				    SendClientMessage(playerid,COLOR_GRAY,"Você bebeu demais e agora está tonto.");
			    	KillTimer(TimerBebida[playerid]);
					TimerBebida[playerid] = SetTimerEx("Bebado",10000,0,"d",playerid);
				}
				if(TeorProduto[playerid] == 7){
		   			ClearAnimations(playerid);
				    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
				    PlayerPlaySound(VendedorProduto[playerid],1169,0.0,0.0,0.0);
				    SendClientMessage(playerid,COLOR_GRAY,"Você bebeu demais e acabou vomitando.");
			    	KillTimer(TimerBebida[playerid]);
					TimerBebida[playerid] = SetTimerEx("Bebado",10000,0,"d",playerid);
				}
			}
			else if(Produto[playerid] == 5){
			    new string[128];
			    pStats[playerid][Alcool] = pStats[playerid][Alcool] + TeorProduto[playerid] * 2;
				format(string, sizeof(string), "Você tomou uma cerveja geladinha mas o nível de alcool no seu sangue agora é de: %d mg", pStats[playerid][Alcool]);
		   		SendClientMessage(playerid, COLOR_GREEN, string);
		   		SendClientMessage(VendedorProduto[playerid], COLOR_GREEN, "Uma cerveja gelada saindo...");
		    	AddPlayerHealth(playerid, 5);
		    	pStats[playerid][Fome] -= 5;
		       	PlayerPay(playerid, VendedorProduto[playerid], 10*TeorProduto[playerid]);
				if(TeorProduto[playerid] > 5 && TeorProduto[playerid] < 8 || pStats[playerid][Alcool] > 8){
					ClearAnimations(playerid);
		   			ApplyAnimation(playerid,"PED", "WALK_DRUNK",10,0,1,0,0,0);
				    SendClientMessage(playerid,COLOR_GRAY,"Você bebeu demais e agora está tonto.");
			    	KillTimer(TimerBebida[playerid]);
					TimerBebida[playerid] = SetTimerEx("Bebado",10000,0,"d",playerid);
				}
				if(TeorProduto[playerid] == 7){
		   			ClearAnimations(playerid);
				    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
				    PlayerPlaySound(VendedorProduto[playerid],1169,0.0,0.0,0.0);
				    SendClientMessage(playerid,COLOR_GRAY,"Você bebeu demais e acabou vomitando.");
			    	KillTimer(TimerBebida[playerid]);
					TimerBebida[playerid] = SetTimerEx("Bebado",10000,0,"d",playerid);
				}
			}
			else if(Produto[playerid] == 6){
			    new string[128];
			    if(pStats[playerid][Alcool] > 0){
  			    	pStats[playerid][Alcool] = pStats[playerid][Alcool]-TeorProduto[playerid];
  			    	if(pStats[playerid][Alcool] < 0){
  			    		pStats[playerid][Alcool] = 0;
  			    	}
  			        pStats[playerid][Fome] -= 5;
					format(string, sizeof(string), "Você tomou %s Copo(s) de Suco, o teor de alcool no seu sangue baixou para: %d mg.", TeorProduto[playerid], pStats[playerid][Alcool]);
			  		SendClientMessage(playerid, COLOR_GREEN, string);
					format(string, sizeof(string), "Suco aceito. %s aceitou os %s Copo(s) de Suco.", PlayerName(playerid), TeorProduto[playerid]);
			  		SendClientMessage(VendedorProduto[playerid], COLOR_GREEN, string);
			  	   	AddPlayerHealth(playerid, 5);
			   	   	PlayerPay(playerid, VendedorProduto[playerid], ValorProduto[playerid]);
  			    } else {
  			        new fome = 7*TeorProduto[playerid];
				    pStats[playerid][Fome] -= fome;
					format(string, sizeof(string), "Você tomou %s Copo(s) de Suco, sua fome foi diminuída e sua vida aumentou.", TeorProduto[playerid]);
			  		SendClientMessage(playerid, COLOR_GREEN, string);
					format(string, sizeof(string), "Suco aceito. %s aceitou os %s Copos de Suco.", PlayerName(playerid), TeorProduto[playerid]);
			  		SendClientMessage(VendedorProduto[playerid], COLOR_GREEN, string);
			   	   	AddPlayerHealth(playerid, 5);
			   	   	PlayerPay(playerid, VendedorProduto[playerid], ValorProduto[playerid]);
			    }
			}
			else if(Produto[playerid] == 7){
			    new string[128];
			    pStats[playerid][Alcool] = pStats[playerid][Alcool] + TeorProduto[playerid] * 4;
				format(string, sizeof(string), "Você tomou %s doses de Vodka Smirnoff, seu nível de alcool no sangue agora é: %d mg", TeorProduto[playerid], pStats[playerid][Alcool]);
		   		SendClientMessage(playerid, COLOR_GREEN, string);
				format(string, sizeof(string), "Vodka aceita. %s aceitou os %s Doses de Vodka.", PlayerName(playerid), TeorProduto[playerid]);
		  		SendClientMessage(VendedorProduto[playerid], COLOR_GREEN, string);
		    	AddPlayerHealth(playerid, 10);
		    	pStats[playerid][Fome] -= 5;
		       	PlayerPay(playerid, VendedorProduto[playerid], 10*TeorProduto[playerid]);
				if(TeorProduto[playerid] > 5 && TeorProduto[playerid] < 8 || pStats[playerid][Alcool] > 8){
					ClearAnimations(playerid);
		   			ApplyAnimation(playerid,"PED", "WALK_DRUNK",10,0,1,0,0,0);
				    SendClientMessage(playerid,COLOR_GRAY,"Você bebeu demais e agora está tonto.");
			    	KillTimer(TimerBebida[playerid]);
					TimerBebida[playerid] = SetTimerEx("Bebado",10000,0,"d",playerid);
				}
				if(TeorProduto[playerid] == 7){
		   			ClearAnimations(playerid);
				    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
				    PlayerPlaySound(VendedorProduto[playerid],1169,0.0,0.0,0.0);
				    SendClientMessage(playerid,COLOR_GRAY,"Você bebeu demais e acabou vomitando.");
			    	KillTimer(TimerBebida[playerid]);
					TimerBebida[playerid] = SetTimerEx("Bebado",10000,0,"d",playerid);
				}
			}
			else if(Produto[playerid] == 8){
			    new string[128];
			    if(pStats[playerid][Alcool] > 0){
			        new bar = TeorProduto[playerid]*3;
  			    	pStats[playerid][Alcool] = pStats[playerid][Alcool]-bar;
  			    	if(pStats[playerid][Alcool] < 0){
  			    		pStats[playerid][Alcool] = 0;
  			    	}
  			        pStats[playerid][Fome] -= 2;
					format(string, sizeof(string), "Você tomou %s Garrafa(s) de Água, é bom pra curar a ressaca, o alcool no seu sangue baixou para: %d mg.", TeorProduto[playerid], pStats[playerid][Alcool]);
			  		SendClientMessage(playerid, COLOR_GREEN, string);
					format(string, sizeof(string), "Água aceita. %s aceitou os %s Garrafa(s) de Água.", PlayerName(playerid), TeorProduto[playerid]);
			  		SendClientMessage(VendedorProduto[playerid], COLOR_GREEN, string);
			  	   	AddPlayerHealth(playerid, 3);
			   	   	PlayerPay(playerid, VendedorProduto[playerid], ValorProduto[playerid]);
  			    } else {
  			        new fome = 2*TeorProduto[playerid];
				    pStats[playerid][Fome] -= fome;
					format(string, sizeof(string), "Você tomou %s Garrafa(s) de Água, você aumentou sua vida.", TeorProduto[playerid]);
			  		SendClientMessage(playerid, COLOR_GREEN, string);
					format(string, sizeof(string), "Suco aceito. %s aceitou os %s Copos de Suco.", PlayerName(playerid), TeorProduto[playerid]);
			  		SendClientMessage(VendedorProduto[playerid], COLOR_GREEN, string);
			   	   	AddPlayerHealth(playerid, 10);
			   	   	PlayerPay(playerid, VendedorProduto[playerid], ValorProduto[playerid]);
			    }
			}
			else if(Produto[playerid] == 9){
			    new string[128];
			    if(pStats[playerid][Alcool] > 0){
  			        pStats[playerid][Fome] -= 10;
					format(string, sizeof(string), "Você tomou %s Energético(s), é bom pra agitar mais.", TeorProduto[playerid]);
			  		SendClientMessage(playerid, COLOR_GREEN, string);
					format(string, sizeof(string), "Energético aceito. %s aceitou os %s Latinha(s) de Energético.", PlayerName(playerid), TeorProduto[playerid]);
			  		SendClientMessage(VendedorProduto[playerid], COLOR_GREEN, string);
			  	   	AddPlayerHealth(playerid, 20);
			   	   	PlayerPay(playerid, VendedorProduto[playerid], ValorProduto[playerid]);
			    }
			}
			ValorProduto[playerid] = 0;
   			Produto[playerid] = 0;
	    	TeorProduto[playerid] = 0;
		}
	    else if(ParaAceitar[playerid] == ACEITAR_MORADIA)
		{
		    if(PropostaMoradia[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma proposta de moradia!");
	        pStats[playerid][ConvidadoCasa] = 1;
	        new an = CasaMoradia[playerid];
	        set(pStats[playerid][DonoCasaConvidada],PlayerName(DonoPMoradia[playerid]));
	   		pStats[playerid][SpawnPosX] = pckStats[an][pX];
			pStats[playerid][SpawnPosY] = pckStats[an][pY];
			pStats[playerid][SpawnPosZ] = pckStats[an][pZ];
 			SendClientMessage(DonoPMoradia[playerid], COLOR_JUIZ, "Ele aceitou sua proposta de moradia!");
			SendClientMessage(playerid, COLOR_JUIZ, "Moradia aceita! Seja bem vindo a sua nova casa!");
			PropostaMoradia[playerid] = 0;
			CasaMoradia[playerid] = 0;
		}
	    else if(ParaAceitar[playerid] == ACEITAR_HORAEXTRA)
		{
			if(HoraExtra[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Não foi oferecida a você nenhuma proposta de HORA EXTRA!");
			FazendoHoraExtra[playerid] = 1;
			new rand = random(3) + 3;
			TempoHoraExtra2[playerid] = SetTimerEx("FimHoraExtra",rand*60000,0,"d",playerid);
			new msg[128];
			format(msg,sizeof(msg),"Hora extra aceita! Duração: %d hora(s) no jogo!",rand);
			SendClientMessage(playerid, COLOR_WHITE, msg);
			KillTimer(TempoHoraExtra[playerid]);
			HoraExtra[playerid] = 0;
		}
	    else if(ParaAceitar[playerid] == ACEITAR_CONSERTO)
		{
		    if(PropostaConserto[playerid] == 0){
		        SendClientMessage(playerid, COLOR_GRAY, "Não foi oferecida nenhuma proposta a você!");
		        return 1;
			}
			if(GetPlayerServerMoney(playerid) < DinheiroConserto[playerid]){
				if(pStats[playerid][Banco] >= DinheiroConserto[playerid]){
					SendClientMessage(playerid, COLOR_MECANICO, "[OFICINA] Espere um pouco que já devolvemos o seu veículo!");
					pStats[playerid][Banco] -= DinheiroConserto[playerid];
					SendClientMessage(playerid, COLOR_GREEN, "OBS: O dinheiro do conserto foi retirado de sua conta bancária!");
					TimerConserto[playerid] = SetTimerEx("ConsertandoCarro",40000,0,"dd",playerid,VeiculoConserto[playerid]);
					return 1;
				}
				else{
				    SendClientMessage(playerid, COLOR_GRAY, "[OFICINA] O que? Não tem dinheiro? HA HA HA vai dizendo adeus a seu veículo rapaz!");
					PropostaConserto[playerid] = 0;
					VeiculoConserto[playerid] = 0;
					DinheiroConserto[playerid] = 0;
					return 1;
				}
			}
			SendClientMessage(playerid, COLOR_MECANICO, "[OFICINA] Espere um pouco que já devolvemos o seu veículo!");
			AddPlayerMoney(playerid, - DinheiroConserto[playerid], -1);
			TimerConserto[playerid] = SetTimerEx("ConsertandoCarro",40000,0,"dd",playerid,VeiculoConserto[playerid]);
		}
	    else if(ParaAceitar[playerid] == ACEITAR_SEXO)
		{
	        if(Transacama[playerid] == 0){
		        for(new i=0; i<MAX_SLOTS; i++){
			    	if(Sex2a2[i] == playerid){
					    if(GetDistanceBetweenPlayers(playerid,i) > 40){
					       	SendClientMessage(playerid,COLOR_GRAY,"Vocês precisam estar próximo.");
							return 1;
						}
						if(GetPlayerServerMoney(i) < 300){
				        	SendClientMessage(i, COLOR_GRAY, "	Você não tem dinheiro para pagar. Custo: $300.");
					       	SendClientMessage(playerid,COLOR_GRAY,"	Ele não tem dinheiro para pagar.");
							return 1;
						}
						
		        		SendClientMessage(playerid, COLOR_PROSTITUTA, "Você aceitou a prosposta, durma que logo chegará no Motel.");
						AddPlayerMoney(i,-300,-1);
						new Float:x1,Float:y1,Float:z1;
						GetPlayerPos(i,x1,y1,z1);
				        SetPlayerPos(i, x1,y1-2,z1);
				        SetPlayerPos(playerid, x1,y1,z1);
				        SetPlayerFacingAngle(i,0);
				        SetPlayerFacingAngle(playerid,0);
				        SendClientMessage(i, COLOR_PROSTITUTA, "Quando estiver pronto, chegue próximo para \"meter\" digite /meter");
				        SendClientMessage(i, COLOR_PROSTITUTA, "Para sair do sexo, entre no CheckPoint, é bom estar em um motel!");
				        SendClientMessage(playerid, COLOR_PROSTITUTA, "Para sair do sexo, entre no CheckPoint que está próximo a você.");
					    SetPlayerCheckpoint(playerid,x1+10,y1,z1,8.0);
				   	    SetPlayerCheckpoint(i,x1+10,y1,z1,8.0);
				        CheckpointStatus[playerid] = CAMA;
				        CheckpointStatus[i] = CAMA;
					}
				}
			} else if(Transacama[playerid] == 1){
		    	if(GetPlayerServerMoney(playerid) < 300){
		        	SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para transar com a prostituta");
					return 1;
				}
		        SendClientMessage(playerid, COLOR_PROSTITUTA, "Você aceitou a prosposta da prostituta!");
				SetPlayerPos(Prostitutacama[playerid], 2206.5156,-1071.4319,1051.0058);
		        SetPlayerPos(playerid, 2205.2402,-1076.3251,1050.4844);
		        SetPlayerInterior(playerid,1);
		        SetPlayerInterior(Prostitutacama[playerid],1);
		        SendClientMessage(playerid, COLOR_PROSTITUTA, "Para -meter- digite /meter");
		        SendClientMessage(playerid, COLOR_PROSTITUTA, "Para sair basta entrar no CheckPoint que está próximo a porta!");
				SendClientMessage(Prostitutacama[playerid], COLOR_PROSTITUTA, "Assim que o sexo acabar, você pode sair pela porte, não tenta fugir ou será demitido(a)");
			    SetPlayerCheckpoint(playerid,2211.9827,-1076.0026,1050.4844,3.0);
		   	    SetPlayerCheckpoint(Prostitutacama[playerid],2211.9827,-1076.0026,1050.4844,3.0);
		        CheckpointStatus[playerid] = CAMA;
		        CheckpointStatus[Prostitutacama[playerid]] = CAMA;
		        PlayerPay(playerid, Prostitutacama[playerid], 300);
	 	        SetTimerEx("Prostituir",1000,0,"d",Prostitutacama[playerid]);
			}
		}
	    else if(ParaAceitar[playerid] == ACEITAR_ARMA)
		{
	        if(GetPlayerMoney(playerid) < RPGWeapons[Armas[playerid]][Info_ArmaValor]){
			   	SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar essa arma.");
			    return 1;
			}
			new distancia;
			distancia = GetDistanceBetweenPlayers(playerid, VendedorVirou[playerid]);
		 	if(distancia > 30){
			    SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, tem que estar perto para receber a arma.");
				return 1;
			}
			GiveWeapon(playerid, Armas[playerid], RPGWeapons[Armas[playerid]][Info_Municao]);
			SendClientMessage(VendedorVirou[playerid], COLOR_VENDEDOR_DE_ARMAS, "[AMMU] Ele aceitou a Arma, vendido e valor recebido.");
			new string[128];
			format(string, sizeof string, "[AMMU] O Vendedor de Armas %s lhe vendeu uma %s/%d.", PlayerName(playerid), RPGWeapons[Armas[playerid]][Info_ArmaNome], RPGWeapons[Armas[playerid]][Info_Municao]);
			SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS, string);
			AcrescentarLucro(5, RPGWeapons[Armas[playerid]][Info_ArmaValor]/10);
          	PlayerPay(playerid, VendedorVirou[playerid], RPGWeapons[Armas[playerid]][Info_ArmaValor], 10);
			return 1;
		}
		else if(ParaAceitar[playerid] == ACEITAR_TESTEAEREO){
			SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO ESCOLA] Seu teste de Habilitação Áerea iniciará em 10 segundos.");
			SetTimerEx("LeisAereas",10000,0,"dd",playerid, InstrutorNovo[playerid]);
      		DisablePlayerCheckpoint(playerid);
       		CheckpointStatus[playerid] = NONE;
       		return 1;
       	}
        else if(ParaAceitar[playerid] == ACEITAR_LIMPAR){
		    new string[128];
		    new distancia;
			distancia = GetDistanceBetweenPlayers(playerid, AdvogadoDele[playerid]);
	 		if(distancia > 15){
		  		SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto!");
				return 1;
			}
			if(GetPlayerWantedLevel(playerid) == 0){
		    	SendClientMessage(playerid, COLOR_GRAY,"Você não está sendo procurado.");
				return 1;
			}
			if(GetPlayerMoney(playerid) <  (GetPlayerWantedLevel(playerid)*500)){
		    	SendClientMessage(playerid, COLOR_GRAY,"Você não tem dinheiro para isso.");
				return 1;
			}
			new valor = 0;
			valor = (GetPlayerWantedLevel(playerid)*500);
			SetPlayerWantedLevel(playerid, 0);
		    format(string,sizeof(string),"[ESCRITORIO] %s aceitou sua proposta de limpar as estrelas, você vai receber $%d pelo seus serviços.",PlayerName(playerid), valor);
            SendClientMessage(AdvogadoDele[playerid], COLOR_ADVOGADO, string);
		    format(string,sizeof(string),"[ADVOGADO] Pronto! Trabalho feito, você não está mais sendo procurado pela polícia. Vamos cobrar $%d. Obrigado se precisar nos avise.",valor);
            SendClientMessage(playerid, COLOR_ADVOGADO, string);
            AddPlayerMoney(playerid, -valor, -1);
            AddPlayerMoney(AdvogadoDele[playerid], valor, 7);
            AcrescentarXpoints(AdvogadoDele[playerid],1);
			return 1;
		}
		KillTimer(TimerCancel[playerid]);
		ParaAceitar[playerid] = ACEITAR_NADA;
		return 1;
	}

    if(strcmp(cmd, "/recusar", true) == 0)
	{
	    if(ParaAceitar[playerid] == ACEITAR_NADA)
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma proposta...");
	        return 1;
	    }
		else if(ParaAceitar[playerid] == ACEITAR_CASA)
		{
   			SendClientMessage(playerid, COLOR_CORRETOR, "Casa recusada");
			SendClientMessage(envconvite[playerid], COLOR_CORRETOR, "Essa casa foi recusada. Talvez outra sirva para esse jogador!");
		}
	    else if(ParaAceitar[playerid] == ACEITAR_VEICULO)
		{
	    	SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, "Carro recusado");
			SendClientMessage(envconvite[playerid], COLOR_VENDEDOR_DE_CARROS, "Seu carro foi recusado. Talvez o jogador queira outro modelo");
		}
	    else if(ParaAceitar[playerid] == ACEITAR_SOCIO)
		{
		    if(IsStringAName(propStats[PropriedadeContrato[playerid]][Dono1])){
				new playa = IDName(propStats[PropriedadeContrato[playerid]][Dono1]);
				new string[128];
				format(string,sizeof(string),"%s recusou ser sócio da sua propriedade.",PlayerName(playerid));
				SendClientMessage(playa, COLOR_BLUE, string);
			}
		    SendClientMessage(playerid, COLOR_BLUE, "Oferta de sócio recusada, parecia ser uma boa oportunidade... x/");
			PropriedadeNomeacao[playerid] = -1;
			JogadorNomeacao[playerid] = -1;
		}
	    else if(ParaAceitar[playerid] == ACEITAR_CONTRATO)
		{
			if(IsStringAName(propStats[PropriedadeContrato[playerid]][Dono1])){
				new playa = IDName(propStats[PropriedadeContrato[playerid]][Dono1]);
				new string[128];
				format(string,sizeof(string),"%s recusou trabalhar na sua propriedade.",PlayerName(playerid));
				SendClientMessage(playa, COLOR_BLUE, string);
			}
			SendClientMessage(playerid, COLOR_BLUE, "Proposta de trabalho recusada...");
			PropriedadeContrato[playerid] = -1;
  		}
    	else if(ParaAceitar[playerid] == ACEITAR_SCONTRATO)
		{
	  	    SendClientMessage(Scontratador[playerid], COLOR_GRAY, "O contrato foi recusado!");
			SendClientMessage(playerid, COLOR_GREEN, "Contrato recusado!");
		}
	    else if(ParaAceitar[playerid] == ACEITAR_TESTE)
		{
			SendClientMessage(playerid, COLOR_ADVOGADO, "[AUTO ESCOLA] Obrigado senhor, quando quiser dispor contate-nos.");
			SendClientMessage(envconvite[playerid], COLOR_ADVOGADO, "[AUTO ESCOLA] A proposta foi recusada!");
		}
   		else if(ParaAceitar[playerid] == ACEITAR_TESTEAUTO)
  		{
			SendClientMessage(playerid, COLOR_ADVOGADO, "[AUTO ESCOLA] Obrigado senhor, quando quiser dispor contate-nos.");
            DisablePlayerCheckpoint(playerid);
    		JaExisteAuto = 0;
    		AceitouTeste[playerid] = 0;
   			CheckpointStatus[playerid] = NONE;
		}
   		else if(ParaAceitar[playerid] == ACEITAR_DROGA)
  		{
			if(DrogaOferecida[playerid] == 0){
				SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma droga!");
				return 1;
			}
			new string[128];
			DrogaOferecida[playerid] = 0;
		    QtdDrogaV[playerid] = 0;
			DrogasNegoci[TraficanteTra[playerid]] = 0;
		    format(string,sizeof(string),"Aew maluco o %s recusou o teu bagulho. Que isso assim você perde respeito.", PlayerName(playerid));
		    SendClientMessage(TraficanteTra[playerid], COLOR_TRAFICANTE,string);
			SendClientMessage(playerid, COLOR_WHITE, "É assim que se faz... Drogas não!");
		}
	    else if(ParaAceitar[playerid] == ACEITAR_CONVITE)
		{
  			if(Convidando[playerid] == -1) return SendClientMessage(playerid, COLOR_GRAY, "Você não recebeu nenhum convite!");
			SendClientMessage(Convidando[playerid], COLOR_GREEN, "O convite foi recusado!");
			SendClientMessage(playerid, COLOR_WHITE, "Convite recusado!");
			Convidando[playerid] = -1;
		}
	    else if(ParaAceitar[playerid] == ACEITAR_GANGUE)
		{
		    if(GangInvite[playerid] == 0){
		        SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe enviado nenhum convite para fazer parte de uma gangue!");
		        return 1;
		    }
		    GangInvite[playerid] = 0;
		    SendClientMessage(playerid, COLOR_LIXEIRO, "Convite de gangue recusado!");
	        SendClientMessage(GangInviteID[playerid], COLOR_LIXEIRO, "O jogador recusou fazer parte de sua gangue!");
		}
	    else if(ParaAceitar[playerid] == ACEITAR_NEGOCIO)
		{
			if(!IsStringAName(NegocianteName[playerid]))
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Não era com ele que você decidiu fazer negócio!");
			    SendClientMessage(playerid, COLOR_GRAY, "O outro jogador deve ter saído do servidor.");
				PropriedadeEscolhida[Negociador[playerid]] = -1;
				ValorOferecido[playerid] = 0;
				Negociador[playerid] = 0;
				return 1;
			}
			else
			{
			    SendClientMessage(Negociador[playerid], COLOR_BLUE, "Seu negócio de comprar a propriedade não deu certo, ofereça mais dinheiro...");
			    SendClientMessage(playerid, COLOR_BLUE, "Negócio recusado...");
				PropriedadeEscolhida[Negociador[playerid]] = -1;
				ValorOferecido[playerid] = 0;
				Negociador[playerid] = 0;
			}
		}
	    else if(ParaAceitar[playerid] == ACEITAR_PIZZA)
		{
		    if(OfertaDada[playerid] == 0){
		        SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma pizza!");
		        return 1;
			}
			if(Produto[playerid] != 1){
				SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma pizza!");
				return 1;
			}
			else{
			    OfertaDada[playerid] = 0;
				Produto[playerid] = 0;
				SendClientMessage(VendedorProduto[playerid], COLOR_GRAY, "A pizza foi recusada!");
				SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, "Você recusou a pizza...");
			}
	    }
	    else if(ParaAceitar[playerid] == ACEITAR_BEBIDA)
		{
		    if(OfertaDada[playerid] == 0){
		        SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma bebida!");
		        return 1;
			}
			if(Produto[playerid] != 2 && Produto[playerid] != 3 && Produto[playerid] != 4 && Produto[playerid] != 5){
				SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma bebida!");
				return 1;
			}
			if(!IsPlayerConnected(VendedorProduto[playerid])){
			    SendClientMessage(playerid, COLOR_GRAY, "O outro jogador parece ter saído do servidor!");
			    return 1;
			}
			else{
			    OfertaDada[playerid] = 0;
				Produto[playerid] = 0;
				ValorProduto[playerid] = 0;
				TeorProduto[playerid] = 0;
				SendClientMessage(VendedorProduto[playerid], COLOR_GRAY, "A bebida foi recusada!");
				SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, "Você recusou a bebida...");
			}
		}
	    else if(ParaAceitar[playerid] == ACEITAR_MORADIA)
		{
		    if(PropostaMoradia[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma proposta de moradia!");
			SendClientMessage(DonoPMoradia[playerid], COLOR_JUIZ, "O jogador recusou sua proposta de moradia!");
			SendClientMessage(playerid, COLOR_JUIZ, "Proposta de moradia recusada!");
			PropostaMoradia[playerid] = 0;
   			CasaMoradia[playerid] = 0;
		}
	    else if(ParaAceitar[playerid] == ACEITAR_HORAEXTRA)
		{
			if(HoraExtra[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Não foi oferecida a você nenhuma proposta de HORA EXTRA!");
			HoraExtra[playerid] = 0;
			KillTimer(TempoHoraExtra[playerid]);
			SendClientMessage(playerid, COLOR_GRAY, "Hora extra recusada...");
		}
	   	else if(ParaAceitar[playerid] == ACEITAR_CONSERTO)
  		{
		    if(PropostaConserto[playerid] == 0){
		        SendClientMessage(playerid, COLOR_GRAY, "Não foi oferecida nenhuma proposta a você!");
		        return 1;
			}
			PropostaConserto[playerid] = 0;
			VeiculoConserto[playerid] = 0;
			DinheiroConserto[playerid] = 0;
			SendClientMessage(playerid, COLOR_MECANICO, "[OFICINA] Seu carro já era, não reclame também, pois nós te oferecemos uma proposta!");
		}
	    else if(ParaAceitar[playerid] == ACEITAR_SEXO)
		{
		    if(Transacama[playerid] == 1){
		        Transacama[playerid] = 0;
		        SendClientMessage(playerid, COLOR_GREEN, "Você não aceitou a proposta!");
		    }
			if(Transacama[playerid] == 0){
		        SendClientMessage(playerid, COLOR_GRAY, "Você não fechou acordo com a prostituta!");
		    }
		}
	    else if(ParaAceitar[playerid] == ACEITAR_ARMA)
		{
		  	SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS, "[AMMU] Você não aceitou a proposta, proposta cancelada!");
		}
	    else if(ParaAceitar[playerid] == ACEITAR_LIMPAR)
		{
		  	SendClientMessage(playerid, COLOR_ADVOGADO, "[ESCRITORIO] Não iremos limpar sua ficha, mas se quiser nos contate. /advogado.");
		}
	    else if(ParaAceitar[playerid] == ACEITAR_TESTEAEREO)
		{
			SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO ESCOLA] Ok, você recusou o teste de Habilitação Áerea.");
		}
		KillTimer(TimerCancel[playerid]);
		ParaAceitar[playerid] = ACEITAR_NADA;
		return 1;
	}
	if(strcmp(cmd, "/venderveiculodesmanche", true) == 0)
	{
		if(PlayerArea[playerid] != AreaDesmanche)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está no desmanche.");
		    return 1;
		}
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo.");
	        return 1;
	    }
	    new resid = GetPlayerVehicleID(playerid);
	    if(GetVehiclePrice(GetVehicleModel(resid)) < 1)
	    {
	        SendClientMessage(playerid, COLOR_GRAY, "Não compramos esse tipo de veículo.");
	        return 1;
	    }
		if(!compare(vStats[resid][VDono], PlayerName(playerid)))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é o dono do veículo.");
		    return 1;
		}
		if(Logado[playerid] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Você só pode digitar se estiver logado no jogo!");
			return 0;
		}
		new str[128];
		format(str, sizeof str, "Veículo vendido, você recebeu $%d,00 dólares.", GetVehiclePrice(GetVehicleModel(resid)) / 4);
    	SendClientMessage(playerid, COLOR_ASSALTANTE,  str);
    	AddPlayerMoney(playerid, GetVehiclePrice(GetVehicleModel(resid)) / 4, 4);
    	set(vStats[resid][VDono], "NULL");
	    set(vStats[resid][VChave], "NULL");
	    vStats[resid][VEscondido] = 0;
		vStats[resid][VAlarme] = 0;
		vStats[resid][VRadio] = 0;
		vStats[resid][VTravas] = 0;
		vStats[resid][Modelo] = 400;
		vStats[resid][CarPosX] = INVALID_POS_X;
		vStats[resid][CarPosY] = INVALID_POS_Y;
		vStats[resid][CarPosZ] = INVALID_POS_Z;
		vStats[resid][CarPosAng] = 0.0;
		vStats[resid][Color1] = -1;
		vStats[resid][Color2] = -1;
    	vStats[resid][PrecoVenda] = 0;
    	vStats[resid][Dividas] = 0;
    	vStats[resid][Confiscado] = 0;
    	vStats[resid][Vendendo] = 0;
    	vStats[resid][PrecoVenda] = 0;
    	vStats[resid][VSeguro] = 0;
    	vStats[resid][Fume] = 0;
    	vStats[resid][Paintjob] = 0;
    	vStats[resid][Airbag] = 0;
    	for(new s = 0; s < 17; s++)
    	{
    	    vStats[resid][Tuning][s] = 0;
    	}
    	DestroyVehicle(resid);
		CreateVehicle(400, INVALID_POS_X, INVALID_POS_Y, INVALID_POS_Z, 0.0, -1, -1, -1);
    	return 1;
	}
	if(strcmp(cmd, "/venderveiculo",true) == 0) {
		new vehid = strval ( strtok ( cmdtext, idx ) ) , preco , string[128];
		if(GetQtVehicles(playerid) == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhum veículo, como poderá vender?");
		    return 1;
		}
		if(vehid == 0 || vehid > GetQtVehicles(playerid)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /venderveiculo [ID/do/veículo] [valor]");
			format(string,sizeof(string),"ID de 1 até %d",GetQtVehicles(playerid) + 1);
			SendClientMessage(playerid, COLOR_GRAY, string);
			return 1;
		}
		if(GetVehicles(playerid, vehid) == -1){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem mais um veículo desse ID...");
		    return 1;
		}
		preco = strval ( strtok ( cmdtext, idx ) );
		if(preco <= 0 || preco > MAX_VEHICLE_PRICE){
			format(string,sizeof(string),"Valor inválido: valores de $1,00 até $%d,00",MAX_VEHICLE_PRICE);
		    SendClientMessage(playerid, COLOR_GRAY, string);
		    return 1;
		}
		new veh = GetVehicles(playerid, vehid);
		if(vStats[veh][PrecoVenda] > 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse veículo já está a venda!");
		    return 1;
		}
  		SendClientMessage(playerid, COLOR_JUIZ, "Veículo colocado a venda!");
		vStats[veh][PrecoVenda] = preco;
		new nomeveiculo[128];
		nomeveiculo = GetVehicleModelName(GetVehicleModel(veh));
		format(string,sizeof(string),"%s colocou seu veículo de ID %d a venda, Modelo: %s | Preço: $%d,00 dólares",PlayerName(playerid),vehid,nomeveiculo,preco);
		SendClientMessageToAll(COLOR_WHITE, string);
		SendClientMessageToAll(COLOR_WHITE, "Para compra-lo use /comprarveiculo [id] [id do veículo]");
		return 1;
	}
	if(strcmp(cmd, "/tirarveiculoavenda", true) == 0) {
	    new vehid = strval ( strtok ( cmdtext, idx ) ) , string[128];
		if(GetQtVehicles(playerid) == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhum veículo, como poderá vender?");
		    return 1;
		}
		if(vehid == 0 || vehid > GetQtVehicles(playerid)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /tirarveiculoavenda [ID/do/veiculo]");
			format(string,sizeof(string),"ID de 1 até %d",GetQtVehicles(playerid) + 1);
			SendClientMessage(playerid, COLOR_GRAY, string);
			return 1;
		}
		if(GetVehicles(playerid, vehid) == -1){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem mais um veículo desse ID...");
		    return 1;
		}
		new veh = GetVehicles(playerid, vehid);
		if(vStats[veh][PrecoVenda] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse veículo não está à venda.");
		    return 1;
		}
		SendClientMessage(playerid, COLOR_JUIZ, "Veículo retirado de venda.");
		vStats[veh][PrecoVenda] = 0;
		new nomeveiculo[128];
		nomeveiculo = GetVehicleModelName(GetVehicleModel(veh));
		format(string, sizeof string, "%s tirou seu veículo de ID %d de venda, Modelo: %s.", PlayerName(playerid), vehid, nomeveiculo);
		SendClientMessageToAll(COLOR_WHITE, string);
		return 1;
	}
	if(strcmp(cmd, "/comprarveiculo", true) == 0) {
	    new tmp[128], plid, carid, string[128];
	    tmp = strtok(cmdtext,idx);
	    plid = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /comprarveiculo [id] [id do veículo]");
        tmp = strtok(cmdtext,idx);
	    carid = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /comprarveiculo [id] [id do veículo]");
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		    return 1;
		}
		if(GetVehicles(plid, carid) == -1){
		    SendClientMessage(playerid, COLOR_GRAY, "Veículo inexistente!");
		    return 1;
		}
		new veh = GetVehicles(plid, carid);
		if(vStats[veh][PrecoVenda] <= 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse veículo não está a venda!");
		    return 1;
		}
		if(GetPlayerServerMoney(playerid) < vStats[veh][PrecoVenda]){
		    format(string,sizeof(string),"Você não tem dinheiro, CUSTO: $%d,00 dólares",vStats[veh][PrecoVenda]);
		    SendClientMessage(playerid, COLOR_GRAY, string);
		    return 1;
		}
		format(string,sizeof(string),"[NOTICIAS] %s decidiu fechar negócio com %s, agora ele é o novo proprietário do veículo!",PlayerName(playerid),PlayerName(plid));
		SendClientMessageToAll(COLOR_WHITE, string);
		AddPlayerMoney(playerid,-vStats[veh][PrecoVenda],-1);
		pStats[plid][Banco] += vStats[veh][PrecoVenda];
		vStats[veh][PrecoVenda] = 0;
		MudarDono(veh,playerid);
		SendClientMessage(playerid, COLOR_WHITE, "Veículo adquirido!");
		if(compare(vStats[veh][VChave],PlayerName(plid))){
		    SendClientMessage(playerid, COLOR_WHITE, "A chave do veículo foi entregue a você!");
			set(vStats[veh][VChave],PlayerName(playerid));
		}
		else{
            SendClientMessage(playerid, COLOR_WHITE, "Esse jogador não está com a chave do veículo portanto você não conseguiu ela...");
		}
		return 1;
	}
	if(strcmp(cmd, "/tirargangue", true) == 0 && IsPlayerAdmin(playerid))
	{
		new tmp[128];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /tirargangue [id]");
		set(pStats[strval(tmp)][GangueNome], "NONE");
		SendClientMessage(playerid, COLOR_JUIZ, "Feito...");
		return 1;
	}
	if(strcmp(cmd, "/colocargangue", true) == 0 && IsPlayerAdmin(playerid))
	{
		new tmp[128];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /colocargangue [id] [gangue]");
		new plid = strval(tmp);
        tmp = strtok(cmdtext,idx);
        if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /colocargangue [id] [gangue]");
        if(GetGangID(tmp) == -1) return SendClientMessage(playerid, COLOR_GRAY, "Gangue inexistente.");
		set(pStats[plid][GangueNome], tmp);
		SendClientMessage(playerid, COLOR_JUIZ, "Feito...");
		return 1;
	}
	if(strcmp(cmd, "/addganglevel", true) == 0 && IsPlayerAdmin(playerid))
	{
	    new tmp[128];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /addganglevel [gangue] [quantidade]");
		if(GetGangID(tmp) == -1) return SendClientMessage(playerid, COLOR_GRAY, "Gangue inexistente.");
		new gangname[128];
		set(gangname, tmp);
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /addganglevel [gangue] [quantidade]");
		AddGangLevel(gangname, strval(tmp));
		SendClientMessage(playerid, COLOR_JUIZ, "Feito...");
		return 1;
	}
    if(strcmp(cmd, "/carregarcarro", true) == 0 && IsPlayerAdmin(playerid))
	{
	    if(!IsPlayerInAnyVehicle(playerid)) SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo.");
		CarregarCarro(GetPlayerVehicleID(playerid));
		SendClientMessage(playerid, COLOR_JUIZ, "Veículo carregado.");
		return 1;
	}
	if(strcmp(cmd, "/spauto", true) == 0 && IsPlayerAdmin(playerid))
	{
	    for(new a = 0; a < sizeof CarroAuto; a++)
	    {
	        SetVehicleToRespawn(CarroAuto[a]);
	    }
	    SendClientMessage(playerid, COLOR_JUIZ, "Feito...");
	    return 1;
	}
	if(strcmp(cmd, "/zerarlevel", true) == 0 && IsPlayerAdmin(playerid))
	{
        new tmp[128];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /zerarlevel [id]");
		pStats[strval(tmp)][XL] = 0;
		SendClientMessage(playerid, COLOR_JUIZ, "Feito...");
		return 1;
	}
	if(strcmp(cmd, "/zerarxpoints", true) == 0 && IsPlayerAdmin(playerid))
	{
	    new tmp[128];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /zerarxpoints [id]");
		pStats[strval(tmp)][Xpoints] = 0;
		SendClientMessage(playerid, COLOR_JUIZ, "Feito...");
		return 1;
	}
	if(strcmp(cmd, "/zerarrespeito", true) == 0 && IsPlayerAdmin(playerid))
	{
        new tmp[128];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /zerarrespeito [id]");
		pStats[strval(tmp)][Respeito] = 0;
		SendClientMessage(playerid, COLOR_JUIZ, "Feito...");
		return 1;
	}
	if(strcmp(cmd, "/resetarprecos",true) == 0 && IsPlayerAdmin(playerid)) return DebugInflacao();
	if(strcmp(cmd, "/anunciaralugueis", true) == 0 && IsPlayerAdmin(playerid)) return AnunciarAlugueis();
	if(strcmp(cmd, "/anunciarvendas", true) == 0 && IsPlayerAdmin(playerid)) return AnunciarVendas();
	if(strcmp(cmd, "/anunciarprocurados", true) == 0 && IsPlayerAdmin(playerid)) return AnunciarProcurados();
	if(strcmp(cmd, "/vendercarro", true) == 0) {
		if(pStats[playerid][Prof] == VENDEDOR_DE_CARROS || IsPlayerAdmin(playerid)){
			new tmp[128];
			new carid, plid, cor1, cor2;
			new valorveh;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAY, "USO: /vendercarro [modelo] [ID/Nome do comprador] [cor1] [cor2]");
				return 1;
			}
		    carid = strval(tmp);
    	    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "USO: /vendercarro [modelo] [ID/Nome do comprador] [cor1] [cor2]");
				return 1;
			}
			if(IsStringAName(tmp))
			{
				plid = IDName(tmp);
			}
			else
			{
				plid = strval(tmp);
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "USO: /vendercarro [modelo] [ID/Nome do comprador] [cor1] [cor2]");
				return 1;
			}
			cor1 = strval(tmp);
    	    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "USO: /vendercarro [modelo] [ID/Nome do comprador] [cor1] [cor2]");
				return 1;
			}
			cor2 = strval(tmp);
            if(GetQtVehicles(plid) >= MAX_PLAYER_VEHICLES){
				SendClientMessage(playerid, COLOR_GRAY, "Limite de veículos por jogador excedido pelo gamemode.");
            	return 1;
			}
			valorveh = GetVehiclePrice(carid);
			if(valorveh < 1){
				SendClientMessage(playerid, COLOR_GRAY, "Esse carro não está a venda!");
            	return 1;
			}
			if(GetVehiclePrice(carid) > GetPlayerMoney(plid)){
			    SendClientMessage(playerid, COLOR_GRAY, "Ele não tem dinheiro em mãos para efetuar o pagamento.");
			    SendClientMessage(playerid, COLOR_GRAY, "Consulte em /veiculos o preço para que possa repassar corretamente.");
			    return 1;
			}
			if(carid >= 400 && carid <= 611){
			    if(IsPlayerInAnyVehicle(playerid)){
			        if(IsPlayerConnected(plid)){
				       	SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, "Foi enviado ao outro jogador um convite para ver se ele aceita o carro.");
				       	GetVehiclePos(GetPlayerVehicleID(playerid),iX[plid],iY[plid],iZ[plid]);
				       	GetVehicleZAngle(GetPlayerVehicleID(playerid),iang[plid]);
				       	envconvite[plid] = playerid;
				       	ParaAceitar[plid] = ACEITAR_VEICULO;
				       	icarid[plid] = carid;
				       	icor1[plid] = cor1;
				       	icor2[plid] = cor2;
				       	new string[128];
						new nomeveiculo[128];
				       	nomeveiculo = GetVehicleModelName(icarid[playerid]);
				       	format(string,sizeof(string),"O Vendedor de Carros %s está lhe oferecendo um(a) %s por $%d.",PlayerName(playerid),nomeveiculo, GetVehiclePrice(carid));
				       	SendClientMessage(plid, COLOR_VENDEDOR_DE_CARROS,string);
				       	SendClientMessage(plid, COLOR_VENDEDOR_DE_CARROS, "Para aceitar digite /aceitar para recusar digite /recusar.");
				    	TimerCancel[plid] = SetTimerEx("Cancelar",60000,0,"d",plid);
						return 1;
					} else {
					   	SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado.");
						return 1;
					}
				} else {
				    SendClientMessage(playerid, COLOR_GRAY, "Você precisa estar em um veiculo para vender.");
					return 1;
				}
			} else {
				SendClientMessage(playerid, COLOR_GRAY, "ID fora do normal | ID's = 400-611");
				return 1;
			}
		}
		if(pStats[playerid][Prof] != VENDEDOR_DE_CARROS && !IsPlayerAdmin(playerid)){
			SendClientMessage(playerid, COLOR_GRAY, "Você não é Vendedor de Carros.");
			return 1;
		}
	}
	SendClientMessage(playerid,COLOR_GRAY,"Comando inexistente.");
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(vehicleid < AmountServerVehicles && vehicleid != TuneVehicle){
		new bool:notrespawn = false;
		for(new i = 0; i < MAX_SLOTS; i++)
		{
		    if(IsPlayerInVehicle(i, vehicleid))
		    {
				notrespawn = true;
		    }
		}
		if(!notrespawn)
		{
		    VehicleRespawn[vehicleid] = SetTimerEx("RespawnVehicle", 1800000, false, "d", vehicleid);
		}
		else
		{
		    KillTimer(VehicleRespawn[vehicleid]);
		}
	}
    if(RaceCheckpointStatus[playerid] == TERMINAL || FazendaInProgress[playerid] == 1 || EntregaLimo[playerid] == 1 || CheckpointStatus[playerid] == ENTREGANDO_PIZZA
	|| CheckpointStatus[playerid] == CARREGAMENTO || CarregamentoRoupas[playerid] == 1 || CheckpointStatus[playerid] == COLOCANDO_DROGAS || CheckpointStatus[playerid] == TRANSPORTANDO_DROGAS
	|| Pedras[playerid] == 1 || CheckpointStatus[playerid] == TRANSPORTANDO_DROGAS || NaoSair[playerid] == 1 || CheckpointStatus[playerid] == CARREGANDO_COMBUSTIVEL
	|| EntregandoEncomendas[playerid] == 1 || CheckpointStatus[playerid] == REBOCANDO)
	{
	    VeiculoTrabalho[playerid] = vehicleid;
		SendClientMessage(playerid, COLOR_WHITE, "Você tem 10 segundos para voltar ao veículo e completar o trabalho.");
	 	RetomarTrabalho[playerid] = SetTimerEx("TerminarCarregamento", 10000, 0, "d", playerid);
	    return 1;
	}
	if(PegouGrana[playerid] == 1){
	    VeiculoTrabalho[playerid] = vehicleid;
		SendClientMessage(playerid, COLOR_WHITE, "Você tem 30 segundos para deixar o dinheiro ou voltar ao veículo.");
	 	RetomarTrabalho[playerid] = SetTimerEx("TerminarCarregamento", 30000, 0, "d", playerid);
	}
	if(PlantandoDrogas[playerid] == 1){
		PlantandoDrogas[playerid] = 0;
		KillTimer(TempoPlantacao[playerid]);
		SetPlayerControl(playerid,1);
		SendClientMessage(playerid, COLOR_GRAY, "Sua plantação de drogas foi cancelada pois você saiu do veículo!");
		return 1;
	}
	printf("OnPlayerExitVehicle(%d, %d)", playerid, vehicleid);
	return 1;
}

stock AcharVeiculoPorPlaca(placa[])
{
	for(new v = 0; v < AmountServerVehicles + AmountPlayerVehicles; v++)
	{
	    if(!fexist(VehicleFile(v))) return -1;
	    if(compare(vStats[v][VPlaca], placa)) return v;
	}
	return -1;
}

public SetCar(modelid,Float:X,Float:Y,Float:Z,Float:ang,Cor1,Cor2,e)
{
	if(!IsPlayerConnected(e)) return false;
	for(new v = AmountServerVehicles; v < AmountServerVehicles + AmountPlayerVehicles; v++)
	{
	    if(compare(vStats[v][VDono], "NULL"))
	    {
	        DestroyVehicle(v);
	        break;
	    }
	}
	new resid = AddPlayerVehicle(modelid, X, Y, Z, ang, Cor1, Cor2, -1);
	new tmp[128], own[128], strkey[128];
	set(own,PlayerName(e));
	set(vStats[resid][VDono],own);
    set(tmp,VehicleFile(resid));
    new File:vehiclefile = fopen(tmp,io_write);
    fclose(vehiclefile);
    set(vStats[resid][VDono],own);
	new strplaca[128];
	format(strplaca,sizeof(strplaca),"RVL %d",resid);
	set(vStats[resid][VPlaca],strplaca);
	set(vStats[resid][VChave],own);
	vStats[resid][VEscondido] = 0;
	vStats[resid][VAlarme] = 0;
	vStats[resid][VRadio] = 0;
	vStats[resid][VTravas] = 0;
	vStats[resid][Modelo] = modelid;
	vStats[resid][CarPosX] = X;
	vStats[resid][CarPosY] = Y;
	vStats[resid][CarPosZ] = Z;
	vStats[resid][CarPosAng] = ang;
	vStats[resid][Color1] = Cor1;
	vStats[resid][Color2] = Cor2;
    vStats[resid][PrecoVenda] = 0;
    vStats[resid][Dividas] = 0;
    vStats[resid][Confiscado] = 0;
    vStats[resid][Vendendo] = 0;
    vStats[resid][PrecoVenda] = 0;
    vStats[resid][VSeguro] = 0;
    vStats[resid][Fume] = 0;
    vStats[resid][Paintjob] = 0;
    vStats[resid][Airbag] = 0;
    for(new s = 0; s < 17; s++)
    {
        vStats[resid][Tuning][s] = 0;
    }
	switch(modelid)
	{
		case 481,509,510,594:
		{
  			vStats[resid][Combustivel] = -1;
		}
		default:
	    {
			new tanque = GetVehicleTanque(GetVehicleModel(resid));
     		vStats[resid][Combustivel] = tanque;
		}
	}
	SaveCarPos(resid,X,Y,Z,ang);
	AmountPlayerVehicles++;
	format(strkey,sizeof(strkey),"Esse é seu veículo de ID %d",GetPlayerVehicleKeyID(e, resid));
	SendClientMessage(e, COLOR_WHITE, strkey);
	return true;
}
public NaoUsarCard(playerid,playerid2)
{

    new money = GetPlayerServerMoney(playerid);
	if(money < 25){
	    SendClientMessage(playerid,COLOR_GRAY,"A passagem custa $25,00 dólares.");
	    RemovePlayerFromVehicle(playerid);
	    PropostaCard[playerid] = 0;
	    KillTimer(TimerCard[playerid]);
	}
	if(money > 24){
 		SendClientMessage(playerid,COLOR_GREEN,"Você não usou o Virtual Card e a passagem paga. $25,00");
	    SendClientMessage(playerid2,COLOR_GREEN,"O passageiro não usou o Virtual Card, você recebeu $25,00");
	    PlayerPay(playerid,playerid2,25);
	    PropostaCard[playerid] = 0;
	    KillTimer(TimerCard[playerid]);
	}
}
stock OnPlayerEnterVehicleAsPassenger(playerid,vehicleid)
{
	if(IsBus(vehicleid))
	{
	    for(new i; i<MAX_SLOTS; i++)
	    {
	        if(IsPlayerInVehicle(i,vehicleid) && GetPlayerState(i)== PLAYER_STATE_DRIVER && pStats[i][Prof] == MOTORISTA_DE_ONIBUS)
	        {
	            if(pStats[playerid][VirtualCard] > 0){
	                SendClientMessage(playerid, COLOR_WHITE, "Você entrou no ônibus, deseja usar o Virtual Card?");
	                SendClientMessage(playerid, COLOR_WHITE, "Para usar digite /usarcard e para não usar digite /naousarcard");
	                SendClientMessage(playerid, COLOR_LIGHT_RED, "OBS: 15 segundos para responder...");
					SendClientMessage(i, COLOR_WHITE, "Um jogador entrou, foi oferecido a ele uma proposta para usar o Virtual Card que ele possui!");
					PropostaCard[playerid] = 1;
					TimerCard[playerid] = SetTimerEx("NaoUsarCard",15000,false,"dd",playerid,i);
					return 1;
				}
				new money = GetPlayerServerMoney(playerid);
				if(money < 25){
				    SendClientMessage(playerid,COLOR_GRAY,"A passagem custa $25,00 dólares.");
				    RemovePlayerFromVehicle(playerid);
				    return 1;
				}
				if(money > 24){
				    SendClientMessage(playerid,COLOR_GREEN,"Passagem paga. $25,00 dólares");
				    SendClientMessage(i,COLOR_GREEN,"Você recebeu $25,00 dólares pela passagem do novo passageiro.");
				    PlayerPay(playerid,i,25);
				    return 1;
				}
			}
		}
	}
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
    new string[128];
	SetPlayerControl(playerid, true);
	if(GetPlayerMenu(playerid) == mCurrentTune)
	{
	    printf("%s esta confirmando comprar o componente %d para o veiculo %d (modelo = %d)", PlayerName(playerid), RowComponents[row], GetPlayerVehicleID(playerid), GetVehicleModel(GetPlayerVehicleID(playerid)));
		if(RowComponents[row] == 500)
		{
		    DestroyMenuEx(mCurrentTune);
	    	mCurrentTune = CreateMenu("Componentes", 2, 2, 150, 100, 20);
		    new w = 0, count = 0;
		    for(new t = 0; t < sizeof Components; t++)
		    {
		        if(Components[t][tuneSlot] == WHEELS)
		        {
					w++;
					if(w > 10)
					{
				    	AddMenuItem(mCurrentTune, 0, Components[t][tuneName]);
				    	AddMenuItem(mCurrentTune, 1, " ");
				    	RowComponents[count++] = t + 1000;
					}
				}
		    }
		    AddMenuItem(mCurrentTune, 0, "Anterior");
		    AddMenuItem(mCurrentTune, 1, "<-");
		    RowComponents[count++] = 499;
		    ShowMenuForPlayer(mCurrentTune, playerid);
		    SetPlayerControl(playerid, false);
		}
		else if(RowComponents[row] == 499)
		{
		    DestroyMenuEx(mCurrentTune);
	    	mCurrentTune = CreateMenu("Componentes", 2, 2, 150, 100, 20);
		    new w = 0, count = 0;
		    for(new t = 0; t < sizeof Components; t++)
		    {
		        if(Components[t][tuneSlot] == WHEELS)
		        {
		            AddMenuItem(mCurrentTune, 0, Components[t][tuneName]);
		            AddMenuItem(mCurrentTune, 1, " ");
		            RowComponents[count++] = t + 1000;
		            w++;
		            if(w >= 10)
		            {
		                AddMenuItem(mCurrentTune, 0, "Proximo");
		                AddMenuItem(mCurrentTune, 1, "->");
		                RowComponents[count++] = 500;
		                break;
		            }
		        }
		    }
		    ShowMenuForPlayer(mCurrentTune, playerid);
		    SetPlayerControl(playerid, false);
		}
		else
		{
			if(!IsPaintJob)
			{
				ShowTuningCostMenu(playerid, RowComponents[row]);
			}
			else
			{
			    ShowPaintjobCostMenu(playerid, RowComponents[row]);
			}
		}
		return 1;
	}
	if(GetPlayerMenu(playerid) == mCusto)
	{
	    switch(row)
	    {
	        case 0:
	        {
	            printf("%s confirmou comprar o componente %d para o veiculo %d (modelo = %d)", PlayerName(playerid), TuneComponent, TuneVehicle, GetVehicleModel(TuneVehicle));
	            if(!IsPaintJob)
				{
					if(vStats[TuneVehicle][Tuning][Components[TuneComponent - 1000][tuneSlot]] == TuneComponent)
					{
					    SendClientMessage(playerid, COLOR_GRAY, "Esse veículo já possui esse componente.");
					    ShowTuningMainMenu(playerid);
				        return 1;
					}
				    if(GetPlayerMoney(playerid) < Components[TuneComponent - 1000][tuneValue])
				    {
				        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro.");
				        ShowTuningMainMenu(playerid);
				        return 1;
				    }
				    AddVehicleComponent(TuneVehicle, TuneComponent);
				    SaveComponent(TuneVehicle, TuneComponent);
				    AddPlayerMoney(playerid, -Components[TuneComponent - 1000][tuneValue], -1);
				    ShowTuningMainMenu(playerid);
	            	SetPlayerControl(playerid, false);
	            	SendClientMessage(playerid, COLOR_MECANICO, "Componente adicionado e salvo.");
				    return 1;
				}
				else
				{
				    if(GetPlayerMoney(playerid) < 1000)
				    {
				        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro.");
				        ShowTuningMainMenu(playerid);
				        return 1;
				    }
				    IsPaintJob = false;
				    ChangeVehiclePaintjob(TuneVehicle, TuneComponent);
				    SavePaintjob(TuneVehicle, TuneComponent);
				    AddPlayerMoney(playerid, -1000, -1);
				    ShowTuningMainMenu(playerid);
	            	SetPlayerControl(playerid, false);
				    return 1;
				}
	        }
	        case 1:
	        {
	            printf("%s cancelou comprar o componente %d para o veiculo %d (modelo = %d)", PlayerName(playerid), TuneComponent, GetPlayerVehicleID(playerid), GetVehicleModel(TuneVehicle));
				if(!IsPaintJob)
				{
	            	RemoveVehicleComponent(TuneVehicle, TuneComponent);
	            	ShowTuningMainMenu(playerid);
	            	SetPlayerControl(playerid, false);
	            	CarregarCarro(TuneVehicle);
	            	return 1;
				}
				else
				{
				    IsPaintJob = false;
				    RemoveVehiclePaintjob(TuneVehicle);
	            	ShowTuningMainMenu(playerid);
	            	SetPlayerControl(playerid, false);
				    CarregarCarro(TuneVehicle);
				    return 1;
				}
	        }
	    }
	}
	if(GetPlayerMenu(playerid) == mTuning)
	{
	    if(Tunes[row] == -1 || TuneVehicle == -1)
	    {
	        StopPlayerTune(playerid);
			return 1;
	    }
	    DestroyMenuEx(mCurrentTune);
	    mCurrentTune = CreateMenu("Componentes", 2, 2, 150, 100, 20);
	    if(!IsValidMenu(mCurrentTune))
	    {
	        StopPlayerTune(playerid);
	        SendClientMessage(playerid, COLOR_GRAY, "Ocorreu um erro na exibição do menu, tente novamente.");
	        return 1;
	    }
		new count = 0;
		new slot = Tunes[row];
		if(slot == WHEELS)
		{
		    new w = 0;
		    for(new t = 0; t < sizeof Components; t++)
		    {
		        if(Components[t][tuneSlot] == slot)
		        {
		            AddMenuItem(mCurrentTune, 0, Components[t][tuneName]);
		            AddMenuItem(mCurrentTune, 1, " ");
		            RowComponents[count++] = t + 1000;
		            w++;
		            if(w >= 10)
		            {
		                AddMenuItem(mCurrentTune, 0, "Proximo");
		                AddMenuItem(mCurrentTune, 1, "->");
		                RowComponents[count++] = 500;
		                break;
		            }
		        }
		    }
		}
		else if(slot == NITROS || slot == STEREO || slot == HYDRAULICS)
		{
			for(new t = 0; t < sizeof Components; t++)
			{
		    	if(Components[t][tuneSlot] == slot)
		    	{
		            AddMenuItem(mCurrentTune, 0, Components[t][tuneName]);
		            RowComponents[count++] = t + 1000;
		    	}
			}
			IsPaintJob = false;
		}
		else if(slot == PAINTJOBS)
		{
			AddMenuItem(mCurrentTune, 0, "Pintura 1");
			RowComponents[count++] = 0;
			AddMenuItem(mCurrentTune, 0, "Pintura 2");
			RowComponents[count++] = 1;
			AddMenuItem(mCurrentTune, 0, "Pintura 3");
			RowComponents[count++] = 2;
		    IsPaintJob = true;
		}
		else
		{
		    new modelid = GetVehicleModel(TuneVehicle);
		    for(new m = 0; m < sizeof CarMods; m++)
		    {
				if(CarMods[m][0] == modelid)
				{
				    for(new t = 1; t < 15; t++)
				    {
				        new comp = CarMods[m][t];
				        if(comp < 1000 || comp > 1193) break;
				        if(Components[comp - 1000][tuneSlot] == slot)
				        {
				        	new bool:issimilar = false;
            				for(new c = 0; c < count; c++)
	           				{
								if(!issimilar)
								{
	              					if(RowComponents[c] == comp)
		                			{
                   						issimilar = true;
			            	    	}
	                				else
			            	    	{
                   						for(new s = 0; s < sizeof SimilarComponents; s++)
	        							{
 							        		if((SimilarComponents[s][0] == comp || SimilarComponents[s][1] == comp) && (SimilarComponents[s][0] == RowComponents[c] || SimilarComponents[s][1] == RowComponents[c]))
 							        		{
 							        		    issimilar = true;
 							        		}
				        				}
              						}
								}
				        	}
							if(!issimilar)
							{
							    AddMenuItem(mCurrentTune, 0, Components[comp - 1000][tuneName]);
		           	 			RowComponents[count++] = comp;
							}
						}
				    }
				    break;
				}
		    }
		    IsPaintJob = false;
		}
		for(new i = 0; i < 20; i++)
		{
		    printf("RowComponents[%d] = %d", i, RowComponents[i]);
		}
		if(count < 1)
		{
		    SetPlayerControl(playerid, true);
	        SendClientMessage(playerid, COLOR_GRAY, "Ocorreu um erro na exibição do menu, tente novamente.");
	        return 1;
		}
		ShowMenuForPlayer(mCurrentTune, playerid);
		SetPlayerControl(playerid, false);
		return 1;
	}
	if(GetPlayerMenu(playerid) == Seguros && IsValidMenu(Seguros))
	{
	    switch(row)
	    {
	    	case 0:
	    	{
				if(GetPlayerServerMoney(playerid) < 1000)
				{
				    SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro. Custo: $1000,00 dólares.");
				    return 1;
				}
				if(pStats[playerid][Seguro] == 1)
				{
				    SendClientMessage(playerid, COLOR_GRAY, "Você já possui seguro de vida.");
				    return 1;
				}
				AddPlayerMoney(playerid, -1000, -1);
				pStats[playerid][Seguro] = 1;
	    	    SendClientMessage(playerid, COLOR_PINK, "Seguro de vida adquirido por $1000,00 dólares.");
	    	    return 1;
	    	}
	    	case 1:
	    	{
				if(GetPlayerServerMoney(playerid) < 3000)
				{
				    SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro. Custo: $3000,00 dólares.");
				    return 1;
				}
	    	    AssegurandoVeiculo[playerid] = 1;
	    	    SendClientMessage(playerid, COLOR_PINK, "Digite o ID do veículo à ser assegurado:");
	    	    return 1;
	    	}
	    	case 2:
	    	{
				SetPlayerControl(playerid,0);
			    DestroyMenuEx(CasasSeguro);
	        	CasasSeguro = CreateMenu("Seguro Casa",2,2,150,100,20);
	        	SetMenuColumnHeader(CasasSeguro,0,"Casa");
	    		SetMenuColumnHeader(CasasSeguro,1,"Local");
	        	for(new p = 1; p < GetQtHouses(playerid) + 1; p++)
	        	{
	        	  	new h = GetHouses(playerid, p);
					if(h != -1){
		        		format(string,sizeof(string),"Casa: %d",GetPHouseKeyID(playerid,GetHouses(playerid, p)));
						AddMenuItem(CasasSeguro, 0, string);
				    	new zone[28];
						GetZone(GetHouses(playerid, p), zone, 28);
						AddMenuItem(CasasSeguro, 1, zone);
					}
	        	}
				ShowMenuForPlayer(CasasSeguro,playerid);
				SetPlayerControl(playerid,0);
				return 1;
	    	}
	    	case 3:
	    	{
	    	    SetPlayerControl(playerid, 1);
	    	    return 1;
	    	}
		}
	}
	if(GetPlayerMenu(playerid) == CasasSeguro && IsValidMenu(CasasSeguro)){
	    switch(row)
	    {
			default:
			{
		      	new casa = GetHouses(playerid, GetPHouseKeyID(playerid,row));
			    DestroyMenuEx(Casas);
		   	    if(GetPlayerServerMoney(playerid) < 1000){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro. Custo: $2000,00 dólares.");
			        return 1;
			    }
			    if(pckStats[casa][SeguroDaCasa] == 1)
			    {
			        SendClientMessage(playerid, COLOR_GRAY, "Você já possui seguro de imóvel.");
			        return 1;
			    }
		      	AddPlayerMoney(playerid, -1000, -1);
				pckStats[casa][SeguroDaCasa] = 1;
		   	    SendClientMessage(playerid, COLOR_PINK, "Seguro de imóvel adquirido por $1000,00 dólares.");
		   	    return 1;
			}
 		}
	}
    if(GetPlayerMenu(playerid) == Abastecendo && IsValidMenu(Abastecendo)){
        switch(row){
            case 0:
            {
            	if(compare(GetVehicleCombName(GetVehicleModel(GetPlayerVehicleID(playerid))),"GASOLINA")){
					AbastecendoVeiculo[playerid] = 1;
				    SendClientMessage(playerid, COLOR_BLUE_PLUS, "[POSTO] Olá Sr. Por favor me diga quantos litros deseja colocar no veículo");
				    SendClientMessage(playerid, COLOR_BLUE_PLUS, "[POSTO] Digite um número ou apenas 'Complete'.");
				} else {
			        SendClientMessage(playerid, COLOR_GRAY, "[POSTO] Esse carro não aceita esse combustível escolha o correto.");
			        SetPlayerControl(playerid,1);
					return 1;
				}
			}
			case 1:
			{
            	if(compare(GetVehicleCombName(GetVehicleModel(GetPlayerVehicleID(playerid))),"ADITIVADA")){
					AbastecendoVeiculo[playerid] = 2;
				    SendClientMessage(playerid, COLOR_BLUE_PLUS, "[POSTO] Olá Sr. Por favor me diga quantos litros deseja colocar no veículo");
				    SendClientMessage(playerid, COLOR_BLUE_PLUS, "[POSTO] Digite um número ou apenas 'Complete'.");
				} else {
			        SendClientMessage(playerid, COLOR_GRAY, "[POSTO] Esse carro não aceita esse combustível escolha o correto.");
			        SetPlayerControl(playerid,1);
					return 1;
				}
			}
			case 2:
			{
			   	if(compare(GetVehicleCombName(GetVehicleModel(GetPlayerVehicleID(playerid))),"DIESEL")){
					AbastecendoVeiculo[playerid] = 3;
				    SendClientMessage(playerid, COLOR_BLUE_PLUS, "[POSTO] Olá Sr. Por favor me diga quantos litros deseja colocar no veículo");
				    SendClientMessage(playerid, COLOR_BLUE_PLUS, "[POSTO] Digite um número ou apenas 'Complete'.");
				} else {
			        SendClientMessage(playerid, COLOR_GRAY, "[POSTO] Esse carro não aceita esse combustível escolha o correto.");
			        SetPlayerControl(playerid,1);
					return 1;
				}
			}
			case 3:
			{
		    	if(compare(GetVehicleCombName(GetVehicleModel(GetPlayerVehicleID(playerid))),"ALCOOL")){
					AbastecendoVeiculo[playerid] = 4;
				    SendClientMessage(playerid, COLOR_BLUE_PLUS, "[POSTO] Olá Sr. Por favor me diga quantos litros deseja colocar no veículo");
				    SendClientMessage(playerid, COLOR_BLUE_PLUS, "[POSTO] Digite um número ou apenas 'Complete'.");
				} else {
			        SendClientMessage(playerid, COLOR_GRAY, "[POSTO] Esse carro não aceita esse combustível escolha o correto.");
			        SetPlayerControl(playerid,1);
					return 1;
				}
			}
			case 4:
			{
		       	if(compare(GetVehicleCombName(GetVehicleModel(GetPlayerVehicleID(playerid))),"QUEROSENE")){
					AbastecendoVeiculo[playerid] = 5;
				    SendClientMessage(playerid, COLOR_BLUE_PLUS, "[POSTO] Olá Sr. Por favor me diga quantos litros deseja colocar no veículo");
				    SendClientMessage(playerid, COLOR_BLUE_PLUS, "[POSTO] Digite um número ou apenas 'Complete'.");
				} else {
			        SendClientMessage(playerid, COLOR_GRAY, "[POSTO] Esse carro não aceita esse combustível escolha o correto.");
			        SetPlayerControl(playerid,1);
					return 1;
				}
			}
		}
	}
	if(GetPlayerMenu(playerid) == CreditosCartao && IsValidMenu(CreditosCartao)){
	    switch(row){
	        case 0:
			{
			    if(GetPlayerServerMoney(playerid) < 25) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro! Custo: $25,00 dólares...");
			    if(pStats[playerid][CartaoTelefonico] >= 20) return SendClientMessage(playerid, COLOR_GRAY, "Você pode ter no máximo 20 créditos em seu cartão telefônico!");
				pStats[playerid][CartaoTelefonico]++;
				format(string,sizeof(string),"Você adquiriu 1 crédito ao seu cartão telefônico, total: %d",pStats[playerid][CartaoTelefonico]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				AddPlayerMoney(playerid,-25,-1);
	            return 1;
			}
			case 1:
			{
			    if(GetPlayerServerMoney(playerid) < 125) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro! Custo: $125,00 dólares...");
				if(pStats[playerid][CartaoTelefonico] >= 16) return SendClientMessage(playerid, COLOR_GRAY, "Você pode ter no máximo 20 créditos em seu cartão telefônico!");
				pStats[playerid][CartaoTelefonico]+=5;
				format(string,sizeof(string),"Você adquiriu 5 créditos ao seu cartão telefônico, total: %d",pStats[playerid][CartaoTelefonico]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				AddPlayerMoney(playerid,-125,-1);
	            return 1;
			}
			case 2:
			{
			    if(GetPlayerServerMoney(playerid) < 250) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro! Custo: $250,00 dólares...");
			 	if(pStats[playerid][CartaoTelefonico] >= 11) return SendClientMessage(playerid, COLOR_GRAY, "Você pode ter no máximo 20 créditos em seu cartão telefônico!");
				pStats[playerid][CartaoTelefonico]+=10;
				format(string,sizeof(string),"Você adquiriu 10 créditos ao seu cartão telefônico, total: %d",pStats[playerid][CartaoTelefonico]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				AddPlayerMoney(playerid,-250,-1);
	            return 1;
			}
			case 3:
			{
			    if(GetPlayerServerMoney(playerid) < 500) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro! Custo: $500,00 dólares...");
				if(pStats[playerid][CartaoTelefonico] >= 1) return SendClientMessage(playerid, COLOR_GRAY, "Você pode ter no máximo 20 créditos em seu cartão telefônico!");
				pStats[playerid][CartaoTelefonico]=20;
				format(string,sizeof(string),"Você adquiriu 20 créditos ao seu cartão telefônico, total: %d",pStats[playerid][CartaoTelefonico]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				AddPlayerMoney(playerid,-500,-1);
	            return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == mDonuts && IsValidMenu(mDonuts)){
	    if(row >= sizeof Donuts)
	    {
	        return 1;
	    }
	    else
	    {
			if(GetPlayerServerMoney(playerid) < Donuts[row][DonutValue])
			{
			    format(string, sizeof string, "[DONUTS] Sem $%d,00 dólares = Sem Donut de %s.", Donuts[row][DonutValue], Donuts[row][DonutName]);
				SendClientMessage(playerid, COLOR_WHEAT, string);
				return 1;
			}
			format(string, sizeof string, "[DONUTS] Aqui está seu Donut de %s, bom apetite.", Donuts[row][DonutName]);
			SendClientMessage(playerid, COLOR_WHEAT, string);
			SendClientMessage(playerid, COLOR_WHEAT, "[DONUTS] (evite ficar próximo à fogo, para não queimar a rosca -.-)");
            ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			AddPlayerHealth(playerid, random(8) + 10);
			SendClientMessage(playerid, COLOR_WHITE, "Sua fome foi diminuída...");
			pStats[playerid][Fome] -= 5;
			if(pStats[playerid][Fome] < 0)
			{
			    pStats[playerid][Fome] = 0;
			}
			AddPlayerMoney(playerid, -Donuts[row][DonutValue], -1);
			return 1;
	    }
	}
	if(GetPlayerMenu(playerid) == BurgerShot && IsValidMenu(BurgerShot)){
	 	switch(row)
	 	{
	  		case 0:
	  		{
				if(GetPlayerServerMoney(playerid) < 22)	{
					SendClientMessage(playerid, COLOR_WHEAT, "[BURGER-SHOT] Você não tem dinheiro para comprar esse sanduíche.");
					return 1;
				}
				AddPlayerMoney(playerid, -22, -1);
				AddPlayerHealth(playerid, random(8) + 10);
	  			SendClientMessage(playerid, COLOR_WHEAT, "[BURGER-SHOT] Obrigado. Espero que goste do CheeseBurger, volte sempre.");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				TogglePlayerControllable(playerid, 1);
				TextDrawHideForPlayer(playerid,TDDriveThru[playerid]);
				SetTimerEx("DriveThruLivre", 7000, 0, "d", playerid);
				return 1;
			}
			case 1:
	  		{
				if(GetPlayerServerMoney(playerid) < 30)	{
					SendClientMessage(playerid, COLOR_WHEAT, "[BURGER-SHOT] Você não tem dinheiro para comprar esse sanduíche.");
					return 1;
				}
				AddPlayerMoney(playerid, -30, -1);
				AddPlayerHealth(playerid, random(8) + 10);
	  			SendClientMessage(playerid, COLOR_WHEAT, "[BURGER-SHOT] Obrigado por comprar o Double Cheese. Tenha um bom-dia.");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				TogglePlayerControllable(playerid, 1);
				TextDrawHideForPlayer(playerid,TDDriveThru[playerid]);
				SetTimerEx("DriveThruLivre", 7000, 0, "d", playerid);
				return 1;
 			}
			case 2:
	  		{
				if(GetPlayerServerMoney(playerid) < 44)	{
					SendClientMessage(playerid, COLOR_WHEAT, "[BURGER-SHOT] Você não tem dinheiro para comprar esse sanduíche.");
					return 1;
				}
				AddPlayerMoney(playerid, -44, -1);
				AddPlayerHealth(playerid, random(8) + 15);
	  			SendClientMessage(playerid, COLOR_WHEAT, "[BURGER-SHOT] Seu BigMac Sr, tenha um boa refeição, volte sempre.");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				TogglePlayerControllable(playerid, 1);
   				TextDrawHideForPlayer(playerid,TDDriveThru[playerid]);
				SetTimerEx("DriveThruLivre", 7000, 0, "d", playerid);
				return 1;
			}
			case 3:
			{
				if(GetPlayerServerMoney(playerid) < 38)	{
					SendClientMessage(playerid, COLOR_WHEAT, "[BURGER-SHOT] Você não tem dinheiro para comprar esse sanduíche.");
					return 1;
				}
				AddPlayerMoney(playerid, -38, -1);
				AddPlayerHealth(playerid, random(8) + 15);
	  			SendClientMessage(playerid, COLOR_WHEAT, "[BURGER-SHOT] McNifico Bacon em mãos. Aproveite enquanto ele está quente. Bom-Dia.");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				TogglePlayerControllable(playerid, 1);
				TextDrawHideForPlayer(playerid,TDDriveThru[playerid]);
				SetTimerEx("DriveThruLivre", 7000, 0, "d", playerid);
				return 1;
			}
			case 4:
			{
				if(GetPlayerServerMoney(playerid) < 50)	{
					SendClientMessage(playerid, COLOR_WHEAT, "[BURGER-SHOT] Você não tem dinheiro para comprar esse sanduíche.");
					return 1;
				}
				AddPlayerMoney(playerid, -50, -1);
				AddPlayerHealth(playerid, random(8) + 20);
	  			SendClientMessage(playerid, COLOR_WHEAT, "[BURGER-SHOT] Staker com Bacon Triplo saindo. Desculpe a demora, bom apetite.");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				TogglePlayerControllable(playerid, 1);
				TextDrawHideForPlayer(playerid,TDDriveThru[playerid]);
				SetTimerEx("DriveThruLivre", 7000, 0, "d", playerid);
				return 1;
			}
			case 5:
			{
				TextDrawHideForPlayer(playerid,TDDriveThru[playerid]);
		        TogglePlayerControllable(playerid, 1);
				SetTimerEx("DriveThruLivre", 7000, 0, "i", playerid);
			    return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == CluckinBell && IsValidMenu(CluckinBell)){
	 	switch(row)
	 	{
	  		case 0:
	  		{
				if(GetPlayerServerMoney(playerid) < 33)	{
					SendClientMessage(playerid, COLOR_WHEAT, "[CLUCKIN-BELL] Você não tem dinheiro para comprar esse lanche.");
					return 1;
				}
				AddPlayerMoney(playerid, -33, -1);
				AddPlayerHealth(playerid, random(8) + 10);
	  			SendClientMessage(playerid, COLOR_WHEAT, "[CLUCKIN-BELL] Palitos de Frango fritos saindo... Tenha um bom-dia Sr, volte sempre.");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				TogglePlayerControllable(playerid, 1);
				TextDrawHideForPlayer(playerid,TDDriveThru[playerid]);
				SetTimerEx("DriveThruLivre", 7000, 0, "d", playerid);
				return 1;
			}
	  		case 1:
	  		{
				if(GetPlayerServerMoney(playerid) < 40)	{
					SendClientMessage(playerid, COLOR_WHEAT, "[CLUCKIN-BELL] Você não tem dinheiro para comprar esse lanche.");
					return 1;
				}
				AddPlayerMoney(playerid, -40, -1);
				AddPlayerHealth(playerid, random(8) + 15);
	  			SendClientMessage(playerid, COLOR_WHEAT, "[CLUCKIN-BELL] Coxas gordurosas e salientes entregue. Faça um bom lanche e não esqueça, Frango é na Cluckin Bell.");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				TogglePlayerControllable(playerid, 1);
		       	TextDrawHideForPlayer(playerid,TDDriveThru[playerid]);
				SetTimerEx("DriveThruLivre", 7000, 0, "d", playerid);
				return 1;
			}
	  		case 2:
	  		{
				if(GetPlayerServerMoney(playerid) < 35)	{
					SendClientMessage(playerid, COLOR_WHEAT, "[CLUCKIN-BELL] Você não tem dinheiro para comprar esse lanche.");
					return 1;
				}
				AddPlayerMoney(playerid, -35, -1);
				AddPlayerHealth(playerid, random(8) + 10);
	  			SendClientMessage(playerid, COLOR_WHEAT, "[CLUCKIN-BELL] Obrigado, se delicie com seu sanduíche de frango. Até...");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				TogglePlayerControllable(playerid, 1);
		       	TextDrawHideForPlayer(playerid,TDDriveThru[playerid]);
				SetTimerEx("DriveThruLivre", 7000, 0, "d", playerid);
				return 1;
			}
	  		case 3:
	  		{
				if(GetPlayerServerMoney(playerid) < 19)	{
					SendClientMessage(playerid, COLOR_WHEAT, "[CLUCKIN-BELL] Você não tem dinheiro para comprar esse lanche.");
					return 1;
				}
				AddPlayerMoney(playerid, -19, -1);
				AddPlayerHealth(playerid, random(8) + 5);
	  			SendClientMessage(playerid, COLOR_WHEAT, "[CLUCKIN-BELL] Nosso prato mais saudável, aliás aqui só tem gordura, bom apetite.");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				TogglePlayerControllable(playerid, 1);
			   	TextDrawHideForPlayer(playerid,TDDriveThru[playerid]);
				SetTimerEx("DriveThruLivre", 7000, 0, "d", playerid);
				return 1;
			}
			case 4:
			{
			   	TextDrawHideForPlayer(playerid,TDDriveThru[playerid]);
		        TogglePlayerControllable(playerid, 1);
				SetTimerEx("DriveThruLivre", 7000, 0, "i", playerid);
			    return 1;
			}
	    }
	}
	if(GetPlayerMenu(playerid) == mLunchs && IsValidMenu(mLunchs)){
	    if(row >= sizeof Lunchs)
	    {
	        return 1;
		}
		else
		{
  			if(GetPlayerServerMoney(playerid) < Lunchs[row][LunchValue])
			{
		    	format(string, sizeof string, "Você não tem dinheiro, Custo: $%d,00 dólares.", Lunchs[row][LunchValue]);
				SendClientMessage(playerid, COLOR_LIGHT_GREEN, string);
				return 1;
			}
			format(string, sizeof string, "HMMM! Você comeu um %s pelo custo de $%d,00 dólares, Bom Lanche!", Lunchs[row][LunchName], Lunchs[row][LunchValue]);
			SendClientMessage(playerid, COLOR_LIGHT_GREEN, string);
		    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			AddPlayerHealth(playerid, random(8) + 10);
			SendClientMessage(playerid, COLOR_WHITE, "Sua fome foi diminuída...");
			pStats[playerid][Fome] -= 5;
			if(pStats[playerid][Fome] < 0)
			{
			    pStats[playerid][Fome] = 0;
			}
			AddPlayerMoney(playerid, -Lunchs[row][LunchValue], -1);
		    return 1;
		}
	}
	if(GetPlayerMenu(playerid) == BuyCar && IsValidMenu(BuyCar)){
	    switch(row){
	        case 0:
	        {
	            ComprarCarro(playerid);
	            return 1;
	        }
			case 1:
			{
			    RemovePlayerFromVehicle(playerid);
			    return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == Weapons && IsValidMenu(Weapons)){
	    switch(row){
			case 0:
			{
			    ShowMenuForPlayer(WSlot2,playerid);
			    SetPlayerControl(playerid, false);
			    return 1;
			}
			case 1:
			{
			    ShowMenuForPlayer(WSlot3,playerid);
			    SetPlayerControl(playerid, false);
			    return 1;
			}
			case 2:
			{
			    ShowMenuForPlayer(WSlot4,playerid);
			    SetPlayerControl(playerid, false);
			    return 1;
			}
			case 3:
			{
				ShowMenuForPlayer(WSlot5,playerid);
			    SetPlayerControl(playerid, false);
			    return 1;
			}
			case 4:
			{
				ShowMenuForPlayer(WSlot6,playerid);
			    SetPlayerControl(playerid, false);
			    return 1;
			}
			case 5:
			{
				ShowMenuForPlayer(WColete,playerid);
			    SetPlayerControl(playerid, false);
			    return 1;
			}
			case 6:
			{
				ShowMenuForPlayer(WCamuflagem,playerid);
			    SetPlayerControl(playerid, false);
			    return 1;
			}
			case 7:
			{
				ShowMenuForPlayer(WClockBomb,playerid);
			    SetPlayerControl(playerid, false);
			    return 1;
			}
			case 8:
			{
				ShowMenuForPlayer(WFlash,playerid);
			    SetPlayerControl(playerid, false);
			    return 1;
			}
			case 9:
			{
				ShowMenuForPlayer(WRocket,playerid);
			    SetPlayerControl(playerid, false);
			    return 1;
			}
			case 10:
			{
			    SetCameraBehindPlayer(playerid);
			    TraficandoArmas[playerid] = 0;
				return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == WSlot2 && IsValidMenu(WSlot2)){
	    switch(row){
			case 0:
			{
				SendWeaponForPlayer(playerid,24);
				ShowMenuForPlayer(WSlot2,playerid);
				SetPlayerControl(playerid, false);
				return 1;
			}
			case 1:
			{
				SendWeaponForPlayer(playerid,23);
				ShowMenuForPlayer(WSlot2,playerid);
				SetPlayerControl(playerid, false);
				return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == WSlot3 && IsValidMenu(WSlot3)){
	    switch(row){
			case 0:
			{
		 		SendWeaponForPlayer(playerid,25);
                ShowMenuForPlayer(WSlot3,playerid);
                SetPlayerControl(playerid, false);
				return 1;
			}
			case 1:
			{
				SendWeaponForPlayer(playerid,27);
                ShowMenuForPlayer(WSlot3,playerid);
                SetPlayerControl(playerid, false);
				return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == WSlot4 && IsValidMenu(WSlot4)){
	    switch(row){
			case 0:
			{
		 		SendWeaponForPlayer(playerid,29);
                ShowMenuForPlayer(WSlot4,playerid);
                SetPlayerControl(playerid, false);
				return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == WSlot5 && IsValidMenu(WSlot5)){
	    switch(row){
			case 0:
			{
		 		SendWeaponForPlayer(playerid,30);
                ShowMenuForPlayer(WSlot5,playerid);
                SetPlayerControl(playerid, false);
				return 1;
			}
			case 1:
			{
				SendWeaponForPlayer(playerid,31);
                ShowMenuForPlayer(WSlot5,playerid);
                SetPlayerControl(playerid, false);
				return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == WSlot6 && IsValidMenu(WSlot6)){
	    switch(row){
			case 0:
			{
		 		SendWeaponForPlayer(playerid,33);
                ShowMenuForPlayer(WSlot6,playerid);
                SetPlayerControl(playerid, false);
				return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == WColete && IsValidMenu(WColete)){
	    switch(row){
			case 0:
			{
			    if(TraficandoArmas[playerid] == 1)
			    {
			        if(ArmasTrafico[playerid][5] == 1)
					{
						SendClientMessage(playerid, COLOR_GRAY, "Você já tem colete.");
					}
					if(GetPlayerServerMoney(playerid) < 100)
					{
					    SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro, Custo: $100,00 dólares");
					}
					else
					{
						ArmasTrafico[playerid][5] = 1;
						AddPlayerMoney(playerid, -100, 0);
			        	SendClientMessage(playerid, COLOR_WHITE, "Compra efetuada, use /darcolete para o dar para algum integrante de sua gangue.");
					}
				}
			    else
			    {
			        if(GetPlayerServerMoney(playerid) < 100)
					{
					    SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro, Custo: $300,00 dólares");
					}
					else
					{
			    		SetPlayerArmourEx(playerid, MAX_ARMOUR);
			    		AddPlayerMoney(playerid, -300, 0);
			    		SendClientMessage(playerid, COLOR_WHITE, "Colete adquirido...");
					}
				}
			    SetPlayerControl(playerid, false);
			    ShowMenuForPlayer(Weapons, playerid);
			    return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == WCamuflagem && IsValidMenu(WCamuflagem)){
		switch(row){
			case 0: CamuflarJogador(playerid,1,25);
			case 1: CamuflarJogador(playerid,2,50);
			case 2: CamuflarJogador(playerid,3,75);
			case 3: CamuflarJogador(playerid,4,100);
			case 4: CamuflarJogador(playerid,5,150);
			case 5: CamuflarJogador(playerid,6,200);
			case 6: CamuflarJogador(playerid,7,250);
			case 7: CamuflarJogador(playerid,8,300);
			case 8: CamuflarJogador(playerid,9,350);
			case 9: CamuflarJogador(playerid,10,400);
		}
		SetPlayerControl(playerid, false);
  		ShowMenuForPlayer(Weapons, playerid);
  		return 1;
	}
	if(GetPlayerMenu(playerid) == WClockBomb && IsValidMenu(WClockBomb)){
	    switch(row){
			case 0:
			{
			    if(TraficandoArmas[playerid] == 0)
			    {
			    	if(GetPlayerServerMoney(playerid) < 1500)
					{
					    SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar a Bomba Relógio. Custo: $1500,00 dólares!");
					}
					else if(pStats[playerid][ClockBomb] == 1)
					{
					    SendClientMessage(playerid, COLOR_GRAY, "Você já tem uma bomba relógio...");
					}
					else
					{
					    pStats[playerid][ClockBomb] = 1;
					    AddPlayerMoney(playerid, -1500, -1);
					    SendClientMessage(playerid, COLOR_LIGHT_RED, "Bomba relógio comprada. Tome cuidado com o que vai fazer com isso hein?!");
					}
				}
				else
				{
				    if(GetPlayerServerMoney(playerid) < 1000)
					{
					    SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar a Bomba Relógio. Custo: $1000,00 dólares!");
					}
					if(ArmasTrafico[playerid][6] == 1)
					{
					    SendClientMessage(playerid, COLOR_GRAY, "Você já tem uma bomba relógio...");
					}
					else
					{
				    	ArmasTrafico[playerid][6] = 1;
				    	AddPlayerMoney(playerid, -1000, -1);
				    	SendClientMessage(playerid, COLOR_JUIZ, "Bomba relógio comprada por $1000,00 dólares.");
					}
				}
			    SetPlayerControl(playerid, false);
			    ShowMenuForPlayer(Weapons, playerid);
			    return 1;
			}
			case 1:
			{
                SetPlayerControl(playerid, false);
  				ShowMenuForPlayer(Weapons, playerid);
  				return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == WFlash && IsValidMenu(WFlash)){
	    switch(row){
			case 0:
			{
			    if(TraficandoArmas[playerid] == 0)
			    {
					if(GetPlayerServerMoney(playerid) < 500)
					{
					    SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar uma Flash. Custo: $500,00 dólares!");
					}
					else if(pStats[playerid][Flash] >= 3)
					{
					    SendClientMessage(playerid, COLOR_GRAY, "Você pode ter no máximo 3 Flash's.");
					}
					else
					{
					    pStats[playerid][Flash]++;
					    AddPlayerMoney(playerid, -500, -1);
					    SendClientMessage(playerid, COLOR_LIGHT_RED, "Flash adquirida...");
					}
				}
				else
				{
				    if(GetPlayerServerMoney(playerid) < 300)
					{
					    SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar uma Flash. Custo: $300,00 dólares.");
					}
					else if(ArmasTrafico[playerid][8] >= 3)
					{
					    SendClientMessage(playerid, COLOR_GRAY, "Você pode ter no máximo 3 Flash's.");
					}
					else
					{
					    ArmasTrafico[playerid][8]++;
					    AddPlayerMoney(playerid, -300, -1);
					    SendClientMessage(playerid, COLOR_LIGHT_RED, "Flash comprada por $300,00 dólares.");
					}
				}
			    SetPlayerControl(playerid, false);
			    ShowMenuForPlayer(Weapons, playerid);
			    return 1;
			}
			case 1:
			{
                SetPlayerControl(playerid, false);
  				ShowMenuForPlayer(Weapons, playerid);
  				return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == WRocket && IsValidMenu(WRocket)){
	    switch(row){
			case 0:
			{
			    if(TraficandoArmas[playerid] == 0)
			    {
					if(GetPlayerServerMoney(playerid) < 500)
					{
					    SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar o Rojão. Custo: $500,00 dólares!");
					}
					else if((pStats[playerid][Rocket] >= 3 && (!IsPlayerInGang(playerid) || pStats[playerid][GangueCargo] != 2)) || (pStats[playerid][Rocket] >= 7 && (IsPlayerInGang(playerid) || pStats[playerid][GangueCargo] == 2)))
					{
					    SendClientMessage(playerid, COLOR_GRAY, "Você só pode ter 3/7 rojões no máximo...");
					}
					else
					{
					    pStats[playerid][Rocket]++;
					    AddPlayerMoney(playerid, -500, -1);
					    SendClientMessage(playerid, COLOR_LIGHT_RED, "Rojão adquirido... Mais um para você soltar!");
					}
				}
				else
				{
				    if(GetPlayerServerMoney(playerid) < 100)
					{
					    SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar o Rojão. Custo: $100,00 dólares.");
					}
					else if(ArmasTrafico[playerid][7] >= 3)
					{
					    SendClientMessage(playerid, COLOR_GRAY, "Você já tem 3 rojões.");
					}
					else
					{
					    ArmasTrafico[playerid][7]++;
					    AddPlayerMoney(playerid, -100, -1);
					    SendClientMessage(playerid, COLOR_LIGHT_RED, "Rojão comprado por $100,00 dólares.");
					}
				}
			    SetPlayerControl(playerid, false);
			    ShowMenuForPlayer(Weapons, playerid);
			    return 1;
			}
			case 1:
			{
                SetPlayerControl(playerid, false);
  				ShowMenuForPlayer(Weapons, playerid);
  				return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == DiasAluguel1 && IsValidMenu(DiasAluguel1)){
		switch(row){
		    case 0: DiasSelecionados[playerid] = 1;
		    case 1: DiasSelecionados[playerid] = 2;
		    case 2: DiasSelecionados[playerid] = 3;
		    case 3: DiasSelecionados[playerid] = 4;
		    case 4: DiasSelecionados[playerid] = 5;
		    case 5: DiasSelecionados[playerid] = 6;
		    case 6: DiasSelecionados[playerid] = 7;
		    case 7: DiasSelecionados[playerid] = 8;
		    case 8: DiasSelecionados[playerid] = 9;
		    case 9: DiasSelecionados[playerid] = 10;
		    case 10:
		    {
		        ShowMenuForPlayer(DiasAluguel2, playerid);
		        SetPlayerControl(playerid, false);
		        return 1;
		    }
		}
		SendClientMessage(playerid, COLOR_WHITE, "Digite agora o custo do aluguel...");
		CustoAluguel[playerid] = 1;
		return 1;
	}
	if(GetPlayerMenu(playerid) == DiasAluguel2 && IsValidMenu(DiasAluguel2)){
		switch(row){
		    case 0: DiasSelecionados[playerid] = 11;
		    case 1: DiasSelecionados[playerid] = 12;
		    case 2: DiasSelecionados[playerid] = 13;
		    case 3: DiasSelecionados[playerid] = 14;
		    case 4: DiasSelecionados[playerid] = 15;
		    case 5: DiasSelecionados[playerid] = 16;
		    case 6: DiasSelecionados[playerid] = 17;
		    case 7: DiasSelecionados[playerid] = 18;
		    case 8: DiasSelecionados[playerid] = 19;
		    case 9: DiasSelecionados[playerid] = 20;
		    case 10:
		    {
		        ShowMenuForPlayer(DiasAluguel3, playerid);
		        SetPlayerControl(playerid, false);
		        return 1;
		    }
		}
		SendClientMessage(playerid, COLOR_WHITE, "Digite agora o custo do aluguel...");
		CustoAluguel[playerid] = 1;
		return 1;
	}
	if(GetPlayerMenu(playerid) == DiasAluguel3 && IsValidMenu(DiasAluguel3)){
		switch(row){
		    case 0: DiasSelecionados[playerid] = 21;
		    case 1: DiasSelecionados[playerid] = 22;
		    case 2: DiasSelecionados[playerid] = 23;
		    case 3: DiasSelecionados[playerid] = 24;
		    case 4: DiasSelecionados[playerid] = 25;
		    case 5: DiasSelecionados[playerid] = 26;
		    case 6: DiasSelecionados[playerid] = 27;
		    case 7: DiasSelecionados[playerid] = 28;
		    case 8: DiasSelecionados[playerid] = 29;
		    case 9: DiasSelecionados[playerid] = 30;
		    case 10:
			{
				return 1;
			}
		}
		SendClientMessage(playerid, COLOR_WHITE, "Digite agora o custo do aluguel...");
		CustoAluguel[playerid] = 1;
		return 1;
	}
	if(GetPlayerMenu(playerid) == CasaOpc && IsValidMenu(CasaOpc)){
		switch(row){
		    case 0:
 		    {
         	 	pStats[playerid][SpawnPosX] = pckStats[SelectedHouse[playerid]][pX];
				pStats[playerid][SpawnPosY] = pckStats[SelectedHouse[playerid]][pY];
				pStats[playerid][SpawnPosZ] = pckStats[SelectedHouse[playerid]][pZ];
				SendClientMessage(playerid, COLOR_GRAY, "Casa selecionada, você nascerá nela.");
			}
		    case 1: VenderMinhaCasa(playerid, SelectedHouse[playerid]);
		    case 2:
		    {
		        if(pckStats[SelectedHouse[playerid]][AlugandoCasa] == 0){
			        SetPlayerControl(playerid, false);
			        ShowMenuForPlayer(DiasAluguel1,playerid);
			    } else {
					SendClientMessage(playerid, COLOR_GRAY, "Sua casa já está locada, terá que tirar o aluguel para alugar novamente.");
		        	return 1;
		        }
		    }
		    case 3: CancelarVendaCasa(playerid, SelectedHouse[playerid]);
		    case 4: CancelarAluguelCasa(playerid, SelectedHouse[playerid]);
		    case 5: RastrearCasa(playerid, SelectedHouse[playerid]);
		    case 6: SetPlayerControl(playerid,1);
		}
	}
	if(GetPlayerMenu(playerid) == ConfirmarProf && IsValidMenu(ConfirmarProf)){
        switch(row){
            case 0: AplicarProfissao(playerid,profselection[playerid]);
			case 1: SetPlayerControl(playerid, 1);
		}
		return 1;
	}
	SetPlayerControl(playerid,1);
    if(GetPlayerMenu(playerid) == Outros && IsValidMenu(Outros)){
        switch(row){
            case 0:
            {
                if(GetPlayerServerMoney(playerid) < 50) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro, Custo: $50");
                pStats[playerid][Camisinha]++;
                SendClientMessage(playerid, COLOR_WHITE, "Camisinha comprada, hehe bem pensado, agora você não terá AIDS =)");
                AddPlayerMoney(playerid,-50,-1);
                return 1;
			}
			case 1:
			{
                if(GetPlayerServerMoney(playerid) < 50) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro, Custo: $50");
				if(pStats[playerid][Sanduiche] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você já tem 1 sanduíche, não pode comprar mais.");
                pStats[playerid][Sanduiche]++;
                SendClientMessage(playerid, COLOR_WHITE, "Sanduíche comprado, quando estiver com muita fome: /comer");
                AddPlayerMoney(playerid,-50,-1);
                return 1;
			}
			case 2:
			{
                if(GetPlayerServerMoney(playerid) < 300) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro, Custo: $300");
				if(GetPlayerWeapon(playerid) == 4) return SendClientMessage(playerid, COLOR_GRAY, "Você já tem uma faca!");
				GiveWeapon(playerid, 4, 1);
				AddPlayerMoney(playerid, -300, -1);
               	SendClientMessage(playerid, COLOR_WHITE, "Faca adquirida, use para cortar alguma coisa, ou...");
               	return 1;
			}
			case 3:
			{
				ShowMenuForPlayer(CreditosCartao,playerid);
				SetPlayerControl(playerid,0);
				return 1;
			}
		}
	}
    if(GetPlayerMenu(playerid) == cofremenu && IsValidMenu(cofremenu)){
		switch(row){
		    case 0:
			{
				GranaCofre[playerid][0] = 1;
				SendClientMessage(playerid, COLOR_GREEN, "Digite o valor à ser colocado no cofre...");
				return 1;
			}
			case 1:
			{
			    ArmaCofre[playerid][0] = 1;
			    SendClientMessage(playerid, COLOR_GREEN, "Digite o slot da arma que quer colocar! (Se não souber o slot veja em /slotarmas)");
				return 1;
			}
			case 2:
			{
			    ShowMenuForPlayer(drogascofre,playerid);
			    DrogaCofre[playerid][0] = 1;
			    return 1;
			}
			case 3:
			{
			    if(pStats[playerid][PhoneNumb]==0){
	        		SendClientMessage(playerid,COLOR_GRAY,"Você não tem celular!");
	        		return 1;
				}
				if(pStats[playerid][GCell] == 1 || pStats[playerid][CofreCell] == 1){
		    		SendClientMessage(playerid, COLOR_GRAY, "Seu celular está guardado e desativado!");
		    		return 1;
				}
    			if(pckStats[PickupEntradaCasa[playerid]][CofreCelular] == 1) {
    			    SendClientMessage(playerid, COLOR_GRAY, "Já tem um celular guardado ai...");
    			    return 1;
				}
				else{
				    pStats[playerid][CofreCell] = 1;
				    SendClientMessage(playerid, COLOR_WHITE, "Celular guardado e desativado!");
				    pckStats[PickupEntradaCasa[playerid]][CofreCelular] = 1;
					return 1;
				}
			}
			case 4:
			{
			    GranaCofre[playerid][1] = 1;
			    SendClientMessage(playerid, COLOR_GREEN, "Digite o valor à ser retirado do cofre...");
				return 1;
			}
			case 5:
			{
			    ArmaCofre[playerid][1] = 1;
			    SendClientMessage(playerid, COLOR_GREEN, "Digite o slot da arma que quer retirar...");
				return 1;
			}
			case 6:
			{
			    ShowMenuForPlayer(drogascofre,playerid);
			    DrogaCofre[playerid][1] = 1;
				return 1;
			}
			case 7:
			{
			    if(pStats[playerid][PhoneNumb]==0){
	        		SendClientMessage(playerid,COLOR_GRAY,"Você não tem celular!");
	        		return 1;
				}
				if(pStats[playerid][CofreCell] == 0){
		    		SendClientMessage(playerid, COLOR_GRAY, "Seu celular não está guardado em nenhum cofre!");
		    		return 1;
				}
    			if(pckStats[PickupEntradaCasa[playerid]][CofreCelular] == 0) {
    			    SendClientMessage(playerid, COLOR_GRAY, "Não tem celular guardado ai...");
    			    return 1;
				}
				else{
				    pStats[playerid][CofreCell] = 0;
				    SendClientMessage(playerid, COLOR_WHITE, "Celular retirado!");
				    pckStats[PickupEntradaCasa[playerid]][CofreCelular] = 0;
					return 1;
				}
			}
		}
	}
	if(GetPlayerMenu(playerid) == Becks && IsValidMenu(Becks)){
	    switch(row){
	        case 0:
	        {
	            if(GetPlayerServerMoney(playerid) < 150){
					SendClientMessage(playerid, COLOR_WHITE, "QUALÉ MALUCO? CADE A GRANA PORRA!");
					return 1;
				}
				Maconha[playerid] = Maconha[playerid] + 1;
				SendClientMessage(playerid, COLOR_TRAFICANTE, "Vlw mano, toma teu papelote de maconha, pra fumar: /fumar.");
			    AddPlayerMoney(playerid, -150,-1);
				SetPlayerControl(playerid,1);
				if(!TemProfissao(TRAFICANTE)){
					if(CheckpointStatus[playerid] == NONE){
						TaAfim[playerid] = 1;
					}
				}
				return 1;
			}
			case 1:
			{
	            if(GetPlayerServerMoney(playerid) < 250){
					SendClientMessage(playerid, COLOR_WHITE, "QUALÉ MALUCO? CADE A GRANA PORRA!");
					return 1;
				}
				Cocaina[playerid] = Cocaina[playerid] + 1;
				SendClientMessage(playerid, COLOR_TRAFICANTE, "Vlw mano, toma teu pó, pra cheirar: /cheirar.");
			    AddPlayerMoney(playerid, -250,-1);
				SetPlayerControl(playerid,1);
				if(!TemProfissao(TRAFICANTE)){
					if(CheckpointStatus[playerid] == NONE){
						TaAfim[playerid] = 1;
					}
				}
				return 1;
			}
			case 2:
			{
	            if(GetPlayerServerMoney(playerid) < 300){
					SendClientMessage(playerid, COLOR_WHITE, "QUALÉ MALUCO? CADE A GRANA PORRA!");
					return 1;
				}
				Heroina[playerid] = Heroina[playerid] + 1;
				SendClientMessage(playerid, COLOR_TRAFICANTE, "Toma aí mano 1g de heroína, se quiser injetar: /injetar.");
			    AddPlayerMoney(playerid, -300,-1);
			    SetPlayerControl(playerid,1);
			    if(!TemProfissao(TRAFICANTE)){
					if(CheckpointStatus[playerid] == NONE){
						TaAfim[playerid] = 1;
					}
				}
				return 1;
			}
		}
 	}
	if(GetPlayerMenu(playerid) == drogascofre && IsValidMenu(drogascofre)){
		if(DrogaCofre[playerid][0] == 1){
		    DrogaCofre[playerid][0] = 0;
		    switch(row){
		        case 0:
		        {
					if(pckStats[PickupEntradaCasa[playerid]][CocainaCofre] < 10){
					    if(Cocaina[playerid] >= 1){
						    pckStats[PickupEntradaCasa[playerid]][CocainaCofre]++;
	                		Cocaina[playerid]--;
	                		format(string,sizeof(string),"Você adicionou uma cocaína em seu cofre, agora ele possui %d cocaina(s)",pckStats[PickupEntradaCasa[playerid]][CocainaCofre]);
							SendClientMessage(playerid, COLOR_WHITE, string);
							return 1;
						}
						else{
						    SendClientMessage(playerid, COLOR_GRAY, "Você não tem cocaína!");
						    return 1;
						}
					}
					else{
					    SendClientMessage(playerid, COLOR_GRAY, "O cofre está lotado, cabe apenas 10 drogas de cada tipo!");
					    return 1;
					}
				}
				case 1:
		        {
					if(pckStats[PickupEntradaCasa[playerid]][MaconhaCofre] < 10){
					    if(Maconha[playerid] >= 1){
						    pckStats[PickupEntradaCasa[playerid]][MaconhaCofre]++;
							Maconha[playerid]--;
	                		format(string,sizeof(string),"Você adicionou uma maconha em seu cofre, agora ele possui %d maconha(s)",pckStats[PickupEntradaCasa[playerid]][MaconhaCofre]);
							SendClientMessage(playerid, COLOR_WHITE, string);
							return 1;
						}
						else{
						    SendClientMessage(playerid, COLOR_GRAY, "Você não tem maconha!");
						    return 1;
						}
					}
					else{
					    SendClientMessage(playerid, COLOR_GRAY, "O cofre está lotado, cabe apenas 10 drogas de cada tipo!");
					    return 1;
					}
				}
		        case 2:
		        {
					if(pckStats[PickupEntradaCasa[playerid]][HeroinaCofre] < 10){
					    if(Heroina[playerid] >= 1){
						    pckStats[PickupEntradaCasa[playerid]][HeroinaCofre]++;
	                		Heroina[playerid]--;
	                		format(string,sizeof(string),"Você adicionou uma heroína em seu cofre, agora ele possui %d heroína(s)",pckStats[PickupEntradaCasa[playerid]][HeroinaCofre]);
							SendClientMessage(playerid, COLOR_WHITE, string);
							return 1;
						}
						else{
						    SendClientMessage(playerid, COLOR_GRAY, "Você não tem heroína!");
						    return 1;
						}
					}
					else{
					    SendClientMessage(playerid, COLOR_GRAY, "O cofre está lotado, cabe apenas 10 drogas de cada tipo!");
					    return 1;
					}
				}
			}
		}
		else if(DrogaCofre[playerid][1] == 1){
		    DrogaCofre[playerid][1] = 0;
		    switch(row){
		        case 0:
		        {
		            if(pckStats[PickupEntradaCasa[playerid]][CocainaCofre] >= 1){
                        pckStats[PickupEntradaCasa[playerid]][CocainaCofre]--;
                		Cocaina[playerid]++;
                		format(string,sizeof(string),"Você pegou uma cocaina do seu cofre, agora ele tem %d cocaina(s)",pckStats[PickupEntradaCasa[playerid]][CocainaCofre]);
                		SendClientMessage(playerid, COLOR_WHITE, string);
                		return 1;
					}
					else{
					    SendClientMessage(playerid, COLOR_GRAY, "O estoque de cocaina está vazio!");
					    return 1;
					}
		        }
		        case 1:
		        {
		            if(pckStats[PickupEntradaCasa[playerid]][MaconhaCofre] >= 1){
		                pckStats[PickupEntradaCasa[playerid]][MaconhaCofre]--;
                		Maconha[playerid]++;
                		format(string,sizeof(string),"Você pegou uma maconha do seu cofre, agora ele tem %d maconha(s)",pckStats[PickupEntradaCasa[playerid]][MaconhaCofre]);
                		SendClientMessage(playerid, COLOR_WHITE, string);
                		return 1;
					}
					else{
					    SendClientMessage(playerid, COLOR_GRAY, "O estoque de maconha está vazio!");
					    return 1;
					}
		        }
		        case 2:
		        {
		            if(pckStats[PickupEntradaCasa[playerid]][HeroinaCofre] >= 1){
                        pckStats[PickupEntradaCasa[playerid]][HeroinaCofre]--;
                		Heroina[playerid]++;
                		format(string,sizeof(string),"Você pegou uma heroina do seu cofre, agora ele tem %d heroina(s)",pckStats[PickupEntradaCasa[playerid]][HeroinaCofre]);
                		SendClientMessage(playerid, COLOR_WHITE, string);
                		return 1;
					}
					else{
					    SendClientMessage(playerid, COLOR_GRAY, "O estoque de heroina está vazio!");
					    return 1;
					}
		        }
			}
		}
	}
    if(GetPlayerMenu(playerid) == Eletrodomesticos && IsValidMenu(Eletrodomesticos)){
		switch(row){
			case 0: ComprarTV(playerid);
			case 1: ComprarRadio(playerid);
			case 2: ComprarGeladeira(playerid);
			case 3: ComprarFogao(playerid);
			case 4: ComprarTelefone(playerid);
			case 5: ComprarComputador(playerid);
			case 6: ComprarGuardaRoupas(playerid);
			case 7: ComprarCofre(playerid);
			case 8: ComprarAlarmeBasico(playerid);
			case 9: ComprarAlarmeAvancado(playerid);
		}
	    return 1;
	}
    if(GetPlayerMenu(playerid) == ComidaLoja && IsValidMenu(ComidaLoja)){
        switch(row){
            case 0:
            {
			    if(GetPlayerServerMoney(playerid) < ValorFrango){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar o Frango Congelado.");
			        SetPlayerControl(playerid,1);
					return 1;
				}
			    if(pStats[playerid][Frango] == 5){
				    SendClientMessage(playerid, COLOR_GRAY, "Você já tem frango demais na sacola, coloque ele em sua casa!");
                    SetPlayerControl(playerid,1);
					return 1;
				}
				else{
					AddPlayerMoney(playerid, -ValorFrango, -1);
					pStats[playerid][Frango]++;
					SendClientMessage(playerid, COLOR_WHITE, "Você comprou o Frango Sadia's Sadio por $30, pode guardar na geladeira ou preparar logo em sua casa.");
                    SetPlayerControl(playerid,1);
					return 1;
				}
			}
			case 1:
			{
			    if(GetPlayerServerMoney(playerid) < ValorPeixe){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar o Peixe Congelado.");
                    SetPlayerControl(playerid,1);
					return 1;
				}
			    if(pStats[playerid][Peixe] == 5){
				    SendClientMessage(playerid, COLOR_GRAY, "Você já tem peixe demais na sacola, coloque ele em sua casa!");
                    SetPlayerControl(playerid,1);
					return 1;
				}
				else{
					AddPlayerMoney(playerid, -ValorPeixe, -1);
					pStats[playerid][Peixe]++;
					SendClientMessage(playerid, COLOR_WHITE, "Você comprou 1 bandeja de Peixe por $40, pode guardar na geladeira ou preparar logo em sua casa.");
                    SetPlayerControl(playerid,1);
					return 1;
				}
			}
			case 2:
			{
			    if(GetPlayerServerMoney(playerid) < ValorPizza){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar o Peixe Congelado.");
                    SetPlayerControl(playerid,1);
					return 1;
				}
			    if(pStats[playerid][Pizza] == 5){
				    SendClientMessage(playerid, COLOR_GRAY, "Você já tem peixe demais na sacola, coloque ele em sua casa!");
                    SetPlayerControl(playerid,1);
					return 1;
				}
				else{
					AddPlayerMoney(playerid, -ValorPizza, -1);
					pStats[playerid][Pizza]++;
					SendClientMessage(playerid, COLOR_WHITE, "Você comprou 1 pizza de Mussarela por $25, pode guardar na geladeira ou preparar logo em sua casa.");
                    SetPlayerControl(playerid,1);
					return 1;
				}
			}
			case 3:
			{
			    if(GetPlayerServerMoney(playerid) < ValorSalada){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar a Salada Vida Leve.");
                    SetPlayerControl(playerid,1);
					return 1;
				}
			    if(pStats[playerid][Salada] == 5){
				    SendClientMessage(playerid, COLOR_GRAY, "Você já tem peixe demais na sacola, coloque ele em sua casa!");
                    SetPlayerControl(playerid,1);
					return 1;
				}
				else{
					AddPlayerMoney(playerid, -ValorSalada, -1);
					pStats[playerid][Salada]++;
					SendClientMessage(playerid, COLOR_WHITE, "Você comprou 1 kit com saladas frescas por $15, pode guardar na geladeira ou preparar logo em sua casa.");
                    SetPlayerControl(playerid,1);
					return 1;
				}
			}
			case 4:
			{
			    if(GetPlayerServerMoney(playerid) < ValorRefrigerante){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar Refrigerantes Sprunk.");
                    SetPlayerControl(playerid,1);
					return 1;
				}
			    if(pStats[playerid][Refrigerante] == 5){
				    SendClientMessage(playerid, COLOR_GRAY, "Você já tem refrigerante demais, coloque ele em sua casa!");
                    SetPlayerControl(playerid,1);
					return 1;
				}
				else{
					AddPlayerMoney(playerid, -ValorRefrigerante, -1);
					pStats[playerid][Refrigerante]++;
					SendClientMessage(playerid, COLOR_WHITE, "Você comprou 1 lata de refrigerante por $12, pode guardar na geladeira ou preparar logo em sua casa.");
                    SetPlayerControl(playerid,1);
					return 1;
				}
			}
			case 5:
			{
			    if(GetPlayerServerMoney(playerid) < ValorSuco){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar o Suco de Laranja.");
                    SetPlayerControl(playerid,1);
					return 1;
				}
			    if(pStats[playerid][Suco] == 5){
				    SendClientMessage(playerid, COLOR_GRAY, "Você já tem suco demais, coloque ele em sua casa!");
                    SetPlayerControl(playerid,1);
					return 1;
				}
				else{
					AddPlayerMoney(playerid, -ValorSuco, -1);
					pStats[playerid][Suco]++;
					SendClientMessage(playerid, COLOR_WHITE, "Você comprou 1 delicioso Suco de Laranja KiBoum!");
                    SetPlayerControl(playerid,1);
					return 1;
				}
			}
			case 6:
			{
			    if(GetPlayerServerMoney(playerid) < ValorCarne){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar a carne.");
                    SetPlayerControl(playerid,1);
					return 1;
				}
			    if(pStats[playerid][Carne] == 5){
				    SendClientMessage(playerid, COLOR_GRAY, "Você já tem carne demais, coloque ela em sua casa!");
                    SetPlayerControl(playerid,1);
					return 1;
				}
				else{
					AddPlayerMoney(playerid, -ValorCarne, -1);
					pStats[playerid][Carne]++;
					SendClientMessage(playerid, COLOR_WHITE, "Você comprou 1 deliciosa carne!");
                    SetPlayerControl(playerid,1);
					return 1;
				}
			}
			case 7:
			{
			    if(GetPlayerServerMoney(playerid) < ValorStrogonoff){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar o strogonoff.");
                    SetPlayerControl(playerid,1);
					return 1;
				}
			    if(pStats[playerid][Strogonoff] == 5){
				    SendClientMessage(playerid, COLOR_GRAY, "Você já tem strogonoff demais, coloque ele em sua casa!");
                    SetPlayerControl(playerid,1);
					return 1;
				}
				else{
					AddPlayerMoney(playerid, -ValorStrogonoff, -1);
					pStats[playerid][Strogonoff]++;
					SendClientMessage(playerid, COLOR_WHITE, "Você comprou 1 delicioso strogonoff de frango!");
                    SetPlayerControl(playerid,1);
					return 1;
				}
			}
			case 8:
			{
			    if(GetPlayerServerMoney(playerid) < ValorCamarao){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar o camarão.");
                    SetPlayerControl(playerid,1);
					return 1;
				}
			    if(pStats[playerid][Camarao] == 5){
				    SendClientMessage(playerid, COLOR_GRAY, "Você já tem camarão demais, coloque ele em sua casa!");
                    SetPlayerControl(playerid,1);
					return 1;
				}
				else{
					AddPlayerMoney(playerid, -ValorCamarao, -1);
					pStats[playerid][Camarao]++;
					SendClientMessage(playerid, COLOR_WHITE, "Você comprou 1 pacote com deliciosos camarões!");
                    SetPlayerControl(playerid,1);
					return 1;
				}
			}
			case 9:
			{
			    if(GetPlayerServerMoney(playerid) < ValorLinguica){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar a linguiça.");
                    SetPlayerControl(playerid,1);
					return 1;
				}
			    if(pStats[playerid][Linguica] == 5){
				    SendClientMessage(playerid, COLOR_GRAY, "Você já tem linguiça demais, coloque ela em sua casa!");
                    SetPlayerControl(playerid,1);
					return 1;
				}
				else{
					AddPlayerMoney(playerid, -ValorLinguica, -1);
					pStats[playerid][Linguica]++;
					SendClientMessage(playerid, COLOR_WHITE, "Você comprou 1 pacote com deliciosas linguiças para churrasco!");
                    SetPlayerControl(playerid,1);
					return 1;
				}
			}
		}
	}
    if(GetPlayerMenu(playerid) == Municoes && IsValidMenu(Municoes)){
        switch(row){
            case 0:
            {
					SlotSelection[playerid] = 2;
					ShowMenuForPlayer(QTMunicoes,playerid);
					SetPlayerControl(playerid,0);
					return 1;
			}
            case 1:
            {
					SlotSelection[playerid] = 3;
					ShowMenuForPlayer(QTMunicoes,playerid);
					SetPlayerControl(playerid,0);
					return 1;
			}
            case 2:
            {
					SlotSelection[playerid] = 4;
					ShowMenuForPlayer(QTMunicoes,playerid);
					SetPlayerControl(playerid,0);
					return 1;
			}
            case 3:
            {
					SlotSelection[playerid] = 5;
					ShowMenuForPlayer(QTMunicoes,playerid);
					SetPlayerControl(playerid,0);
					return 1;
			}
            case 4:
            {
					SlotSelection[playerid] = 6;
					ShowMenuForPlayer(QTMunicoes,playerid);
					SetPlayerControl(playerid,0);
					return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == QTMunicoes && IsValidMenu(QTMunicoes)){
	    switch(row){
            case 0: ComprarMunicao(playerid, SlotSelection[playerid], 5);
            case 1: ComprarMunicao(playerid, SlotSelection[playerid], 10);
            case 2: ComprarMunicao(playerid, SlotSelection[playerid], 20);
            case 3: ComprarMunicao(playerid, SlotSelection[playerid], 50);
            case 4: ComprarMunicao(playerid, SlotSelection[playerid], 100);
            case 5: ComprarMunicao(playerid, SlotSelection[playerid], 200);
		}
		return 1;
	}
    if(GetPlayerMenu(playerid) == Cardapio1 && IsValidMenu(Cardapio1)){
        switch(row){
            case 0 :
				{
			 		ShowMenuForPlayer(Cardapio2,playerid);
			 		SetPlayerControl(playerid,0);
			    	return 1;
				}
            case 1 :
				{
			 		ShowMenuForPlayer(Cardapio3,playerid);
			 		SetPlayerControl(playerid,0);
			    	return 1;
				}
            case 2 :
				{
			 		ShowMenuForPlayer(Cardapio4,playerid);
			 		SetPlayerControl(playerid,0);
			    	return 1;
				}
            case 3: return 1;
		}
	}
	//Comidas(9)
	if(GetPlayerMenu(playerid) == Cardapio2 && IsValidMenu(Cardapio2)){
        switch(row){
            case 0: ServirComida(playerid,0);
            case 1: ServirComida(playerid,1);
            case 2: ServirComida(playerid,2);
            case 3: ServirComida(playerid,3);
            case 4: ServirComida(playerid,4);
            case 5: ServirComida(playerid,5);
            case 6: ServirComida(playerid,6);
            case 7: ServirComida(playerid,7);
            case 8: ServirComida(playerid,8);
		}
	}
	//Bebidas(7)
	if(GetPlayerMenu(playerid) == Cardapio3 && IsValidMenu(Cardapio3)){
        switch(row){
            case 0: ServirBebida(playerid,0);
            case 1: ServirBebida(playerid,1);
            case 2: ServirBebida(playerid,2);
            case 3: ServirBebida(playerid,3);
            case 4: ServirBebida(playerid,4);
            case 5:
			{
			 	ShowMenuForPlayer(Sucos,playerid);
			 	ComLeite[playerid] = 1;
			 	SetPlayerControl(playerid,0);
			 	return 1;
		 	}
            case 6:
			{
			 	ShowMenuForPlayer(Sucos,playerid);
				ComLeite[playerid] = 0;
				SetPlayerControl(playerid,0);
				return 1;
			}
		}
	}
	//Sobremesas(5)
	if(GetPlayerMenu(playerid) == Cardapio4 && IsValidMenu(Cardapio4)){
        switch(row){
            case 0: ServirSobremesa(playerid,0);
            case 1: ServirSobremesa(playerid,1);
            case 2: ServirSobremesa(playerid,2);
            case 3: ServirSobremesa(playerid,3);
            case 4: ServirSobremesa(playerid,4);
		}
	}
	//Sucos(7)
	if(GetPlayerMenu(playerid) == Sucos && IsValidMenu(Sucos)){
	    switch(row){
            case 0: ServirSuco(playerid,0);
            case 1: ServirSuco(playerid,1);
            case 2: ServirSuco(playerid,2);
            case 3: ServirSuco(playerid,3);
            case 4: ServirSuco(playerid,4);
            case 5: ServirSuco(playerid,5);
            case 6: ServirSuco(playerid,6);
            case 7: ServirSuco(playerid,7);
            case 8: ServirSuco(playerid,8);
		}
	}
	if(GetPlayerMenu(playerid) == BancoOpc && IsValidMenu(BancoOpc)){
	    switch(row){
	        case 0:
			{
			    SetPlayerControl(playerid,0);
			    ShowMenuForPlayer(BancoOpc2,playerid);
	            return 1;
			}
			case 1:
			{
	           	DepositandoGrana[playerid] = 1;
	           	SendClientMessage(playerid, COLOR_BLUE_PLUS, "Para depositar digite o valor à ser DEPOSITADO no CHAT.");
	          	return 1;
			}
			case 2:
			{
				format(string, sizeof(string), "|-------- Conta do Jogador: %s --------|", PlayerName(playerid));
				SendClientMessage(playerid, COLOR_LIGHT_RED, string);
				format(string, sizeof(string), "|-------- Dinheiro pessoal: $%d dólares ---------|", pStats[playerid][Banco]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "|-------- Trabalho: $%d dólares ---------|", pStats[playerid][BancoTrabalho]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "|-------- Residencia: $%d dólares ---------|", pStats[playerid][BancoResidencia]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "|-------- Empresa: $%d dólares ---------|", pStats[playerid][BancoEmpresa]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				return 1;
			}
			case 3:
			{
				if(pStats[playerid][Divida] <= 0){
		   			SendClientMessage(playerid, COLOR_GRAY, "Você não possui dívida para pagar!");
	            	return 1;
	   			}
	   			if(GetPlayerServerMoney(playerid) < pStats[playerid][Divida]){
		   			format(string, sizeof(string),"Você não tem dinheiro para pagar! Arrume se não quer encrenca! Sua dívida: $%d",pStats[playerid][Divida]);
		   			SendClientMessage(playerid, COLOR_GRAY, string);
	            	return 1;
	   			}
	   			else{
		   			AddPlayerMoney(playerid,0-pStats[playerid][Divida],-1);
		   			format(string, sizeof(string),"Você pagou sua dívida de $%d",pStats[playerid][Divida]);
		   			SendClientMessage(playerid, COLOR_WHITE, string);
		   			ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,1,1);
		   			pStats[playerid][Divida] = 0;
		   			pStats[playerid][Emprestimo] = 0;
		   			KillTimer(TimerDivida[playerid]);
		   			return 1;
				}
			}
			case 4:
			{
				FazendoEmprestimo[playerid] = 1;
				SendClientMessage(playerid, COLOR_BLUE_PLUS, "Para fazer um empréstimo digite o valor à ser EMPRESTADO no CHAT.");
				return 1;
			}
			case 5:
			{
				InvestindoGrana[playerid] = 1;
				SendClientMessage(playerid, COLOR_BLUE_PLUS, "[BANCO] Para fazer a aplicação bancária, digite no CHAT o valor que deseja");
				SendClientMessage(playerid, COLOR_BLUE_PLUS, "[BANCO] transferir da sua conta para APLICAR na suaaplicação.");
				return 1;
			}
			case 6:
			{
				DesinvestindoGrana[playerid] = 1;
				SendClientMessage(playerid, COLOR_BLUE_PLUS, "[BANCO] Para retirar dinheiro daa aplicação bancária, digite no CHAT o valor que deseja");
				SendClientMessage(playerid, COLOR_BLUE_PLUS, "[BANCO] transferir da sua aplicação para COLOCAR na sua conta.");
				return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == BancoOpc2 && IsValidMenu(BancoOpc2)){
	    switch(row){
	        case 0:
	        {
	            BankOpc[playerid] = 0;
	            SacandoGrana[playerid] = 1;
	            SendClientMessage(playerid, COLOR_BLUE_PLUS, "Para sacar digite o valor à ser SACADO no CHAT.");
	            return 1;
	        }
	        case 1:
	        {
	            BankOpc[playerid] = 1;
	            SacandoGrana[playerid] = 1;
	            SendClientMessage(playerid, COLOR_BLUE_PLUS, "Para sacar digite o valor à ser SACADO no CHAT.");
	            return 1;
	        }
	        case 2:
	        {
                BankOpc[playerid] = 2;
	            SacandoGrana[playerid] = 1;
	            SendClientMessage(playerid, COLOR_BLUE_PLUS, "Para sacar digite o valor à ser SACADO no CHAT.");
	            return 1;
	        }
	        case 3:
	        {
	            BankOpc[playerid] = 3;
	            SacandoGrana[playerid] = 1;
	            SendClientMessage(playerid, COLOR_BLUE_PLUS, "Para sacar digite o valor à ser SACADO no CHAT.");
	            return 1;
	        }
	        case 4:
			{
	            return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == Bar && IsValidMenu(Bar)) {
	    switch(row){
	        case 0:
			{
			    if(GetPlayerServerMoney(playerid) < 5){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para pagar o Guaraná Kuat.");
					return 1;
				}
			    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			    if(pStats[playerid][Alcool] > 0){
				   	pStats[playerid][Alcool] = pStats[playerid][Alcool]-1;
			 	}
				format(string, sizeof(string), "Você tomou um delicioso Guaraná Kuat, o teor de álcool no seu sangue baixou. Atual: %d Mg", pStats[playerid][Alcool]);
			    SendClientMessage(playerid, COLOR_BARMAN, string);
			    AddPlayerMoney(playerid, -50, -1);
			    AddPlayerHealth(playerid, random(5) + 10);
			    AcrescentarLucro(8,10);
				return 1;
			}
			case 1:
			{
			    if(GetPlayerServerMoney(playerid) < 8){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para pagar o Suco.");
					return 1;
				}
			    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			    if(pStats[playerid][Alcool] > 0){
				   	pStats[playerid][Alcool] = pStats[playerid][Alcool]-2;
			 	}
				format(string, sizeof(string), "Você tomou um delicioso Suco, o teor de álcool no seu sangue baixou. Atual: %d Mg", pStats[playerid][Alcool]);
			    SendClientMessage(playerid, COLOR_BARMAN, string);
			    AddPlayerMoney(playerid, -80, -1);
			    AddPlayerHealth(playerid, random(5) + 10);
			    AcrescentarLucro(8,16);
				return 1;
			}
			case 2:
			{
			    if(GetPlayerServerMoney(playerid) < 10){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para pagar a Cerveja.");
					return 1;
				}
			    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			    pStats[playerid][Alcool] = pStats[playerid][Alcool]+2;
				format(string, sizeof(string), "Você tomou uma Cerveja geladinha, porém o nível de álcool no seu sangue aumentou. Atual: %d Mg", pStats[playerid][Alcool]);
		        SendClientMessage(playerid, COLOR_BARMAN, string);
			    AddPlayerHealth(playerid, random(5) + 10);
			    AddPlayerMoney(playerid, -80, -1);
			    AcrescentarLucro(8,20);
			    KillTimer(TimerBebida[playerid]);
				TimerBebida[playerid] = SetTimerEx("Bebado",10000,0,"d",playerid);
			    return 1;
			}
			case 3:
			{
			    if(GetPlayerServerMoney(playerid) < 15){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para pagar a Pinga.");
					return 1;
				}
			    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			    pStats[playerid][Alcool] = pStats[playerid][Alcool]+4;
				format(string, sizeof(string), "Pinga BOA! O teor de álcool no seu sangue aumentou. Atual: %d Mg", pStats[playerid][Alcool]);
		        SendClientMessage(playerid, COLOR_BARMAN, string);
				AddPlayerHealth(playerid, random(5) + 10);
				AddPlayerMoney(playerid, -70, -1);
				AcrescentarLucro(8,30);
			    KillTimer(TimerBebida[playerid]);
				TimerBebida[playerid] = SetTimerEx("Bebado",10000,0,"d",playerid);
			  	return 1;
			}
			case 4:
			{
			    if(GetPlayerServerMoney(playerid) < 25){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para pagar o Whisky Black Label.");
					return 1;
				}
			    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			    pStats[playerid][Alcool] = pStats[playerid][Alcool]+5;
				format(string, sizeof(string), "Drink tomado. Whisky Black Label(12 anos). O teor de álcool no seu sangue aumentou. Atual: %d Mg", pStats[playerid][Alcool]);
				SendClientMessage(playerid, COLOR_BARMAN, string);
				AddPlayerHealth(playerid, random(5) + 10);
				AddPlayerMoney(playerid, -150, -1);
				AcrescentarLucro(8,50);
			    KillTimer(TimerBebida[playerid]);
				TimerBebida[playerid] = SetTimerEx("Bebado",10000,0,"d",playerid);
 				return 1;
			}
			case 5:
			{
			    if(GetPlayerServerMoney(playerid) < 10){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para pagar o X-Bacon.");
					return 1;
				}
			    if(pStats[playerid][Alcool] > 0){
				   	pStats[playerid][Alcool] = pStats[playerid][Alcool]-1;
			 	}
				SendClientMessage(playerid, COLOR_BARMAN, "Você recebeu um X-Bacon. Bom Lanche.");
				ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
				AddPlayerHealth(playerid, random(5) + 10);
				SendClientMessage(playerid, COLOR_WHITE, "Sua fome foi diminuída...");
				pStats[playerid][Fome] -= 5;
				if(pStats[playerid][Fome] < 0)
				{
				    pStats[playerid][Fome] = 0;
				}
				AddPlayerMoney(playerid, -40, -1);
				AcrescentarLucro(8,20);
 				return 1;
			}
			case 6:
			{
			    if(GetPlayerServerMoney(playerid) < 5){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para pagar o X-Burger.");
					return 1;
				}
			    if(pStats[playerid][Alcool] > 0){
				   	pStats[playerid][Alcool] = pStats[playerid][Alcool]-1;
			 	}
				SendClientMessage(playerid, COLOR_BARMAN, "Você recebeu um X-Burger. Bom Lanche.");
				ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
				AddPlayerHealth(playerid, random(5) + 10);
				SendClientMessage(playerid, COLOR_WHITE, "Sua fome foi diminuída...");
				pStats[playerid][Fome] -= 5;
				if(pStats[playerid][Fome] < 0)
				{
				    pStats[playerid][Fome] = 0;
				}
				AddPlayerMoney(playerid, -40, -1);
				AcrescentarLucro(8,10);
 				return 1;
			}
			case 7:
			{
			    if(GetPlayerServerMoney(playerid) < 6){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para pagar o X-Salada.");
					return 1;
				}
			    if(pStats[playerid][Alcool] > 0){
				   	pStats[playerid][Alcool] = pStats[playerid][Alcool]-1;
			 	}
				SendClientMessage(playerid, COLOR_BARMAN, "Você recebeu um X-Salada. Bom Lanche.");
				ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
				AddPlayerHealth(playerid, random(5) + 10);
				SendClientMessage(playerid, COLOR_WHITE, "Sua fome foi diminuída...");
				pStats[playerid][Fome] -= 5;
				if(pStats[playerid][Fome] < 0)
				{
				    pStats[playerid][Fome] = 0;
				}
				AddPlayerMoney(playerid, -30, -1);
				AcrescentarLucro(8,12);
 				return 1;
			}
			case 8:
			{
				SendClientMessage(playerid, COLOR_BARMAN, "Volte sempre.");
 				return 1;
			}
		}
	}
	SetPlayerControl(playerid, false);
	if(GetPlayerMenu(playerid) == VendoDrogas && IsValidMenu(VendoDrogas)) {
	    switch(row){
	        case 0:
			{
				HideMenuForPlayer(VendoDrogas,playerid);
				MaconhaEsc[playerid] =1;
				ShowMenuForPlayer(QuantidadeDrog,playerid);
				return 1;
			}
			case 1:
			{
				HideMenuForPlayer(VendoDrogas,playerid);
				HeroinaEsc[playerid] =1;
				ShowMenuForPlayer(QuantidadeDrog,playerid);
				return 1;
			}
			case 2:
			{
				HideMenuForPlayer(VendoDrogas,playerid);
				CocainaEsc[playerid] =1;
				ShowMenuForPlayer(QuantidadeDrog,playerid);
				return 1;
			}
			case 3:
			{
			    SetPlayerControl(playerid,1);
				return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == QuantidadeDrog && IsValidMenu(QuantidadeDrog)){
	    switch(row){
	        case 0:
			{
				if(MaconhaEsc[playerid] == 1){
				    if(MaconhaMao[playerid] <= 2){
				        SetPlayerControl(playerid,1);
					    MaconhaMao[playerid] = MaconhaMao[playerid] + 1;
					    format(string,sizeof(string),"Você pegou mais 1 papelote de Maconha agora você tem %d papelote(s) de Maconha.",MaconhaMao);
					    SendClientMessage(playerid, COLOR_TRAFICANTE, string);
					    MaconhaEsc[playerid] =0;
					    return 1;
					} else {
					    SendClientMessage(playerid, COLOR_GRAY, "Você já está com os bolsos cheios de maconha, só pode levar 3 papelotes");
						SetPlayerControl(playerid,1);
						MaconhaEsc[playerid] =0;
					}
				}
				else if(HeroinaEsc[playerid] == 1){
					if(HeroinaMao[playerid] <= 2){
					    SetPlayerControl(playerid,1);
					    HeroinaMao[playerid] = HeroinaMao[playerid] + 1;
					    format(string,sizeof(string),"Você pegou mais 1 papelote de Heroína agora você tem %d papelote(s) de Heroína.",HeroinaMao);
					    SendClientMessage(playerid, COLOR_TRAFICANTE, string);
					    HeroinaEsc[playerid] =0;
					    return 1;
					} else {
					    SendClientMessage(playerid, COLOR_GRAY, "Você já está com os bolsos cheios de heroína, só pode levar 3 papelotes");
						SetPlayerControl(playerid,1);
						HeroinaEsc[playerid] =0;
					}
				}
				else if(CocainaEsc[playerid] == 1){
				    if(CocainaMao[playerid] <= 2){
				    	SetPlayerControl(playerid,1);
					    CocainaMao[playerid] = CocainaMao[playerid] + 1;
					    format(string,sizeof(string),"Você pegou mais 1 papelote de Cocaína agora você tem %d papelote(s) de Cocaína.",CocainaMao);
					    SendClientMessage(playerid, COLOR_TRAFICANTE, string);
					    CocainaEsc[playerid] =0;
					    return 1;
					} else {
					    SendClientMessage(playerid, COLOR_GRAY, "Você já está com os bolsos cheios de cocaina, só pode levar 3 papelotes");
						SetPlayerControl(playerid,1);
						CocainaEsc[playerid] =0;
					}
				}
			}
			case 1:
			{
				if(MaconhaEsc[playerid] == 1){
					if(MaconhaMao[playerid]+2 <= 3){
						SetPlayerControl(playerid,1);
					    MaconhaMao[playerid] = MaconhaMao[playerid] + 2;
						SendClientMessage(playerid,COLOR_TRAFICANTE, "Você pegou mais 2 papelotes de Maconha agora você tem 3 papelotes.");
					    MaconhaEsc[playerid] =0;
					    SetPlayerControl(playerid,0);
					    return 1;
					} else {
					    SendClientMessage(playerid, COLOR_GRAY, "Você já está com os bolsos cheios de maconha, só pode levar 3 papelotes");
						SetPlayerControl(playerid,1);
						MaconhaEsc[playerid] =0;
					}
				}
				else if(HeroinaEsc[playerid] == 1){
				    if(HeroinaMao[playerid]+2 <= 3){
					    SetPlayerControl(playerid,1);
					    HeroinaMao[playerid] = HeroinaMao[playerid] + 2;
						SendClientMessage(playerid,COLOR_TRAFICANTE, "Você pegou mais 2 papelotes de Heroína agora você tem 3 papelotes.");
         				HeroinaEsc[playerid] =0;
					    return 1;
					} else {
					    SendClientMessage(playerid, COLOR_GRAY, "Você já está com os bolsos cheios de heroina, só pode levar 3 papelotes");
						SetPlayerControl(playerid,1);
						HeroinaEsc[playerid] =0;
					}
				}
				else if(CocainaEsc[playerid] == 1){
					if(CocainaMao[playerid]+2 <= 3){
					    SetPlayerControl(playerid,1);
					    HeroinaMao[playerid] = HeroinaMao[playerid] + 2;
						SendClientMessage(playerid,COLOR_TRAFICANTE, "Você pegou mais 2 papelotes de Cocaína agora você tem 3 papelotes.");
					    CocainaEsc[playerid] =0;
					    return 1;
					} else {
					    SendClientMessage(playerid, COLOR_GRAY, "Você já está com os bolsos cheios de cocaina, só pode levar 3 papelotes");
						SetPlayerControl(playerid,1);
						CocainaEsc[playerid] =0;
					}
				}
			}
			case 2:
			{
				if(MaconhaEsc[playerid] == 1){
				    if(MaconhaMao[playerid] == 0){
				        SetPlayerControl(playerid,1);
						MaconhaMao[playerid] = MaconhaMao[playerid] + 3;
						SendClientMessage(playerid,COLOR_TRAFICANTE, "Você pegou 3 papelotes de Maconha.");
					    MaconhaEsc[playerid] =0;
					    return 1;
					} else {
					    SendClientMessage(playerid, COLOR_GRAY, "Você já está com os bolsos cheios de maconha, só pode levar 3 papelotes");
						SetPlayerControl(playerid,1);
						MaconhaEsc[playerid] =0;
					}
				}
				else if(HeroinaEsc[playerid] == 1){
				    if(HeroinaMao[playerid] == 0){
				        SetPlayerControl(playerid,1);
						HeroinaMao[playerid] = HeroinaMao[playerid] + 3;
						SendClientMessage(playerid,COLOR_TRAFICANTE, "Você pegou 3 papelotes de Heroína.");
					    HeroinaEsc[playerid] =0;
					    return 1;
					} else {
					    SendClientMessage(playerid, COLOR_GRAY, "Você já está com os bolsos cheios de heroina, só pode levar 3 papelotes");
						SetPlayerControl(playerid,1);
						HeroinaEsc[playerid] =0;
					}
				}
				else if(CocainaEsc[playerid] == 1){
				    if(CocainaMao[playerid] == 0){
				        SetPlayerControl(playerid,1);
						CocainaMao[playerid] = CocainaMao[playerid] + 3;
						SendClientMessage(playerid,COLOR_TRAFICANTE, "Você pegou 3 papelotes de Cocaína.");
					    CocainaEsc[playerid] = 0;
					    return 1;
					} else {
					    SendClientMessage(playerid, COLOR_GRAY, "Você já está com os bolsos cheios de cocaina, só pode levar 3 papelotes");
						SetPlayerControl(playerid,1);
						CocainaEsc[playerid] = 0;
					}
				}
			}
			case 3:
			{
			    return 1;
			}
		}
		return 1;
	}
	if(GetPlayerMenu(playerid) == CargaGeral && IsValidMenu(CargaGeral)) {
	    switch(row){
	        case 0:
			{
				new vehid = GetPlayerVehicleID(playerid);
				new trailerid = GetVehicleTrailer(vehid);
   				if(GetVehicleModel(trailerid) != 435){
				    SendClientMessage(playerid, COLOR_CAMINHONEIRO, "Você não está com o Trailer correto!");
				    SetPlayerControl(playerid,1);
				    return 1;
				}
				GameTextForPlayer(playerid, "~w~Carregando...",15000,0);
		    	SendClientMessage(playerid,COLOR_CAMINHONEIRO,"O Trailer está sendo Carregado, aguarde o Carregamento para ir deixar a carga.");
				SetTimerEx("CarregamentoGeral",15000,0,"d",playerid);
			}
			case 1:
			{
				new vehid = GetPlayerVehicleID(playerid);
				new trailerid = GetVehicleTrailer(vehid);
	   			if(GetVehicleModel(trailerid) != 584){
				    SendClientMessage(playerid, COLOR_CAMINHONEIRO, "Você não está com o Trailer correto!");
	   			    SetPlayerControl(playerid,1);
				    return 1;
				}
			    SendClientMessage(playerid,COLOR_CAMINHONEIRO,"O Trailer de Gás precisa ser abastecido na Refinaria, vá até ela para carregar.");
	            SetPlayerControl(playerid,1);
				SetPlayerCheckpoint(playerid,251.5558, 1395.9694, 10.1558,5.0);
				CheckpointStatus[playerid] = CARREGANDO_COMBUSTIVEL;
				return 1;
			}
			case 2:
			{
			    SendClientMessage(playerid,COLOR_CAMINHONEIRO,"O Carregamento de drogas é feito no local indicado no radar.");
	    		CheckpointStatus[playerid] = COLOCANDO_DROGAS;
				SetPlayerControl(playerid,1);
				new drogas = random(4);
				SetPlayerCheckpoint(playerid,DrogasAbastecer[drogas][0],DrogasAbastecer[drogas][1],DrogasAbastecer[drogas][2],3.0);
				return 1;
			}
			case 3:
			{
				new vehid = GetPlayerVehicleID(playerid);
				if(GetVehicleModel(vehid) != 414){
					SendClientMessage(playerid, COLOR_GRAY, "Ei, você não está com o caminhão certo para esse tipo de transporte!");
			    	SetPlayerControl(playerid,1);
					return 1;
				}
			    SetPlayerControl(playerid,0);
			    GameTextForPlayer(playerid,"~w~Carregando...",20000,0);
			    SetTimerEx("CarregandoRoupas",20000,0,"d",playerid);
			    SendClientMessage(playerid, COLOR_CAMINHONEIRO, "Aguarde enquanto o caminhão está sendo carregado...");
				return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == Properties && IsValidMenu(Properties)) {
	    switch(row){
			case 10:
			{
			    PropertiesMenuStart += 11;
			    DestroyMenuEx(Properties);
            	Properties = CreateMenu("Propriedades",2,2,150,100,20);
            	SetMenuColumnHeader(Properties,0,"Nome");
	    		SetMenuColumnHeader(Properties,1,"Valor");
            	for(new p = PropertiesMenuStart; p < PropertiesMenuStart + 11; p++)
            	{
            	    if(p >= sizeof Propriedades) break;
            	    new value[64];
            	    valstr(value, Propriedades[p][PropValue]);
					AddMenuItem(Properties, 0, Propriedades[p][PropName]);
					AddMenuItem(Properties, 1, value);
            	}
            	if(PropertiesMenuStart + 11 < sizeof Propriedades)
            	{
            		AddMenuItem(Properties, 0, "Proximo");
            		AddMenuItem(Properties, 1, "->");
				}
				ShowMenuForPlayer(Properties,playerid);
   				SetPlayerControl(playerid,0);
   				return 1;
			}
			default:
			{
			    PropriedadeSelecionada[playerid] = PropertiesMenuStart + row;
			    ShowMenuForPlayer(ConfirmacaoNegocio, playerid);
			    SetPlayerControl(playerid, 0);
			    PropertiesMenuStart = 1;
			    return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == ConfirmacaoNegocio && IsValidMenu(ConfirmacaoNegocio)) {
	    switch(row){
	        case 0:
			{
			    new prop = PropriedadeSelecionada[playerid];
			    if(prop < 1 || prop >= sizeof Propriedades)
				{
				 	return 1;
				}
				if(!compare(propStats[prop][Dono1], "NONE"))
				{
				    format(string, sizeof string, "Essa propriedade já possui um dono: %s", propStats[prop][Dono1]);
					SendClientMessage(playerid, COLOR_GRAY, string);
					SendClientMessage(playerid, COLOR_GRAY, "Para adquiri-la, negocie com ele.");
					SetPlayerControl(playerid, true);
					return 1;
				}
				if(GetPlayerServerMoney(playerid) < Propriedades[prop][PropValue])
				{
					format(string, sizeof string, "Você não tem dinheiro para comprar a propriedade. Valor: $%d,00 dólares.", Propriedades[prop][PropValue]);
					SendClientMessage(playerid, COLOR_GRAY, string);
					SetPlayerControl(playerid, true);
					return 1;
				}
				SetPropertyOwner(prop, playerid);
				AddPlayerMoney(playerid, -Propriedades[prop][PropValue], -1);
				format(string, sizeof string, "Propriedade \"%s\" adquirida no valor de $%d,00 dólares.", Propriedades[prop][PropName], Propriedades[prop][PropValue]);
				SendClientMessage(playerid, COLOR_BLUE, string);
				SendClientMessage(playerid, COLOR_WHITE, "Parabéns! Você tem uma nova responsabilidade agora... Boa Sorte!");
				SetPlayerControl(playerid, true);
				return 1;
			}
			case 1:
			{
				SetPlayerControl(playerid,1);
			}
		}
		SetPlayerControl(playerid,1);
	}
	SetPlayerControl(playerid, true);
	if(GetPlayerMenu(playerid) == Sorvetes && IsValidMenu(Sorvetes)) {
	    switch(row){
	        case 0: ComprarSorvete(playerid,0);
	        case 1: ComprarSorvete(playerid,1);
	        case 2: ComprarSorvete(playerid,2);
	        case 3: ComprarSorvete(playerid,3);
	        case 4: ComprarSorvete(playerid,4);
	        case 5: ComprarSorvete(playerid,5);
	        case 6: ComprarSorvete(playerid,6);
	        case 7: ComprarSorvete(playerid,7);
	        case 8: ComprarSorvete(playerid,8);
		}
	}
	if(GetPlayerMenu(playerid) == Sorvetes2 && IsValidMenu(Sorvetes2)) {
	    switch(row){
	        case 0: ComprarSorvete2(playerid,0);
	        case 1: ComprarSorvete2(playerid,1);
	        case 2: ComprarSorvete2(playerid,2);
		}
	}
	if(GetPlayerMenu(playerid) == Profs && IsValidMenu(Profs))
	{
	    switch(row)
	    {
	    	case 8:
			{
			    ProfsMenuStart += 8;
			    DestroyMenuEx(Profs);
            	Profs = CreateMenu("Profisso",2,2,150,100,20);
            	SetMenuColumnHeader(Profs,0,"Profissao");
	    		SetMenuColumnHeader(Profs,1,"Level");
            	for(new p = ProfsMenuStart; p < ProfsMenuStart + 8; p++)
            	{
            	    if(p >= sizeof Profissoes) break;
            	    new value[64];
            	    valstr(value, Profissoes[p][ProfLevel]);
					AddMenuItem(Profs, 0, Profissoes[p][ProfName]);
					AddMenuItem(Profs, 1, value);
            	}
            	if(ProfsMenuStart + 8 < sizeof Profissoes)
            	{
            		AddMenuItem(Profs, 0, "Proximo");
            		AddMenuItem(Profs, 1, "->");
				}
				ShowMenuForPlayer(Profs,playerid);
   				SetPlayerControl(playerid,0);
   				return 1;
			}
			default:
			{
			    ConfirmarProfissao(playerid, ProfsMenuStart + row);
			    ProfsMenuStart = 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == Casas && IsValidMenu(Casas))
	{
	    switch(row)
	    {
			default:
			{
			    DestroyMenuEx(Casas);
				SetPlayerControl(playerid,0);
				SelectedHouse[playerid] = GetHouses(playerid, GetPHouseKeyID(playerid,row));
				ShowMenuForPlayer(CasaOpc,playerid);
 			}
		}
	}
	return 1;
}
public CarregandoRoupas(playerid)
{
	SetPlayerControl(playerid,1);
	CarregamentoRoupas[playerid] = 1;
	SendClientMessage(playerid, COLOR_CAMINHONEIRO, "Caminhão carregado! Agora vá até o CP indicado em seu mapa entregar as roupas!");
	DisablePlayerCheckpoint(playerid);
	new rand = random(5);
	if(rand == 0){
		SetPlayerCheckpoint(playerid,2242.1575,-1663.0786,15.4766,4.0);
	} else if(rand == 1){
		SetPlayerCheckpoint(playerid,501.9182,-1354.9250,16.1328,4.0);
	} else if(rand == 2){
		SetPlayerCheckpoint(playerid,448.9166,-1480.4089,30.6474,4.0);
	} else if(rand == 3){
		SetPlayerCheckpoint(playerid,455.7734,-1500.6456,31.0486,4.0);
	} else if(rand == 4){
		SetPlayerCheckpoint(playerid,2112.4500,-1214.8584,23.9678,4.0);
	}
	CheckpointStatus[playerid] = TRANSPORTANDO_ROUPAS;
}
stock ComprarCarro(playerid)
{
    new string[128];
    if(!IsPlayerInAnyVehicle(playerid)){
    	SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
    	SetPlayerControl(playerid,1);
        RemovePlayerFromVehicle(playerid);
        return 1;
	}
	if(GetQtVehicles(playerid) >= MAX_PLAYER_VEHICLES){
		SendClientMessage(playerid, COLOR_GRAY, "Limite de veículos por jogador excedido pelo gamemode.");
        SetPlayerControl(playerid,1);
		return 1;
	}
	if(!IsVehicleOnSale(GetPlayerVehicleID(playerid))){
		SendClientMessage(playerid, COLOR_GRAY, "Esse veículo não está à venda!");
		SetPlayerControl(playerid,1);
	    RemovePlayerFromVehicle(playerid);
		return 1;
	}
	if(GetPlayerServerMoney(playerid) < GetVehiclePrice(GetVehicleModel(GetPlayerVehicleID(playerid)))){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro!");
	    format(string,sizeof(string),"Esse veículo custa: $%d",GetVehiclePrice(GetVehicleModel(GetPlayerVehicleID(playerid))));
		SendClientMessage(playerid, COLOR_GRAY, string);
		SetPlayerControl(playerid,1);
	    RemovePlayerFromVehicle(playerid);
		return 1;
	}
	else{
	    AddPlayerMoney(playerid,-GetVehiclePrice(GetVehicleModel(GetPlayerVehicleID(playerid))),-1);
	    new Float:X,Float:Y,Float:Z,Float:ang;
	    X = 554.0287;
		Y = -1248.5660;
		Z = 16.4709;
		ang = 298.9612;
		new cor1,cor2;
		cor1 = random(126);
		cor2 = random(126);
		format(string,sizeof(string),"Você comprou esse veículo no valor de $%d",GetVehiclePrice(GetVehicleModel(GetPlayerVehicleID(playerid))));
		SendClientMessage(playerid, COLOR_WHITE, string);
		SendClientMessage(playerid, COLOR_WHITE, "Seu carro está na frente da concessionária, vá busca-lo.");
		SendClientMessage(playerid, COLOR_WHITE, "Leve ele para um novo local de spawn. Comando: /estacionar");
        AcrescentarLucro(14,GetVehiclePrice(GetVehicleModel(GetPlayerVehicleID(playerid)))/10);
		RemovePlayerFromVehicle(playerid);
		SetPlayerControl(playerid,1);
	   	SetTimerEx("SetCar",50,0,"dffffddd",GetVehicleModel(GetPlayerVehicleID(playerid)),X,Y,Z,ang,cor1,cor2,playerid);
	   	SetTimerEx("TransferCarPatio",500000,0,"dd",GetPlayerVehicleID(playerid),playerid);
	   	return 1;
	}
}

public TransferCarPatio(vehicleid,playerid){
	new pos = random(17);
	SetVehiclePos(vehicleid,PosCarPatio[pos][0],PosCarPatio[pos][1],PosCarPatio[pos][2]);
	SetVehicleZAngle(vehicleid,PosCarPatio[pos][3]);
    SaveCarPos(vehicleid,PosCarPatio[pos][0],PosCarPatio[pos][1],PosCarPatio[pos][2],PosCarPatio[pos][3]);
   	new donovehicle[128];
   	set(donovehicle,vStats[vehicleid][VDono]);
   	if(IsStringAName(donovehicle)){
 		SendClientMessage(IDName(donovehicle), COLOR_MECANICO, "OBS: Você não trocou a pos do seu veículo, ele está no pátio de veículos da concessionária!");
 		SendClientMessage(IDName(donovehicle), COLOR_MECANICO, "OBS: Vá buscá-lo para trocar seu spawn! ( Comando: /estacionar ).");
	}
}
public RespawnVehicle(vehicleid)
{
	if(vehicleid == TuneVehicle) return ;
	for(new i = 0; i < MAX_SLOTS; i++)
	{
		if(IsPlayerInVehicle(i, vehicleid))
		{
		    return ;
		}
	}
	SetVehicleToRespawn(vehicleid);
}
public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(newstate == PLAYER_STATE_DRIVER)
	{
	    if(vStats[GetPlayerVehicleID(playerid)][VRadio] == 0){
	        PlayerPlaySound(playerid, 1181, 0.0, 0.0, 0.0);
	    }
	    if(vStats[GetPlayerVehicleID(playerid)][Combustivel] == 0)
	   	{
			SendClientMessage(playerid, COLOR_GRAY, "Esse veículo está sem gasolina, você pode abastece-lo com um galão ou chamando um frentista.");
			SendClientMessage(playerid, COLOR_GRAY, "Para sair do veículo pressione ENTER ou F.");
			SetPlayerControl(playerid, 0);
			PodeSair[playerid] = 1;
			return 1;
	    }
	    TextDrawShowForPlayer(playerid, Speedo[playerid]);
	    if(GetPlayerVehicleID(playerid) < AmountServerVehicles)
	    {
	        if(IsKidnapping(GetPlayerVehicleID(playerid)) && pStats[playerid][Prof] == ASSASSINO)
			{
			    SendClientMessage(playerid, COLOR_ASSASSINO, "Você entrou em um carro de sequestro, quando sequestrar alguém coloque nele.");
			}
			else if(IsMotoPizza(GetPlayerVehicleID(playerid)) && pStats[playerid][Prof] == ENTREGADOR_PIZZA)
			{
			    new str[128];
			    format(str, sizeof str, "Essa Moto-Pizza possui %d pizza(s).", PizzasMoto[GetVehicleMotoPizzaID(GetPlayerVehicleID(playerid))]);
			    SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, str);
			}
			KillTimer(VehicleRespawn[GetPlayerVehicleID(playerid)]);
		}
		else
		{
		    if(vStats[GetPlayerVehicleID(playerid)][Confiscado] == 1 && pStats[playerid][Prof] != COP_MILITAR && pStats[playerid][Prof] != COP_RODOVIARIO && pStats[playerid][Prof] != COP_SWAT && pStats[playerid][Prof] != DELEGADO)
			{
			    RemovePlayerFromVehicle(playerid);
			    SendClientMessage(playerid, COLOR_GRAY, "Esse veículo está confiscado, você não pode usá-lo...");
			}
	    	else if(!compare(vStats[GetPlayerVehicleID(playerid)][VChave],PlayerName(playerid)) && GetPlayerVehicleID(playerid) != UsingChaveMestra[playerid])
			{
			    if(!compare(PlayerName(playerid), vStats[GetPlayerVehicleID(playerid)][VDono]))
			    {
			    	if(pStats[playerid][ChaveMestra] > 0)
					{
				    	SetPlayerControl(playerid, false);
				    	SendClientMessage(playerid, COLOR_WHITE, "Você tem uma chave mestra, para usa-la digite /usarchavemestra e para não usa-la digite /naousarchavemestra");
						PChaveMestra[playerid] = 1;
						PodeSair[playerid] = 1;
					}
					else
					{
					    SetPlayerControl(playerid, false);
						SendClientMessage(playerid, COLOR_GRAY, "Você não possui as chaves do veículo para ligá-lo.");
						SendClientMessage(playerid, COLOR_GRAY, "Você pode tentar abri-lo usando chaves mestras, mas se a polícia te pegar você será preso.");
                        SendClientMessage(playerid, COLOR_GRAY, "Saiá dele utilizando as teclas F ou ENTER.");
                        PodeSair[playerid] = 1;
					}
				}
				else
				{
					new string[128];
	    			SendClientMessage(playerid, COLOR_GREEN, "Veículo ligado.");
			        SendClientMessage(playerid, COLOR_GRAY, "Você está utilizando a chave reserva do veículo.");
					format(string,sizeof(string),"A chave original está com: %s.", vStats[GetPlayerVehicleID(playerid)][VChave]);
					SendClientMessage(playerid, COLOR_GRAY, string);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREEN, "Veículo ligado.");
				if(HoraJogo > 5 && HoraJogo < 13)
				{
			    	SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "[Computador de Bordo] Bom-dia senhor.");
			    }
				else if(HoraJogo > 12 && HoraJogo < 19)
				{
			    	SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "[Computador de Bordo] Boa-tarde senhor.");
				}
				else if(HoraJogo > 18 && HoraJogo < 6)
				{
			    	SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "[Computador de Bordo] Boa-noite senhor.");
				}
	 			if(!strcmp(vStats[GetPlayerVehicleID(playerid)][VDono], PlayerName(playerid), false))
				 {
					if(vStats[GetPlayerVehicleID(playerid)][Dividas] > 0)
					{
					    SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "Esse veículo tem multas, pague antes que a polícia o apreenda.");
					}
				}
				if(!compare(PlayerName(playerid),vStats[GetPlayerVehicleID(playerid)][VDono]))
				{
				    SendClientMessage(playerid, COLOR_GREEN, "Você está dirigindo um veículo que não é seu, cuidado.");
				}
			}
		}
	}
	if(newstate==PLAYER_STATE_ONFOOT){

		if(PropostaCard[playerid]==1){
			PropostaCard[playerid] = 0;
	  		SendClientMessage(playerid, COLOR_WHITE, "Você saiu do veículo e não usou o Virtual Card!");
		}
	   	if(Transparent[playerid] == 1)
	   	{
	   	    SetPlayerTransparent(playerid, 0);
 		}
		if(isTowtruck[playerid] == 1){
	 	    isTowtruck[playerid]=0;
		    Reboques--;
		}
		if(GPSLigado[playerid] == 1){
		    DisablePlayerCheckpoint(playerid);
		   	CheckpointStatus[playerid] = NONE;
		   	SendClientMessage(playerid, COLOR_WHITE, "Você saiu do veículo e o seu GPS foi desativado.");
		   	GPSLigado[playerid] = 0;
		}
	}
	if(newstate == PLAYER_STATE_PASSENGER){
	    OnPlayerEnterVehicleAsPassenger(playerid,GetPlayerVehicleID(playerid));
	}
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER){
		if(vStats[GetPlayerVehicleID(playerid)][Fume] == 1){
			if(Transparent[playerid] == 0)
			{
			    SetPlayerTransparent(playerid, 1);
			}
		}
	}
	if(newstate == PLAYER_STATE_DRIVER)
	{
	    if(IsRental(GetPlayerVehicleID(playerid)))
 		{
           	if(CarroAlugado[playerid] == -1)
			{
			    new vehid = GetVehicleRentID(GetPlayerVehicleID(playerid));
			    for(new i = 0; i < MAX_SLOTS; i++){
			        if(IsPlayerConnected(i) && Logado[i] && CarroAlugado[i] == vehid){
			            RemovePlayerFromVehicle(playerid);
			            SendClientMessage(playerid, COLOR_GREEN, "Esse veículo já está alugado para outro jogador, se quiser ele, espere o tempo acabar.");
					}
				}
        	    new string[128];
				SendClientMessage(playerid, COLOR_GREEN, "[LOCADORA] Você entrou em um veículo de aluguel.");
		   		SendClientMessage(playerid, COLOR_GREEN, "[LOCADORA] Caso queira alugá-lo digite /alugar [tempo] caso contrário saiá do veículo.");
				format(string, sizeof(string), "Valor do aluguel: $%d,00 dólares por minuto.",GetVehicleRentValue(GetPlayerVehicleID(playerid)));
				SendClientMessage(playerid, COLOR_WHITE, string);
				SetPlayerControl(playerid, 0);
				PodeSair[playerid] = 1;
   			}
		}
	    new model = GetPlayerVehicleID(playerid);
        if(model == CarroCimento || model == CarroCemiterio || model == CarroPoste)
		{
            if(EntregandoCimento[playerid] == 0 && PegandoCorpos[playerid] == 0 && ArrumandoPostes[playerid] == 0)
			{
			    RemovePlayerFromVehicle(playerid);
			}
		}
   	 	if(PodePegar[playerid] == 1)
		{
			if(pStats[playerid][Prof] == CONTRABANDISTA)
			{
			    if(IsContraband(GetPlayerVehicleID(playerid)))
			    {
				    EntregaCarro[playerid] = 1;
				    GameTextForPlayer(playerid, "~w~Toma o ~r~Carro!", 5000, 1);
					SendClientMessage(playerid, COLOR_LIGHT_RED, "ATENÇÃO! Não bata o carro entregue pelo menos meio íntegro.");
					SetPlayerCheckpoint(playerid,-2212.6379,604.8463,35.3511,3.0);
					CheckpointStatus[playerid] = CONTRABANDO_CARRO2;
				}
				else
				{
				    RemovePlayerFromVehicle(playerid);
				    SendClientMessage(playerid, COLOR_GRAY, "Você não pode pegar esse carro agora.");
				    return 1;
				}
		    }
		}
	    if(EntregaCarro[playerid] == 1)
		{
      		EntregaCarro[playerid] = 0;
      		NaoSair[playerid] = 1;
			return 1;
		}
	    new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
	  	if(modelo == 481 || modelo == 509 || modelo == 510 || modelo == 594)
 		{
			SendClientMessage(playerid, COLOR_GREEN, "[INFO] Ande com a bicicleta na calçada ou na beirada da calçada.");
			SendClientMessage(playerid, COLOR_GREEN, "[INFO] Se um policial ver você que nem doido na rua, já sabe...");
	    	return 1;
	    }
    	if(GetPlayerVehicleID(playerid) < AmountServerVehicles){
            if(pStats[playerid][HabTerrestre] == 0)
			{
                if(!IsPlayerInBoat(playerid))
                {
					if(!IsPlayerInTruck(playerid))
					{
						if(!IsPlayerInVehicleAir(playerid))
						{
							if(!IsAutoSchool(GetPlayerVehicleID(playerid)))
							{
								if(!IsRental(GetPlayerVehicleID(playerid)))
								{
									if(!IsVehicleOnSale(GetPlayerVehicleID(playerid)))
									{
										SendClientMessage(playerid, COLOR_WHITE, "[AVISO] Você está dirigindo sem habilitação um veículo do servidor, se a polícia te pegar você poderá ser preso.");
										KillTimer(TimerCarrinho[playerid]);
										TimerCarrinho[playerid] = SetTimerEx("CarroTonto",60000,0,"d",playerid);
						    		}
						    	}
					    	}
						}
		    		}
				}
		    }
	    }
		if(!IsVehicleOnSale(GetPlayerVehicleID(playerid)))
		{
		    if(pStats[playerid][Alcool] > 3)
			{
				SendClientMessage(playerid, COLOR_GREEN, "[AVISO] Você está dirigindo bêbado, poderá ser preso. Pegue um taxi.");
			}
		}
	}
	if(newstate == PLAYER_STATE_ONFOOT)
	{
	    if(DerbyIniciado[playerid] == 1 && PlayerDerby[playerid] == 1)
		{
        	DerbyIniciado[playerid] = 0;
        	SendClientMessage(playerid, COLOR_GRAY, "[ESTÁDIO] Você foi desclassificado pois abandonou seu carro, obrigado pela participação.");
			GameTextForPlayer(playerid,"~r~Desclassificado!",3000,4);
	   	   	new string[128];
			format(string, sizeof(string), "[ESTÁDIO] %s foi desclassificado pois saiu do seu carro, sua posição: %d/%d", PlayerName(playerid),QtDerbeiro(),contagemof);
			SendClientMessageToAll(COLOR_PALHA, string);
			PlayerDerby[playerid] = 0;
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, 2693.9199,-1701.8795,11.0741);
 		}
 		PodeSair[playerid] = 0;
	    TextDrawHideForPlayer(playerid, Speedo[playerid]);
	    TextDrawSetString(Speedo[playerid], " ");
	    if(Taximetro[playerid][0] == 1){
			SendClientMessage(playerid, COLOR_PALHA, "Espero que tenha gostado. Volte sempre");
			SendClientMessage(Taximetro[playerid][1], COLOR_TAXISTA, "Você recebeu o valor da corrida até aqui.");
			PlayerPay(playerid, Taximetro[playerid][1], PrecoCorrida[playerid]);
			PrecoCorrida[playerid] = 0;
			Taximetro[playerid][1] = 0;
			Taximetro[playerid][0] = 0;
		}
		else if(MTaximetro[playerid][0] == 1){
		    SendClientMessage(playerid, COLOR_PALHA, "Espero que tenha gostado. Volte sempre.");
		    SendClientMessage(MTaximetro[playerid][1], COLOR_MOTO_TAXISTA, "Você recebeu o valor da corrida até aqui.");
		    PlayerPay(playerid, MTaximetro[playerid][1], PrecoCorrida[playerid]);
		    PrecoCorrida[playerid] = 0;
		    MTaximetro[playerid][1] = 0;
		    MTaximetro[playerid][0] = 0;
		}
	}
	if(newstate==PLAYER_STATE_DRIVER){
		if(IsTowtruck(GetPlayerVehicleID(playerid))){
			if(pStats[playerid][Prof] == MECANICO){
		        isTowtruck[playerid]=1;
		        Reboques++;
			}
		}
	    if(IsVehicleOnSale(GetPlayerVehicleID(playerid))){
    	    new string[256];
			format(string,sizeof(string),"$%d",GetVehiclePrice(GetVehicleModel(GetPlayerVehicleID(playerid))));
            DestroyMenuEx(BuyCar);
			BuyCar = CreateMenu("Opcoes",2,30.0,140.0,220.0,0.0);
			SetMenuColumnHeader(BuyCar,0,"Veiculo a venda");
			AddMenuItem(BuyCar,0,"Comprar");
			AddMenuItem(BuyCar,0,"Sair");
			AddMenuItem(BuyCar,1,string);
            ShowMenuForPlayer(BuyCar,playerid);
			SetPlayerControl(playerid, 0);
		}
	}
	return 1;
}
stock GetVehicleSecurityID(vehicleid)
{
    for(new i = 0; i < sizeof Security; i++)
	{
		if(vehicleid == Security[i]) return i;
	}
	return -1;
}
stock GetVehicleMotoPizzaID(vehicleid)
{
	for(new i = 0; i < sizeof MotoPizza; i++)
	{
		if(vehicleid == MotoPizza[i]) return i;
	}
	return -1;
}
stock GetVehicleStretchID(vehicleid)
{
	for(new i = 0; i < sizeof Stretch; i++)
	{
		if(vehicleid == Stretch[i]) return i;
	}
	return -1;
}
stock GetVehicleRentID(vehicleid)
{
	for(new i = 0; i < sizeof CarroAluguel; i++)
	{
		if(vehicleid == CarroAluguel[i]) return i;
	}
	return -1;
}
stock GetVehicleRentValue(vehicleid)
{
    for(new i = 0; i < sizeof CarroAluguel; i++)
	{
		if(vehicleid == CarroAluguel[i]) return CarPrice[i];
	}
	return -1;
}
public TerminarCarregamento(playerid){
	KillTimer(RetomarTrabalho[playerid]);
	if(FazendaInProgress[playerid] == 1)
	{
		GameTextForPlayer(playerid, "~r~colheita cancelada!", 3000, 4);
		FazendaInProgress[playerid] = 0;
	    return 0;
    }
    if(PescaInProgress[playerid] == 1)
	{
		GameTextForPlayer(playerid, "~r~pesca cancelada!", 3000, 4);
		PescaInProgress[playerid] = 0;
	    return 0;
    }
	GameTextForPlayer(playerid, "~r~trabalho cancelado!", 3000, 4);
	VeiculoTrabalho[playerid] = -1;
    GeralCar[playerid] = 0;
    Pedras[playerid] = 0;
    PegouGrana[playerid] = 0;
    EntregaLimo[playerid] = 0;
    CarregamentoRoupas[playerid] = 0;
    NaoSair[playerid] = 0;
    EntregandoEncomendas[playerid] = 0;
    DisablePlayerCheckpoint(playerid);
    DisablePlayerRaceCheckpoint(playerid);
    RaceCheckpointStatus[playerid] = RNONE;
    CheckpointStatus[playerid] = NONE;
    TerminalCorrida[playerid] = 0;
    return 1;
}
public TerminarCancelamento(playerid){
	if(AcabeiDeRecusar[playerid] == 2){
	 	SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Espere que você tenha apreendido a lição, agora já pode contrabandear novamente");
	}
	AcabeiDeRecusar[playerid] = 0;
	return 1;
}
stock IsVehicleInArea(CarID, Float:MinX, Float:MinY, Float:MaxX, Float:MaxY)
{
    new Float:X, Float:Y, Float:Z;
    GetVehiclePos(CarID, X, Y, Z);
    if(X >= MinX && X <= MaxX && Y >= MinY && Y <= MaxY) return true;
    return false;
}
stock ProximoAoAngulo(playerid,Float:ang){
	new Float:ang2;
    if(IsPlayerInAnyVehicle(playerid)) GetVehicleZAngle(GetPlayerVehicleID(playerid),ang2);
    else GetPlayerFacingAngle(playerid,ang2);
    if(ang2 >= ang - 2.0 && ang2 <= ang + 2.0) return true;
    return false;
}
stock NextDerby(){
	for(new i = 0; i < sizeof Derby; i++)
	{
		if(!Ocupado[i]) return Derby[i];
	}
	return -1;
}
public CancelarDerby(playerid){
	if(OficializarParticipacao[playerid] == 1){
		CheckpointStatus[playerid] = NONE;
		OficializarParticipacao[playerid] = 0;
	}
}
stock SetPlayerNextRace1CP(playerid)
{
    new string[128];
    DisablePlayerRaceCheckpoint(playerid);
	if(rcp[playerid] < sizeof(RaceCheckpoints1) - 1){
		SetPlayerRaceCheckpoint(
		playerid,
		0,
		RaceCheckpoints1[rcp[playerid]][0],
		RaceCheckpoints1[rcp[playerid]][1],
		RaceCheckpoints1[rcp[playerid]][2],
		RaceCheckpoints1[rcp[playerid]+1][0],
		RaceCheckpoints1[rcp[playerid]+1][1],
		RaceCheckpoints1[rcp[playerid]+1][2],
		5.0
		);
		RaceCheckpointStatus[playerid] = RACE1;
		rcp[playerid]++;
		format(string,sizeof(string),"~w~ %d/%d",rcp[playerid],sizeof(RaceCheckpoints1));
		GameTextForPlayer(playerid,string,100000,1);
	}
	else{
	    RaceCheckpointStatus[playerid] = RACE1_END;
	    format(string,sizeof(string),"~r~ %d/%d",sizeof(RaceCheckpoints1),sizeof(RaceCheckpoints1));
	    GameTextForPlayer(playerid,string,100000,1);
	    SetPlayerRaceCheckpoint(
		playerid,
		1,
		RaceCheckpoints1[rcp[playerid]][0],
		RaceCheckpoints1[rcp[playerid]][1],
		RaceCheckpoints1[rcp[playerid]][2],
		0.0,
		0.0,
		0.0,
		5.0
		);
	}
}
public EncerrarAluguel(playerid){
	KillTimer(TempoAluguel[playerid]);
	SetVehicleToRespawn(CarroAluguel[CarroAlugado[playerid]]);
	CarroAlugado[playerid] = -1;
	SendClientMessage(playerid, COLOR_GREEN, "[LOCADORA] Seu tempo de aluguel acabou, caso queira mais venha na Locadora, obrigado!");
}
public OnPlayerEnterRaceCheckpoint(playerid)
{
	if (gdebug >=1){ printf("OnPlayerEnterRaceCheckpoint(%d)",playerid);}
	switch(RaceCheckpointStatus[playerid])
	{
	    case RACE1:
	    {
	    	SetPlayerNextRace1CP(playerid);
	    	return 1;
		}
		case RACE1_END:
		{
		    DisablePlayerRaceCheckpoint(playerid);
			SetPlayerControl(playerid,0);
    	    SetPlayerControl(playerid,1);
			rcp[playerid] = 0;
		    PosicaoRace1[lastposition] = playerid;
		    format(positionname[lastposition],MAX_PLAYER_NAME,PlayerName(playerid));
		    lastposition++;
			new string[128];
			format(string,sizeof(string),"Você chegou na %dª posição da corrida...",lastposition);
			SendClientMessage(playerid, COLOR_WHITE, string);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid, " ", 10000, 1);
			return 1;
		}
		case ENTREGANDO_PRISIONEIRO1:
		{
    	    new plid=AlgemaInfo[playerid][1],Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:dx,Float:dy,Float:dz,Float:distance;
			GetPlayerPos(playerid,x,y,z);
    	    GetPlayerPos(plid,x2,y2,z2);
    	    dx=x-x2;
			dy=y-y2;
			dz=z-z2;
			distance=(dx*dx+dy*dy+dz*dz);
			if(distance>8){
			    SendClientMessage(playerid, COLOR_GRAY, "Traga o prisioneiro junto com você...");
			    return 1;
			}
		    DisablePlayerRaceCheckpoint(playerid);
			SendClientMessage(playerid, COLOR_COP_SWAT, "Leve o prisioneiro para dentro da Delegacia");
			SetPlayerRaceCheckpoint(playerid,1,1553.1730,-1675.0323,16.1953,0.0,0.0,0.0,4.0);
			RaceCheckpointStatus[playerid] = ENTREGANDO_PRISIONEIRO2;
			return 1;
		}
		case ENTREGANDO_PRISIONEIRO2:
		{
	    	new plid=AlgemaInfo[playerid][1],Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:dx,Float:dy,Float:dz,Float:distance;
			GetPlayerPos(playerid,x,y,z);
        	GetPlayerPos(plid,x2,y2,z2);
        	dx=x-x2;
			dy=y-y2;
			dz=z-z2;
			distance=(dx*dx+dy*dy+dz*dz);
			if(distance>8){
		   	 	SendClientMessage(playerid, COLOR_GRAY, "Traga o prisioneiro junto com você...");
		   	 	return 1;
			}
			DisablePlayerRaceCheckpoint(playerid);
			SendClientMessage(playerid, COLOR_COP_SWAT, "Leve o prisioneiro para a cela");
			SetPlayerPos(playerid,246.7840,63.9002,1003.6406);
  			SetPlayerInterior(playerid,6);
  			SetPlayerPos(plid,246.7840,63.9002,1003.6406);
  			SetPlayerInterior(plid,6);
			SetPlayerRaceCheckpoint(playerid,1,268.4623,77.3229,1001.0391,0.0,0.0,0.0,4.0);
			RaceCheckpointStatus[playerid] = ENTREGANDO_PRISIONEIRO3;
			return 1;
		}
		case ENTREGANDO_PRISIONEIRO3:
		{
	    	new plid=AlgemaInfo[playerid][1],Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:dx,Float:dy,Float:dz,Float:distance;
			GetPlayerPos(playerid,x,y,z);
        	GetPlayerPos(plid,x2,y2,z2);
        	dx=x-x2;
			dy=y-y2;
			dz=z-z2;
			distance=floatsqroot(dx*dx+dy*dy+dz*dz);
			if(distance>8){
			    SendClientMessage(playerid, COLOR_GRAY, "Traga o prisioneiro junto com você...");
			    return 1;
			}
			Pay(playerid, GetPlayerWantedLevel(plid) * 100);
			DisablePlayerRaceCheckpoint(playerid);
	    	new string[128];
	    	pStats[plid][HorasPreso] /= 2;
			pStats[plid][Preso] = 1;
			pStats[plid][Fianca] = 0;
			SetPlayerControl(plid,1);
  			Algemado[plid]=0;
			Algemou[playerid]=0;
			LevandoJogador[playerid]=0;
			GetCopCars[plid]=INVALID_VEHICLE_ID;
			AlgemaInfo[plid][0]=-1;
	    	AlgemaInfo[playerid][1]=-1;
			CelularBloqueado[playerid] = 0;
			format(string, sizeof(string), "Você foi preso pelo Oficial Sr. %s.", PlayerName(playerid));
			SendClientMessage(plid, COLOR_GRAY, string);
    		SendClientMessage(playerid, COLOR_COP_SWAT, "Prisão concluida");
  			GameTextForPlayer(plid, "~r~preso", 5000, 0);
			format(string, sizeof(string), "[CENTRAL COP] O Oficial Sr %s prendeu %s por %d hora(s) no jogo", PlayerName(playerid), PlayerName(plid), pStats[plid][HorasPreso]);
			SendClientMessagePolicia(COLOR_CENTRAL, string);
			SendClientMessagePolicia(COLOR_CENTRAL, "Senhor Juiz tome par do processo e esclareça os fatos!");
			SendClientMessageJuiz(COLOR_JUIZ, string);
			SendClientMessageJuiz(COLOR_JUIZ, "Senhor Juiz tome par do processo e esclareça os fatos!");
			if(GetPlayerWantedLevel(plid) > 0)
			{
				format(string, sizeof(string), "Você recebeu $%d,00 dólares.", GetPlayerWantedLevel(plid) * 100);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			ConfiscarArmas(plid);
			RaceCheckpointStatus[playerid] = RNONE;
			SavePlayer(PlayerName(plid),plid);
			LogarPlayer(plid);
			return 1;
		}
		case RASTREANDO_CASA:
		{
		    DisablePlayerRaceCheckpoint(playerid);
    		RaceCheckpointStatus[playerid] = RNONE;
		    SendClientMessage(playerid, COLOR_JUIZ, "Você chegou até a casa que possui mandato! Use /arrombarcasa");
		    return 1;
		}
		case SERVICO:
		{
	    	DisablePlayerRaceCheckpoint(playerid);
		    RaceCheckpointStatus[playerid] = RNONE;
		    CorridaToI[playerid] = -1;
		    FazendoCorrida[playerid] = 0;
			SendClientMessage(playerid, COLOR_YELLOW, "[YELLOW'S Taxis] Este foi o local solicitado pelo passageiro.");
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			return 1;
		}
		case PEDIDO:
		{
		    SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, "[PIZZARIA] Este foi o local que a pizza foi solicitada, procure o cliente.");
		    DisablePlayerRaceCheckpoint(playerid);
			RaceCheckpointStatus[playerid] = RNONE;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			new i = ASuaPizzaChegou[playerid];
			EntregandoIndoProCliente[i] = 0;
			if(GetDistanceBetweenPlayers(playerid,i) > 80){
				SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, "[PIZZARIA] O cliente está nessa área, procure.");
 				SendClientMessage(i, COLOR_ENTREGADOR_PIZZA, "[PIZZARIA] Sua Pizza chegou está no local aonde você chamou, vá pagar ela.");
 				return 1;
  			}
  			EntregandoIndoProCliente[playerid] = 0;
  			ASuaPizzaChegou[playerid] = 0;
			return 1;
		}
		case DEIXARARMA:
		{
	    	DisablePlayerRaceCheckpoint(playerid);
		    RaceCheckpointStatus[playerid] = RNONE;
		    EntregaArmaILigada[playerid] = 0;
			SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS, "[AMMU-NATION] Este foi o local solicitado pelo cliente");
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			return 1;
		}
		case DEIXARDROGA:
		{
	    	DisablePlayerRaceCheckpoint(playerid);
		    RaceCheckpointStatus[playerid] = RNONE;
		    EntregaDrogaILigada[playerid] = 0;
			SendClientMessage(playerid, COLOR_TRAFICANTE, "[MORRO] Este foi o local solicitado pelo cliente");
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			return 1;
		}
		case PEGANDO_ENCOMENDAS:
		{
			if(pStats[playerid][Prof] == TAXISTA){
				if(!IsTaxi(GetPlayerVehicleID(playerid))){
				    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um taxi da sua cooperativa!");
	    	        return 1;
				}
	    		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
					if(Taximetro[playerid][0] == 0){
					    RaceCheckpointStatus[playerid] = RNONE;
						QuantidadeEncomendas[playerid] = 5;
				    	DisablePlayerRaceCheckpoint(playerid);
				       	EntregandoEncomendas[playerid] = 1;
						new locais = random(53);
						DisablePlayerCheckpoint(playerid);
						SetPlayerCheckpoint(playerid,EntregaEncomendasTaxi[locais][0],EntregaEncomendasTaxi[locais][1],EntregaEncomendasTaxi[locais][2],4.0);
						SendClientMessage(playerid, COLOR_TAXISTA, "Agora vá entregá-los, você tem 5 pacotes.");
	   					CheckpointStatus[playerid] = TAXISTA_AUTOMATICO;
					}
				}
			} else if(pStats[playerid][Prof] == MOTO_TAXISTA){
			    if(!IsMotoTaxi(GetPlayerVehicleID(playerid)))
				{
   					SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma Moto autorizada. Tem que ser uma WayFarrer da Yellow's Taxi");
					return 1;
				}
	    		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
					if(Taximetro[playerid][0] == 0){
					    RaceCheckpointStatus[playerid] = RNONE;
						QuantidadeEncomendas[playerid] = 5;
				    	DisablePlayerRaceCheckpoint(playerid);
				       	EntregandoEncomendas[playerid] = 1;
						new locais = random(53);
						DisablePlayerCheckpoint(playerid);
						SetPlayerCheckpoint(playerid,EntregaEncomendasTaxi[locais][0],EntregaEncomendasTaxi[locais][1],EntregaEncomendasTaxi[locais][2],4.0);
						SendClientMessage(playerid, COLOR_TAXISTA, "Agora vá entregá-los, você tem 5 pacotes.");
	   					CheckpointStatus[playerid] = TAXISTA_AUTOMATICO;
					}
				}
			}
		}
		case TERMINAL:
		{
	    	if(pStats[playerid][Prof] != MOTORISTA_DE_ONIBUS){
			   	RaceCheckpointStatus[playerid] = RNONE;
			   	return 1;
			}
			if(!IsPlayerInAnyVehicle(playerid) || !IsBus(GetPlayerVehicleID(playerid))){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um ônibus da Companhia de Transportes Públicos.");
			    return 1;
			}
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			TerminalCorrida[playerid] = (TerminalCorrida[playerid] + 1) % sizeof TerminaisBusao;
			if(TerminalCorrida[playerid] % 10 == 0)
			{
			    Pay(playerid, 50);
			    SendClientMessage(playerid, COLOR_MOTORISTA_DE_ONIBUS, "Bom Trabalho! A Companhia de Transportes Públicos lhe pagou $50,00 dólares.");
			}
			if(Ashhole[playerid] == 1){
			    TeleporteOnibus[playerid] += 1;
				SendClientMessage(playerid, COLOR_MOTORISTA_DE_ONIBUS, "Estava freezado.");
				if(TeleporteOnibus[playerid] >= 5){
		            new Hora,Minuto,Segundo,Ano,Mes,Dia;
		            new string[128];
		            gettime(Hora,Minuto,Segundo);
					getdate(Ano,Mes,Dia);
					format(string,sizeof(string),"[%s/%s/%s - %s:%s:%s] %s banido | Motivo: Teleporte",ApplyZero(Dia),ApplyZero(Mes),ApplyZero(Ano),ApplyZero(Hora),ApplyZero(Minuto),ApplyZero(Segundo),PlayerName(playerid));
		            writebanlog(string);
					print(string);
					TeleporteOnibus[playerid] = 0;
					SendClientMessageToAll(COLOR_WHITE, string);
		            Banir(playerid, "Teleporte");
				}
			}
			Ashhole[playerid] = 1;
			DisablePlayerRaceCheckpoint(playerid);
			RaceCheckpointStatus[playerid] = TERMINAL;
			SetPlayerRaceCheckpoint(playerid,1,TerminaisBusao[TerminalCorrida[playerid]][tX],TerminaisBusao[TerminalCorrida[playerid]][tY],TerminaisBusao[TerminalCorrida[playerid]][tZ],0.0,0.0,0.0,10.0);
			SetPlayerControl(playerid, 0);
			SendClientMessage(playerid, COLOR_MOTORISTA_DE_ONIBUS, "Esperando passageiros...");
			SetTimerEx("BusWaiting", 10000, 0, "d", playerid);
			SetTimerEx("ContagemTeleporte", 18000, 0, "dd", playerid, TerminalCorrida[playerid]);
			for(new i = 0; i < MAX_SLOTS; i++)
			{
			    if(IsPlayerConnected(i) && Logado[i] && Terminal[i] == TerminalCorrida[playerid])
			    {
			        SendClientMessage(i, COLOR_WHITE, "O ônibus está no Terminal, caso queira andar nele entre...");
			    }
			}
		}
		case CPTESTEAEREO:
		{
		    TesteAereo(playerid, InstrutorNovo[playerid]);
		}
	}
	return 1;
}
public ContagemTeleporte(playerid, numero){
	if(numero != TerminalCorrida[playerid]){
		TeleporteOnibus[playerid] += 1;
		SendClientMessage(playerid, COLOR_MOTORISTA_DE_ONIBUS, "Teleporte de um terminal a outro.");
		if(TeleporteOnibus[playerid] >= 5){
            new Hora,Minuto,Segundo,Ano,Mes,Dia;
            new string[128];
            gettime(Hora,Minuto,Segundo);
			getdate(Ano,Mes,Dia);
			format(string,sizeof(string),"[%s/%s/%s - %s:%s:%s] %s kikado | Motivo: Teleporte",ApplyZero(Dia),ApplyZero(Mes),ApplyZero(Ano),ApplyZero(Hora),ApplyZero(Minuto),ApplyZero(Segundo),PlayerName(playerid));
			print(string);
			TeleporteOnibus[playerid] = 0;
			SendClientMessageToAll(COLOR_WHITE, string);
            Kick(playerid);
		}
	}
}
public BusWaiting(playerid)
{
	Ashhole[playerid] = 0;
    SetPlayerControl(playerid, 1);
    SendClientMessage(playerid, COLOR_MOTORISTA_DE_ONIBUS, "Espera finalizada, prossiga para o próximo terminal...");
    new str[128];
    format(str, sizeof str, "Próximo terminal: %s.", TerminaisBusao[TerminalCorrida[playerid]][tReference]);
    SendClientMessage(playerid, COLOR_MOTORISTA_DE_ONIBUS, str);
}
public OnPlayerEnterCheckpoint(playerid)
{
 	if (gdebug >=1){printf("OnPlayerEnterCheckpoint %d",playerid);}
	switch (CheckpointStatus[playerid])
	{
	    case DONUTS:
	    {
	        ShowMenuForPlayer(mDonuts, playerid);
	        SetPlayerControl(playerid, 1);
	    }
	    case TRAFICANDO_ARMAS:
	    {
			TraficandoArmas[playerid] = 1;
            SetPlayerControl(playerid,0);
            ShowMenuForPlayer(Weapons,playerid);
	    }
	    case SEGURADORA:
	    {
	        ShowMenuForPlayer(Seguros,playerid);
	        SetPlayerControl(playerid,0);
	    }
	    case CARDAPIO:
	    {
	        ShowMenuForPlayer(mLunchs,playerid);
	        SetPlayerControl(playerid,0);
	    }
		case ARMAS:
		{
			SetPlayerCameraPos(playerid,317.4153,-167.0013,1001.2624);
			SetPlayerCameraLookAt(playerid,319.0535,-167.2457,1001.2624);
			SetPlayerControl(playerid,0);
			ShowMenuForPlayer(Weapons,playerid);
		}
	    case CASA_JOGADOR:
	    {
	        CheckpointStatus[playerid] = NONE;
			DisablePlayerCheckpoint(playerid);
			SendClientMessage(playerid, COLOR_WHITE, "Lar doce lar... Aí está sua casa amigo!");
	    }
	    case ENTREGA_CTC_CAR:
     	{
			if(InGuinchoCTC(playerid) && IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)) && IsCTCCar(GetVehicleTrailer(GetPlayerVehicleID(playerid)))){
   				DisablePlayerCheckpoint(playerid);
				CheckpointStatus[playerid] = NONE;
				for(new c = 0; c < 20; c++){
					if(GetVehicleTrailer(GetPlayerVehicleID(playerid)) == CarrosCTC[c]){
					    DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
					    DestroyVehicle(CarrosCTC[c]);
					    CTCCapturado[c] = 1;
						CarrosCTC[c] = CreateVehicle(415,INVALID_POS_X,INVALID_POS_Y,INVALID_POS_Z,0.0,1,5,1500);
						break;
					}
				}
				SendClientMessage(playerid, COLOR_WHITE, "Veículo entregue! Vá buscar mais...");
				EquipePontos[EquipeCTC[playerid]]++;
				new string[128];
				format(string,sizeof(string),"[CAPTURE THE CARS] Pontuações: Equipe azul: %d ponto(s) | Equipe laranja: %d ponto(s)",EquipePontos[1],EquipePontos[2]);
				SendClientMessageToAll(COLOR_MECANICO, string);
				if(EquipePontos[EquipeCTC[playerid]] >= 10){
					if(EquipeCTC[playerid] == 1) SendClientMessageToAll(COLOR_LIXEIRO, "[CAPTURE THE CARS] A equipe azul é a nova vencedora do Capture The Cars!");
     				if(EquipeCTC[playerid] == 2) SendClientMessageToAll(COLOR_LIXEIRO, "[CAPTURE THE CARS] A equipe laranja é a nova vencedora do Capture The Cars!");
					FimCTC();
				}
			}
			else{
				SendClientMessage(playerid, COLOR_GRAY, "Para entregar um carro aqui você deve estar guinchando ele!");
			}
   		}
	    case RASTREAMENTO:
     	{
      		SendClientMessage(playerid, COLOR_WHITE, "Veículo alcançado e rastreador desativado!");
   			DesativarRastreador(playerid);
      	}
	    case LOJA_MUNICOES:
     	{
      		ShowMenuForPlayer(Municoes,playerid);
	        SetPlayerControl(playerid,0);
		}
	    case RESTAURANTE:
     	{
     	    if(!IsValidMenu(Cardapio1)) return 1;
     		ShowMenuForPlayer(Cardapio1,playerid);
	        SetPlayerControl(playerid,0);
		}
	    case CORRETORA_PROPRIEDADES:
		{
		    DestroyMenuEx(Properties);
            Properties = CreateMenu("Propriedades",2,2,150,100,20);
            SetMenuColumnHeader(Properties,0,"Nome");
	    	SetMenuColumnHeader(Properties,1,"Valor");
            for(new p = 1; p < 11; p++)
            {
                if(p >= sizeof Propriedades) break;
                new value[64];
                valstr(value, Propriedades[p][PropValue]);
				AddMenuItem(Properties, 0, Propriedades[p][PropName]);
				AddMenuItem(Properties, 1, value);
            }
            new t = sizeof Propriedades;
            if(t > 11)
            {
            	AddMenuItem(Properties, 0, "Proximo");
            	AddMenuItem(Properties, 1, "->");
			}
			ShowMenuForPlayer(Properties,playerid);
			PropertiesMenuStart = 1;
   			SetPlayerControl(playerid,0);
		}
        case DESTINO_GPS:
		{
			SendClientMessage(playerid, COLOR_PALHA, "Muito bem! Você chegou até o seu destino!");
			DisablePlayerCheckpoint(playerid);
			CheckpointStatus[playerid] = NONE;
			GPSLigado[playerid] = 0;
		}
        case DERBY:
       	{
       		new car = NextDerby();
           	if(car == -1){
				SendClientMessage(playerid, COLOR_GRAY, "Sinto muito, não há mais vagas para este evento!");
			 	DisablePlayerCheckpoint(playerid);
				return 1;
			}
			if(!OficializarParticipacao[playerid]){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não foi mandado para oficializar sua participação!");
			    return 1;
			}
			OficializarParticipacao[playerid] = 0;
			PlayerDerby[playerid] = 1;
			PutPlayerInVehicle(playerid, car, 0);
			for(new d = 0; d < sizeof Derby; d++)
			{
				if(car == Derby[d])
				{
				    Ocupado[d] = 1;
				    break;
				}
			}
			SetPlayerInterior(playerid,15);
			SetPlayerInterior(playerid,15);
			SetPlayerControl(playerid,0);
			DisablePlayerCheckpoint(playerid);
			CheckpointStatus[playerid] = NONE;
			SendClientMessage(playerid, COLOR_PALHA, "[ESTÁDIO] Aguarde a corrida iniciará em instantes.");
		}
		case ENTREGANDO_SORVETE:
  		{
			if(QtEntregasSorvetes[playerid] > 1){
  				QtEntregasSorvetes[playerid] --;
				new randcp = random(9);
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid,EntregaSorvetePos[randcp][0],EntregaSorvetePos[randcp][1],EntregaSorvetePos[randcp][2],2.5);
			    new string[128];
			    format(string,sizeof(string),"Sorvetes restantes: %d",QtEntregasSorvetes[playerid]);
			    SendClientMessage(playerid, COLOR_CLEAR_PINK, "Sorvete entregue!");
			    SendClientMessage(playerid, COLOR_YELLOW, string);
			    CheckpointStatus[playerid] = ENTREGANDO_SORVETE;
			    return 1;
			}
			else{
				DisablePlayerCheckpoint(playerid);
				SendClientMessage(playerid, COLOR_CLEAR_PINK, "Todos sorvetes entregues, vá até a sorveteria pegar o seu dinheiro!");
				SetPlayerCheckpoint(playerid,1568.2290,-1880.4467,13.5469,2.5);
				CheckpointStatus[playerid] = ENTREGANDO_SORVETE2;
				return 1;
			}
	    }
        case ENTREGANDO_SORVETE2:
       	{
			SendClientMessage(playerid, COLOR_CLEAR_PINK, "Obrigado pela entrega, aqui está seu dinheiro, $200");
			AddPlayerMoney(playerid,200,3);
			DisablePlayerCheckpoint(playerid);
			CheckpointStatus[playerid] = NONE;
   			SM[playerid] = NONE;
        }
		case ENTREGANDO_DROGAS:
  		{
	        if(QtEntregasDrogas[playerid] > 1){
	        	QtEntregasDrogas[playerid]--;
				new randcp = random(10);
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid,EntregaDrogaPos[randcp][0],EntregaDrogaPos[randcp][1],EntregaDrogaPos[randcp][2],2.5);
				CheckpointStatus[playerid] = ENTREGANDO_DROGAS;
				new string[128];
				format(string,sizeof(string),"Droga entregue, restam mais %d entrega(s)",QtEntregasDrogas[playerid]);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else{
				QtEntregasDrogas[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				SM[playerid] = NONE;
				CheckpointStatus[playerid] = NONE;
				SendClientMessage(playerid, COLOR_TRAFICANTE, "Entregas terminadas, beleza mano, gostei do trampo, tái tua grana maluco, $300");
				AddPlayerMoney(playerid,300,3);
			}
	    }
 	   	case AUTO_ESCOLA_RUA:
    	{
			if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 410){
		    	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
		    	    new plid = InstrutorRua[playerid];
	    		   	if(pStats[plid][Prof] == INSTRUTOR){
   				   		if(GetPlayerState(plid) == PLAYER_STATE_PASSENGER && IsPlayerInVehicle(plid,GetPlayerVehicleID(playerid))){
			   		    	new Float:h;
                            GetVehicleHealth(GetPlayerVehicleID(playerid),h);
							if(floatround(h) == 1000){
  	     						new string[128];
				  	    		SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] Parabéns! Parte (5/5) - Rua - concluída com sucesso.");
								format(string, sizeof(string), "[TESTE] O aprendiz  %s passou no teste: (5/5) - Rua.", PlayerName(playerid));
								SendClientMessage(InstrutorNovo[playerid],COLOR_INSTRUTOR, string);
								Chance[playerid] = 3;
								CheckpointStatus[playerid] = NONE;
								DisablePlayerCheckpoint(playerid);
								RemovePlayerFromVehicle(playerid);
								FazendoTesteRua[playerid] = 0;
								SetTimerEx("AplicandoCarteira",4000,0,"dd",playerid,plid);
	               			}
	                  		else{
	                			new string[128];
								format(string, sizeof(string), "[TESTE] Sr. %s, seu veículo está danificado.", PlayerName(playerid));
								SendPlayerMessageToPlayer(plid, playerid, string);
    							format(string, sizeof(string), "[TESTE] Sr. %s, seu veículo está danificado.", PlayerName(playerid));
								SendPlayerMessageToPlayer(playerid, playerid, string);
								if(Chance[plid] >= 1){
									Chance[playerid] = Chance[playerid] - 1;
									format(string, sizeof(string), "[TESTE] Sr. %s, seu teste será refeito. CHANCE: %d/3.", PlayerName(playerid), Chance[playerid]);
									SendPlayerMessageToPlayer(plid, playerid, string);
									format(string, sizeof(string), "[TESTE] Sr. %s, seu teste será refeito. CHANCE: %d/3.", PlayerName(playerid), Chance[playerid]);
									SendPlayerMessageToPlayer(playerid, playerid, string);
									InstrutorRua[playerid] = plid;
	    							SetVehicleToRespawn(GetPlayerVehicleID(playerid));
								    ADTeste[playerid] --;
									SetTimerEx("AvancoDirecao",5000,0,"dd",playerid,plid);
								} else {
									SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Seu teste foi CANCELADO, você perdeu todas as chances, terá que refazer tudo novamemnte.");
									format(string, sizeof(string), "[AUTO-ESCOLA] O aprendiz %s perdeu todas as chances e seu teste foi cancelado!", PlayerName(playerid));
									SendClientMessage(plid,COLOR_INSTRUTOR, string);
									FazendoTesteRua[playerid] = 0;
									Chance[playerid] = 0;
									NoTeste[playerid] = 0;
									InstrutorOcupado[plid] = 0;
									SetVehicleToRespawn(GetPlayerVehicleID(playerid));
									for(new a = 0; a < sizeof CarroAuto; a++)
									{
									    TrancarVeiculo(playerid, CarroAuto[a]);
									    SetVehicleToRespawn(CarroAuto[a]);
									}
								}
							}
						}
					}
				}
			}
		}
        case TRANSPORTANDO_ROUPAS:
		{
			if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 414){
			    DisablePlayerCheckpoint(playerid);
				CheckpointStatus[playerid] = NONE;
				SendClientMessage(playerid, COLOR_GRAY, "Eita, esta não é a nossa carga de roupas! Não vamos aceitar isso, SUMA DAQUI...");
				return 1;
			}
			else{
				CarregamentoRoupas[playerid] = 0;
				new rand = (random(3) + 1) * 150;
				new str[128];
				format(str,sizeof(str),"Muito bem! Aqui está seu pagamento: $%d,00 dólares",rand);
				SendClientMessage(playerid, COLOR_CAMINHONEIRO, str);
				Pay(playerid, rand);
				DisablePlayerCheckpoint(playerid);
				CheckpointStatus[playerid] = NONE;
			}
		}
		case CONTRABANDO_INICIO:
	    {
	   		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
	   		GameTextForPlayer(playerid, "~w~Pegue o ~r~produto", 5000, 1);
	   		SendClientMessage(playerid, COLOR_GREEN, "Entre no navio e pegue seu produto falsificado.");
	   		SetPlayerPos(playerid,-2329.10,1530.41,17.33);
	   		DisablePlayerCheckpoint(playerid);
	   		SetPlayerCheckpoint(playerid,-2372.10,1551.64,2.12,1.4);
			CheckpointStatus[playerid] = CONTRABANDO_NAVIO;
			return 1;
		}
 		case CONTRABANDO_NAVIO:
	   	{
	   		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
	   		GameTextForPlayer(playerid, "~w~Va para o ~r~ponto", 5000, 1);
	   		SendClientMessage(playerid, COLOR_GREEN, "Pule daqui e va ate outro ponto indicado, cuidado pra não molhar a mercadoria.");
		   	DisablePlayerCheckpoint(playerid);
 			SetPlayerCheckpoint(playerid,-2436.35,1528.98,17.34,1.4);
			CheckpointStatus[playerid] = CONTRABANDO_NAVIO2;
			return 1;
		}
   		case CONTRABANDO_NAVIO2:
	    {
	   		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
	   		SendClientMessage(playerid, COLOR_GREEN, "Corra para a rampa.");
	   		DisablePlayerCheckpoint(playerid);
	  		SetPlayerPos(playerid,-2436.29,1524.75,18.19);
	  		SetPlayerCheckpoint(playerid,-2650.08,1361.02,7.31,1.4);
			CheckpointStatus[playerid] = CONTRABANDO_RAMPA;
			return 1;
		}
		case CONTRABANDO_RAMPA:
  		{
  			PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		   	GameTextForPlayer(playerid, "~w~Suba a ~r~rampa", 5000, 1);
      		SendClientMessage(playerid, COLOR_GREEN, "Jogue o produto no mar, um pescador ira pegar depois. Cuidado para não cair.");
	  		DisablePlayerCheckpoint(playerid);
		 	SetPlayerCheckpoint(playerid,-2659.74,1530.51,54.97,1.4);
			CheckpointStatus[playerid] = CONTRABANDO_FINAL;
			return 1;
		}
		case CONTRABANDO_FINAL:
	    {
			new string[128];
	    	new contra;
	   	 	contra = minrand(400,1200);
	   		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
	   		GameTextForPlayer(playerid, "~r~Cuidado...", 5000, 1);
	   		SetPlayerPos(playerid,-2659.69,1534.64,54.42);
	   		SendClientMessage(playerid, COLOR_GREEN, "Você caiu no mar e se molhou, mas conseguiu salvar o produto, o chefe te deu $1000.");
			format(string,sizeof(string),"Você caiu no mar e se molhou, mas conseguiu salvar o produto, o chefe te deu $%d.",contra);
			SendClientMessage(playerid, COLOR_PESCADOR, string);
		    DisablePlayerCheckpoint(playerid);
	   		Contrabando[playerid] = 0;
	   		Receita[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
			Pay(playerid, contra);
			CheckpointStatus[playerid] = NONE;
 		}
 		case CAMA:
	    {
	        for(new i=0; i<MAX_SLOTS; i++){
	            if(IsPlayerConnected(i) && Logado[i]){
					if(Sex2a2[playerid] == i && Sex2a2[i] == playerid){
						SendClientMessage(playerid, COLOR_PROSTITUTA, "Você entrou no checkpoint e saiu do sexo.");
						SendClientMessage(i, COLOR_PROSTITUTA, "Sua parceira(o) saiu do sexo.");
				  		DisablePlayerCheckpoint(playerid);
				  		SetPlayerPos(playerid,2421.6042,-1224.7599,25.2050);
				  		SetPlayerInterior(playerid,0);
				  		SetPlayerPos(i,2421.6042,-1224.7599,25.2050);
				  		SetPlayerInterior(i,0);
					    PlayerArea[playerid] = AreaNone;
		       			Sex2a2[playerid] = -1;
		       			Sex2a2[i] = -1;
		       		}
				}
			}
	    	if(Transacama[playerid] == 1){
				SendClientMessage(playerid, COLOR_PROSTITUTA, "Você entrou no checkpoint e saiu do sexo");
				SendClientMessage(Prostitutacama[playerid], COLOR_PROSTITUTA, "Seu cliente saiu do sexo e você voltou para a porta da boate!");
		  		DisablePlayerCheckpoint(playerid);
		  		SetPlayerPos(playerid,2421.6042,-1224.7599,25.2050);
		  		SetPlayerInterior(playerid,0);
		  		SetPlayerPos(Prostitutacama[playerid],2421.6042,-1224.7599,25.2050);
		  		SetPlayerInterior(Prostitutacama[playerid],0);
		  		SendClientMessage(playerid, COLOR_PROSTITUTA, "Foi paga uma quantia de $400 pelo sexo.");
		  		SendClientMessage(Prostitutacama[playerid], COLOR_PROSTITUTA,"Você recebeu seu pagamento no valor de $400,00 dólares");
			    PlayerArea[playerid] = AreaNone;
       			Transacama[playerid] = 0;
			    PlayerPay(playerid, Prostitutacama[playerid], 400);
			}
		}
 		case COLETANDO_LATAS :
		{
			if(CatarLatinha[playerid] == 1){
	   			if(IsPlayerInAnyVehicle(playerid)){
			    	SendClientMessage(playerid,COLOR_GRAY,"Você tem que estar à pé");
	  	 		}
		   	 	else{
					new string[128];
					new latas;
		        	latas = minrand(0,5);
			    	format(string, sizeof(string), "Você coletou %d lata(s) nesta lixeira.",latas);
					SendClientMessage(playerid, COLOR_BLUE_PLUS, string);
		    		DisablePlayerCheckpoint(playerid);
		    		pStats[playerid][Latas] = pStats[playerid][Latas] + latas;
		    		new rt = random(23);
		    		SetPlayerCheckpoint(playerid,Latinhas[rt][0],Latinhas[rt][1],Latinhas[rt][2],3.0);
		    		SendClientMessage(playerid,COLOR_WHITE,"Colete mais latinhas ou pare com /pararcoleta.");
		    		if(pStats[playerid][Latas] >= pStats[playerid][LatasNecessarias]){
						AcrescentarXpoints(playerid,1);
						pStats[playerid][LatasNecessarias] = pStats[playerid][LatasNecessarias] + 30;
					}
				}
			}
		}
		case LAVANDO_LIMOSINE :
		{
			if(IsStretch(GetPlayerVehicleID(playerid))) {
			    SetPlayerControl(playerid, 0);
			    SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Aguarde a lavagem...");
				GameTextForPlayer(playerid, "~w~Lavando...",15000,0);
				SetTimerEx("LavandoLimosine",15000,0,"d",playerid);
			} else {
			    SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Você não está em uma Limosine da LuxLimosine");
			}
		}
 		case REVISANDO_LIMOSINE :
 	    {
			new Float:CarHealth;
			GetVehicleHealth(GetPlayerVehicleID(playerid),CarHealth);
			if(CarHealth >= 70){
	   		 	if(LimoRevisada[GetVehicleStretchID(GetPlayerVehicleID(playerid))] == 0){
	   				if(IsStretch(GetPlayerVehicleID(playerid))) {
					    SetPlayerControl(playerid, 0);
					    SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Aguarde...");
						GameTextForPlayer(playerid, "~w~Checando o ~r~Motor~w~...",15000,0);
						SetTimerEx("ChecandoLimo",15000,0,"d",playerid);
					} else {
					    SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Você não está em uma Limosine da LuxLimosine ou não está dirigindo.");
					}
				} else {
				    SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "A sua Limosine está com o motor reparado, vá para a lavagem.");
	 			}
			} else {
  				SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "A saúde do seu carro está ok.");
	 		}
		}
		case DEIXANDO_LIMOSINE :
 		{
			new Float:CarHealth;
			GetVehicleHealth(GetPlayerVehicleID(playerid),CarHealth);
			if(CarHealth == 1000){
			    SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "O Chefe examinou a Limosine está em perfeito estado.");
			    SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Contudo você ganhou $300 pelo serviço.");
			    Pay(playerid, 300);
			    DisablePlayerCheckpoint(playerid);
			    EntregaLimo[playerid] = 0;
			    SetTimerEx("ChecagemMotor", 900000, 0, "d", GetVehicleStretchID(GetPlayerVehicleID(playerid)));
		    } else {
				new prejuizo = 1000-floatround(CarHealth);
			    SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Você bateu a Limosine e seu chefe cobrou o prejuízo.");
			    AddPlayerMoney(playerid, -prejuizo, -1);
			    new str[128];
			    format(str, sizeof(str),"O prejuízo foi de $%d",prejuizo);
			    SendClientMessage(playerid, COLOR_GRAY, str);
			    DisablePlayerCheckpoint(playerid);
			    EntregaLimo[playerid] = 0;
			    SetTimerEx("ChecagemMotor", 900000, 0, "d", GetVehicleStretchID(GetPlayerVehicleID(playerid)));
			}
		}
		case CARREGANDO_COMBUSTIVEL :
  		{
			new vehid = GetPlayerVehicleID(playerid);
			new trailerid = GetVehicleTrailer(vehid);
   			if(GetVehicleModel(trailerid) != 584){
			    SendClientMessage(playerid, COLOR_CAMINHONEIRO, "Você não está com o Trailer correto!");
			    return 1;
			}
			DisablePlayerCheckpoint(playerid);
			GameTextForPlayer(playerid, "~w~Carregando...",15000,0);
		    SendClientMessage(playerid,COLOR_CAMINHONEIRO,"O Trailer de Gás está sendo Carregado, aguarde o Carregamento para ir deixar a carga.");
            SetPlayerControl(playerid,0);
          	SetTimerEx("CarregamentoGas",15000,0,"d",playerid);
          	return 1;
		}
		case BALCAO_BAR :
		{
			ShowMenuForPlayer(Bar,playerid);
			SetPlayerControl(playerid,0);
		}
		case CONTRABANDO_CARRO1 :
	    {
	        if(ContrabandoCar[playerid] == 1){
		        PlayerPlaySoundEx(playerid, 1058);
		    	SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Aí rapaz! Nossos papos sempre são assim, escondidos. Os carros tão ai, só entrar e escolher um!");
	 	   		SendClientMessage(playerid, COLOR_GREEN, "Leve ele para os Triads checarem e ver se estão afim.");
	 	   		DisablePlayerCheckpoint(playerid);
 				SetTimerEx("ContrabandoSpawnCar",3000,0,"d",playerid);
			}
		}
 		case CONTRABANDO_CARRO2:
		{
			new Float: VidaCarro;
			GetVehicleHealth(GetPlayerVehicleID(playerid),VidaCarro);
			if(VidaCarro >= 850){
				if(IsContraband(GetPlayerVehicleID(playerid)))
			    {
				    if(ContrabandoCar[playerid] == 1){
				   		GameTextForPlayer(playerid, "~w~Hum...", 5000, 1);
				   		SetPlayerControl(playerid,0);
				   		DisablePlayerCheckpoint(playerid);
				   		SetTimerEx("ChecandoContrabandoCar",5000,0,"d",playerid);
				   	}
				} else {
					SendClientMessage(playerid, COLOR_WHITE, "Você não está no carro correto.");
				}
			} else {
			    SendClientMessage(playerid, COLOR_LIGHT_RED, "Ei, está tentando me enganar? Não vou querer esse carro, está caido aos pedaços...");
                SendClientMessage(playerid, COLOR_LIGHT_RED, "Vai enganar outro troxa com essa lata velha batida moleque!");
				DisablePlayerCheckpoint(playerid);
				SetPlayerControl(playerid,1);
				CheckpointStatus[playerid] = NONE;
			}
		}
		case CONTRABANDO_CARRO3:
		{
		   	new valor;
		    new string[128];
		    valor = minrand(1000,2000);
			new Float: VidaCarro;
			GetVehicleHealth(GetPlayerVehicleID(playerid),VidaCarro);
			if(VidaCarro >= 850)
			{
				if(IsContraband(GetPlayerVehicleID(playerid)))
			    {
				    SendClientMessage(playerid, COLOR_WHITE, "Carro entregue!");
	 		   		DisablePlayerCheckpoint(playerid);
					GameTextForPlayer(playerid, "~w~Exportado!", 3000,0);
					format(string,sizeof(string),"O carro foi entregue sem dano, foi pago $%d,00 dólares por ele",valor);
			  		SendClientMessage(playerid, COLOR_CONTRABANDISTA, string);
			  		Pay(playerid, valor);
					CheckpointStatus[playerid] = NONE;
					SetVehicleToRespawn(GetPlayerVehicleID(playerid));
					SetPlayerPos(playerid, 2730.0046,-2452.3933,17.5937);
					NaoSair[playerid] = 0;
					PodePegar[playerid] = 0;
				} else {
					SendClientMessage(playerid, COLOR_WHITE, "Você não está no carro correto.");
				}
			} else {
				SendClientMessage(playerid, COLOR_WHITE, "Seu carro está muito batido, não queremos ELE!");
			}
		}
		case CONTRABANDO_DROGA:
  		{
			if(Contrabando[playerid] == 1){
			    SendClientMessage(playerid, COLOR_TURQUOISE, "Sinto muito mano! Entreguei as drogas pra um cara já, se quiser ir pegar com ele");
			    SendClientMessage(playerid, COLOR_TURQUOISE, "pra fazer um servicinho por grana vai até a casa dele que ele ta lá agora!");
		        DisablePlayerCheckpoint(playerid);
		    	SetPlayerCheckpoint(playerid,1615.7572,-1896.8995,13.5490,3.0);
		    	CheckpointStatus[playerid] = CONTRABANDO_DROGA2;
		    	return 1;
		    }
		}
		case CONTRABANDO_DROGA2:
		{
		    if(Contrabando[playerid] == 1){
			    SendClientMessage(playerid, COLOR_ORANGE, "Aew maluco! Afim de ganhar uma graninha? Então vai lá e entrega essa droga lá");
			    SendClientMessage(playerid, COLOR_ORANGE, "na casa do comprador em Las Venturas, Vai logo moleque, se não, não tem grana, tá ligado?!");
				new rand = random(4);
				DisablePlayerCheckpoint(playerid);
		    	SetPlayerCheckpoint(playerid,ContrabandoEntregaDroga[rand][0],ContrabandoEntregaDroga[rand][1],ContrabandoEntregaDroga[rand][2],3.0);
		    	CheckpointStatus[playerid] = CONTRABANDO_DROGA3;
		    	return 1;
		    }
		}
		case CONTRABANDO_DROGA3:
		{
		    if(Contrabando[playerid] == 1){
		        new con = random(3);
		        if(con == 0 || con == 1){
		            new conmoney = minrand(1200,1600);
		        	PlayerPlaySoundEx(playerid, 1058);
			    	SendClientMessage(playerid, COLOR_CONTRABANDISTA, "OPA! Minhas drogas! Passa pra cá maluco...");
					new str[128];
					format(str,sizeof(str),"Tái tua grana: $%d",conmoney);
					SendClientMessage(playerid, COLOR_CONTRABANDISTA, str);
					Maconha[playerid] = Maconha[playerid]+2;
					pStats[playerid][DosesMaconha] = Maconha[playerid];
					SendClientMessage(playerid, COLOR_JUIZ, "Você recebeu 2 maconhas pela entrega! Para fumar digite /fumar [cigarros]");
					DisablePlayerCheckpoint(playerid);
		    		CheckpointStatus[playerid] = NONE;
		    		Pay(playerid, conmoney);
				}
				if(con == 2){
			    	SendClientMessage(playerid, COLOR_ORANGE, "Ihh cara! Essas são as minhas drogas?! Ahh cara não quero isso! SUMA DAQUI...");
					DisablePlayerCheckpoint(playerid);
		    		CheckpointStatus[playerid] = NONE;
		    		Contrabando[playerid] = 0;
				}
		    }
		}
		case CONTRABANDO_ARMA1:
		{
		    if(Contrabando[playerid] == 1){
		    	SendClientMessage(playerid, COLOR_GRAD, "Vá buscar as armas escondidas enquanto isso vou ficar aqui procurando compradores!");
		    	DisablePlayerCheckpoint(playerid);
		    	SetPlayerCheckpoint(playerid,-2124.9001,-270.4929,35.3203,4.0);
		    	CheckpointStatus[playerid] = CONTRABANDO_ARMA2;
		    	SendClientMessage(playerid, COLOR_JUIZ, "Siga o local indicado em seu mapa para pegar as armas escondidas!");
                return 1;
			}
		}
		case CONTRABANDO_ARMA2:
		{
		    if(Contrabando[playerid] == 1){
		        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
				SetTimerEx("AcaoEspecial",5000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		    	SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Ótimo! Armas recolhidas!");
		    	SendClientMessage(playerid, COLOR_GRAD, "Aew cara! Achei um comprador... Vai lá entregar as armas pra ele que agente divide o lucro mano!");
		    	DisablePlayerCheckpoint(playerid);
		    	new rand = random(4);
		    	SetPlayerCheckpoint(playerid,EntregarContrabandoArma[rand][0],EntregarContrabandoArma[rand][1],EntregarContrabandoArma[rand][2],4.0);
		    	CheckpointStatus[playerid] = CONTRABANDO_ARMA3;
		    	return 1;
			}
		}
		case CONTRABANDO_ARMA3:
		{
		    if(Contrabando[playerid] == 1){
     			PlayerPlaySoundEx(playerid, 1058);
		        new rand = random(3);
	        	if(rand == 0 || rand == 1){
		        	new pagamento = minrand(1000,1500);
		    		SendClientMessage(playerid, COLOR_GRAD, "Opa! Belas armas... Vou comprar!");
		    		new str[128];
		    		format(str,sizeof(str),"Aqui está o pagamento: $%d",pagamento);
					SendClientMessage(playerid, COLOR_GRAD, str);
					Pay(playerid, pagamento);
					new con = random(6);
					if(con == 0) GiveWeapon(playerid,24,40);
					else if(con == 1) GiveWeapon(playerid,32,150);
					else if(con == 2) GiveWeapon(playerid,25,20);
					if(con < 3)
					{
						SendClientMessage(playerid, COLOR_LIGHT_RED, "Você recebeu uma arma de brinde pela entrega...");
					}
					DisablePlayerCheckpoint(playerid);
					CheckpointStatus[playerid] = NONE;
  					Contrabando[playerid] = 0;
				}
				if(rand == 2){
		    		SendClientMessage(playerid, COLOR_GRAD, "O que??? Essas armas estão em péssimo estado, aposto que não matam um mosquito!");
		    		SendClientMessage(playerid, COLOR_GRAD, "Vaza daqui, não vou comprar LIXO");
                    DisablePlayerCheckpoint(playerid);
					CheckpointStatus[playerid] = NONE;
		    		Contrabando[playerid] = 0;
				}
			}
		}
	  	case TRIADS :
		{
			SetPlayerControl(playerid, 0);
			SetPlayerPos(playerid,-2173.7002,679.8663,55.1647);
			SetPlayerFacingAngle(playerid,267.3764);
			SendClientMessage(playerid, COLOR_LIGHT_RED, "Está aqui para pegar o pacote não é?");
			SetTimerEx("Historia",3000,0,"d",playerid);
		}
  	  	case ENTREGANDO_RICK :
		{
		    SetPlayerControl(playerid, 0);
		    SetTimerEx("Historia",4000,0,"d",playerid);
		}
	  	case CONVERSA_MOTORISTA :
		{
			SendClientMessage(playerid, COLOR_WHITE, "Motorista, pro aeroporto Virtual Air!");
			ApplyAnimation(playerid,"PED","IDLE_CHAT",2.1,1,1,1,1,1);
			SetPlayerControl(playerid,0);
			SetTimerEx("Historia",3000,0,"d",playerid);
		}
      	case TELHADO :
	 	{
			DisablePlayerCheckpoint(playerid);
    		SetPlayerControl(playerid, 1);
    		SendClientMessage(playerid, COLOR_JUIZ, "Saiá logo daí!");
    		SetPlayerCheckpoint(playerid,1476.2811,1901.7622,10.9186,2.0);
    		CheckpointStatus[playerid] = SAINDO_TELHADO;
    		return 1;
		}
	  	case SAINDO_TELHADO :
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerControl(playerid, 0);
			SendClientMessage(playerid, COLOR_WHITE, "Ah...");
 			SetTimerEx("Historia",2000,0,"d",playerid);
		}
	 	case AEROPORTO :
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerControl(playerid, 0);
		    SetPlayerInterior(playerid,14);
    		SetPlayerPos(playerid,-1833.9573,18.6406,1061.1436);
    		SetPlayerFacingAngle(playerid,360);
 			SetTimerEx("Historia",3000,0,"d",playerid);
 		}
      	case PEGAR_PASSAGEM :
		{
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerControl(playerid, 0);
		    SetPlayerInterior(playerid,14);
    		SetPlayerPos(playerid,-1833.9573,18.6406,1061.1436);
    		SetPlayerFacingAngle(playerid,360);
 			SetTimerEx("Historia",3000,0,"d",playerid);
 		}
 		case ENTREGA_SF :
		{
		    SetPlayerControl(playerid, 0);
			SendClientMessage(playerid, COLOR_GRAY, "Veio entregar o pacote?");
			SetTimerEx("Historia",3000,0,"d",playerid);
		}
      	case AGENCIA :
		{
		    DisablePlayerCheckpoint(playerid);
    		SetPlayerInterior(playerid,3);
	        SetPlayerFacingAngle(playerid,90);
	        SetPlayerPos(playerid,387.9047,171.1747,1008.3828);
	        DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid,362.7719,173.7793,1008.3828,2.0);
		    CheckpointStatus[playerid] = AGENCIA_EMPREGOS;
	        SendClientMessage(playerid, COLOR_PALHA, "Bem vindo à agencia de empregos!");
	        SendClientMessage(playerid, COLOR_PALHA, "Para mais informações digite: /sistlevel");
	        SendClientMessage(playerid, COLOR_WHITE, "Entre no CheckPoint (marca vermelha) para ver as profissões disponíveis.");
            return 1;
	 	}
	  	case CARREGAMENTO :
	    {
	        new valor;
	    	new string[128];
	    	valor = (random(5) + 4) * 100;
	    	new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
 			if(modelo == 515){
			   	if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))){
					CheckpointStatus[playerid] = NONE;
					GeralCar[playerid] = 0;
					format(string,sizeof(string),"A Carga foi entregue com sucesso! O seu frete foi de $%d,00 dólares",valor);
		  			SendClientMessage(playerid, COLOR_CAMINHONEIRO, string);
			  		Pay(playerid, valor);
			  		SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
			  		GameTextForPlayer(playerid, "~w~Descarregamento Concluido", 3000,0);
			  		DisablePlayerCheckpoint(playerid);
			  		return 1;
				} else {
					SendClientMessage(playerid,COLOR_GRAY,"Não foi detectado Trailer!");
					return 1;
				}
			} else {
				SendClientMessage(playerid,COLOR_GRAY,"Você não está em um ROADTRAIN!");
				return 1;
			}
	    }
		case OBRAS:
		{
			if(PlayerArea[playerid] == AreaConstrucao){
		    	if(Pedras[playerid] == 1){
					new porc;
					new string[128];
				    porc = minrand(100,350);
				    Pedras[playerid] = 0;
				    SendClientMessage(playerid, COLOR_PEDREIRA, " ");
				    GameTextForPlayer(playerid, "~w~ Descarregamento ~n~ ~g~ Concluido", 3000,0);
				    format(string, sizeof(string), "[OBRA] Tái pelo frete, pelo tempo que você veio só vamos lhe pagar $%d.", porc);
					SendClientMessage(playerid,COLOR_PEDREIRA, string);
				    DisablePlayerCheckpoint(playerid);
			    	CheckpointStatus[playerid] = NONE;
					Pay(playerid, porc);
	    			return 1;
	    		} else {
					SendClientMessage(playerid,COLOR_GRAY,"O Seu Caminhão não está carregado.");
					return 1;
				}
			} else {
				SendClientMessage(playerid,COLOR_GRAY,"Você não está na área de descarga.");
				return 1;
			}
		}
		case CDROGAS:
	    {
			if(ComprandoBaguio[playerid] == 1){
		   		ShowMenuForPlayer(Becks,playerid);
		   		SetPlayerControl(playerid,0);
		   		ComprandoBaguio[playerid] = 0;
		   		CheckpointStatus[playerid] = NONE;
		   		DisablePlayerCheckpoint(playerid);
		   		return 1;
		   	}
		}
		case CATIVEIRO:
	    {
  			if(GetDistanceBetweenPlayers(playerid,FuiSequestrado[playerid]) < 10){
				if(AmarradoInfo[FuiSequestrado[playerid]][0] == playerid){
				    DisablePlayerCheckpoint(playerid);
				    RemovePlayerFromVehicle(FuiSequestrado[playerid]);
				    SetPlayerInterior(FuiSequestrado[playerid], 10);
					SetPlayerPos(FuiSequestrado[playerid], 417.7593,2536.9158,10.0000);
					SetPlayerFacingAngle(FuiSequestrado[playerid], 0);
					SetPlayerControl(FuiSequestrado[playerid], 0);
					Sequestro[FuiSequestrado[playerid]] = 1;
					Cativeiro[FuiSequestrado[playerid]] = 1;
					SendClientMessage(FuiSequestrado[playerid], COLOR_GRAY,"Você agora está no CATIVEIRO!");
					SendClientMessage(FuiSequestrado[playerid], COLOR_GRAY,"Para poder sair pague o resgate com o comando /resgate ou espere a polícia lhe salvar!");
					SendClientMessage(playerid, COLOR_GRAY, "Bom trabalho, agora vamo ver quanto tempo ele aguenta!");
		   			TimerSequestro[playerid] = SetTimerEx("KidnappingProcess",240000,false,"dd",playerid, FuiSequestrado[playerid]);
					return 1;
				}
     		}
     		else {
				SendClientMessage(playerid, COLOR_GRAY, "Esteja com o jogador sequestrado próximo.");
				return 1;
     		}
        }
		case TESTE_AUTO_ESCOLA_BOATE:
	   	{
			if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 410){
		    	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
		   		    new Float:h;
		   		    new string[128];
                    GetVehicleHealth(GetPlayerVehicleID(playerid),h);
					if(floatround(h) == 1000){
		  		    	SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] Parabéns! Parte (5/5) - Rua - concluída com sucesso.");
						CheckpointStatus[playerid] = NONE;
						DisablePlayerCheckpoint(playerid);
						SetVehicleToRespawn(GetPlayerVehicleID(playerid));
						FazendoAutoTesteRua[playerid] = 0;
						SetTimerEx("AutoTeste",4000,0,"d",playerid);
           			} else {
						SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] Você não conseguiu chegar no tempo marcado.");
						if(Chance[playerid] >= 1){
							Chance[playerid] = Chance[playerid] - 1;
							format(string,sizeof(string),"[TESTE] Seu teste será refeito. CHANCE: %d/3.",Chance[playerid]);
							SendClientMessage(playerid, COLOR_INSTRUTOR,string);
							SetVehicleToRespawn(GetPlayerVehicleID(playerid));
							ParteAutoTeste[playerid]--;
							SetTimerEx("AutoTeste",5000,0,"d",playerid);
						} else {
							SendClientMessage(playerid,COLOR_INSTRUTOR, "[AUTO-ESCOLA] Seu teste foi CANCELADO, você perdeu todas as chances, terá que refazer tudo novamemnte.");
							FazendoAutoTesteRua[playerid] = 0;
							Chance[playerid] = 0;
							NoTeste[playerid] = 0;
							SetVehicleToRespawn(GetPlayerVehicleID(playerid));
							for(new a = 0; a < sizeof CarroAuto; a++)
							{
			    				TrancarVeiculo(playerid, CarroAuto[a]);
			    				SetVehicleToRespawn(CarroAuto[a]);
							}
						}
					}
				}
			}
		}
	  	case TAXI_SINAL_RICK :
	    {
			PutPlayerInVehicle(playerid,TaxiRick3,3);
			SendClientMessage(playerid, COLOR_YELLOW, "[Taxista] Pois não?");
		    SetTimerEx("Historia",2000,0,"d",playerid);
		}
	  	case ENTRANDO_TAXI_RICK :
		{
			PutPlayerInVehicle(playerid,TaxiRick1,3);
			SendClientMessage(playerid, COLOR_YELLOW, "[Taxista] Pra onde Senhor?");
		    SetTimerEx("Historia",2000,0,"d",playerid);
		}
		case ESPERANDO_CAMINHONEIRO :
	    {
		    SetPlayerControl(playerid, 0);
		    DisablePlayerCheckpoint(playerid);
			SendClientMessage(playerid, COLOR_WHITE, "Puxa será que não vai passar nenhum caminhoneiro?");
			SendClientMessage(playerid, COLOR_WHITE, "Vou sentar e esperar...");
	        ApplyAnimation(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 1, 1, 1, 1);
		    SetTimerEx("Historia",6000,0,"d",playerid);
		}
 		case PELADO_PEGANDO_ROUPA :
 	    {
			pStats[playerid][Skin] = 250;
			SetPlayerSkin(playerid,250);
			SendClientMessage(playerid, COLOR_JUIZ, "Pegue um táxi na Estação e peça para ir até o Aeroporto.");
		    SetPlayerCheckpoint(playerid, -1989.9374,150.8841,27.5391, 2.0);
		    CheckpointStatus[playerid] = PELADO_PEGANDO_TAXI;
		    return 1;
		}
		case PELADO_PEGANDO_TAXI :
	    {
			SendClientMessage(playerid, COLOR_WHITE, "Para o Aeroporto de San Fierro.");
            SetTimerEx("Historia",3000,0,"d",playerid);
        }
		case DENUNCIA_POLICIAL :
	    {
	        new string[128];
			IndoLocalDenuncia[playerid] = 0;
			CPLocal[playerid][0] = 0;
			CPLocal[playerid][1] = 0;
			CPLocal[playerid][2] = 0;
			format(string,sizeof(string),"[CENTRAL COP] Oficiais, o Oficial %s chegou no local dessa denúncia: %s",PlayerName(playerid),LastDenuncia);
			SendClientMessagePolicia(COLOR_CENTRAL,string);
		    DisablePlayerCheckpoint(playerid);
		    CheckpointStatus[playerid] = NONE;
		}
		case EMERGENCIA :
	    {
	        new string[128];
	    	IndoLocalEmergencia[playerid] = 0;
			CPLocal[playerid][0] = 0;
			CPLocal[playerid][1] = 0;
			CPLocal[playerid][2] = 0;
 		    DisablePlayerCheckpoint(playerid);
		    CheckpointStatus[playerid] = NONE;
		  	for(new i=0; i<MAX_SLOTS; i++){
		  	    if(pStats[i][Prof] == PARAMEDICO){
		    		format(string,sizeof(string),"[RADIO AMBULANCIA] Paramedicos, %s chegou no local da emergência: %s",PlayerName(playerid),LastEmergencia);
					SendClientMessage(i,COLOR_PARAMEDICO,string);
				}
			}
		}
		case TAXISTA_AUTOMATICO :
	    {
			if(!IsTaxi(GetPlayerVehicleID(playerid)) && !IsMotoTaxi(GetPlayerVehicleID(playerid)))
			{
   				SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo da Cooperativa de Taxi.");
				return 1;
			}
 	    	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		 	{
		    	if(EntregandoEncomendas[playerid] == 1)
				{
		    	    EncomendasEntregues[playerid] = (EncomendasEntregues[playerid] + 1) % 5;
        			QuantidadeEncomendas[playerid]--;
        			GameTextForPlayer(playerid, "~y~entrega concluida", 3000, 1);
        			DisablePlayerCheckpoint(playerid);
        			if(EncomendasEntregues[playerid] == 0)
        			{
        			    SendClientMessage(playerid, COLOR_TAXISTA, "Bom Trabalho! Você recebeu $200,00 dólares.");
        			    Pay(playerid, 200);
        			}
		    	    if(QuantidadeEncomendas[playerid] <= 0){
                       	SendClientMessage(playerid, COLOR_TAXISTA, "As encomendas acabaram, vá pegar mais na Cooperativa de Táxi.");
             			CheckpointStatus[playerid] = NONE;
                       	RaceCheckpointStatus[playerid] = PEGANDO_ENCOMENDAS;
			            SetPlayerRaceCheckpoint(playerid, 1, 1631.2957,-1138.4460,23.9063,0.0,0.0,0.0,4.0);
					}
					else
					{
                       	SendClientMessage(playerid, COLOR_TAXISTA, "Continue entregando se quiser, caso contrário, /pararentregas");
						new locais = random(53);
						SetPlayerCheckpoint(playerid,EntregaEncomendasTaxi[locais][0],EntregaEncomendasTaxi[locais][1],EntregaEncomendasTaxi[locais][2],4.0);
					}
				}
			}
		}
		case CIMENTO_ENTREGA:
	    {
			if(EntregandoCimento[playerid] == 1){
			    SetPlayerControl(playerid,0);
			    DisablePlayerCheckpoint(playerid);
			    GameTextForPlayer(playerid,"~w~Descarregando...",20000,0);
			    SetTimerEx("SubmissoesCarros",20000,0,"d",playerid);
			    SendClientMessage(playerid, COLOR_PEDREIRA, "Descarregando Cimento....");
			}
		}
		case CIMENTO_ENTREGA2:
	    {
			if(EntregandoCimento[playerid] == 1){
				EntregandoCimento[playerid] = 0;
				CheckpointStatus[playerid] = NONE;
				SM[playerid] = NONE;
				DisablePlayerCheckpoint(playerid);
				SendClientMessage(playerid, COLOR_PEDREIRA, "[Construção] Obrigado, tome $300,00 pelo transporte. Até mais.");
				SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				AddPlayerMoney(playerid,300,3);
			}
		}
		case CONSERTANDO_POSTE:
	    {
			if(ArrumandoPostes[playerid] >= 1){
			    if(GetPlayerVehicleID(playerid) == CarroPoste){
		        	SetPlayerControl(playerid,0);
				    GameTextForPlayer(playerid,"~w~Consertando...",20000,0);
				    SetTimerEx("SubmissoesCarros",20000,0,"d",playerid);
				    SendClientMessage(playerid, COLOR_MECANICO, "Aguarde, trocando lâmpadas e fios...");
				} else {
					SendClientMessage(playerid, COLOR_MECANICO, "Você não está no carro correto! Missão cancelada!");
					DisablePlayerCheckpoint(playerid);
					CheckpointStatus[playerid] = NONE;
					ArrumandoPostes[playerid] = 0;
					SM[playerid] = 0;
				}
			}
		}
		case CONSERTANDO_POSTE2:
	    {
	     	if(GetPlayerVehicleID(playerid) == CarroPoste){
				SendClientMessage(playerid, COLOR_MECANICO, "[COEVL] Pronto a cidade está com os postes funcionando. Você recebeu $400.");
				AddPlayerMoney(playerid, 400,3);
				DisablePlayerCheckpoint(playerid);
				CheckpointStatus[playerid] = NONE;
				SM[playerid] = 0;
				ArrumandoPostes[playerid] = 0;
				SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				GameTextForPlayer(playerid, "~g~Missao Concluida~n~$400", 4000, 0);
			}
		}
		case IML_HOSPITAL:
	    {
			if(PegandoCorpos[playerid] == 1){
				if(GetPlayerVehicleID(playerid) == CarroCemiterio){
		        	SetPlayerControl(playerid,0);
		        	DisablePlayerCheckpoint(playerid);
		           	PegandoCorpos[playerid] += 1;
				    GameTextForPlayer(playerid,"~w~Aguarde...",20000,0);
				    SetTimerEx("SubmissoesCarros",20000,0,"d",playerid);
				    SendClientMessage(playerid, COLOR_TURQUOISE, "Aguarda aí, tamo colocando os presunto.");
				} else {
					DisablePlayerCheckpoint(playerid);
					CheckpointStatus[playerid] = NONE;
					SM[playerid] = 0;
					PegandoCorpos[playerid] = 0;
					SetVehicleToRespawn(CarroCemiterio);
				}
			}
			if(PegandoCorpos[playerid] == 2){
				if(GetPlayerVehicleID(playerid) == CarroCemiterio){
		        	SetPlayerControl(playerid,0);
		        	DisablePlayerCheckpoint(playerid);
		           	PegandoCorpos[playerid] += 1;
				    GameTextForPlayer(playerid,"~w~Aguarde...",20000,0);
				    SetTimerEx("SubmissoesCarros",20000,0,"d",playerid);
				    SendClientMessage(playerid, COLOR_TURQUOISE, "Aguarda aí, tamo colocando os presunto.");
				} else {
					DisablePlayerCheckpoint(playerid);
					CheckpointStatus[playerid] = NONE;
					SM[playerid] = 0;
					PegandoCorpos[playerid] = 0;
					SetVehicleToRespawn(CarroCemiterio);
				}
			}
		}
		case CEMITERIO:
		{
			if(PegandoCorpos[playerid] == 3){
				SendClientMessage(playerid, COLOR_TURQUOISE, "[Cemiterio] Corajoso hein? Quando precisarmos denovo avisaremos pelo jornal. $500.");
				AddPlayerMoney(playerid,500,3);
				DisablePlayerCheckpoint(playerid);
				CheckpointStatus[playerid] = NONE;
				SM[playerid] = 0;
				PegandoCorpos[playerid] = 0;
				SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			}
		}
		case REBOCANDO:
		{
			DisablePlayerCheckpoint(playerid);
			CheckpointStatus[playerid] = NONE;
			if(IsPlayerInAnyVehicle(playerid)){
				new carid, trailerid;
				new string[256];
				carid = GetPlayerVehicleID(playerid);
				if(IsTrailerAttachedToVehicle(carid)){
				    trailerid = GetVehicleTrailer(carid);
					new Float:radius;
					radius = GetPlayerDistanceToPointEx(playerid,MecRebI[playerid][MecPosX],MecRebI[playerid][MecPosY],MecRebI[playerid][MecPosZ]);
					new reward = floatround(radius);
					format(string, sizeof(string), "~g~$~w~%d", reward);
					GameTextForPlayer(playerid, string, 5000, 1);
					format(string, sizeof(string), "[OFICINA] Você recebeu $%d,00 dólares pelo serviço.", reward);
					SendClientMessage(playerid,COLOR_MECANICO,string);
					SetTimerEx("DarSpawn",4000,0,"d",trailerid);
					SetVehicleToRespawn(trailerid);
					DetachTrailerFromVehicle(carid);
					AddPlayerMoney(playerid,reward,3);
					if(reward > 20){
						EntregasCarros[playerid] ++;
						if(EntregasCarros[playerid] >= 4){
    						AcrescentarXpoints(playerid,1);
  							EntregasCarros[playerid] = 0;
  						}
					}
				}
		    }
		}
		case COLOCANDO_DROGAS:
		{
			if(IsTruck(GetPlayerVehicleID(playerid))){
 			   	if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)) || GetVehicleModel(GetPlayerVehicleID(playerid)) == 414){
				   	if(GetVehicleTrailer(GetPlayerVehicleID(playerid))){
				   		DisablePlayerCheckpoint(playerid);
				   		SendClientMessage(playerid, COLOR_CAMINHONEIRO, "As drogas foram colocadas... Se a polícia te pegar agora, lascou...");
						new deixando = random(2);
						SetPlayerCheckpoint(playerid,DeixandoDrogas[deixando][0],DeixandoDrogas[deixando][1],DeixandoDrogas[deixando][2],3.0);
                        CheckpointStatus[playerid] = TRANSPORTANDO_DROGAS;
						new rand = random(100);
						new string[128];
						if(rand <= 20) {
							format(string, sizeof(string), "[CENTRAL] Unidades, [Crime: Transporte de Drogas] [Suspeito: Caminhoneiro Desconhecido]. Varredura na cidade imediatamente!");
							SendClientMessagePolicia(COLOR_CENTRAL, string);
						}
						return 1;
					} else {
						SendClientMessage(playerid,COLOR_GRAY,"Não foi detectado Trailer!");
					}
				} else {
					SendClientMessage(playerid,COLOR_GRAY,"Seu caminhão não tem Trailer, como vai entregar a carga?");
				}
			} else {
				SendClientMessage(playerid,COLOR_GRAY,"Você não está em um ROADTRAIN ou MULE!");
			}
		}
        case PEGANDO_DROGAS:
		{
			ShowMenuForPlayer(VendoDrogas,playerid);
			SetPlayerControl(playerid,0);
			CheckpointStatus[playerid] = NONE;
			DisablePlayerCheckpoint(playerid);
		}
	    case ENTREGANDO_PIZZA:
		{
 			if(IsMotoPizza(GetPlayerVehicleID(playerid)))
	 		{
 			    new valor = 10 * (random(5) + 1);
	    		new string[128];
	    		PizzasEntregues[playerid]++;
       			if(PizzasEntregues[playerid] >= 6){
					AcrescentarXpoints(playerid, 1);
				 	PizzasEntregues[playerid] = 0;
				}
    			GameTextForPlayer(playerid, "~y~entrega concluida", 3000, 1);
				format(string,sizeof(string),"Pizza entregue, você recebeu: $%d,00 dólares.",valor);
	  			SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, string);
	  			if(pStats[playerid][Propriedade] != 0)
				{
				    AddPlayerMoney(playerid, valor / 2, 3);
					AcrescentarLucro(pStats[playerid][Propriedade], valor / 2);
					SendClientMessage(playerid, COLOR_BLUE, "Metade do dinheiro ganho foi entregue para a Pizzaria.");
				}
				else
				{
				    AddPlayerMoney(playerid, valor, 3);
				}
	  			PizzasMoto[GetVehicleMotoPizzaID(GetPlayerVehicleID(playerid))]--;
        	    if(PizzasMoto[GetVehicleMotoPizzaID(GetPlayerVehicleID(playerid))] <= 0)
				{
	  				SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, "As pizzas esgotaram, vá buscar mais na Pizzaria...");
	  				DisablePlayerCheckpoint(playerid);
					CheckpointStatus[playerid] = NONE;
				}
			 	else
			 	{
	  				SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, "Continue com as entregas se quiser, caso contrário, /pararentrega");
					DisablePlayerCheckpoint(playerid);
					new pizzas = random(sizeof EntregaPizza);
					new Float:X, Float:Y, Float:Z, Float:dis;
					GetPlayerPos(playerid, X, Y, Z);
					dis += floatpower(X - EntregaPizza[pizzas][0], 2);
					dis += floatpower(Y - EntregaPizza[pizzas][1], 2);
					dis += floatpower(Z - EntregaPizza[pizzas][2], 2);
					while(dis < 20.0)
					{
					    pizzas = random(sizeof EntregaPizza);
					    dis = 0.0;
						dis += floatpower(X - EntregaPizza[pizzas][0], 2);
						dis += floatpower(Y - EntregaPizza[pizzas][1], 2);
						dis += floatpower(Z - EntregaPizza[pizzas][2], 2);
					}
					SetPlayerCheckpoint(playerid,EntregaPizza[pizzas][0],EntregaPizza[pizzas][1],EntregaPizza[pizzas][2],3.0);
					CheckpointStatus[playerid] = ENTREGANDO_PIZZA;
				}
			}
		}
		case COLETANDO_LIXO:
		{
		    if(IsPlayerInAnyVehicle(playerid)){
		        SendClientMessage(playerid,COLOR_GRAY,"Saia do caminhão para coletar o lixo daqui");
			} else {
			    if(LixoColetado[playerid] <= 9){
			    	SendClientMessage(playerid,COLOR_LIXEIRO,"Lixo coletado.");
				    DisablePlayerCheckpoint(playerid);
					new rt = random(sizeof LixeirasCheckpoints);
					SetPlayerCheckpoint(playerid,LixeirasCheckpoints[rt][0],LixeirasCheckpoints[rt][1],LixeirasCheckpoints[rt][2],3.0);
					SendClientMessage(playerid,COLOR_LIXEIRO,"Ainda tem mais lixo para coletar!");
					LixoColetado[playerid]++;
				} else {
				    DisablePlayerCheckpoint(playerid);
				    SendClientMessage(playerid,COLOR_LIXEIRO,"Parabéns, você completou a missão de coletar lixo!");
				    SendClientMessage(playerid,COLOR_LIXEIRO,"Agora vá até o lixão e descarregue.");
				    LixoColetado[playerid]++;
				}
			}
		}
		case TRANSPORTANDO_DROGAS:
		{
		    if(IsTruck(GetPlayerVehicleID(playerid))){
 		   		if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)) || GetVehicleModel(GetPlayerVehicleID(playerid)) == 414){
					if(GetVehicleTrailer(GetPlayerVehicleID(playerid))){
				   		DisablePlayerCheckpoint(playerid);
				   		SendClientMessage(playerid, COLOR_CAMINHONEIRO, "Os Traficantes estão checando o carregamento");
				   		GameTextForPlayer(playerid, "~w~Aguarde...",15000,0);
				   		SetTimerEx("ChecandoDrogas",15000,0,"d",playerid);
					} else {
						SendClientMessage(playerid,COLOR_GRAY,"Não foi detectado Trailer!");
					}
				} else {
					SendClientMessage(playerid,COLOR_GRAY,"Seu caminhão não tem Trailer, como vai entregar a carga?");
				}
			} else {
				SendClientMessage(playerid,COLOR_GRAY,"Você não está em um ROADTRAIN ou MULE!");
			}
		}
		case AGENCIA_EMPREGOS:
		{
		    DestroyMenuEx(Profs);
		    ProfsMenuStart = 1;
		    Profs = CreateMenu("Profisso",2,2,150,100,20);
		    if(!IsValidMenu(Profs)) return 1;
		    SetMenuColumnHeader(Profs,0,"Profissao");
    		SetMenuColumnHeader(Profs,1,"Level");
     		for(new p = ProfsMenuStart; p < ProfsMenuStart + 8; p++)
           	{
           	    if(p >= sizeof Profissoes) break;
           	    new value[64];
           	    valstr(value, Profissoes[p][ProfLevel]);
				AddMenuItem(Profs, 0, Profissoes[p][ProfName]);
				AddMenuItem(Profs, 1, value);
           	}
           	if(ProfsMenuStart + 8 < sizeof Profissoes)
           	{
           		AddMenuItem(Profs, 0, "Proximo");
           		AddMenuItem(Profs, 1, "->");
			}
		    ShowMenuForPlayer(Profs, playerid);
		    SetPlayerControl(playerid, 0);
		}
	}
	return 1;
}
stock PlayerPlaySoundEx(playerid,soundid)
{
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid,X,Y,Z);
	PlayerPlaySound(playerid,soundid,X,Y,Z);
}
public ContrabandoNavio() {
	for(new i=0; i<MAX_SLOTS; i++){
		if(Contrabando[i] == 360000){
		 ContrabandoPassar[i]++;
		}
		if(Contrabando[i] == 0) {
		}
	}
}
public ChecandoContrabandoCar(playerid){
	new rand = random(3);
	if(rand == 0 || rand == 1){
	    SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Beleza, vou querer o carro agora leve para o destino que lhe passarei.");
		new Con = random(4);
		DisablePlayerCheckpoint(playerid);
		SetPlayerControl(playerid,1);
		SetPlayerCheckpoint(playerid,EntregarContrabandoCarro[Con][0],EntregarContrabandoCarro[Con][1],EntregarContrabandoCarro[Con][2],3.0);
		CheckpointStatus[playerid] = CONTRABANDO_CARRO3;
		SendClientMessage(playerid, COLOR_WHITE, "Leve para o local do radar.");
		return 1;
	}
	else if(rand == 2){
	    SendClientMessage(playerid, COLOR_LIGHT_RED, "Não vou querer! Deixe para a próxima.");
	    SendClientMessage(playerid, COLOR_LIGHT_RED, "A cor não me agradou. Se achou ruim, SE MATE!");
		DisablePlayerCheckpoint(playerid);
		SetPlayerControl(playerid,1);
		CheckpointStatus[playerid] = NONE;
		return 1;
	}
	return 1;
}
public Cancelar(playerid)
{
	ParaAceitar[playerid] = ACEITAR_NADA;
	SendClientMessage(playerid, COLOR_GRAY, "A proposta foi cancelada devido à demora para responder.");
}

public ConsertarVeiculo(playerid, vehicleid, Float:X, Float:Y, Float:Z, Float:ang)
{
	SendClientMessage(playerid, COLOR_MECANICO, "Veículo consertado! =)");
	SetVehiclePos(vehicleid, X, Y, Z);
	SetVehicleZAngle(vehicleid, ang);
	PutPlayerInVehicle(playerid, vehicleid, 0);
}

public ArrumandoVeiculo(playerid, vehicleid, Float:X, Float:Y, Float:Z, Float:ang)
{
	SendClientMessage(playerid, COLOR_WHITE, "Veículo consertado! O conserto custou $100");
	AddPlayerMoney(playerid,-100,-1);
	AcrescentarLucro(9, 100);
	SetVehiclePos(vehicleid,X,Y,Z);
	SetVehicleZAngle(vehicleid,ang);
	PutPlayerInVehicle(playerid,vehicleid,0);
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
}

public ColocandoPlaca(playerid,vehicleid,Float:X,Float:Y,Float:Z,Float:ang){
	new string[128];
	AddPlayerMoney(playerid,-200,-1);
	AcrescentarLucro(9, 200);
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SetVehiclePos(vehicleid,X,Y,Z);
	SetVehicleZAngle(vehicleid,ang);
	PutPlayerInVehicle(playerid,vehicleid,0);
	format(string, sizeof(string), "[LOJA] Placa do veículo mudada para: %s", vStats[GetPlayerVehicleID(playerid)][VPlaca]);
	SendClientMessage(playerid, COLOR_MECANICO, string);
}
public OnPlayerLeaveCheckpoint(playerid)
{
	printf("Jogador de ID %d (%s) deixou um checkpoint", playerid, PlayerName(playerid));
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	if((GetPlayerMenu(playerid) == WSlot2 && IsValidMenu(WSlot2)) || (GetPlayerMenu(playerid) == WSlot3 && IsValidMenu(WSlot3))
	|| (GetPlayerMenu(playerid) == WSlot4 && IsValidMenu(WSlot4)) || (GetPlayerMenu(playerid) == WSlot5 && IsValidMenu(WSlot5))
	|| (GetPlayerMenu(playerid) == WSlot6 && IsValidMenu(WSlot6)) || (GetPlayerMenu(playerid) == WColete && IsValidMenu(WColete))
	|| (GetPlayerMenu(playerid) == WCamuflagem && IsValidMenu(WCamuflagem)) || (GetPlayerMenu(playerid) == WClockBomb && IsValidMenu(WClockBomb))
	|| (GetPlayerMenu(playerid) == WRocket && IsValidMenu(WRocket)) || (GetPlayerMenu(playerid) == WFlash && IsValidMenu(WFlash))){
		ShowMenuForPlayer(Weapons, playerid);
		SetPlayerControl(playerid, false);
		return 1;
	}
	if(GetPlayerMenu(playerid) == BuyCar)
	{
	    RemovePlayerFromVehicle(playerid);
	    SetPlayerControl(playerid, true);
	    return 1;
	}
	if(GetPlayerMenu(playerid) == mCusto || GetPlayerMenu(playerid) == mCurrentTune)
	{
	    new Float:x, Float:y, Float:z;
	    GetVehiclePos(TuneVehicle, x, y, z);
	    if(!IsPaintJob)
	    {
	    	RemoveVehicleComponent(TuneVehicle, TuneComponent);
		}
		else
		{
			RemoveVehiclePaintjob(TuneVehicle);
		}
		IsPaintJob = false;
       	SetPlayerControl(playerid, false);
	    ShowTuningMainMenu(playerid);
	    CarregarCarro(TuneVehicle);
     	return 1;
	}
	if(GetPlayerMenu(playerid) == Weapons && TraficandoArmas[playerid] == 1)
	{
	    DisablePlayerCheckpoint(playerid);
	}
	if(GetPlayerMenu(playerid) == BancoOpc2){
		ShowMenuForPlayer(BancoOpc,playerid);
		SetPlayerControl(playerid,0);
		return 1;
	}
	if(GetPlayerMenu(playerid) == CreditosCartao){
		ShowMenuForPlayer(Outros,playerid);
		SetPlayerControl(playerid, false);
		return 1;
	}
	if(GetPlayerMenu(playerid) == mTuning)
	{
	    StopPlayerTune(playerid);
	}
	if(GetPlayerMenu(playerid) == BurgerShot){
	  	SendClientMessage(playerid, COLOR_WHEAT, "[BURGER-SHOT] Disponha. Esperamos que retorne.");
		TogglePlayerControllable(playerid, 1);
		TextDrawHideForPlayer(playerid,TDDriveThru[playerid]);
	}
	if(GetPlayerMenu(playerid) == CluckinBell){
	  	SendClientMessage(playerid, COLOR_WHEAT, "[CLUCKIN-BELL] Disponha. Esperamos que retorne.");
		TogglePlayerControllable(playerid, 1);
		TextDrawHideForPlayer(playerid,TDDriveThru[playerid]);
	}
	SetCameraBehindPlayer(playerid);
    GranaCofre[playerid][0] = 0;
	GranaCofre[playerid][1] = 0;
	ArmaCofre[playerid][0] = 0;
	ArmaCofre[playerid][1] = 0;
	DrogaCofre[playerid][0] = 0;
	DrogaCofre[playerid][1] = 0;
	MaconhaEsc[playerid] = 0;
	CocainaEsc[playerid] = 0;
	HeroinaEsc[playerid] = 0;
	TraficandoArmas[playerid] = 0;
	printf("Jogador de ID %d (%s) saiu do menu", playerid, PlayerName(playerid));
	SetPlayerControl(playerid, true);
	return 1;
}

public Roubo(playerid) {
	RouboMao[playerid] = 1;
    SendClientMessage(playerid,COLOR_GREEN,"É, agora você já pode roubar, escolha alguém que tenha muita grana...");
}
stock ConfirmarProfissao(playerid,profid)
{
    if(!Logado[playerid]) return ;
    profselection[playerid] = profid;
    DestroyMenuEx(ConfirmarProf);
    ConfirmarProf = CreateMenu("Profisso",2,2,150,100,20);
    if(IsValidMenu(ConfirmarProf)){
    	SetMenuColumnHeader(ConfirmarProf,0,Profissoes[profselection[playerid]][ProfName]);
    	AddMenuItem(ConfirmarProf,0,"Confirmar");
    	AddMenuItem(ConfirmarProf,0,"Cancelar");
		ShowMenuForPlayer(ConfirmarProf,playerid);
		SetPlayerControl(playerid,false);
	}
}
stock AplicarProfissao(playerid,profid,bool:promotion = false)
{
	if(!Logado[playerid]) return ;
	if((profid == COP_RODOVIARIO || profid == COP_SWAT || profid == DELEGADO) && !promotion){
	    SendClientMessage(playerid, COLOR_GRAY, "Você deve começar de Policial Militar e ser promovido para conseguir essa profissão.");
		return ;
	}
	if(pStats[playerid][XL] < Profissoes[profid][ProfLevel]){
		new tmp[128];
		format(tmp,128,"Você não tem Level suficiente para essa profissão. Level necessário: %d", Profissoes[profid][ProfLevel]);
		SendClientMessage(playerid, COLOR_GRAY, tmp);
		return ;
	}
	if(pStats[playerid][Prof] == profid){
		SendClientMessage(playerid, COLOR_GRAY, "Você está querendo pegar a mesma profissão? Tem certeza? ¬¬");
		return ;
	}
    if(pStats[playerid][HabTerrestre] == 0){
    	if(profid == 3 || profid == 6 || profid == 7){
			SendClientMessage(playerid, COLOR_MOTORISTA_DE_ONIBUS, "[Companhia de Transportes] Não podemos adimitir você pois não possui Habilitação Terrestre para essa profissão");
			SendClientMessage(playerid, COLOR_MOTORISTA_DE_ONIBUS, "[Companhia de Transportes] Favor dirigir-se a Auto-Escola [/gps auto-escola] e faça o teste.");
			return ;
		} else if(profid == 5){
			SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, "[PIZZARIA] Não adimitimos você pois não possui Habilitação Terretre para dirigir nossas motos.");
			SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, "[PIZZARIA] Favor dirigir-se a Auto-Escola [/gps auto-escola] e faça o teste.");
			return ;
		}
	}
    if(pStats[playerid][Porte] == 0){
		if(profid == 12){
			SendClientMessage(playerid, COLOR_SEGURANÇA, "[SECURITYLIFE] Você não pode entrar nessa profissão, pois não tem Porte de Armas.");
			SendClientMessage(playerid, COLOR_SEGURANÇA, "[SECURITYLIFE] Favor dirigir-se a DelegaciaAuto-Escola [/gps delegacia] e preencha a ficha.");
			return ;
		}
	}
    new str[128];
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleID(playerid) < AmountServerVehicles)
	{
    	RemovePlayerFromVehicle(playerid);
	}
    RetirarJogadorPropriedade(playerid);
	pStats[playerid][Prof] = profid;
	SavePlayer(PlayerName(playerid),playerid);
	DisablePlayerCheckpoint(playerid);
	TrancarVeiculosPorProf(playerid);
	SetPlayerControl(playerid,true);
    if(profid != DESEMPREGADO)
    {
        SendClientMessage(playerid, COLOR_WHITE, " ");
    	format(str, sizeof str, "Você foi empregado como %s, meus parabéns!", Profissoes[profid][ProfName]);
    	SendClientMessage(playerid, COLOR_BLUE, str);
    	SendClientMessage(playerid, COLOR_WHITE, "Digite /profissao para ver os comandos da sua profissão.");
    	SendClientMessage(playerid, COLOR_WHITE, "Veja também o seu horário de trabalho. Digite: /meuhorario.");
    	SendClientMessage(playerid, COLOR_BLUE, "Bom Trabalho!");
    	SendClientMessage(playerid, COLOR_WHITE, " ");
	}
    if(pStats[playerid][Xpoints] == 0){
    	for(new i=0; i<MAX_SLOTS; i++){
	    	if((pStats[i][Prof] == TAXISTA || pStats[i][Prof] == MOTO_TAXISTA) && i != playerid){
				format(str,sizeof(str),"%s está na Agência de Empregos, ele pode precisar de um taxi, vá pegá-lo.",PlayerName(playerid));
				SendClientMessage(i, COLOR_TAXISTA, str);
				SendClientMessage(i, COLOR_TAXISTA, "Foi marcado um CheckPoint em seu radar, siga-o para ir até o jogador!");
				SendClientMessage(i, COLOR_WHITE,   "Para desativa-lo digite /desativarcheckpoint");
				SendClientMessage(playerid, COLOR_TAXISTA, "[CENTRAL TAXI] Senhor, solicitamos um taxi para você, caso não precise poderá pegar um onibus, no terminal do lado de fora. Obrigado");
				SetPlayerRaceCheckpoint(i,1,1309.4923,-1382.2971,13.7309,0.0,0.0,0.0,2.0);
				RaceCheckpointStatus[i] = SERVICO;
			}
        }
	}
	return ;
}

stock SendBankMessage(){
	new string[128];
	for(new p = 0; p < MAX_CASAS; p++){
	    if(fexist(pckStats[p][PickupDono])){
	        new id = IDName(pckStats[p][PickupDono]);
			format(string,sizeof(string),"[BANCO] Sr. %s estamos lhe informando suas taxas e seu saldo bancário:",pckStats[p][PickupDono]);
			EnviarCartaAnonima(pckStats[p][PickupDono],string);
			format(string,sizeof(string),"Saldo: $%d,00 dólares | Empréstimo solicitado: $%d,00 dólares | Dívidas de empréstimo: $%d,00 dólares",(id==INVALID_PLAYER_ID)?(strval(GetValue(PlayerFile(pckStats[p][PickupDono]),"Banco"))):(pStats[id][Banco]),(id==INVALID_PLAYER_ID)?(strval(GetValue(PlayerFile(pckStats[p][PickupDono]),"Emprestimo"))):(pStats[id][Emprestimo]),(id==INVALID_PLAYER_ID)?(strval(GetValue(PlayerFile(pckStats[p][PickupDono]),"Divida"))):(pStats[id][Divida]));
        	EnviarCartaAnonima(pckStats[p][PickupDono],string);
		}
	}
}
stock SendECTVLMessage(){
	new string[128];
	for(new p = 0; p < MAX_CASAS; p++){
	    if(fexist(pckStats[p][PickupDono])){
	    	format(string,sizeof(string),"[ECTVL] Sr. %s sua conta de telefone veio no valor de: $%d,00 dólares",pckStats[p][PickupDono],pckStats[p][ContaTelefone]);
			EnviarCartaAnonima(pckStats[p][PickupDono],string);
		}
	}
}
stock SendCOEVLMessage(){
	new string[128];
	for(new p = 0; p < MAX_CASAS; p++){
	    if(fexist(pckStats[p][PickupDono])){
			format(string,sizeof(string),"[COEVL] Sr. %s sua conta de luz veio no valor de: $%d,00 dólares",pckStats[p][PickupDono],pckStats[p][ContaLuz]);
			EnviarCartaAnonima(pckStats[p][PickupDono],string);
		}
	}
}
public FimHoraExtra(playerid){
    KillTimer(TempoHoraExtra2[playerid]);
	FazendoHoraExtra[playerid] = 0;
	SendClientMessage(playerid, COLOR_WHITE, "Sua hora extra acabou! Já pode descansar...");
}
public CancelarHoraExtra(playerid){
	KillTimer(TempoHoraExtra[playerid]);
	HoraExtra[playerid] = 0;
	SendClientMessage(playerid, COLOR_GRAY, "Você demorou para responder então a proposta de Hora extra foi CANCELADA!");
}
public CanPayAgain(playerid)
{
	PayAgain[playerid] = 0;
}
stock PlayerPay(playerid, plid, amount, div = 0)
{
	if(PayAgain[plid] == 0)
	{
	    AcrescentarXpoints(plid, 1);
	    SetTimerEx("CanPayAgain", 300000, 0, "d", plid);
	    PayAgain[plid] = 1;
	}
	AddPlayerMoney(playerid, -amount, -1);
	new pay = amount;
	if(div > 0)
	{
	    pay = pay / div;
	}
	if(pStats[plid][Propriedade] != 0)
	{
	    AddPlayerMoney(plid, pay / 2, 12);
	    AcrescentarLucro(pStats[plid][Propriedade], pay / 2);
	    SendClientMessage(plid, COLOR_BLUE, "Você recebeu somente metade do pagamento, o resto foi para sua propriedade.");
	}
	else
	{
	    AddPlayerMoney(plid, pay, 12);
	}
	new string[128];
	format(string, sizeof string, "[PAGAMENTO] %s pagou $%d,00 dólares à %s.", PlayerName(playerid), amount, PlayerName(plid));
	SendClientMessageAdmin(COLOR_ADMIN_MESSAGE, string);
}
stock Pay(playerid, amount)
{
    if(PayAgain[playerid] == 0)
	{
	    AcrescentarXpoints(playerid, 1);
	    SetTimerEx("CanPayAgain", 300000, 0, "d", playerid);
	    PayAgain[playerid] = 1;
	}
	if(pStats[playerid][Propriedade] != 0)
	{
	    AddPlayerMoney(playerid, amount / 2, 12);
	    AcrescentarLucro(pStats[playerid][Propriedade], amount / 2);
	    SendClientMessage(playerid, COLOR_BLUE, "Você recebeu somente metade do pagamento, o resto foi para sua propriedade.");
	}
	else
	{
	    AddPlayerMoney(playerid, amount, 12);
	}
	new string[128];
	format(string, sizeof string, "[PAGAMENTO] %s recebeu $%d,00 dólares.", PlayerName(playerid), amount);
	SendClientMessageAdmin(COLOR_ADMIN_MESSAGE, string);
}
stock DiminuirXpoints(playerid,points)
{
      if(fexist(PlayerFile(PlayerName(playerid)))){
		if(pStats[playerid][Xpoints]-points >= 0){
		    new string[128];
	   		pStats[playerid][Xpoints]=pStats[playerid][Xpoints]-points;
	   		format(string,sizeof(string),"Seus Xpoints foram diminuídos para: %d",pStats[playerid][Xpoints]);
			SendClientMessage(playerid, COLOR_GRAY, string);
		} else {
		    pStats[playerid][Xpoints] = 0;
			}
   		} else {
		  	printf("Não conseguimos diminuir o XL de %s",PlayerName(playerid));
		  	printf("O arquivo do jogador não foi encontrado");
	  }
}
stock AcrescentarXpoints(playerid,points)
{
	if(FazendoHoraExtra[playerid] == 0 && pStats[playerid][Prof] != SEGURANÇA && RecebendoSalario == 0) {
		switch(ValorDia){
			case 0:
			{
				if(HoraJogo < HorarioTrabalho[pStats[playerid][Prof]][0] || HoraJogo > HorarioTrabalho[pStats[playerid][Prof]][1]){
					SendClientMessage(playerid, COLOR_GRAY, "Você não recebeu Xpoint pois não está na hora de seu trabalho...");
  					return 1;
				}
			}
			case 1:
			{
    			if(HoraJogo < HorarioTrabalho[pStats[playerid][Prof]][2] || HoraJogo > HorarioTrabalho[pStats[playerid][Prof]][3]){
					SendClientMessage(playerid, COLOR_GRAY, "Você não recebeu Xpoint pois não está na hora de seu trabalho...");
 					return 1;
				}
			}
			case 2:
			{
	   			if(HoraJogo < HorarioTrabalho[pStats[playerid][Prof]][4] || HoraJogo > HorarioTrabalho[pStats[playerid][Prof]][5]){
					SendClientMessage(playerid, COLOR_GRAY, "Você não recebeu Xpoint pois não está na hora de seu trabalho...");
  					return 1;
				}
			}
			case 3:
			{
	   			if(HoraJogo < HorarioTrabalho[pStats[playerid][Prof]][6] || HoraJogo > HorarioTrabalho[pStats[playerid][Prof]][7]){
					SendClientMessage(playerid, COLOR_GRAY, "Você não recebeu Xpoint pois não está na hora de seu trabalho...");
  					return 1;
				}
			}
			case 4:
			{
	   			if(HoraJogo < HorarioTrabalho[pStats[playerid][Prof]][8] || HoraJogo > HorarioTrabalho[pStats[playerid][Prof]][9]){
					SendClientMessage(playerid, COLOR_GRAY, "Você não recebeu Xpoint pois não está na hora de seu trabalho...");
  					return 1;
				}
			}
			case 5:
			{
	   			if(HoraJogo < HorarioTrabalho[pStats[playerid][Prof]][10] || HoraJogo > HorarioTrabalho[pStats[playerid][Prof]][11]){
					SendClientMessage(playerid, COLOR_GRAY, "Você não recebeu Xpoint pois não está na hora de seu trabalho...");
  					return 1;
				}
			}
			case 6:
			{
	    		if(HoraJogo < HorarioTrabalho[pStats[playerid][Prof]][12] || HoraJogo > HorarioTrabalho[pStats[playerid][Prof]][13]){
					SendClientMessage(playerid, COLOR_GRAY, "Você não recebeu Xpoint pois não está na hora de seu trabalho...");
  					return 1;
				}
			}
		}
  	}
  	if(fexist(PlayerFile(PlayerName(playerid)))){
  	    new string[128];
  	    pStats[playerid][QR]++;
  	    if(pStats[playerid][QR] >= 3){
  	        pStats[playerid][QR] = 0;
	      	pStats[playerid][Respeito]++;
	      	if(IsPlayerInGang(playerid))
			{
  				gStats[GetGangID(pStats[playerid][GangueNome])][GangPontos]++;
			}
		   	SendClientMessage(playerid,COLOR_PINK,"Parabéns continue trabalhando assim e se mostrando eficiente.");
		 	format(string,sizeof(string),"Você ganhou mais 1 ponto de Respeito pelo trabalho. TOTAL DE RESPEITO: %d.",pStats[playerid][Respeito]);
      	   	SendClientMessage(playerid,COLOR_PINK,string);
        }
		if(pStats[playerid][Xpoints]+points >= Profissoes[pStats[playerid][Prof]][ProfXpoint]){
		    if(pStats[playerid][GanhouLevel] == 0){
			    if(pStats[playerid][XL] <= 99){
				    pStats[playerid][XL]++;
			    	format(string,sizeof(string),"[LEVEL] Você alcançou %d Xpoints e subiu mais um Level",Profissoes[pStats[playerid][Prof]][ProfXpoint]);
			    	SendClientMessage(playerid,COLOR_GREEN,string);
					format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~y~Level: ~w~%d",pStats[playerid][XL]);
					GameTextForPlayer(playerid,string,5000,3);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    	pStats[playerid][Xpoints] = 0;
			    	pStats[playerid][GanhouLevel] = DiaJogo;
					format(string,sizeof(string),"[LEVEL] %s: ganhou mais um Level total: %d",PlayerName(playerid),pStats[playerid][XL]);
					writelog(string);
					if(pStats[playerid][LastProf] == pStats[playerid][Prof] && pStats[playerid][Prof] != 1){
					    pStats[playerid][XLRank]++;
	  				    format(string,sizeof(string),"[RANK PROF] Você ganhou um ponto na profissão. Seus Ponto(s): %d. Para ser promovido falta %d ponto(s)",pStats[playerid][XLRank],9 - pStats[playerid][XLRank]);
					    if(pStats[playerid][XLRank] == 9){
	     					if(pStats[playerid][RankProf] == 4){
	     					    pStats[playerid][XLRank] = 0;
		     					new novosla;
		     					pStats[playerid][SalarioProf] = Profissoes[pStats[playerid][Prof]][ProfPay];
		     					novosla = pStats[playerid][Passaporte]*2;
						    	format(string,sizeof(string),"[PROMOÇÃO] Você tem o cargo mais alto na empresa, mas recebeu um aumento no salário. Novo Salário: %d.",novosla);
						    	SendClientMessage(playerid,COLOR_BLUE_PLUS,string);
								format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~g~Salario: ~w~%d",novosla);
								GameTextForPlayer(playerid,string,5000,3);
							} else {
								pStats[playerid][XLRank] = 0;
						   		pStats[playerid][RankProf]++;
			       		      	pStats[playerid][SalarioProf] = SalariosProf[pStats[playerid][Prof]][pStats[playerid][RankProf]];
						    	format(string,sizeof(string),"[PROMOÇÃO] Você conseguiu uma promoção no seu emprego. Novo Salário: %d. Agora você é %s.",pStats[playerid][SalarioProf],pStats[playerid][RankProf]);
						    	SendClientMessage(playerid,COLOR_BLUE_PLUS,string);
								format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Promovido: ~w~%s",ProfRank[pStats[playerid][Prof]][pStats[playerid][RankProf]]);
								GameTextForPlayer(playerid,string,5000,3);
							}
					    }
					} else {
						pStats[playerid][XLRank] = 0;
						pStats[playerid][LastProf] = pStats[playerid][Prof];
					}
				} else {
					SendClientMessage(playerid, COLOR_BLUE_PLUS, "[LEVEL] Você já ganhou um XL nesse dia, por isso não ganhou XL, espere o outro dia no jogo, vá se divertir.");
				}
			} else {
				SendClientMessage(playerid, COLOR_BLUE_PLUS, "Você iria ganhar 1 XL, porém o LVL mais alto do VLR é 100, Bom jogo");
			}
		} else {
 			if(pStats[playerid][GanhouLevel] == 0){
	    		pStats[playerid][Xpoints]=pStats[playerid][Xpoints]+points;
			} else {
				SendClientMessage(playerid, COLOR_BLUE_PLUS, "[LEVEL] Você já ganhou Level, não poderá acumular mais XPoints, portanto vá se divertir.");
			}
		}
  	} else {
	  	printf("Erro ao acrescentar XL para %s",PlayerName(playerid));
		printf("O arquivo do jogador não foi encontrado");
  	}
 	return 1;
}

public GatesCoordChecker()
{
	for(new p=0; p<4; p++){
	    for(new i = 0; i < MAX_SLOTS; i++){
	        if(IsPlayerConnected(i) && Logado[i] == 1 && GetDistanceToObject(i,portaoauto) < 15){
				MoveObject(portaoauto,1812.637,-2061.904,15.347,2);
				AbrindoPortaoAuto = 1;
				KillTimer(FechandoPortaoAuto);
				FechandoPortaoAuto = SetTimer("TerminarAbrirPortaoAuto",7000,0);
        	}
			if(IsPlayerConnected(i) && IsPlayerInAnyVehicle(i) && (pStats[i][Prof] == COP_SWAT || pStats[i][Prof] == COP_RODOVIARIO || pStats[i][Prof] == COP_MILITAR || pStats[i][Prof] == DELEGADO)){
				if(GetDistanceToObject(i,Gates[p]) < 10) {
					if(PortaoAbrindo[p] == 0 && PortaoAberto[p] == 0){
			    		PortaoAbrindo[p]=1;
			    		OpenGate(p);
					}
				}
				else
				{
				    if(PortaoFechando[p] == 0 && PortaoAberto[p] == 1){
		        		PortaoFechando[p]=1;
		        		CloseGate(p);
					}
				}
				if(GetDistanceToObject(i,Portao[p]) < 15) {
					if(DelegaAbrindo[p] == 0 && DelegaAberto[p] == 0){
			    		DelegaAbrindo[p]=1;
			    		OpenPortao(p);
					}
				}
				else
				{
				    if(DelegaFechando[p] == 0 && DelegaAberto[p] == 1){
		        		DelegaFechando[p]=1;
		        		ClosePortao(p);
					}
				}
			}
		}
	}
}
stock compare(string_text1[],string_text2[])
{
	if(!strlen(string_text1) || strlen(string_text1) != strlen(string_text2)) return false;
	for(new i = 0; i < strlen(string_text1); i++)
	{
	    if(strcmp(string_text1, string_text2, true) != 0) return false;
	}
	return true;
}
stock IDName(playername[])
{
	for(new i = 0; i < MAX_SLOTS; i++)
	{
	    if(compare(playername, PlayerName(i)))
	    {
	        return i;
	    }
	}
	return INVALID_PLAYER_ID;
}
stock CobrarContaTelefone()
{
    SendECTVLMessage();
	new string[128];
	for(new p = 0; p < MAX_CASAS; p++){
	    if(!compare(pckStats[p][PickupDono],"NONE")) continue;
	    if(pckStats[p][SemTelefone] == 0 && pckStats[p][ContaTelefone] > 0){
	        if(strval(GetValue(PlayerFile(pckStats[p][PickupDono]),"Banco")) > pckStats[p][ContaTelefone]){
	            if(IsStringAName(pckStats[p][PickupDono])){
	                new ID = IDName(pckStats[p][PickupDono]);
					format(string,sizeof(string),"A conta de luz veio no valor de $%d,00 dólares, o dinheiro foi retirado do seu banco!",pckStats[p][ContaTelefone]);
					SendClientMessage(ID, COLOR_WHITE, string);
					pStats[ID][Banco] -= pckStats[p][ContaTelefone];
				}
				else{
					format(string,sizeof(string),"A conta de luz veio no valor de $%d,00 dólares, o dinheiro foi retirado do seu banco!",pckStats[p][ContaTelefone]);
					GuardarMensagem(pckStats[p][PickupDono],string);
					GiveValue(pckStats[p][PickupDono],"Banco",-pckStats[p][ContaTelefone]);
				}
			}
			else{
			    pckStats[p][SemTelefone] = 1;
			    if(IsStringAName(pckStats[p][PickupDono])){
		    	    format(string,sizeof(string),"e pague essa última conta de telefone de $%d,00 dólares",pckStats[p][ContaTelefone]);
					SendClientMessage(IDName(pckStats[p][PickupDono]),COLOR_GRAY,"Seu telefone foi CORTADO pois você não possui dinheiro para pagar!");
					SendClientMessage(IDName(pckStats[p][PickupDono]),COLOR_GRAY,"Se quiser liberar a luz devolta, vá até a ECTVL (Empresa de Contas Telefônicas Virtual Life)");
					SendClientMessage(IDName(pckStats[p][PickupDono]),COLOR_GRAY,string);
				}
				else{
					format(string,sizeof(string),"e pague essa última conta de telefone de $%d,00 dólares",pckStats[p][ContaTelefone]);
				    GuardarMensagem(pckStats[p][PickupDono],"Seu telefone foi CORTADO pois você não possui dinheiro para pagar...");
				    GuardarMensagem(pckStats[p][PickupDono],"Se quiser liberar a luz devolta, vá até a ECTVL (Empresa de Contas Telefônicas Virtual Life)");
				    GuardarMensagem(pckStats[p][PickupDono],string);
				}
			}
		}
	}
}
stock CobrarContaLuz()
{
    SendCOEVLMessage();
	new string[128];
	new dono[MAX_PLAYER_NAME];
	for(new p=0; p<MAX_CASAS; p++){
	    if(!compare(pckStats[p][PickupDono],"NONE")) continue;
	    format(dono,sizeof(dono),pckStats[p][PickupDono]);
	    if(pckStats[p][SemLuz] == 0 && pckStats[p][ContaLuz] > 0){
	    	if(strval(GetValue(dono,"Banco")) >= pckStats[p][ContaLuz]){
	    		if(IsStringAName(dono)){
	        		format(string,sizeof(string),"O dinheiro da conta de luz foi retirado do seu banco, $%d,00 dólares",pckStats[p][ContaLuz]);
	        		SendClientMessage(IDName(dono),COLOR_WHITE,string);
					pStats[IDName(dono)][Banco] -= pckStats[p][ContaLuz];
	        		pckStats[p][ContaLuz] = 0;
				}
				else{
		    		format(string,sizeof(string),"Sua conta de luz veio no valor de $%d",pckStats[p][ContaLuz]);
		    		GuardarMensagem(dono,string);
		    		GuardarMensagem(dono,"O dinheiro foi retirado do seu banco...");
		    		GiveValue(dono,"Banco",-pckStats[p][ContaLuz]);
	        		pckStats[p][ContaLuz] = 0;
				}
			}

			else{
			    pckStats[p][SemLuz] = 1;
		    	if(IsStringAName(dono)){
		    	    format(string,sizeof(string),"e pague essa última conta de luz de $%d,00 dólares",pckStats[p][ContaLuz]);
					SendClientMessage(IDName(dono),COLOR_GRAY,"Sua luz foi CORTADA pois você não possui dinheiro para pagar!");
					SendClientMessage(IDName(dono),COLOR_GRAY,"Se quiser liberar a luz devolta, vá até a COEVL (Companhia Elétrica Virtual Life)");
					SendClientMessage(IDName(dono),COLOR_GRAY,string);
				}
				else{
					format(string,sizeof(string),"e pague essa última conta de luz de $%d,00 dólares",pckStats[p][ContaLuz]);
				    GuardarMensagem(dono,"Sua luz foi CORTADA pois você não possui dinheiro para pagar...");
				    GuardarMensagem(dono,"Se quiser liberar a luz devolta, vá até a COEVL (Companhia Elétrica Virtual Life)");
				    GuardarMensagem(dono,string);
				}
			}
		}
		else continue;
	}
}
public BaladaVerificarContaLuz(){
	tocando2++;
	if(tocando2 >= 15){
	    tocando2 = 0;
		if(tocando >= 50) tocando = 0;
	    else tocando++;
	}
	for(new i=0; i<MAX_SLOTS; i++){
	   	if(IsPlayerConnected(i) && PlayerArea[i] == AreaBalada){
			if(!HaveDJ){
				if(tocando >= 0 && tocando < 7 && sombalada2[i] != 1){
					PlayerPlaySound(i,1088,0.0,0.0,0.0);
					SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
					PlayerPlaySound(i,1062,0.0,0.0,0.0);
					sombalada2[i] = 1;
				}
				if(tocando >= 7 && tocando < 14 && sombalada2[i] != 2){
					PlayerPlaySound(i,1063,0.0,0.0,0.0);
					SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
					PlayerPlaySound(i,1068,0.0,0.0,0.0);
					sombalada2[i] = 2;
				}
				if(tocando >= 14 && tocando < 21 && sombalada2[i] != 3){
  					PlayerPlaySound(i,1069,0.0,0.0,0.0);
  					SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
  					PlayerPlaySound(i,1076,0.0,0.0,0.0);
  					sombalada2[i] = 3;
  				}
  				if(tocando >= 21 && tocando < 28 && sombalada2[i] != 4){
  					PlayerPlaySound(i,1077,0.0,0.0,0.0);
  					SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
					PlayerPlaySound(i,1097,0.0,0.0,0.0);
					sombalada2[i] = 4;
  				}
  				if(tocando >= 28 && tocando < 35 && sombalada2[i] != 5){
  					PlayerPlaySound(i,1098,0.0,0.0,0.0);
					SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
  					PlayerPlaySound(i,1183,0.0,0.0,0.0);
                    sombalada2[i] = 5;
			    }
			 	if(tocando >= 35 && tocando < 42 && sombalada2[i] != 6){
  					PlayerPlaySound(i,1084,0.0,0.0,0.0);
  					SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
  					PlayerPlaySound(i,1185,0.0,0.0,0.0);
  					sombalada2[i] = 6;
  				}
  				if(tocando >= 42 && tocando <= 49 && sombalada2[i] != 7){
  					PlayerPlaySound(i,1086,0.0,0.0,0.0);
  					SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
  					PlayerPlaySound(i,1187,0.0,0.0,0.0);
  					sombalada2[i] = 7;
  				}
			}
			else{
			    if(sombalada2[i] != MusicSelected){
					if(MusicSelected == 1){
					    PlayerPlaySound(i,1088,0.0,0.0,0.0);
						SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
						PlayerPlaySound(i,1062,0.0,0.0,0.0);
					}
					if(MusicSelected == 2){
					    PlayerPlaySound(i,1063,0.0,0.0,0.0);
						SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
						PlayerPlaySound(i,1068,0.0,0.0,0.0);
					}
					if(MusicSelected == 3){
					    PlayerPlaySound(i,1069,0.0,0.0,0.0);
  						SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
  						PlayerPlaySound(i,1076,0.0,0.0,0.0);
					}
					if(MusicSelected == 4){
					    PlayerPlaySound(i,1077,0.0,0.0,0.0);
  						SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
						PlayerPlaySound(i,1097,0.0,0.0,0.0);
					}
					if(MusicSelected == 5){
					    PlayerPlaySound(i,1098,0.0,0.0,0.0);
						SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
  						PlayerPlaySound(i,1183,0.0,0.0,0.0);
					}
					if(MusicSelected == 6){
					    PlayerPlaySound(i,1084,0.0,0.0,0.0);
  						SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
  						PlayerPlaySound(i,1185,0.0,0.0,0.0);
					}
					if(MusicSelected == 7){
					    PlayerPlaySound(i,1086,0.0,0.0,0.0);
  						SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
  						PlayerPlaySound(i,1187,0.0,0.0,0.0);
					}
			        sombalada2[i] = MusicSelected;
			    }
			}
	    }
	}
	for(new p = 0; p < MAX_CASAS; p++){
		if(!fexist(PickupFile(p))) break;
	    if(sombalada[p] != 0){
	        pckStats[p][ContaLuz]++;
		}
		for(new i = 0; i < MAX_SLOTS; i++)
		{
			if(IsPlayerConnected(i) && Logado[i] == 1 && NaCasa[i] == 1 && PickupEntradaCasa[i] == 1 && TVligada[i] == 1){
     			pckStats[p][ContaLuz] += 2;
				break;
			}
			else if(IsPlayerConnected(i) && Logado[i] == 1 && NaCasa[i] == 1 && PickupEntradaCasa[i] == 1 && InComputer[i] == 1){
  				pckStats[p][ContaLuz] += 1;
				break;
			}
		}
	}
}
stock RadioJogadorLigado(playerid){
	if(IsPlayerConnected(playerid)){
	    new bal = sombalada[PickupEntradaCasa[playerid]];
		if(bal == 1){
			PlayerPlaySound(playerid,1088,0.0,0.0,0.0);
  			GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~91.5",99999999,3);
			PlayerPlaySound(playerid,1062,0.0,0.0,0.0);
		}
		if(bal == 2){
			PlayerPlaySound(playerid,1063,0.0,0.0,0.0);
  			GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~92.9",99999999,3);
			PlayerPlaySound(playerid,1068,0.0,0.0,0.0);
		}
		if(bal == 3){
 			PlayerPlaySound(playerid,1069,0.0,0.0,0.0);
 			GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~93.9",99999999,3);
 			PlayerPlaySound(playerid,1076,0.0,0.0,0.0);
		}
		if(bal == 4){
  			PlayerPlaySound(playerid,1077,0.0,0.0,0.0);
  			GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~94.7",99999999,3);
			PlayerPlaySound(playerid,1097,0.0,0.0,0.0);
  		}
  		if(bal == 5){
  			PlayerPlaySound(playerid,1098,0.0,0.0,0.0);
  			GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~95.5",99999999,3);
  			PlayerPlaySound(playerid,1183,0.0,0.0,0.0);
		}
		if(bal == 6){
  			PlayerPlaySound(playerid,1084,0.0,0.0,0.0);
  			GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~96.9",99999999,3);
  			PlayerPlaySound(playerid,1185,0.0,0.0,0.0);
  		}
  		if(bal == 7){
  			PlayerPlaySound(playerid,1086,0.0,0.0,0.0);
  			GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~97.9",99999999,3);
  			PlayerPlaySound(playerid,1187,0.0,0.0,0.0);
		}
	}
}
stock RadioLigado(playerid){
	if(IsPlayerConnected(playerid)){
	    sombalada[PickupEntradaCasa[playerid]] = sombalada[PickupEntradaCasa[playerid]]+1;
	    new bal = sombalada[PickupEntradaCasa[playerid]];
		for(new i=0; i<MAX_SLOTS; i++){
		    if(PickupEntradaCasa[playerid] == PickupEntradaCasa[i] && !ComputerMusicEnable[i]){
				if(bal == 1){
					PlayerPlaySound(i,1088,0.0,0.0,0.0);
  					GameTextForPlayer(i,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~91.5",99999999,3);
					PlayerPlaySound(i,1062,0.0,0.0,0.0);
					sombalada[PickupEntradaCasa[i]] = 1;
				}
				if(bal == 2){
					PlayerPlaySound(i,1063,0.0,0.0,0.0);
  					GameTextForPlayer(i,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~92.9",99999999,3);
					PlayerPlaySound(i,1068,0.0,0.0,0.0);
					sombalada[PickupEntradaCasa[i]] = 2;
				}
				if(bal == 3){
  					PlayerPlaySound(i,1069,0.0,0.0,0.0);
  					GameTextForPlayer(i,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~93.9",99999999,3);
  					PlayerPlaySound(i,1076,0.0,0.0,0.0);
  					sombalada[PickupEntradaCasa[i]] = 3;
  				}
  				if(bal == 4){
  					PlayerPlaySound(i,1077,0.0,0.0,0.0);
  					GameTextForPlayer(i,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~94.7",99999999,3);
					PlayerPlaySound(i,1097,0.0,0.0,0.0);
					sombalada[PickupEntradaCasa[i]] = 4;
  				}
  				if(bal == 5){
  					PlayerPlaySound(i,1098,0.0,0.0,0.0);
  					GameTextForPlayer(i,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~95.5",99999999,3);
  					PlayerPlaySound(i,1183,0.0,0.0,0.0);
        		    sombalada[PickupEntradaCasa[i]] = 5;
				}
				if(bal == 6){
  					PlayerPlaySound(i,1084,0.0,0.0,0.0);
  					GameTextForPlayer(i,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~96.9",99999999,3);
  					PlayerPlaySound(i,1185,0.0,0.0,0.0);
  					sombalada[PickupEntradaCasa[i]] = 6;
  				}
  				if(bal == 7){
  					PlayerPlaySound(i,1086,0.0,0.0,0.0);
  					GameTextForPlayer(i,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~97.9",99999999,3);
  					PlayerPlaySound(i,1187,0.0,0.0,0.0);
  					sombalada[PickupEntradaCasa[i]] = 7;
				}
			}
		}
	}
}
stock ProximaRadio(playerid){
	if(sombalada[PickupEntradaCasa[playerid]] >= 1 && sombalada[PickupEntradaCasa[playerid]] <= 6){
	    SendClientMessage(playerid, COLOR_COP_SWAT, "[Próxima Estação] Sintonizando...");
		RadioLigado(playerid);
	} else {
		SendClientMessage(playerid, COLOR_YELLOW,"Sintonia inexistente.");
		return 0;
 	}
 	return 1;
}
stock AnteriorRadio(playerid){
	if(sombalada[PickupEntradaCasa[playerid]] >= 2 && sombalada[PickupEntradaCasa[playerid]] <= 7){
		sombalada[PickupEntradaCasa[playerid]] = sombalada[PickupEntradaCasa[playerid]]-2;
 		SendClientMessage(playerid, COLOR_COP_SWAT, "[Estação Anterior] Sintonizando...");
	    RadioLigado(playerid);
	} else {
		SendClientMessage(playerid, COLOR_YELLOW,"Sintonia inexistente.");
		return 0;
	}
	return 1;
}
stock DesligarJogadorRadio(playerid)
{
    if(sombalada[PickupEntradaCasa[playerid]] != 0){
  		PlayerPlaySound(playerid, 1186, 0.0,0.0,0.0);
		GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~n~~n~~r~Radio ~w~Desligada",3000,3);
	}
}
stock DesligarRadio(playerid){
	if(sombalada[PickupEntradaCasa[playerid]] != 0){
	    for(new i=0; i<MAX_SLOTS; i++){
	        if(PickupEntradaCasa[i] == PickupEntradaCasa[playerid] && !ComputerMusicEnable[i]){
        		PlayerPlaySound(i, 1186, 0.0,0.0,0.0);
        		sombalada[PickupEntradaCasa[i]] = 0;
				GameTextForPlayer(i,"~n~~n~~n~~n~~n~~n~~n~~n~~r~Radio ~w~Desligada",3000,3);
			}
		}
	}
}
writebanlog(log[]){
	if(!fexist("Utilidades/BAN.txt")){
		new File:banfile = fopen("Utilidades/BAN.txt",io_write);
		fwrite(banfile,"|================================| BANIMENTOS |================================|");
        fwrite(banfile,"\r\n");
		fwrite(banfile,log);
		fwrite(banfile,"\r\n");
		fclose(banfile);
	}
	else{
	    new File:banfile = fopen("Utilidades/BAN.txt",io_append);
		fwrite(banfile,log);
		fwrite(banfile,"\r\n");
		fclose(banfile);
	}
}
stock Banir(playerid, const reason[]){
	new msg[128];
	pStats[playerid][Banido] = 1;
	format(msg,sizeof(msg),"[VLR] %s foi BANIDO do servidor! MOTIVO:",PlayerName(playerid));
	SendClientMessageToAll(COLOR_LIGHT_RED,msg);
	SendClientMessageToAll(COLOR_YELLOW,reason);
	Ban(playerid);
}
public ProximoCanal(playerid)
{
	new validnext;
	for(new i=PlayerSpec[playerid]; i<MAX_SLOTS; i++){
		if(IsPlayerConnected(i) && i > PlayerSpec[playerid] && validnext == 0 && i != playerid){
		    validnext = 1;
			PlayerSpec[playerid] = i;
			Spectator[i] = playerid;
		    SetPlayerInterior(playerid,GetPlayerInterior(i));
		    if(CameraAtiva[i] == 1){
		        SetPlayerCameraPos(playerid,Filmagem[i][0],Filmagem[i][1],Filmagem[i][2]);
				SetPlayerCameraLookAt(playerid,Filmagem[i][3],Filmagem[i][4],Filmagem[i][5]);
				return 1;
			}
			if(Entrevista[i][1] == 1){
			    SetPlayerCameraPos(playerid,CamEntrevista[Entrevista[i][3]][0],CamEntrevista[Entrevista[i][3]][1],CamEntrevista[Entrevista[i][3]][2]);
			    SetPlayerCameraLookAt(playerid,CamEntrevista[Entrevista[i][3]][3],CamEntrevista[Entrevista[i][3]][4],CamEntrevista[Entrevista[i][3]][5]);
			    return 1;
			}
			if(Entrevista[i][2] == 1){
			    SetPlayerCameraPos(playerid,CamEntrevista[i][0],CamEntrevista[i][1],CamEntrevista[i][2]);
			    SetPlayerCameraLookAt(playerid,CamEntrevista[i][3],CamEntrevista[i][4],CamEntrevista[i][5]);
			    return 1;
			}
		    if(IsPlayerInAnyVehicle(i)) PlayerSpectateVehicle(playerid,GetPlayerVehicleID(i));
			else PlayerSpectatePlayer(playerid,i);
		}
	}
	if(validnext == 0){
		SendClientMessage(playerid, COLOR_GRAY, "Mudando... Sinto muito, próximos canais fora do ar!");
		return 0;
	}
	return 1;
}

public AnteriorCanal(playerid)
{
	new validant;
	for(new i=PlayerSpec[playerid]; i>0; i--){
		if(IsPlayerConnected(i) && i < PlayerSpec[playerid] && validant == 0 && i != playerid){
		    validant = 1;
			PlayerSpec[playerid] = i;
			Spectator[i] = playerid;
		    SetPlayerInterior(playerid,GetPlayerInterior(i));
		    if(CameraAtiva[i] == 1){
		        SetPlayerCameraPos(playerid,Filmagem[i][0],Filmagem[i][1],Filmagem[i][2]);
				SetPlayerCameraLookAt(playerid,Filmagem[i][3],Filmagem[i][4],Filmagem[i][5]);
				return 1;
			}
		    if(Entrevista[i][1] == 1){
			    SetPlayerCameraPos(playerid,CamEntrevista[Entrevista[i][3]][0],CamEntrevista[Entrevista[i][3]][1],CamEntrevista[Entrevista[i][3]][2]);
			    SetPlayerCameraLookAt(playerid,CamEntrevista[Entrevista[i][3]][3],CamEntrevista[Entrevista[i][3]][4],CamEntrevista[Entrevista[i][3]][5]);
			    return 1;
			}
			if(Entrevista[i][2] == 1){
			    SetPlayerCameraPos(playerid,CamEntrevista[i][0],CamEntrevista[i][1],CamEntrevista[i][2]);
			    SetPlayerCameraLookAt(playerid,CamEntrevista[i][3],CamEntrevista[i][4],CamEntrevista[i][5]);
			    return 1;
			}
		    if(IsPlayerInAnyVehicle(i)) PlayerSpectateVehicle(playerid,GetPlayerVehicleID(i));
			else PlayerSpectatePlayer(playerid,i);
		}
	}
	if(validant == 0){
		SendClientMessage(playerid, COLOR_GRAY, "Mudando... Sinto muito, canais anteriores fora do ar!");
		return 0;
	}
	return 1;
}
public DesligarTV(playerid)
{
    TVligada[playerid] = 0;
    AcabouAssistirTV[playerid] = 1;
    TogglePlayerSpectating(playerid,0);
    SetPlayerInterior(playerid,AntInt[playerid]);
    SetPlayerPos(playerid,AntPos[playerid][0],AntPos[playerid][1],AntPos[playerid][2]);
    Spectator[PlayerSpec[playerid]] = INVALID_PLAYER_ID;
    PlayerSpec[playerid] = INVALID_PLAYER_ID;
	GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~n~~n~~r~TV ~w~Desligada",3000,3);
	SetTimerEx("ZerarAcabouAssistir",2500,0,"d",playerid);
}
public ZerarAcabouAssistir(playerid) AcabouAssistirTV[playerid] = 0;
public LavandoLimosine(playerid){
	SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Lavagem completa, avisaremos quando precisarmos lavá-la novamente.");
    SetPlayerControl(playerid, 1);
    LimoLavada[GetVehicleStretchID(GetPlayerVehicleID(playerid))] = 1;
	DisablePlayerCheckpoint(playerid);
    CheckpointStatus[playerid] = NONE;
    SetTimerEx("LimoLimpa", 600000, 0, "d", GetVehicleStretchID(GetPlayerVehicleID(playerid)));
    Pay(playerid, 200);
    GameTextForPlayer(playerid, "~w~lavagem completa", 5000, 1);
}
public LimoLimpa(vehicleid){
	LimoLavada[vehicleid] = 0;
 	for(new i = 0; i < MAX_SLOTS; i++)
 	{
 	    if(IsPlayerConnected(i) && Logado[i] == 1 && pStats[i][Prof] == MOTORISTA_PARTICULAR)
 	    {
 	    	SendClientMessage(i, COLOR_MOTORISTA_PARTICULAR, "[LUXLIMOSINE] Rápido, uma das limosines precisa ser lavada, o que ainda está fazendo aí?");
		}
	}
}
public ChecandoLimo(playerid){
	SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Motor, está OK.");
    SetPlayerControl(playerid, 1);
    SetVehicleHealth(GetPlayerVehicleID(playerid),1000);
    LimoRevisada[GetVehicleStretchID(GetPlayerVehicleID(playerid))] = 1;
	DisablePlayerCheckpoint(playerid);
	SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Vá deixar a Limosine no seu Chefe, ATENÇÃO: Não bata!");
	SetPlayerCheckpoint(playerid,1224.7695,-1828.1321,13.408,3.0);
    CheckpointStatus[playerid] = DEIXANDO_LIMOSINE;
}
public ChecagemMotor(vehicleid){
    LimoRevisada[vehicleid] = 0;
	for(new i = 0; i < MAX_SLOTS; i++)
	{
		if(IsPlayerConnected(i) && Logado[i] && pStats[i][Prof] == MOTORISTA_PARTICULAR)
		{
	 		SendClientMessage(i, COLOR_MOTORISTA_PARTICULAR, "[LUXLIMOSINE] Uma das limosines precisa de reparos imediatamente.");
		}
	}
	return 1;
}
public AplicarGasosa(playerid,vehicleid,amount)
{
	SendClientMessage(playerid,COLOR_GREEN,"Veículo abastecido!");
	vStats[vehicleid][Combustivel]=amount;
	SetPlayerControl(playerid,1);
	return 1;
}
public ZerarEmergencia(playerid,plid){
	if(ChameiAmbulancia[playerid] == 1){
		ChameiAmbulancia[playerid] = 0;
		for(new i=0; i<MAX_SLOTS; i++){
		    if(AmbulanciaAmba[i] == playerid){
				AmbulanciaAmba[i] = 0;
			}
		}
	}
}
dcmd_registrar(playerid,tmp[]) {
	if(NaoLogar[playerid] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Espere um tempo para se registrar...");
	if (fexist(PlayerFile(PlayerName(playerid)))){
		SendClientMessage(playerid, COLOR_GRAY, "Você já está registrado.");
		return 1;
	}
	if(Logado[playerid] == 1) {
		SendClientMessage(playerid, COLOR_GRAY, "Você já está registrado e logado no jogo");
		return 1;
	}
	if (strlen(tmp)==0) {
		SendClientMessage(playerid, COLOR_GRAY, "Sintaxe incorreta! USO: /registrar [senha]");
		return 1;
	}
	if(strfind(tmp,"\\",true) != -1){
	    SendClientMessage(playerid, COLOR_GRAY, "Não use \"\\\" na senha...");
		return 1;
	}
	else{
     	TrancarVeiculosPorProf(playerid);
	    new File:playerfile = fopen(PlayerFile(PlayerName(playerid)),io_write);
		fclose(playerfile);
		set(pStats[playerid][Senha],tmp);
		set(pStats[playerid][MSGBIP],"NONE");
		set(pStats[playerid][TituloJornal],"NONE");
		set(pStats[playerid][GangueNome],"NONE");
		set(pStats[playerid][DonoCasaConvidada],"NONE");
		set(pStats[playerid][DonoCasaAlugada],"NONE");
		set(pStats[playerid][Data],"NONE");
		new Ano,Mes,Dia;
		getdate(Ano,Mes,Dia);
		format(pStats[playerid][DataRegistro],20,"%d/%d/%d",Dia,Mes,Ano);
		format(pStats[playerid][DataUltima],20,"%d/%d/%d",Dia,Mes,Ano);
		pStats[playerid][HorasConectado] = 0;
		pStats[playerid][MinutosConectado] = 0;
		pStats[playerid][DiasConectado] = 0;
		pStats[playerid][Prof] = 1;
		pStats[playerid][LastProf] = 1;
		pStats[playerid][RankProf] = -1;
		pStats[playerid][XLRank] = 0;
		pStats[playerid][GanhouLevel] = 0;
		pStats[playerid][Banco] = 5000;
		pStats[playerid][CaixaPostal] = 1;
		pStats[playerid][Cracha] = 1;
		pStats[playerid][Hotel] = -1;
		pStats[playerid][ContinuarPos] = 0;
		pStats[playerid][Jornal] = 0;
		pStats[playerid][Skin] = 0;
		pStats[playerid][Respeito] = 0;
		pStats[playerid][Galao] = 0;
		pStats[playerid][Divida] = 0;
		pStats[playerid][Emprestimo] = 0;
		pStats[playerid][HistoriaFeita] = 0;
		pStats[playerid][XL] = 0;
		pStats[playerid][Xpoints] = 0;
		pStats[playerid][Culinaria] = 0;
		pStats[playerid][Preso] = 0;
		pStats[playerid][Passaporte] = 0;
		pStats[playerid][Porte] = 0;
		pStats[playerid][HabNautica] = 0;
		pStats[playerid][HabAerea] = 0;
		pStats[playerid][HabTerrestre] = 0;
		pStats[playerid][Phone] = 0;
		pStats[playerid][Agenda] = 0;
		pStats[playerid][PhoneNumb] = 0;
		pStats[playerid][CreditosCell] = 0;
		pStats[playerid][Doenca] = 0;
		pStats[playerid][Cavalo] = 0;
		pStats[playerid][NumeroLoteria1] = 0;
		pStats[playerid][NumeroLoteria2] = 0;
		pStats[playerid][Seguro] = 0;
		pStats[playerid][Pesca] = 0;
		pStats[playerid][Latas] = 0;
		pStats[playerid][Iscas] = 0;
		pStats[playerid][LatasNecessarias] = 0;
		pStats[playerid][Camisinha] = 0;
		pStats[playerid][Alcool] = 0;
 		pStats[playerid][DosesMaconha] = 0;
	 	pStats[playerid][DosesHeroina] = 0;
	 	pStats[playerid][DosesCocaina] = 0;
		pStats[playerid][ChaveMestra] = 0;
		pStats[playerid][VirtualCard] = 0;
		pStats[playerid][CofreCell] = 0;
		pStats[playerid][VacinaDuracao] = 0;
		pStats[playerid][NSegurancas] = 0;
		pStats[playerid][JaContratado] = 0;
		pStats[playerid][Matou] = 0;
		pStats[playerid][Morreu] = 0;
		pStats[playerid][AumentoPropriedade] = 0;
		pStats[playerid][Banido] = 0;
		pStats[playerid][LocouCasa] = 0;
		pStats[playerid][DiasDeAluguel] = 0;
		pStats[playerid][Peixe] = 0;
		pStats[playerid][BancoEmpresa] = 0;
		pStats[playerid][VicioDrogas] = 0;
		pStats[playerid][HistoriaSelecionada] = 0;
		pStats[playerid][VCell] = 0;
		pStats[playerid][GCell] = 0;
		pStats[playerid][ValorCabeca] = 0;
		pStats[playerid][Sanduiche] = 0;
		pStats[playerid][Frango] = 0;
		pStats[playerid][Salada] = 0;
		pStats[playerid][Pizza] = 0;
		pStats[playerid][Refrigerante] = 0;
		pStats[playerid][Suco] = 0;
		pStats[playerid][Carne] = 0;
		pStats[playerid][Strogonoff] = 0;
		pStats[playerid][Propriedade] = 0;
		pStats[playerid][Camarao] = 0;
		pStats[playerid][Linguica] = 0;
		pStats[playerid][ConquistouTerritorio] = 0;
		pStats[playerid][SorveteChocolate] = 0;
		pStats[playerid][SorveteNapolitano] = 0;
		pStats[playerid][SorveteFlocos] = 0;
		pStats[playerid][Remedios] = 0;
		pStats[playerid][ConvidadoCasa] = 0;
		pStats[playerid][QR] = 0;
		pStats[playerid][ABasico] = 0;
		pStats[playerid][AAvancado] = 0;
		pStats[playerid][PFogao] = 0;
		pStats[playerid][PTV] = 0;
		pStats[playerid][PRadio] = 0;
		pStats[playerid][PGeladeira] = 0;
		pStats[playerid][PGuardaRoupas] = 0;
		pStats[playerid][PCofre] = 0;
		pStats[playerid][PTelefoneNumb] = 0;
		pStats[playerid][PInvestimento] = 0;
		pStats[playerid][PComputador] = 0;
		pStats[playerid][BancoTrabalho] = 0;
		pStats[playerid][BancoResidencia] = 0;
		pStats[playerid][Vida] = 30;
		pStats[playerid][Colete] = 0;
		for(new i = 0; i < 13; i++)
		{
			GetWeapons[playerid][i][0] = 0;
			GetWeapons[playerid][i][1] = 0;
		}
		SetPlayerWantedLevel(playerid, 0);
		SavePlayer(PlayerName(playerid),playerid);
		LoadPlayer(playerid);
		new hs = random(3)+1;
		if(hs == 1){
			pStats[playerid][SpawnPosX] = -2174.9314;
			pStats[playerid][SpawnPosY] = 665.1288;
			pStats[playerid][SpawnPosZ] = 50.4694;
			pStats[playerid][SpawnPosAng] = 318.7636;
			pStats[playerid][Skin] = 23;
			SetSpawnInfo(playerid, 1, pStats[playerid][Skin], -2174.9314, 665.1288, 50.4694, 318.7636, 0, 0, 0, 0, 0, 0);
			SpawnPlayer(playerid);
			pStats[playerid][HistoriaSelecionada] = 1;
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			new string[128];
			format(string, sizeof(string),"Você acabou de se registrar, sua senha é \"%s\" e seu nickname é %s.", tmp, PlayerName(playerid));
			SendClientMessage(playerid, COLOR_PALHA,string);
			SendClientMessage(playerid, COLOR_YELLOW, "Complete a história");
			SendClientMessage(playerid, COLOR_LIGHT_RED, "Mano, vá na porta pegar a droga dos TRIADS.");
			SetPlayerCheckpoint(playerid,-2172.9651,679.7962,55.1627,2.5);
			RegisterPlayer[playerid] = 1;
			ParteHistoria[playerid] = 1;
			CheckpointStatus[playerid] = TRIADS;
		}
		else if(hs == 2){
			pStats[playerid][SpawnPosX] = 1886.6064;
			pStats[playerid][SpawnPosY] = 2070.8767;
			pStats[playerid][SpawnPosZ] = 11.0625;
			pStats[playerid][SpawnPosAng] = 268.3935;
			pStats[playerid][Skin] = 186;
			SetSpawnInfo(playerid, 1, pStats[playerid][Skin], 1886.6064, 2070.8767, 11.0625, 268.3935, 0, 0, 0, 0, 0, 0);
			SpawnPlayer(playerid);
			pStats[playerid][HistoriaSelecionada] = 2;
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
        	new string[128];
			format(string, sizeof(string),"Você acabou de se registrar, sua senha é \"%s\" e seu nickname é %s.", tmp, PlayerName(playerid));
			SendClientMessage(playerid, COLOR_PALHA,string);
			SendClientMessage(playerid, COLOR_YELLOW, "Complete a história");
			SendClientMessage(playerid, COLOR_WHITE, "Ahhh... como sempre a mesma cidade chata!");
			ParteHistoria[playerid] = 1;
			SetTimerEx("Historia",3000,false,"d",playerid);
		}
		else if(hs == 3){
			pStats[playerid][SpawnPosX] = -1736.4148;
			pStats[playerid][SpawnPosY] = -2491.3481;
			pStats[playerid][SpawnPosZ] = 12.2241;
			pStats[playerid][SpawnPosAng] = 68.5290;
			pStats[playerid][Skin] = 252;
			SetSpawnInfo(playerid, 1, pStats[playerid][Skin], -1736.4148, -2491.3481, 12.2241, 68.5290, 0, 0, 0, 0, 0, 0);
			SpawnPlayer(playerid);
			pStats[playerid][HistoriaSelecionada] = 3;
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
        	new string[128];
			format(string, sizeof(string),"Você acabou de se registrar, sua senha é \"%s\" e seu nickname é %s.", tmp, PlayerName(playerid));
			SendClientMessage(playerid, COLOR_PALHA,string);
			SendClientMessage(playerid, COLOR_YELLOW, "Complete a história");
			SendClientMessage(playerid, COLOR_WHITE, "Os sequestradores te deixaram aqui, e estão mandando você ir deixar esse pacote em San Fierro.");
            ParteHistoria[playerid] = 1;
			SetTimerEx("Historia",3000,false,"d",playerid);
		}
		Logado[playerid] = 1;
		AddPlayerMoney(playerid, 450 , 9);
       	SendClientMessage(playerid, COLOR_LIGHT_RED, "OBS: As mensagens digitadas aparecerão somente para jogadores próximos a você! /sistchat");
		SendClientMessage(playerid, COLOR_WHITE, "Para pular a história digite /passarhistoria");
		return 1;
	}
}

dcmd_logar(playerid,tmp[]) {
	if(NaoLogar[playerid] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Espere um tempo para se logar...");
    if(!fexist(PlayerFile(PlayerName(playerid)))) {
		SendClientMessage(playerid, COLOR_GRAY, "Você não está registrado. Entre com /registrar [senha]");
		return 1;
	}
    if (Logado[playerid] == 1) {
		SendClientMessage(playerid, COLOR_GRAY, "Você já está logado.");
		return 1;
	}
    if (strlen(tmp)==0) {
		SendClientMessage(playerid, COLOR_GRAY, "Você tem uma senha. USO: /logar [senha]");
		return 1;
	}
	if(compare(tmp,GetValue(PlayerFile(PlayerName(playerid)),"Senha"))){
	    LoadPlayer(playerid);
		if(pStats[playerid][HistoriaFeita] == 0){
			if(pStats[playerid][HistoriaSelecionada] == 1){
				pStats[playerid][SpawnPosX] = -2174.9314;
				pStats[playerid][SpawnPosY] = 665.1288;
				pStats[playerid][SpawnPosZ] = 50.4694;
				pStats[playerid][SpawnPosAng] = 318.7636;
				SetSpawnInfo(playerid, 1, pStats[playerid][Skin], -2174.9314, 665.1288, 50.4694, 318.7636, 0, 0, 0, 0, 0, 0);
				EntrouAgora[playerid] = 1;
				LogarPlayer(playerid);
				SetPlayerSkin(playerid, pStats[playerid][Skin]);
    			TrancarVeiculosPorProf(playerid);
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_YELLOW, "Complete a história");
				SendClientMessage(playerid, COLOR_LIGHT_RED, "Mano, vá na porta pegar a droga dos TRIADS.");
				SendClientMessage(playerid, COLOR_LIGHT_RED, "OBS: As mensagens digitadas aparecerão somente para jogadores próximos a você! /sistchat");
  		  	    SetPlayerCheckpoint(playerid,-2172.9651,679.7962,55.1627,2.5);
  		  	    ParteHistoria[playerid] = 1;
   		 	    CheckpointStatus[playerid] = TRIADS;
        	}
        	else if(pStats[playerid][HistoriaSelecionada] == 2){
				pStats[playerid][SpawnPosX] = 1886.6064;
				pStats[playerid][SpawnPosY] = 2070.8767;
				pStats[playerid][SpawnPosZ] = 11.0625;
				pStats[playerid][SpawnPosAng] = 268.3935;
				SetSpawnInfo(playerid, 1, pStats[playerid][Skin], 1886.6064, 2070.8767, 11.0625, 268.3935, 0, 0, 0, 0, 0, 0);
				EntrouAgora[playerid] = 1;
				LogarPlayer(playerid);
    			TrancarVeiculosPorProf(playerid);
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_YELLOW, "Complete a história.");
				SendClientMessage(playerid, COLOR_WHITE, "Ahhh... como sempre a mesma cidade chata!");
				SendClientMessage(playerid, COLOR_LIGHT_RED, "OBS: As mensagens digitadas aparecerão somente para jogadores próximos a você! /sistchat");
                ParteHistoria[playerid] = 1;
				SetTimerEx("Historia",3000,false,"d",playerid);
        	}
        	else if(pStats[playerid][HistoriaSelecionada] == 3){
				pStats[playerid][SpawnPosX] = -1736.4148;
				pStats[playerid][SpawnPosY] = -2491.3481;
				pStats[playerid][SpawnPosZ] = 12.2241;
				pStats[playerid][SpawnPosAng] = 68.5290;
				SetPlayerSkin(playerid,252);
				SetSpawnInfo(playerid, 1, pStats[playerid][Skin], -1736.4148, -2491.3481, 12.2241, 68.5290, 0, 0, 0, 0, 0, 0);
				EntrouAgora[playerid] = 1;
        		LogarPlayer(playerid);
          		TrancarVeiculosPorProf(playerid);
       			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_YELLOW, "Complete a história...");
				SendClientMessage(playerid, COLOR_WHITE, "Os sequestradores te deixaram aqui, e estão mandando você ir deixar esse pacote em San Fierro.");
                SendClientMessage(playerid, COLOR_LIGHT_RED, "OBS: As mensagens digitadas aparecerão somente para jogadores próximos a você! /sistchat");
				ParteHistoria[playerid] = 1;
				SetTimerEx("Historia",3000,false,"d",playerid);
			}
			else{
            	pStats[playerid][HistoriaSelecionada] = random(3)+1;
            	SendClientMessage(playerid, COLOR_GRAY, "Logue-se novamente pois sua história não foi identifacada!");
            	SendClientMessage(playerid, COLOR_GRAY, "Devido a isso agora foi sorteado a sua nova história!");
			}
			return 1;
		}
    	else{
			EntrouAgora[playerid] = 1;
			LogarPlayer(playerid);
			SendClientMessage(playerid, COLOR_WHITE, "Continue sua vida...");
  			TrancarVeiculosPorProf(playerid);
			EnviarMensagensGuardadas(playerid);
			if(!GetPlayerAge(playerid)){
				TypingDate[playerid]=1;
				SetPlayerControl(playerid,false);
				SendClientMessage(playerid, COLOR_YELLOW, "Equipe Virtual Life informa:");
				SendClientMessage(playerid, COLOR_WHITE, "Entre com a sua data de nascimento... SINTAXE: 'dia'/'mes'/'ano'");
			}
			if(pStats[playerid][ContinuarPos] == 1 && pStats[playerid][Preso] == 0 && pStats[playerid][Morrendo] == 0){
			    SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "Para continuar na posição de onde parou digite /continuar");
                SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "Você tem 15 segundos para responder.");
				TimerContinuacaoPos[playerid] = SetTimerEx("CancelarContinuacaoPos",15000,0,"d",playerid);
			}
			if(pStats[playerid][Divida] > 0){
			    SendClientMessage(playerid, COLOR_GREEN, "[BANCO] A dívida de seu empréstimo continua!");
		    	TimerDivida[playerid] = SetTimerEx("Cobrar",900000,false,"d",playerid);
			}
			if(pStats[playerid][Camuflagem] > 0)
			{
			    KillTimer(TimerCamuflagem[playerid]);
			    SetPlayerTransparent(playerid, 2);
			    new string[128];
			    format(string, sizeof string, "Ainda lhe restam %d minuto(s) de camuflagem.", pStats[playerid][Camuflagem]);
			    SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS, string);
			    TimerCamuflagem[playerid] = SetTimerEx("PassandoCamuflagem", 60000, 0, "d", playerid);
			}
			if(pStats[playerid][Propriedade] != 0)
			{
	    		if(compare(propStats[pStats[playerid][Propriedade]][Dono1], "NONE"))
	    		{
					pStats[playerid][Propriedade] = 0;
					SendClientMessage(playerid, COLOR_BLUE, "O dono da sua propriedade à vendeu para o servidor, portanto você não trabalha mais lá...");
	    		}
			}
			return 1;
		}
	}
	else{
	    new string[128];
	    TentarSenha[playerid] ++;
	    SendClientMessage(playerid, COLOR_GRAY, "Sua senha está incorreta, por favor mensione a senha correta para logar-se.");
		format(string, sizeof string, "Você já usou %d tentativa(s), com 3 será kikado e seu IP salvo", TentarSenha[playerid]);
	    SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS, string);
		if(TentarSenha[playerid] >= 3){
		    TentarSenha[playerid] = 0;
	    	SendClientMessage(playerid, COLOR_GRAY, "Você foi kikado e seu IP Foi salvo para averiguação pois você errou 3x a senha da conta.");
	    	SendClientMessage(playerid, COLOR_GRAY, "Problema? Contate a equipe Virtual Life RPG.");
			Kick(playerid);
		}
		return 1;
	}
}
public ContandoDerby(){
	DMinutosRestantes--;
	if(DMinutosRestantes > 1){
	    new string[128];
	    format(string,sizeof(string),"Restam %d minutos para o Derby iniciar!",DMinutosRestantes);
	    SendClientMessageToAll(COLOR_WHITE, string);
	    SendClientMessageToAll(COLOR_WHITE, "Para participar digite /participar e depois vá oficializar sua participação");
	    SetTimer("ContandoDerby",60000,0);
	}
	else if(DMinutosRestantes == 1){
	    SendClientMessageToAll(COLOR_WHITE, "Resta 1 minuto para o Derby iniciar!");
	    SetTimer("ContandoDerby",60000,0);
	}
	else if(DMinutosRestantes == 0){
	    SendClientMessageToAll(COLOR_LIGHT_YELLOW, "|==============================| DERBY INICIADO |==============================|");
		IniciarDerby();
	}
}
public IniciarDerby(){
	if(DerbyAvisado == 1){
	    ValendoDerby();
	    if(QtDerbeiro() <= 2){
   			SendClientMessageToAll(COLOR_GRAY, "[ESTÁDIO] Infelizmente não podemos iniciar o Derby com 2 ou menos participantes.");
   			SendClientMessageToAll(COLOR_GRAY, "[ESTÁDIO] Derby CANCELADO!");
            for(new i=0; i<MAX_SLOTS; i++){
                if(OficializarParticipacao[i] == 1){
	   	    	   	DisablePlayerCheckpoint(i);
	   	    	   	CheckpointStatus[i] = NONE;
				}
				if(PlayerDerby[i] == 1){
				    for(new d = 0; d < sizeof Derby; d++)
				    {
				        Ocupado[d] = 0;
				    }
                	PlayerDerby[i] 		= 	0;
					DerbyIniciado[i] 	=	0;
					DerbyAvisado 		= 	0;
					DerbyIniciou 		= 	0;
	   	    		SetPlayerControl(i,1);
	   	    		SetPlayerInterior(i, 0);
	   	   			SetPlayerPos(i,2693.9199,-1701.8795,11.0741);
				}
            }
		}
		else{
			for(new i=0; i<MAX_SLOTS; i++){
				if(IsPlayerConnected(i)){
	   	    		if(OficializarParticipacao[i] == 1){
	   	    	    	DisablePlayerCheckpoint(i);
	   	    	    	CheckpointStatus[i] = NONE;
					}
				   	SendClientMessage(i, COLOR_JUIZ, "[ESTÁDIO] O Derby irá começar em 10 segundos.");
				    SegundosContagem[i] = 10;
					new string[128];
					DerbyIniciou = 1;
					format(string,sizeof(string),"~w~%d",SegundosContagem[i]);
			    	GameTextForAll(string,1000,4);
					SegundosContagem[i] --;
				}
			}
        	SetTimer("ContagemD",1000,0);
		}
	}
	return 1;
}
public ContagemD(){
	new string[128];
	for(new i=0; i<MAX_SLOTS; i++){
	    if(IsPlayerConnected(i)){
			if(SegundosContagem[i] > 0){
				format(string,sizeof(string),"~w~%d",SegundosContagem[i]);
				GameTextForAll(string,1000,4);
				SegundosContagem[i]--;
				SetTimerEx("ContagemD",1000,0,"d",i);
			}
			else{
				SegundosContagem[i] = 0;
				GameTextForAll("~r~VALENDO",2000,4);
				SetPlayerControl(i,1);
				DerbyIniciado[i] = 1;
			}
		}
	}
}

public VendoVencedor(){
	if(QtDerbeiro() == 1){
 		for(new i=0; i<MAX_SLOTS; i++){
       		if(IsPlayerConnected(i) && PlayerDerby[i] == 1 && DerbyIniciado[i]){
	  	  		new string[128];
	    		SendClientMessageToAll(COLOR_WHITE, " ");
				format(string, sizeof(string), "[ESTÁDIO] Temos um NOVO VENCEDOR no Derby: %s PARABÉNS", PlayerName(i));
				SendClientMessageToAll(COLOR_WHITE, string);
				SendClientMessageToAll(COLOR_WHITE, " ");
				AddPlayerMoney(i, 300, 7);
				GameTextForPlayer(i,"~g~VENCEDOR ~y~=)",4000,4);
				SendClientMessage(i, COLOR_JUIZ, "Parabéns e obrigado por participar, você recebeu o seu prêmio em dinheiro... $300");
				SetPlayerPos(i,2693.9199,-1701.8795,11.0741);
				pStats[i][Respeito]++;
				if(IsPlayerInGang(i))
				{
   					gStats[GetGangID(pStats[i][GangueNome])][GangPontos]++;
				}
				SendClientMessage(i, COLOR_WHITE, "Pilotando desse jeito você disperta os outros! Conseguiu mais 1 ponto de respeito. PARABÉNS");
				PlayerDerby[i] 		= 	0;
				DerbyIniciado[i] 	= 	0;
				DerbyAvisado 		= 	0;
				DerbyIniciou 		= 	0;
				for(new d = 0; d < sizeof Derby; d++)
    			{
			        Ocupado[d] = 0;
			    	DestroyVehicle(Derby[d]);
				}
				Derby[0] = CreateVehicle(504,-1362.8434,1056.5216,1038.2021,177.4065,-1,-1,1500);
				Derby[1] = CreateVehicle(504,-1329.5347,1048.7799,1038.0103,152.6775,-1,-1,1500);
				Derby[2] = CreateVehicle(504,-1295.5067,1025.8018,1037.5696,129.9235,-1,-1,1500);
				Derby[3] = CreateVehicle(504,-1413.5791,1056.1185,1038.2798,182.0372,-1,-1,1500);
				Derby[4] = CreateVehicle(504,-1432.6188,1055.8660,1038.3093,185.3242,-1,-1,1500);
				Derby[5] = CreateVehicle(504,-1449.7091,1052.7480,1038.2817,194.6754,-1,-1,1500);
				Derby[6] = CreateVehicle(504,-1460.4928,1049.3802,1038.2437,200.5020,-1,-1,1500);
				Derby[7] = CreateVehicle(504,-1406.2797,1055.9629,1038.2645,177.2762,-1,-1,1500);
				Derby[8] = CreateVehicle(504,-1387.2533,1056.6328,1038.2452,178.5495,-1,-1,1500);
				Derby[9] = CreateVehicle(504,-1383.2393,1056.6461,1038.2389,178.6510,-1,-1,1500);
				break;
			}
		}
	} else {
		SetTimer("VendoVencedor",1000,0);
	}
	return 1;
}
stock QtParticipantes(){
    new result;
	for(new i = 0; i < MAX_SLOTS; i++){
		if(OficializarParticipacao[i] == 1) result++;
	}
	return result;
}
stock QtDerbeiro(){
	new result;
	for(new i = 0; i < MAX_SLOTS; i++){
		if(PlayerDerby[i]) result++;
	}
	return result;
}
public ValendoDerby(){
   	new string[128];
   	SendClientMessageToAll(COLOR_WHITE, " ");
   	SendClientMessageToAll(COLOR_WHITE, "[ESTÁDIO] Queridos telespectadores e amantes do esporte, estamos aqui iniciando mais um Derby");
	format(string, sizeof(string), "[ESTÁDIO] Com patriocínio do Banco Life, contamos com %d derbeiros. A corrida iniciou...", QtDerbeiro());
	SendClientMessageToAll(COLOR_WHITE, string);
	SendClientMessageToAll(COLOR_WHITE, " ");
	contagemof = QtDerbeiro();
	SetTimer("VendoVencedor",1000,0);
}
public FimInscCTC(){
	CaptureCAberto = 0;
	SendClientMessageToAll(COLOR_PINK," ");
	SendClientMessageToAll(COLOR_PINK,"|==================| [CTC] Capture The Cars |==================|");
	SendClientMessageToAll(COLOR_TRAFICANTE, "[CTC] As inscrições para o CTC foram FECHADAS!!");
	SendClientMessageToAll(COLOR_PINK,"[CTC] O evento iniciará em 1 minuto.");
  	SetTimer("ComecaEm60",60000,0);
  	return 1;
}
public ComecaEm60(){
	new result;
	for(new i = 0; i < MAX_SLOTS; i++){
		if(MiniGame[i] == 2){
			result++;
		}
	}
	if(result < 2){
		SendClientMessageToAll(COLOR_PINK," ");
		SendClientMessageToAll(COLOR_ORANGE,"|==================| [CTC] Capture The Cars |==================|");
		SendClientMessageToAll(COLOR_ORANGE,"Cancelado! A Quantidade mínima de jogadores não foi atendida.");
		for(new i = 0; i < MAX_SLOTS; i++){
        	RemovePlayerFromMiniGame(i);
        }
        return 1;
    } else if(result >= 2){
		SendClientMessageToAll(COLOR_PINK," ");
		SendClientMessageToAll(COLOR_ORANGE,"|==================| [CTC] Capture The Cars |==================|");
		SendClientMessageToAll(COLOR_ORANGE,"|==================|      INICIADO     |==================|");
		SendClientMessageToAll(COLOR_PINK," ");
		for(new r = 0; r < 24; r++){
			DestroyVehicle(Reboque[r]);
		}
		for(new c = 0; c < 20; c++){
		    DestroyVehicle(CarrosCTC[c]);
		}
		Reboque[0] =  CreateVehicle(525,2186.2209,647.9698,10.9477,2.7772,1,5,1500);
		Reboque[1] =  CreateVehicle(525,2212.6323,648.3787,10.9591,359.1076,1,5,1500);
		Reboque[2] =  CreateVehicle(525,2223.4131,647.1266,10.9664,359.8125,1,5,1500);
		Reboque[3] =  CreateVehicle(525,2265.3369,646.8789,10.8754,359.8486,1,5,1500);
		Reboque[4] =  CreateVehicle(525,2249.7559,698.1426,10.9742,177.3353,1,5,1500);
		Reboque[5] =  CreateVehicle(525,2221.5974,699.3427,10.8573,179.3859,1,5,1500);
		Reboque[6] =  CreateVehicle(525,2211.7078,698.8580,10.9964,179.0932,1,5,1500);
		Reboque[7] =  CreateVehicle(525,2169.4988,698.0208,10.9834,176.7393,1,5,1500);
		Reboque[8] =  CreateVehicle(525,2213.4895,728.3273,10.9481,0.5972,1,5,1500);
		Reboque[9] =  CreateVehicle(525,2223.0400,726.7216,10.9325,0.3457,1,5,1500);
		Reboque[10] = CreateVehicle(525,2185.4255,727.4755,10.9125,357.7857,1,5,1500);
		Reboque[11] = CreateVehicle(525,2264.9734,728.1599,10.9674,2.1711,1,5,1500);
		Reboque[12] = CreateVehicle(525,2325.6348,648.1996,10.9589,0.6617,1,5,1500);
		Reboque[13] = CreateVehicle(525,2352.3206,647.8263,10.9114,1.6850,1,5,1500);
		Reboque[14] = CreateVehicle(525,2362.2144,648.0574,11.0293,359.5310,1,5,1500);
		Reboque[15] = CreateVehicle(525,2405.0310,648.4916,10.9894,3.1586,1,5,1500);
		Reboque[16] = CreateVehicle(525,2389.4441,698.2945,10.9575,180.1375,1,5,1500);
		Reboque[17] = CreateVehicle(525,2362.1626,699.1590,10.8764,180.8958,1,5,1500);
		Reboque[18] = CreateVehicle(525,2352.8254,699.3028,10.9660,179.9610,1,5,1500);
		Reboque[19] = CreateVehicle(525,2309.8076,698.8687,10.9285,178.4343,1,5,1500);
		Reboque[20] = CreateVehicle(525,2354.0635,727.9950,10.9247,0.2284,1,5,1500);
		Reboque[21] = CreateVehicle(525,2363.1035,727.8639,11.0189,355.6179,1,5,1500);
		Reboque[22] = CreateVehicle(525,2405.4922,728.3148,10.9823,359.7197,1,5,1500);
		Reboque[23] = CreateVehicle(525,2442.5969,707.4492,10.9628,269.2036,1,5,1500);
   	}
   	CTCAberto = 1;
   	for(new i = 0; i < 20; i++){
		new SendoUsada[sizeof CarroCTC];
		new VehPos = random(sizeof CarroCTC);
		while(SendoUsada[VehPos] == 1){
			VehPos = random(sizeof CarroCTC);
		}
		SendoUsada[VehPos] = 1;
		CarrosCTC[i] = CreateVehicle(560,CarroCTC[VehPos][0],CarroCTC[VehPos][1],CarroCTC[VehPos][2],CarroCTC[VehPos][3],1,5,1500);
		for(new p = 0; p < MAX_SLOTS; p++){
			TrancarVeiculo(CarrosCTC[i],p);
		}
	}
	for(new i = 0; i < MAX_SLOTS; i++){
	    if(MiniGame[i] == 2){
            AgoraNoCTC[i] = 1;
            GangZoneShowForPlayer(i, EquipeAzul, COLOR_COP_SWAT);
			GangZoneShowForPlayer(i, EquipeLaranja, COLOR_ORANGE);
			SendClientMessage(i, COLOR_WHITE, "Digite /equipectc [laranja/azul] para entrar no evento!");
		}
	}
	return 1;
}
public FimCTC(){
    for(new r = 0; r < 24; r++){
		DestroyVehicle(Reboque[r]);
	}
	for(new c = 0; c < 20; c++){
	    DestroyVehicle(CarrosCTC[c]);
	}
	for(new r = 0; r < 24; r++){
	    Reboque[r] = CreateVehicle(525,INVALID_POS_X,INVALID_POS_Y,INVALID_POS_Z,0.0,1,5,1500);
	}
	for(new c = 0; c < 20; c++){
	    CarrosCTC[c] = CreateVehicle(415,INVALID_POS_X,INVALID_POS_Y,INVALID_POS_Z,0.0,1,5,1500);
	    CTCCapturado[c]=0;
	}
    for(new i = 0; i < MAX_SLOTS; i++){
	    if(MiniGame[i] == 2){
            RemovePlayerFromMiniGame(i);
            GangZoneHideForPlayer(i, EquipeAzul);
			GangZoneHideForPlayer(i, EquipeLaranja);
 			SetPlayerWantedLevelColor(i);
			EquipeCTC[i] = 0;
			SetPlayerPos(i,1019.2133,-1134.7303,23.8281);
		}
	}
	EquipePontos[1] = 0;
	EquipePontos[2] = 0;
	CTCAberto = 0;
	SendClientMessageToAll(COLOR_LIXEIRO, "[CAPTURE THE CARS] Fim do evento...");
	return 1;
}
stock GetPlayerAge(playerid)
{
	new day,mounth,year,index;
	day = strval(strtok(pStats[playerid][Data],index,'/'));
	if(day==0) return false;
	mounth = strval(strtok(pStats[playerid][Data],index,'/'));
	if(mounth==0) return false;
	year = strval(strtok(pStats[playerid][Data],index,'/'));
	if(year==0) return false;
	return ConvertToAge(day,mounth,year);
}
stock ConvertToAge(day,mounth,year)
{
	new dia,mes,ano,age;
	getdate(ano,mes,dia);
	age = ano - year;
	if(mes - mounth < 0) age = age - 1;
	else if(mes - mounth == 0) {
		if(dia - day < 0){
			age = age - 1;
		}
	}
	return age;
}
stock SetPlayerCTCGroup(playerid,group)
{
	if(group == 1){
		new rand = random(sizeof(AzulEquipe));
		SetPlayerPos(playerid,AzulEquipe[rand][0],AzulEquipe[rand][1],AzulEquipe[rand][2]);
		ChangePlayerColor(playerid, COLOR_LIXEIRO);
		EquipeCTC[playerid] = 1;
		GameTextForPlayer(playerid,"~b~equipe azul",3000,1);

	}
	else if(group == 2){
	    new rand = random(sizeof(LaranjaEquipe));
	    SetPlayerPos(playerid,LaranjaEquipe[rand][0],LaranjaEquipe[rand][1],LaranjaEquipe[rand][2]);
		ChangePlayerColor(playerid, COLOR_ORANGE);
		EquipeCTC[playerid] = 2;
		GameTextForPlayer(playerid,"equipe laranja",3000,1);
	}
	GameTextForPlayer(playerid,"~g~capture the cars",5000,0);
	SendClientMessage(playerid, COLOR_WHITE, "|==============================| OBJETIVO |==============================|");
	SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "Capture The Cars é um evento onde você deve pegar os caminhões de guincho em sua base e");
	SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "capturar os veículos escondidos por Las Venturas e arredores próximos!");
	SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "Faça isso antes da sua equipe adversária, o jogo segue: Equipe azul VS Equipe laranja");
	SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "Para guinchar um veículo aperte LMB");
	SendClientMessage(playerid, COLOR_WHITE, "Divirta-se e Boa Sorte!");
}

public AreasTestes(playerid,plid)
{
    if(PlayerArea[plid] == AreaBalizaHabilitada){
		if(GetVehicleModel(GetPlayerVehicleID(plid)) == 410){
			new Float:h;
		    GetVehicleHealth(GetPlayerVehicleID(plid),h);
			if(Chance[plid] >= 1){
				if(h == 1000){
		 			if(IsVehicleInArea(GetPlayerVehicleID(plid),1769.0464,-2077.6221,1775.7255,-2075.1553)){
						if(ProximoAoAngulo(plid,90)){
		   				    new string[128];
		   				    PlayerPlaySound(plid, 1052, 0.0, 0.0, 0.0);
				  		    SendClientMessage(plid, COLOR_INSTRUTOR, "[TESTE] Parabéns! Parte (1/5) - BALIZA - concluída com sucesso. O teste prosseguirá...");
						    PlayerArea[plid] = AreaNone;
							format(string, sizeof(string), "[TESTE] O aprendiz  %s passou no teste: (1/5) - BALIZA - O teste prosseguirá...", PlayerName(plid));
							SendClientMessage(playerid,COLOR_INSTRUTOR, string);
							Chance[plid] = 3;
						    SetVehicleToRespawn(GetPlayerVehicleID(plid));
							SetTimerEx("AvancoDirecao",5000,0,"dd",playerid,plid);
						}
					}
				} else {
				    new string[128];
					Chance[plid] = Chance[plid] - 1;
				    PlayerArea[plid] = AreaNone;
				    SendClientMessage(plid, COLOR_INSTRUTOR, "[TESTE] Seu carro está batido! O teste será refeito.");
					format(string, sizeof(string), "[TESTE] O aprendiz %s bateu o carro. O teste será refeito chance %d/3", PlayerName(plid),Chance[plid]);
					SendClientMessage(playerid,COLOR_INSTRUTOR, string);
				    SetVehicleToRespawn(GetPlayerVehicleID(plid));
				    ADTeste[playerid] --;
					SetTimerEx("AvancoDirecao",5000,0,"dd",playerid,plid);
				    return 1;
				}
			} else {
			    new string[128];
			    SendClientMessage(plid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Seu teste foi CANCELADO, terá que fazer tudo denovo.");
				format(string, sizeof(string), "[AUTO-ESCOLA] O aprendiz %s perdeu todas as chances e seu teste foi cancelado!", PlayerName(plid));
				SendClientMessage(playerid,COLOR_INSTRUTOR, string);
                SetVehicleToRespawn(GetPlayerVehicleID(plid));
				PlayerArea[plid] = AreaNone;
				InstrutorOcupado[playerid] = 0;
				FazendoTesteRua[plid] = 0;
				Chance[plid] = 0;
				NoTeste[plid] = 0;
				for(new a = 0; a < sizeof CarroAuto; a++)
				{
    				TrancarVeiculo(plid, CarroAuto[a]);
    				SetVehicleToRespawn(CarroAuto[a]);
				}
			}
		}
	}
    if(PlayerArea[plid] == AreaZigHabilitada){
		if(GetVehicleModel(GetPlayerVehicleID(plid)) == 410){
			new Float:h;
		    GetVehicleHealth(GetPlayerVehicleID(plid),h);
			if(h == 1000){
   				if(Chance[plid] >= 1){
   					if(IsVehicleInArea(GetPlayerVehicleID(plid),1807.8981,-2025.0101,1812.1422,-2021.3784)){
						if(ProximoAoAngulo(plid,270)){
		   				    new string[128];
		   				    PlayerPlaySound(plid, 1052, 0.0, 0.0, 0.0);
				  		    SendClientMessage(plid, COLOR_INSTRUTOR, "[TESTE] Parabéns! Parte (2/5) - ZIG-ZAG - concluída com sucesso. O teste prosseguirá...");
						    PlayerArea[plid] = AreaNone;
							format(string, sizeof(string), "[TESTE] O aprendiz  %s passou no teste: (2/5) - ZIG-ZAG - O teste prosseguirá...", PlayerName(plid));
							SendClientMessage(playerid,COLOR_INSTRUTOR, string);
							Chance[plid] = 3;
							SetVehicleToRespawn(GetPlayerVehicleID(plid));
							SetTimerEx("AvancoDirecao",6000,0,"dd",playerid,plid);
						} else {
						    SendClientMessage(plid, COLOR_WHITE, "[AUTO-ESCOLA] Você está com o carro torto, deixe-o reto.");
						    SetTimerEx("AreasTestes",2000,false,"dd",playerid,plid);
						}
					}
				} else {
				    new string[128];
				    SendClientMessage(plid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Seu teste foi CANCELADO, terá que fazer tudo denovo.");
					format(string, sizeof(string), "[AUTO-ESCOLA] O aprendiz %s perdeu todas as chances e seu teste foi cancelado!", PlayerName(plid));
					SendClientMessage(playerid,COLOR_INSTRUTOR, string);
                    SetVehicleToRespawn(GetPlayerVehicleID(plid));
					PlayerArea[plid] = AreaNone;
					InstrutorOcupado[playerid] = 0;
					FazendoTesteRua[plid] = 0;
					Chance[plid] = 0;
					NoTeste[plid] = 0;
					for(new a = 0; a < sizeof CarroAuto; a++)
					{
	    				TrancarVeiculo(plid, CarroAuto[a]);
	    				SetVehicleToRespawn(CarroAuto[a]);
					}
				}
			} else {
			    new string[128];
				Chance[plid] = Chance[plid] - 1;
			    PlayerArea[plid] = AreaNone;
			    SendClientMessage(plid, COLOR_INSTRUTOR, "[TESTE] Seu carro está batido! O teste será refeito.");
				format(string, sizeof(string), "[TESTE] O aprendiz %s bateu o carro. O teste será refeito chance %d/3", PlayerName(plid),Chance[plid]);
				SendClientMessage(playerid,COLOR_INSTRUTOR, string);
			    SetVehicleToRespawn(GetPlayerVehicleID(plid));
			    ADTeste[playerid] --;
				SetTimerEx("AvancoDirecao",6000,0,"dd",playerid,plid);
			    return 1;
			}
		}
	}
    if(PlayerArea[plid] == Area180Habilitada){
		if(GetVehicleModel(GetPlayerVehicleID(plid)) == 410){
		    new Float:h;
		    GetVehicleHealth(GetPlayerVehicleID(plid),h);
			if(h == 1000){
   				if(Chance[plid] >= 1){
   				   	if(IsVehicleInArea(GetPlayerVehicleID(plid),1797.1978,-2050,1800.7753,-2047.9780)){
						if(ProximoAoAngulo(plid,87)){
		   				    new string[128];
		   				    PlayerPlaySound(plid, 1052, 0.0, 0.0, 0.0);
				  		    SendClientMessage(plid, COLOR_INSTRUTOR, "[TESTE] Parabéns! Parte (3/5) - 180º - concluída com sucesso.");
						    PlayerArea[plid] = AreaNone;
							format(string, sizeof(string), "[TESTE] O aprendiz %s passou no teste: (3/5) - 180º...", PlayerName(plid));
							SendClientMessage(playerid,COLOR_INSTRUTOR, string);
		   				    SetVehicleToRespawn(GetPlayerVehicleID(plid));
		   				    Chance[plid] = 3;
      						SetTimerEx("AvancoDirecao",6000,0,"dd",playerid,plid);
						}
					}
				} else {
				    new string[128];
				    SendClientMessage(plid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Seu teste foi CANCELADO, terá que fazer tudo denovo.");
					format(string, sizeof(string), "[AUTO-ESCOLA] O aprendiz %s perdeu todas as chances e seu teste foi cancelado!", PlayerName(plid));
					SendClientMessage(playerid,COLOR_INSTRUTOR, string);
                    SetVehicleToRespawn(GetPlayerVehicleID(plid));
					PlayerArea[plid] = AreaNone;
					InstrutorOcupado[playerid] = 0;
					FazendoTesteRua[plid] = 0;
					Chance[plid] = 0;
					NoTeste[plid] = 0;
					for(new a = 0; a < sizeof CarroAuto; a++)
					{
	    				TrancarVeiculo(playerid, CarroAuto[a]);
	    				SetVehicleToRespawn(CarroAuto[a]);
					}
				}
			} else {
			    new string[128];
				Chance[plid] = Chance[plid] - 1;
			    PlayerArea[plid] = AreaNone;
				format(string, sizeof(string), "[TESTE] Seu carro está batido! O teste será refeito. CHANCE: %d/3", Chance[plid]);
				SendClientMessage(plid,COLOR_INSTRUTOR, string);
				format(string, sizeof(string), "[TESTE] O aprendiz %s bateu o carro. O teste será refeito. CHANCE: %d/3", PlayerName(plid),Chance[plid]);
				SendClientMessage(playerid,COLOR_INSTRUTOR, string);
			    SetVehicleToRespawn(GetPlayerVehicleID(plid));
			    ADTeste[playerid] --;
				SetTimerEx("AvancoDirecao",6000,0,"dd",playerid,plid);
			    return 1;
			}
		}
	}
    if(PlayerArea[plid] == AreaMotoHabilitada){
		if(GetVehicleModel(GetPlayerVehicleID(plid)) == 521){
			new Float:h;
		    GetVehicleHealth(GetPlayerVehicleID(plid),h);
			if(h == 1000){
   				if(Chance[plid] >= 1){
   					if(IsVehicleInArea(GetPlayerVehicleID(plid),1774.2667,-2028.1365,1775.6932,-2027.4597)){
	   					new string[128];
	   				    PlayerPlaySound(plid, 1052, 0.0, 0.0, 0.0);
			  		    SendClientMessage(plid, COLOR_INSTRUTOR, "[TESTE] Parabéns! Parte (4/5) - Moto Zig - concluída com sucesso.");
					    PlayerArea[plid] = AreaNone;
						format(string, sizeof(string), "[TESTE] O aprendiz %s passou no teste: (4/5) - Moto Zig.", PlayerName(plid));
						SendClientMessage(playerid,COLOR_INSTRUTOR, string);
						Chance[plid] = 3;
						SetVehicleToRespawn(GetPlayerVehicleID(plid));
						SetTimerEx("AvancoDirecao",6000,0,"dd",playerid,plid);
					}
				} else {
					new string[128];
				    SendClientMessage(plid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Seu teste foi CANCELADO, você perdeu todas as chances, terá que refazer tudo novamemnte.");
					format(string, sizeof(string), "[AUTO-ESCOLA] O aprendiz %s perdeu todas as chances e seu teste foi cancelado!", PlayerName(plid));
					SendClientMessage(playerid,COLOR_INSTRUTOR, string);
					PlayerArea[plid] = AreaNone;
					Chance[plid] = 0;
					InstrutorOcupado[playerid] = 0;
					NoTeste[plid] = 0;
					for(new a = 0; a < sizeof CarroAuto; a++)
					{
	    				TrancarVeiculo(plid, CarroAuto[a]);
	    				SetVehicleToRespawn(CarroAuto[a]);
					}
				}
			} else {
			    new string[128];
				Chance[plid] = Chance[plid] - 1;
			    PlayerArea[plid] = AreaNone;
				format(string, sizeof(string), "[TESTE] Sua moto está danificada. O teste será refeito. CHANCE: %d/3", Chance[plid]);
				SendClientMessage(plid,COLOR_INSTRUTOR, string);
				format(string, sizeof(string), "[TESTE] O aprendiz %s danificou a moto. O teste será refeito. CHANCE: %d/3", PlayerName(plid),Chance[plid]);
				SendClientMessage(playerid,COLOR_INSTRUTOR, string);
			    SetVehicleToRespawn(GetPlayerVehicleID(plid));
			    ADTeste[playerid] --;
				SetTimerEx("AvancoDirecao",6000,0,"dd",playerid,plid);
			    return 1;
			}
		}
	}
	if(PlayerArea[plid] == AreaMotoHabilitada || PlayerArea[plid] == Area180Habilitada || PlayerArea[plid] == AreaZigHabilitada || PlayerArea[plid] == AreaBalizaHabilitada){
		SetTimerEx("AreasTestes",2000,false,"dd",playerid,plid);
		return 1;
	}
	return 1;
}

stock DestroyMenuEx(Menu:mid)
{
	for(new i = 0; i < MAX_SLOTS; i++)
	{
	    if(GetPlayerMenu(i) == mid)
	    {
	        HideMenuForPlayer(mid, i);
	        SetPlayerControl(i, true);
	    }
	}
	DestroyMenu(mid);
}
stock GetPlayerServerMoney(playerid)
{
	return PlayerMoney[playerid];
}
public AddPlayerMoney(playerid, valor, reason)
{
	KillTimer(TimerMoney[playerid]);
	ReceivingMoney[playerid] = 1;
    MotivoGranaID[playerid] = reason;
    if(valor < 0)
	{
		MotivoGranaID[playerid] = -1;
	}
    PlayerMoney[playerid] += valor;
    GivePlayerMoney(playerid, -GetPlayerMoney(playerid) + PlayerMoney[playerid]);
	TimerMoney[playerid] = SetTimerEx("ZerarRecebendoDinheiro", 5000, false, "d", playerid);
	return 1;
}

public ZerarRecebendoDinheiro(playerid)
{
    KillTimer(TimerMoney[playerid]);
	ReceivingMoney[playerid] = 0;
}
public ResetPlayerMoneyEx(playerid)
{
	PlayerMoney[playerid] = 0;
	ResetPlayerMoney(playerid);
	return 1;
}

stock DebugInflacao(){
	DiaJogo = 6;
	MesJogo = 2;
	AnoJogo = 2009;
	ValorDia = 4;
	ValorGasolina = 4;
	ValorAditivada = 7;
	ValorDiesel = 3;
	ValorAlcool = 1;
	ValorQuerosene = 2;
	ValorTV = 2300;
	ValorRadio = 400;
	ValorGeladeira = 1800;
	ValorFogao = 1500;
	ValorCofre= 600;
	ValorGuardaRoupas = 500;
	ValorCelular = 500;
	ValorTelefone = 300;
	ValorComputador = 2500;
	ValorFrango = 30;
	ValorPeixe = 40;
	ValorPizza = 25;
	ValorSalada = 15;
	ValorRefrigerante = 12;
	ValorSuco = 18;
	ValorCarne = 35;
	ValorStrogonoff = 45;
	ValorCamarao = 50;
	ValorLinguica = 30;
	HoraJogo = 2;
	MinutoJogo = 0;
	CarPrice[0] = 50;
	CarPrice[1] = 30;
	CarPrice[2] = 40;
	CarPrice[3] = 25;
	CarPrice[4] = 35;
	CarPrice[5] = 40;
	CarPrice[6] = 15;
	CarPrice[7] = 20;
    return 1;
}

public ApostasdeCavalos(){
	new string[128], TemJogador = 0;
	for(new i = 0; i < MAX_SLOTS; i++)
	{
		if(pStats[i][ValorAposta] > 0)
		{
		    TemJogador = 1;
		    break;
		}
	}
    if(TemJogador == 1){
        ComecouCLoteria = 1;
        new largada = random(9);
		SendClientMessageParticipantes(COLOR_PURPLE, "    ");
		format(string, sizeof(string), "%s larga na frente!",CavalosLargada[largada]);
		SendClientMessageParticipantes(COLOR_WHITE, string);
		SendClientMessageParticipantes(COLOR_PURPLE, "    ");
		cavalin[0] = largada;
		SetTimer("Intermediaria2",5000,0);
	}
}
public Intermediaria2(){
	new rand = random(2);
	new string[128];
	if(rand == 0){
		format(string, sizeof(string), "%s continua na frente... e chegua aos 200 metros da prova.",CavalosLargada[cavalin[0]]);
		SendClientMessageParticipantes(COLOR_WHITE, string);
		SetTimer("Intermediaria3",5000,0);
		return 1;
	}
	if(rand == 1){
	    new largada2 = random(9);
	    while(cavalin[0] == largada2){
	    	largada2 = random(9);
		}
		format(string, sizeof(string), "%s ultrapassa %s e agora assume a liderança",CavalosLargada[largada2],CavalosLargada[cavalin[0]]);
		SendClientMessageParticipantes(COLOR_WHITE, string);
		cavalin[0] = largada2;
		SetTimer("Intermediaria3",5000,0);
		return 1;
	}
	return 1;
}
public Intermediaria3(){
	new rand = random(2);
	new largada2 = random(9);
	while(cavalin[0] == largada2){
	    largada2 = random(9);
	}
	new string[128];
	if(rand == 0){
	    if(largada2 == cavalin[0]){
			format(string, sizeof(string), "%s continua mandando e continua isolado aos 500 metros da prova.",CavalosLargada[cavalin[0]]);
			SendClientMessageParticipantes(COLOR_WHITE, string);
			SetTimer("Intermediaria4",5000,0);
			return 1;
		} else {
			format(string, sizeof(string), "%s ainda tem corredores perto dele e chega aos 500 metros da prova em primeiro.",CavalosLargada[cavalin[0]]);
			SendClientMessageParticipantes(COLOR_WHITE, string);
			new rand2 = random(6);
			if(rand2 == 3){
				cavalin[0] = largada2;
				format(string, sizeof(string), "Há uma aproximação do cavalo %s, ameaçando seriamente %s. E....",CavalosLargada[largada2], CavalosLargada[cavalin[0]]);
				SendClientMessageParticipantes(COLOR_WHITE, string);
			}
			SetTimer("Intermediaria4",5000,0);
			return 1;
		}
	}
	if(rand == 1){
	    if(largada2 != cavalin[0]){
			format(string, sizeof(string), "Espere Espere! %s foi ultrapassado por %s perto da linha de chegada aos 500 metros da prova.",CavalosLargada[cavalin[0]],CavalosLargada[largada2]);
			SendClientMessageParticipantes(COLOR_WHITE, string);
			cavalin[0] = largada2;
			SetTimer("Intermediaria4",5000,0);
			return 1;
		} else {
			format(string, sizeof(string), "%s não conseguiu segurar por muito tempo e foi ultrapassado por %s",CavalosLargada[cavalin[0]], CavalosLargada[largada2]);
			SendClientMessageParticipantes(COLOR_WHITE, string);
			cavalin[0] = largada2;
			SetTimer("Intermediaria4",5000,0);
			return 1;
		}
	}
	return 1;
}
public Intermediaria4(){
	new rand = random(2);
	new string[128];
 	SendClientMessageParticipantes(COLOR_WHITE, "A corrida vai chegando ao fim com seus 100 últimos metros.");
	if(rand == 0){
		format(string, sizeof(string), "Olhe Olhe!!! %s segue precionado no final últimos metros e....!",CavalosLargada[cavalin[0]]);
		SendClientMessageParticipantes(COLOR_WHITE, string);
		Pressionado = 1;
		cavalin[1] = Pressionado;
		SetTimer("Intermediaria5",5000,0);
		return 1;
	}
	if(rand == 1){
		format(string, sizeof(string), "%s seque tranquilo e isolado vai cruzar em primeiro e",CavalosLargada[cavalin[0]]);
		SendClientMessageParticipantes(COLOR_WHITE, string);
		SetTimer("Intermediaria5",5000,0);
		return 1;
	}
	return 1;
}
public Intermediaria5(){
	new cavalos = random(9);
	new string[128];
	new grana;
	while(cavalos == cavalin[0]){
	    cavalos = random(9);
	}
	if(Pressionado == 1){
	    new rand = random(5);
		if(rand == 0 || rand == 1 || rand == 2 || rand == 3){
			format(string, sizeof(string), "Pressionado %s perde a liderança para %s que acaba por ganhar a corrida.",CavalosLargada[cavalin[0]],CavalosLargada[cavalos]);
			SendClientMessageParticipantes(COLOR_WHITE, string);
			format(string, sizeof(string), "~r~%s ~w~VENCEU!",CavalosLargada[cavalos]);
	        GameTextForParticipantes(string,3000,0);
   	        for(new i=0; i<MAX_SLOTS; i++){
	            if(pStats[i][ValorAposta] > 0){
					if(pStats[i][Cavalo] == cavalos){
					    new rand4 = random(4)+1;
					    grana = pStats[i][ValorAposta]*rand4;
					    AddPlayerMoney(i,grana,10);
					   	format(string, sizeof(string), "Muito bem! Você apostou no cavalo certo e recebeu $%d!",grana);
						SendClientMessage(i, COLOR_GREEN, string);
                		pStats[i][Cavalo] = 0;
						pStats[i][ValorAposta] = 0;
					}
					else{
					    SendClientMessage(i, COLOR_GRAY, "Você apostou no cavalo errado! Se quiser pode tentar apostar novamente.");
					    pStats[i][Cavalo] = 0;
					    pStats[i][ValorAposta] = 0;
					}
				}
			}
		} else if(rand == 4){
			format(string, sizeof(string), "Mesmo pressionado %s consegue ganhar a corrida!",CavalosLargada[cavalin[0]]);
			SendClientMessageParticipantes(COLOR_WHITE, string);
			format(string, sizeof(string), "~r~%s ~w~VENCEU!",CavalosLargada[cavalin[0]]);
	        GameTextForParticipantes(string,3000,0);
	        for(new i=0; i<MAX_SLOTS; i++){
	            if(pStats[i][ValorAposta] > 0){
					if(pStats[i][Cavalo] == cavalin[0]){
					    new rand4 = random(4)+1;
					    grana = pStats[i][ValorAposta]*rand4;
					    AddPlayerMoney(i,grana,10);
					   	format(string, sizeof(string), "Muito bem! Você apostou no cavalo certo e recebeu $%d!",grana);
						SendClientMessage(i, COLOR_GREEN, string);
						pStats[i][Cavalo] = 0;
						pStats[i][ValorAposta] = 0;
					}
					else{
					    SendClientMessage(i, COLOR_GRAY, "Você apostou no cavalo errado! Se quiser pode tentar apostar novamente.");
					    pStats[i][Cavalo] = 0;
					    pStats[i][ValorAposta] = 0;
					}
				}
			}
		}
	} else {
        new rand = random(5);
		if(rand == 0 || rand == 1 || rand == 2 || rand == 3){
			format(string, sizeof(string), "Isolado e seguro %s vence a corrida!",CavalosLargada[cavalin[0]]);
			SendClientMessageParticipantes(COLOR_WHITE, string);
			format(string, sizeof(string), "~r~%s ~w~VENCEU!",CavalosLargada[cavalin[0]]);
	        GameTextForParticipantes(string,3000,0);
	        for(new i=0; i<MAX_SLOTS; i++){
	            if(pStats[i][ValorAposta] > 0){
					if(pStats[i][Cavalo] == cavalin[0]){
					    new rand4 = random(4)+3;
					    grana = pStats[i][ValorAposta]*rand4;
					    AddPlayerMoney(i,grana,10);
					   	format(string, sizeof(string), "Muito bem! Você apostou no cavalo certo e recebeu $%d!",grana);
						SendClientMessage(i, COLOR_GREEN, string);
						pStats[i][Cavalo] = 0;
						pStats[i][ValorAposta] = 0;
					}
					else{
					    SendClientMessage(i, COLOR_GRAY, "Você apostou no cavalo errado! Se quiser pode tentar apostar novamente.");
					    pStats[i][Cavalo] = 0;
					    pStats[i][ValorAposta] = 0;
					}
				}
			}
			return 1;
		} else if(rand == 4){
			format(string, sizeof(string), "%s Cantou vitória antes do tempo!!! E %s acabou ultrapassando e vencendo a corrida.",CavalosLargada[cavalin[0]],CavalosLargada[cavalos]);
			SendClientMessageParticipantes(COLOR_WHITE, string);
			format(string, sizeof(string), "~r~%s ~w~VENCEU!",CavalosLargada[cavalos]);
	        GameTextForParticipantes(string,3000,0);
	        for(new i=0; i<MAX_SLOTS; i++){
	            if(pStats[i][ValorAposta] > 0){
					if(pStats[i][Cavalo] == cavalos){
					    new rand4 = random(4)+3;
					    grana = pStats[i][ValorAposta]*rand4;
					    AddPlayerMoney(i,grana,10);
					   	format(string, sizeof(string), "Muito bem! Você apostou no cavalo certo e recebeu $%d!",grana);
						SendClientMessage(i, COLOR_GREEN, string);
						pStats[i][Cavalo] = 0;
						pStats[i][ValorAposta] = 0;
					}
					else{
					    SendClientMessage(i, COLOR_GRAY, "Você apostou no cavalo errado! Se quiser pode tentar apostar novamente.");
					    pStats[i][Cavalo] = 0;
					    pStats[i][ValorAposta] = 0;
					}
				}
			}
		}
	}
	ComecouCLoteria = 0;
	return 1;
}
public LoteriaComeco()
{
	new rand1, rand2;
	new loteria = (random(21) + 10) * 1000;
	rand1 = random(21);
	rand2 = random(21);
	while(rand2 == rand1){
		rand2 = random(21);
	}
	new string[128];
	SendClientMessageToAll(COLOR_PURPLE, "    ");
	format(string, sizeof(string), "Os Números da Loteria sorteados SÃO ....... <Nº1 = %d> ... <Nº2 = %d>", rand1, rand2);
	SendClientMessageToAll(COLOR_WHITE, string);
	SendClientMessageToAll(COLOR_PURPLE, "    ");
	for(new i = 0; i < MAX_SLOTS; i++)
	{
	    new hits = 0;
	    if(IsPlayerConnected(i) && Logado[i] && (pStats[i][NumeroLoteria1] != 0 || pStats[i][NumeroLoteria2] != 0))
		{
  			if(pStats[i][NumeroLoteria1] == rand1 || pStats[i][NumeroLoteria1] == rand2 || pStats[i][NumeroLoteria2] == rand1 || pStats[i][NumeroLoteria2] == rand2)
			{
    			hits++;
    		}
            pStats[i][NumeroLoteria1] = 0;
            pStats[i][NumeroLoteria2] = 0;
			if(hits > 1){
			    SendClientMessageToAll(COLOR_ORANGE, "   ");
				format(string, sizeof(string),"[LOTERIA] Temos um vencedor, Parabéns %s, você acertou os números sorteados! xD",PlayerName(i),loteria);
				SendClientMessageToAll(COLOR_ORANGE,string);
				SendClientMessageToAll(COLOR_ORANGE, "   ");
				format(string, sizeof(string), "Parabéns! Você ganhou na loteria, aqui está seu prêmio: $%d,00 dólares.", loteria);
				SendClientMessage(i, COLOR_JUIZ, string);
				AddPlayerMoney(i,loteria,10);
			}else{
				SendClientMessage(i,COLOR_GREEN, "Seu palpite estava errado, mas você pode jogar novamente, basta ir na loteria e digitar:");
				SendClientMessage(i,COLOR_WHITE, "/loteria [0-20] [0-20]");
			}
	   	 }
	}
}


public AssaltoGang(playerid, loja){
	new string[128];
	if(loja == 1){
		if(PlayerArea[playerid] == AreaBanco){
			ValuerMaximo[playerid] = 3000;
			new rand = random(5);
			if(rand == 1 || rand == 2){
				if(pickupbancoselecionada[playerid] == 1){
					format(string, sizeof(string), "Assalto a Banco ( Banco de Little Mexico )");
			 	}
			   	else if(pickupbancoselecionada[playerid] == 2){
					format(string, sizeof(string), "Assalto a Banco ( Banco de Temple )");
				}
				else if(pickupbancoselecionada[playerid] == 3){
					format(string, sizeof(string), "Assalto a Banco ( Banco de Rodeo )");
				}
			   	else if(pickupbancoselecionada[playerid] == 4){
			   		format(string, sizeof(string), "Assalto a Banco ( Banco de East Beach )");
				}
			    if(IsPlayerTransparent(playerid)){
					SendClientMessageToAll(COLOR_PINK,"New Paper's Life:");
				    SendClientMessageToAll(COLOR_WHITE, "[JORNAL] O Alarme de algum banco foi acionado, a polícia foi avisada.");
					format(string, sizeof(string), "Suspeitos: Gang desconhecida.");
					SendClientMessageToAll(COLOR_JUIZ, string);
					SendClientMessage(playerid, COLOR_ASSALTANTE, "Saia daí o mais rápido possível, a polícia pode estar chegando.");
	                AcusacaoCrime(playerid, "Alarme do Banco", "NONE" , string , 0, 0, 0, 0);
	            } else {
					SendClientMessageToAll(COLOR_PINK,"New Paper's Life:");
				    SendClientMessageToAll(COLOR_WHITE, "[JORNAL] O Alarme de algum banco foi acionado, a polícia foi avisada.");
					format(string, sizeof(string), "Suspeitos: Gangue %s.", pStats[playerid][GangueNome]);
					SendClientMessageToAll(COLOR_JUIZ, string);
					SendClientMessage(playerid, COLOR_ASSALTANTE, "Saia daí o mais rápido possível, a polícia pode estar chegando.");
	                AcusacaoCrime(playerid, "Alarme do Banco", "NONE" , string , 3, 0, 0, 0);
   				}
			}
			SendClientMessage(playerid, COLOR_ASSALTANTE, "E O SHOW VAI COMEÇAR, TODOS NO CHÃO.");
			if(QtLoopAssalto[playerid] > 0){
           		format(string, sizeof(string), "Vocês tem mais de $%d00 roubados do banco.", QtLoopAssalto);
			    SendClientMessage(playerid, COLOR_WHITE, string);
			}
			new vlr = random(10)+1;
            QtLoopAssalto[playerid] = QtLoopAssalto[playerid] + vlr;
			SetTimerEx("AssaltoGang",10000,0,"dd",playerid, loja);
		}
	}
	else if(loja == 2){
		if(PlayerArea[playerid] == AreaPizzaria){
			ValuerMaximo[playerid] = 1500;
			SendClientMessage(playerid, COLOR_ASSALTANTE, "Passem o dinheiro, nada de pizzas quero dinheiro!");
			if(QtLoopAssalto[playerid] > 0){
            	format(string, sizeof(string), "Vocês tem mais de $%d00 roubados da pizzaria.", QtLoopAssalto);
			    SendClientMessage(playerid, COLOR_WHITE, string);
			}
			new vlr = random(4)+1;
	        QtLoopAssalto[playerid] = QtLoopAssalto[playerid] + vlr;
			SetTimerEx("AssaltoGang",10000,0,"dd",playerid, loja);
		}
	}
	else if(loja == 3){
		if(PlayerArea[playerid] == AreaPosto){
			ValuerMaximo[playerid] = 2000;
			SendClientMessage(playerid, COLOR_ASSALTANTE, "É UM ASSALTO, MÃOS AO ALTO NEGADA!");
	        if(QtLoopAssalto[playerid] > 0){
	            format(string, sizeof(string), "Vocês tem mais de $%d00 roubados do posto de gasolina.", QtLoopAssalto);
			    SendClientMessage(playerid, COLOR_WHITE, string);
			}
			new vlr = random(6)+1;
	        QtLoopAssalto[playerid] = QtLoopAssalto[playerid] + vlr;
			SetTimerEx("AssaltoGang",10000,0,"dd",playerid, loja);
		}
	}
	if(QtLoopAssalto[playerid] >= ValuerMaximo[playerid]){
   		AddPlayerMoney(playerid,QtLoopAssalto[playerid],3);
		QtLoopAssalto[playerid] = 0;
	    format(string, sizeof(string), "Assalto realizado! Vocês conseguiram levar $%d00 dólares do assalto, CORRAM!", QtLoopAssalto);
 	    SendClientMessage(playerid, COLOR_WHITE, string);
 	    CalmaAssalto[playerid] = 1;
		SetTimerEx("LimparTempoAssalto",600000,0,"d",playerid);
		if(loja == 1){
			if(pickupbancoselecionada[playerid] == 1){
			    SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid,0);
			    SetPlayerFacingAngle(playerid,260.9407);
			    SetPlayerPos(playerid,1771.7144,-1655.8201,14.4236);
		 	}
		   	else if(pickupbancoselecionada[playerid] == 2){
		   	    SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid,0);
			    SetPlayerFacingAngle(playerid,260.9407);
			    SetPlayerPos(playerid,1386.0540,-1015.7602,26.6676);
		   	}
			else if(pickupbancoselecionada[playerid] == 3){
			    SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid,0);
			    SetPlayerFacingAngle(playerid,260.9407);
			    SetPlayerPos(playerid,419.7245,-1428.6298,32.4797);
		    }
		   	else if(pickupbancoselecionada[playerid] == 4){
		   	    SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid,0);
		    	SetPlayerFacingAngle(playerid,260.9407);
		    	SetPlayerPos(playerid,2862.3201,-1440.2727,10.9410);
		   	}
		}
	}
}

public LimparTempoAssalto(playerid){
	CalmaAssalto[playerid] = 0;
}

public Assalto(playerid){
	TempoAssalto[playerid]=0;
    SendClientMessage(playerid,COLOR_TRAFICANTE, "A poeira baixou, já é possível que você realize outro Assalto.");
}
public RoubandoCarroForte(playerid, vehicleid){
	KillTimer(TimerRoubo[playerid]);
	if(!IsPlayerInAnyVehicle(playerid) || GetPlayerVehicleID(playerid) != Security[vehicleid])
	{
	    if(RouboCarroForte[playerid] > 0)
	    {
	    	SendClientMessage(playerid, COLOR_ASSALTANTE, "Roubo finalizado, agora saiá daí...");
	    	Pay(playerid, RouboCarroForte[playerid]);
			RouboCarroForte[playerid] = 0;
			Malote[vehicleid] = 0;
		}
		return ;
	}
	RouboCarroForte[playerid] += 50;
	new str[128];
	format(str, sizeof str, "[ROUBO] $%d,00 dólares.", RouboCarroForte[playerid]);
	SendClientMessage(playerid, COLOR_ASSALTANTE, str);
	if(RouboCarroForte[playerid] >= 500)
	{
	    SendClientMessage(playerid, COLOR_ASSALTANTE, "Roubo finalizado, agora saiá daí...");
	    Pay(playerid, RouboCarroForte[playerid]);
		RouboCarroForte[playerid] = 0;
		Malote[vehicleid] = 0;
		RemovePlayerFromVehicle(playerid);
		return ;
	}
	TimerRoubo[playerid] = SetTimerEx("RoubandoCarroForte", 5000, 0, "dd", playerid, vehicleid);
}
public AssaltandoBanco(playerid){
	if(PlayerArea[playerid] == AreaBanco){
		new rand = random(3);
		new string[128];
		if(rand == 1 || rand == 2){
			if(pickupbancoselecionada[playerid] == 1){
				format(string, sizeof(string), "Assalto a Banco ( Banco de Little Mexico )");
		 	}
		   	else if(pickupbancoselecionada[playerid] == 2){
				format(string, sizeof(string), "Assalto a Banco ( Banco de Temple )");
			}
			else if(pickupbancoselecionada[playerid] == 3){
				format(string, sizeof(string), "Assalto a Banco ( Banco de Rodeo )");
			}
		   	else if(pickupbancoselecionada[playerid] == 4){
		   		format(string, sizeof(string), "Assalto a Banco ( Banco de East Beach )");
			}
			if(AssaltPlayer[playerid] == 0){
			    if(IsPlayerTransparent(playerid)){
					SendClientMessageToAll(COLOR_PINK,"New Paper's Life:");
				    SendClientMessageToAll(COLOR_WHITE, "[JORNAL] O Alarme de algum banco foi acionado, a polícia foi avisada.");
					format(string, sizeof(string), "Principal suspeito: Desconhecido Camuflado.");
					SendClientMessageToAll(COLOR_JUIZ, string);
					SendClientMessage(playerid, COLOR_ASSALTANTE, "Saia daí o mais rápido possível, a polícia pode estar chegando.");
	                AssaltPlayer[playerid] = 1;
	                AcusacaoCrime(playerid, "Alarme do Banco", "NONE" , string , 0, 0, 0, 0);
	            } else {
					SendClientMessageToAll(COLOR_PINK,"New Paper's Life:");
				    SendClientMessageToAll(COLOR_WHITE, "[JORNAL] O Alarme de algum banco foi acionado, a polícia foi avisada.");
					format(string, sizeof(string), "Principal suspeito: %s.",PlayerName(playerid));
					SendClientMessageToAll(COLOR_JUIZ, string);
					SendClientMessage(playerid, COLOR_ASSALTANTE, "Saia daí o mais rápido possível, a polícia pode estar chegando.");
	                AssaltPlayer[playerid] = 1;
	                AcusacaoCrime(playerid, "Alarme do Banco", "NONE" , string , 3, 1, 500, 0);
	             }
			}
		}
		if(BancoRoubando[playerid] == 1){
		    SendClientMessage(playerid, COLOR_WHITE, "Você já tem mais de $100 roubados.");
			SetTimerEx("AssaltandoBanco",10000,0,"d",playerid);
	        BancoRoubando[playerid] = BancoRoubando[playerid] + 1;
		}
		else if(BancoRoubando[playerid] == 2){
		    SendClientMessage(playerid, COLOR_WHITE, "Você já tem mais de $200 roubados.");
			SetTimerEx("AssaltandoBanco",10000,0,"d",playerid);
	        BancoRoubando[playerid] = BancoRoubando[playerid] + 1;
		}
		else if(BancoRoubando[playerid] == 3){
		    SendClientMessage(playerid, COLOR_WHITE, "Você já tem mais de $300 roubados.");
			SetTimerEx("AssaltandoBanco",10000,0,"d",playerid);
	        BancoRoubando[playerid] = BancoRoubando[playerid] + 1;
		}
		else if(BancoRoubando[playerid] == 4){
		    SendClientMessage(playerid, COLOR_WHITE, "Você já tem mais de $400 roubados.");
			SetTimerEx("AssaltandoBanco",10000,0,"d",playerid);
	        BancoRoubando[playerid] = BancoRoubando[playerid] + 1;
		}
		else if(BancoRoubando[playerid] == 5){
		    SendClientMessage(playerid, COLOR_WHITE, "Você já tem mais de $500 roubados.");
			SetTimerEx("AssaltandoBanco",10000,0,"d",playerid);
	        BancoRoubando[playerid] = BancoRoubando[playerid] + 1;
		}
		else if(BancoRoubando[playerid] == 6){
		    new assalt;
		    assalt = minrand(600,1300);
			BancoRoubando[playerid] = 0;
			SendClientMessage(playerid, COLOR_ASSALTANTE, "Você roubou um dos caixas, vamo vamo VÁ EMBORA!");
			SendClientMessage(playerid, COLOR_ASSALTANTE, "Antes que a polícia apareça.");
			Pay(playerid, assalt);
			if(pickupbancoselecionada[playerid] == 1){
			    SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid,0);
			    SetPlayerFacingAngle(playerid,260.9407);
			    SetPlayerPos(playerid,1771.7144,-1655.8201,14.4236);
		 	}
		   	else if(pickupbancoselecionada[playerid] == 2){
		   	    SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid,0);
			    SetPlayerFacingAngle(playerid,260.9407);
			    SetPlayerPos(playerid,1386.0540,-1015.7602,26.6676);
		   	}
			else if(pickupbancoselecionada[playerid] == 3){
			    SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid,0);
			    SetPlayerFacingAngle(playerid,260.9407);
			    SetPlayerPos(playerid,419.7245,-1428.6298,32.4797);
		    }
		   	else if(pickupbancoselecionada[playerid] == 4){
		   	    SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid,0);
		    	SetPlayerFacingAngle(playerid,260.9407);
		    	SetPlayerPos(playerid,2862.3201,-1440.2727,10.9410);
		   	}
    	}
	}
}

public PararWeather(playerid) SetPlayerWeather(playerid,weatherprevisao);
public LimparAnim(playerid) { if(!IsPlayerInAnyVehicle(playerid)) { ClearAnimations(playerid); } }
public Chegou1(playerid){
    SendClientMessage(playerid, COLOR_GREEN, "Você chegou em Los Santos, você pode procurar 1 Hotel");
	SetTimerEx("Chegou2",2000,0,"d",playerid);
}
public Chegou2(playerid){
	SendClientMessage(playerid, COLOR_JUIZ,  "Também o dinheiro do transporte está no BANCO foram depositados $5000 dólares");
	SetTimerEx("Chegou3",2000,0,"d",playerid);
}
public Chegou3(playerid){
	SendClientMessage(playerid, COLOR_YELLOW,"O Tutorial irá iniciar em instantes.");
	Tutorial[playerid] = 1;
	CanCPTut[playerid] = 1;
 	SetPlayerControl(playerid,0);
	GetPlayerPos(playerid,AnteriorPos[playerid][0],AnteriorPos[playerid][1],AnteriorPos[playerid][2]);
	SetPlayerVirtualWorld(playerid, 1);
 	ExecTutorial(playerid);
}
public Historia(playerid){
	new time;
	if(pStats[playerid][HistoriaSelecionada] == 1)
	{
	    switch(ParteHistoria[playerid])
		{
		    case 1:
		    {
		        ApplyAnimation(playerid,"PED","IDLE_CHAT",2.1,1,1,1,1,1);
    			SendClientMessage(playerid, COLOR_WHITE,"Sim, estou...");
				time = 2500;
			}
			case 2:
			{
			    SendClientMessage(playerid, COLOR_LIGHT_RED, "O local de entrega é na casa do Rick em Las Venturas.");
			    time = 2500;
			}
			case 3:
			{
			    ApplyAnimation(playerid,"PED","IDLE_CHAT",2.1,1,1,1,1,1);
				SendClientMessage(playerid, COLOR_WHITE,"Tá certo, sei aonde é.");
				time = 3500;
			}
			case 4:
			{
			    SendClientMessage(playerid, COLOR_WHITE,"Porque não mostra o seu rosto?");
			    time = 2500;
			}
			case 5:
			{
			    SendClientMessage(playerid, COLOR_LIGHT_RED,	"Pra que você quer ver idiota? Vá logo deixar essa droga e não pergunte nada!");
                time = 4000;
			}
			case 6:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Quanto vou receber pelo transporte?");
			    time = 2000;
			}
			case 7:
			{
			    SendClientMessage(playerid, COLOR_LIGHT_RED, "Vou mandar alguém depositar o dinheiro, AGORA VÁ!");
				DisablePlayerCheckpoint(playerid);
				time = 2000;
			}
			case 8:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Só me diga quanto vou receber, quero saber!");
			    time = 3000;
			}
			case 9:
			{
			    SendClientMessage(playerid, COLOR_LIGHT_RED, "Já falei que vou mandar alguém depositar, quer ir de uma vez?");
				time = 3000;
			}
			case 10:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Já estou indo então... (imbecíl)");
			    time = 2000;
			}
			case 11:
			{
			    SendClientMessage(playerid, COLOR_JUIZ, "Vá para a casa do Rick entregar o pacote, tem 1 táxi a sua espera na avenida, vá logo!");
				DisablePlayerCheckpoint(playerid);
				SetPlayerControl(playerid,1);
				SetPlayerCheckpoint(playerid,-2212.5923,576.5378,35.1719,2.0);
				CheckpointStatus[playerid] = ENTRANDO_TAXI_RICK;
				ParteHistoria[playerid]++;
				return 1;
			}
			case 12:
			{
			    DisablePlayerCheckpoint(playerid);
				SendClientMessage(playerid, COLOR_WHITE, "Las Venturas, Avenida Leste do Aeroporto de Las Venturas, Casa: 1");
				SendClientMessage(playerid, COLOR_YELLOW, "[Taxista] Entendido, coloque o cinto.");
				time = 6000;
			}
			case 13:
			{
			    PutPlayerInVehicle(playerid,TaxiRick2,3);
				SendClientMessage(playerid, COLOR_YELLOW, "[Taxista] Pronto senhor, o seu táxi já foi pago... Obrigado.");
  				SetPlayerControl(playerid,0);
  				time = 2000;
			}
			case 14:
			{
			    SetPlayerControl(playerid,1);
				SendClientMessage(playerid, COLOR_WHITE, "Obrigado.");
				SetPlayerControl(playerid,1);
				SetPlayerCheckpoint(playerid,1404.7666,1897.6353,11.4609,2.0);
				CheckpointStatus[playerid] = ENTREGANDO_RICK;
				ParteHistoria[playerid]++;
				return 1;
			}
			case 15:
			{
			    SendClientMessage(playerid, COLOR_JUIZ, "Rick não está em casa.");
				DisablePlayerCheckpoint(playerid);
				time = 2000;
			}
			case 16:
			{
                SetTimerEx("AcaoEspecial",1000,0,"dd",playerid,SPECIAL_ACTION_USECELLPHONE);
    			SetTimerEx("AcaoEspecial",6000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
  				SetPlayerControl(playerid,1);
  				time = 1000;
			}
			case 17:
			{
			    SetPlayerControl(playerid,0);
    			SendClientMessage(playerid, COLOR_LIGHT_RED, "Deixe a droga no telhado, atrás do ar-condicionado!");
   				SendClientMessage(playerid, COLOR_LIGHT_RED, "Não esqueça de sair pelos fundos! IMBECIL!");
   				ApplyAnimation(playerid,"PED", "phone_out", 4.0, 0, 0, 0, 0, 0);
   				time = 4000;
			}
			case 18:
			{
                SetPlayerControl(playerid,1);
    			SetPlayerCheckpoint(playerid,1409.9528,1894.3324,15.2443,1.5);
    			CheckpointStatus[playerid] = TELHADO;
    			ParteHistoria[playerid]++;
    			return 1;
			}
			case 19:
			{
			    SetPlayerControl(playerid,0);
    			SetPlayerFacingAngle(playerid,270);
				SendClientMessage(playerid, COLOR_WHITE, "Isso não é vida! Pra que vivo nesse inferno? essa vida é um verdadeiro LIXO!");
				time = 3000;
			}
			case 20:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Quero começar algo novo, sem erros.");
    			time = 3000;
			}
			case 21:
			{
			    SetPlayerControl(playerid,1);
				SendClientMessage(playerid, COLOR_WHITE, "Acho que vou fazer isso mesmo.");
				time = 3000;
			}
			case 22:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Vou começar uma vida nova em Los Santos.");
			    time = 5000;
			}
			case 23:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "É É! VOU PRA LOS SANTOS.");
			    time = 1500;
			}
			case 24:
			{
			    SetPlayerControl(playerid,1);
				SendClientMessage(playerid, COLOR_JUIZ, "Corra tem um táxi no sinal, pegue ele!!");
				SetPlayerCheckpoint(playerid,1483.3660,1887.6996,10.6719,2.0);
				CheckpointStatus[playerid] = TAXI_SINAL_RICK;
				ParteHistoria[playerid]++;
				return 1;
			}
			case 25:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Aeroporto de Las Venturas.");
				SendClientMessage(playerid, COLOR_TAXISTA,"[Taxista] Aperte o cinto.");
				time = 5000;
			}
			case 26:
			{
			    PutPlayerInVehicle(playerid,TaxiRick4,3);
				ApplyAnimation(playerid,"PED","IDLE_CHAT",2.1,1,1,1,1,1);
				SendClientMessage(playerid, COLOR_TAXISTA,"[Taxista] Chegamos.");
  				SetPlayerControl(playerid,0);
  				time = 3000;
			}
			case 27:
			{
			    SendClientMessage(playerid, COLOR_WHITE,"Obrigado.");
  				SetPlayerControl(playerid,1);
				SendClientMessage(playerid, COLOR_JUIZ, "Vá para a porta do Aeroporto seu avião vai decolar, faça o Check-in!");
   				SetPlayerCheckpoint(playerid,1673.8569,1448.1935,10.7842,3.0);
				CheckpointStatus[playerid] = AEROPORTO;
				ParteHistoria[playerid]++;
				return 1;
			}
			case 28:
			{
			    SetPlayerControl(playerid, 0);
                SendClientMessage(playerid, COLOR_PESCADOR, "Gostaria de uma passagem senhor?");
                time = 3000;
			}
			case 29:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Sim gostaria, para Los Santos");
			    time = 3000;
			}
			case 30:
			{
			    SendClientMessage(playerid, COLOR_PESCADOR, "OK Senhor, o pagamento será realizado na sua conta");
			    time = 3000;
			}
			case 31:
			{
			    ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,1,1);
    			SendClientMessage(playerid, COLOR_WHITE, "Está aqui meu cartão.");
				time = 3000;
			}
			case 32:
			{
			    SendClientMessage(playerid, COLOR_PESCADOR, "OK senhor aguarde... Seu avião sairá em 12 minutos");
			    time = 8000;
			}
			case 33:
			{
			    SetPlayerControl(playerid, 1);
   				SetPlayerInterior(playerid,1);
				SetPlayerPos(playerid, 2.384830,33.103397,1199.849976);
				SendClientMessage(playerid, COLOR_PESCADOR, "Seja Bem-Vindo senhor as linhas Virtual Air.");
				time = 3000;
			}
			case 34:
			{
			    SendClientMessage(playerid, COLOR_PESCADOR, "Logo estaremos pousando em Los Santos. A viagem durará cerca de 30 minutos.");
				time = 3000;
			}
			case 35:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Obrigado...");
				time = 22000;
			}
			case 36:
			{
			    pStats[playerid][SpawnPosX] = 1685.4244;
 				pStats[playerid][SpawnPosY] = -2333.4529;
  				pStats[playerid][SpawnPosZ] = 13.5469;
 				pStats[playerid][SpawnPosAng] = 360;
				SetPlayerPos(playerid,1685.4244,-2333.4529,13.5469);
				SetPlayerInterior(playerid,0);
				SetPlayerFacingAngle(playerid,360);
				DisablePlayerCheckpoint(playerid);
				CheckpointStatus[playerid] = NONE;
    			SendClientMessage(playerid, COLOR_WHITE, "Ahhhh... estou pronto para começar a vida.");
				time = 5000;
			}
			case 37:
			{
			    SetPlayerControl(playerid, 1);
    			SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
    			SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
    			SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
    			SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
				SendClientMessage(playerid, COLOR_WHITE, "Você chegou em Los Santos, iremos lhe mostrar como funciona o Virtual Life RPG");
            	SendClientMessage(playerid, COLOR_WHITE, "Espero que goste da nossa Introdução ao Jogo.");
				SendClientMessage(playerid, COLOR_YELLOW,"O Tutorial irá iniciar em instantes.");
				GameTextForPlayer(playerid,"~w~ Los ~g~Santos", 5000,0);
				PlayerPlaySound(playerid, 1186, 0.0,0.0,0.0);
				pStats[playerid][HistoriaFeita] = 1;
				SetPlayerControl(playerid,0);
				Tutorial[playerid] = 1;
				SetPlayerControl(playerid, false);
 				SetPlayerControl(playerid,0);
				GetPlayerPos(playerid,AnteriorPos[playerid][0],AnteriorPos[playerid][1],AnteriorPos[playerid][2]);
				SetPlayerVirtualWorld(playerid, 1);
				CanCPTut[playerid] = 1;
 				SetTimerEx("ExecTutorial", 5000, false, "i", playerid);
 				return 1;
			}
			default:
			{
			    ParteHistoria[playerid] = 0;
	    		pStats[playerid][HistoriaSelecionada] = 0;
			    return 1;
			}
		}
	}
	else if(pStats[playerid][HistoriaSelecionada] == 2)
	{
		switch(ParteHistoria[playerid])
		{
			case 1:
	   	 	{
 				SetPlayerControl(playerid,0);
      			SendClientMessage(playerid, COLOR_WHITE, "Estou cansado daqui!");
      			time = 2500;
			}
			case 2:
			{
		   	 	SendClientMessage(playerid, COLOR_WHITE, "Acho que vou começar a viver em San Fierro ou Los Santos!");
	  			time = 2500;
			}
			case 3:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "ÉÉÉ, vou pra Los Santos...");
			    SetTimerEx("AcaoEspecial",2000,0,"dd",playerid,SPECIAL_ACTION_USECELLPHONE);
			    time = 5000;
			}
			case 4:
			{
			    SendClientMessage(playerid, COLOR_ORANGE, "Aeroporto Virtual Air, boa tarde!");
			    time = 3000;
			}
			case 5:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Boa tarde! Eu gostaria de uma passagem para Los Santos!");
			    time = 2500;
			}
			case 6:
			{
			    SendClientMessage(playerid, COLOR_ORANGE, "Para Los Santos temos das 1:00 até às 4:00 e das 7:00 até às 11:00...");
	    	    time = 2500;
			}
			case 7:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Vou querer das 1:00 até às 4:00");
			    time = 2500;
			}
			case 8:
			{
			    SendClientMessage(playerid, COLOR_ORANGE, "OK senhor, sua passagem foi reservada!");
			    time = 2000;
			}
			case 9:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Estou indo para aí imediatamente!");
	  			SetTimerEx("AcaoEspecial",1000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	  			SetPlayerControl(playerid,1);
	  			SendClientMessage(playerid, COLOR_JUIZ, "Vá até seu motorista para ele lhe levar até o Aeroporto Virtual Air!");
	  			DisablePlayerCheckpoint(playerid);
	  			SetPlayerCheckpoint(playerid,1905.2314,2086.2603,10.8203,3.0);
	  			CheckpointStatus[playerid] = CONVERSA_MOTORISTA;
	  			ParteHistoria[playerid]++;
				return 1;
			}
			case 10:
			{
			    SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "OK senhor!");
			    time = 3000;
			}
			case 11:
			{
			    SetPlayerPos(playerid,1702.4198,1480.2014,10.7774);
	  			SetPlayerFacingAngle(playerid,69.6255);
      			SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Chegamos senhor!");
				time = 3000;
			}
			case 12:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Bom... Tenho que te dizer uma coisa!");
	  			ApplyAnimation(playerid,"PED","IDLE_CHAT",2.1,1,1,1,1,1);
				time = 2000;
			}
			case 13:
			{
			    SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Sim senhor!");
			    time = 2000;
			}
			case 14:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Já que vou para Los Santos! Terei que demiti-lo...");
      			ApplyAnimation(playerid,"PED","IDLE_CHAT",2.1,1,1,1,1,1);
      			time = 2500;
			}
			case 15:
			{
			    SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Pois é! Eu entendo senhor!");
			    time = 2000;
			}
			case 16:
			{
			    SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Seu amigo Mark me ofereceu um emprego em Liberty City");
			    time = 2500;
			}
			case 17:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Ohhh! O Mark está indo para Liberty City? Ele nem me contou!");
      			ApplyAnimation(playerid,"PED","IDLE_CHAT",2.1,1,1,1,1,1);
				time = 3000;
			}
			case 18:
			{
			    SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Pois é senhor! Estou indo para lá...");
			    time = 2500;
			}
			case 19:
			{
			    SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Vou partir amanhã cedo da viagem e chegarei lá à noite...");
				time = 2500;
			}
			case 20:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Hum... Aqui está o seu pagamento! Adeus...");
	  			ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,1,1);
	  			time = 2500;
			}
			case 21:
			{
			    SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Adeus senhor!");
	  			time = 2000;
			}
			case 22:
			{
			    SetPlayerControl(playerid,1);
      			SendClientMessage(playerid, COLOR_JUIZ, "Vá dentro do aeroporto pegar sua passagem!");
      			SetPlayerCheckpoint(playerid,1673.8569,1448.1935,10.7842,3.0);
      			CheckpointStatus[playerid] = PEGAR_PASSAGEM;
				ParteHistoria[playerid]++;
				return 1;
			}
			case 23:
			{
			    SendClientMessage(playerid, COLOR_ORANGE, "Boa tarde senhor! Em que posso ajuda-lo?");
			    time = 2000;
			}
			case 24:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Boa tarde! Vim aqui pegar uma passagem para Los Santos que reservei, das 1:00 até às 4:00");
      			ApplyAnimation(playerid,"PED","IDLE_CHAT",2.1,1,1,1,1,1);
				time = 2000;
			}
			case 25:
			{
			    SendClientMessage(playerid, COLOR_ORANGE, "Ahhh sim... Aqui está sua passagem! São $500");
			    time = 2000;
			}
			case 26:
			{
		 		ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,1,1);
	  			SendClientMessage(playerid, COLOR_WHITE, "Aqui está o dinheiro!");
				time = 2500;
			}
			case 27:
			{
			    ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,1,1);
	  			SendClientMessage(playerid, COLOR_ORANGE, "Obrigado pela preferência senhor! Boa viagem!");
				time = 3500;
			}
			case 28:
			{
			    SetPlayerControl(playerid, 1);
   	  			SetPlayerInterior(playerid,1);
	  			SetPlayerPos(playerid, 2.384830,33.103397,1199.849976);
	  			SendClientMessage(playerid, COLOR_ORANGE, "A viagem vai demorar um pouco portanto se acomode bem em nosso avião!");
				time = 4000;
			}
			case 29:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Vou ligar para o Mark para ver o que ele anda aprontando!");
	  			SetTimerEx("AcaoEspecial",2000,0,"dd",playerid,SPECIAL_ACTION_USECELLPHONE);
				time = 5000;
			}
			case 30:
			{
			    SendClientMessage(playerid, COLOR_TURQUOISE, "Mark Falando!");
			    time = 2000;
			}
			case 31:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Eai Mark!");
			    time = 2000;
			}
			case 32:
			{
			    SendClientMessage(playerid, COLOR_TURQUOISE, "Opa! Amigo, como vai?");
			    time = 2500;
			}
			case 33:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Vou bem! Fiquei sabendo que você está indo para Liberty City!");
			    time = 3000;
			}
			case 34:
			{
			    SendClientMessage(playerid, COLOR_TURQUOISE, "Sim vou! Meu primo vai abrir uma empresa de limosines lá e me pediu pra administrar 20 por cento dela");
			    time = 4000;
			}
			case 35:
			{
			    SendClientMessage(playerid, COLOR_TURQUOISE, "Aí eu aceitei! E contratei seu motorista pra ver se ele queria, agora ele me ligou e disse que aceita o emprego");
				time = 4000;
			}
			case 36:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Estou indo para Los Santos! Começar uma nova vida... Las Venturas está muito chato!");
			    time = 3000;
			}
			case 37:
			{
			    SendClientMessage(playerid, COLOR_TURQUOISE, "Pois é amigo! Nunca mais vamos nos rever... Adeus cara agora vo ter que desligar o celular");
			    time = 4000;
			}
			case 38:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Adeus!");
      			SetTimerEx("AcaoEspecial",1000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
      			time = 10000;
			}
			case 39:
			{
			    pStats[playerid][SpawnPosX] = 1685.4244;
	  			pStats[playerid][SpawnPosY] = -2333.4529;
	  			pStats[playerid][SpawnPosZ] = 13.5469;
	  			pStats[playerid][SpawnPosAng] = 360;
      			SetPlayerPos(playerid,1685.4244,-2333.4529,13.5469);
      			SetPlayerInterior(playerid,0);
      			SetPlayerFacingAngle(playerid,360);
      			SendClientMessage(playerid, COLOR_WHITE, "Finalmente... Los Santos! Meu novo lar.");
      			time = 3000;
			}
			case 40:
			{
			    SetPlayerSkin(playerid,186);
    			SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
    			SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
    			SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
    			SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
    			SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
   				SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
				GameTextForPlayer(playerid,"~w~ Los ~g~Santos", 10000,0);
				PlayerPlaySound(playerid, 1186, 0.0,0.0,0.0);
				pStats[playerid][HistoriaFeita] = 1;
				AddPlayerMoney(playerid, 150 , 9);
				pStats[playerid][Banco] = 10000;
				SetPlayerControl(playerid,0);
				SetTimerEx("Chegou1",2000,0,"d",playerid);
				return 1;
			}
			default:
			{
			    ParteHistoria[playerid] = 0;
	    		pStats[playerid][HistoriaSelecionada] = 0;
			    return 1;
			}
		}
	}
	else if(pStats[playerid][HistoriaSelecionada] == 3)
	{
	    switch(ParteHistoria[playerid])
		{
		    case 1:
		    {
		        SendClientMessage(playerid, COLOR_JUIZ, "Vá para a Avenida, talvez passe algum caminhoneiro e lhe dê carona.");
				SendClientMessage(playerid, COLOR_JUIZ, "Siga o CheckPoint ( marca vermelha no radar ).");
				SetPlayerCheckpoint(playerid,-1836.3423,-2565.1174,59.1584,2.5);
				CheckpointStatus[playerid] = ESPERANDO_CAMINHONEIRO;
				ParteHistoria[playerid]++;
				return 1;
		    }
		    case 2:
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "[Caminhoneiro] Rapaz pára aí... Carona!");
				SetPlayerControl(playerid,1);
				time = 3000;
			}
			case 3:
			{
			    SetPlayerControl(playerid,0);
				SetPlayerPos(playerid, -2169.8896,-2641.3123,49.3310);
    			ApplyAnimation(playerid,"PED","IDLE_CHAT",2.1,1,1,1,1,1);
    			SendClientMessage(playerid, COLOR_CAMINHONEIRO, "[Caminhoneiro] Tá indo pra onde desse jeito?");
				time = 2000;
			}
			case 4:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Olha nem lembro de nada, essa cidade é violenta demais, poderia me deixar na estação de San Fierro?");
			    time = 4000;
			}
			case 5:
			{
			    SendClientMessage(playerid, COLOR_CAMINHONEIRO, "[Caminhoneiro] Vou passar na Rodovia Principal, é próximo, posso te deixar lá.");
				time = 3000;
			}
			case 6:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "OPA! Muito Obrigado.");
			    time = 3000;
			}
			case 7:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "[Caminhoneiro] Sobe aí.");
			    time = 3000;
			}
			case 8:
			{
			    PutPlayerInVehicle(playerid,CaminhaoPelado1,1);
				SendClientMessage(playerid, COLOR_WHITE, "[Caminhoneiro] Coloque o cinto de segurança...");
				SendClientMessage(playerid, COLOR_PESCADOR, "Vrummm....");
				time = 9000;
			}
			case 9:
			{
			    PutPlayerInVehicle(playerid,CaminhaoPelado2,1);
   				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COLOR_WHITE, "[Caminhoneiro] Pronto rapaz, espero que vá pegar uma roupa.");
				time = 3000;
			}
			case 10:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Obrigado denovo!");
    			RemovePlayerFromVehicle(playerid);
				SetPlayerControl(playerid,1);
				SetPlayerCheckpoint(playerid,-2026.9244,122.6370,28.9294,2.5);
				CheckpointStatus[playerid] = ENTREGA_SF;
				ParteHistoria[playerid]++;
				return 1;
			}
			case 11:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Exatamente...");
			    time = 3000;
			}
			case 12:
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Tá tudo aí?");
			    time = 3000;
			}
			case 13:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Acho que sim...");
			    time = 3000;
			}
			case 14:
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Não abriu ele não né rapaz?");
			    time = 3000;
			}
			case 15:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Nem cheirei!");
			    time = 3000;
			}
			case 16:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Toma...");
			    time = 3000;
			}
			case 17:
			{
			    SendClientMessage(playerid, COLOR_GRAY, "Já mandei depositarem a sua grana...");
    			SendClientMessage(playerid, COLOR_GRAY, "Agora vá no quartinho e vista sua roupa, a sua documentação também está lá");
    			SetPlayerCheckpoint(playerid, -2034.1848,148.8586,28.83594, 2.0);
    			CheckpointStatus[playerid] = PELADO_PEGANDO_ROUPA;
				ParteHistoria[playerid]++;
				SetPlayerControl(playerid,1);
				return 1;
			}
			case 18:
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "[Taxista] Entendido senhor.");
    			PutPlayerInVehicle(playerid,TaxiPelado1,3);
    			SetPlayerControl(playerid,0);
  				time = 8000;
			}
			case 19:
			{
			    PutPlayerInVehicle(playerid,TaxiPelado2,3);
    			SendClientMessage(playerid, COLOR_JUIZ, "Vá até o aeroporto.");
    			SetPlayerControl(playerid,1);
    			RemovePlayerFromVehicle(playerid);
    			SetPlayerCheckpoint(playerid, -1408.6481,-299.2098,14.1484, 2.0);
    			CheckpointStatus[playerid] = AEROPORTO;
    			ParteHistoria[playerid]++;
    			return 1;
			}
			case 20:
			{
			    SetPlayerControl(playerid, 0);
                SendClientMessage(playerid, COLOR_PESCADOR, "Gostaria de uma passagem senhor?");
                time = 3000;
			}
			case 21:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Sim gostaria, para Los Santos");
			    time = 3000;
			}
			case 22:
			{
			    SendClientMessage(playerid, COLOR_PESCADOR, "OK Senhor, o pagamento será realizado na sua conta");
			    time = 3000;
			}
			case 23:
			{
			    ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,1,1);
    			SendClientMessage(playerid, COLOR_WHITE, "Está aqui meu cartão.");
				time = 3000;
			}
			case 24:
			{
			    SendClientMessage(playerid, COLOR_PESCADOR, "OK senhor aguarde... Seu avião sairá em 12 minutos");
			    time = 8000;
			}
			case 25:
			{
			    SetPlayerControl(playerid, 1);
   				SetPlayerInterior(playerid,1);
				SetPlayerPos(playerid, 2.384830,33.103397,1199.849976);
				SendClientMessage(playerid, COLOR_PESCADOR, "Seja Bem-Vindo senhor as linhas Virtual Air.");
				time = 3000;
			}
			case 26:
			{
			    SendClientMessage(playerid, COLOR_PESCADOR, "Logo estaremos pousando em Los Santos. A viagem durará cerca de 30 minutos.");
				time = 3000;
			}
			case 27:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Obrigado...");
				time = 22000;
			}
			case 28:
			{
			    pStats[playerid][SpawnPosX] = 1685.4244;
 				pStats[playerid][SpawnPosY] = -2333.4529;
  				pStats[playerid][SpawnPosZ] = 13.5469;
 				pStats[playerid][SpawnPosAng] = 360;
				SetPlayerPos(playerid,1685.4244,-2333.4529,13.5469);
				SetPlayerInterior(playerid,0);
				SetPlayerFacingAngle(playerid,360);
				DisablePlayerCheckpoint(playerid);
				CheckpointStatus[playerid] = NONE;
    			SendClientMessage(playerid, COLOR_WHITE, "Ahhhh... estou pronto para começar a vida.");
				time = 5000;
			}
			case 29:
			{
			    SetPlayerControl(playerid, 1);
    			SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
    			SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
    			SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
    			SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
    			SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
    			SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
    			SendClientMessage(playerid, COLOR_GREEN, "Você chegou em Los Santos, você pode procurar 1 Hotel");
				SendClientMessage(playerid, COLOR_JUIZ,  "Também o dinheiro do transporte está no BANCO foram depositados $5000 dólares");
				SendClientMessage(playerid, COLOR_WHITE, "O radar informa aonde você possa conseguir uma profissão e comece a trabalhar");
				SendClientMessage(playerid, COLOR_PINK,  "Antes de começar a jogar leia nossas regras. Digite /regras1 e /regras2");
				SendClientMessage(playerid, COLOR_YELLOW,"O Tutorial irá iniciar em instantes.");
				GameTextForPlayer(playerid,"~w~ Los ~g~Santos", 5000,0);
				CheckpointStatus[playerid] = AGENCIA;
				SetPlayerCheckpoint(playerid, 1310.4824,-1368.2488,13.5471, 3.0);
				PlayerPlaySound(playerid, 1186, 0.0,0.0,0.0);
				pStats[playerid][HistoriaFeita] = 1;
				SetPlayerControl(playerid,0);
				Tutorial[playerid] = 1;
 				SetPlayerControl(playerid,0);
				GetPlayerPos(playerid,AnteriorPos[playerid][0],AnteriorPos[playerid][1],AnteriorPos[playerid][2]);
				SetPlayerVirtualWorld(playerid, 1);
				CanCPTut[playerid] = 1;
 				SetTimerEx("ExecTutorial", 3000, false, "i", playerid);
 				return 1;
			}
            default:
			{
			    ParteHistoria[playerid] = 0;
	    		pStats[playerid][HistoriaSelecionada] = 0;
			    return 1;
			}
		}
	}
	else
	{
	    ParteHistoria[playerid] = 0;
	    pStats[playerid][HistoriaSelecionada] = 0;
	    return 1;
	}
	ParteHistoria[playerid]++;
	SetTimerEx("Historia",time,false,"d",playerid);
	return 1;
}

public ClearTutWait(playerid)
{
    CanCPTut[playerid] = 1;
    return 1;
}

public ExecTutorial(playerid)
{
	if(!IsPlayerConnected(playerid) || !Tutorial[playerid]) return 0;

	SetPlayerControl(playerid, false);
	SetPlayerVirtualWorld(playerid, 0);
	CanCPTut[playerid] = 0;
	SetTimerEx("ClearTutWait", 5000, false, "d", playerid);

	switch(Tutorial[playerid])
	{
	    case 1: {
	        SetPlayerCameraPos(playerid,1853.6481,-1444.8663,35.9219);
	        SetPlayerCameraLookAt(playerid,1701.5076,-1643.4946,44.3978);
 			SetPlayerPos(playerid,1823.6481,-1444.8663,43.9219);
	        //--//
	        ClearPlayerChat(playerid, 1);
	        SendClientMessage(playerid, COLOR_YELLOW,"-=- Seja bem-vindo ao tutorial de iniciação ao Virtual Life RPG -=-");
			SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "Este RPG foi desenvolvido durante 1 ano, tentando retratar o máximo possível da vida real.");
			SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "A jogabilidade deste RPG é dificil, portanto seja paciente se quiser aproveitá-lo ao máximo.");
			SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "Este tutorial irá ajudar você a jogar corretamente o Virtual Life RPG.");
			SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "A partir deste momento você poderá usar as teclas 4 e 6 (teclado numérico) para");
			SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "se guiar no tutorial, de modo que você volte e avance ao longo das páginas.");
			SendClientMessage(playerid, COLOR_YELLOW,"Para avançar, pressione Num Lock 6.");
			ClearPlayerChat(playerid, 2);
		}
		case 2: {
		    SetPlayerCameraPos(playerid,1853.6481,-1444.8663,35.9219);
	        SetPlayerCameraLookAt(playerid,1701.5076,-1643.4946,44.3978);
	        //--//
			ClearPlayerChat(playerid, 2);
		    SendClientMessage(playerid, COLOR_YELLOW,"-=- O início de tudo -=-");
		    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Primeiramente você deve se perguntar: O que estou fazendo neste aeroporto?");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "O seu personagem não iria surgir do nada, não é? Retratamos apenas coisas reais aqui.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Seu personagem passou por uma história e, a partir do momento que você foi para o aeroporto,");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "você passou a controlá-lo e, assim, construir uma vida em Los Santos.");
			SendClientMessage(playerid, COLOR_YELLOW,"Para avançar, pressione Num Lock 6; Para voltar, Num Lock 4.");
			ClearPlayerChat(playerid, 2);
		}
		case 3: {
		    SetPlayerCameraPos(playerid,1853.6481,-1444.8663,35.9219);
	        SetPlayerCameraLookAt(playerid,1701.5076,-1643.4946,44.3978);
	        //--//
		    ClearPlayerChat(playerid, 2);
            SendClientMessage(playerid, COLOR_YELLOW,"-=- Dúvidas e Ajuda -=-");
  		    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Sempre que quiser tirar dúvidas, leia este tutorial novamente ou use /ajuda");
  		    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Para falar com um admin digite: /admin [msg], preste atenção nesse comando!");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "É NORMAL ninguém estar no radar, faz parte do nosso projeto de um jogo mais realístico.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Atenção! Com o chat ocorre a mesma coisa, somente as pessoas mais próximas de você irão ler.");
			SendClientMessage(playerid, COLOR_YELLOW,"Para avançar, pressione Num Lock 6; Para voltar, Num Lock 4.");
			ClearPlayerChat(playerid, 2);
		}
		case 4: {
            SetPlayerCameraPos(playerid, 1510.0485,-1703.3918,39.4178);
            SetPlayerCameraLookAt(playerid, 1553.4056,-1675.4844,16.1953);
            SetPlayerPos(playerid,  1510.0485,-1703.3918,39.4178);
 			//--//
 			ClearPlayerChat(playerid, 3);
 			SendClientMessage(playerid, COLOR_YELLOW,"-=- Delegacia -=-");
 			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Esta é a Delegacia de Los Santos, aonde todo dia entram e saem criminosos de alto risco.");
 			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Você deverá respeitar as leis e regras se não quiser algum dia dormir aqui, o que não seria bom.");
 			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Aqui você poderar visitar os presos, tirar passaporte, tirar porte de armas, pagar dívidas");
 			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Pagar multas e fazer reconhevimento de presos, além de poder entrar no Tribunal para assistir um julgamento");
			SendClientMessage(playerid, COLOR_YELLOW,"Para avançar, pressione Num Lock 6; Para voltar, Num Lock 4.");
			ClearPlayerChat(playerid, 3);
		}
		case 5: {
            SetPlayerCameraPos(playerid, 1510.0485,-1703.3918,39.4178);
            SetPlayerCameraLookAt(playerid, 1553.4056,-1675.4844,16.1953);
            SetPlayerPos(playerid,  1510.0485,-1703.3918,39.4178);
 			//--//
		    SendClientMessage(playerid, COLOR_YELLOW,"-=- Leis de processo Civil -=-");
		    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, " 1º Não destruir o patrimônio público.");
		    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, " 2º Não dirigir veículos que não te pertençam, exceto os do próprio servidor.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, " 3º Não portar drogas ou outros tipos de coisas que causam vício.");
		    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, " 4º Não portar armas sem ter licensa para isso.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, " 5º Não rejeitar a solicitação de um Oficial da Polícia.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, " 6º Respeitar os jogadores e não agredí-los.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, " 7º Não andar a pé nas pistas e estradas, seguir pela calçada.");
			SendClientMessage(playerid, COLOR_YELLOW,"Para avançar, pressione Num Lock 6; Para voltar, Num Lock 4.");
			ClearPlayerChat(playerid, 1);
		}
		case 6: {
		    SetPlayerCameraPos(playerid,1310.2794,-1384.3351,16.7450);
 			SetPlayerCameraLookAt(playerid,1312.2794,-1344.0351,17.2450);
 			SetPlayerPos(playerid,1310.2794,-1384.3351,42.7450);
 			//--//
 			ClearPlayerChat(playerid, 2);
 			SendClientMessage(playerid, COLOR_YELLOW,"-=- Trabalho -=-");
 			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "A vida aqui não é fácil, terá que trabalhar muito para conseguir dinheiro.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Esta é a agência de profissões, aonde você terá que pegar uma profissão.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "São 32 profissões, não poderá pegar qualquer uma, poderá pegar de acordo");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "com seu nível de trabalho, visto em /STATUS.");
			SendClientMessage(playerid, COLOR_YELLOW,"Para avançar, pressione Num Lock 6; Para voltar, Num Lock 4.");
			ClearPlayerChat(playerid, 2);
		}
		case 7: {
		    SetPlayerCameraPos(playerid,1310.2794,-1384.3351,16.7450);
 			SetPlayerCameraLookAt(playerid,1312.2794,-1344.0351,17.2450);
 			SetPlayerPos(playerid,1310.2794,-1384.3351,42.7450);
 			//--//
 			ClearPlayerChat(playerid, 2);
 			SendClientMessage(playerid, COLOR_YELLOW,"-=- XPoints e Level -=-");
 			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "ATENÇÃO!");
 			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "O sistema de level faz com que, ao trabalhar, você receberá XPoints, que acumulados resultam em um novo level.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Lembre-se: Você só irá ganhar XPoints se estiver trabalhando dentro de seu horário de trabalho. (/meuhorario)");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Ao passar de level, você terá novas vantagens em sua vida, novos trabalhos disponíveis, etc.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Para ver o level necessário para cada profissão utilize /profissoes. Para ver seu level use /sistlevel.");
			SendClientMessage(playerid, COLOR_YELLOW,"Para avançar, pressione Num Lock 6; Para voltar, Num Lock 4.");
			ClearPlayerChat(playerid, 2);
		}
		case 8: {
		    SetPlayerCameraPos(playerid,1310.2794,-1384.3351,16.7450);
 			SetPlayerCameraLookAt(playerid,1312.2794,-1344.0351,17.2450);
 			SetPlayerPos(playerid,1310.2794,-1384.3351,42.7450);
 			//--//
 			ClearPlayerChat(playerid, 2);
 			SendClientMessage(playerid, COLOR_YELLOW,"-=- Localização e GPS -=-");
 			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Este RPG possui sistema de GPS para facilitar a localização de alguns lugares.");
		    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Para chegar aqui, na agência de empregos, utilize o GPS com o comando '/gps emprego'.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Existem 53 locais disponíveis para serem marcados e localizados.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Para ver os locais apenas digite '/GPS' e para ligar use '/GPS [nome do local]'; Desativar: '/desativargps'.");
			SendClientMessage(playerid, COLOR_YELLOW,"Para avançar, pressione Num Lock 6; Para voltar, Num Lock 4.");
			ClearPlayerChat(playerid, 2);
		}
		case 9: {
		    SetPlayerCameraPos(playerid,1853.6481,-1444.8663,35.9219);
	        SetPlayerCameraLookAt(playerid,1701.5076,-1643.4946,44.3978);
 			SetPlayerPos(playerid,1823.6481,-1444.8663,43.9219);
	        //--//
	        ClearPlayerChat(playerid, 1);
	        SendClientMessage(playerid, COLOR_YELLOW,"-=- Chat e Mensagens -=-");
		    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Suas mensagens digitadas aparecerão apenas para jogadores próximos a você.");
		    if(ENABLE_GLOBAL_CHAT == 1)
		    {
				SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Caso você queira falar algo para todos, use '(/g)ritar [mensagem]'.");
				SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Ao gritar demais você poderá ficar com dor de garganta, tendo que esperar a dor passar.");
			}
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Caso você queira falar baixo para pessoas perto de você use '(/s)ussurrar [mensagem]'.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Caso você queira falar só para quem está em seu veículo use '/c [mensagem]'");
            SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Também existem celulares, telefones e anúncios (arranjados com Jornalistas) em caso de contato distante.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Qualquer dúvida sobre chat use '/sistchat'.");
			SendClientMessage(playerid, COLOR_YELLOW,"Para avançar, pressione Num Lock 6; Para voltar, Num Lock 4.");
			ClearPlayerChat(playerid, 1);
		}
		case 10: {
		    SetPlayerCameraPos(playerid,1853.6481,-1444.8663,35.9219);
	        SetPlayerCameraLookAt(playerid,1701.5076,-1643.4946,44.3978);
 			SetPlayerPos(playerid,1823.6481,-1444.8663,43.9219);
	        //--//
	        ClearPlayerChat(playerid, 2);
	        SendClientMessage(playerid, COLOR_YELLOW,"-=- Mapa/Radar -=-");
		    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Você não pode ver ninguém no mapa, pois isto serve para seguir a dinâmica da vida real.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Caso você precise saber onde uma pessoa está, fale com ela ou use o rastreador por celular.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Existem pessoas que, além de não serem vistas no radar, ficam com o nick invisível.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Esta façanha é chamada de Identidade Secreta, que, ao decorrer deste tutorial, você aprenderá mais.");
			SendClientMessage(playerid, COLOR_YELLOW,"Para avançar, pressione Num Lock 6; Para voltar, Num Lock 4.");
			ClearPlayerChat(playerid, 2);
		}
		case 11: {
		    SetPlayerCameraPos(playerid,1315.0616,-910.3407,41.2420);
 			SetPlayerCameraLookAt(playerid,1315.5616,-904.0407,40.7420);
		    SetPlayerPos(playerid,1315.0616,-910.3407,65.2420);
 			//--//
 			ClearPlayerChat(playerid, 1);
	        SendClientMessage(playerid, COLOR_YELLOW,"-=- Celular -=-");
		    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Você deve se perguntar: Como vou me comunicar privadamente com os amigos?");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Pensando nisso, foi criado o Celular, que pode ser comprado na Loja de Utilidades.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "A comunicação com o celular tem seu custo dependendo da inflação.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Você também pode ter uma agenda telefônica para salvar seus números prediletos.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Cada crédito lhe dá o direito de falar por 30 segundos, custando 1 dólar cada.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Se você não possuir créditos, poderá ligar a cobrar, consumindo créditos do amigo(a) :)");
			SendClientMessage(playerid, COLOR_YELLOW,"Para avançar, pressione Num Lock 6; Para voltar, Num Lock 4.");
			ClearPlayerChat(playerid, 1);
		}
		case 12: {
		    SetPlayerCameraPos(playerid,1764.7455,-1663.8407,15.4963);
 			SetPlayerCameraLookAt(playerid,1770.7455,-1657.5407,15.4963);
		    SetPlayerPos(playerid,1764.7455,-1663.8407,43.4963);
 			//--//
 			ClearPlayerChat(playerid, 2);
	        SendClientMessage(playerid, COLOR_YELLOW,"-=- Banco -=-");
		    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "No banco você pode realizar várias atividades econômicas: Empréstimos, Depósitos, Aplicações, etc.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "A sua credibilidade em empréstimos irá depender do tempo de sua conta.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Você pode aplicar dinheiro na Bolsa de Valores, podendo perder ou ganhar ações.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Você pode realizar operações bancárias básicas como Extratos, Depósitos e Saques.");
			SendClientMessage(playerid, COLOR_YELLOW,"Para avançar, pressione Num Lock 6; Para voltar, Num Lock 4.");
			ClearPlayerChat(playerid, 2);
		}
		case 13: {
		    SetPlayerCameraPos(playerid,2149.7040,-1373.1551,27.4844);
			SetPlayerCameraLookAt(playerid,2148.7040,-1369.8551,26.9844);
		    SetPlayerPos(playerid,2149.7040,-1373.1551,43.4844);
			//--//
			ClearPlayerChat(playerid, 1);
	        SendClientMessage(playerid, COLOR_YELLOW,"-=- Casas -=-");
		    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Depois de trabalhar muito, você poderá comprar uma casa para morar.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Em sua casa você poderá ter diversos móveis, como Rádio, TV, Microondas, etc.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Mas para isso você deverá comprar os eletrodomésticos e a comida, claro.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Ladrões podem roubar sua casa, por isto, é recomendável comprar sistemas anti-furto.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Na sua casa você pode fazer o que você quiser, até transformá-la em um hotel.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Porquê na sua casa, quem manda é você!");
			SendClientMessage(playerid, COLOR_YELLOW,"Para avançar, pressione Num Lock 6; Para voltar, Num Lock 4.");
			ClearPlayerChat(playerid, 1);
		}
		case 14: {
		    SetPlayerCameraPos(playerid,553.1719,-1263.4336,20.2422);
			SetPlayerCameraLookAt(playerid,555.1719,-1294.6336,17.2422);
		    SetPlayerPos(playerid,553.1719,-1263.4336,40.2422);
			//--//
			ClearPlayerChat(playerid, 1);
	        SendClientMessage(playerid, COLOR_YELLOW,"-=- Carros -=-");
		    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Esta é a concessionária de veículos, o lugar onde se compra e vende carros.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "A partir do momento que você compra um carro, você pode tuná-lo, pintá-lo, e fazer o que quiser.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Todo carro tem duas chaves, ou seja, se roubarem com a chave, você tem uma reserva.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "É recomendável chamar a polícia quando há roubos, pois assim você pode resolver sem se machucar.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Você também pode instalar travas e alarme no carro, dificultando o trabalho do ladrão.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Cuidado para não bater o carro, pois ele pode amassar e lhe trazer prejuízo.");
			SendClientMessage(playerid, COLOR_YELLOW,"Para avançar, pressione Num Lock 6; Para voltar, Num Lock 4.");
			ClearPlayerChat(playerid, 1);
		}
		case 15: {
		    SetPlayerCameraPos(playerid,1853.7716,-2067.9666,17.3828);
			SetPlayerCameraLookAt(playerid,1812.2716,-2067.1666,15.8828);
			SetPlayerPos(playerid,1823.6481,-1444.8663,43.9219);
			//--//
			ClearPlayerChat(playerid, 2);
	        SendClientMessage(playerid, COLOR_YELLOW,"-=- Habilitações -=-");
		    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Na auto-escola você poderá fazer testes de habilitação com veículos.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Existem três habilitações necessárias para dirigir todos os veículos: Terrestre, Aérea e Naval.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Você pode optar por fazer só um dos três testes caso não use todos os tipos de veículo.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "É melhor você ter habilitação antes de comprar certos veículos.");
			SendClientMessage(playerid, COLOR_YELLOW,"Para avançar, pressione Num Lock 6; Para voltar, Num Lock 4.");
			ClearPlayerChat(playerid, 2);
		}
		case 16: {
		    SetPlayerCameraPos(playerid,1853.6481,-1444.8663,35.9219);
	        SetPlayerCameraLookAt(playerid,1701.5076,-1643.4946,44.3978);
	        //--//
		    ClearPlayerChat(playerid, 2);
	        SendClientMessage(playerid, COLOR_YELLOW,"-=- Entretenimentos -=-");
		    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "É verdade, isso é um RPG, mas também só ficar trabalhando é detestável, não?");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Pois bem, no Virtual Life RPG você tem várias formas de entretenimento!");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Existem festas, áreas de lazer e minigames te esperando pela cidade.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Se você não quiser sair pra festas, tudo bem! Você pode fazê-la em sua casa e chamar amigos!");
			SendClientMessage(playerid, COLOR_YELLOW,"Para avançar, pressione Num Lock 6; Para voltar, Num Lock 4.");
			ClearPlayerChat(playerid, 2);
		}
		case 17: {
		    SetPlayerCameraPos(playerid,1853.6481,-1444.8663,35.9219);
	        SetPlayerCameraLookAt(playerid,1701.5076,-1643.4946,44.3978);
	        //--//
		    ClearPlayerChat(playerid, 2);
	        SendClientMessage(playerid, COLOR_YELLOW,"-=- Hábitos -=-");
		    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Cuide de você, aqui você poderá pegar doenças como Aids, Gripe, Dor de Barriga.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "É bom que você sempre vá ao hospital fazer exames, para que nunca fica doente");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Existe Paramédicos e Vendedores ambulantes que cuidam para que você fique sempre saudável.");
			SendClientMessage(playerid, COLOR_YELLOW,"Para avançar, pressione Num Lock 6; Para voltar, Num Lock 4.");
			ClearPlayerChat(playerid, 1);
		}
		case 18: {
		    SetPlayerCameraPos(playerid,1853.6481,-1444.8663,35.9219);
	        SetPlayerCameraLookAt(playerid,1701.5076,-1643.4946,44.3978);
	        //--//
		    ClearPlayerChat(playerid, 1);
	        SendClientMessage(playerid, COLOR_YELLOW,"-=- Respeito -=-");
		    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Respeito é o que define a sua personalidade e poder.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "O seu respeito pode mostrar se você é o 'manda chuva' ou uma pessoa qualquer.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Para adquirir respeito você tem 3 opções:");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, " 1º - Matar 5 jogadores. (Obs.: Você precisa ter um bom motivo para não ser preso por isso.)");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, " 2º - Ganhar eventos na cidade.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, " 3º - Adquirir 3 XPoints.");
			SendClientMessage(playerid, COLOR_YELLOW,"Para avançar, pressione Num Lock 6; Para voltar, Num Lock 4.");
			ClearPlayerChat(playerid, 1);
		}
		case 19: {
		    SetPlayerCameraPos(playerid,1360.3552,-1280.2531,14.8829);
 			SetPlayerCameraLookAt(playerid,1374.3552,-1278.4530,13.8829);
		    SetPlayerPos(playerid,1360.3552,-1280.2531,54.8829);

 			//--//
 			ClearPlayerChat(playerid, 2);
	        SendClientMessage(playerid, COLOR_YELLOW,"-=- Armas -=-");
		    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Esta é a loja de armas, um lugar onde você pode comprar armas e munição.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Você pode adquirir armas aqui ou negociando com algum vendedor ambulante.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Algumas profissões já possuem armas, que são necessárias para que o jogador trabalhe com sucesso.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Quando você comprar armas, estas ficarão com você até que você gaste toda a munição.");
            SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Armas Running aqui não são permitidas, somente Walking, isso porquê ninguém deve");
            SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "ficar correndo e atirando no meio de guerras, pois isso está totalmente fora da realidade.");
			SendClientMessage(playerid, COLOR_YELLOW,"Para avançar, pressione Num Lock 6; Para voltar, Num Lock 4.");
			ClearPlayerChat(playerid, 2);
		}
		case 20: {
	        //--//
		    ClearPlayerChat(playerid, 2);
	        SendClientMessage(playerid, COLOR_YELLOW,"-=- Vida -=-");
		    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "O limite de vida aqui não é como em todos os servidores, pois isso serve");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "para interpretar melhor a realidade, afinal, ninguém sobrevive inteiramente");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "ao levar 2 ou 3 tiros, portanto, é bom você tomar mais cuidado aqui...");
			SendClientMessage(playerid, COLOR_YELLOW,"Para avançar, pressione Num Lock 6; Para voltar, Num Lock 4.");
			ClearPlayerChat(playerid, 2);
   		}
		case 21: {
		    SetPlayerCameraPos(playerid,1853.6481,-1444.8663,35.9219);
	        SetPlayerCameraLookAt(playerid,1701.5076,-1643.4946,44.3978);
			SetPlayerPos(playerid,1823.6481,-1444.8663,43.9219);
	        //--//
		    ClearPlayerChat(playerid, 3);
	        SendClientMessage(playerid, COLOR_YELLOW,"-=- Fim do tutorial -=-");
		    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Agora você possui noções básicas sobre o RPG. Use estas informações quando possível.");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Agora você terá que continuar vivendo a sua vida virtual. Boa sorte!");
			SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Para sair deste tutorial dê um clique com o mouse ou aperte Ctrl.");
			SendClientMessage(playerid, COLOR_YELLOW, "Virtual Life RPG, mais do que um simples RPG, uma vida virtual.");
			SendClientMessage(playerid, COLOR_YELLOW,"Para sair do tutorial aperte CTRL ou Enter.");
			ClearPlayerChat(playerid, 2);
   		}
	}
	return 1;
}
public LocalAutoEscola(playerid){
    if(pStats[playerid][HistoriaFeita] == 1 && pStats[playerid][Prof] == DESEMPREGADO && pStats[playerid][HabTerrestre] == 0){
		SendClientMessage(playerid, COLOR_WHITE, "O radar informa aonde você possa conseguir uma profissão e possa começar a trabalhar.");
		CheckpointStatus[playerid] = AGENCIA;
		SetPlayerCheckpoint(playerid, 1310.4824,-1368.2488,13.5471, 3.0);
		SetTimerEx("GostariaTaxi",3000,0,"d",playerid);
	}
}
public GostariaTaxi(playerid){
 	if(TemProfissao(TAXISTA) || TemProfissao(MOTO_TAXISTA)){
 	    SendClientMessage(playerid, COLOR_TAXISTA, "[Aeroporto] Olá senhor temos taxistas nas redondezas, gostaria de um táxi?");
	 	SendClientMessage(playerid, COLOR_TAXISTA, "[Aeroporto] /sim ou /nao.");
		AeroOfereceuTaxi[playerid] = 1;
		SetTimerEx("ZerarOferecerTaxi",10000,0,"d",playerid);
	}
	else if(TemProfissao(MOTORISTA_DE_ONIBUS)){
     	for(new i=0; i<MAX_SLOTS; i++){
	    	if(pStats[i][Prof] == MOTORISTA_DE_ONIBUS){
				SendClientMessage(i, COLOR_MOTORISTA_DE_ONIBUS, "[Companhia de Transportes] Não esqueça o Aeroporto pode ter passageiros passe lá.");
			}
		}
	}
}
public ZerarOferecerTaxi(playerid){
	AeroOfereceuTaxi[playerid] = 0;
}
public Viciado(playerid){
	new Float:X,Float:Y,Float:Z;
	if(IsPlayerConnected(playerid) && pStats[playerid][VicioDrogas] == 1 && Logado[playerid] == 1){
	    if(TempoVicio[playerid] <= 0){
			ApplyAnimCrack(playerid);
			SetPlayerWeather(playerid, 21);
			SendClientMessage(playerid, COLOR_WHITE, "Tsc Tsc, porque não se cuida? Você está viciado nas drogas, deu pra ver aonde um trago chega?");
			SendClientMessage(playerid, COLOR_WHITE, "Se não quiser tratamento seja forte, não use drogas e espere você se desintoxicar.");
			SendClientMessage(playerid, COLOR_TRAFICANTE, "Besteira mano, tá fraco é? Vem aqui no Beco pegar o bagulho, tu tá muito pra baixo.");
			SetTimerEx("PararWeather",25000,0,"d",playerid);
			SetTimerEx("LimparAnim",13000,0,"d",playerid);
 			QtDrog[playerid]++;
			if(QtDrog[playerid] >= 4){
			    pStats[playerid][VicioDrogas] = 0;
				SendPlayerMessageToPlayer( playerid, playerid, "Tá bom, esqueça as drogas, eu sou forte, não vou estragar minha vida por causa disso!");
				TempoVicio[playerid] = 0;
				QtDrog[playerid] = 0;
				KillTimer(TimerViciado[playerid]);
			}
			else{
				TempoVicio[playerid] = random(30) + random(random(20)) + 40;
				GetPlayerPos(playerid, X, Y, Z);
				new pck = CreatePickup(1241, 2, X, Y, Z);
				SetTimerEx("DeletePickup", 1500, 0, "d", pck);
			}
			SetTimerEx("CheckDrogas", 600000, 0, "d", playerid);
		}
	    else
		{
			TempoVicio[playerid]--;
		}
	}
}
public CheckDrogas(playerid){
	if(TempoVicio[playerid] <= 0){
	    pStats[playerid][VicioDrogas] = 0;
		SendPlayerMessageToPlayer( playerid, playerid, "Tá bom, esqueça as drogas, eu sou forte, não vou estragar minha vida por causa disso!");
		TempoVicio[playerid] = 0;
		QtDrog[playerid] = 0;
		KillTimer(TimerViciado[playerid]);
	}
}
public DeletePickup(pickupid) DestroyPickup(pickupid);
public DrogasPlant(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
		CocainaMao[playerid]--;
		MaconhaMao[playerid]--;
		HeroinaMao[playerid]--;
		PlantandoDrogas[playerid] = 0;
		if(DrogasPlantadas[GetPlayerVehicleID(playerid)] < 1) AcrescentarXpoints(playerid,1);
		DrogasPlantadas[GetPlayerVehicleID(playerid)]++;
		SetPlayerControl(playerid,1);
		SendClientMessage(playerid, COLOR_TRAFICANTE, "Drogas plantadas com sucesso!");
		new str[128];
		format(str,sizeof(str),"Esse veiculo está com %d drogas plantadas agora!",DrogasPlantadas[GetPlayerVehicleID(playerid)]);
		SendClientMessage(playerid, COLOR_WHITE, str);
		RemovePlayerFromVehicle(playerid);
	}
}

public LiberadoParaPorte(playerid){
	ImpossivelTirarPorte[playerid] = 0;
}
public TirandoPorte(playerid){
	PorteTeste[playerid] = 1;
	SendClientMessage(playerid, COLOR_DELEGADO, "[Escrivão] Está ciente, que o uso indevido de armas poderá acarretar problemas a você?");
	SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Responda: Sim ou Não.");
}
public TirandoPorte2(playerid){
	PorteTeste2[playerid] = 1;
	SendClientMessage(playerid, COLOR_DELEGADO, "[Escrivão] O uso de armas de Categoria 2, é restrito a pessoas de níveis maiores. Contanto as regras");
	SendClientMessage(playerid, COLOR_DELEGADO, "[Escrivão] Continuam as mesmas. Pergunta: Você deve atirar em um policial se ele atirar em você?");
	SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Responda: Sim ou Não.");
}

public DriveThru(){
    for(new i = 0; i < MAX_SLOTS; i ++){
        if(IsPlayerInAnyVehicle(i)){
		    if(MenuExibido[i] == 0) {
				for(new j = 0; j < sizeof(InDrive); j ++){
				    new Float:dist;
				    dist = GetPlayerDistanceToPointEx(i, InDrive[j][0], InDrive[j][1], InDrive[j][2]);
				    if(dist < 5){
						if(j < 2){
							TextDrawSetString(TDDriveThru[i], "~g~Bem-vindo ~w~ao Drive-Thru da ~r~Cluckin Bell, ~w~faca seu pedido");
					        SetPlayerControl(i, false);
					        TextDrawShowForPlayer(i, TDDriveThru[i]);
					        MenuExibido[i] = 1;
					        ShowMenuForPlayer(CluckinBell, i);
					    } else {
							TextDrawSetString(TDDriveThru[i], "~g~Bem-vindo ~w~ao Drive-Thru da ~r~Burger Shot, ~w~faca seu pedido");
					        SetPlayerControl(i, false);
					        TextDrawShowForPlayer(i, TDDriveThru[i]);
					        MenuExibido[i] = 1;
					        ShowMenuForPlayer(BurgerShot, i);
       					}
					}
				}
			}
		}
	}
}

public DriveThruLivre(playerid)
{
	MenuExibido[playerid] = 0;
}

public Pescando(playerid){
	if(PlayerArea[playerid] != AreaPesca)
	{
	    SendClientMessage(playerid,COLOR_GRAY, "Pesca cancelada por você ter saído da área de pesca...");
	    return 1;
	}
	if(PescaInProgress[playerid] == 1){
		new rand = random(100);
		if(rand <= 78) {
	 	    new x = random(12);
		    new kg = random(8) + 1;
		    new str[128];
		    format(str,sizeof(str),"Você pescou um(a) %s de %d KG, esse peixe vale $%d cada KG",PeixesPesca[x][PeixeNome],kg,PeixesPesca[x][PeixeValor]);
		    SendClientMessage(playerid, COLOR_YELLOW, str);
			pStats[playerid][Pesca] += PeixesPesca[x][PeixeValor] * kg;
			pStats[playerid][Iscas]--;
			PescaInProgress[playerid] = 0;
			SendClientMessage(playerid,COLOR_GREEN,"Sua rede voltou. Se quiser continuar pescando, fique a vontade.");
			SendClientMessage(playerid,COLOR_GREEN,"Se não, vá a cooperativa de pescas e venda seu pescado com /venderpesca.");
			SendClientMessage(playerid,COLOR_GREEN,"E ainda você pode levar o seu pescado se quiser, basta ir na cooperativa e digitar /levarpesca");
			new string[128];
			format(string,sizeof(string),"Agora seu pescado vale $%d.",pStats[playerid][Pesca]);
			SendClientMessage(playerid, COLOR_PESCADOR, string);
			Pescado[playerid]++;
			if(Pescado[playerid] >= 4 && pStats[playerid][Prof] == PESCADOR){
			    SendClientMessage(playerid, COLOR_GREEN, "Você recebeu um Xpoint por pescar.");
				AcrescentarXpoints(playerid,1);
				Pescado[playerid] = 0;
			}
			return 1;
		}
		else {
		 	new grana;
		 	new string[128];
			grana = minrand(40,120);
			format(string, sizeof(string), "Infelizmente você não pescou nada! E gastou iscas e mantimentos. O prejuízo foi de $%d",grana);
		    SendClientMessage(playerid, COLOR_PESCADOR, string);
			SendClientMessage(playerid,COLOR_PESCADOR,"Mas você pode continuar pescando se quiser!");
			AddPlayerMoney(playerid, -grana, -1);
			pStats[playerid][Iscas]--;
			PescaInProgress[playerid] = 0;
			AcrescentarLucro(16,grana);
			return 1;
		}
	}
	return 1;
}
public ZerarResultadoMostrado() MostrouResultado = 0;
public ZerarSalarioEntregue() SalarioEntregue = 0;
public ZerarAnuncioPrevisao() PrevisaoAnunciada = 0;
public Fazenda(playerid){
	if(FazendaInProgress[playerid] == 1){
		new rand = random(100);
		if(rand <= 60) {
			QtMilho[playerid]++;
			FazendaInProgress[playerid] = 0;
			SendClientMessage(playerid,COLOR_AGRICULTOR,"ô Zé! A colheita e o ensacamento deu tudo certin. Se ocê quiser continuar plantando, pode ficar.");
			SendClientMessage(playerid,COLOR_GREEN,"Caso adverso, vá na venda do milho e venda ele!");
			Milhinho[playerid]++;
			if(Milhinho[playerid] >= 4){
			    Milhinho[playerid] = 0;
			    AcrescentarXpoints(playerid,1);
			}
		} else {
		 	new grana;
		 	new string[128];
			grana = minrand(250,600);
			if(weatherprevisao == 8 || weatherprevisao == 16) grana -= 150;
			format(string, sizeof(string), "Infelizmente a colheita não deu certo! O prejuízo foi de $%d",grana);
		    SendClientMessage(playerid, COLOR_AGRICULTOR, string);
			SendClientMessage(playerid,COLOR_AGRICULTOR,"Mas ocê pode continuar plantando se quiser");
			AddPlayerMoney(playerid, -grana, -1);
			FazendaInProgress[playerid] = 0;
			return 1;
		}
	}
	return 1;
}
public ChecandoDrogas(playerid)
{
 	new string[128];
	new grana = (random(13) + 8) * 100;
	new rand = random(100);
	if(rand <= 80) {
		SendClientMessage(playerid,COLOR_CAMINHONEIRO,"Aí cara tá tudo ok nós vamo pagar agora não vacila na nossa tá entendido?");
		format(string, sizeof(string),"Taí o teu pagamento: $%d,00 --- AGORA RALA!",grana);
		SendClientMessage(playerid,COLOR_CAMINHONEIRO,string);
		Pay(playerid, grana);
 	}
 	else {
		SendClientMessage(playerid,COLOR_AGRICULTOR,"Deu azar troxa! Rala daqui se não tu morre! NÃO VAMOS PAGAR!");
		return 1;
	}
	return 1;
}
public CarregamentoGeral(playerid){
	CheckpointStatus[playerid] = CARREGAMENTO;
	GeralCar[playerid] = 1;
	new CargaGer = random(32);
	DisablePlayerCheckpoint(playerid);
	SetPlayerCheckpoint(playerid,MaterialGeral[CargaGer][0],MaterialGeral[CargaGer][1],MaterialGeral[CargaGer][2],5.0);
    SendClientMessage(playerid,COLOR_CAMINHONEIRO,"O Trailer foi Carregado, vá até o Local marcado no RADAR, para descarregar.");
 	SetPlayerControl(playerid,1);
	return 1;
}
public CarregamentoGas(playerid){
    DisablePlayerCheckpoint(playerid);
    new CargaGas = random(16);
    SetPlayerCheckpoint(playerid,GasCami[CargaGas][0],GasCami[CargaGas][1],GasCami[CargaGas][2],5.0);
  	CheckpointStatus[playerid] = CARREGAMENTO;
    SendClientMessage(playerid,COLOR_CAMINHONEIRO,"O Trailer de Gás está carregado vá deixar no local do Mapa.");
    SetPlayerControl(playerid,1);
	return 1;
}
public PassandoCamuflagem(playerid)
{
	KillTimer(TimerCamuflagem[playerid]);
	pStats[playerid][Camuflagem]--;
	if(pStats[playerid][Camuflagem] <= 0)
	{
		if(IsPlayerTransparent(playerid))
		{
			if(IsPlayerInAnyVehicle(playerid) && vStats[GetPlayerVehicleID(playerid)][Fume] == 1)
			{
			    SetPlayerTransparent(playerid, 1);
			}
			else
			{
			    SetPlayerTransparent(playerid, 0);
			}
		}
	}
	else
	{
	    new string[128];
	    format(string, sizeof string, "Mais um minuto de camuflagem passou, restantes: %d", pStats[playerid][Camuflagem]);
	    SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS, string);
	    TimerCamuflagem[playerid] = SetTimerEx("PassandoCamuflagem", 60000, 0, "d", playerid);
	}
}
public SubmissoesCarros(playerid){
	if(EntregandoCimento[playerid] == 1){
		SetPlayerControl(playerid,1);
		GameTextForPlayer(playerid,"~w~descarregamento ~n~concluido",3000,1);
		SendClientMessage(playerid, COLOR_PEDREIRA, "Descarregando concluído.");
		SendClientMessage(playerid, COLOR_PEDREIRA, "Agora deixe o carro de cimento na Administração da Construção s/a.");
		SetPlayerCheckpoint(playerid,2413.6775,-2470.0376,13.1957,5.0);
		CheckpointStatus[playerid] = CIMENTO_ENTREGA2;
	}
	if(ArrumandoPostes[playerid] >= 1){
 		ArrumandoPostes[playerid]--;
		SetPlayerControl(playerid,1);
		if(ArrumandoPostes[playerid] > 0)
		{
			new randcp = random(17);
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,PosteDefeito[randcp][0],PosteDefeito[randcp][1],PosteDefeito[randcp][2],4.0);
			CheckpointStatus[playerid] = CONSERTANDO_POSTE;
	    	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid,"~y~postes ~n~consertados",3000,1);
			SendClientMessage(playerid, COLOR_MECANICO, "Conserto terminado, todos os imóveis dessa rua estão funcionando.");
			SendClientMessage(playerid, COLOR_MECANICO, "Agora vá no próximo Poste de Energia.");
		}
		else {
			DisablePlayerCheckpoint(playerid);
			SendClientMessage(playerid, COLOR_MECANICO, "Postes consertados, entregue o veículo na estação para receber seu dinheiro.");
			SetPlayerCheckpoint(playerid,2674.9082,-1968.9242,13.1448,4.0);
			CheckpointStatus[playerid] = CONSERTANDO_POSTE2;
		}
	}
	if(PegandoCorpos[playerid] == 2){
		GameTextForPlayer(playerid,"~r~Ok",3000,1);
		SendClientMessage(playerid, COLOR_TURQUOISE, "Tudo certo, vá no outro hospital pegar o resto e logo depois volte no cemitério.");
		SetPlayerControl(playerid,1);
		SetPlayerCheckpoint(playerid,2024.8684,-1412.7384,16.5553,5.0);
		CheckpointStatus[playerid] = IML_HOSPITAL;
	}
	if(PegandoCorpos[playerid] == 3){
		GameTextForPlayer(playerid,"~r~Ok",3000,1);
		SetPlayerControl(playerid,1);
       	SendClientMessage(playerid, COLOR_TURQUOISE, "[Cemitério] Beleza, volte aqui para enterrá-los.");
		SetPlayerCheckpoint(playerid,940.2975,-1087.1194,23.8630,4.0);
		CheckpointStatus[playerid] = CEMITERIO;
	}
}
public ContrabandoSpawnCar(playerid){
    SetPlayerCheckpoint(playerid,2213.1704,-1000.9013,63.8633,3.0);
	CheckpointStatus[playerid] = CONTRABANDO_CARRO2;
	SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Pegue algum desses carros!");
	PodePegar[playerid] = 1;
}
public LeiteA(playerid){
	QtLeite[playerid]++;
	LeiteInProgress[playerid] = 0;
	ApplyAnimation( playerid,"ped", "fucku", 4.1, 0, 1, 1, 1, 1 );
	SendClientMessage(playerid,COLOR_AGRICULTOR,"Cê tirô todo o leite da vaca. Vá vender lá na fazenda cumpade. Se quise pode continua pegando nas teta.");
	SendClientMessage(playerid,COLOR_AGRICULTOR,"Caso adverso, vá até a área de venda do milho/leite e o venda.");
	Leitinho[playerid]++;
	if(Leitinho[playerid] >= 4){
		Leitinho[playerid] = 0;
	    AcrescentarXpoints(playerid,1);
	}
}
public VacaCheia(playerid){
	VacaVazia[playerid] = 0;
	SendClientMessage(playerid, COLOR_AGRICULTOR, "[FAZENDA] Ei sÔ, as vaca taum cheia de leite, va la tirar...");
}
public SemCamisinha(playerid){
	new c = random(5);
	if(c == 0 || c == 1 || c == 2 || c == 3){
    	return 0;
	} else if(c == 4){
    	SendClientMessage(playerid, COLOR_LIGHT_RED, "Quem avisa amigo é! Você agora pegou AIDS. É bom não transar com ninguém e procurar um paramédico.");
		SetPlayerWeather(playerid, 45);
		ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
        pStats[playerid][Doenca] = 2;
     	KillTimer(SemCamisa[playerid]);
		TimerDoenca[playerid][1] = SetTimerEx("EfeitoDoenca", 20000, 0, "d", playerid);
 	}
	return 1;
}
public JaEra(playerid,plid){
    SendClientMessage(playerid, COLOR_WHITE, "Oh Oh, AR.. Isso!!");
    SendClientMessage(plid, COLOR_WHITE, "Oh Oh, AR.. Isso!!");
    SetTimerEx("AnimTransa1",3000,0,"dd",playerid,plid);
	return 1;
}
public AnimTransa1(playerid,plid){
    SendClientMessage(playerid, COLOR_WHITE, "Ar! É AGORA!!! AHHHH....");
    SendClientMessage(plid, COLOR_WHITE, "Ar! É AGORA!!! AHHHH....");
    SetTimerEx("AnimTransa2",3000,0,"dd",playerid,plid);
	return 1;
}
public AnimTransa2(playerid,plid){
    SendClientMessage(playerid, COLOR_WHITE, "OH MEU DEUS! OH MEU DEUS");
    SendClientMessage(plid, COLOR_WHITE, "OH MEU DEUS! OH MEU DEUS");
    SetTimerEx("AnimTransa3",3000,0,"dd",playerid,plid);
	return 1;
}
public AnimTransa3(playerid,plid){
    SendClientMessage(playerid, COLOR_WHITE, "NÃO PARA, NÃO PARA!!");
    SendClientMessage(plid, COLOR_WHITE, "NÃO PARA, NÃO PARA!!");
    SetTimerEx("AnimTransa4",3000,0,"dd",playerid,plid);
	return 1;
}
public AnimTransa4(playerid,plid){
    SendClientMessage(playerid, COLOR_WHITE, "MAIS, MAIS, OH OMG OMG");
    SendClientMessage(plid, COLOR_WHITE, "MAIS, MAIS, OH OMG OMG");
    SetTimerEx("AnimTransa5",3000,0,"dd",playerid,plid);
	return 1;
}
public AnimTransa5(playerid,plid){
    SendClientMessage(playerid, COLOR_WHITE, "OH OH, Ahhhhhh...");
    SendClientMessage(plid, COLOR_WHITE, "OH OH, Ahhhhhh...");
    SetTimerEx("AnimTransa6",3000,0,"dd",playerid,plid);
	return 1;
}
public AnimTransa6(playerid,plid){
    SendClientMessage(playerid, COLOR_WHITE, "Você teve um orgasmo, e o sexo acabou. Você pode se retirar pela porta.");
    SendClientMessage(plid, COLOR_WHITE, "Seu Cliente gozou e por isso o sexo acabou, vá até a porta para receber o pagamento.");
	Metendo[playerid] = 0;
	return 1;
}
public Prostituir(playerid)
{
	ApplyAnimation(playerid,"benchpress","gym_bp_up_B",4.1,0,1,1,1,1);
	SendClientMessage(playerid, COLOR_PROSTITUTA, "Para mudar de posição digite /mudarposicao");
}
public Strip(playerid)
{
	ApplyAnimation(playerid,"STRIP","strip_A",4.1,0,1,1,1,10);
	SetTimerEx("Strip3",2000,0,"d",playerid);
}
public Strip3(playerid)
{
	ApplyAnimation(playerid,"LAPDAN3","LAPDAN_D",4.1,0,1,1,1,1);
	ApplyAnimation(playerid,"LAPDAN3","LAPDAN_D",4.1,0,1,1,1,1);
	SetTimerEx("Strip4",30000,0,"d",playerid);
}
public Strip4(playerid)
{
	SetPlayerControl(playerid,1);
	SendClientMessage(playerid, COLOR_PROSTITUTA, "Acabou o strip-tease.");
}
public IniciandoSex(playerid,plid){
	if(Sex2a2[playerid] == plid && Sex2a2[plid] == playerid){
	    SetPlayerControl(playerid, 0);
	    SetPlayerControl(plid, 0);
		ApplyAnimation(plid,"SNM","SPANKING_IDLEW",4.1,0,1,1,1,1);//de quatro, prostituta
		ApplyAnimation(playerid,"SNM","SPANKING_IDLEP",4.1,0,1,1,1,1); //colocando dick, pagador
		SendPlayerMessageToPlayer(playerid, plid, "Vou começar baby, aguenta ou chora!");
		SendPlayerMessageToPlayer(playerid, playerid, "Vou começar baby, aguenta ou chora!");
		SetTimerEx("IniciandoSex2",2000,0,"dd",playerid,plid);
	}
}
public IniciandoSex2(playerid,plid){
	if(Sex2a2[playerid] == plid && Sex2a2[plid] == playerid){
		if(LevouDick[plid] < 10){
			ApplyAnimation(plid,"SNM","SPANKINGW",4.1,0,1,1,1,1);//de quatro, prostituta
			ApplyAnimation(playerid,"SNM","SPANKEDP",4.1,0,1,1,1,1);//levando dick a cada 0
			LevouDick[plid] = LevouDick[plid] + 1;
			if(LevouDick[plid] == 1){
		    	SendPlayerMessageToPlayer(plid, playerid, "Oh Oh, AR.. Isso!!  Não para! Nãaaaaaaaaaaao");
	    		SendPlayerMessageToPlayer(plid, plid, "Oh Oh, AR.. Isso!! Não para! Nãaaaaaaaaaaao");
			} else if(LevouDick[plid] == 3){
			    SendPlayerMessageToPlayer(plid, playerid, "Ar! É AGORA!!! AHHHH....");
			    SendPlayerMessageToPlayer(plid, plid, "Ar! É AGORA!!! AHHHH....");
			    SendPlayerMessageToPlayer(playerid, plid, "Toma toma!!! Toma, uhhhh");
			    SendPlayerMessageToPlayer(playerid, playerid, "Toma toma!!! Toma, uhhhh");
			} else if(LevouDick[plid] == 6){
	    		SendPlayerMessageToPlayer(plid, playerid, "OH MEU DEUS! OH MEU DEUS");
	    		SendPlayerMessageToPlayer(plid, plid, "OH MEU DEUS! OH MEU DEUS");
			}
			SetTimerEx("IniciandoSex2",1000,0,"dd",playerid,plid);
		} else {
			LevouDick[plid] = 0;
			SetTimerEx("IniciandoSex3",500,0,"dd",playerid,plid);
		}
	}
}
public IniciandoSex3(playerid,plid){
	if(Sex2a2[playerid] == plid && Sex2a2[plid] == playerid){
		ApplyAnimation(plid,"SNM","SPANKING_IDLEW",4.1,0,1,1,1,1);//de quatro, prostituta
	 	ApplyAnimation(playerid,"SNM","SPANKINGP",4.1,0,1,1,1,1);//Palmadinha na bunda, pagador
		SendPlayerMessageToPlayer(plid, playerid, "Bate Bate! Dá palmadinha dáaa");
		SendPlayerMessageToPlayer(plid, plid, "Bate Bate! Dá palmadinha dáaa");
		SetTimerEx("IniciandoSex4",3000,0,"dd",playerid,plid);
	}
}
public IniciandoSex4(playerid,plid){
	if(Sex2a2[playerid] == plid && Sex2a2[plid] == playerid){
		SendPlayerMessageToPlayer(playerid, playerid, "Toma vadia, quer mais quer?");
		SendPlayerMessageToPlayer(playerid, plid, "Toma vadia, quer mais quer?");
		ApplyAnimation(playerid,"SNM","SPANKEDW",4.1,0,1,1,1,1);//Xibatada na bunda, pagador
		SetTimerEx("IniciandoSex5",3000,0,"dd",playerid,plid);
	}
}
public IniciandoSex5(playerid,plid){
	if(Sex2a2[playerid] == plid && Sex2a2[plid] == playerid){
	    SendPlayerMessageToPlayer(plid, playerid, "OH OH, Ahhhhhh....");
	    SendPlayerMessageToPlayer(plid, plid, "OH OH, Ahhhhhh....");
	    SendPlayerMessageToPlayer(playerid, plid, "uhhhhhh");
	    SendPlayerMessageToPlayer(playerid, playerid, "uhhhh");
		ApplyAnimation(plid,"SNM","SPANKING_ENDW",4.1,0,1,1,1,1);//cansei., prostituta
		ApplyAnimation(playerid,"SNM","SPANKING_ENDP",4.1,0,1,1,1,1);//Gozou! e cansou, mao na cabeca, pagador
		SetTimerEx("IniciandoSex6",3000,0,"dd",playerid,plid);
	}
}
public IniciandoSex6(playerid,plid){
	if(Sex2a2[plid] == playerid){
    	SendClientMessage(playerid, COLOR_WHITE, "Você teve um orgasmo, e o sexo acabou. Você pode se retirar pela porta.");
    	SendClientMessage(plid, COLOR_WHITE, "O seu parceiro teve um orgamos o sexo acabou!");
	    SetPlayerControl(playerid, 1);
	    SetPlayerControl(plid, 1);
	}
	if(Transacama[playerid] == 1){
	    SendClientMessage(playerid, COLOR_WHITE, "Você teve um orgasmo, e o sexo acabou. Você pode se retirar pela porta.");
	    SendClientMessage(plid, COLOR_WHITE, "Seu Cliente gozou e por isso o sexo acabou, vá até a porta para receber o pagamento.");
	    SetPlayerControl(playerid, 1);
	    SetPlayerControl(plid, 1);
	    Transacama[playerid] = 0;
	}
}
public minrand(min, max)
{
	return random(max - min) + min;
}
public IsStringAName(string[])
{
	for(new i = 0; i <= MAX_SLOTS; i++)
	{
		if(IsPlayerConnected(i))
		{
			new testname[MAX_PLAYER_NAME];
			GetPlayerName(i, testname, sizeof(testname));
			if(compare(testname, string))
			{
				return 1;
			}
		}
	}
	return 0;
}

public TirarMetro(playerid){
	if(InStation[playerid] == 1){
		InStation[playerid] = 0;
	}
}

public Subway()
{
	for(new i = 0; i < MAX_SLOTS; i++)
	{
		if(Metro[i] == 0)
		{
		    if(IsPlayerConnected(i) && Logado[i] == 1){
		    	new Float:x,Float:y,Float:z;
				GetPlayerPos(i, x, y, z);
				for(new s = 0; s < sizeof Stations; s++)
				{
					if ( ( x - Stations[s][Station_PosX] ) * ( x - Stations[s][Station_PosX] ) + ( y - Stations[s][Station_PosY] ) * ( y - Stations[s][Station_PosY] ) + ( z - Stations[s][Station_PosZ] ) * ( z - Stations[s][Station_PosZ] ) < 15 )
					{
					    if(InStation[i] == 0)
					    {
						   	new str[128];
						   	SendClientMessage(i, COLOR_JUIZ, " ");
						   	SendClientMessage(i, COLOR_JUIZ, " ");
						   	SendClientMessage(i, COLOR_JUIZ, "[METRÔ] Bem-vindo, que tal chegar a um ponto de San Andreas rapidamente?");
						   	format(str,sizeof str, "Se quiser, você só precisa comprar uma passagem por $%d,00 dólares, isso mesmo, temos destino à %d estações, aproveite!", SUBWAY_PRICE, sizeof Stations);
							SendClientMessage(i, COLOR_WHITE, str);
							SendClientMessage(i, COLOR_WHITE, "Digite /comprarpassagem para comprar uma passagem...");
							InStation[i] = 1;
							SetTimerEx("TirarMetro",4000,0,"d",i);
						}
						break;
					}
				}
			}
		}
	}
	SubwayProgress--;
 	if(SubwayProgress <= 0)
    {
    	new str[128];
     	SubwayStation = (SubwayStation + 1) % sizeof Stations;
      	SubwayProgress = Stations[SubwayStation][SecondsArrival];
		format(str,sizeof str,"[METRÔ] Acabamos de chegar na estação \"%s\", use /descermetro se quiser descer aqui",Stations[SubwayStation][Station_Name]);
		SendClientMessageSubway(COLOR_JUIZ,str);
		format(str,sizeof str,"~g~estacao atual:~n~~w~%s",Stations[SubwayStation][Station_Name]);
		GameTextForSubway(str,Stations[SubwayStation][SecondsArrival]*1000,1);
	}
}

public	AcusacaoCrime(playerid, reportado[], vitima[] , motivo[], estrelas, advogado, fianca, checkpos){
	new eleviu[128];
	new tevevitima[128];
	new vfianca[128];
	new nestrelas[128];
	new camufla[128];
	new string[128];
	new cancelchamado = 0;
	if(IsPlayerConnected(playerid)){
		if(compare(reportado, "NONE")){
			format(eleviu, sizeof(eleviu), "Desconhecido");
		} else {
			if(IsPlayerTransparent(playerid) == 0){
				strmid(Crime[playerid][Reportado] , reportado, 0, strlen(reportado), 255);
				format(eleviu, sizeof(eleviu), "%s", reportado);
			}
		}
		if(compare(vitima, "NONE")){
			format(tevevitima, sizeof(tevevitima), "Ninguém");
		} else {
			if(IsPlayerTransparent(playerid) == 0){
				strmid(Crime[playerid][Vitima] , vitima, 0, strlen(vitima), 255);
				format(tevevitima, sizeof(tevevitima), "%s", vitima);
			}
		}
		if(fianca == 0){
			format(vfianca, sizeof(vfianca), "Negada");
		} else {
			if(IsPlayerTransparent(playerid) == 0){
				Crime[playerid][FiancaEstrelas] = fianca;
				format(vfianca, sizeof(vfianca), "%d", fianca);
			}
		}
		if(estrelas == 0){
			format(nestrelas, sizeof(nestrelas), "Nenhuma");
		} else {
		    if(IsPlayerTransparent(playerid) == 0){
				format(nestrelas, sizeof(nestrelas), "%d", estrelas);
				if(GetPlayerWantedLevel(playerid) + estrelas > 6){
					SetPlayerWantedLevel(playerid, 6);
				} else {
					SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + estrelas);
				}
			}
		}
		if(IsPlayerTransparent(playerid)){
			format(camufla, sizeof(camufla), "Camuflado");
		} else {
			format(camufla, sizeof(camufla), "%d", PlayerName(playerid));
			strmid(Crime[playerid][Motivo], motivo, 0, strlen(motivo), 255);
			Crime[playerid][Acusado] = playerid;
		}
		if(pStats[playerid][HorasPreso] <= 0){
			if(advogado == 1 && GetPlayerWantedLevel(playerid) > 0 && pStats[playerid][Preso] == 0){
			    if(TemProfissao(ADVOGADO)){
			   		SendClientMessage(playerid, COLOR_WHITE, " Você foi acusado de um crime fiançável!");
					SendClientMessage(playerid, COLOR_ADVOGADO, "[ESCRITORIO] Você estava com a ficha criminal limpa, podemos tirar as estrelas de procurado");
					format(string, sizeof(string), "[ESCRITORIO] Caso esteja interessado, cobraremos: $%d. Para tirar seu level de procurado. Nos procure( /advogado ) !",fianca);
					SendClientMessage(playerid, COLOR_ADVOGADO, string);
			   		for(new i=0; i<MAX_SLOTS; i++){
			     		if(IsPlayerConnected(i) && pStats[i][Prof] == ADVOGADO){
							format(string, sizeof(string), "[ESCRITORIO] %s foi acusado de %s, por %s e não está respondendo nenhum mandato de prisão.", PlayerName(playerid), motivo);
							SendClientMessage(i, COLOR_ADVOGADO, string);
							format(string, sizeof(string), "[ESCRITORIO]  Poderá ser desprocurado com fiança de $%d, ofereça seus serviços.",vfianca);
							SendClientMessage(i, COLOR_ADVOGADO, string);
						}
					}
				}
			}
		}
		if((strcmp("Alarme Casa", reportado, true, strlen(reportado)) == 0) && (strlen(reportado) == strlen("Alarme Casa"))){
			new alarme = pckStats[PickupEntradaCasa[playerid]][Alarme];
			if(alarme == 1 && IsPlayerTransparent(playerid) == 0){
				format(camufla, sizeof(camufla), "O Alarme não identificou");
			}
			format(LastChamadaDenuncia, sizeof(LastChamadaDenuncia), "[Crime: %s] [Casa de: %s] [Reportado: %s] [Suspeito: %s]", motivo, vitima, eleviu, camufla);
			SendClientMessage(playerid, COLOR_GRAY, "Você foi pego pelo alarme, a policia foi avisada, FUJA ENQUANTO HÁ TEMPO!!!!");
			format(string,sizeof(string),"[CENTRAL] Viaturas. [Crime: %s] [Local: Casa de %s] [Reportado: %s] [Suspeito: %s].", motivo, vitima, eleviu, camufla);
			SendClientMessagePolicia(COLOR_CENTRAL, string);
			SendClientMessagePolicia(COLOR_CENTRAL,"Para checar a denúncia do chamado, \"/checar.\"");
			SendClientMessagePolicia(COLOR_CENTRAL," ");
			SetPlayerVirtualWorld(playerid,0);
	    	SetPlayerInterior(playerid,0);
	    	SetPlayerPos(playerid,EntradaCasa[playerid][0]+0.7,EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
			NaCasa[playerid] = 0;
			cancelchamado = 1;
		}
		if((strcmp("Alarme do Banco", reportado, true, strlen(reportado)) == 0) && (strlen(reportado) == strlen("Alarme do Banco"))){
			format(string,sizeof(string),"[CENTRAL] Viaturas. [Crime: %s] [Suspeito: %s] [Testemunha: %s]", motivo, camufla, eleviu);
			SendClientMessagePolicia(COLOR_CENTRAL, string);
			SendClientMessagePolicia(COLOR_CENTRAL, "[CENTRAL] Há indícios que o suspeito ainda está lá. Dirija-se imediatamente!");
		}
		if((strcmp("/190", reportado, true, strlen(reportado)) == 0) && (strlen(reportado) == strlen("/190"))){
		    for(new i=0; i<MAX_SLOTS; i++){
		        if(pStats[i][Prof] == COP_MILITAR || pStats[i][Prof] == DELEGADO || pStats[i][Prof] == COP_RODOVIARIO || pStats[i][Prof] == COP_SWAT){
					new zone[28];
		            GetPlayer2DZone(IsStringAName(reportado), zone, 28);
					GetPlayerPos(IsStringAName(reportado),CPLocal[i][0],CPLocal[i][1],CPLocal[i][2]);
					if(IsPolice(GetPlayerVehicleID(i))){
						SendClientMessage(i, COLOR_CENTRAL," ");
						SendClientMessage(i, COLOR_CENTRAL," ");
						format(string, sizeof(string), "[RADIO COP] Unidades. [Ocorrência: %s] [Acusado: %s] [Possível Vítima: %s] [Local: %s]", LastChamadaDenuncia, PlayerName(playerid), vitima, zone);
						SendClientMessage(i, COLOR_CENTRAL, string);
						SendClientMessage(i, COLOR_CENTRAL,"Para checar a denúncia do chamado, \"/checar.\"");
						SendClientMessage(i, COLOR_CENTRAL," ");
					} else {
						SendClientMessage(i, COLOR_CENTRAL," ");
						SendClientMessage(i, COLOR_CENTRAL," ");
						format(string, sizeof(string), "[WALKTOKIE COP] Oficiais. [Ocorrência: %s] [Acusado: %s] [Possível Vítima: %s] [Local: %s]", LastChamadaDenuncia, PlayerName(playerid), vitima, zone);
						SendClientMessage(i, COLOR_COP_RODOVIARIO, string);
						SendClientMessage(i, COLOR_CENTRAL,"Para checar a denúncia do chamado, \"/checar.\"");
						SendClientMessage(i, COLOR_CENTRAL," ");
					}
				}
			}
		}
		if(checkpos == 1){
		    for(new i=0; i<MAX_SLOTS; i++){
		        if(pStats[i][Prof] == COP_MILITAR || pStats[i][Prof] == DELEGADO || pStats[i][Prof] == COP_RODOVIARIO || pStats[i][Prof] == COP_SWAT){
			    	GetPlayerPos(IsStringAName(reportado),CPLocal[i][0],CPLocal[i][1],CPLocal[i][2]);
      				format(string,sizeof(string),"[CENTRAL] Unidades. [Crime: %s] [Suspeito: %s] [Vítima: %s] [Denunciado por: %s]", motivo, PlayerName(playerid), tevevitima, eleviu);
					SendClientMessagePolicia(COLOR_CENTRAL, string);
					SendClientMessagePolicia(COLOR_CENTRAL, "Para checar a denúncia do chamado, \"/checar.\"");
					SendClientMessagePolicia(COLOR_CENTRAL," ");
					if(estrelas == 0){
						SendClientMessagePolicia(COLOR_CENTRAL, "Ele não foi colocado nos procurados é apenas uma denúncia, precisa checar.");
					} else {
						SendClientMessagePolicia(COLOR_CENTRAL, "O crime foi confirmado, oficial coloque o mesmo /procurar. Apenas 1 oficial");
					}
				}
			}
		} else {
		    if(cancelchamado == 0){
			    for(new i=0; i<MAX_SLOTS; i++){
			        if(pStats[i][Prof] == COP_MILITAR || pStats[i][Prof] == DELEGADO || pStats[i][Prof] == COP_RODOVIARIO || pStats[i][Prof] == COP_SWAT){
	      				format(string,sizeof(string),"[CENTRAL] Unidades. [Crime: %s] [Suspeito: %s] [Vítima: %s] [Denunciado por: %s]",motivo, PlayerName(playerid), tevevitima, eleviu);
						SendClientMessagePolicia(COLOR_CENTRAL, string);
						SendClientMessagePolicia(COLOR_CENTRAL, "Caso tenha a confirmação da ocorrência coloque o mesmo em /procurar.");
					}
				}
			}
		}
	}
}

public Crimes(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new string[128];
		format(string, sizeof(string), "Nenhum");
		strmid(Crime[playerid][Motivo], string, 0, strlen(string), 255);
		format(string, sizeof(string), "Ninguém");
		strmid(Crime[playerid][Acusado], string, 0, strlen(string), 255);
		strmid(Crime[playerid][Vitima], string, 0, strlen(string), 255);
		strmid(Crime[playerid][Reportado], string, 0, strlen(string), 255);
		format(string, sizeof(string), "Não");
		strmid(Crime[playerid][FiancaEstrelas], string, 0, strlen(string), 255);
	}
	return 1;
}

public LigandoPolicia(playerid,plid){
	KillTimer(TimerSequestro[playerid]);
	CelularBloqueado[plid] = 1;
	SendClientMessage(plid, COLOR_GRAY, "Dá pra cá o celular rapá, tá pensando o que?!");
	SendClientMessage(plid, COLOR_ASSALTANTE, "O Sequestrador tomou seu celular, é bom ter ligado para a polícia.");
	SendClientMessage(plid, COLOR_ASSALTANTE, "Você tem que fugir ou esperar que alguém te salve, acho que ele está te levando para o cativeiro.!");
	GameTextForPlayer(plid,"~r~Sequestrado",4000,1);
	TimerSequestro[playerid] = SetTimerEx("LevandoCativeiro",4000,0,"dd",playerid,plid);
}
public LevandoCativeiro(playerid,plid){
    KillTimer(TimerSequestro[playerid]);
	SendClientMessage(playerid, COLOR_LIGHT_RED, "OW, agora leva ele pro cativeiro, vá até o ponto vermelho no radar, não deixe pista, cuidado com a policia...!");
	new cativeiroesc = random(4);
	if(cativeiroesc == 0){
		SetPlayerCheckpoint(playerid, 2434.4404,-1275.3922,24.4948,8.0);
	}
	else if(cativeiroesc == 1){
		SetPlayerCheckpoint(playerid, 1111.4592,-974.1653,42.7656,8.0);
	}
	else if(cativeiroesc == 2){
		SetPlayerCheckpoint(playerid, 646.4202,-509.9894,16.3359,8.0);
	}
	else if(cativeiroesc == 3){
		SetPlayerCheckpoint(playerid, 2472.4346,-963.3296,80.1380,8.0);
	}
	TimerSequestro[playerid] = SetTimerEx("KidnappingFailed",242000,0,"d",playerid,plid);
    CheckpointStatus[playerid] = CATIVEIRO;
	FuiSequestrado[playerid] = plid;
}
public KidnappingFailed(playerid,plid){
    KillTimer(TimerSequestro[playerid]);
	if(Cativeiro[plid] == 0){
    	if(Amarrou[playerid] == 1){
    	    if(Amarrado[plid] == 1){
			    SendClientMessage(playerid, COLOR_ASSASSINO, "Tu tá a muito tempo com esse cara, deixa ele ir! Dá próxima vez faça o serviço mais rápido!");
			    DisablePlayerCheckpoint(playerid);
		    	CheckpointStatus[playerid] = NONE;
				CelularBloqueado[plid] = 0;
				SetPlayerControl(plid,1);
				Sequestro[plid] = 0;
				Cativeiro[plid] = 0;
				EstouComSequestro[playerid] = 0;
			    Amarrado[plid]=0;
				Amarrou[playerid]=0;
				AmarradoInfo[plid][0]=-1;
			    AmarradoInfo[playerid][1]=-1;
			    SendClientMessage(playerid, COLOR_GRAY, "O sequestrador lhe soltou, agradeça a ele, dá próxima tome cuidado, ou contrate seguranças!");
			    GameTextForPlayer(playerid,"~r~sequestro~n~falhado",4000,0);
			}
		}
	}
}
public KidnappingProcess(playerid,plid){
	KillTimer(TimerSequestro[playerid]);
	if(Cativeiro[plid] == 1){
	    new string[128];
		format(string, sizeof(string), "[CENTRAL] Todas as unidades, foi constatado o desaparecimento de %s, suspeita-se que o mesmo foi sequestrado! Busca intensa pelo sequestrador!",PlayerName(plid));
		SendClientMessagePolicia(COLOR_CENTRAL, string);
		format(string, sizeof(string), "[CENTRAL] * Repito * Todas as unidades, foi constatado o desaparecimento de %s, suspeita-se que o mesmo foi sequestrado! Busca intensa pelo sequestrador!",PlayerName(plid));
		SendClientMessagePolicia(COLOR_CENTRAL, string);
		SendClientMessagePolicia(COLOR_CENTRAL,  "[CENTRAL] Prender ou se o suspeito reagir, atirar!");
		format(string, sizeof(string), "* Radio * [CENTRAL] Todas as unidades, foi constatado o desaparecimento de %s, suspeita-se que o mesmo foi sequestrado! Busca intensa pelo sequestrador!",PlayerName(plid));
		SendClientMessage(playerid, COLOR_CENTRAL, string);
		format(string, sizeof(string), "* Radio * [CENTRAL] Todas as unidades, foi constatado o desaparecimento de %s, suspeita-se que o mesmo foi sequestrado! Busca intensa pelo sequestrador!",PlayerName(plid));
		SendClientMessage(plid, COLOR_CENTRAL, string);
		new rand2 = random(4);
		if(rand2 == 1){
			SendClientMessageToAll(COLOR_PINK,"New Paper's Life:");
			SendClientMessageToAll(COLOR_WHITE, "[JORNAL] Nossa equipe foi informada a poucas horas de que %s está desaparecido, suspeita-se de sequestro, a informações que");
			format(string, sizeof(string),"[JORNAL] as viaturas estão se organizando para acabar com o cativeiro.", PlayerName(plid));
			SendClientMessageToAll(COLOR_WHITE, string);
			SendClientMessageToAll(COLOR_JUIZ, "Principal suspeito: Assassino Desconhecido.");
		}
      	TimerSequestro[playerid] = SetTimerEx("KidnappingProcess2",240000,false,"dd",playerid, plid);
      	SendClientMessage(playerid, COLOR_ASSASSINO, "Isso mesmo, continue assim, o sequestro está sendo um sucesso!");
	}
}

public KidnappingProcess2(playerid,plid){
	KillTimer(TimerSequestro[playerid]);
	new string[128];
	if(Cativeiro[plid] == 1){
		new rand2 = random(5);
		if(rand2 == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "A família do sequestrado não aguentou e decidiu pagar o resgate!");
			SendClientMessage(playerid, COLOR_ASSALTANTE, "Você recebeu: $1.000 pelo sequestro.");
			AddPlayerMoney(Sequestrador[playerid], 1000, 3);
		}
		if(rand2 == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "A família do sequestrado não teve como pagar mais que isso, fim do sequestro.");
			SendClientMessage(playerid, COLOR_ASSALTANTE, "Você recebeu: $500 pelo sequestro.");
			AddPlayerMoney(Sequestrador[playerid], 500, 3);
		}
		if(rand2 == 3){
		    SendClientMessage(playerid, COLOR_GRAY, "Feche a cara mesmo! A família do sequestrado não aguentou e decidiu pagar o resgate!");
			SendClientMessage(playerid, COLOR_ASSALTANTE, "Você recebeu: $2.000 pelo sequestro.");
			AddPlayerMoney(Sequestrador[playerid], 2000, 3);
		}
		if(rand2 == 4 || rand2 == 2){
		    SendClientMessage(playerid, COLOR_GRAY, "Sequestro falhou, o suspeito conseguiu fugir. Talvez você precise de mais experiência.");
			SendClientMessage(plid, COLOR_ASSALTANTE, "Você conseguiu se desamarrar saia rapido dai! VAMO Vamo.");
 		}
 		AcrescentarXpoints(Sequestrador[playerid], 1);
		if(rand2 == 4 || rand2 == 2) GameTextForPlayer(playerid,"~r~sequestro~n~falhado",4000,0);
		else GameTextForPlayer(playerid,"sequestro~n~concluido",4000,0);
   		Sequestro[plid] = 0;
		Cativeiro[plid] = 0;
		EstouComSequestro[playerid] = 0;
		CelularBloqueado[plid] = 0;
		SetPlayerControl(plid,1);
	    Amarrado[plid]=0;
		Amarrou[playerid]=0;
		AmarradoInfo[plid][0]=-1;
	    AmarradoInfo[playerid][1]=-1;
		format(string,sizeof(string),"[JORNAL] A polícia acaba de confirmar o fim do sequestro de %s. A família dele está muito contente.",PlayerName(plid));
		SendClientMessageToAll(COLOR_JORNALISTA, string);
		for(new i=0; i<MAX_SLOTS; i++){
		    if(pStats[i][Prof] == JORNALISTA){
				format(string,sizeof(string),"[EDITOR CHEFE] Tá esperando o que? Vai atrás desse cara, faz uma reportagem com ele!",PlayerName(playerid),PlayerName(plid));
				SendClientMessage(i, COLOR_JORNALISTA, string);
			}
		}
	}
}

stock IsPlayerInLess(playerid){
    if(!IsPlayerInAnyVehicle(playerid)) return false;
	new model = GetVehicleModel(GetPlayerVehicleID(playerid));
	if(model == 448 || model == 457 || model == 461 || model == 462 || model == 463 || model == 468 || model == 471 || model == 521 || model == 522 || model == 523
	 || model == 539 || model == 568 || model == 581 || model == 586) return true;
	return false;
}

public TirarCombustivel(){
    for(new i = 0; i < MAX_SLOTS; i++){
		if(IsPlayerConnected(i) && Logado[i] == 1){
	   		SetPlayerTime(i, HoraJogo, MinutoJogo);
	   		if(GetPlayerState(i) == PLAYER_STATE_DRIVER){
				if(vStats[GetPlayerVehicleID(i)][Combustivel] > 0){
					if(IsPlayerInLess(i)){
						GasV[GetPlayerVehicleID(i)] += 1;
						if(GasV[GetPlayerVehicleID(i)] >= 4){
						    vStats[GetPlayerVehicleID(i)][Combustivel]--;
						    GasV[GetPlayerVehicleID(i)] = 0;
						}
					} else if(IsPlayerInBoat(i)){
						GasV[GetPlayerVehicleID(i)] += 1;
						if(GasV[GetPlayerVehicleID(i)] >= 4){
						    vStats[GetPlayerVehicleID(i)][Combustivel]--;
						    GasV[GetPlayerVehicleID(i)] = 0;
						}
					} else {
					    new modelo = GetVehicleModel(GetPlayerVehicleID(i));
						if(compare(GetVehicleCombName(modelo),"GASOLINA")){
							GasV[GetPlayerVehicleID(i)] += 1;
							if(GasV[GetPlayerVehicleID(i)] >= 2){
							    vStats[GetPlayerVehicleID(i)][Combustivel]--;
							    GasV[GetPlayerVehicleID(i)] = 0;
							}
						}
						if(compare(GetVehicleCombName(modelo),"DIESEL")){
							GasV[GetPlayerVehicleID(i)] += 1;
							if(GasV[GetPlayerVehicleID(i)] >= 3){
							    vStats[GetPlayerVehicleID(i)][Combustivel]--;
							    GasV[GetPlayerVehicleID(i)] = 0;
							}
						}
						if(compare(GetVehicleCombName(modelo),"ADITIVADA")){
							GasV[GetPlayerVehicleID(i)] += 1;
							if(GasV[GetPlayerVehicleID(i)] >= 4){
							    vStats[GetPlayerVehicleID(i)][Combustivel]--;
							    GasV[GetPlayerVehicleID(i)] = 0;
							}
						}
						if(compare(GetVehicleCombName(modelo),"ALCOOL")){
						    vStats[GetPlayerVehicleID(i)][Combustivel]--;
						}
						if(compare(GetVehicleCombName(modelo),"QUEROSENE")){
						    vStats[GetPlayerVehicleID(i)][Combustivel]--;
						}
					}
				}
			}
		}
	}
}
stock GetVehicleCombName(model){
	new vehname[128];
	vehname[0]=0;
	if(model > 399 && model < 612)
	{
	    for(new v = 0; v < sizeof(VehiclesData); v++)
		{
		    if(model == VehiclesData[v][vModelid])
		    {
				set(vehname, VehiclesData[v][vCombustivel]);
				break;
			}
		}
	}
	return vehname;
}


public TirarSkinLoja(playerid){
	SetPlayerSkin(playerid, pStats[playerid][Skin]);
}

public AvancoLigacao(plcaller,plcalled)
{
    new msg[128];
	if(extensao[plcaller] == EXTENSION_CELULAR){
		pStats[plcaller][CreditosCell]--;
		if(pStats[plcaller][CreditosCell] == 0){
		    SendClientMessage(plcaller,COLOR_GRAY,"Você não tem mais créditos para continuar nessa chamada!");
			EmLigacao[plcaller]=0;
			EmLigacao[plcalled]=0;
			if(extensao[plcalled] == EXTENSION_TELEFONE) Atendente[PickupEntradaCasa[plcalled]] = INVALID_PLAYER_ID;
			KillTimer(TempoCaixaMensagem[plcaller][0]);
			KillTimer(TempoCaixaMensagem[plcalled][0]);
			SetPlayerSpecialAction(plcaller,SPECIAL_ACTION_STOPUSECELLPHONE);
			SetPlayerSpecialAction(plcalled,SPECIAL_ACTION_STOPUSECELLPHONE);
			return 1;
		}
		SendClientMessage(plcaller,COLOR_GRAY,"Mais um minuto se passou...");
		format(msg,128,"Agora seu saldo é: %d créditos.",pStats[plcaller][CreditosCell]);
		SendClientMessage(plcaller,COLOR_BLUE_PLUS,msg);
		CellTimer[plcaller]=SetTimerEx("AvancoLigacao",60000,false,"dd",plcaller,plcalled);
		return 1;
	}
	else if(extensao[plcaller] == EXTENSION_TELEFONE){
	    if(NaCasa[plcaller] == 0){
	        format(msg,sizeof(msg),"ERRO: %s está no telefone mas não está em nenhuma casa!",PlayerName(plcaller));
	        writelog(msg);
	        print(msg);
	        return 0;
		}
		pckStats[PickupEntradaCasa[plcaller]][ContaTelefone] += 3;
		return 1;
	}
	else if(extensao[plcaller] == EXTENSION_ORELHAO){
		pStats[plcaller][CartaoTelefonico]--;
		format(msg,sizeof msg,"Mais um minuto se passou e seus créditos foram descontados para: %d",pStats[plcaller][CartaoTelefonico]);
		SendClientMessage(plcaller, COLOR_GRAY, msg);
		return 1;
	}
	return 1;
}
public OpenGate(gateid)
{
	if(ContagemPortao[gateid] < 90){
	    new Float:rx,Float:ry,Float:rz;
	    ContagemPortao[gateid]++;
		GetObjectRot(Gates[gateid],rx,ry,rz);
		SetObjectRot(Gates[gateid],rx,ry+1.0,rz);
		PortaoTimer[gateid]=SetTimerEx("OpenGate",50, 0, "d", gateid);
	} else {
		ContagemPortao[gateid] = 0;
		KillTimer(PortaoTimer[gateid]);
		PortaoAbrindo[gateid]=0;
		PortaoAberto[gateid]=1;
	}
}
public CloseGate(gateid){
	if(ContagemPortao[gateid] < 90){
	    new Float:rx,Float:ry,Float:rz;
	    ContagemPortao[gateid]++;
		GetObjectRot(Gates[gateid],rx,ry,rz);
		SetObjectRot(Gates[gateid],rx,ry-1.0,rz);
		PortaoTimer[gateid]=SetTimerEx("CloseGate",50,0,"d",gateid);
	} else {
	    ContagemPortao[gateid] = 0;
	    KillTimer(PortaoTimer[gateid]);
	    PortaoFechando[gateid]=0;
	    PortaoAbrindo[gateid]=0;
	    PortaoAberto[gateid]=0;
	}
}
public FecharPortaoAutoEscola(){
	if(AbrindoPortaoAuto == 0){
		MoveObject(portaoauto,1812.601,-2071.738,15.326,2);
	}
}
public TerminarAbrirPortaoAuto(){
    KillTimer(FechandoPortaoAuto);
	AbrindoPortaoAuto = 0;
	FecharPortaoAutoEscola();
}
public DestruirPickupGrana(playerid,pickup){
	DestroyPickup(pickup);
	SetPlayerControl(playerid,1);
}

public OpenPortao(objectid){
	if(objectid == 0) MoveObject(Portao[objectid],1573.791382, -1638.426270, 14.854576,2);
	if(objectid == 1) MoveObject(Portao[objectid],2342.546387, 2454.905029, 7.249487,2);
	if(objectid == 2) MoveObject(Portao[objectid],2294.102539, 2511.015137, 4.946327,2);
	if(objectid == 3) MoveObject(Portao[objectid],-1631.699219, 688.715637, 8.709263,2);
	DelegaAbrindo[objectid]=0;
	DelegaAberto[objectid]=1;
}
public ClosePortao(objectid){
	if(objectid == 0) MoveObject(Portao[objectid],1592.921753, -1638.546753, 14.789343,1.0);
	if(objectid == 1) MoveObject(Portao[objectid],2334.678711, 2443.014404, 7.259488,1.0);
	if(objectid == 2) MoveObject(Portao[objectid],2294.276123, 2503.250488, 4.719362,1.0);
	if(objectid == 3) MoveObject(Portao[objectid],-1648.476563, 688.514648, 8.543203,1.0);
	DelegaFechando[objectid]=0;
	DelegaAbrindo[objectid]=0;
	DelegaAberto[objectid]=0;
}

public VoteKick()
{
	if(Votes >= PlayerCount)
	{
	    new string[128];
	    format(string, sizeof string, "[VOTEKICK] Votação para kickar %s sucedida, jogador kickado do servidor.", PlayerName(VoteKickPlayer));
	    SendClientMessageToAll(COLOR_PALHA, string);
	    Kick(VoteKickPlayer);
	}
	else
	{
	    new string[128];
	    format(string, sizeof string, "[VOTEKICK] Votação para kickar %s falhada, a quantidade de votos necessária não foi atendida.", PlayerName(VoteKickPlayer));
		SendClientMessageToAll(COLOR_PALHA, string);
	}
	Votes = 0;
	VoteKickPlayer = -1;
	for(new i = 0; i < MAX_SLOTS; i++)
	{
	    Voted[i] = 0;
	}
	PlayerCount = 0;
	KillTimer(VoteKickTimer);
}

public TratamentoDrogas(playerid,plid)
{
	KillTimer(TimerCura[plid]);
	if(IsPlayerConnected(playerid) && Logado[playerid] && IsPlayerConnected(plid) && Logado[plid])
	{
    	SendClientMessage(playerid, COLOR_PARAMEDICO, "Tratamento feito, você recebeu $600,00 dólares.");
		new string[128];
		format(string,sizeof(string),"O Paramédico %s lhe fez um tratamento de drogas!",PlayerName(playerid));
		SendClientMessage(plid, COLOR_PARAMEDICO, string);
		SendClientMessage(plid, COLOR_PARAMEDICO, "Agora suas drogas foram removidas do seu sangue, o tratamento custou $600,00 dólares.");
		PlayerPay(plid, playerid, 600);
		pStats[plid][DosesHeroina] = 0;
        pStats[plid][DosesMaconha] = 0;
        pStats[plid][DosesCocaina] = 0;
	}
	Tratando[playerid] = 0;
}

public Cobrar(playerid)
{
	KillTimer(TimerDivida[playerid]);
	new string[128];
	if(pStats[playerid][Divida] > 0){
	    pStats[playerid][Divida] += pStats[playerid][Divida] * 5 / 100;
		SendClientMessage(playerid, COLOR_PINK, "|-------------------------------------------- ATENÇÃO --------------------------------------------|");
		SendClientMessage(playerid, COLOR_YELLOW, "Você não pagou suas dívidas e o banco acrescentou JUROS de 5 por cento à mais nelas.");
		format(string, sizeof(string), "ou seja, agora suas dívidas são: $%d,00 dólares.", pStats[playerid][Divida]);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		TimerDivida[playerid] = SetTimerEx("Cobrar",1200000,false,"d",playerid);
	}
}

stock ServirSobremesa(playerid,sobremesa)
{
    if(GetPlayerServerMoney(playerid) < Sobremesas[sobremesa][SobremesaValor]){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro para pagar a sobremesa...");
	    return 1;
	}
	SendClientMessage(playerid, COLOR_GREEN, "Sobremesa servida...");
	new str[128];
	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
	format(str,sizeof(str),"Você está comendo um(a) %s",Sobremesas[sobremesa][SobremesaName]);
	SendClientMessage(playerid, COLOR_GREEN, str);
	AddPlayerMoney(playerid,-Sobremesas[sobremesa][SobremesaValor],-1);
	SetPlayerControl(playerid,0);
	SetTimerEx("ComerSobremesa",10000,0,"d",playerid);
	return 1;
}
public ComerSobremesa(playerid)
{
	SetPlayerControl(playerid,1);
	SendClientMessage(playerid, COLOR_GREEN, "Você terminou de comer/tomar sua sobremesa...");
}
stock ServirComida(playerid,comida)
{
    if(GetPlayerServerMoney(playerid) < Comidas[comida][ComidaValor]){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro para pagar a comida...");
    	SetPlayerControl(playerid,1);
	    return 1;
	}
	if(comida == 7) pStats[playerid][Alcool]--;
	SendClientMessage(playerid, COLOR_GREEN, "Comida servida...");
	new str[128];
	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
	format(str,sizeof(str),"Você está comendo um(a) %s",Comidas[comida][ComidaName]);
	SendClientMessage(playerid, COLOR_GREEN, str);
	AddPlayerMoney(playerid,-Comidas[comida][ComidaValor],-1);
	AddPlayerHealth(playerid,20);
	SetPlayerControl(playerid,0);
	SetTimerEx("ComerComida",25000,0,"d",playerid);
	return 1;
}
public ComerComida(playerid)
{
	SetPlayerControl(playerid,1);
	SendClientMessage(playerid, COLOR_GREEN, "Você terminou de comer sua comida...");
	SendClientMessage(playerid, COLOR_WHITE, "Sua fome foi diminuída...");
	pStats[playerid][Fome] -= 5;
	if(pStats[playerid][Fome] < 0)
	{
 		pStats[playerid][Fome] = 0;
	}
	SendPlayerMessageToPlayer(playerid, playerid, "Delícia...");
}
stock ServirSuco(playerid,suco)
{
	switch(ComLeite[playerid])
	{
		case 0 :
  		{
	        if(GetPlayerServerMoney(playerid) < 10){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro!");
			    SetPlayerControl(playerid,1);
			    return 1;
			}
			else{
			    new string[128];
			    format(string,sizeof(string),"Você tomou um suco de %s c/ agua!",SucosName[suco]);
			    SendClientMessage(playerid, COLOR_GREEN, string);
			    AddPlayerHealth(playerid,11);
			    AddPlayerMoney(playerid,-10,-1);
			    return 1;
			}
		}
		case 1 :
		{
			if(GetPlayerServerMoney(playerid) < 14){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro!");
	        	SetPlayerControl(playerid,1);
			    return 1;
			}
			else{
			    new string[128];
			    format(string,sizeof(string),"Você tomou um suco de %s c/ leite!",SucosName[suco]);
			    SendClientMessage(playerid, COLOR_GREEN, string);
			    AddPlayerHealth(playerid,13);
			    AddPlayerMoney(playerid,-14,-1);
			    return 1;
			}
		}
	}
	return 1;
}
stock ServirBebida(playerid,bebida)
{
	if(GetPlayerServerMoney(playerid) < Bebidas[bebida][BebidaValor]){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro para pagar a bebida...");
       	SetPlayerControl(playerid,1);
	    return 1;
	}
	if(bebida == 4) pStats[playerid][Alcool] = pStats[playerid][Alcool] + 5;
	SendClientMessage(playerid, COLOR_GREEN, "Bebida servida...");
	new str[128];
	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
	format(str,sizeof(str),"Você está bebendo um(a) %s",Bebidas[bebida][BebidaName]);
	SendClientMessage(playerid, COLOR_GREEN, str);
	AddPlayerMoney(playerid,-Bebidas[bebida][BebidaValor],-1);
	AddPlayerHealth(playerid,random(4) + 10);
	SetPlayerControl(playerid,0);
	SetTimerEx("TomarBebida",15000,0,"d",playerid);
	return 1;
}

public Cozinhando(playerid)
{
	new rand = random(4);
	if(rand == 0 || rand == 1){
	    SendClientMessage(playerid, COLOR_GREEN, "Você ganhou experiência ao fazer este delicioso prato e ganhou um ponto de culinária!");
		pStats[playerid][Culinaria]++;
	}
	else{
	    SendClientMessage(playerid, COLOR_WHITE, "Você não ganhou experiência ao fazer esse prato pois não conseguiu entender muito o que fez, da próxima vez, tente aprender algo.");
	}
	if(AlimentoCozinhando[playerid] == 1){
	    SendClientMessage(playerid, COLOR_WHITE, "Frango pronto, você pode servi-lo com /servir [id] [refeição]");
		pStats[playerid][Frango]--;
		Frangos[playerid]++;
		AlimentoCozinhando[playerid] = 0;
		SetPlayerControl(playerid,1);
		KillTimer(TempoCozinhando[playerid]);
		return 1;
	}
	else if(AlimentoCozinhando[playerid] == 2){
	    SendClientMessage(playerid, COLOR_WHITE, "Peixe pronto, você pode servi-lo com /servir [id] [refeição]");
	    pStats[playerid][Peixe]--;
		Peixes[playerid]++;
		AlimentoCozinhando[playerid] = 0;
		SetPlayerControl(playerid,1);
		KillTimer(TempoCozinhando[playerid]);
		return 1;
	}
	else if(AlimentoCozinhando[playerid] == 3){
	    SendClientMessage(playerid, COLOR_WHITE, "Pizza pronta, você pode servi-la com /servir [id] [refeição]");
	    pStats[playerid][Pizza]--;
		Pizzas[playerid] ++;
		AlimentoCozinhando[playerid] = 0;
		SetPlayerControl(playerid,1);
		KillTimer(TempoCozinhando[playerid]);
		return 1;
	}
	else if(AlimentoCozinhando[playerid] == 4){
	    SendClientMessage(playerid, COLOR_WHITE, "Carne pronta, você pode servi-la com /servir [id] [refeição]");
        pStats[playerid][Carne]--;
		Carnes[playerid] ++;
		AlimentoCozinhando[playerid] = 0;
		SetPlayerControl(playerid,1);
		KillTimer(TempoCozinhando[playerid]);
		return 1;
	}
	else if(AlimentoCozinhando[playerid] == 5){
	    SendClientMessage(playerid, COLOR_WHITE, "Strogonoff pronto, você pode servi-lo com /servir [id] [refeição]");
        pStats[playerid][Strogonoff]--;
		Strogonoffes[playerid] ++;
		AlimentoCozinhando[playerid] = 0;
		SetPlayerControl(playerid,1);
		KillTimer(TempoCozinhando[playerid]);
		return 1;
	}
	else if(AlimentoCozinhando[playerid] == 6){
	    SendClientMessage(playerid, COLOR_WHITE, "Camarão pronto, você pode servi-lo com /servir [id] [refeição]");
        pStats[playerid][Camarao]--;
		Camaroes[playerid] ++;
		AlimentoCozinhando[playerid] = 0;
		SetPlayerControl(playerid,1);
		KillTimer(TempoCozinhando[playerid]);
		return 1;
	}
	else if(AlimentoCozinhando[playerid] == 7){
	    SendClientMessage(playerid, COLOR_WHITE, "Linguiça pronta, você pode servi-la com /servir [id] [refeição]");
        pStats[playerid][Linguica]--;
		Linguicas[playerid] ++;
		AlimentoCozinhando[playerid] = 0;
		SetPlayerControl(playerid,1);
		KillTimer(TempoCozinhando[playerid]);
		return 1;
	}
	return 1;
}
public TomarBebida(playerid)
{
	SetPlayerControl(playerid,1);
	SendClientMessage(playerid, COLOR_GREEN, "Você terminou de tomar sua bebida...");
	SendPlayerMessageToPlayer(playerid, playerid, "Delícia...");
}
public TomarSorvete(playerid)
{
	AddPlayerHealth(playerid, random(3) + 12);
	SendClientMessage(playerid, COLOR_WHITE, "Sua fome foi diminuída...");
	pStats[playerid][Fome] -= 5;
	if(pStats[playerid][Fome] < 0)
	{
 		pStats[playerid][Fome] = 0;
	}
	TomandoSorvete[playerid] = 0;
	SetPlayerControl(playerid,1);
	SendClientMessage(playerid, COLOR_PALHA, "Você terminou de tomar o seu sorvete!");
	SendPlayerMessageToPlayer(playerid, playerid, "Delícia...");
}
public TaxiCorrida()
{
	for(new i=0; i<MAX_SLOTS; i++)
	{
	    if(IsPlayerConnected(i))
		{
			if(Taximetro[i][0] == 1)
			{
				if(GetPlayerServerMoney(i) >= PrecoCorrida[i] + 3)
				{
				    new string[128];
					PrecoCorrida[i] = PrecoCorrida[i] + 3;
					ParaGanharXPTaximetro[Taximetro[i][1]]++;
					format(string, sizeof(string), "[TAXÍMETRO] $%d,00", PrecoCorrida[i]);
					SendClientMessage(i, COLOR_JUIZ, string);
	   				SendClientMessage(Taximetro[i][1], COLOR_JUIZ, string);
					if(ParaGanharXPTaximetro[Taximetro[i][1]] >= 7)
					{
					    AcrescentarXpoints(Taximetro[i][1],1);
					    ParaGanharXPTaximetro[Taximetro[i][1]] = 0;
					}
				}
				else
				{
					SendClientMessage(i, COLOR_GRAY, "Você não tem mais dinheiro para o taxi, vai ficar aqui");
					SendClientMessage(Taximetro[i][1], COLOR_GRAY, "Seu passageiro ficou sem dinheiro e por isso foi deixado aqui.");
					PlayerPay(i, Taximetro[i][1], PrecoCorrida[i]);
					RemovePlayerFromVehicle(i);
					PrecoCorrida[i] = 0;
					Taximetro[i][1] = 0;
					Taximetro[i][0] = 0;
				}
	 		}
			if(MTaximetro[i][0] == 1)
			{
				if(GetPlayerServerMoney(i) >= PrecoCorrida[i] + 5)
				{
				    new string[128];
					PrecoCorrida[i] = PrecoCorrida[i] + 5;
					format(string, sizeof(string), "[MOTO-TAXÍMETRO] $%d,00", PrecoCorrida[i]);
					SendClientMessage(i, COLOR_JUIZ, string);
					ParaGanharXPTaximetro[Taximetro[i][1]]++;
					SendClientMessage(MTaximetro[i][1], COLOR_JUIZ, string);
					if(ParaGanharXPTaximetro[Taximetro[i][1]] >= 8)
					{
					    AcrescentarXpoints(Taximetro[i][1],1);
					    ParaGanharXPTaximetro[Taximetro[i][1]] = 0;
					}
				}
				else
				{
					SendClientMessage(i, COLOR_GRAY, "Você não tem mais dinheiro para o taxi, vai ficar aqui.");
					SendClientMessage(MTaximetro[i][1], COLOR_GRAY, "Seu passageiro ficou sem dinheiro e por isso foi deixado aqui.");
					PlayerPay(i, Taximetro[i][1], PrecoCorrida[i]);
					RemovePlayerFromVehicle(i);
					PrecoCorrida[i] = 0;
					MTaximetro[i][1] = 0;
					MTaximetro[i][0] = 0;
				}
			}
		}
 	}
}

stock GetDistanceToMapIcon(playerid, iconid)
{
	new Float:x1,Float:y1,Float:z1;
	new Float:x2,Float:y2,Float:z2;
	new Float:output;
	GetPlayerPos(playerid, x1, y1, z1);
	GetMapIconPos(iconid, x2, y2, z2);
	output = floatsqroot(floatpower(floatabs(floatsub(x2, x1)), 2)+floatpower(floatabs(floatsub(y2, y1)), 2));
	return floatround(output);
}
stock GetMapIconPos(iconid, &Float:X, &Float:Y, &Float:Z){
	X=MapIcons[iconid][miX];
	Y=MapIcons[iconid][miY];
	Z=MapIcons[iconid][miZ];
	return 1;
}

public TratarDoenca(playerid, plid)
{
	SendClientMessage(playerid, COLOR_PARAMEDICO, "Jogador tratado... Peça para ele usar /pagar");
	SendClientMessage(plid, COLOR_PARAMEDICO, "Você está curado da doença, da próxima vez, se cuide melhor...");
	pStats[plid][Doenca] = 0;
	Tratando[playerid] = 0;
}

public DoencaPredomina()
{
	new bool:aviso = false;
	for(new i = 0; i < MAX_SLOTS; i++)
	{
	    if(IsPlayerConnected(i) && Logado[i] && pStats[i][VacinaDuracao] <= 0 && pStats[i][Doenca] == 0 && pStats[i][Prof] != PARAMEDICO)
	    {
	        new rand = random(20);
			if(rand < 4)
			{
				new str[128];
				format(str, sizeof str, "[HOSPITAL] ATENÇÃO CIDADÃOS: %s foi infectado pela Gripe Suína, matenham-se distantes dele até sua recuperação.", PlayerName(i));
				SendClientMessageToAll(COLOR_PARAMEDICO, str);
				GameTextForAll("~r~cuide-se", 3000, 0);
				pStats[i][Doenca] = 1;
				TimerDoenca[i][0] = SetTimerEx("PassarDoenca", 5000, false, "d", i);
				aviso = true;
			}
	    }
	}
	if(aviso == true)
	{
	    SendClientMessageToAll(COLOR_PARAMEDICO, "Evite que isso se torne um surto, vá para sua casa e mantenha-se distante dos infectados.");
	}
}

public EfeitoDoenca(playerid)
{
	KillTimer(TimerDoenca[playerid][1]);
	if(IsPlayerConnected(playerid) && Logado[playerid] && pStats[playerid][Doenca] > 0)
	{
	    if(pStats[playerid][Morrendo] == 0)
	    {
			if(pStats[playerid][Doenca] == 1)
			{
			    SendClientMessage(playerid, COLOR_PARAMEDICO, "Você está com Gripe Suína, vá ao hospital ou chame um paramédico...");
				SetPlayerWeather(playerid, 5);
				SetTimerEx("PararWeather", 7000, 0, "d", playerid);
				new Float:health;
				GetPlayerHealth(playerid, health);
				SetPlayerHealthEx(playerid, health - 1);
				if(!IsPlayerInAnyVehicle(playerid) && GetPlayerControl(playerid) == 1)
				{
					ApplyAnimCrack(playerid);
				}
			}
			else if(pStats[playerid][Doenca] == 2){
				if(pStats[playerid][Fome] < 15)
				{
				    pStats[playerid][Fome]++;
				}
			    SendPlayerMessageToPlayer(playerid, playerid, "UHRU, COF, COF, BEH....");
				if(!IsPlayerInAnyVehicle(playerid) && GetPlayerControl(playerid) == 1)
				{
					ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
					ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
				}
			}
		}
		TimerDoenca[playerid][1] = SetTimerEx("EfeitoDoenca", 80000, 0, "d", playerid);
	}
}

public PassarDoenca(playerid)
{
	KillTimer(TimerDoenca[playerid][0]);
	if(pStats[playerid][Doenca] == 0 || !IsPlayerConnected(playerid) || !Logado[playerid]) return ;
	for(new i = 0; i < MAX_SLOTS; i++)
	{
		if(GetDistanceBetweenPlayers(playerid, i) < 7)
		{
	    	if(IsPlayerConnected(i) && Logado[i] && pStats[i][Doenca] == 0 && pStats[i][VacinaDuracao] <= 0 && pStats[i][Prof] != PARAMEDICO)
	    	{
	    	    KillTimer(TimerDoenca[i][0]);
				TimerDoenca[i][0] = SetTimerEx("Contaminar", 3000, false, "dd", playerid, i);
	    	}
		}
	}
	TimerDoenca[playerid][0] = SetTimerEx("PassarDoenca", 5000, false, "d", playerid);
}

public Contaminar(playerid, plid)
{
	KillTimer(TimerDoenca[plid][0]);
	if(GetDistanceBetweenPlayers(playerid, plid) < 7)
	{
	    new str[128];
	    format(str, sizeof str, "[HOSPITAL] %s passou a gripe para %s, MANTENHAM-SE DISTANTES DE TODOS INFECTADOS!", PlayerName(playerid), PlayerName(plid));
		SendClientMessageToAll(COLOR_PARAMEDICO, str);
	    pStats[plid][Doenca] = 1;
	    TimerDoenca[plid][0] = SetTimerEx("PassarDoenca", 5000, false, "d", plid);
	}
}

public Internando(playerid){
	if(pStats[playerid][XL] > 0) AddPlayerMoney(playerid,-1000,-1);
	KillTimer(TempoInternando[playerid]);
	SetPlayerControl(playerid, 1);
    SetPlayerPos(playerid, PosHosp[playerid][0], PosHosp[playerid][1], PosHosp[playerid][2]);
	SetCameraBehindPlayer(playerid);
	pStats[playerid][Doenca] = 0;
	pStats[playerid][VicioDrogas] = 0;
	CountVomit[playerid] = 0;
	SetPlayerHealthEx(playerid, MAX_HEALTH);
	GameTextForPlayer(playerid, "~g~recuperado", 5000, 0);
	SendClientMessage(playerid, COLOR_PARAMEDICO, "HOSPITAL: É, você tomou alta, já está recuperado, saudável, não damos vacina, pois o SUS não cobra esse serviço.");
	SetPlayerWeather(playerid,weatherprevisao);
}
stock ReturnColorGT(value,min,max,colormin[],colormed[],colormax[])
{
	new r[128];
	if(value <= min) format(r,sizeof(r),colormin);
	else if(value >= max) format(r,sizeof(r),colormax);
	else format(r,sizeof(r),colormed);
	return r;
}
stock ApplyZero(id){
    new strresult[128];
	if(id < 10) format(strresult,sizeof(strresult),"0%d",id);
	else format(strresult,sizeof(strresult),"%d",id);
	return strresult;
}
stock ApplyZeroString(const string[], const seperator)
{
	new res[128];
	new tmp[128];
	new index;
	while(index < strlen(string))
	{
	    tmp = strtok(string, index, seperator);
	    strcat(res, ApplyZero(strval(tmp)));
		if(index < strlen(string)) res[strlen(res)] = seperator;
	}
	return res;
}
public IniciarTesteLeis(playerid,plid){
	ParteTesteLeis[playerid] ++;
	if(ParteTesteLeis[playerid] == 1){
		NoTeste[plid] = 1;
		InstrutorOcupado[playerid] = 1;
		SetPlayerPos(playerid,-2021.8313,-115.8208,1035.1719);
		SetPlayerPos(plid,-2025.5607,-116.6583,1035.1719);
		SetPlayerInterior(playerid,3);
		SetPlayerInterior(plid,3);
		SetPlayerControl(playerid, 0);
		SetPlayerControl(plid, 0);
		SetPlayerFacingAngle(playerid, 90);
		SetPlayerFacingAngle(plid, 270);
	}
	else if(ParteTesteLeis[playerid] == 2){
		new string[128];
		format(string, sizeof(string), "[TESTE] Sr. %s você está iniciando seu teste para tirar a habilitação terrestre.", PlayerName(plid));
		SendPlayerMessageToPlayer(plid, playerid, string);
	    format(string, sizeof(string), "[TESTE] Sr. %s você está iniciando seu teste para tirar a habilitação terrestre.", PlayerName(plid));
		SendPlayerMessageToPlayer(playerid, playerid, string);
	}
	else if(ParteTesteLeis[playerid] == 3){
		SendPlayerMessageToPlayer(plid, playerid, "[TESTE] Aqui vão alguns leis impostas pelo Juiz para a boa conduta no trânsito de Los Santos:");
		SendPlayerMessageToPlayer(playerid, playerid,"[TESTE] Aqui vão alguns leis impostas pelo Juiz para a boa conduta no trânsito de Los Santos:");
	}
	else if(ParteTesteLeis[playerid] == 4){
		SendPlayerMessageToPlayer(plid, playerid, "[TESTE] 1º- Não dirigir em alta velocidade.");
		SendPlayerMessageToPlayer(playerid, playerid,"[TESTE] 1º- Não dirigir em alta velocidade.");
	}
	else if(ParteTesteLeis[playerid] == 5){
		SendPlayerMessageToPlayer(plid, playerid, "[TESTE] 2º- Não fazer ultrapassagens perigosas.");
		SendPlayerMessageToPlayer(playerid, playerid,"[TESTE] 2º- Não fazer ultrapassagens perigosas.");
	}
	else if(ParteTesteLeis[playerid] == 6){
		SendPlayerMessageToPlayer(plid, playerid, "[TESTE] 3º- Não dirigir em mão dupla ou na contra-mão.");
		SendPlayerMessageToPlayer(playerid, playerid,"[TESTE] 3º- Não dirigir em mão dupla ou na contra-mão");
	}
	else if(ParteTesteLeis[playerid] == 7){
		SendPlayerMessageToPlayer(plid, playerid, "[TESTE] 4º- Parar o carro quando a polícia mandar.");
		SendPlayerMessageToPlayer(playerid, playerid,"[TESTE] 4º- Parar o carro quando a polícia mandar.");
	}
	else if(ParteTesteLeis[playerid] == 8){
		SendPlayerMessageToPlayer(plid, playerid, "[TESTE] 5º- Não bater em postes/carros/objetos e ATROPELAR pessoas.");
		SendPlayerMessageToPlayer(playerid, playerid,"[TESTE] 5º- Não bater em postes/carros/objetos e ATROPELAR pessoas.");
	}
	else if(ParteTesteLeis[playerid] == 9){
		SendPlayerMessageToPlayer(plid, playerid, "[TESTE] 6º- Respeitar os outros motoristas/policiais.");
		SendPlayerMessageToPlayer(playerid, playerid,"[TESTE] 6º- Respeitar os outros motoristas/policiais.");
	}
	else if(ParteTesteLeis[playerid] == 10){
		SendPlayerMessageToPlayer(plid, playerid, "[TESTE] 7º- Respeitar o limite de velocidade imposta pelos Radares.");
		SendPlayerMessageToPlayer(playerid, playerid,"[TESTE] 7º- Respeitar o limite de velocidade imposta pelos Radares.");
	}
	else if(ParteTesteLeis[playerid] == 11){
		SendPlayerMessageToPlayer(plid, playerid, "[TESTE] 8º- Não estacionar na rua/calçadas/lojas e na frente de uma casa que não seje sua.");
		SendPlayerMessageToPlayer(playerid, playerid,"[TESTE] 8º- Não estacionar na rua/calçadas/lojas e na frente de uma casa que não seje sua.");
	}
	else if(ParteTesteLeis[playerid] == 12){
		SendPlayerMessageToPlayer(plid, playerid, "[TESTE] 9º- Não andar com veículos que a documentação dele não seje sua.");
		SendPlayerMessageToPlayer(playerid, playerid,"[TESTE] 9º- Não andar com veículos que a documentação não seje sua.");
	}
	else if(ParteTesteLeis[playerid] == 13){
		SendPlayerMessageToPlayer(plid, playerid, "[TESTE] 10º- Não ingerir bebidas antes de dirigir.");
		SendPlayerMessageToPlayer(playerid, playerid,"[TESTE] 10º- Não ingerir bebidas antes de dirigir.");
	}
	else if(ParteTesteLeis[playerid] == 14){
	    new string[128];
		format(string, sizeof(string), "[TESTE] Sr. %s caso concorde com as leis de trânsinto imposta pelo Estado de Los Santos", PlayerName(plid));
		SendPlayerMessageToPlayer(plid, playerid, string);
		SendPlayerMessageToPlayer(plid, playerid, "Digite: /concordo [leis] , caso contrário /discordo [leis]. Obs: Não use [ ]");
		format(string, sizeof(string), "[TESTE] Sr. %s caso concorde com as leis de trânsinto imposta pelo Estado de Los Santos", PlayerName(plid));
		SendPlayerMessageToPlayer(playerid, playerid, string);
		SendPlayerMessageToPlayer(playerid, playerid, "Digite: /concordo [leis] , caso contrário /discordo [leis]. Obs: Não use [ ]");
		LiAsLeis[plid] = 1;
		SetPlayerControl(playerid, 1);
		SetPlayerControl(plid, 1);
		TempoLeisTransito[plid] = SetTimerEx("DesfazerAcordo",60000,0,"dd",playerid,plid);
		InstrutorNovo[plid] = playerid;
	}
	if(ParteTesteLeis[playerid] != 14){
		SetTimerEx("IniciarTesteLeis",4000,0,"dd",playerid,plid);
	}
	return 1;
}

public DesfazerAcordo(playerid,plid){
	KillTimer(TempoLeisTransito[plid]);
	if(LiAsLeis[plid] == 1){
	    new string[128];
		format(string, sizeof(string), "[AVISO] %s não concordou com as leis no prazo devido, cancelamos seu teste.", PlayerName(plid));
		SendClientMessage(playerid, COLOR_LIGHT_RED, string);
		SendClientMessage(plid, COLOR_LIGHT_RED, "Seu teste foi cancelado, você não concordou com as leis no prazo devido.");
		NoTeste[plid] = 0;
		InstrutorOcupado[playerid] = 0;
		LiAsLeis[plid] = 0;
		ParteLendoLeisA[playerid] = 0;
	}
}

public AvancoDirecao(playerid,plid){
	ADTeste[playerid] ++;
	if(ADTeste[playerid] == 1){
		SetPlayerPos(playerid,1753.2679,-2054.5959,14.0486);
		SetPlayerPos(plid,1746.6401,-2061.8796,13.5998);
		SetPlayerInterior(playerid,0);
		SetPlayerInterior(plid,0);
		SetPlayerControl(playerid, 0);
		SetPlayerControl(plid, 0);
	}
	else if(ADTeste[playerid] == 2){
	    new string[128];
		format(string, sizeof(string), "[TESTE] Sr. %s este carro posicionado na sua frente é o carro da baliza.", PlayerName(plid));
		SendPlayerMessageToPlayer(plid, playerid, string);
		SendPlayerMessageToPlayer(plid, playerid, "[TESTE] Coloque ele entre os 2 veículos, eu avisarei quando a vaga for preenchida.");
	    format(string, sizeof(string), "[TESTE] Sr. %s este carro posicionado na sua frente é o carro da baliza.", PlayerName(plid));
		SendPlayerMessageToPlayer(playerid, playerid, string);
		SendPlayerMessageToPlayer(playerid, playerid, "[TESTE] Coloque ele entre os 2 veículos, eu avisarei quando a vaga for preenchida.");
		SetPlayerControl(playerid, 1);
		SetPlayerControl(plid, 1);
		for(new a = 0; a < sizeof CarroAuto; a++)
		{
	 		TrancarVeiculo(plid, CarroAuto[a]);
		}
		PlayerArea[plid] = AreaBalizaHabilitada;
		Chance[plid] = 3;
		SetTimerEx("AreasTestes",2000,false,"dd",playerid,plid);
	}
	else if(ADTeste[playerid] == 3){
		SetPlayerControl(playerid, 0);
		SetPlayerControl(plid, 0);
		SetPlayerPos(playerid,1765.9423,-2021.7972,14.1488);
		SetPlayerPos(plid,1769.4495,-2020.7175,14.1371);
	}
	else if(ADTeste[playerid] == 4){
		SendPlayerMessageToPlayer(plid, playerid, "[TESTE] Agora terá que passar entre os cones e não bater. Caso destrua algum o teste será refeito.");
		SendPlayerMessageToPlayer(playerid, playerid,"[TESTE] Agora terá que passar entre os cones e não bater. Caso destrua algum o teste será refeito.");
		SetPlayerControl(playerid, 1);
		SetPlayerControl(plid, 1);
		PlayerArea[plid] = AreaZigHabilitada;
		Chance[plid] = 3;
		SetTimerEx("AreasTestes",2000,false,"dd",playerid,plid);
	}
	else if(ADTeste[playerid] == 5){
		SetPlayerPos(playerid,1785.2258,-2045.1324,13.5458);
		SetPlayerPos(plid,1782.2482,-2041.4044,13.5332);
		SetPlayerControl(playerid, 0);
		SetPlayerControl(plid, 0);
	}
	else if(ADTeste[playerid] == 6){
	    new string[128];
		format(string, sizeof(string), "[TESTE] Sr. %s agora terá que fazer um 180º e estacionar o carro.", PlayerName(plid));
		SendPlayerMessageToPlayer(plid, playerid, string);
		SendPlayerMessageToPlayer(plid, playerid, "[TESTE] Lembre-se não encoste nos cones.");
	    format(string, sizeof(string), "[TESTE] Sr. %s agora terá que fazer um 180º e estacionar o carro.", PlayerName(plid));
		SendPlayerMessageToPlayer(playerid, playerid, string);
		SendPlayerMessageToPlayer(playerid, playerid, "[TESTE] Lembre-se não encoste nos cones.");
		SetPlayerControl(playerid, 1);
		SetPlayerControl(plid, 1);
		PlayerArea[plid] = Area180Habilitada;
		Chance[plid] = 3;
		SetTimerEx("AreasTestes",2000,false,"dd",playerid,plid);
	}
	else if(ADTeste[playerid] == 7){
		SetPlayerPos(playerid,1773.9636,-2063.5554,13.5997);
		SetPlayerPos(plid,1770.1658,-2055.2468,13.5829);
		SetPlayerControl(playerid, 0);
		SetPlayerControl(plid, 0);
	}
	else if(ADTeste[playerid] == 8){
	    new string[128];
		format(string, sizeof(string), "[TESTE] Sr. %s esta moto posicionado na sua frente, é o veiculo o qual.", PlayerName(plid));
		SendPlayerMessageToPlayer(plid, playerid, string);
		SendPlayerMessageToPlayer(plid, playerid, "[TESTE] você terá que fazer Zig-Zag, entre os cones.");
	    format(string, sizeof(string), "[TESTE] Sr. %s esta moto posicionado na sua frente, é o veiculo o qual.", PlayerName(plid));
		SendPlayerMessageToPlayer(playerid, playerid, string);
		SendPlayerMessageToPlayer(playerid, playerid, "[TESTE] você terá que fazer Zig-Zag, entre os cones.");
	}
	else if(ADTeste[playerid] == 9){
		SetPlayerControl(playerid, 1);
		SetPlayerControl(plid, 1);
		PlayerArea[plid] = AreaMotoHabilitada;
		SendClientMessage(playerid, COLOR_INSTRUTOR, "Suba na moto e faça o Zig-Zag e estacione a moto na pequena área. Lembre-se: Não encoste nos cones.");
		SendClientMessage(playerid, COLOR_INSTRUTOR, "Lembre-se pare a moto no cone central! Se não der, tente dinovo!");
		Chance[plid] = 3;
		SetTimerEx("AreasTestes",2000,true,"dd",playerid,plid);
	}
	else if(ADTeste[playerid] == 10){
		SetPlayerPos(playerid,1773.9636,-2063.5554,13.5997);
		SetPlayerPos(plid,1770.1658,-2055.2468,13.5829);
		SetPlayerControl(playerid, 0);
		SetPlayerControl(plid, 0);
	}
	else if(ADTeste[playerid] == 11){
	    new string[128];
		format(string, sizeof(string), "[TESTE] Sr. %s você passou nos testes internos da auto-escola.", PlayerName(plid));
		SendPlayerMessageToPlayer(plid, playerid, string);
		SendPlayerMessageToPlayer(plid, playerid, "[TESTE] agora iremos para a rua aonde, você terminará seu teste.");
	    format(string, sizeof(string), "[TESTE] Sr. %s você passou nos testes internos da auto-escola.", PlayerName(plid));
		SendPlayerMessageToPlayer(playerid, playerid, string);
		SendPlayerMessageToPlayer(playerid, playerid, "[TESTE] agora iremos para a rua aonde, você terminará seu teste.");
	}
	else if(ADTeste[playerid] == 12){
		for(new a = 0; a < sizeof CarroAuto; a++)
		{
	 		TrancarVeiculo(plid, CarroAuto[a]);
		}
		SetPlayerPos(playerid,1796.8889,-2063.2874,13.5717);
		SetPlayerPos(plid,1806.0035,-2064.2908,13.5606);
		SetPlayerControl(playerid, 0);
		SetPlayerControl(plid, 0);
	}
	else if(ADTeste[playerid] == 13){
	    new string[128];
		format(string, sizeof(string), "[TESTE] Sr. %s, este carro na sua frente é o carro que você terá que levar até", PlayerName(plid));
		SendPlayerMessageToPlayer(plid, playerid, string);
		SendPlayerMessageToPlayer(plid, playerid, "[TESTE] até a BOATE, marcada no radar com um ícone vermelho. Aguarde...");
	    format(string, sizeof(string), "[TESTE] Sr. %s, este carro na sua frente é o carro que você terá que levar até", PlayerName(plid));
		SendPlayerMessageToPlayer(playerid, playerid, string);
		SendPlayerMessageToPlayer(playerid, playerid, "[TESTE] até a BOATE, marcada no radar com um ícone vermelho. Aguarde...");
	}
	else if(ADTeste[playerid] == 14){
		SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Você terá que acompanhar o aprendiz até a BOATE, como passageiro.");
		SendClientMessage(plid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] OBS: Você não poderá bater, caso bata o teste será refeito.");
	}
	else if(ADTeste[playerid] == 15){
	    SendPlayerMessageToPlayer(playerid, playerid, "[TESTE] Lembre-se: não leve nenhuma multa!");
	    SendPlayerMessageToPlayer(plid, playerid, "[TESTE] Lembre-se: não leve nenhuma multa!");
		SendClientMessage(plid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Vá para a boate, o ponto vermelho mostrará aonde é. Você tem 4 minutos.");
		TempoRua[plid] = SetTimerEx("TempoAutoRua",242000,0,"dd",playerid,plid);
		InstrutorNovo[plid] = playerid;
		FazendoTesteRua[plid] = 1;
	}
	else if(ADTeste[playerid] == 16){
		SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] O teste iniciou:");
		SetPlayerControl(playerid, 1);
		SetPlayerControl(plid, 1);
		PlayerPlaySound(plid, 1052, 0.0, 0.0, 0.0);
		SetPlayerCheckpoint(plid,2423.5527,-1229.9398,24.8702,10.0);
		CheckpointStatus[plid] = AUTO_ESCOLA_RUA;
	}
	else if(ADTeste[playerid] == 17){
	    for(new a = 0; a < sizeof CarroAuto; a++)
		{
	 		TrancarVeiculo(playerid, CarroAuto[a]);
	 		SetVehicleToRespawn(CarroAuto[a]);
		}
		RemovePlayerFromVehicle(playerid);
		SendClientMessage(plid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] O aprendizado foi aprovado no teste.");
		SendClientMessage(playerid, COLOR_INSTRUTOR,"[AUTO-ESCOLA] A auto-escola lhe parabeniza, lhe daremos a carteira.");
	}
	else if(ADTeste[playerid] == 18){
		SendClientMessage(playerid, COLOR_INSTRUTOR,"[AUTO-ESCOLA] Respeite as leis de trânsito. Aqui sua carteira:");
		KillTimer(TempoRua[playerid]);
		FazendoTesteRua[playerid] = 0;
		Chance[playerid] = 0;
		NoTeste[playerid] = 0;
		InstrutorOcupado[plid] = 0;
		if(GetPlayerServerMoney(playerid) >= 800){
		    pStats[playerid][HabTerrestre] = 1;
		    SendClientMessage(playerid, COLOR_WHITE, " ");
		    SendClientMessage(plid, COLOR_GREEN, "Habilitação de direção terrestre concedida.");
	        SendClientMessage(playerid, COLOR_WHITE, " ");
			SendClientMessage(playerid, COLOR_GREEN, "Você recebeu a habilitação de direção de carros e motos.");
			PlayerPay(playerid, plid, 800);
		} else {
			SendClientMessage(playerid, COLOR_GREEN, "Como não tem dinheiro em mão, a auto-escola fez débito automático.");
			pStats[playerid][Banco] -= 800;
			pStats[playerid][HabTerrestre] = 1;
		    SendClientMessage(playerid, COLOR_WHITE, " ");
		    SendClientMessage(plid, COLOR_GREEN, "Habilitação de direção terrestre concedida.");
	        SendClientMessage(playerid, COLOR_WHITE, " ");
			SendClientMessage(playerid, COLOR_GREEN, "Você recebeu a habilitação de direção de carros e motos.");
			AddPlayerMoney(plid, 800, 3);
		}
	}
	if(ADTeste[playerid] == 1 || ADTeste[playerid] == 3 || ADTeste[playerid] == 5 || ADTeste[playerid] == 7 || ADTeste[playerid] == 8
	 || ADTeste[playerid] == 10 || ADTeste[playerid] == 11 || ADTeste[playerid] == 12 || ADTeste[playerid] == 13 || ADTeste[playerid] == 14
	 || ADTeste[playerid] == 15 || ADTeste[playerid] == 17){
		SetTimerEx("AvancoDirecao",4000,0,"dd",playerid,plid);
	}
	return 1;
}

public TempoAutoRua(playerid,plid){
    new string[128];
	format(string, sizeof(string), "[TESTE] Sr. %s, você não conseguiu chegar no tempo marcado.", PlayerName(plid));
	SendPlayerMessageToPlayer(plid, playerid, string);
    format(string, sizeof(string), "[TESTE] Sr. %s, você não conseguiu chegar no tempo marcado.", PlayerName(plid));
	SendPlayerMessageToPlayer(playerid, playerid, string);
	KillTimer(TempoRua[plid]);
	if(Chance[plid] >= 1){
		Chance[plid] = Chance[plid] - 1;
		format(string, sizeof(string), "[TESTE] Sr. %s, seu teste será refeito. CHANCE: %d/3.", PlayerName(plid), Chance[plid]);
		SendPlayerMessageToPlayer(plid, playerid, string);
	    format(string, sizeof(string), "[TESTE] Sr. %s, seu teste será refeito. CHANCE: %d/3.", PlayerName(plid), Chance[plid]);
		SendPlayerMessageToPlayer(playerid, playerid, string);
		InstrutorRua[plid] = playerid;
	    SetVehicleToRespawn(GetPlayerVehicleID(plid));
	    ADTeste[playerid] --;
		SetTimerEx("AvancoDirecao",5000,0,"dd",playerid,plid);
	} else {
	    SendClientMessage(plid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Seu teste foi CANCELADO, você perdeu todas as chances, terá que refazer tudo novamemnte.");
		format(string, sizeof(string), "[AUTO-ESCOLA] O aprendiz %s perdeu todas as chances e seu teste foi cancelado!", PlayerName(playerid));
		SendClientMessage(playerid,COLOR_INSTRUTOR, string);
		Chance[playerid] = 0;
	    SetVehicleToRespawn(GetPlayerVehicleID(plid));
	    for(new a = 0; a < sizeof CarroAuto; a++)
		{
 			TrancarVeiculo(playerid, CarroAuto[a]);
 			SetVehicleToRespawn(CarroAuto[a]);
		}
	}
}

public CancelarAcordo(playerid){
	KillTimer(TempoLeisTransito[playerid]);
	if(LiAsLeis[playerid] == 1){
		SendClientMessage(playerid, COLOR_LIGHT_RED, "Seu teste foi cancelado, você não concordou com as leis no prazo devido.");
		NoTeste[playerid] = 0;
		LiAsLeis[playerid] = 0;
	}
}
public AreasAutoTestes(playerid){
    if(ParteAutoHabilitada[playerid] == 1){
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 410){
			new Float:h;
		    GetVehicleHealth(GetPlayerVehicleID(playerid),h);
			if(Chance[playerid] >= 1){
				if(h == 1000){
		 			if(IsVehicleInArea(GetPlayerVehicleID(playerid),1769.0464,-2077.6221,1775.7255,-2075.1553)){
						if(ProximoAoAngulo(playerid,90)){
		   				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				  		    SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] Parabéns! Parte (1/5) - BALIZA - concluída com sucesso. O teste prosseguirá...");
						    ParteAutoHabilitada[playerid] = 0;
							Chance[playerid] = 3;
						    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
							SetTimerEx("AutoTeste",4000,0,"d",playerid);
						}
					}
				} else {
					Chance[playerid] = Chance[playerid] - 1;
				    ParteAutoHabilitada[playerid] = 0;
				    SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] Seu carro está batido! O teste será refeito.");
				    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				    ParteAutoTeste[playerid] -= 2;
					SetTimerEx("AutoTeste",3000,0,"d",playerid);
				    return 1;
				}
			} else {
			    SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Seu teste foi CANCELADO, terá que fazer tudo denovo.");
                SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				ParteAutoHabilitada[playerid] = 0;
				Chance[playerid] = 0;
				NoTeste[playerid] = 0;
				for(new a = 0; a < sizeof CarroAuto; a++)
				{
 					TrancarVeiculo(playerid, CarroAuto[a]);
 					SetVehicleToRespawn(CarroAuto[a]);
				}
			}
		}
	}
    if(ParteAutoHabilitada[playerid] == 2){
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 410){
			new Float:h;
		    GetVehicleHealth(GetPlayerVehicleID(playerid),h);
			if(Chance[playerid] >= 1){
				if(h == 1000){
   					if(IsVehicleInArea(GetPlayerVehicleID(playerid),1807.8981,-2025.0101,1812.1422,-2021.3784)){
						if(ProximoAoAngulo(playerid,270)){
		   				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				  		    SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] Parabéns! Parte (2/5) - ZIG-ZAG - concluída com sucesso. O teste prosseguirá...");
						    ParteAutoHabilitada[playerid] = 0;
							Chance[playerid] = 3;
							SetVehicleToRespawn(GetPlayerVehicleID(playerid));
							SetTimerEx("AutoTeste",5000,0,"d",playerid);
						} else {
						    SendClientMessage(playerid, COLOR_WHITE, "[AUTO-ESCOLA] Você está com o carro torto, deixe-o reto.");
						    SetTimerEx("AreasAutoTestes",2000,false,"d",playerid);
						}
					}
				} else {
					Chance[playerid] = Chance[playerid] - 1;
				    ParteAutoHabilitada[playerid] = 0;
				    SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] Seu carro está batido! O teste será refeito.");
				    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				    ParteAutoTeste[playerid] -= 2;
					SetTimerEx("AutoTeste",3000,0,"d",playerid);
				    return 1;
				}
			} else {
			    SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Seu teste foi CANCELADO porque bateu muitas vezes, terá que fazer tudo denovo.");
                SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				ParteAutoHabilitada[playerid] = 0;
				FazendoAutoTesteRua[playerid] = 0;
				Chance[playerid] = 0;
				NoTeste[playerid] = 0;
				for(new a = 0; a < sizeof CarroAuto; a++)
				{
					TrancarVeiculo(playerid, CarroAuto[a]);
					SetVehicleToRespawn(CarroAuto[a]);
				}
			}
		}
	}
    if(ParteAutoHabilitada[playerid] == 3){
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 410){
		    new Float:h;
		    GetVehicleHealth(GetPlayerVehicleID(playerid),h);
			if(Chance[playerid] >= 1){
				if(h == 1000){
   				   	if(IsVehicleInArea(GetPlayerVehicleID(playerid),1797.1978,-2050,1800.7753,-2047.9780)){
						if(ProximoAoAngulo(playerid,87)){
		   				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				  		    SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] Parabéns! Parte (3/5) - 180º - concluída com sucesso.");
						    ParteAutoHabilitada[playerid] = 0;
		   				    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		   				    Chance[playerid] = 3;
      						SetTimerEx("AutoTeste",3000,0,"d",playerid);
						}
					}
				} else {
				    new string[128];
					Chance[playerid] = Chance[playerid] - 1;
				    ParteAutoHabilitada[playerid] = 0;
					format(string, sizeof(string), "[TESTE] Seu carro está batido! O teste será refeito. CHANCE: %d/3", Chance[playerid]);
					SendClientMessage(playerid,COLOR_INSTRUTOR, string);
				    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				    ParteAutoTeste[playerid]--;
					SetTimerEx("AutoTeste",3000,0,"d",playerid);
				    return 1;
				}
			} else {
			    SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Seu teste foi CANCELADO, terá que fazer tudo denovo.");
                SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				ParteAutoHabilitada[playerid] = 0;
				FazendoAutoTesteRua[playerid] = 0;
				Chance[playerid] = 0;
				NoTeste[playerid] = 0;
				for(new a = 0; a < sizeof CarroAuto; a++)
				{
					TrancarVeiculo(playerid, CarroAuto[a]);
					SetVehicleToRespawn(CarroAuto[a]);
				}
			}
		}
	}
    if(ParteAutoHabilitada[playerid] == 4){
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 521){
			new Float:h;
		    GetVehicleHealth(GetPlayerVehicleID(playerid),h);
			if(Chance[playerid] >= 1){
				if(h == 1000){
   					if(IsVehicleInArea(GetPlayerVehicleID(playerid),1774.2667,-2028.1365,1775.6932,-2027.4597)){
	   				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			  		    SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] Parabéns! Parte (4/5) - Moto Zig - concluída com sucesso.");
					    ParteAutoHabilitada[playerid] = 0;
						Chance[playerid] = 3;
						SetVehicleToRespawn(GetPlayerVehicleID(playerid));
						SetTimerEx("AutoTeste",4000,0,"d",playerid);

					}
				} else {
				    new string[128];
					Chance[playerid] = Chance[playerid] - 1;
				    ParteAutoHabilitada[playerid] = 0;
					format(string, sizeof(string), "[TESTE] Sua moto está danificada. O teste será refeito. CHANCE: %d/3", Chance[playerid]);
					SendClientMessage(playerid,COLOR_INSTRUTOR, string);
				    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				    ParteAutoTeste[playerid]--;
					SetTimerEx("AutoTeste",3000,0,"d",playerid);
				    return 1;
				}
			} else {
			    SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Seu teste foi CANCELADO, você perdeu todas as chances, terá que refazer tudo novamemnte.");
				ParteAutoHabilitada[playerid] = 0;
				Chance[playerid] = 0;
				NoTeste[playerid] = 0;
			    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				for(new a = 0; a < sizeof CarroAuto; a++)
				{
					TrancarVeiculo(playerid, CarroAuto[a]);
					SetVehicleToRespawn(CarroAuto[a]);
				}
			}
		}
	}
	if(ParteAutoHabilitada[playerid] > 0){
		SetTimerEx("AreasAutoTestes",2000,false,"d",playerid);
		return 1;
	}
	return 1;
}

public LeisTerrestre(playerid){
	ParteTerrestreTest[playerid] ++;
	SendClientMessage(playerid, COLOR_INSTRUTOR, " ");
	if(ParteTerrestreTest[playerid] == 1){
		NoTeste[playerid] = 1;
		SetPlayerPos(playerid,-2025.5607,-116.6583,1035.1719);
		SetPlayerInterior(playerid,3);
		SetPlayerControl(playerid, 0);
		SetPlayerFacingAngle(playerid, 270);
	}
	else if(ParteTerrestreTest[playerid] == 2){
		SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] Sr. você está iniciando seu teste para tirar a habilitação terrestre.");
	}
	else if(ParteTerrestreTest[playerid] == 3){
    	SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] Aqui vão alguns leis impostas pelo Juiz para a boa conduta no trânsito de Los Santos:");
	}
	else if(ParteTerrestreTest[playerid] == 4){
		SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] 1º- Não dirigir em alta velocidade.");
	}
	else if(ParteTerrestreTest[playerid] == 5){
		SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] 2º- Não fazer ultrapassagens perigosas.");
	}
	else if(ParteTerrestreTest[playerid] == 6){
		SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] 3º- Não dirigir em mão dupla ou na contra-mão.");
	}
	else if(ParteTerrestreTest[playerid] == 7){
		SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] 4º- Parar o carro quando a polícia mandar.");
	}
	else if(ParteTerrestreTest[playerid] == 8){
		SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] 5º- Não bater em postes/carros/objetos e ATROPELAR pessoas.");
	}
	else if(ParteTerrestreTest[playerid] == 9){
		SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] 6º- Respeitar os outros motoristas/policiais.");
	}
	else if(ParteTerrestreTest[playerid] == 10){
		SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] 7º- Respeitar o limite de velocidade imposta pelos Radares.");
	}
	else if(ParteTerrestreTest[playerid] == 11){
		SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] 8º- Não estacionar na rua/calçadas/lojas e na frente de uma casa que não seje sua.");
	}
	else if(ParteTerrestreTest[playerid] == 12){
		SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] 9º- Não andar com veículos que a documentação dele não seje sua.");
	}
	else if(ParteTerrestreTest[playerid] == 13){
		SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] 10º- Não ingerir bebidas antes de dirigir.");
	}
	else if(ParteTerrestreTest[playerid] == 14){
 		SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] Sr. caso concorde com as leis de trânsinto imposta pelo Estado de Los Santos");
		SendClientMessage(playerid, COLOR_INSTRUTOR, "Digite: /concordo , caso contrário /discordo.");
		LiAsLeis[playerid] = 1;
		ParteTerrestreTest[playerid] = 0;
		SetPlayerControl(playerid, 1);
		TempoLeisTransito[playerid] = SetTimerEx("CancelarAcordo",60000,0,"d",playerid);
	}
	if(ParteTerrestreTest[playerid]  != 0){
		SetTimerEx("LeisTerrestre",4000,0,"d",playerid);
		SendClientMessage(playerid, COLOR_INSTRUTOR, " ");
	}
	return 1;
}


public AutoTeste(playerid){
	ParteAutoTeste[playerid] ++;
	if(ParteAutoTeste[playerid] == 1){
		SetPlayerPos(playerid,1746.6401,-2061.8796,13.5998);
		SetPlayerInterior(playerid,0);
		SetPlayerControl(playerid, 0);
	}
	else if(ParteAutoTeste[playerid] == 2){
		for(new a = 0; a < sizeof CarroAuto; a++){
	 		DestrancarVeiculo(playerid, CarroAuto[a]);
		}
		SendClientMessage(playerid, COLOR_INSTRUTOR, " ");
		SendClientMessage(playerid,COLOR_INSTRUTOR, "[TESTE] Este carro posicionado na sua frente é o carro da baliza.");
		SendClientMessage(playerid,COLOR_INSTRUTOR, "[TESTE] Coloque ele entre os 2 veículos, eu avisarei quando a vaga for preenchida.");
		SetPlayerControl(playerid, 1);
		ParteAutoHabilitada[playerid] = 1;
		Chance[playerid] = 3;
		TimerAuto[playerid] = SetTimerEx("AreasAutoTestes",2000,false,"d",playerid);
	}
	else if(ParteAutoTeste[playerid] == 3){
		SetPlayerControl(playerid, 0);
		SetPlayerPos(playerid,1769.4495,-2020.7175,14.1371);
	}
	else if(ParteAutoTeste[playerid] == 4){
		SendClientMessage(playerid, COLOR_INSTRUTOR, " ");
		SendClientMessage(playerid,COLOR_INSTRUTOR, "[TESTE] Agora terá que passar entre os cones e não bater. Caso destrua algum o teste será refeito.");
		SetPlayerControl(playerid, 1);
		ParteAutoHabilitada[playerid] = 2;
		Chance[playerid] = 3;
		TimerAuto[playerid] = SetTimerEx("AreasAutoTestes",2000,false,"d",playerid);
	}
	else if(ParteAutoTeste[playerid] == 5){
		SetPlayerPos(playerid,1782.2482,-2041.4044,13.5332);
		SetPlayerControl(playerid, 0);
	}
	else if(ParteAutoTeste[playerid] == 6){
		SendClientMessage(playerid, COLOR_INSTRUTOR, " ");
		SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] Sr. agora terá que fazer um 180º e estacionar o carro.");
		SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] Lembre-se não encoste nos cones.");
		SetPlayerControl(playerid, 1);
		ParteAutoHabilitada[playerid] = 3;
		Chance[playerid] = 3;
		TimerAuto[playerid] = SetTimerEx("AreasAutoTestes",2000,false,"d",playerid);
	}
	else if(ParteAutoTeste[playerid] == 7){
		SetPlayerPos(playerid,1770.1658,-2055.2468,13.5829);
		SetPlayerControl(playerid, 0);
	}
	else if(ParteAutoTeste[playerid] == 8){
		SendClientMessage(playerid, COLOR_INSTRUTOR, " ");
		SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] Sr. esta moto posicionado na sua frente, é o veiculo o qual.");
		SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] você terá que fazer Zig-Zag, entre os cones.");
	}
	else if(ParteAutoTeste[playerid] == 9){
		SetPlayerControl(playerid, 1);
		ParteAutoHabilitada[playerid] = 4;
		SendClientMessage(playerid, COLOR_INSTRUTOR, " ");
		SendClientMessage(playerid, COLOR_INSTRUTOR, "Suba na moto e faça o Zig-Zag e estacione a moto na pequena área. Lembre-se: Não encoste nos cones.");
		SendClientMessage(playerid, COLOR_INSTRUTOR, "Lembre-se pare a moto no cone central! Se não der, tente dinovo!");
		Chance[playerid] = 3;
		TimerAuto[playerid] = SetTimerEx("AreasAutoTestes",2000,true,"d",playerid);
	}
	else if(ParteAutoTeste[playerid] == 10){
		SetPlayerPos(playerid,1770.1658,-2055.2468,13.5829);
		SetPlayerControl(playerid, false);
	}
	else if(ParteAutoTeste[playerid] == 11){
		SendClientMessage(playerid, COLOR_INSTRUTOR, " ");
		SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] Sr. você passou nos testes internos da auto-escola.");
		SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] agora iremos para a rua aonde, você terminará seu teste.");
		SendClientMessage(playerid, COLOR_INSTRUTOR, " ");
		Chance[playerid] = 3;
		SetTimerEx("AutoTeste",2000,0,"d",playerid);
	}
	else if(ParteAutoTeste[playerid] == 12){
		for(new a = 0; a < sizeof CarroAuto; a++){
	 		DestrancarVeiculo(playerid, CarroAuto[a]);
		}
		SetPlayerPos(playerid,1806.0035,-2064.2908,13.5606);
		SetPlayerControl(playerid, false);
	}
	else if(ParteAutoTeste[playerid] == 13){
		SendClientMessage(playerid, COLOR_INSTRUTOR, " ");
		SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] Sr., este carro na sua frente é o carro que você terá que levar até");
		SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] a BOATE, marcada no radar com um ícone vermelho.");
		SendClientMessage(playerid, COLOR_INSTRUTOR, " ");
	}
	else if(ParteAutoTeste[playerid] == 14){
		SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] OBS: Você não poderá bater, caso bata o teste será refeito.");
	}
	else if(ParteAutoTeste[playerid] == 15){
		SendClientMessage(playerid, COLOR_INSTRUTOR, " ");
	    SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] Lembre-se: não leve nenhuma multa!");
		SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Vá para a boate, o ponto vermelho mostrará aonde é. Você tem 4 minutos.");
		SendClientMessage(playerid, COLOR_INSTRUTOR, " ");
		TempoRua[playerid] = SetTimerEx("TempoRuaTeste",242000,0,"d",playerid);
		FazendoAutoTesteRua[playerid] = 1;
	}
	else if(ParteAutoTeste[playerid] == 16){
		SetPlayerControl(playerid, true);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		SetPlayerCheckpoint(playerid,2423.5527,-1229.9398,24.8702,10.0);
		CheckpointStatus[playerid] = TESTE_AUTO_ESCOLA_BOATE;
	}
	else if(ParteAutoTeste[playerid] == 17){
	    for(new a = 0; a < sizeof CarroAuto; a++)
		{
	 		TrancarVeiculo(playerid, CarroAuto[a]);
	 		SetVehicleToRespawn(CarroAuto[a]);
		}
		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		SendClientMessage(playerid, COLOR_INSTRUTOR,"[AUTO-ESCOLA] A auto-escola lhe parabeniza, lhe daremos a carteira.");
		return 1;
	}
	else if(ParteAutoTeste[playerid] == 18){
		SendClientMessage(playerid, COLOR_INSTRUTOR,"[AUTO-ESCOLA] Respeite as leis de trânsito. Aqui sua carteira:");
		KillTimer(TempoRua[playerid]);
		KillTimer(TimerAuto[playerid]);
		FazendoAutoTesteRua[playerid] = 0;
		Chance[playerid] = -1;
		NoTeste[playerid] = 0;
		JaExisteAuto = 0;
		AceitouTeste[playerid] = 0;
		if(GetPlayerServerMoney(playerid) >= 800){
		    pStats[playerid][HabTerrestre] = 1;
		    SendClientMessage(playerid, COLOR_WHITE, " ");
	        SendClientMessage(playerid, COLOR_WHITE, " ");
			SendClientMessage(playerid, COLOR_GREEN, "Você recebeu a habilitação de direção de carros e motos.");
	  		AddPlayerMoney(playerid, -800, -1);
		} else {
			SendClientMessage(playerid, COLOR_GREEN, "Como não tem dinheiro em mão, a auto-escola fez débito automático.");
			pStats[playerid][Banco] -= 800;
			pStats[playerid][HabTerrestre] = 1;
		    SendClientMessage(playerid, COLOR_WHITE, " ");
	        SendClientMessage(playerid, COLOR_WHITE, " ");
			SendClientMessage(playerid, COLOR_GREEN, "Você recebeu a habilitação de direção de carros e motos.");
		}
	}
	if(ParteAutoTeste[playerid] == 1 || ParteAutoTeste[playerid] == 3 || ParteAutoTeste[playerid] == 5 || ParteAutoTeste[playerid] == 7
		|| ParteAutoTeste[playerid] == 8 || ParteAutoTeste[playerid] == 10 || ParteAutoTeste[playerid] == 11 || ParteAutoTeste[playerid] == 12
	  	|| ParteAutoTeste[playerid] == 13 || ParteAutoTeste[playerid] == 14 || ParteAutoTeste[playerid] == 15|| ParteAutoTeste[playerid] == 17){
		SetTimerEx("AutoTeste",4000,0,"d",playerid);
	}
	return 1;
}

public TempoRuaTeste(playerid){
	SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] Você não conseguiu chegar no tempo marcado.");
	if(Chance[playerid] >= 1){
		new string[128];
		Chance[playerid] = Chance[playerid] - 1;
		format(string, sizeof(string), "[TESTE] Seu teste será refeito. CHANCE: %d/3.", Chance[playerid]);
		SendClientMessage(playerid, COLOR_INSTRUTOR, string);
	    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	    ParteAutoTeste[playerid]--;
		SetTimerEx("AutoTeste",5000,0,"d",playerid);
	} else if(Chance[playerid] == 0){
	    SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Seu teste foi CANCELADO, você perdeu todas as chances, terá que refazer tudo novamemnte.");
		Chance[playerid] = 0;
	    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	    for(new a = 0; a < sizeof CarroAuto; a++)
		{
 			TrancarVeiculo(playerid, CarroAuto[a]);
 			SetVehicleToRespawn(CarroAuto[a]);
		}
	}
}
public LeisAereas(playerid, plid){
	new string[128];
	ParteLendoLeisA[playerid] ++;
	InstrutorOcupado[plid] = 1;
	if(ParteLendoLeisA[playerid] == 1){
		SetPlayerPos(plid,-2021.8313,-115.8208,1035.1719);
		SetPlayerPos(playerid,-2025.5607,-116.6583,1035.1719);
		SetPlayerInterior(playerid,3);
		SetPlayerInterior(plid,3);
		SetPlayerControl(playerid, 0);
		SetPlayerControl(plid, 0);
		SetPlayerFacingAngle(plid, 90);
		SetPlayerFacingAngle(playerid, 270);
		SetTimerEx("LeisAereas",3000,0,"dd",playerid,plid);
	}
	if(ParteLendoLeisA[playerid] == 2){
		format(string, sizeof(string), "[TESTE] Sr. %s você está iniciando seu teste para tirar a habilitação áerea.", PlayerName(playerid));
		SendPlayerMessageToPlayer(playerid, plid, string);
	    format(string, sizeof(string), "[TESTE] Sr. %s você está iniciando seu teste para tirar a habilitação áerea.", PlayerName(playerid));
		SendPlayerMessageToPlayer(plid, plid, string);
		SetTimerEx("LeisAereas",4000,0,"dd",playerid,plid);
		return 1;
	}
	if(ParteLendoLeisA[playerid] == 3){
		SendPlayerMessageToPlayer(playerid, plid, "[TESTE] A seguir lhe direi como são as Leis Áereas imposta pelo Juiz Federal, para a boa circulação do tráfego áereo:");
		SendPlayerMessageToPlayer(plid, plid,"[TESTE] A seguir lhe direi como são as Leis Áereas imposta pelo Juiz Federal, para a boa circulação do tráfego áereo:");
		SetTimerEx("LeisAereas",4000,0,"dd",playerid,plid);
		return 1;
	}
	if(ParteLendoLeisA[playerid] == 4){
		SendPlayerMessageToPlayer(playerid, plid, "[TESTE] 1º - Não poderá pilotar embreagado ou drogada, nem transportar nenhum material proibido.");
		SendPlayerMessageToPlayer(plid, plid,"[TESTE] 1º - Não poderá pilotar embreagado ou drogada, nem transportar nenhum material proibido.");
		SetTimerEx("LeisAereas",4000,0,"dd",playerid,plid);
		return 1;
	}
	if(ParteLendoLeisA[playerid] == 5){
		SendPlayerMessageToPlayer(playerid, plid, "[TESTE] 2º - Não poderá fazer voos razantes, acrobacias em cidades oferecendo risco aos monumentos e cidadadões da cidade.");
		SendPlayerMessageToPlayer(plid, plid,"[TESTE] 2º - Não poderá fazer voos razantes, acrobacias em cidades oferecendo risco aos monumentos e cidadadões da cidade.");
		SetTimerEx("LeisAereas",4000,0,"dd",playerid,plid);
		return 1;
	}
	if(ParteLendoLeisA[playerid] == 6){
		SendPlayerMessageToPlayer(playerid, plid, "[TESTE] 3º - Não poderá pousar em vias públicos a não ser que seja de alguma Força Emergencial ( Polícia e Paramédicos ).");
		SendPlayerMessageToPlayer(plid, plid,"[TESTE] 3º - Não poderá pousar em vias públicos a não ser que seja de alguma Força Emergencial ( Polícia e Paramédicos ).");
		SetTimerEx("LeisAereas",4000,0,"dd",playerid,plid);
		return 1;
	}
	if(ParteLendoLeisA[playerid] == 7){
		SendPlayerMessageToPlayer(playerid, plid, "[TESTE] 4º - Respeitar os policiais que solicitarem documentação, eles poderão solicitar que pouse o avião.");
		SendPlayerMessageToPlayer(plid, plid,"[TESTE] 4º - Respeitar os policiais que solicitarem documentação, eles poderão solicitar que pouse o avião.");
		SetTimerEx("LeisAereas",4000,0,"dd",playerid,plid);
		return 1;
	}
	if(ParteLendoLeisA[playerid] == 8){
		SendPlayerMessageToPlayer(playerid, plid, "[TESTE] 5º - Checar avião antes de decolar, motor e gasolina para não afetar o meio-ambiente.");
		SendPlayerMessageToPlayer(plid, plid,"[TESTE] 5º - Checar avião antes de decolar, motor e gasolina para não afetar o meio-ambiente.");
		SetTimerEx("LeisAereas",4000,0,"dd",playerid,plid);
		return 1;
	}
	if(ParteLendoLeisA[playerid] == 9){
		format(string, sizeof(string), "[TESTE] Sr. %s caso concorde com as leis áereas imposta pelo Estado Federal de San Andreas.", PlayerName(playerid));
		SendPlayerMessageToPlayer(playerid, plid, string);
		SendPlayerMessageToPlayer(playerid, plid, "Digite: /concordo , caso contrário /discordo.");
		format(string, sizeof(string), "[TESTE] Sr. %s caso concorde com as leis áereas imposta pelo Estado Federal de San Andreas.", PlayerName(playerid));
		SendPlayerMessageToPlayer(plid, plid, string);
		SendPlayerMessageToPlayer(plid, plid, "Digite: /concordo , caso contrário /discordo.");
		ParteLendoLeisA[playerid] = 20;
		LiAsLeis[playerid] = 1;
		SetPlayerControl(playerid, 1);
		SetPlayerControl(plid, 1);
		TempoLeisTransito[playerid] = SetTimerEx("DesfazerAcordo",60000,0,"dd",playerid,plid);
		InstrutorNovo[playerid] = plid;
		return 1;
	}
	return 1;
}

public TesteAereo(playerid, plid){
	ParteFLTest[playerid]++;
	if(ParteFLTest[playerid] == 1){
	    SetPlayerPos(playerid, 1677.3557,-2447.2202,13.5547);
	    SetPlayerPos(plid, 1674.7834,-2449.2466,13.5547);
		SetPlayerInterior(playerid, 0);
		SetPlayerControl(playerid, true);
 		SetPlayerInterior(plid, 0);
		SendPlayerMessageToPlayer(playerid, plid, "[TESTE] Entre no avião, acelere e decole o avião seguindo os CheckPoints, vamos sobrevoar Los Santos.");
		SendPlayerMessageToPlayer(plid, plid,"[TESTE] Entre no avião, acelere e decole o avião seguindo os CheckPoints, vamos sobrevoar Los Santos.");
		PutPlayerInVehicle(playerid, Piloto[3], 0);
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid, 3, 1458.2427,-2493.7332,14.4762,0.0,0.0,0.0,20.0);
		RaceCheckpointStatus[playerid] = CPTESTEAEREO;
		TogglePlayerSpectating(playerid, 1);
		PlayerSpectateVehicle(plid,Piloto[3]);
	}
	if(ParteFLTest[playerid] == 2){
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid, 3, 759.8234,-1702.5314,93.2056,0.0,0.0,0.0,20.0);
		RaceCheckpointStatus[playerid] = CPTESTEAEREO;
		SendPlayerMessageToPlayer(playerid, plid, "[TESTE] Vamos voar, passe pelo checkpoint e puxe o Leme para que possamos ganhar altura.");
		SendPlayerMessageToPlayer(plid, plid, "[TESTE] Vamos voar, passe pelo checkpoint e puxe o Leme para que possamos ganhar altura.");
	}
	if(ParteFLTest[playerid] == 3){
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid, 3,  -2512.2625,462.0043,160.2562,0.0,0.0,0.0,20.0);
		RaceCheckpointStatus[playerid] = CPTESTEAEREO;
		SendPlayerMessageToPlayer(playerid, plid, "[TESTE] Matenha a altitude para não perdemos estabilidade.");
		SendPlayerMessageToPlayer(plid, plid, "[TESTE] Matenha a altitude para não perdemos estabilidade.");
	}
	if(ParteFLTest[playerid] == 4){
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid, 3,  -2525.2605,2293.4124,135.2361,0.0,0.0,0.0,20.0);
		RaceCheckpointStatus[playerid] = CPTESTEAEREO;
		SendPlayerMessageToPlayer(playerid, plid, "[TESTE] Estamos agora sobrevoando San Fierro, observe a altura.");
		SendPlayerMessageToPlayer(plid, plid, "[TESTE] Estamos agora sobrevoando San Fierro, observe a altura.");
	}
	if(ParteFLTest[playerid] == 5){
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid, 3,  1388.0432,1347.4778,10.7138,0.0,0.0,0.0,20.0);
		RaceCheckpointStatus[playerid] = CPTESTEAEREO;
		SendPlayerMessageToPlayer(playerid, plid, "[TESTE] Ok, saindo de San Fierro, logo estaremos em Angel Pine e chegaremos em Las Venturas.");
		SendPlayerMessageToPlayer(plid, plid, "[TESTE] Ok, saindo de San Fierro, logo estaremos em Angel Pine e chegaremos em Las Venturas.");
	}
	if(ParteFLTest[playerid] == 6){
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid, 3,  1477.8051,1320.5090,10.7132,0.0,0.0,0.0,20.0);
		RaceCheckpointStatus[playerid] = CPTESTEAEREO;
		SendPlayerMessageToPlayer(playerid, plid, "[TESTE] Sobrevoando Las Venturas.");
		SendPlayerMessageToPlayer(plid, plid, "[TESTE] Sobrevoando Las Venturas.");
	}
	if(ParteFLTest[playerid] == 7){
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid, 3,  391.3134,2503.2524,16.3773,0.0,0.0,0.0,20.0);
		RaceCheckpointStatus[playerid] = CPTESTEAEREO;
		SendPlayerMessageToPlayer(playerid, plid, "[TESTE] Pilote com cuidado estamos próximo a uma área Militar.");
		SendPlayerMessageToPlayer(plid, plid, "[TESTE] Pilote com cuidado estamos próximo a uma área Militar.");
	}
	if(ParteFLTest[playerid] == 8){
		DisablePlayerRaceCheckpoint(playerid);
		SetPlayerRaceCheckpoint(playerid, 4,  1974.3586,-2594.1790,13.4428,0.0,0.0,0.0,20.0);
		RaceCheckpointStatus[playerid] = CPTESTEAEREO;
		SendPlayerMessageToPlayer(playerid, plid, "[TESTE] Vamos voltar ao Aeroporto Internacional de Los Santos para que possa apresentar seus resultados.");
		SendPlayerMessageToPlayer(plid, plid, "[TESTE] Vamos voltar ao Aeroporto Internacional de Los Santos para que possa apresentar seus resultados.");
	}
	if(ParteFLTest[playerid] == 9){
		SendPlayerMessageToPlayer(playerid, plid, "[TESTE] Ok. Pare o avião... pouse perfeitamente para que não tenha dúvida no seu relatório.");
		SendPlayerMessageToPlayer(plid, plid, "[TESTE] Ok. Pare o avião... pouse perfeitamente para que não tenha dúvida no seu relatório.");
		DisablePlayerCheckpoint(playerid);
		CheckpointStatus[playerid] = NONE;
		SetTimerEx("TesteAereo",8000,0,"dd",playerid, plid);
	}
	if(ParteFLTest[playerid] == 10){
		DisablePlayerCheckpoint(playerid);
		CheckpointStatus[playerid] = NONE;
		TrancarVeiculo(playerid, Piloto[3]);
		SetVehicleToRespawn(Piloto[3]);
		new Float:x,Float:y,Float:z;
		GetPlayerPos(playerid,x,y,z);
		TogglePlayerSpectating(playerid,0);
		SetPlayerPos(plid,x,y,z);
		new Float:vHealth;
		GetVehicleHealth(GetPlayerVehicleID(playerid),vHealth);
		if(vHealth < 950){
			SendClientMessage(playerid, COLOR_INSTRUTOR, "Você falhou no seu teste, ele está danificado, poderá tentar novamente fale com o instrutor.");
			SendClientMessage(plid, COLOR_INSTRUTOR, "Ele falhou no teste, o avião está danificado.");
			InstrutorOcupado[plid] = 0;
			ParteLendoLeisA[playerid] = 0;
			ParteFLTest[playerid] = 0;
		}
		
		SendClientMessage(playerid, COLOR_INSTRUTOR,"[AUTO-ESCOLA] A air-escola lhe parabeniza, lhe daremos a habilitação áerea parabéns.");
		SendClientMessage(plid, COLOR_INSTRUTOR,"[AUTO-ESCOLA] Ok, seu aluno passou em todos os testes, ele receberá a carteira.");
		SetTimerEx("TesteAereo",3000,0,"dd",playerid, plid);
	}
	if(ParteFLTest[playerid] == 11){
		InstrutorOcupado[plid] = 0;
		ParteLendoLeisA[playerid] = 0;
		ParteFLTest[playerid] = 0;
		if(GetPlayerServerMoney(playerid) >= 2400){
		    pStats[playerid][HabAerea] = 1;
		    SendClientMessage(playerid, COLOR_WHITE, " ");
	        SendClientMessage(playerid, COLOR_WHITE, " ");
			SendClientMessage(playerid, COLOR_GREEN, "Você recebeu a habilitação para pilotar aviões e helicopteros.");
	  		AddPlayerMoney(playerid, -2400, -1);
		} else {
			SendClientMessage(playerid, COLOR_GREEN, "Como não tem dinheiro em mão, a auto-escola fez débito automático em sua conta.");
			pStats[playerid][Banco] -= 2400;
			pStats[playerid][HabAerea] = 1;
		    SendClientMessage(playerid, COLOR_WHITE, " ");
	        SendClientMessage(playerid, COLOR_WHITE, " ");
			SendClientMessage(playerid, COLOR_GREEN, "Você recebeu a habilitação para pilotar aviões e helicopteros.");
		}
		return 0;
	}
	return 1;
}


public SavePCVPJGO(){
	new c=0;
	while(c<LastCasa){
	    SavePickup(c);
	    c++;
	}
	new p=1;
	while(p<sizeof Propriedades){
	    SaveProperty(p);
	    p++;
	}
	new v=0;
	while(v<AmountServerVehicles + AmountPlayerVehicles){
	    if(!fexist(VehicleFile(v))) break;
     	SaveVehicle(v);
	    v++;
	}
	SaveHotelFile();
	SaveJornais();
	SaveGangues();
    SaveCell("Utilidades/celulares.rpg");
    SalvarPastaGangZones("Utilidades/zones.rpg");
    SavePastaUtilitarios("Utilidades/utilitarios.cfg");
}
public AnunciarPropeComu(){
	VerOutrosAvisos = VerOutrosAvisos + 1;
	new propaganda = random(3);
	if(propaganda == 0){
	    SendClientMessageTV(COLOR_WHITE, "|==================| BALADA |==================|");
		SendClientMessageTV(COLOR_LIGHT_RED, "Cansado de não ter o que fazer? Todo dia a mesma coisa de voltar pro trabalho e ficar andando procurando algo?");
		SendClientMessageTV(COLOR_LIGHT_RED, "Seus problemas ACABARAM... Venha até a Balada, aqui temos danças, músicas, petiscos, tudo para você aproveitar!");
	}
	else if(propaganda == 1){
	    SendClientMessageTV(COLOR_WHITE, "|==================| ESTÁDIO |==================|");
	    SendClientMessageTV(COLOR_JORNALISTA, "Amantes do esporte, venham curtir conosco nossos grandes campeonatos de Derby!");
	    SendClientMessageTV(COLOR_JORNALISTA, "são realizados todas quartas e sábados, contamos com sua presença, você poderá ser o novo campeão!");
	}
	else if(propaganda == 2){
	    SendClientMessageTV(COLOR_WHITE, "|==================| RESTAURANTE |==================|");
		SendClientMessageTV(COLOR_LIGHT_GREEN, "Com fome? Venha para o Restaurante Life's'FOOD, aqui temos comidas, sobremesas, bebidas, sucos tudo para lhe agradar!");
		SendClientMessageTV(COLOR_LIGHT_GREEN, "E tudo por um preço tão baixo, que você nem vai acreditar!");
	}
	else if(propaganda == 3){
	    SendClientMessageTV(COLOR_WHITE, "|==================| CENTRAL 24/7 |==================|");
	    SendClientMessageTV(COLOR_COP_SWAT, "Venha conhecer nossas lojas: Eletrodomésticos, celulares, recargas, tudo aquilo que você sempre quis por");
	    SendClientMessageTV(COLOR_COP_SWAT, "um preço muito baixo, domingo haverá promoção, se comprar um celular ele virá recarregado com 30 créditos, aproveite!");
		SendClientMessageTV(COLOR_COP_SWAT, "Está esperando o que? VENHA!");
	}
	else if(propaganda == 4){
	    SendClientMessageTV(COLOR_WHITE, "|==================| SORVETERIA |==================|");
		SendClientMessageTV(COLOR_CLEAR_PINK, "Calor? Que tal se refrescar com um delicioso sorvete? Se quiser venha até a sorveteria!");
		SendClientMessageTV(COLOR_CLEAR_PINK, "aqui temos alimentos deliciosos com preços baixos, você não pode perder!");
	}
	SendClientMessageTV(COLOR_WHITE, "|==============================================================|");
	if(VerOutrosAvisos == 15 || VerOutrosAvisos == 29){
		for(new i = 0; i < MAX_SLOTS; i++){
			if(IsPlayerConnected(i) && Logado[i] == 1 && pStats[i][HistoriaFeita] == 1 && pStats[i][Preso] == 0 && CheckpointStatus[i] == NONE){
				PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
			}
		}
		SendClientMessageToAll(COLOR_LIGHT_RED, " ");
		SendClientMessageToAll(COLOR_TITULO_AVISO, "|=========================| Virtual Life RPG informa: |=========================|");
		SendClientMessageToAll(COLOR_WHITE, "Para ficar sabendo de algo a mais do Virtual Life RPG digite: /maisvirtual.");
		ValorAlgoMais = random(43);
		SendClientMessageToAll(COLOR_TITULO_AVISO, "|___________________________________________________________________________|");
		SendClientMessageToAll(COLOR_WHITE, " ");
	}
	if(VerOutrosAvisos == 30){
	    VerOutrosAvisos = 0;
		new comu = random(4);
		if(comu == 0){
			SendClientMessageToAll(COLOR_ORANGE, " ");
			SendClientMessageToAll(COLOR_ORANGE, "Reload Virtual Life RPG:");
			SendClientMessageToAll(COLOR_CONTRABANDISTA, "Mais informações sobre o Mode? Sugestões? Dúvidas? Acesse:");
			SendClientMessageToAll(0xFFB4F4AA, "http://www.orkut.com/Community.aspx?cmm=45269704");
	        SendClientMessageToAll(COLOR_ORANGE, " ");
		}
		else if(comu == 1){
		    SendClientMessageToAll(COLOR_ORANGE, " ");
		    SendClientMessageToAll(COLOR_WHITE, "Reload Virtual Life RPG mais que um RPG, UMA VIDA!");
		    SendClientMessageToAll(COLOR_PALHA, "Entre em nossa comunidade:");
		    SendClientMessageToAll(COLOR_CONTRABANDISTA, "http://www.orkut.com/Community.aspx?cmm=45269704");
		    SendClientMessageToAll(COLOR_PALHA, "Dê idéias/sugestões e obtenha mais informações sobre o mode!");
	        SendClientMessageToAll(COLOR_ORANGE, " ");
		}
		else if(comu == 2){
		    SendClientMessageToAll(COLOR_ORANGE, " ");
		    SendClientMessageToAll(COLOR_WHITE, "Reload Virtual Life RPG:");
		    SendClientMessageToAll(COLOR_PALHA, "Não gostou do mode? Acha que está faltando algo?");
		    SendClientMessageToAll(COLOR_CONTRABANDISTA, "Acesse:");
			SendClientMessageToAll(COLOR_CONTRABANDISTA, "http://www.orkut.com/Community.aspx?cmm=45269704");
		    SendClientMessageToAll(COLOR_LIGHT_GREEN, "Aí você poderá obter informações sobre o gamemode e ainda poderá sugerir idéias para ele.");
	        SendClientMessageToAll(COLOR_ORANGE, " ");
		}
		else if(comu == 3){
		    SendClientMessageToAll(COLOR_ORANGE, " ");
		    SendClientMessageToAll(COLOR_LIGHT_RED, "Reload Virtual Life RPG:");
		    SendClientMessageToAll(COLOR_WHITE, "Veja as novidades do gamemode em: /sistemas , /novidades , /rpglife");
		    SendClientMessageToAll(COLOR_WHITE, "Você também pode acessar nosso site e visitar nossa comunidade no orkut para dar idéias/sugestões, toda idéia será bem-vinda se for original!");
		    SendClientMessageToAll(COLOR_CONTRABANDISTA, "Site: http://www.orkut.com/Community.aspx?cmm=45269704");
		    SendClientMessageToAll(COLOR_ORANGE, " ");
		}
	}
}

public GetPlayerDistanceToPoint(playerid,Float:x,Float:y)
{
	new Float:x1,Float:y1,Float:z1;
	new Float:tmpdis;
	GetPlayerPos(playerid,x1,y1,z1);
	tmpdis = floatsqroot(floatpower(floatabs(floatsub(x,x1)),2)+floatpower(floatabs(floatsub(y,y1)),2));
	return floatround(tmpdis);
}

stock QtProf(prof){
	new result = 0;
	for(new i = 0; i < MAX_SLOTS; i++){
	    if(IsPlayerConnected(i) && pStats[i][Prof] == prof) result++;
	}
	return result;
}

stock Salario(playerid){
    if(IsPlayerConnected(playerid) && Logado[playerid] == 1) {
		if(fexist(PlayerFile(PlayerName(playerid)))){
			new str[128];
			SendClientMessage(playerid, COLOR_WHITE, " ");
			SendClientMessage(playerid, COLOR_WHITE, " ");
			format(str, sizeof str, "[BANCO] Seu dia de trabalho foi depositado em sua conta bancária: $%d,00 dólares.", Profissoes[pStats[playerid][Prof]][ProfPay]);
			SendClientMessage(playerid, COLOR_BLUE_PLUS, str);
			format(str, sizeof(str), "~g~$~w~%d", Profissoes[pStats[playerid][Prof]][ProfPay]);
			GameTextForPlayer(playerid, str, 5000, 1);
			pStats[playerid][BancoTrabalho] += Profissoes[pStats[playerid][Prof]][ProfPay];
			if(pStats[playerid][Prof] == COP_SWAT || pStats[playerid][Prof] == COP_RODOVIARIO || pStats[playerid][Prof] == COP_MILITAR || pStats[playerid][Prof] == DELEGADO){
				pStats[playerid][Xpoints] ++;
			} else if(pStats[playerid][Prof] == SEGURANÇA || pStats[playerid][Prof] == MOTORISTA_PARTICULAR || pStats[playerid][Prof] == FRENTISTA){
				pStats[playerid][Xpoints] ++;
			}
		}
		else{
			printf("ERRO: %s nao conseguiu receber o salario pois seu arquivo nao foi encontrado pelo sistema.",PlayerName(playerid));
		}
	}
}

stock IsValidSkin(skin)
{
    if(skin==3 || skin==4 || skin==5 || skin==6 || skin==8 || skin==42 || skin==65 || skin==74 || skin==86 || skin==119 || skin==149 || skin==208 || skin==273 || skin==274 || skin==289 || skin>=300) return false;
    return true;
}
public RetirarTV(playerid)
{
    if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	if(strcmp(pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid),true)){
	    SendClientMessage(playerid, COLOR_GRAY, "TE PEGUEI!!! Tentando pegar um móvel que não pertence a sua casa ahn?! Melhor parar...");
		return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][TV] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem TV...");
	    return 1;
	}
	pckStats[PickupEntradaCasa[playerid]][TV] = 0;
	pStats[playerid][PTV] = 1;
	SendClientMessage(playerid, COLOR_GREEN, "TV retirada...");
	return 1;
}
public RetirarRadio(playerid)
{
    if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	if(strcmp(pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid),true)){
	    SendClientMessage(playerid, COLOR_GRAY, "TE PEGUEI!!! Tentando pegar um móvel que não pertence a sua casa ahn?! Melhor parar...");
		return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][Radio]== 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem rádio...");
	    return 1;
	}
	pckStats[PickupEntradaCasa[playerid]][Radio] = 0;
	pStats[playerid][PRadio] = 1;
	SendClientMessage(playerid, COLOR_GREEN, "Rádio retirado...");
	return 1;
}
public RetirarFogao(playerid)
{
    if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	if(strcmp(pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid),true)){
	    SendClientMessage(playerid, COLOR_GRAY, "TE PEGUEI!!! Tentando pegar um móvel que não pertence a sua casa ahn?! Melhor parar...");
		return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][Fogao] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem fogão...");
	    return 1;
	}
	pckStats[PickupEntradaCasa[playerid]][Fogao] = 0;
	pStats[playerid][PFogao] = 1;
	SendClientMessage(playerid, COLOR_GREEN, "Fogão retirado...");
	return 1;
}
public RetirarTelefone(playerid)
{
	new msg[128];
    if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	if(strcmp(pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid),true)){
	    SendClientMessage(playerid, COLOR_GRAY, "TE PEGUEI!!! Tentando pegar um móvel que não pertence a sua casa ahn?! Melhor parar...");
		return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][TelefoneNumb] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem telefone...");
	    return 1;
	}
	pStats[playerid][PTelefoneNumb] = pckStats[PickupEntradaCasa[playerid]][TelefoneNumb];
	pckStats[PickupEntradaCasa[playerid]][TelefoneNumb] = 0;
	format(msg,sizeof(msg),"Telefone retirado, número: %d",pStats[playerid][PTelefoneNumb]);
	SendClientMessage(playerid, COLOR_GREEN, msg);
	return 1;
}
public RetirarComputador(playerid)
{
    if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	if(strcmp(pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid),true)){
	    SendClientMessage(playerid, COLOR_GRAY, "TE PEGUEI!!! Tentando pegar um móvel que não pertence a sua casa ahn?! Melhor parar...");
		return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][Computador] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem computador...");
	    return 1;
	}
	pckStats[PickupEntradaCasa[playerid]][Computador] = 0;
	pStats[playerid][PComputador] = 1;
	SendClientMessage(playerid, COLOR_GREEN, "Computador retirado...");
	return 1;
}
public RetirarGeladeira(playerid)
{
    if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	if(strcmp(pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid),true)){
	    SendClientMessage(playerid, COLOR_GRAY, "TE PEGUEI!!! Tentando pegar um móvel que não pertence a sua casa ahn?! Melhor parar...");
		return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][Geladeira] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem geladeira...");
	    return 1;
	}
	pckStats[PickupEntradaCasa[playerid]][Geladeira] = 0;
	pStats[playerid][PGeladeira] = 1;
	SendClientMessage(playerid, COLOR_GREEN, "Geladeira retirada...");
	return 1;
}

public RetirarCofre(playerid)
{
    if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	if(strcmp(pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid),true)){
	    SendClientMessage(playerid, COLOR_GRAY, "TE PEGUEI!!! Tentando pegar um móvel que não pertence a sua casa ahn?! Melhor parar...");
		return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][Cofre] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem cofre.");
	    return 1;
	}
	pckStats[PickupEntradaCasa[playerid]][Cofre] = 0;
	set(pckStats[PickupEntradaCasa[playerid]][SenhaCofre], "NONE");
	pStats[playerid][PCofre] = 1;
	SendClientMessage(playerid, COLOR_GREEN, "Cofre retirado...");
	return 1;
}

public RetirarGuardaRoupas(playerid)
{
    if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	if(strcmp(pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid),true)){
	    SendClientMessage(playerid, COLOR_GRAY, "TE PEGUEI!!! Tentando pegar um móvel que não pertence a sua casa ahn?! Melhor parar...");
		return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][GuardaRoupas] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem Guarda-Roupas.");
	    return 1;
	}
	pckStats[PickupEntradaCasa[playerid]][GuardaRoupas] = 0;
	pStats[playerid][PGuardaRoupas] = 1;
	SendClientMessage(playerid, COLOR_GREEN, "Guarda-Roupas retirado...");
	return 1;
}
public ColocarTV(playerid)
{
    if(pStats[playerid][PTV] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhuma TV para colocar aqui...");
	    return 1;
	}
	if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	new interiorid = GetHouseInt(PickupEntradaCasa[playerid]);
	if(Interiores[interiorid][hTV] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa não possui espaço para televisão!");
	    return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][TV] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa já tem TV...");
	    return 1;
	}
	pckStats[PickupEntradaCasa[playerid]][TV] = 1;
	pStats[playerid][PTV] = 0;
	SendClientMessage(playerid, COLOR_GREEN, "TV colocada na casa com sucesso!");
	return 1;
}
public ColocarRadio(playerid)
{
    if(pStats[playerid][PRadio] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhum rádio para colocar aqui...");
	    return 1;
	}
	if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	new interiorid = GetHouseInt(PickupEntradaCasa[playerid]);
	if(Interiores[interiorid][hRadio] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa não possui espaço para rádio!");
	    return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][Radio] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa já tem rádio...");
	    return 1;
	}
	pckStats[PickupEntradaCasa[playerid]][Radio] = 1;
	pStats[playerid][PRadio] = 0;
	SendClientMessage(playerid, COLOR_GREEN, "Rádio colocado na casa com sucesso!");
	return 1;
}
public ColocarFogao(playerid)
{
    if(pStats[playerid][PFogao] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhum fogão.");
	    return 1;
	}
	if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	new interiorid = GetHouseInt(PickupEntradaCasa[playerid]);
	if(Interiores[interiorid][hFogao] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa já tem fogão.");
	    return 1;
	}
	pckStats[PickupEntradaCasa[playerid]][Fogao] = 1;
	pStats[playerid][PFogao] = 0;
	SendClientMessage(playerid, COLOR_GREEN, "O Fogão foi instalado, agora poderá usar na preparação de comida.");
	return 1;
}
public ColocarGeladeira(playerid)
{
    if(pStats[playerid][PGeladeira] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhuma geladeira, para colocar aqui.");
	    return 1;
	}
	if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	new interiorid = GetHouseInt(PickupEntradaCasa[playerid]);
	if(Interiores[interiorid][hGeladeira] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa não possui espaço para geladeira!");
	    return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][Geladeira] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa já tem Geladeira.");
	    return 1;
	}
	pckStats[PickupEntradaCasa[playerid]][Geladeira] = 1;
	pStats[playerid][PGeladeira] = 0;
	SendClientMessage(playerid, COLOR_GREEN, "A Geladeira foi instalada com sucesso.");
	return 1;
}
public ColocarTelefone(playerid)
{
	new msg[128];
    if(pStats[playerid][PTelefoneNumb] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhum telefone.");
	    return 1;
	}
	if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][TelefoneNumb] != 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa já tem telefone.");
	    return 1;
	}
	pckStats[PickupEntradaCasa[playerid]][TelefoneNumb] = pStats[playerid][PTelefoneNumb];
	pStats[playerid][PTelefoneNumb] = 0;
	format(msg,sizeof(msg),"O telefone foi instalado, número da casa: %d",pckStats[PickupEntradaCasa[playerid]][TelefoneNumb]);
	SendClientMessage(playerid, COLOR_GREEN, msg);
	return 1;
}
public ColocarComputador(playerid)
{
    if(pStats[playerid][PComputador] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhum computador.");
	    return 1;
	}
	if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][Computador] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa já tem computador.");
	    return 1;
	}
	pckStats[PickupEntradaCasa[playerid]][Computador] = 1;
	pStats[playerid][PComputador] = 0;
	SendClientMessage(playerid, COLOR_GREEN, "O Computador foi instalado.");
	return 1;
}

public ColocarGuardaRoupas(playerid)
{
    if(pStats[playerid][PGuardaRoupas] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhum Guarda-Roupas.");
	    return 1;
	}
	if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][GuardaRoupas] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa já tem Guarda-Roupas.");
	    return 1;
	}
	pckStats[PickupEntradaCasa[playerid]][GuardaRoupas] = 1;
	pStats[playerid][PGuardaRoupas] = 0;
	SendClientMessage(playerid, COLOR_GREEN, "O Guarda-Roupas foi instalado.");
	return 1;
}
public ColocarCofre(playerid)
{
    if(pStats[playerid][PCofre] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhum cofre.");
	    return 1;
	}
	if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][Cofre] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa já tem cofre.");
	    return 1;
	}
	pckStats[PickupEntradaCasa[playerid]][Cofre] = 1;
	pStats[playerid][PCofre] = 0;
	SendClientMessage(playerid, COLOR_GREEN, "O Cofre foi instalado.");
	new str2[128];
	new string[128];
	format(str2,sizeof(str2),"VL%d",PickupEntradaCasa[playerid]);
	set(pckStats[PickupEntradaCasa[playerid]][SenhaCofre],str2);
	format(string,sizeof(string),"[COFRE] A senha do seu cofre no momento é VL%d mas você pode troca-la com /registrarcofre [senha]",PickupEntradaCasa[playerid]);
	SendClientMessage(playerid, COLOR_CORRETOR, string);
	return 1;
}

public InstalarAlarmeBasico(playerid)
{
    if(pStats[playerid][ABasico] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhum alarme básico para colocar aqui...");
	    return 1;
	}
	if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][Alarme] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa já tem alarme básico...");
	    return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][Alarme] == 2) SendClientMessage(playerid, COLOR_GRAY, "O alarme avançado foi removido da casa!");
	pckStats[PickupEntradaCasa[playerid]][Alarme] = 1;
	pStats[playerid][ABasico] = 0;
	SendClientMessage(playerid, COLOR_GREEN, "Alarme básico colocado na casa com sucesso!");
	return 1;
}
public InstalarAlarmeAvancado(playerid)
{
    if(pStats[playerid][AAvancado] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhum alarme avançado para colocar aqui...");
	    return 1;
	}
	if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][Alarme] == 2){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa já tem alarme avançado...");
	    return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][Alarme] == 1) SendClientMessage(playerid, COLOR_GRAY, "O alarme básico foi removido da casa!");
	pckStats[PickupEntradaCasa[playerid]][Alarme] = 2;
	pStats[playerid][AAvancado] = 0;
	SendClientMessage(playerid, COLOR_GREEN, "Alarme avançado colocado na casa com sucesso!");
	return 1;
}
public ComprarTV(playerid)
{
	if(pStats[playerid][PTV] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Você já tem uma TV em mãos, coloque ela em sua casa!");
	    return 1;
	}
	if(GetPlayerServerMoney(playerid) < ValorTV){
		SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro!");
		return 1;
	}
	else{
	    pStats[playerid][PTV] = 1;
	    AddPlayerMoney(playerid,-ValorTV,-1);
	    SendClientMessage(playerid, COLOR_GREEN, "Você comprou uma televisão, a desvantagem nisso tudo é que sua conta de luz vai aumentar =/");
	    SendClientMessage(playerid, COLOR_GREEN, "Para instalar digite: /colocartv.");
	}
	return 1;
}

public ZerarMultou(playerid) JaMultou[playerid] = 0;
public ZerarInformeiPos(playerid) InformeiMinhaPos[playerid] = 0;

public PrendendoJogador(playerid,plid){
    KillTimer(TempoPreso[playerid]);
	if(SeEntregando[plid] == 1){
	    SendClientMessage(playerid, COLOR_WHITE, "O jogador não se entregou e seu nome foi colocado na lista de procurados.");
		SendClientMessage(plid, COLOR_TRAFICANTE, "Você não se entregou e seu nome foi automaticamente colocado na lista de procurados com base na Lei Estadual Nº5473/2.");
		SetPlayerWantedLevel(plid, GetPlayerWantedLevel(plid) + 1);
		return 1;
	}
	else {
	    new Float:x,Float:y,Float:z,Float:ang;
		SetPlayerControl(playerid, false);
		SetPlayerControl(plid, false);
		GetPlayerPos(plid,x,y,z);
		GetXYInFrontOfPlayer(plid,x,y,1.0);
		SetPlayerPos(playerid,x,y,z);
		GetPlayerFacingAngle(plid,ang);
		if(ang+180 > 360) SetPlayerFacingAngle(playerid,ang-180);
		else SetPlayerFacingAngle(playerid,ang+180);
	    SetPlayerSpecialAction(plid,SPECIAL_ACTION_HANDSUP);
	    ApplyAnimation(playerid,"PED","ARRESTgun",4.1,0,1,1,1,1);
	    SendPlayerMessageToPlayer(playerid,playerid, "Você está preso pelo Departamento de Polícia de Los Santos.");
	    SendPlayerMessageToPlayer(plid,playerid, "Você está preso pelo Departamento de Polícia de Los Santos.");
        SetTimerEx("HistPri1",5000,0,"dd",playerid,plid);
 	}
	return 1;
}
public CaixaMensagem(playerid){
    new string[128];
    EmLigacao[playerid]=0;
	KillTimer(TocandoBIP[playerid]);
	KillTimer(TempoCaixaMensagem[playerid][0]);
    if(IsStringAName(RecebedorMensagem[playerid])){
		new Called = IDName(RecebedorMensagem[playerid]);
		EmLigacao[Called] = 0;
		if(compare(pStats[Called][MSGBIP],"NONE")){
    		format(string,sizeof(string),"[Secretária Eletrônica] No momento %s não pode atender, deixe sua mensagem após o BIP:",RecebedorMensagem[playerid]);
		}
		else{
	    	format(string,sizeof(string),"[Secretária Eletrônica] %s",pStats[Called][MSGBIP]);
		}
	}
    else{
    	if(compare(GetValue(RecebedorMensagem[playerid],"MSGBIP"),"NONE")){
    		format(string,sizeof(string),"[Secretária Eletrônica] No momento %s não pode atender, deixe sua mensagem após o BIP:",RecebedorMensagem[playerid]);
		}
		else{
	    	format(string,sizeof(string),"[Secretária Eletrônica] %s",GetValue(RecebedorMensagem[playerid],"MSGBIP"));
		}
	}
	SetPlayerControl(playerid, true);
	SendClientMessage(playerid, COLOR_LIGHT_YELLOW, string);
    TempoCaixaMensagem[playerid][1] = SetTimerEx("BIP",5000,0,"d",playerid);
}
public BIP(playerid){
    KillTimer(TempoCaixaMensagem[playerid][1]);
    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	SendClientMessage(playerid, COLOR_BLUE_PLUS, "* BIP");
	CaixaPostal2[playerid] = 1;
}
public TelefoneBIP(playerid){
    PlayerPlaySound(playerid, 1137, 0.0, 0.0, 0.0);
	SetTimerEx("BIP",2000,0,"d",playerid);
}
public NaoAceitou(playerid,plid){
	if(AindaNaoAceitou[plid] == 1){
		Revistando[playerid] = 0;
		Revistado[plid] = 0;
	    SendClientMessage(playerid, COLOR_COP_RODOVIARIO,"[OFICIAL] A revista não foi concluída o jogador não deu a resposta.");
	    SendClientMessage(playerid, COLOR_COP_RODOVIARIO,"[OFICIAL] Ele pode ser um suspeito verifique");
	    SendClientMessage(plid, COLOR_COP_RODOVIARIO,"Você não aceitou a revista.");
	}
}
public HistPri1(playerid,plid){
    SendPlayerMessageToPlayer(playerid, playerid, "Você tem o direito de permanecer em silêncio.");
    SendPlayerMessageToPlayer(plid, playerid, "Você tem o direito de permanecer em silêncio.");
    SetTimerEx("HistPri2",3000,0,"dd",playerid,plid);
    return 1;
}

public HistPri2(playerid,plid){
    SendPlayerMessageToPlayer(playerid, playerid, "Qualquer coisa que disser pode e será usado contra você no Tribunal.");
    SendPlayerMessageToPlayer(plid, playerid, "Qualquer coisa que dizer pode e será usado contra você no Tribunal.");
    SetTimerEx("HistPri3",3000,0,"dd",playerid,plid);
    return 1;
}

public HistPri3(playerid,plid){
    SendPlayerMessageToPlayer(playerid, playerid , "Você tem o direito de falar com um advogado, no estado de Los Santos não existe defensores públicos.");
    SendPlayerMessageToPlayer(plid, playerid, "Você tem o direito de falar com um advogado, no estado de Los Santos não existe defensores públicos.");
    SetTimerEx("ConsiderePreso",5000,0,"dd",playerid,plid);
    return 1;
}

public ConsiderePreso(playerid,plid){
    ClearAnimations(playerid);
    ClearAnimations(plid);
	SetPlayerControl(playerid, true);
	PodeAlgemar[playerid] = plid;
	SendClientMessage(playerid, COLOR_COP_SWAT, "Pode algemar o jogador e entrega-lo para a Delegacia...");
	return 1;
}
public ComprarRadio(playerid)
{
    if(pStats[playerid][PRadio] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Você já tem um rádio em mãos, coloque ele em sua casa!");
	    return 1;
	}
	if(GetPlayerServerMoney(playerid) < ValorRadio){
		SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro!");
		return 1;
	}
	else{
	    pStats[playerid][PRadio] = 1;
	    AddPlayerMoney(playerid,-ValorRadio,-1);
	    SendClientMessage(playerid, COLOR_GREEN, "Você comprou um rádio! Agora sua casa vai bombar e você poderá perturbar seus vizinhos a vontade!");
	    SendClientMessage(playerid, COLOR_GREEN, "Para instalar digite: /colocarradio.");
	}
    SetPlayerControl(playerid, true);
	return 1;
}
public ComprarGeladeira(playerid)
{
    if(pStats[playerid][PGeladeira] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Você já tem uma geladeira, coloque ele em sua casa!");
	    return 1;
	}
	if(GetPlayerServerMoney(playerid) < ValorGeladeira){
		SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro!");
		return 1;
	}
	else{
	    pStats[playerid][PGeladeira] = 1;
	    AddPlayerMoney(playerid,-ValorGeladeira,-1);
	    SendClientMessage(playerid, COLOR_GREEN, "Você comprou uma linda geladeira! Agora poderá guardar condimentos como: Peixes, Pizzas, Saladas, Refrigenrantes, Sucos, etc...");
	    SendClientMessage(playerid, COLOR_GREEN, "Para instalar digite: /colocargeladeira.");
	}
	return 1;
}
public ComprarFogao(playerid){
    if(pStats[playerid][PFogao] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Você já tem um fogao, coloque ele em sua casa!");
	    return 1;
	}
	if(GetPlayerServerMoney(playerid) < ValorFogao){
		SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro!");
		return 1;
	}
	else{
	    pStats[playerid][PFogao] = 1;
	    AddPlayerMoney(playerid,-ValorFogao,-1);
	    SendClientMessage(playerid, COLOR_GREEN, "Você comprou um fogão! Agora poderá comer, beber e fazer petiscos deliciosos em sua casa.");
	    SendClientMessage(playerid, COLOR_GREEN, "Para instalar digite: /colocarfogao.");
	}
	return 1;
}
public ComprarTelefone(playerid)
{
	new msg[128];
    if(pStats[playerid][PTelefoneNumb] != 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você já tem um telefone, coloque ele em sua casa!");
	    return 1;
	}
	if(GetPlayerServerMoney(playerid) < ValorTelefone){
		SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro!");
		return 1;
	}
	else{
	    AddPlayerMoney(playerid,-ValorTelefone,-1);
	    pStats[playerid][PTelefoneNumb] = LastPhone;
     	format(msg,sizeof(msg),"Você comprou um telefone... Seu número: %d",LastPhone);
        SendClientMessage(playerid, COLOR_GREEN, msg);
		LastPhone++;
	    SendClientMessage(playerid, COLOR_GREEN, "Para instalar digite: /colocartelefone.");
	}
	return 1;
}
public ComprarComputador(playerid)
{
    if(pStats[playerid][PComputador] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Você já tem um computador, coloque ele em sua casa!");
	    return 1;
	}
	if(GetPlayerServerMoney(playerid) < ValorComputador){
		SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro!");
		return 1;
	}
	else{
		pStats[playerid][PComputador] = 1;
	    AddPlayerMoney(playerid,-ValorComputador,-1);
        SendClientMessage(playerid, COLOR_GREEN, "Você comprou um computador");
	    SendClientMessage(playerid, COLOR_GREEN, "Para instalar digite: /colocarcomputador.");
	}
	return 1;
}
public ComprarGuardaRoupas(playerid)
{
    if(pStats[playerid][PGuardaRoupas] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Você já tem um Guarda-Roupas, coloque ele em uma casa!");
	    return 1;
	}
	if(GetPlayerServerMoney(playerid) < ValorGuardaRoupas){
		SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro!");
		return 1;
	}
	else{
		pStats[playerid][PGuardaRoupas] = 1;
	    AddPlayerMoney(playerid,-ValorGuardaRoupas,-1);
        SendClientMessage(playerid, COLOR_GREEN, "Você comprou um Guarda-Roupas");
	    SendClientMessage(playerid, COLOR_GREEN, "Para instalar digite: /colocarguardaroupas.");
	}
	return 1;
}
public ComprarCofre(playerid)
{
    if(pStats[playerid][PCofre] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Você já tem um cofre, coloque ele em uma casa!");
	    return 1;
	}
	if(GetPlayerServerMoney(playerid) < ValorCofre){
		SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro!");
		return 1;
	}
	else{
		pStats[playerid][PCofre] = 1;
	    AddPlayerMoney(playerid,-ValorCofre,-1);
        SendClientMessage(playerid, COLOR_GREEN, "Você comprou um cofre");
	    SendClientMessage(playerid, COLOR_GREEN, "Para instalar digite: /colocarcofre.");
	}
	return 1;
}
public ComprarAlarmeBasico(playerid)
{
    if(pStats[playerid][ABasico] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Você já tem um alarme básico, instale ele em sua casa!");
	    return 1;
	}
	if(GetPlayerServerMoney(playerid) < 1300){
		SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro!");
		return 1;
	}
	else{
	    pStats[playerid][ABasico] = 1;
	    AddPlayerMoney(playerid,-1300,-1);
	    SendClientMessage(playerid, COLOR_GREEN, "Você comprou um alarme básico! Isso manterá os ladrões longe de sua casa...");
	    SendClientMessage(playerid, COLOR_GREEN, "Para instalar digite: /instalaralarmebasico.");
	}
	return 1;
}
public ComprarAlarmeAvancado(playerid)
{
    if(pStats[playerid][AAvancado] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Você já tem um alarme avançado, instale ele em sua casa!");
	    return 1;
	}
	if(GetPlayerServerMoney(playerid) < 2200){
		SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro!");
		return 1;
	}
	else{
	    pStats[playerid][AAvancado] = 1;
	    AddPlayerMoney(playerid,-2200,-1);
	    SendClientMessage(playerid, COLOR_GREEN, "Você comprou um alarme avançado! A policia o agradece por facilitar o trabalho dela!");
	    SendClientMessage(playerid, COLOR_GREEN, "Para instalar digite: /instalaralarmeavancado.");
	}
	return 1;
}
stock IsValidWeapon(weaponid){
    if(weaponid < 1 || weaponid > 16 && weaponid < 22 || weaponid > 33) return false;
    return true;
}
public CancelarMulta(playerid) ZeraMulta[playerid] = 0;

stock ImpostoBanco()
{
	for(new i = 0; i < MAX_SLOTS; i++)
	{
	    if(IsPlayerConnected(i) && Logado[i] == 1)
		{
	        if(pStats[i][Banco] >= 3000)
			{
				new pay = pStats[i][Banco];
			    if(pStats[i][Banco] >= 3000 && pStats[i][Banco] < 20000)
				{
				    pay = pay / 20;
			   	}
			    else if(pStats[i][Banco] >= 20000)
				{
			        pay = pay / 40;
				}
				new interest;
   				new bla = random(3)+1;
				interest = (pStats[i][Banco]/1000)*(bla);
				new string[256];
				SendClientMessage(i, COLOR_WHITE, "|___ $ $ $ $ Banco Life $ $ $ $ ___|");
				format(string, sizeof(string), "  $ Saldo: $%d", pStats[i][Banco]);
				SendClientMessage(i, COLOR_PALHA, string);
				format(string, sizeof(string), "  $ Taxa de Juros: 0.%d por cento $",bla);
				SendClientMessage(i, COLOR_PALHA, string);
				format(string, sizeof(string), "  $ Juros Ganho: $%d $", interest);
				SendClientMessage(i, COLOR_PALHA, string);
				pStats[i][Banco] += interest;
				format(string, sizeof(string), "  $ Aplicação: $%d", pStats[i][PInvestimento]);
				SendClientMessage(i, COLOR_PALHA, string);
				format(string, sizeof(string), "  $ Empréstimo: $%d $", pStats[i][Emprestimo]);
				SendClientMessage(i, COLOR_PALHA, string);
				format(string, sizeof(string), "  $ Pagamento Conta: $%d", pay);
				SendClientMessage(i, COLOR_PALHA, string);
				pStats[i][Banco] -= pay;
				format(string, sizeof(string), "  $ Novo Saldo: $%d", pStats[i][Banco]);
				SendClientMessage(i, COLOR_PALHA, string);
 				SendClientMessage(i, COLOR_LIGHT_BROWN, "[BANCO] Fizemos débito automático. Grato, Gerência.");
			}
		}
	}
}

stock PagamentoSeguro()
{
	for(new i = 0; i < MAX_SLOTS; i++)
	{
		if(pStats[i][Seguro] == 1)
		{
			if(pStats[i][Banco] >= 400)
			{
			    pStats[i][Banco] -= 400;
				SendClientMessage(i, COLOR_GREEN, "Foi retirado $400 de seu banco para pagar o seu seguro de vida!");
			}
			else
			{
				SendClientMessage(i, COLOR_GRAY, "Seu seguro de vida foi removido pois você não possui dinheiro para pagar!");
				pStats[i][Seguro] = 0;
			}
		}
       	for(new p = 0; p < GetQtHouses(i); p++){
       	    new casa = GetHouses(i, GetPHouseKeyID(i,p));
       		if(compare(pckStats[casa][PickupDono],PlayerName(i))){
				if(pckStats[casa][SeguroDaCasa] == 1){
				    if(pStats[i][Banco] >= 500){
				        pStats[i][Banco] -= 500;
						SendClientMessage(i, COLOR_GREEN, "Foi retirado $500 de seu banco para pagar o seu seguro de imóvel!");
					} else	{
					    new str[128];
						format(str,sizeof(str),"[SEGURADORA] O seguro da sua casa de ID: %d, foi retirada, pois não possuia dinheiro no banco.",GetPHouseKeyID(i,p));
						SendClientMessage(i, COLOR_PINK, str);
						pckStats[casa][SeguroDaCasa] = 0;
					}
				}
			}
		}
  	}
}
stock AnunciarVendas()
{
	SendClientMessageToAll(COLOR_WHITE, "|============================| New Paper's Life - Venda de imóveis |============================|");
	new string[128], str[128], qtvenda;
	for(new p = 0; p < MAX_CASAS; p++){
		set(string,PickupFile(p));
		if(!fexist(string)) break;
		if(pckStats[p][Vendendo] != 0){
		    qtvenda++;
			new zone[28];
		    GetZone(p, zone, 28);
			format(str,sizeof(str),"Imóvel a venda - Dono: %s - Valor: $%d,00 dólares - Local: %s",pckStats[p][PickupDono],pckStats[p][PickupValor],zone);
			SendClientMessageToAll(COLOR_LIGHT_YELLOW, str);
		}
	}
	if(qtvenda == 0) {
		SendClientMessageToAll(COLOR_LIGHT_YELLOW, "Nenhum imóvel à venda foi encontrado por Los Santos!");
	}
	SendClientMessageToAll(COLOR_WHITE, "|============================================================================================|");
	return 1;
}
stock AnunciarAlugueis()
{
	SendClientMessageToAll(COLOR_WHITE, "|============================| New Paper's Life - Aluguel de imóveis |============================|");
	new str[128],qtvenda;
	for(new p = 0; p < MAX_CASAS; p++){
	    set(str,PickupFile(p));
		if(fexist(str)){
			for(new i = 0; i < MAX_SLOTS; i++){
	    		if(compare(pckStats[p][PickupDono],PlayerName(i))){
					if(pckStats[p][AlugandoCasa] == 1){
		 		    	qtvenda++;
				    	new zone[28];
				    	GetZone(p, zone, 28);
						format(str,sizeof(str),"Imóvel em locação - Dono: %s - Valor: $%d,00 dólares - Dias: %d - Local: %s",pckStats[p][PickupDono],pckStats[p][ValorCasaAluguel],pckStats[p][DiasCasaAluguel], zone);
						SendClientMessageToAll(COLOR_LIGHT_YELLOW, str);
					}
				}
			}
		}
	}
	if(qtvenda == 0) {
		SendClientMessageToAll(COLOR_LIGHT_YELLOW, "Nenhum imóvel para locação foi encontrado por Los Santos!");
	}
	SendClientMessageToAll(COLOR_WHITE, "|=============================================================================================|");
    return 1;
}
stock EnviarCartaAnonima(name[], msg[])
{
	if(!fexist(PlayerFile(name))) return 0;
	new File:filemsg = fopen(PlayerFile(name), io_append);
	new textw[256];
	format(textw, sizeof textw, "MAIL=%s\r\n", msg);
	fwrite(filemsg, textw);
	fclose(filemsg);
	return 1;
}
stock EnviarCarta(playerid, name[], msg[])
{
	if(!fexist(PlayerFile(name))) return 0;
	new File:filemsg = fopen(PlayerFile(name), io_append);
	new textw[256];
	format(textw, sizeof textw, "MAIL=Remetente: %s [ %s ]\r\n", PlayerName(playerid), msg);
	fwrite(filemsg, textw);
	fclose(filemsg);
	return 1;
}
stock MostrarCorrespondencia(playerid)
{
	if(!fexist(PlayerFile(PlayerName(playerid)))) return 0;
	new bool:found = false;
	new File:filemsg = fopen(PlayerFile(PlayerName(playerid)), io_read);
	new tmp[256];
	while(fread(filemsg, tmp, sizeof tmp))
	{
		new key[128];
		key = GetValueKey(tmp);
		if(strcmp(key, "MAIL", true) == 0)
		{
		    new value[256];
		    value = GetKeyValue(tmp);
		    SendClientMessage(playerid, COLOR_WHITE, value);
		    found = true;
		}
	}
	if(!found) SendClientMessage(playerid, COLOR_GRAY, "Nenhuma carta encontrada...");
	fclose(filemsg);
	return 1;
}
stock ExcluirCorrespondencia(playerid)
{
	if(!fexist(PlayerFile(PlayerName(playerid)))) return 0;
    new bool:found = false;
    new File:filemsgr = fopen(PlayerFile(PlayerName(playerid)), io_read);
    new buf[0x40];
    format(buf, sizeof buf, "%s.buf", PlayerName(playerid));
    new File:filemsgw = fopen(buf, io_write);
    new tmp[256];
    while(fread(filemsgr, tmp, sizeof tmp))
    {
		new key[128];
		key = GetValueKey(tmp);
		if(strcmp(key, "MAIL", true) == 0)
		{
		    found = true;
		}
		else
		{
		    fwrite(filemsgw, tmp);
		}
    }
    fclose(filemsgr);
    fclose(filemsgw);
    if(!found)
    {
		SendClientMessage(playerid, COLOR_GRAY, "Nenhuma carta encontrada...");
    }
    else
    {
        fcopy(buf, PlayerFile(PlayerName(playerid)));
        SendClientMessage(playerid, COLOR_GRAY, "Correspondência excluída...");
    }
    fremove(buf);
	return 1;
}
stock EnviarMensagemCaixaPostal(playerid, name[], msg[])
{
	if(!fexist(PlayerFile(name))) return 0;
	new File:filemsg = fopen(PlayerFile(name), io_append);
	new textw[256];
	format(textw, sizeof textw, "POST=%s: %s\r\n", PlayerName(playerid), msg);
	fwrite(filemsg, textw);
	fclose(filemsg);
	return 1;
}
stock MostrarCaixaPostal(playerid)
{
	if(!fexist(PlayerFile(PlayerName(playerid)))) return 0;
	new bool:found = false;
	new File:filemsg = fopen(PlayerFile(PlayerName(playerid)), io_read);
	new tmp[256];
	while(fread(filemsg, tmp, sizeof tmp))
	{
		new key[128];
		key = GetValueKey(tmp);
		if(strcmp(key, "POST", true) == 0)
		{
		    new value[256];
		    value = GetKeyValue(tmp);
		    SendClientMessage(playerid, COLOR_WHITE, value);
		    found = true;
		}
	}
	if(!found) SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhuma mensagem na sua caixa postal...");
	fclose(filemsg);
	return 1;
}
stock ExcluirCaixaPostal(playerid)
{
    if(!fexist(PlayerFile(PlayerName(playerid)))) return 0;
    new bool:found = false;
    new File:filemsgr = fopen(PlayerFile(PlayerName(playerid)), io_read);
    new buf[0x40];
    format(buf, sizeof buf, "%s.buf", PlayerName(playerid));
    new File:filemsgw = fopen(buf, io_write);
    new tmp[256];
    while(fread(filemsgr, tmp, sizeof tmp))
    {
		new key[128];
		key = GetValueKey(tmp);
		if(strcmp(key, "POST", true) == 0)
		{
		    found = true;
		}
		else
		{
		    fwrite(filemsgw, tmp);
		}
    }
    fclose(filemsgr);
    fclose(filemsgw);
    if(!found)
    {
		SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhuma mensagem na sua caixa postal...");
    }
    else
    {
        fcopy(buf, PlayerFile(PlayerName(playerid)));
        SendClientMessage(playerid, COLOR_GRAY, "Mensagens da Caixa Postal excluídas...");
    }
    fremove(buf);
	return 1;
}
stock GuardarMensagem(name[], msg[])
{
	if(!fexist(PlayerFile(name))) return 0;
	new File:filemsg = fopen(PlayerFile(name), io_append);
	new textw[256];
	format(textw, sizeof textw, "MSG=%s\r\n", msg);
	fwrite(filemsg, textw);
	fclose(filemsg);
	return 1;
}
stock EnviarMensagensGuardadas(playerid)
{
    if(!fexist(PlayerFile(PlayerName(playerid)))) return 0;
    new File:filemsgr = fopen(PlayerFile(PlayerName(playerid)), io_read);
	new buf[0x40];
	format(buf, sizeof buf, "%s.buf", PlayerName(playerid));
	new File:filemsgw = fopen(buf, io_write);
	new tmp[256];
	while(fread(filemsgr, tmp, sizeof tmp))
	{
		new key[128];
		key = GetValueKey(tmp);
	    if(strcmp(key, "MSG", true) == 0)
	    {
			new value[256];
	        value = GetKeyValue(tmp);
	        SendClientMessage(playerid, COLOR_WHITE, value);
	    }
	    else
	    {
	        fwrite(filemsgw, tmp);
	    }
	}
	fclose(filemsgw);
	fclose(filemsgr);
	fcopy(buf, PlayerFile(PlayerName(playerid)));
	fremove(buf);
	return 1;
}
stock ComprarSorvete2(playerid,sabor)
{
	if(GetPlayerServerMoney(playerid) < Sabores2[sabor][SaborValor2]) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro!");
	new str[128];
	format(str,sizeof(str),"Sorvete%s",Sabores2[sabor][SaborName2]);
	if(sabor == 0) pStats[playerid][SorveteNapolitano] += 3;
	else if(sabor == 1) pStats[playerid][SorveteChocolate] += 3;
	else if(sabor == 2) pStats[playerid][SorveteFlocos] += 3;
	new string[128];
	format(string,sizeof(string),"Você comprou um sorvete de %s. Você pode servir esse pote 3 vezes.",Sabores2[sabor][SaborName2]);
	SendClientMessage(playerid, COLOR_GREEN, string);
	AddPlayerMoney(playerid,-Sabores2[sabor][SaborValor2],-1);
	return 1;
}
stock ComprarSorvete(playerid,sabor)
{
    if(GetPlayerServerMoney(playerid) >= Sabores[sabor][SaborValor]){
    	TomandoSorvete[playerid] = 1;
		new string[128];
 		format(string, sizeof(string), "Você está tomando um sorvete de %s.",Sabores[sabor][SaborName]);
  		SendClientMessage(playerid, COLOR_WHITE, string);
   		AddPlayerMoney(playerid,-Sabores[sabor][SaborValor],-1);
    	SetPlayerControl(playerid, false);
   		ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
   		ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
    	SetTimerEx("TomarSorvete",7000,false,"d",playerid);
		return 1;
	} else {
		SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro para pagar o sorvete!");
 		return 1;
	}
}
stock ReturnValueStr(value)
{
	new stringval[128];
	valstr(stringval,value);
	return stringval;
}
stock VenderCasa(casa, name[], plid)
{
   	if(IsStringAName(name)){
   		new playerid = IDName(name);
		new reembolso, string[128];
		AddPlayerMoney(plid, -pckStats[casa][PickupValor], -1);
		if(pckStats[casa][SeguroDaCasa] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Este imóvel não tinha seguro e sofreu desvalorização, você não ganhou o reembolso completo.");
		    SendClientMessage(playerid, COLOR_GRAY, "Ficará apenas com 50 por cento do valor do imóvel.");
			SendClientMessage(playerid, COLOR_GRAY, "O dinheiro está no banco.");
	        format(string,sizeof(string),"%s vendeu sua casa mas não recebeu tudo, pois não possuia seguro!",playerid);
			SendClientMessageAdmin(COLOR_WHITE, string);
			reembolso = pckStats[casa][PickupValor]/2;
			pStats[playerid][BancoResidencia] += reembolso;
		}
		else{
		    new strrand = random(4);
			if(strrand == 0) reembolso = (pckStats[casa][PickupValor]);
			if(strrand == 1) reembolso = (pckStats[casa][PickupValor]/4)*5;
			if(strrand == 2) reembolso = (pckStats[casa][PickupValor]/2);
			if(strrand == 3) reembolso = (pckStats[casa][PickupValor]*2);
			format(string,sizeof(string),"O reembolso foi de $%d. O dinheiro foi depositado em sua conta!",reembolso);
			SendClientMessage(playerid, COLOR_GREEN, string);
			pStats[playerid][BancoResidencia] += reembolso;
			format(string,sizeof(string),"%s vendeu sua casa e ganhou um reembolso de $%d",PlayerName(playerid),reembolso);
			SendClientMessageAdmin(COLOR_WHITE, string);
		}
		if(pckStats[casa][TV] == 1){
			SendClientMessage(playerid, COLOR_GRAY, "Foi depositado na sua conta 50 por cento do valor da TV que você tinha.");
			pStats[playerid][BancoResidencia] += ValorTV/2;
		}
		if(pckStats[casa][Radio] == 1){
			SendClientMessage(playerid, COLOR_GRAY, "Foi depositado na sua conta 50 por cento do valor da Rádio que você tinha.");
			pStats[playerid][BancoResidencia] += ValorRadio/2;
		}
		if(pckStats[casa][Geladeira] == 1){
			SendClientMessage(playerid, COLOR_GRAY, "Foi depositado na sua conta 50 por cento do valor da Geladeira que você tinha.");
			pStats[playerid][BancoResidencia] += ValorGeladeira/2;
		}
		if(pckStats[casa][Fogao] == 1){
			SendClientMessage(playerid, COLOR_GRAY, "Foi depositado na sua conta 50 por cento do valor do Fogão que você tinha.");
			pStats[playerid][BancoResidencia] += ValorFogao/2;
		}
		if(pckStats[casa][Computador] == 1){
			SendClientMessage(playerid, COLOR_GRAY, "Foi depositado na sua conta 50 por cento do valor do Computador que você tinha.");
			pStats[playerid][BancoResidencia] += ValorComputador/2;
		}
		if(pckStats[casa][GuardaRoupas] == 1){
			SendClientMessage(playerid, COLOR_GRAY, "Foi depositado na sua conta 50 por cento do valor do Guarda-Roupas que você tinha.");
			pStats[playerid][BancoResidencia] += ValorGuardaRoupas/2;
		}
		if(pckStats[casa][Cofre] == 1){
			SendClientMessage(playerid, COLOR_GRAY, "Foi depositado na sua conta 50 por cento do valor do Cofre que você tinha.");
			pStats[playerid][BancoResidencia] += ValorCofre/2;
		}
		new zone[28];
		GetZone(casa, zone, 28);
		format(string,sizeof(string),"[CORRETORA] A casa de %s situada em %s foi vendida para %s no Valor: $%d dólares.",PlayerName(playerid), zone, PlayerName(plid), pckStats[casa][PickupValor]);
	    SendClientMessageToAll(COLOR_CORRETOR, string);
		format(string,sizeof(string),"[CORRETORA] Essa é sua casa de ID: %d", GetPHouseKeyID(plid,casa));
		SendClientMessage(plid, COLOR_WHITE, string);
		set(pckStats[casa][PickupDono], PlayerName(plid));
	    pStats[plid][SpawnPosX] = pckStats[casa][pX];
	    pStats[plid][SpawnPosY] = pckStats[casa][pY];
	    pStats[plid][SpawnPosZ] = pckStats[casa][pZ];
	    pStats[plid][SpawnPosAng] = pStats[playerid][SpawnPosAng];
		pStats[playerid][SpawnPosX] = 1685.4244;
		pStats[playerid][SpawnPosY] = -2333.4529;
		pStats[playerid][SpawnPosZ] = 13.5469;
		pStats[playerid][SpawnPosAng] = 360;
	    pckStats[casa][Vendendo] = 0;
		pckStats[casa][AlugandoCasa] = 0;
		pckStats[casa][DiasCasaAluguel] = 0;
		pckStats[casa][ValorCasaAluguel] = 0;
		AcrescentarLucro(15, 300);
	} else {
		new reembolso, string[128];
		AddPlayerMoney(plid, -pckStats[casa][PickupValor], -1);
		if(pckStats[casa][SeguroDaCasa] == 0){
			GiveValue(name,"BancoResidencia",-pckStats[casa][PickupValor]/2);
		}
		else{
		    new strrand = random(4);
			if(strrand == 0) reembolso = (pckStats[casa][PickupValor]);
			if(strrand == 1) reembolso = (pckStats[casa][PickupValor]/4)*5;
			if(strrand == 2) reembolso = (pckStats[casa][PickupValor]/2);
			if(strrand == 3) reembolso = (pckStats[casa][PickupValor]*2);
			GiveValue(name,"BancoResidencia",reembolso);
		}
		if(pckStats[casa][TV] == 1){
			GiveValue(name,"BancoResidencia",ValorTV/2);
		}
		if(pckStats[casa][Radio] == 1){
			GiveValue(name,"BancoResidencia",ValorRadio/2);
		}
		if(pckStats[casa][Geladeira] == 1){
			GiveValue(name,"BancoResidencia",ValorGeladeira/2);
		}
		if(pckStats[casa][Fogao] == 1){
			GiveValue(name,"BancoResidencia",ValorFogao/2);
		}
		if(pckStats[casa][Computador] == 1){
			GiveValue(name,"BancoResidencia",ValorComputador/2);
		}
		if(pckStats[casa][GuardaRoupas] == 1){
			GiveValue(name,"BancoResidencia",ValorGuardaRoupas/2);
		}
		if(pckStats[casa][Cofre] == 1){
			GiveValue(name,"BancoResidencia",ValorCofre/2);
		}
		new zone[28];
		GetZone(casa, zone, 28);
		format(string,sizeof(string),"[CORRETORA] A casa de %s situada em %s foi vendida para %s no Valor: $%d dólares.",name, zone, PlayerName(plid), pckStats[casa][PickupValor]);
	    SendClientMessageToAll(COLOR_CORRETOR, string);
		set(pckStats[casa][PickupDono], PlayerName(plid));
	    pStats[plid][SpawnPosX] = pckStats[casa][pX];
	    pStats[plid][SpawnPosY] = pckStats[casa][pY];
	    pStats[plid][SpawnPosZ] = pckStats[casa][pZ];
	    pckStats[casa][Vendendo] = 0;
		pckStats[casa][AlugandoCasa] = 0;
		pckStats[casa][DiasCasaAluguel] = 0;
		pckStats[casa][ValorCasaAluguel] = 0;
		AcrescentarLucro(15, 300);
	    SavePCVPJGO();
		format(string,sizeof(string),"[CORRETORA] Essa é sua casa de ID: %d", GetPHouseKeyID(plid,casa));
		SendClientMessage(plid, COLOR_WHITE, string);
	}
}

stock CriarJornal(playerid,titulo[])
{
	new string[128],str[128];
	set(str,JornalFile(titulo));
	if(fexist(str)) return SendClientMessage(playerid, COLOR_GRAY, "Esse jornal já existe!");
	if(pStats[playerid][Jornal] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você só pode criar um jornal!");
	new File:jornalfile = fopen(str,io_write),bool:searched=false;
	fclose(jornalfile);
	for(new jn = 0; jn < LastJN; jn++){
	    if(compare(Jornais[jn],"NONE")){
	        set(Jornais[jn],titulo);
	        searched=true;
	        break;
		}
	}
	if(!searched){
		set(Jornais[LastJN],titulo);
		LastJN++;
	}
	set(jStats[GetJornalID(titulo)][Autor],PlayerName(playerid));
	set(jStats[GetJornalID(titulo)][CEmpresas1],"NONE");
	set(jStats[GetJornalID(titulo)][CEmpresas2],"NONE");
	set(jStats[GetJornalID(titulo)][CEmpresas3],"NONE");
	set(jStats[GetJornalID(titulo)][CHomicidios1],"NONE");
	set(jStats[GetJornalID(titulo)][CHomicidios2],"NONE");
	set(jStats[GetJornalID(titulo)][CHomicidios3],"NONE");
	set(jStats[GetJornalID(titulo)][CEsporte1],"NONE");
	set(jStats[GetJornalID(titulo)][CEsporte2],"NONE");
	set(jStats[GetJornalID(titulo)][CEsporte3],"NONE");
	set(jStats[GetJornalID(titulo)][CMercadorias1],"NONE");
	set(jStats[GetJornalID(titulo)][CMercadorias2],"NONE");
	set(jStats[GetJornalID(titulo)][CMercadorias3],"NONE");
	set(jStats[GetJornalID(titulo)][COutros1],"NONE");
	set(jStats[GetJornalID(titulo)][COutros2],"NONE");
	set(jStats[GetJornalID(titulo)][COutros3],"NONE");
	pStats[playerid][Jornal] = 1;
	set(pStats[playerid][TituloJornal],titulo);
	format(string,sizeof(string),"[NOTICIAS] %s decidiu criar seu próprio jornal e o chamou de %s!",PlayerName(playerid),titulo);
	SendClientMessageToAll(COLOR_WHITE, string);
	return 1;
}
stock ExcluirJornal(playerid)
{
	new string[128];
	if(pStats[playerid][Jornal] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui jornal!");
	set(string,JornalFile(pStats[playerid][TituloJornal]));
	fremove(string);
	set(Jornais[GetJornalID(pStats[playerid][TituloJornal])],"NONE");
	SendClientMessage(playerid, COLOR_WHITE, "Jornal excluído...");
	format(string,sizeof(string),"[NOTICIAS] %s desistiu do seu jornal... %s agora não existe mais!",PlayerName(playerid),pStats[playerid][TituloJornal]);
	SendClientMessageToAll(COLOR_WHITE, string);
	pStats[playerid][Jornal] = 0;
	set(pStats[playerid][TituloJornal],"NONE");
	return 1;
}
stock QtGangMembers(gangname[])
{
	new result;
	for(new m = 0; m < gStats[GetGangID(gangname)][GangMembros]; m++){
	    if(!compare(MembersGang[GetGangID(gangname)][m],"NONE")){
	        result++;
		}
	}
	return result;
}
stock PagamentoSegurancas()
{
    new QtSegurancas;
	new str[128],string[128];
	for(new i=0; i<MAX_SLOTS; i++){
	    if(pStats[i][NSegurancas] > 0){
			QtSegurancas = pStats[i][NSegurancas];
			for(new s=0; s<QtSegurancas; s++){
			    format(str,sizeof(str),"Seguranca_%d",s);
                if(strcmp(GetSegurancas[i][s],"NONE",true) == 0) {
					printf("%s não precisou pagar o salário do seguranca %d pois ele ja foi demitido...",PlayerName(i),s);
				}
				else{
				    pStats[i][Banco] -= GetSegurancasValor[i][s];
				    if(IsStringAName(GetSegurancas[i][s])) pStats[IDName(GetSegurancas[i][s])][BancoTrabalho] += GetSegurancasValor[i][s];
				    else GiveValue(GetSegurancas[i][s],"BancoTrabalho",GetSegurancasValor[i][s]);
				    format(string,sizeof(string),"Você pagou o salário de %s de $%d",GetSegurancas[i][s],GetSegurancasValor[i][s]);
					SendClientMessage(i, COLOR_GREEN, string);
					if(IsStringAName(GetSegurancas[i][s])){
				    	format(string,sizeof(string),"%s lhe pagou o seu salário de $%d",PlayerName(i),GetSegurancasValor[i][s]);
				    	new id = IDName(GetSegurancas[i][s]);
						SendClientMessage(id, COLOR_GREEN, string);
						AcrescentarXpoints(id, 3);
						if(pStats[id][Propriedade] != 0)
						{
							AcrescentarLucro(pStats[id][Propriedade], GetSegurancasValor[i][s]/2);
						}
					}
				}
			}
		}
	}
}
stock SetPropertyOwner(propid, playerid)
{
	if(propid < 1 || propid >= sizeof Propriedades) return ;
	set(propStats[propid][Dono1], PlayerName(playerid));
	new string[128];
	SendClientMessageToAll(COLOR_SEGURANÇA, " ");
	SendClientMessageToAll(COLOR_SEGURANÇA, " ");
	format(string,sizeof(string),"[PROPRIEDADES] A propriedade %s foi comprada pelo novo investidor %.",Propriedades[propid][PropName],PlayerName(playerid));
	SendClientMessageToAll(COLOR_SEGURANÇA, string);
	SendClientMessageToAll(COLOR_SEGURANÇA, " ");
	SendClientMessageToAll(COLOR_SEGURANÇA, " ");
}
stock SellProperty(propid)
{
    if(propid < 1 || propid >= sizeof Propriedades) return ;
	set(propStats[propid][Dono1], "NONE");
	set(propStats[propid][Socio1], "NONE");
	set(propStats[propid][Socio2], "NONE");
	set(propStats[propid][Socio3], "NONE");
	for(new i = 0; i < MAX_SLOTS; i++)
	{
	    if(IsPlayerConnected(i) && Logado[i] && pStats[i][Propriedade] == propid)
	    {
	        pStats[i][Propriedade] = 0;
	    }
	}
}

stock IsPropertyPartner(playerid,propriedade)
{
	if(compare(propStats[propriedade][Socio1], PlayerName(playerid)) || compare(propStats[propriedade][Socio2],PlayerName(playerid)) || compare(propStats[propriedade][Socio3],PlayerName(playerid))) return true;
	return false;
}

stock SetPropertyPartner(playerid, propriedade)
{
	if(strcmp(propStats[propriedade][Socio1],"NONE",true) == 0) return set(propStats[propriedade][Socio1],PlayerName(playerid));
    if(strcmp(propStats[propriedade][Socio2],"NONE",true) == 0) return set(propStats[propriedade][Socio2],PlayerName(playerid));
    if(strcmp(propStats[propriedade][Socio3],"NONE",true) == 0) return set(propStats[propriedade][Socio3],PlayerName(playerid));
	return 1;
}

stock RemovePropertyPartner(playerid,propriedade)
{
    new str[128];
	set(str,PropertyFile(propriedade));
	if(strcmp(propStats[propriedade][Socio1],PlayerName(playerid),true) == 0) set(propStats[propriedade][Socio1],"NONE");
    if(strcmp(propStats[propriedade][Socio2],PlayerName(playerid),true) == 0) set(propStats[propriedade][Socio2],"NONE");
    if(strcmp(propStats[propriedade][Socio3],PlayerName(playerid),true) == 0) set(propStats[propriedade][Socio3],"NONE");
}

stock GetPartners(propriedade)
{
	new result;
    if(strcmp(propStats[propriedade][Socio1],"NONE",true)) result++;
    if(strcmp(propStats[propriedade][Socio2],"NONE",true)) result++;
    if(strcmp(propStats[propriedade][Socio3],"NONE",true)) result++;
    return result;
}
stock PropertiesResult()
{
	SendClientMessageToAll(COLOR_WHITE, "|========================= [ RESULTADO DAS PROPRIEDADES ] =========================|");
	new p = 1;
	new string[128];
	while(p < sizeof Propriedades)
	{
		new lucro = propStats[p][Lucro];
		new prejuizo = propStats[p][Prejuizo];
		new investimento = propStats[p][Investimento];
		new result = ((lucro - prejuizo) * (random(4) + 1));
		if(investimento > 0)
		{
			new randresult;
			for(new calc = 0; calc < 8; calc++)
			{
			    randresult = random(2);
				if(randresult == 0)
				{
				    result += ((investimento / 8) / (random(4) + 1)) * (random(4) + 1);
				}
				else
				{
				    result -= ((investimento / 8) / (random(4) + 10));
				}
			}
		}
		new gp = GetPartners(p);
		if(!compare(propStats[p][Dono1], "NONE"))
		{
			if(!IsStringAName(propStats[p][Dono1]))
			{
				GiveValue(PlayerFile(propStats[p][Dono1]),"BancoEmpresa", Porcentagem(result, 100 - (gp * 10)));
			}
			else
			{
				pStats[IDName(propStats[p][Dono1])][BancoEmpresa] += Porcentagem(result, 100 - (gp * 10));
			}
		}
		if(!compare(propStats[p][Socio1], "NONE"))
		{
		    if(IsStringAName(propStats[p][Socio1]))
		    {
		        pStats[IDName(propStats[p][Socio1])][BancoEmpresa] += Porcentagem(result, 10);
		    }
		    else
		    {
		        GiveValue(PlayerFile(propStats[p][Socio1]), "BancoEmpresa", Porcentagem(result, 10));
		    }
		}
		if(!compare(propStats[p][Socio2], "NONE"))
		{
		    if(IsStringAName(propStats[p][Socio2]))
		    {
		        pStats[IDName(propStats[p][Socio2])][BancoEmpresa] += Porcentagem(result, 10);
		    }
		    else
		    {
		        GiveValue(PlayerFile(propStats[p][Socio2]), "BancoEmpresa", Porcentagem(result, 10));
		    }
		}
		if(!compare(propStats[p][Socio3], "NONE"))
		{
		    if(IsStringAName(propStats[p][Socio3]))
		    {
		        pStats[IDName(propStats[p][Socio3])][BancoEmpresa] += Porcentagem(result, 10);
		    }
		    else
		    {
		        GiveValue(PlayerFile(propStats[p][Socio3]), "BancoEmpresa", Porcentagem(result, 10));
		    }
		}
		if(result <= 0)
		{
			format(string,sizeof(string),"[%s] Prejuízo -> $%d,00 dólares",CapsLock(Propriedades[p][PropName]),result);
			SendClientMessageToAll(COLOR_BLUE, string);
		}
		else
		{
		    format(string,sizeof(string),"[%s] Lucro -> $%d,00 dólares",CapsLock(Propriedades[p][PropName]),result);
		    SendClientMessageToAll(COLOR_BLUE, string);
		}
		propStats[p][SemanaRetrasada] = propStats[p][SemanaPassada];
		propStats[p][SemanaPassada] = result;
		propStats[p][Lucro] = 0;
		propStats[p][Prejuizo] = 0;
		propStats[p][Investimento] = 0;
		p++;
	}
	p = 1;
	while(p < sizeof Propriedades)
	{
 		if(propStats[p][SemanaPassada] > 0)
	    {
     		if(IsStringAName(propStats[p][Dono1]))
			{
			    new playa = IDName(propStats[p][Dono1]);
				format(string, sizeof string, "PARABÉNS: Sua propriedade %s obteve lucro! Espero que você continue mantendo os negócios assim.", Propriedades[p][PropName]);
				SendClientMessage(playa, COLOR_BLUE, string);
			}
			else
			{
				format(string,sizeof(string),"Sua propriedade %s teve um lucro de $%d =)",Propriedades[p][PropName],propStats[p][SemanaPassada]);
				GuardarMensagem(propStats[p][Dono1],string);
			}
  		}
   		else
	   	{
	        if(IsStringAName(propStats[p][Dono1]))
			{
				new playa = IDName(propStats[p][Dono1]);
				format(string, sizeof string, "Infelizmente sua propriedade %s teve prejuízo! Esperamos que da próxima vez não seja assim.", Propriedades[p][PropName]);
				SendClientMessage(playa, COLOR_BLUE, string);
			}
			else
			{
				format(string,sizeof(string),"Sua propriedade %s teve um prejuízo de $%d :(",Propriedades[p][PropName],propStats[p][SemanaPassada]);
				GuardarMensagem(propStats[p][Dono1],string);
			}
   		}
   		p++;
	}
}

stock AcrescentarPrejuizo(property,prejuizo) propStats[property][Prejuizo] += prejuizo;
stock AcrescentarLucro(property,lucro)	propStats[property][Lucro] += lucro;
stock AcrescentarInvestimento(property,investimento) propStats[property][Investimento] += investimento;

stock MudancaDia()
{
	ValorDia = (ValorDia + 1) % 7;
	new msgdata[128];
	format(msgdata,sizeof(msgdata),"~g~~h~%s ~n~~g~~h~%s/%s/%s",DiaNameGT[ValorDia],ApplyZero(DiaJogo),ApplyZero(MesJogo),ApplyZero(AnoJogo));
	TextDrawSetString(TextData[0], msgdata);
	format(msgdata,sizeof(msgdata)," ~n~ ~n~~g~~h~%s ~n~~g~~h~%s/%s/%s",DiaNameGT[ValorDia],ApplyZero(DiaJogo),ApplyZero(MesJogo),ApplyZero(AnoJogo));
	TextDrawSetString(TextData[1], msgdata);
}

stock Porcentagem(num,porc)
{
	if(porc >= 1 && porc <= 100) return porc*num/100;
	return 0;
}
stock TirarDiasAluguel()
{
	for(new i=0; i<MAX_SLOTS; i++){
	    if(pStats[i][LocouCasa] == 1){
	        if(pStats[i][DiasDeAluguel] > 1){
	            pStats[i][DiasDeAluguel] -= 1;
	            SendClientMessage(i, COLOR_WHITE, "Acaba de passar mais um dia de seu aluguel!");
	            return 1;
			}
			else{
			    SendClientMessage(i, COLOR_GRAY, "Seu prazo de aluguel da casa acabou!");
			    new string[128];
       			format(string,sizeof(string),"O prazo de aluguel da casa de %s acabou!",PlayerName(i));
			    if(IsStringAName(pStats[i][DonoCasaAlugada])){
			        new id = IDName(pStats[i][DonoCasaAlugada]);
			        SendClientMessage(id, COLOR_WHITE, string);
				}
				else{
				    GuardarMensagem(pStats[i][DonoCasaAlugada],string);
				}
				pStats[i][LocouCasa] = 0;
				pStats[i][DiasDeAluguel] = 0;
				set(pStats[i][DonoCasaAlugada],"NONE");
			}
		}
	}
	return 1;
}
stock RetirarJogadorPropriedade(playerid)
{
	if(pStats[playerid][Propriedade] > 0 && pStats[playerid][Propriedade] < sizeof Propriedades)
	{
		new string[128];
		format(string, sizeof string, "Você saiu da propriedade \"%s\" devido a troca de profissão...", Propriedades[pStats[playerid][Propriedade]][PropName]);
		SendClientMessage(playerid, COLOR_BLUE, string);
	}
	pStats[playerid][Propriedade] = 0;
	pStats[playerid][AumentoPropriedade] = 0;
}
stock EmpresasCarros(){
	new string[128];
	if(!compare(propStats[14][Dono1],"NONE")){
	    if(!fexist(propStats[14][Dono1])) return 0;
		new rand1 = minrand(5000,7000);
		new rand2 = minrand(3500,4000);
		new rand3 = minrand(2000,3000);
		format(string,sizeof(string),"Life's'autos: $%d,00 - Virtual Car & Cia: $%d,00 - Your Life's' Car: $%d,00 - Total: $%d,00",rand1,rand2,rand3,rand1+rand2+rand3);
		if(IsStringAName(propStats[14][Dono1])){
		    SendClientMessage(IDName(propStats[14][Dono1]), COLOR_LIGHT_RED, "Cobrança das empresas de fabricação de automóveis:");
		    SendClientMessage(IDName(propStats[14][Dono1]), COLOR_WHITE, string);
		}
		else{
		    GuardarMensagem(propStats[14][Dono1], "Cobrança das empresas de fabricação de automóveis:");
		    GuardarMensagem(propStats[14][Dono1], string);
		}
		AcrescentarPrejuizo(14,rand1+rand2+rand3);
	}
	return 1;
}
stock SetPlayerShakeVision(playerid, type)
{
	if (!IsPlayerConnected(playerid)) return 1;
	Vision[playerid] = true;
	VisTime[playerid] = 0;
	VisTurn[playerid] = 1;
	SetTimerEx("VisionTimer", 100, 0, "id", playerid, type);
	return 1;
}

stock DisablePlayerShakeVision(playerid)
{
	Vision[playerid] = false;
	SetCameraBehindPlayer(playerid);
	SetCameraBehindPlayer(playerid);
	return 1;
}

stock ShowVehicleDocuments(playerid, vehicleid)
{
	new str[128];
	SendClientMessage(playerid, COLOR_GREEN, "|=================== [Documentos do veículo] ===================|");
	format(str, sizeof str, "Proprietário: %s", vStats[vehicleid][VDono]);
	SendClientMessage(playerid, COLOR_WHITE, str);
	format(str, sizeof str, "A chave está com: %s", vStats[vehicleid][VChave]);
	SendClientMessage(playerid, COLOR_WHITE, str);
	format(str, sizeof str, "Modelo: %s (%d)", GetVehicleModelName(GetVehicleModel(vehicleid)), GetVehicleModel(vehicleid));
	SendClientMessage(playerid, COLOR_WHITE, str);
	format(str, sizeof str, "Dívidas avaliadas em: $%d,00 dólares", vStats[vehicleid][Dividas]);
	SendClientMessage(playerid, COLOR_WHITE, str);
	format(str, sizeof str, "Placa: %s", vStats[vehicleid][VPlaca]);
	SendClientMessage(playerid, COLOR_WHITE, str);
	if(vStats[vehicleid][PrecoVenda] > 0)
	{
		format(str, sizeof str, "À venda: Sim [Valor: $%d,00 dólares]", vStats[vehicleid][PrecoVenda]);
		SendClientMessage(playerid, COLOR_WHITE, str);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_WHITE, "À venda: Não");
	}
	if(vStats[vehicleid][VSeguro] == 1 || vehicleid <= AmountServerVehicles)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Assegurado: Sim");
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "Assegurado: Não");
	}
}

public VisionTimer(playerid, type)
{
	new Float:X,Float:Y,Float:Z,Float:A;
	if (IsPlayerInAnyVehicle(playerid))
	{
	    GetVehiclePos(GetPlayerVehicleID(playerid), X, Y, Z);
		GetVehicleZAngle(GetPlayerVehicleID(playerid), A);
	}
	else
	{
	    GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, A);
	}
	if (type == 1)
	{
	    if (VisTurn[playerid] == 1)
	    {
	        new Float:time = float(VisTime[playerid])/2;
	        X += (time * floatsin(-(A+90), degrees));
	        Y += (time * floatcos(-(A+90), degrees));
	        SetPlayerCameraPos(playerid, X, Y, Z+0.7);
	        X -= (time * floatsin(-(A+90), degrees));
	        Y -= (time * floatcos(-(A+90), degrees));
			SetPlayerCameraLookAt(playerid, X, Y, Z+0.7);
			X += (time * floatsin(-(A+90), degrees));
	        Y += (time * floatcos(-(A+90), degrees));
			VisTime[playerid]++;
			if (VisTime[playerid] == 2) VisTurn[playerid] = 2;
		}
		else if (VisTurn[playerid] == 2)
	    {
	        new Float:time = float(VisTime[playerid])/2;
	       	X -= (time * floatsin(-(A-90), degrees));
	        Y -= (time * floatcos(-(A-90), degrees));
	        SetPlayerCameraPos(playerid, X, Y, Z+0.7);
	        X += (time * floatsin(-(A-90), degrees));
	        Y += (time * floatcos(-(A-90), degrees));
			SetPlayerCameraLookAt(playerid, X, Y, Z+0.7);
			X -= (time * floatsin(-(A-90), degrees));
	        Y -= (time * floatcos(-(A-90), degrees));
			VisTime[playerid]--;
			if (VisTime[playerid] == -2) VisTurn[playerid] = 1;
		}
		X -= (3.0 * floatsin(-A, degrees));
		Y -= (3.0 * floatcos(-A, degrees));
		SetPlayerCameraPos(playerid, X, Y, Z+0.7);
		X += (3.0 * floatsin(-A, degrees));
		Y += (3.0 * floatcos(-A, degrees));
		SetPlayerCameraLookAt(playerid, X, Y, Z+0.7);
	}
	else if (type == 2)
	{
	    if (VisTurn[playerid] == 1)
	    {
	        new Float:time = float(VisTime[playerid])/2;
	        X += (time * floatsin(-(A+90), degrees));
	        Y += (time * floatcos(-(A+90), degrees));
	        SetPlayerCameraPos(playerid, X, Y, Z+0.7);
	        X -= (time * floatsin(-(A+90), degrees));
	        Y -= (time * floatcos(-(A+90), degrees));
	        Z += time;
			SetPlayerCameraLookAt(playerid, X, Y, Z+0.7);
			X += (time * floatsin(-(A+90), degrees));
	        Y += (time * floatcos(-(A+90), degrees));
			VisTime[playerid]++;
			if (VisTime[playerid] == 2) VisTurn[playerid] = 2;
		}
		else if (VisTurn[playerid] == 2)
	    {
	        new Float:time = float(VisTime[playerid])/2;
	       	X -= (time * floatsin(-(A-90), degrees));
	        Y -= (time * floatcos(-(A-90), degrees));
	        SetPlayerCameraPos(playerid, X, Y, Z+0.7);
	        X += (time * floatsin(-(A-90), degrees));
	        Y += (time * floatcos(-(A-90), degrees));
	        Z -= time;
			SetPlayerCameraLookAt(playerid, X, Y, Z+0.7);
			X -= (time * floatsin(-(A-90), degrees));
	        Y -= (time * floatcos(-(A-90), degrees));
			VisTime[playerid]--;
			if (VisTime[playerid] == -2) VisTurn[playerid] = 1;
		}
		X -= (3.0 * floatsin(-A, degrees));
		Y -= (3.0 * floatcos(-A, degrees));
		SetPlayerCameraPos(playerid, X, Y, Z+0.7);
		X += (3.0 * floatsin(-A, degrees));
		Y += (3.0 * floatcos(-A, degrees));
		SetPlayerCameraLookAt(playerid, X, Y, Z+0.7);
	}
	else if(type == 0)
	{
	    DisablePlayerShakeVision(playerid);
	}
	if (Vision[playerid] == true) SetTimerEx("VisionTimer", 100, 0, "id", playerid, type);
	else DisablePlayerShakeVision(playerid);
}
public Bebado(playerid){
	if(pStats[playerid][Alcool] > 7){
	    CountVomit[playerid] ++;
		pStats[playerid][Alcool] = pStats[playerid][Alcool] - 1;
	    if(!IsPlayerInAnyVehicle(playerid)){
	        if(CountVomit[playerid] <= 4){
	    		ApplyAnimation(playerid,"PED", "WALK_DRUNK",10,0,1,0,0,0);
				SendClientMessage(playerid, COLOR_PARAMEDICO, "EI EI EI EI SEM VOCÊ NÃO VIVEREI. Tá tudo tremendo o.O");
				SetPlayerShakeVision(playerid, 1);
			    KillTimer(TimerBebida[playerid]);
				TimerBebida[playerid] = SetTimerEx("Bebado",80000,0,"d",playerid);
				SetTimerEx("DPVoff",10000,0,"d",playerid);
			} else {
				pStats[playerid][Alcool] = pStats[playerid][Alcool] - 1;
				CountVomit[playerid] = 0;
				ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.1, 0,0,0,0,0);
				SetPlayerShakeVision(playerid, 2);
				SendClientMessage(playerid, COLOR_PARAMEDICO, "Brugh...eu acho que o whisky tava vencido ( o.O ).");
				KillTimer(TimerBebida[playerid]);
				TimerBebida[playerid] = SetTimerEx("Bebado",80000,0,"d",playerid);
				SetTimerEx("DPVoff",10000,0,"d",playerid);
			}
		} else {
			KillTimer(TimerCarrinho[playerid]);
			TimerCarrinho[playerid] = SetTimerEx("CarroBebado",20000,0,"d",playerid);
		}
	}
}
public DPVoff(playerid){
	DisablePlayerShakeVision(playerid);
	VisionTimer(playerid, 0);
}
public CarroBebado(playerid){
	if(pStats[playerid][Alcool] > 8){
	    if(IsPlayerInAnyVehicle(playerid)){
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
				CountCarroDoido[playerid] ++;
				new veiculo = GetPlayerVehicleID(playerid);
				new Float:RodarCarroBebado;
				GetVehicleZAngle(veiculo, RodarCarroBebado);
				new drand = random(100);
				new virada = minrand(7,17);
				if(CountCarroDoido[playerid] == 4){
				    CountCarroDoido[playerid] = 0;
					SendClientMessage(playerid, COLOR_GREEN, "[AVISO] Como você está bêbado o carro pode andar para os outros lados.");
				}
				if(drand <= 50){
					SetVehicleZAngle(veiculo, RodarCarroBebado+virada);
					SetPlayerShakeVision(playerid, 1);
					KillTimer(TimerCarrinho[playerid]);
					SendClientMessage(playerid, COLOR_PARAMEDICO, "Acho que aquela biroska não fez bem não, estou um pouco tonto...");
					TimerCarrinho[playerid] = SetTimerEx("CarroBebado",30000,0,"d",playerid);
					SetTimerEx("DPVoff",10000,0,"d",playerid);
				} else {
					SetVehicleZAngle(veiculo, RodarCarroBebado-virada);
					KillTimer(TimerCarrinho[playerid]);
					SendClientMessage(playerid, COLOR_PARAMEDICO, "Acho que aquela biroska não fez bem não, estou um pouco tonto...");
					SetPlayerShakeVision(playerid, 2);
					SetTimerEx("DPVoff",10000,0,"d",playerid);
					TimerCarrinho[playerid] = SetTimerEx("CarroBebado",30000,0,"d",playerid);
				}
			}
		}
	}
}

public CarroTonto(playerid){
    if(IsPlayerInAnyVehicle(playerid)){
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
			if(pStats[playerid][HabTerrestre] == 0 && pStats[playerid][Alcool] < 8){
				new veiculo = GetPlayerVehicleID(playerid);
				new Float:RodarCarro;
				GetVehicleZAngle(veiculo, RodarCarro);
				new drand = random(100);
				new virada = minrand(5,12);
				CountViradas[playerid] ++;
				if(CountViradas[playerid] == 10){
				    CountViradas[playerid] = 0;
					SendClientMessage(playerid, COLOR_WHITE, "[AVISO] Como você não sabe dirigir o carro, poderá as vezes perder o controle dele.");
				}
				if(drand <= 50){
					SetVehicleZAngle(veiculo, RodarCarro+virada);
					KillTimer(TimerCarrinho[playerid]);
					TimerCarrinho[playerid] = SetTimerEx("CarroTonto",25000,0,"d",playerid);
				} else {
					SetVehicleZAngle(veiculo, RodarCarro-virada);
					KillTimer(TimerCarrinho[playerid]);
					TimerCarrinho[playerid] = SetTimerEx("CarroTonto",25000,0,"d",playerid);
				}
			}
		}
	}
}

public GetPlayerZone(playerid) return playerzone[playerid];
stock GetPlayerGangColor(playerid) return GetGangColor(pStats[playerid][GangueNome]);
stock GetZone(pickup, zone[], len)
{
	new Float:x, Float:y;
	x = pckStats[pickup][pX];
	y = pckStats[pickup][pY];
 	for(new i = 0; i != sizeof(gSAZones); i++ )
 	{
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
		{
		    return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
		}
	}
	return 0;
}
public UpdateZones() {
	for(new i=0; i<MAX_SLOTS; i++) {
		if(IsPlayerConnected(i) && Logado[i] == 1 && zoneupdates[i] == 1) {
	   		if(!IsPlayerInZone(i,playerzone[i])){
	    		playerzone[i] = -1;
				if(AttackZone[i] != -1)
				{
				    SendClientMessage(i, COLOR_WHITE, "OK... Você não quis atacar...");
				}
	    		AttackZone[i] = -1;
	    		CanAttack[i] = false;
	    		KillTimer(GangAttackTimer[i]);
				for(new j=0; j<sizeof(zones);j++)
				{
	     			if(IsPlayerInZone(i,j) && playerzone[i] == -1)
					 {
	     			    playerzone[i] = j;
	     			    if(!compare(GangControlZone[j],"NONE"))
					 	{
	     			        new str[128];
	     			        if(IsZoneAttacked(j))
	     			        {
								format(str,sizeof(str),"~w~%s ~n~~y~%s gang ~n~~r~%s gang",zones[j][zonename],GangControlZone[j],ZoneAttacked[j]);
								if(!IsPlayerInGang(i)) SendClientMessage(i, COLOR_LIGHT_RED, "CUIDADO! Aqui está havendo uma guerra de gangues... Melhor sair de perto");
							}
							else
							{
							    if(compare(GangControlZone[j], pStats[i][GangueNome]) && IsPlayerInGang(i))
							    {
							        format(str,sizeof(str),"~w~%s ~n~~y~%s gang ~n~~b~$%d",zones[j][zonename],GangControlZone[j],ZoneCash[j]);
							    }
							    else
							    {
							    	format(str,sizeof(str),"~w~%s ~n~~y~%s gang",zones[j][zonename],GangControlZone[j]);
							    	if(IsPlayerInGang(i) && !pStats[i][Morrendo])
							    	{
										new count = 0;
										for(new g = 0; g < MAX_SLOTS; g++)
							    		{
							    		    if(IsPlayerConnected(g) && Logado[g] && compare(pStats[g][GangueNome], GangControlZone[j]))
							    		    {
												count++;
							    		    }
							    		}
							    		if(count > 2)
							    		{
							    		    SendClientMessage(i, COLOR_WHITE, "Você pode começar um ataque aqui, apenas não saiá...");
							    		    GangAttackTimer[i] = SetTimerEx("CanAttackZone", 30000, 0, "dd", i, j);
							    		    AttackZone[i] = j;
							    		    CanAttack[i] = false;
							    		}
									}
								}
							}
						 	GameTextForPlayer(i,str,1500,1);
						 	break;
						}
						else{
						    new str[128];
							format(str,sizeof(str),"~w~%s ~n~~g~sem gangue",zones[j][zonename]);
							GameTextForPlayer(i,str,1500,1);
							break;
						}
					}
				}
			}
		}
	}
}
IsPlayerInZone(playerid, zoneid) {
	if(zoneid == -1) return 0;
	new Float:x, Float:y, Float:z;
 	GetPlayerPos(playerid,x,y,z);
 	if(x >= zones[zoneid][zoneminx] && x < zones[zoneid][zonemaxx]
 	&& y >= zones[zoneid][zoneminy] && y < zones[zoneid][zonemaxy]
 	&& z < 900.0) return 1;
 	return 0;
}

public CanAttackZone(playerid, zoneid)
{
    KillTimer(GangAttackTimer[playerid]);
    if(!IsZoneAttacked(zoneid))
    {
		if(AttackZone[playerid] != zoneid)
		{
		    AttackZone[playerid] = -1;
		}
		else
		{
		    CanAttack[playerid] = true;
		    SendClientMessage(playerid, COLOR_WHITE, "Para atacar esse território digite /atacarterritorio");
		}
	}
	else
	{
	    CanAttack[playerid] = false;
	    AttackZone[playerid] = -1;
	}
}

public FlashEffect(Float:X, Float:Y, Float:Z)
{
	for(new i = 0; i < MAX_SLOTS; i++)
	{
	    new Float:playerx, Float:playery, Float:playerz, Float:dis;
	    GetPlayerPos(i, playerx, playery, playerz);
	    dis += floatpower(X - playerx, 2);
	    dis += floatpower(Y - playery, 2);
	    dis += floatpower(Z - playerz, 2);
		dis = floatsqroot(dis);
		if(dis < 25.0)
		{
		    Blinded[i] = 1;
		    KillTimer(TimerBlind[i]);
		    TextDrawBoxColor(FlashAction, 0xFFFFFFFF);
		    TextDrawShowForPlayer(i, FlashAction);
		    if(dis < 3)
		    {
		    	TimerBlind[i] = SetTimerEx("Blind", 7000, 0, "dd", i, 15);
			}
			else if(dis < 6)
			{
			    TimerBlind[i] = SetTimerEx("Blind", 5500, 0, "dd", i, 15);
			}
			else if(dis < 12)
			{
				TimerBlind[i] = SetTimerEx("Blind", 4000, 0, "dd", i, 15);
			}
			else if(dis < 19)
			{
			    TimerBlind[i] = SetTimerEx("Blind", 2500, 0, "dd", i, 15);
			}
			else
			{
			    TimerBlind[i] = SetTimerEx("Blind", 1000, 0, "dd", i, 15);
			}
		}
	}
}

public Blind(playerid, count)
{
    KillTimer(TimerBlind[playerid]);
    new FlashAlpha[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE };
    new c = count;
    if(c > 0xE) c = 0xE;
    if(c < 0x0) c = 0x0;
    TextDrawHideForPlayer(playerid, FlashAction);
    TextDrawBoxColor(FlashAction, 0xFFFFFF00 | FlashAlpha[c]);
    TextDrawShowForPlayer(playerid, FlashAction);
    if(count > 0)
    {
    	TimerBlind[playerid] = SetTimerEx("Blind", 300, 0, "dd", playerid, count - 1);
	}
	else
	{
	    Blinded[playerid] = 0;
	    TextDrawHideForPlayer(playerid, FlashAction);
	}
}

public DroppingRocket(times, Float:X, Float:Y, Float:Z)
{
	CreateExplosion(X, Y, Z + 10.0 + (15.0 * (16 - times)), 11, 0.0);
	if(times > 0) SetTimerEx("DroppingRocket", 1000, false, "dfff", times - 1, X, Y, Z);
}

public ExplodeBombVehicle(count, vehicleid)
{
	new Float:X, Float:Y, Float:Z;
	GetVehiclePos(vehicleid, X, Y, Z);
    if(count <= 2)
	{
	    for(new i = 0; i < MAX_SLOTS; i++)
	   	{
	   		new Float:X2, Float:Y2, Float:Z2;
    		GetPlayerPos(i, X2, Y2, Z2);
    		if(floatsqroot(floatpower(X - X2, 2) + floatpower(Y - Y2, 2) + floatpower(Z - Z2, 2)) < 10)
    		{
    	   		SendClientMessage(i, COLOR_LIGHT_RED, "CABUUUUUUUUMMMMMMMMM!!!!!!!!!!!!!");
    		}
		}
        if(count == 0)
	    {
	    	CreateExplosion(X, Y, Z, 6, 10.0);
	    	CreateExplosion(X + 3.0, Y, Z, 6, 54.0);
	    	CreateExplosion(X - 3.0, Y, Z, 6, 54.0);
	    	CreateExplosion(X, Y + 3.0, Z, 6, 54.0);
	    	CreateExplosion(X, Y - 3.0, Z, 6, 54.0);
	    	CreateExplosion(X + 3.0, Y, Z + 10, 6, 54.0);
	    	CreateExplosion(X - 3.0, Y, Z + 10, 6, 54.0);
	    	CreateExplosion(X, Y + 3.0, Z + 10, 6, 54.0);
	    	CreateExplosion(X, Y - 3.0, Z + 10, 6, 54.0);
		}
		else if(count == 1)
		{
		    CreateExplosion(X, Y, Z, 6, 10.0);
	    	CreateExplosion(X + 1.5, Y + 1.5, Z, 6, 52.0);
	    	CreateExplosion(X - 1.5, Y - 1.5, Z, 6, 52.0);
	    	CreateExplosion(X + 1.5, Y - 1.5, Z, 6, 52.0);
	    	CreateExplosion(X - 1.5, Y + 1.5, Z, 6, 52.0);
	    	CreateExplosion(X + 1.5, Y + 1.5, Z + 10, 6, 52.0);
	    	CreateExplosion(X - 1.5, Y - 1.5, Z + 10, 6, 52.0);
	    	CreateExplosion(X + 1.5, Y - 1.5, Z + 10, 6, 52.0);
	    	CreateExplosion(X - 1.5, Y + 1.5, Z + 10, 6, 52.0);
		}
		else if(count == 2)
		{
		    SetVehicleHealth(vehicleid, 0.0);
		    CreateExplosion(X, Y, Z, 6, 10.0);
	    	CreateExplosion(X + 1.0, Y, Z, 6, 50.0);
	    	CreateExplosion(X - 1.0, Y, Z, 6, 50.0);
	    	CreateExplosion(X, Y + 1.0, Z, 6, 50.0);
	    	CreateExplosion(X, Y - 1.0, Z, 6, 50.0);
	    	CreateExplosion(X + 1.0, Y, Z + 10, 6, 50.0);
	    	CreateExplosion(X - 1.0, Y, Z + 10, 6, 50.0);
	    	CreateExplosion(X, Y + 1.0, Z + 10, 6, 50.0);
	    	CreateExplosion(X, Y - 1.0, Z + 10, 6, 50.0);
		}
	}
    else
	{
	    for(new i = 0; i < MAX_SLOTS; i++)
	    {
			if(IsPlayerConnected(i) && Logado[i] == 1)
			{
	        	if(IsPlayerInVehicle(i, vehicleid))
	        	{
					new str[128];
					for(new e = 11; e > count; e--)
					{
					    strcat(str,"PI, PI, ");
					}
					PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
					SendClientMessage(i, COLOR_LIGHT_RED, str);
				}
			}
		}
	}
	if(count > 0) SetTimerEx("ExplodeBombVehicle", 2500, false, "dd", count - 1, vehicleid);
}

public ExplodeBomb(count, Float:X, Float:Y, Float:Z)
{
	if(count <= 2)
	{
	   	for(new i = 0; i < MAX_SLOTS; i++)
	   	{
	   		new Float:X2, Float:Y2, Float:Z2;
    		GetPlayerPos(i, X2, Y2, Z2);
    		if(floatsqroot(floatpower(X - X2, 2) + floatpower(Y - Y2, 2) + floatpower(Z - Z2, 2)) < 10)
    		{
    	   		SendClientMessage(i, COLOR_LIGHT_RED, "CABUUUUUUUUMMMMMMMMM!!!!!!!!!!!!!");
    		}
		}
        if(count == 0)
	    {
	    	CreateExplosion(X, Y, Z, 6, 10.0);
	    	CreateExplosion(X + 3.0, Y, Z, 6, 54.0);
	    	CreateExplosion(X - 3.0, Y, Z, 6, 54.0);
	    	CreateExplosion(X, Y + 3.0, Z, 6, 54.0);
	    	CreateExplosion(X, Y - 3.0, Z, 6, 54.0);
	    	CreateExplosion(X + 3.0, Y, Z + 10, 6, 54.0);
	    	CreateExplosion(X - 3.0, Y, Z + 10, 6, 54.0);
	    	CreateExplosion(X, Y + 3.0, Z + 10, 6, 54.0);
	    	CreateExplosion(X, Y - 3.0, Z + 10, 6, 54.0);
		}
		else if(count == 1)
		{
		    CreateExplosion(X, Y, Z, 6, 10.0);
	    	CreateExplosion(X + 1.5, Y + 1.5, Z, 6, 52.0);
	    	CreateExplosion(X - 1.5, Y - 1.5, Z, 6, 52.0);
	    	CreateExplosion(X + 1.5, Y - 1.5, Z, 6, 52.0);
	    	CreateExplosion(X - 1.5, Y + 1.5, Z, 6, 52.0);
	    	CreateExplosion(X + 1.5, Y + 1.5, Z + 10, 6, 52.0);
	    	CreateExplosion(X - 1.5, Y - 1.5, Z + 10, 6, 52.0);
	    	CreateExplosion(X + 1.5, Y - 1.5, Z + 10, 6, 52.0);
	    	CreateExplosion(X - 1.5, Y + 1.5, Z + 10, 6, 52.0);
		}
		else if(count == 2)
		{
		    CreateExplosion(X, Y, Z, 6, 10.0);
	    	CreateExplosion(X + 1.0, Y, Z, 6, 50.0);
	    	CreateExplosion(X - 1.0, Y, Z, 6, 50.0);
	    	CreateExplosion(X, Y + 1.0, Z, 6, 50.0);
	    	CreateExplosion(X, Y - 1.0, Z, 6, 50.0);
	    	CreateExplosion(X + 1.0, Y, Z + 10, 6, 50.0);
	    	CreateExplosion(X - 1.0, Y, Z + 10, 6, 50.0);
	    	CreateExplosion(X, Y + 1.0, Z + 10, 6, 50.0);
	    	CreateExplosion(X, Y - 1.0, Z + 10, 6, 50.0);
		}
	}
	else
	{
	    for(new i = 0; i < MAX_SLOTS; i++)
	    {
			if(IsPlayerConnected(i) && Logado[i] == 1)
			{
	        	new Float:X2, Float:Y2, Float:Z2;
	        	GetPlayerPos(i, X2, Y2, Z2);
	        	if(floatsqroot(floatpower(X - X2, 2) + floatpower(Y - Y2, 2) + floatpower(Z - Z2, 2)) < 20)
	        	{
					new str[128];
					for(new e = 11; e > count; e--)
					{
					    strcat(str,"PI, PI, ");
					}
					PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
					SendClientMessage(i, COLOR_LIGHT_RED, str);
				}
			}
		}
	}
	if(count > 0) SetTimerEx("ExplodeBomb", 2000, false, "dfff", count - 1, X, Y, Z);
}

stock Inflacao(){
    new cons = random(9);
	new inflac = 5 - cons;
	new str[128];
	SendClientMessageToAll(COLOR_DARK_GREEN,"_____________________________________________________________________________________");
	if(inflac == 0){
    	SendClientMessageToAll(COLOR_DARK_GREEN,"[BOLSA DE VALORES] Os investimentos da bolsa( ações e investimentos bancários)");
    	SendClientMessageToAll(COLOR_DARK_GREEN,"[BOLSA DE VALORES]  e os valores das mercadorias se mantiveram fixos.");
    }
    if(inflac > 0){
        ValorGasolina += random(2);
		ValorAditivada += random(3);
		ValorDiesel += random(3);
		ValorAlcool += random(3);
		ValorQuerosene += random(3);
		ValorTV = ValorTV/100 * inflac + ValorTV;
		ValorRadio = ValorRadio/100 * inflac + ValorRadio;
		ValorGeladeira = ValorGeladeira/100 * inflac + ValorGeladeira;
		ValorFogao =  ValorFogao/100 * inflac + ValorFogao;
		ValorCelular = ValorCelular/100 * inflac + ValorCelular;
		ValorGuardaRoupas =  ValorGuardaRoupas/100 * inflac + ValorGuardaRoupas;
		ValorCofre = ValorCofre/100 * inflac + ValorCofre;
	 	ValorFrango = ValorFrango/100 * inflac + ValorFrango;
		ValorPeixe = ValorPeixe/100 * inflac + ValorPeixe;
		ValorPizza = ValorPizza/100 * inflac + ValorPizza;
		ValorSalada = ValorSalada/100 * inflac + ValorSalada;
		ValorRefrigerante = ValorRefrigerante/100 * inflac + ValorRefrigerante;
		ValorSuco = ValorSuco/100 * inflac + ValorSuco;
		ValorCarne = ValorCarne/100 * inflac + ValorCarne;
		ValorStrogonoff = ValorStrogonoff/100 * inflac + ValorStrogonoff;
		ValorCamarao = ValorCamarao/100 * inflac + ValorCamarao;
		ValorLinguica = ValorLinguica/100 * inflac + ValorLinguica;
    	SendClientMessageToAll(COLOR_DARK_GREEN,"[BOLSA DE VALORES] Os investimentos da bolsa( ações e investimentos bancários) e os valores das mercadorias");
   		format(str, sizeof(str),"[BOLSA DE VALORES] Tiveram ALTA de %d por cento veja as suas ações,investimentos bancários ou valores das novas mercadorias.",inflac);
   		SendClientMessageToAll(COLOR_LIGHT_GREEN, str);
   		SendClientMessageToAll(COLOR_LIGHT_GREEN, "[BOLSA DE VALORES] Novos Preços:");
   		format(str, sizeof(str),"[BOLSA DE VALORES] Gasolina: $%d - Gasolina Aditivada: $%d - Diesel: $%d - Alcool: $%d - Querosene: $%d",ValorGasolina, ValorAditivada, ValorDiesel, ValorAlcool, ValorQuerosene);
   		SendClientMessageToAll(COLOR_LIGHT_GREEN, str);
   		format(str, sizeof(str),"[BOLSA DE VALORES] Celular: $%d   -   TV: $%d   -   Rádio: $%d   -    Geladeira: $%d   -    Fogão: $%d", ValorCelular, ValorTV, ValorRadio, ValorGeladeira, ValorFogao);
   		SendClientMessageToAll(COLOR_LIGHT_GREEN, str);
   		format(str, sizeof(str),"[BOLSA DE VALORES] Cofre: $%d   -   Guarda-Roupas: $%d", ValorCofre, ValorGuardaRoupas);
   		SendClientMessageToAll(COLOR_LIGHT_GREEN, str);
		format(str, sizeof(str),"[BOLSA DE VALORES] Frango Pct: $%d   -   Peixe Kg: $%d   -   Pizza QTD: $%d   -    Salada Cx: $%d   -    Refrigerante Litro: $%d", ValorFrango, ValorPeixe, ValorPizza, ValorSalada, ValorRefrigerante);
	   	SendClientMessageToAll(COLOR_LIGHT_GREEN, str);
	   	format(str, sizeof(str),"[BOLSA DE VALORES] Suco Lt: $%d   -   Carne Kg: $%d   -   Strogonoff Cx: $%d   -    Camarão Kg: $%d   -    Linguiça: $%d", ValorSuco, ValorCarne, ValorStrogonoff, ValorCamarao, ValorLinguica);
   		for(new i=0; i<MAX_SLOTS; i++){
	   		if(pStats[i][PInvestimento] > 10000){
	   		    pStats[i][PInvestimento] += pStats[i][PInvestimento]/100 * inflac;
   				format(str, sizeof(str),"[BOLSA DE VALORES/BANCO] Sua aplicação Bancária subiu %d por cento sua aplicação bancária está valendo: $%d",inflac, pStats[i][PInvestimento]);
	       		SendClientMessage(i, COLOR_LIGHT_GREEN, str);
	    	} else {
	       		SendClientMessage(i, COLOR_LIGHT_GREEN, "[BOLSA DE VALORES] Você não possui nenhum investimento bancário, aplique já o seu dinheiro. Vá até o banco.");
	        	return 1;
	        }
		}
	}
	else if(inflac < 0){
	    ValorGasolina -= random(2);
		ValorAditivada -= random(3);
		ValorDiesel -= random(3);
		ValorAlcool -= random(3);
		ValorQuerosene -= random(3);
		if(ValorGasolina<=0) ValorGasolina = 1;
		if(ValorAditivada<=0) ValorAditivada = 1;
		if(ValorDiesel<=0) ValorDiesel = 1;
		if(ValorAlcool<=0) ValorAlcool = 1;
		if(ValorQuerosene<=0) ValorQuerosene = 1;
	   	ValorTV -= Porcentagem(ValorTV,(inflac*(-1)));
	   	ValorRadio -= Porcentagem(ValorRadio,(inflac*(-1)));
	   	ValorFogao -= Porcentagem(ValorFogao,(inflac*(-1)));
	   	ValorGeladeira -= Porcentagem(ValorGeladeira,(inflac*(-1)));
	   	ValorCelular -= Porcentagem(ValorCelular,(inflac*(-1)));
	   	ValorGuardaRoupas -= Porcentagem(ValorGuardaRoupas,(inflac*(-1)));
	   	ValorCofre -= Porcentagem(ValorCofre,(inflac*(-1)));
		ValorFrango -= Porcentagem(ValorFrango,(inflac*(-1)));
	   	ValorPeixe -= Porcentagem(ValorPeixe,(inflac*(-1)));
		ValorPizza -= Porcentagem(ValorPizza,(inflac*(-1)));
	   	ValorSalada -= Porcentagem(ValorSalada,(inflac*(-1)));
	   	ValorRefrigerante -= Porcentagem(ValorRefrigerante,(inflac*(-1)));
	   	ValorSuco -= Porcentagem(ValorSuco,(inflac*(-1)));
	   	ValorCarne -= Porcentagem(ValorCarne,(inflac*(-1)));
	   	ValorStrogonoff -= Porcentagem(ValorStrogonoff,(inflac*(-1)));
	   	ValorCamarao -= Porcentagem(ValorCamarao,(inflac*(-1)));
	   	ValorLinguica -= Porcentagem(ValorLinguica,(inflac*(-1)));
	   	SendClientMessageToAll(COLOR_DARK_GREEN,"[BOLSA DE VALORES] Os investimentos da bolsa( ações e investimentos bancários) e os valores das mercadorias");
		format(str, sizeof(str),"[BOLSA DE VALORES] Tiveram BAIXA de %d por cento veja as suas ações,investimentos bancários ou valores das novas mercadorias",inflac);
		SendClientMessageToAll(COLOR_LIGHT_GREEN, str);
		SendClientMessageToAll(COLOR_LIGHT_GREEN, "[BOLSA DE VALORES] Novos Preços:");
   		format(str, sizeof(str),"[BOLSA DE VALORES] Gasolina: $%d - Gasolina Aditivada: $%d - Diesel: $%d - Alcool: $%d - Querosene: $%d",ValorGasolina, ValorAditivada, ValorDiesel, ValorAlcool, ValorQuerosene);
   		SendClientMessageToAll(COLOR_LIGHT_GREEN, str);
	   	format(str, sizeof(str),"[BOLSA DE VALORES] Celular: $%d   -   TV: $%d   -   Rádio: $%d   -    Geladeira: $%d   -    Fogão: $%d", ValorCelular, ValorTV, ValorRadio, ValorGeladeira, ValorFogao);
	   	SendClientMessageToAll(COLOR_LIGHT_GREEN, str);
   		format(str, sizeof(str),"[BOLSA DE VALORES] Cofre: $%d   -   Guarda-Roupas: $%d", ValorCofre, ValorGuardaRoupas);
   		SendClientMessageToAll(COLOR_LIGHT_GREEN, str);
	   	format(str, sizeof(str),"[BOLSA DE VALORES] Frango Pct: $%d   -   Peixe Kg: $%d   -   Pizza QTD: $%d   -    Salada Cx: $%d   -    Refrigerante Litro: $%d", ValorFrango, ValorPeixe, ValorPizza, ValorSalada, ValorRefrigerante);
	   	SendClientMessageToAll(COLOR_LIGHT_GREEN, str);
	   	format(str, sizeof(str),"[BOLSA DE VALORES] Suco Lt: $%d   -   Carne Kg: $%d   -   Strogonoff Cx: $%d   -    Camarão Kg: $%d   -    Linguiça: $%d", ValorSuco, ValorCarne, ValorStrogonoff, ValorCamarao, ValorLinguica);
	   	SendClientMessageToAll(COLOR_LIGHT_GREEN, str);
	   	for(new i=0; i<MAX_SLOTS; i++){
			if(pStats[i][PInvestimento] > 10000){
			    pStats[i][PInvestimento] -= Porcentagem(pStats[i][PInvestimento],(inflac*(-1)));
		   		format(str, sizeof(str),"[BOLSA DE VALORES/BANCO] Sua aplicação Bancária caiu %d por cento sua aplicação bancária está valendo: $%d",inflac, pStats[i][PInvestimento]);
		  		SendClientMessage(i, COLOR_LIGHT_GREEN, str);
   			} else {
		   	    SendClientMessage(i, COLOR_LIGHT_GREEN, "[BOLSA DE VALORES] Você não possui nenhum investimento bancário, aplique já o seu dinheiro. Vá até o banco.");
				return 1;
			}
		}
		SendClientMessageToAll(COLOR_DARK_GREEN,"________________________________________________________________________________________________________________________");
	}
	return 1;
}

stock MoradorConvidado(playerid,pickup){
  	if(pStats[playerid][ConvidadoCasa] == 1 && compare(pStats[playerid][DonoCasaConvidada],pckStats[pickup][PickupDono])) return true;
	return false;
}
stock IsConvidado(playerid1,playerid2){
	if(playerid2 == -1) return false;
	for(new i = 0; i < QtConvidados[playerid2]; i++){
    	if(Convidado[playerid2][i] == playerid1) return true;
	}
	return false;
}
stock MudarDono(vehicleid,newdono)
{
	set(vStats[vehicleid][VDono],PlayerName(newdono));
	set(vStats[vehicleid][VChave],PlayerName(newdono));
	SaveVehicle(vehicleid);
}
stock GetVehicles(playerid, vid)
{
	new cid = 0;
	for(new v = AmountServerVehicles; v < AmountServerVehicles + AmountPlayerVehicles; v++)
	{
	    if(compare(vStats[v][VDono], PlayerName(playerid)))
	    {
			cid++;
			if(cid == vid) return v;
	    }
	}
	return -1;
}

stock GetPHouseKeyID(playerid,pickupcasa)
{
    new c = 1;
	while(c < GetQtHouses(playerid) + 1){
		if(GetHouses(playerid, c) == pickupcasa) return c;
		c++;
	}
	return false;
}
stock GetHouses(playerid, id)
{
	new  n = 0;
	for(new p = 0; p < LastCasa; p++)
	{
	    if(compare(pckStats[p][PickupDono], PlayerName(playerid)))
		{
			n++;
			if(n == id) return p;
	    }
	}
	return -1;
}
stock GetQtHouses(playerid)
{
	new n = 0;
	for(new p = 0; p < LastCasa; p++)
	{
	    if(compare(pckStats[p][PickupDono], PlayerName(playerid)))
		{
			n++;
		}
	}
	return n;
}
stock GetHouseInt(pickupid)
{
	for(new i = 0; i < sizeof Interiores; i++)
	{
	    if(Interiores[i][hPrice] == pckStats[pickupid][PickupValor])
	    {
			return i;
	    }
	}
	return -1;
}

stock GetPlayerVehicleKeyID(playerid,vehicleid)
{
    new v = 1;
	while(v < GetQtVehicles(playerid) + 1){
		if(GetVehicles(playerid, v) == vehicleid) return v;
		v++;
	}
	return INVALID_VEHICLE_ID;
}
public ConsertandoCarro(playerid,vehicleid){
	if(IsPlayerConnected(playerid))
	{
	    KillTimer(TimerConserto[playerid]);
	    JaDestruido[vehicleid] = 0;
		SetVehicleToRespawn(vehicleid);
		SendClientMessage(playerid, COLOR_MECANICO, "[OFICINA] Seu carro foi entregue no local que você selecionou. Sua casa ou num estacionamento!");
  		new Float:X,Float:Y,Float:Z,Float:ang;
		X = vStats[vehicleid][CarPosX];
		Y = vStats[vehicleid][CarPosY];
		Z = vStats[vehicleid][CarPosZ];
		ang  = vStats[vehicleid][CarPosAng];
		SetVehiclePos(vehicleid,X,Y,Z);
		SetVehicleZAngle(vehicleid,ang);
	}
}
public DarSpawn(veiculoid){
	SetVehicleToRespawn(veiculoid);
}
stock AnunciarProcurados(){
	new string[128], qtprocurados = 0;
	SendClientMessageToAll(COLOR_WHITE, "|==================================| New Paper's Life - Procurados |==================================|");
	for(new i = 0; i < MAX_SLOTS; i++){
		if(GetPlayerWantedLevel(i) > 0){
			qtprocurados++;
			format(string,sizeof(string),"Nome: %s - Nível de procurado: %d - Motivo: %s - Recompensa (policiais): $%d,00 dólares",PlayerName(i),GetPlayerWantedLevel(i), Motivos[pStats[i][LastBustedReason]][mName], GetPlayerWantedLevel(i) * 100);
			SendClientMessageToAll(COLOR_COP_SWAT, string);
		}
	}
	if(qtprocurados == 0){
		SendClientMessageToAll(COLOR_GRAY, "Nenhum jogador procurado pela polícia.");
	}
	else{
		format(string,sizeof(string),"Total de procurados: %d",qtprocurados);
		SendClientMessageToAll(COLOR_LIGHT_RED, string);
		SendClientMessageToAll(COLOR_WHITE, "Se você encontrar algum desses criminosos, denuncie, digite /190");
	}
	return 1;
}

stock AnunciarCabecas(){
	new string[128], qtcabecas = 0;
	SendClientMessageToAll(COLOR_WHITE, "|==================================| New Paper's Life - Cabeças a Prêmio |==================================|");
	for(new i = 0; i < MAX_SLOTS; i++){
		if(pStats[i][ValorCabeca] > 0){
			qtcabecas++;
			format(string,sizeof(string),"	Nome: %s - Valor Cabeça $%d",PlayerName(i),pStats[i][ValorCabeca]);
			SendClientMessageToAll(COLOR_COP_SWAT, string);
		}
	}
	if(qtcabecas == 0){
		SendClientMessageToAll(COLOR_GRAY, "Ninguém com cabeça a prêmio.");
	}
	else{
		format(string,sizeof(string),"Total de cabeças procuradas: %d",qtcabecas);
		SendClientMessageToAll(COLOR_LIGHT_RED, string);
		SendClientMessageToAll(COLOR_WHITE, "Se você está nesta lista, contrate um segurança ou chame a polícia se estiver em perigo.");
	}
	return 1;
}

stock IsPlayerInVehicleAir(playerid){
	if(!IsPlayerInAnyVehicle(playerid)) return false;
	new model = GetVehicleModel(GetPlayerVehicleID(playerid));
	if(model == 417 || model == 425 || model == 447 || model == 460 || model == 464 || model == 465 || model == 469 || model == 476 || model == 487 || model == 488 || model == 497 || model == 501 || model == 511 || model == 512 || model == 513 || model == 519 || model == 520 || model == 539 || model == 548 || model == 553 || model == 563 || model == 577 || model == 592 || model == 593) return true;
	return false;
}
stock IsPlayerInBoat(playerid){
	if(!IsPlayerInAnyVehicle(playerid)) return false;
	new model = GetVehicleModel(GetPlayerVehicleID(playerid));
	if(model == 430 || model == 446 || model == 452 || model == 453 || model == 454 || model == 472 || model == 473 || model == 484 || model == 493 || model == 595) return true;
	return false;
}
stock IsPlayerInTruck(playerid){
    if(!IsPlayerInAnyVehicle(playerid)) return false;
	new model = GetVehicleModel(GetPlayerVehicleID(playerid));
	if(model == 515 || model == 414) return true;
	return false;
}
stock IsPlayerInBike(playerid){
    if(!IsPlayerInAnyVehicle(playerid)) return false;
	new model = GetVehicleModel(GetPlayerVehicleID(playerid));
	if(model == 481 || model == 509 || model == 510) return true;
	return false;
}
stock GetQtVehicles(playerid){
	new name[30],qtveh;
	GetPlayerName(playerid,name,30);
	for(new v = AmountServerVehicles; v < AmountServerVehicles + AmountPlayerVehicles; v++)
	{
		if(compare(vStats[v][VDono],name))
		{
		    qtveh++;
		}
	}
	return qtveh;
}
public Filmando(playerid){
    if(IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 488 && GetPlayerState(playerid) != PLAYER_STATE_DRIVER && CameraAtiva[playerid] == 1){
		new Float:x,Float:y,Float:z;
		GetPlayerPos(playerid,x,y,z);
		SetPlayerCameraPos(playerid,x,y,z);
		Filmagem[playerid][0]=x;
		Filmagem[playerid][1]=y;
		Filmagem[playerid][2]=z-8.0;
		if(Zoom[playerid] == 0){
			GetXYInFrontOfPlayer(playerid,x,y,15.0);
			Filmagem[playerid][3]=x;
			Filmagem[playerid][4]=y;
			Filmagem[playerid][5]=z-30.0;
			GameTextForPlayer(playerid,"~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~r~Visao nº1",1000,4);
		}
		else if(Zoom[playerid] == 1){
		    GetXYInFrontOfPlayer(playerid,x,y,1.0);
			Filmagem[playerid][3]=x;
			Filmagem[playerid][4]=y;
			Filmagem[playerid][5]=z-1.0;
			GameTextForPlayer(playerid,"~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~r~Visao nº2",1000,4);
		}
		else if(Zoom[playerid] == 2){
			Filmagem[playerid][3]=x;
			Filmagem[playerid][4]=y;
			Filmagem[playerid][5]=z-50.0;
			GameTextForPlayer(playerid,"~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~r~Visao nº3",1000,4);
		}
		else if(Zoom[playerid] == 3){
		    GetXYInFrontOfPlayer(playerid,x,y,3.0);
			Filmagem[playerid][3]=x;
			Filmagem[playerid][4]=y;
			Filmagem[playerid][5]=z-13.0;
			GameTextForPlayer(playerid,"~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~r~Visao nº4",1000,4);
		}
		else if(Zoom[playerid] == 4){
		    GetXYInFrontOfPlayer(playerid,x,y,7.0);
			Filmagem[playerid][3]=x;
			Filmagem[playerid][4]=y;
			Filmagem[playerid][5]=z;
			GameTextForPlayer(playerid,"~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~r~Visao nº5",1000,4);
		}
		else if(Zoom[playerid] == 5){
		    GetXYInBackOfPlayer(playerid,x,y,7.0);
			Filmagem[playerid][3]=x;
			Filmagem[playerid][4]=y;
			Filmagem[playerid][5]=z;
			GameTextForPlayer(playerid,"~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~r~Visao nº6",1000,4);
		}
		else if(Zoom[playerid] == 6){
		    GetXYInRightOfPlayer(playerid,x,y,7.0);
			Filmagem[playerid][3]=x;
			Filmagem[playerid][4]=y;
			Filmagem[playerid][5]=z;
			GameTextForPlayer(playerid,"~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~r~Visao nº7",1000,4);
		}
		else if(Zoom[playerid] == 7){
		    GetXYInLeftOfPlayer(playerid,x,y,7.0);
			Filmagem[playerid][3]=x;
			Filmagem[playerid][4]=y;
			Filmagem[playerid][5]=z;
			GameTextForPlayer(playerid,"~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~r~Visao nº8",1000,4);
		}
		else
		{
		    if(Zoom[playerid] > 0)
		    {
		        Zoom[playerid] = 0;
		    }
		    else
		    {
		        Zoom[playerid] = 7;
		    }
		}
		SetPlayerCameraPos(playerid,Filmagem[playerid][0],Filmagem[playerid][1],Filmagem[playerid][2]);
		SetPlayerCameraLookAt(playerid,Filmagem[playerid][3],Filmagem[playerid][4],Filmagem[playerid][5]);
	}
	else{
	    CameraAtiva[playerid] = 0;
	    SetCameraBehindPlayer(playerid);
	    KillTimer(TempoFilmando[playerid]);
	    SendClientMessage(playerid, COLOR_JUIZ, "Camera desativada...");
	}
}
public Filmando2(playerid){
    if(IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 488 && GetPlayerState(playerid) != PLAYER_STATE_DRIVER && CameraAtiva[playerid] == 1){
		AcrescentarXpoints(playerid, 1);
		SendClientMessage(playerid, COLOR_JORNALISTA, "Você recebeu 1 Xpoint pela filmagem, continue...");
	}
	else{
		KillTimer(TempoFilmando2[playerid]);
	}
}
public RastreandoJogador2(playerid,plid){
	if(!IsPlayerConnected(plid) || !IsPlayerConnected(playerid)){
	    RastreandoJogador[playerid] = 0;
	    PedidoRastreador[plid] = 0;
		JogadorRastreamento[plid] = -1;
		return 1;
	}
	SetPlayerMarkerForPlayer(i, playerid, COLOR_GREEN);
	return 1;
}
stock DesligarRastreador(playerid){
    RastreandoJogador[playerid] = 0;
	SendClientMessage(playerid, COLOR_LIXEIRO, "Rastreador desativado!");
}
stock RastrearCasa(playerid, casa){
	if(GetQtHouses(playerid) == 0) {
		SendClientMessage(playerid, COLOR_GRAY, "Você não tem casa!");
		return 1;
	}
	SendClientMessage(playerid, COLOR_TAXISTA, " Rastreador para sua casa ligado");
    GPSLigado[playerid] = 0;
   	DisablePlayerCheckpoint(playerid);
   	SetPlayerCheckpoint(playerid,pckStats[casa][pX],pckStats[casa][pY],pckStats[casa][pZ],5.0);
	CheckpointStatus[playerid] = CASA_JOGADOR;
	return 1;
}
stock LocarMinhaCasa(playerid, casa, dias,valor){
   	if(GetQtHouses(playerid) == 0){
	   	SendClientMessage(playerid, COLOR_GRAY, "Você não possui nenhuma casa!");
	    return 1;
	}
	if(pckStats[casa][AlugandoCasa] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Sua casa já tem aluguel!");
	    return 1;
	}
	else{
	    DiasSelecionados[playerid] = 0;
	    SendClientMessage(playerid, COLOR_GREEN, "Sua casa agora poderá ser alugada!");
		new str[128];
	    new zone[28];
		GetZone(casa, zone, 28);
		format(str,sizeof(str),"[CORRETORA] %s colocou sua casa de (ID:%d) situada em %s para aluguel por %d dias pelo valor de $%d",PlayerName(playerid), GetPHouseKeyID(playerid,casa), zone, dias,valor);
		SendClientMessageToAll(COLOR_CORRETOR, str);
		SendClientMessageToAll(COLOR_WHITE, "[CORRETORA] Para alugar a casa dele digite: /alugarquarto [id] [IDCasa]");
		SendClientMessageToAll(COLOR_WHITE, " ");
	    pckStats[casa][AlugandoCasa] = 1;
	    pckStats[casa][DiasCasaAluguel] = dias;
	    pckStats[casa][ValorCasaAluguel] = valor;
		return 1;
	}
}
stock CancelarAluguelCasa(playerid, casa){
    if(GetQtHouses(playerid) == 0){
    	SendClientMessage(playerid, COLOR_GRAY, "Você não possui nenhuma casa!");
	    return 1;
	}
	if(pckStats[casa][AlugandoCasa] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não colocou nenhuma casa em aluguel!");
	    return 1;
	}
	else{
	    new string[128];
	    new zone[28];
		GetZone(casa, zone, 28);
	    format(string,sizeof(string),"[CORRETORA] A casa de %s, de (ID:%d) situada em %s foi retirada do alguel.",PlayerName(playerid), GetPHouseKeyID(playerid,casa), zone);
	    SendClientMessageToAll(COLOR_CORRETOR, string);
	    pckStats[casa][AlugandoCasa] = 0;
   	    pckStats[casa][ValorCasaAluguel] = 0;
	    pckStats[casa][DiasCasaAluguel] = 0;
 		return 1;
	}
}
stock VenderMinhaCasa(playerid, casa){
    if(GetQtHouses(playerid) == 0){
    	SendClientMessage(playerid, COLOR_GRAY, "Você não possui nenhuma casa!");
	    return 1;
	}
	if(pckStats[casa][Vendendo] == 1){
	   	SendClientMessage(playerid, COLOR_GRAY, "Você já colocou sua casa à venda!");
	    return 1;
	}
	else{
	    new Float:x = pckStats[casa][pX],
	        Float:y = pckStats[casa][pY],
	        Float:z = pckStats[casa][pZ];
        DestroyPickup(sizeof Pickups + casa);
		CreatePickup(1273,1,x,y,z);
	    SendClientMessage(playerid, COLOR_GREEN, " ");
   	    SendClientMessage(playerid, COLOR_GREEN, " ");
	    SendClientMessage(playerid, COLOR_GREEN, "[CORRETORA] Casa colocada à venda.");
		new str[128];
		new zone[28];
		GetZone(casa, zone, 28);
		format(str,sizeof(str),"[CORRETORA] A casa de %s, de (ID:%d) situada em %s foi colocada à venda no Valor: $%d,00 dólares.",PlayerName(playerid), GetPHouseKeyID(playerid,casa), zone, pckStats[casa][PickupValor]);
        SendClientMessageToAll(COLOR_CORRETOR, str);
        SendClientMessageToAll(COLOR_CORRETOR, "[CORRETORA] Interessado? Visite o imóvel, caso goste, /comprarcasa.");
		SendClientMessage(playerid, COLOR_LIGHT_RED, "ATENÇÃO! Tome cuidado, se você não tiver seguro não será recompensado 100 por cento!");
		pckStats[casa][Vendendo] = 1;
 		return 1;
	}
}
stock CancelarVendaCasa(playerid, casa){
    if(GetQtHouses(playerid) == 0){
		SendClientMessage(playerid, COLOR_GRAY, "Você não possui nenhuma casa!");
	    return 1;
	}
	if(pckStats[casa][Vendendo] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não colocou nenhuma casa à venda!");
	    return 1;
	}
	else{
	    new Float:x = pckStats[casa][pX],
	        Float:y = pckStats[casa][pY],
	        Float:z = pckStats[casa][pZ];
		CreatePickup(1272,1,x,y,z);
		new str[128];
		new zone[28];
		GetZone(casa, zone, 28);
		format(str,sizeof(str),"[CORRETORA] A casa de %s, de (ID:%d) situada em %s foi retirada, e não está mais a venda.",PlayerName(playerid), GetPHouseKeyID(playerid,casa), zone);
        SendClientMessageToAll(COLOR_CORRETOR, str);
		pckStats[casa][Vendendo] = 0;
		return 1;
	}
}

stock valhex(number, base)
{
	new c_number = number;
	new string[128];
	for(new i = 0; i < base; i++)
	{
		switch(c_number % 16)
		{
		    case 0: strcat(string, "0");
		    case 1: strcat(string, "1");
		    case 2: strcat(string, "2");
		    case 3: strcat(string, "3");
		    case 4: strcat(string, "4");
		    case 5: strcat(string, "5");
		    case 6: strcat(string, "6");
		    case 7: strcat(string, "7");
		    case 8: strcat(string, "8");
		    case 9: strcat(string, "9");
		    case 10: strcat(string, "A");
		    case 11: strcat(string, "B");
		    case 12: strcat(string, "C");
		    case 13: strcat(string, "D");
		    case 14: strcat(string, "E");
		    case 15: strcat(string, "F");
		}
		c_number /= 16;
	}
	new c_string[128];
	for(new i = strlen(string); i > 0; i--)
	{
	    c_string[strlen(string) - i] = string[i];
	}
	return c_string;
}
stock strhex(const string[])
{
	new res;
	for(new x = strlen(string); x > 0; x--)
	{
	    new val;
	    switch(string[x - 1])
	    {
	        case '0': val=0;
	        case '1': val=1;
	        case '2': val=2;
	        case '3': val=3;
	        case '4': val=4;
	        case '5': val=5;
	        case '6': val=6;
	        case '7': val=7;
	        case '8': val=8;
	        case '9': val=9;
	        case 'A': val=10;
	        case 'B': val=11;
	        case 'C': val=12;
	        case 'D': val=13;
	        case 'E': val=14;
	        case 'F': val=15;
	    }
	    res += val * pow(16, strlen(string) - x);
	}
	return res;
}
stock pow(x,y)
{
	if(y==0)return 1;
	new res=x;
	for(new z=1;z<y;z++)
	{
	    res*=x;
	}
	return res;
}

stock CamuflarJogador(playerid,mins,value){
	if(IsPlayerTransparent(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você já está camuflado!");
	new string[128];
	format(string,sizeof(string),"Você foi camuflado por %d minuto(s) e pagou $%d,00 dólares.",mins,value);
	SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS, string);
	AddPlayerMoney(playerid,-value,-1);
	AcrescentarLucro(5,value);
	SetPlayerTransparent(playerid, 2);
	pStats[playerid][Camuflagem] = mins;
	TimerCamuflagem[playerid] = SetTimerEx("PassandoCamuflagem", 60000, 0, "d", playerid);
	return 1;
}
stock SendWeaponForPlayer(playerid,weaponid)
{
    if(TraficandoArmas[playerid] == 1)
    {
        if(ArmasTrafico[playerid][WeaponSlot(weaponid) - 2] == weaponid) return SendClientMessage(playerid, COLOR_GRAY, "Você já tem essa arma.");
        if(GetPlayerServerMoney(playerid) < RPGWeapons[weaponid][Info_ArmaValor] - 400) return GameTextForPlayer(playerid,"~r~sem dinheiro!",3000,3);
		ArmasTrafico[playerid][WeaponSlot(weaponid) - 2] = weaponid;
		AddPlayerMoney(playerid, - (RPGWeapons[weaponid][Info_ArmaValor] - 400), -1);
  		SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS, "Compra efetuada, use /dararma para o dar para algum integrante de sua gangue.");
        new str[128];
		format(str, sizeof str, "Você pagou apenas $%d,00 dólares", RPGWeapons[weaponid][Info_ArmaValor] - 400);
		SendClientMessage(playerid, COLOR_LIGHT_YELLOW, str);
		return 1;
  	}
	else
	{
		if(GetPlayerServerMoney(playerid) < RPGWeapons[weaponid][Info_ArmaValor] + 400) return GameTextForPlayer(playerid,"~r~sem dinheiro!",3000,3);
		new string[128];
		GiveWeapon(playerid,weaponid,RPGWeapons[weaponid][Info_Municao]);
		AddPlayerMoney(playerid, - (RPGWeapons[weaponid][Info_ArmaValor] + 400), -1);
		format(string,sizeof(string),"Arma \"%s\" adquirida",RPGWeapons[weaponid][Info_ArmaNome]);
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS, string);
		return 1;
	}
}
stock PassarDados(antname[],tmp[]){
	if(fexist(antname))
	{
	    fcopy(PlayerFile(antname),PlayerFile(tmp));
	}
	new str[128];
	for(new p = 0; p < MAX_CASAS; p++){
		set(str,PickupFile(p));
		if(fexist(str)){
	    	if(compare(pckStats[p][PickupDono],antname)){
	    	    set(pckStats[p][PickupDono],tmp);
			}
		}
	}
	for(new v = 0; v < AmountServerVehicles + AmountPlayerVehicles; v++){
	    set(str,VehicleFile(v));
		if(fexist(str)){
		   	if(compare(vStats[v][VDono],antname)){
				set(vStats[v][VDono],tmp);
			}
			if(compare(vStats[v][VChave],antname)){
				set(vStats[v][VChave],tmp);
			}
		}
	}
	for(new pr = 1; pr < sizeof Propriedades; pr++){
		set(str,PropertyFile(pr));
		if(fexist(str)){
	   		if(compare(propStats[pr][Dono1],antname)){
	    	    set(propStats[pr][Dono1],tmp);
			}
			if(compare(propStats[pr][Socio1],antname)){
			    set(propStats[pr][Socio1],tmp);
			}
			if(compare(propStats[pr][Socio2],antname)){
			    set(propStats[pr][Socio2],tmp);
			}
			if(compare(propStats[pr][Socio3],antname)){
			    set(propStats[pr][Socio3],tmp);
			}
		}
	}
	new gangfile[128],gangname[128];
	set(gangname,GetValue(tmp,"GangueNome"));
	set(gangfile,GangFile(gangname));
	if(fexist(gangfile)){
		if(compare(gStats[GetGangID(gangname)][GangDono],antname)){
			set(gStats[GetGangID(gangname)][GangDono],tmp);
		}
		for(new m = 0; m < gStats[GetGangID(gangname)][GangMembros]; m++){
			if(compare(MembersGang[GetGangID(gangname)][m],antname)){
			    set(MembersGang[GetGangID(gangname)][m],tmp);
			}
		}
	}
}

stock GetVehicleModelName(model)
{
	new vehname[128];
	vehname[0]=0;
	if(model > 399 && model < 612)
	{
	    for(new v = 0; v < sizeof(VehiclesData); v++)
		{
		    if(model == VehiclesData[v][vModelid])
		    {
				set(vehname, VehiclesData[v][vName]);
				break;
			}
		}
	}
	return vehname;
}

stock GetVehiclePrice(model)
{
	if(model > 399 && model  < 612)
	{
		for(new v = 0; v < sizeof(VehiclesData); v++)
		{
		    if(VehiclesData[v][vModelid] == model) return VehiclesData[v][vPrice];
		}
	}
	return 0;
}

stock EnviarAnuncio(playerid)
{
      ParteAnuncio[playerid] = 0;
      TempoAnuncio[playerid] = SetTimerEx("EnviandoAnuncio",300,0,"d",playerid);
}

stock IsVehicleOnSale(vehicleid)
{
	for(new v = 0; v < sizeof VehiclesData; v++)
	{
	    if(vehicleid == CarroVenda[v]) return true;
	}
	return false;
}

stock ResetCTMVehicles()
{
	new randmodel;
	for(new v = 0; v < sizeof CarroVenda; v++)
	{
	    DestroyVehicle(CarroVenda[v]);
	    randmodel = random(sizeof CarrosVendaModelos);
	    CarroVenda[v] = CreateVehicle(CarrosVendaModelos[randmodel],CarrosVendaPos[v][0],CarrosVendaPos[v][1],CarrosVendaPos[v][2],CarrosVendaPos[v][3],-1,-1,1500);
	}
}

public EnviandoAnuncio(playerid)
{
	KillTimer(TempoAnuncio[playerid]);
	if(!IsPlayerInAnyVehicle(playerid) && GetPlayerInterior(playerid) == 0){
		new tmp[128] = "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~";
		strcat(tmp,AnuncioMsg[ParteAnuncio[playerid]]);
	  	GameTextForPlayer(playerid,tmp,1000,3);
	   	ParteAnuncio[playerid]++;
	   	KillTimer(TempoAnuncio[playerid]);
	    if(ParteAnuncio[playerid] < sizeof(AnuncioMsg))
	    {
	    	TempoAnuncio[playerid] = SetTimerEx("EnviandoAnuncio",300,0,"d",playerid);
	    }
	    else
	    {
	  		ParteAnuncio[playerid] = 0;
	    }
	}
}

stock SendTextDrawArea(playerid, color, string[])
{
	if(!Logado[playerid]) return ;
	TextDrawHideForPlayer(playerid, TextArea[playerid]);
	TextDrawSetString(TextArea[playerid], string);
	TextDrawColor(TextArea[playerid], color);
	TextDrawShowForPlayer(playerid, TextArea[playerid]);
}

stock RemoveTextDrawArea(playerid)
{
	TextDrawSetString(TextArea[playerid], " ");
	TextDrawHideForPlayer(playerid, TextArea[playerid]);
	TextDrawColor(TextArea[playerid], 0xFFFFFF00);
}

stock SendTextDrawHouse(playerid, string[])
{
	TextDrawHideForPlayer(playerid, TextHouse[playerid]);
	TextDrawSetString(TextHouse[playerid], string);
	TextDrawShowForPlayer(playerid, TextHouse[playerid]);
}

stock RemoveTextDrawHouse(playerid)
{
	TextDrawSetString(TextHouse[playerid], " ");
	TextDrawHideForPlayer(playerid, TextHouse[playerid]);
}

public Areas(){
	for(new i=0;i<MAX_SLOTS;i++){
	    if(IsPlayerConnected(i) && Logado[i] == 1) {
	        new Float:X,Float:Y,Float:Z;
	    	GetPlayerPos(i, X, Y, Z);
			if(X >= -295.3604 && X <= -265.3752 && Y >= -2187.1279 && Y <= -2146.8669){
				if(PlayerArea[i] != AreaCopPL){
				    SendTextDrawArea(i, COLOR_BLUE, "Base Policial");
				    PlayerArea[i] = AreaCopPL;
				}
			}
	        else if(X >= 406.3685 && X <= 798.7696 && Y >= -2476.3638 && Y <= -2082.9778){
			    if(PlayerArea[i] != AreaPesca){
			        SendTextDrawArea(i, COLOR_PESCADOR, "Area de ~n~Pesca");
	            	PlayerArea[i] = AreaPesca;
					if(PescaInProgress[i] == 1){
		    			SendClientMessage(i,COLOR_PESCADOR,"Pescaria retomada... Continue...");
		       			KillTimer(RetomarTrabalho[i]);
					 }
				}
	        }
	        else if((X >= 1005.8145 && X <= 1039.4332 && Y >= -1130.0962 && Y <= -1115.3085)){
			    if(PlayerArea[i] != AreaEntretenimentos){
			        SendTextDrawArea(i, COLOR_COP_SWAT, "Area de ~n~entretenimentos");
					SendClientMessage(i,COLOR_COP_SWAT, "Bem vindo à área de entretenimentos, veja os entretenimentos disponíveis em /lazeres");
					PlayerArea[i] = AreaEntretenimentos;
				}
			}
	        else if((X >= 1359.8223 && X <= 1378.9132 && Y >= -1663.1356 && Y <= -1632.3219) || (X >= 1509.8142 && X <= 1527.9072 && Y >= -1481.3231 && Y <= -1456.8036) || (X >= 2322.7334 && X <= 2351.6719 && Y >= -1275.1112 && Y <= -1226.6000)){
	            if(PlayerArea[i] != AreaEsconderijo){
					if(pStats[i][Prof] == ASSALTANTE){
					 	SendTextDrawArea(i, COLOR_ASSALTANTE, "Esconderijo");
						SendClientMessage(i, COLOR_ASSALTANTE, "Você encontrou um esconderijo, esconda um carro aqui com /escondercarro");
					}
	         		PlayerArea[i] = AreaEsconderijo;
				}
	        }
			else if(X >= 2133.3506 && X <= 2202.0874 && Y >= -1997.1613 && Y <= -1961.8463){
			    if(PlayerArea[i] != AreaLixao){
			        SendTextDrawArea(i, COLOR_LIXEIRO, "Lixao");
			        PlayerArea[i] = AreaLixao;
				}
			}
			else if(X >= 1997.4874 && X <= 2038.1327 && Y >= -1450.3445&& Y <= -1401.6718){
				if(PlayerArea[i] != AreaHosp)
				{
				    if(!TemProfissao(PARAMEDICO) || pStats[i][Prof] == PARAMEDICO)
				    {
						SendClientMessage(i, COLOR_LIGHT_RED, "Hospital - Comandos:");
						SendClientMessage(i, COLOR_PARAMEDICO, "/tomarvacina : Tomar vacina contra a Gripe Suína. 7 Dias. Custo: $500");
						SendClientMessage(i, COLOR_PARAMEDICO, "/internar : Internar-se, curar as doenças e recuperar a saúde. Custo $1000.");
						SendTextDrawArea(i, COLOR_PARAMEDICO, "Hospital");
						PlayerArea[i] = AreaHosp;
					}
					else
					{
					    SendClientMessage(i, COLOR_PARAMEDICO, "Há Paramédicos pela cidade, se precisar de atendimento digite /192");
					}
				}
			}
			else if(X >= 1173.6530 && X <= 1184.8798 && Y >= -1353.3738 && Y <= -1305.6914){
				if(PlayerArea[i] != AreaHosp)
				{
					if(!TemProfissao(PARAMEDICO) || pStats[i][Prof] == PARAMEDICO)
				    {
				        if(pStats[i][Prof] != PARAMEDICO)
				        {
							SendClientMessage(i, COLOR_LIGHT_RED, "Hospital - Comandos:");
							SendClientMessage(i, COLOR_PARAMEDICO, "/tomarvacina : Tomar vacina contra a Gripe Suína. 7 Dias. Custo: $500");
							SendClientMessage(i, COLOR_PARAMEDICO, "/internar : Internar-se, curar as doenças e recuperar a saúde. Custo $1000.");
						}
						else
						{
						    SendClientMessage(i, COLOR_PARAMEDICO, "Bem vindo ao seu local de trabalho, para pegar kit médico use /pegarkit");
						}
						SendTextDrawArea(i, COLOR_PARAMEDICO, "Hospital");
						PlayerArea[i] = AreaHosp;
					}
					else
					{
					    SendClientMessage(i, COLOR_PARAMEDICO, "Há Paramédicos pela cidade, se precisar de atendimento digite /192");
					}
				}
			}
			else if(X >= 2521.7185 && X <= 2535.7808 && Y >= -1720.9760 && Y <= -1699.4797){
			    if(PlayerArea[i] != AreaDesmanche){
			        SendTextDrawArea(i, COLOR_ASSALTANTE, "Desmanche");
			        SendClientMessage(i, COLOR_ASSALTANTE, "[DESMANCHE] Você pode vender um veículo seu aqui, digite /venderveiculodesmanche");
					if(IsPlayerInAnyVehicle(i) && compare(PlayerName(i), vStats[GetPlayerVehicleID(i)][VDono]))
					{
					    if(GetVehiclePrice(GetVehicleModel(GetPlayerVehicleID(i))) < 1)
	    				{
	        				SendClientMessage(i, COLOR_GRAY, "[DESMANCHE] Não compramos esse tipo de veículo.");
	    				}
	    				else
	    				{
							new str[128];
							format(str, sizeof str, "[DESMANCHE] Oferecemos $%d,00 dólares pelo seu veículo.", GetVehiclePrice(GetVehicleModel(GetPlayerVehicleID(i))) / 4);
							SendClientMessage(i, COLOR_ASSALTANTE, str);
						}
					}
					PlayerArea[i] = AreaDesmanche;
				}
			}
			else if((X >= 1933.1931 && X <= 1948.6578 && Y >= -1781.3706 && Y <= -1764.5554) || (X >= 997.8423 && X <= 1008.9648 && Y >= -945.6751 && Y <= -931.5980)){
			    if(PlayerArea[i] != AreaPosto){
					SendTextDrawArea(i, COLOR_FRENTISTA, "Posto");
					SendClientMessage(i, COLOR_WHITE, "|================| Bem vindo ao Posto |================|");
					SendClientMessage(i,COLOR_AQUA_GREEN,"Para abastecer seu veículo digite: /abastecer [litros]");
					SendClientMessage(i,COLOR_AQUA_GREEN,"Para adquirir um galão de combustível digite: /galao [1-20]");
	            	PlayerArea[i] = AreaPosto;
				}
			}
			else if(X >= 1729.7156 && X <= 1832.6993 && Y >= -2076.5674 && Y <= -2015.5184){
			    if(PlayerArea[i] != AreaAutoEscola){
					if(CheckpointStatus[i] == NONE){
						if(!TemProfissao(INSTRUTOR)){
	    					SendClientMessage(i, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Olá senhor, gostaria de retirar sua Habilitação? /tirarhabilitacao.");
						}
					}
	            	PlayerArea[i] = AreaAutoEscola;
				}
			}
			else if((X >= 703.5037 && X <= 746.5966 && Y >= -1505.7843 && Y <= -1475.8815)){
			    if(PlayerArea[i] != AreaCoopPesca){
					SendTextDrawArea(i, COLOR_PESCADOR, "Cooperativa ~n~de pesca");
					SendClientMessage(i, COLOR_AQUA_GREEN, "Você pode abastecer barcos aqui, basta digitar /abastecer [litros]");
	            	PlayerArea[i] = AreaCoopPesca;
				}
			}
			else if(X >= 2799.0129 && X <= 2847.6333 && Y >= 893.3084 && Y <= 976.5651){
				if(PlayerArea[i] != AreaCarga){
				    SendTextDrawArea(i, COLOR_CAMINHONEIRO, "Area de ~n~Carga");
                    PlayerArea[i] = AreaCarga;
				}
			}
			else if(X >= 1694.1951 && X <= 1748.9655 && Y >= -2475.6489 && Y <= -2422.5481){
				if(PlayerArea[i] != AreaAero){
				    SendTextDrawArea(i, COLOR_WHITE, "Aeroporto");
				    SendClientMessage(i, COLOR_AQUA_GREEN, "Para abastecer um veículo aéreo digite /abastecer [litros]");
				    PlayerArea[i] = AreaAero;
				}
			}
			else if(X >= -1194.7273 && X <= -1007.1719 && Y >= -1064.6096 && Y <= -915.6717){
			    if(PlayerArea[i] != AreaFazenda){
			        SendTextDrawArea(i, COLOR_AGRICULTOR, "Area de plantio");
				    PlayerArea[i] = AreaFazenda;
					if(FazendaInProgress[i] == 1){
		    			SendClientMessage(i,COLOR_AGRICULTOR,"Colheita retomada... Continue...");
		       			KillTimer(RetomarTrabalho[i]);
				    }
				}
			}
			else if(X >= -1098.3835 && X <= -1080.9955 && Y >= -1280.2528 && Y <= -1268.6240){
			    if(PlayerArea[i] != AreaLeite){
			        SendTextDrawArea(i, COLOR_AGRICULTOR, "Curral das vaca");
				    PlayerArea[i] = AreaLeite;
				}
			}
		    else if(X >= 2520.7192 && X <= 2597.7166 && Y >= 1962.3511 && Y <= 2001.7731){
		        if(PlayerArea[i] != AreaForte){
		            SendTextDrawArea(i, COLOR_SEGURANÇA, "Area Forte");
					PlayerArea[i] = AreaForte;
				}
			}
			else if((X >= -2135.8237 && X <= -2018.0640 && Y >= 198.6757 && Y <= 308.0062) || (X >= 2403.4958 && X <= 2491.6235 && Y >= 1871.3947 && Y <= 1954.5074) || (X >= 1228.8705 && X <= 1281.9611 && Y >= -1268.2677 && Y <= -1231.5519)){
				if(PlayerArea[i] != AreaConstrucao){
				    SendTextDrawArea(i, COLOR_PEDREIRA, "Construcao");
			    	PlayerArea[i] = AreaConstrucao;
				}
			}
			else if(X >= 2114.5352 && X <= 2138.9673 && Y >= -1160.7681 && Y <= -1119.3993){
			    if(PlayerArea[i] != AreaCustomizacao){
					if(!TemProfissao(MECANICO)){
			        	SendTextDrawArea(i, COLOR_MECANICO, "Loja de ~n~Customizacao");
			        	SendClientMessage(i, COLOR_AQUA_GREEN, "|============| Bem vindo à Loja de Customização |============|");
			        	SendClientMessage(i, COLOR_WHITE, "Conserto - Consertar o seu veículo. Custo: $100,00 dólares");
			        	SendClientMessage(i, COLOR_WHITE, "Pintura - Pintar o seu veículo. Custo: $50,00 dólares");
			        	SendClientMessage(i, COLOR_WHITE, "Placa - Mudança de placas. Custo: $200,00 dólares");
			        	SendClientMessage(i, COLOR_WHITE, "Alarme - Envia um chamado para a polícia avisando. Custo: $600,00 dólares");
			        	SendClientMessage(i, COLOR_WHITE, "Travas - Tranca seu veículo. Custo: $600,00 dólares");
			        	SendClientMessage(i, COLOR_WHITE, "Fumê - Ninguém ver quem está dentro do carro. Custo: $800,00 dólares");
			        	SendClientMessage(i, COLOR_WHITE, "Rádio - Para que possa ouvir as músicas tocadas nos Carros. Custo: $400,00 dólares");
			        	SendClientMessage(i, COLOR_WHITE, "Airbag - Em caso de colisão você não sofrerá danos - Custo: $250,00 dólares");
			        	SendClientMessage(i, COLOR_WHITE, "/comprar [placa [nome]/conserto/pintura [cor1] [cor2]/alarme/travas/radio/fume/airbag]");
			   			PlayerArea[i] = AreaCustomizacao;
					}
					else{
	                    SendClientMessage(i, COLOR_GRAY, "Loja de Customização Fechada, procure um mecânico para customizar seu carro, digite /servico mecanico");
					}
				}
			}
		    else if(X >= 600.7289 && X <= 697.5099 && Y >= 817.7690 && Y <= 876.9632){
			    if(PlayerArea[i] != AreaPedreiraCarga){
			        SendTextDrawArea(i, COLOR_PEDREIRA, "Pedreira");
			   		PlayerArea[i] = AreaPedreiraCarga;
				}
			}
			else if(X >= 184.5647 && X <= 230.9916 && Y >= -1461.1041 && Y <= -1410.0316){
			    if(PlayerArea[i] != AreaLocadora){
			        SendTextDrawArea(i, COLOR_GREEN, "Locadora de ~n~veiculos");
			   		PlayerArea[i] = AreaLocadora;
				    SendClientMessage(i, COLOR_PALHA, "Bem vindo à locadora de veículos");
				    SendClientMessage(i, COLOR_PALHA, "Aqui temos veículos de ótima qualidade para você alugar.");
				    SendClientMessage(i, COLOR_PALHA, "Caso estiver interessado, entre neles e veja o preço.");
				}
			}
			else if(X >= 1537.9198 && X <= 1611.7349 && Y >= -1721.5104 && Y <= -1602.9403){
			    if(PlayerArea[i] != AreaDelegaciaFora){
			        SendTextDrawArea(i, COLOR_CENTRAL, "Delegacia");
			        PlayerArea[i] = AreaDelegaciaFora;
			        if(pStats[i][Prof] == COP_MILITAR || pStats[i][Prof] == COP_RODOVIARIO || pStats[i][Prof] == COP_SWAT || pStats[i][Prof] == DELEGADO)
			        {
			            SendClientMessage(i, COLOR_CENTRAL, "[CENTRAL] Bem-vindo à Delegacia Sr. Oficial.");
					}
					else if(GetPlayerWantedLevel(i) > 0 && !IsPlayerTransparent(i))
					{
						new str[128];
						format(str, sizeof str, "ATENÇÃO ATENÇÃO: O procurado %s acabou de ser visto na Delegacia, rápido pegue-o.", PlayerName(i));
						SendClientMessagePolicia(COLOR_CENTRAL, str);
					}
			    }
			}
			else if((X >= 1559.7327 && X <= 1576.1588 && Y >= -1898.0133 && Y <= -1881.8749)){
			    if(PlayerArea[i] != AreaSorveteria){
			        PlayerArea[i] = AreaSorveteria;
	 				SendTextDrawArea(i, COLOR_CLEAR_PINK, "Sorveteria");
					SendClientMessage(i,COLOR_LIGHT_RED,"Você entrou em uma sorveteria.");
					SendClientMessage(i,COLOR_WHITE,"Para tomar sorvete digite /tomarsorvete");
					SendClientMessage(i,COLOR_WHITE,"Para comprar sorvete digite /comprarsorvete");
				}
			}
			else if((X >= 920.1707 && X <= 945.2480 && Y >= -1088.6356 && Y <= -1061.0979)){
			    if(PlayerArea[i] != AreaCemiterio){
			        PlayerArea[i] = AreaCemiterio;
					SendTextDrawArea(i, COLOR_TURQUOISE, "IML");
					SendClientMessage(i,COLOR_TURQUOISE,"Você está no IML, para pegar os corpos");
					SendClientMessage(i,COLOR_TURQUOISE,"certifique-se que solicitamos motorista e que há corpos nos hospitais.");
				}
			}
			else if((X >= 2634.3320 && X <= 2702.6799 && Y >= -1972.0763 && Y <= -1943.2855)){
			    if(PlayerArea[i] != AreaEstacao){
			        PlayerArea[i] = AreaEstacao;
			        SendTextDrawArea(i, COLOR_BLUE, "Estacao ~n~eletrica");
					SendClientMessage(i,COLOR_MECANICO,"Você está na Estação de energia de Los Santos");
					SendClientMessage(i,COLOR_MECANICO,"caso tenhamos solicitados motorista para arrumar os postes, apresente-se.");
				}
			}
			else if((X >= 2384.7800 && X <= 2437.3232 && Y >= -2477.3862 && Y <= -2466.0430)){
			    if(PlayerArea[i] != AreaCimento){
			        PlayerArea[i] = AreaCimento;
					SendTextDrawArea(i, COLOR_GRAY, "Cimentaria");
					SendClientMessage(i,COLOR_PEDREIRA,"Aqui é onde carrega os caminhões para as obras de Los Santos");
					SendClientMessage(i,COLOR_PEDREIRA,"caso tenhamos solicitados motorista para levar o cimento, apresente-se.");
				}
			}
		    else if(X >= 2092.0557 && X <= 2105.0586 && Y >= -1821.3566 && Y <= -1790.9103){
			    if(PlayerArea[i] != AreaPizzaria){
			        SendTextDrawArea(i, COLOR_ENTREGADOR_PIZZA, "Pizzaria");
			   		PlayerArea[i] = AreaPizzaria;
				}
			}
	        else if(X >= 2118.7361 && X <= 2134.8621 && Y >= -2284.8635 && Y <= -2268.7520){
				if(PlayerArea[i] != AreaCOEVL) {
				    PlayerArea[i] = AreaCOEVL;
				    SendTextDrawArea(i, COLOR_LIGHT_YELLOW, "COEVL");
					SendClientMessage(i, COLOR_LIGHT_RED, "Companhia Elétrica Virtual Life");
					SendClientMessage(i, COLOR_WHITE, "Comando disponível para liberar sua luz: /pagarluz [casaid]");
				}
	        }
	        else if(X >= 1975.3418 && X <= 2263.2495 && Y >= -1122.5630 && Y <= -950.2056){
				if(PlayerArea[i] != AreaMorro) {
					SendTextDrawArea(i, COLOR_GRAD, "Morro");
					SendClientMessage(i, COLOR_DESEMPREGADO, "Cuidado, essa é uma área perigosa!");
					PlayerArea[i] = AreaMorro;
					if(!TemProfissao(TRAFICANTE)){
						if(CheckpointStatus[i] == NONE){
    						if(GetPlayerServerMoney(i) >= 200){
								SendClientMessage(i, COLOR_TRAFICANTE, "E aí mano! Tá afim de uns treco é? Digite: /drogas e pegue uma.");
								TaAfim[i] = 1;
							}
						}
					}
				}
	        }
			else if(X >= 2488.7861 && X <= 2500.7607 && Y >= -1759.8594 && Y <= -1752.9761){
				if(PlayerArea[i] != AreaChaveiro) {
				    PlayerArea[i] = AreaChaveiro;
					SendTextDrawArea(i, COLOR_GREEN, "Chaveiro");
					SendClientMessage(i, COLOR_LIGHT_RED, "|================| Bem vindo ao Chaveiro |================|");
					SendClientMessage(i, COLOR_WHITE, "/comprarchavemestra : Para adquirir uma chave mestra. Custo: $100");
					SendClientMessage(i, COLOR_WHITE, "As chaves mestras podem ser usadas para abrir veículos ou imóveis.");
				}
	        }
			else if(X >= 547.0875 && X <= 557.2563 && Y >= -1517.3672 && Y <= -1501.9551){
				if(PlayerArea[i] != AreaECTVL) {
				    PlayerArea[i] = AreaECTVL;
					SendTextDrawArea(i, COLOR_LIGHT_RED, "ECTVL");
					SendClientMessage(i, COLOR_LIGHT_RED, "Empresa de Contas Telefônicas Virtual Life");
					SendClientMessage(i, COLOR_WHITE, "Comando disponível para liberar seu telefone: /pagartelefone [casaid]");
				}
	        }
			else if(PlayerArea[i] != AreaNone && (GetPickupServer[i] < 13 || GetPickupServer[i] > 18)) {
   				if(MiniGame[i] == 1 && Equipe[i] == 1){
			       	if(Capturado[i] == 1){
			       	    SetPlayerPos(i,-272.4936,-2146.8669,28.6770);
			           	SetPlayerHealthEx(i, 5.0);
			           	SendClientMessage(i, COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] Tsc Tsc tentando fugir né? Pode tentar mais não vai conseguir!");
					}
					else if(Capturado[i] == 0){
					    for(new p = 0; p < MAX_SLOTS; p++){
							if(GetDistanceBetweenPlayers(p,i) < 5 && Capturado[p] == 1 && MiniGame[i] == 1 && Equipe[i] == 1){
								Capturado[p] = 0;
								new str[128];
								QtCapturados--;
								format(str,sizeof(str),"[POLÍCIA E LADRÃO] %s lhe soltou, rápido fuja!",PlayerName(i));
								SendClientMessage(p, COLOR_LIGHT_YELLOW, str);
								format(str,sizeof(str),"[POLÍCIA E LADRÃO] %s soltou %s da base policial, CADE OS POLICIAIS?",PlayerName(i),PlayerName(p));
								SendClientMessageToAll(COLOR_LIGHT_YELLOW, str);
							}
						}
					}
				}
				if(PlayerArea[i] == AreaMorro){
				    PlayerArea[i] = AreaNone;
				    RemoveTextDrawArea(i);
					TaAfim[i] = 0;
					if(CheckpointStatus[i] == CDROGAS){
						DisablePlayerCheckpoint(i);
					    CheckpointStatus[i] = NONE;
					}
				}
				if(PlayerArea[i] == AreaFazenda){
				    PlayerArea[i] = AreaNone;
				    RemoveTextDrawArea(i);
					if(FazendaInProgress[i] == 1){
		    			SendClientMessage(i, COLOR_PESCADOR, "Você tem 10 segundos para voltar a área da fazenda e terminar a colheita.");
		    			RetomarTrabalho[i] = SetTimerEx("TerminarCarregamento", 10000, 0, "d", i);
		    			VeiculoTrabalho[i] = -1;
				    }
				}
				if(PlayerArea[i] == AreaHosp){
				    PlayerArea[i] = AreaNone;
				    RemoveTextDrawArea(i);
					if(CheckpointStatus[i] == HOSPITAL){
						DisablePlayerCheckpoint(i);
					    CheckpointStatus[i] = NONE;
					}
				}
				if(PlayerArea[i] == AreaPesca) {
				    PlayerArea[i] = AreaNone;
				    RemoveTextDrawArea(i);
					if(PescaInProgress[i] == 1){
		    			SendClientMessage(i,COLOR_PESCADOR,"Você tem 10 segundos para voltar à area de pesca antes que ela seja cancelada.");
		    			RetomarTrabalho[i] = SetTimerEx("TerminarCarregamento",10000, 0, "d", i);
		    			VeiculoTrabalho[i] = -1;
				    }
				}
				if(PlayerArea[i] == AreaAero || PlayerArea[i] == AreaEsconderijo || PlayerArea[i] == AreaECTVL ||
    			PlayerArea[i] == AreaEsconderijo || PlayerArea[i] == AreaECTVL || PlayerArea[i] == AreaEntretenimentos ||
       			PlayerArea[i] == AreaChaveiro || PlayerArea[i] == AreaCOEVL || PlayerArea[i] == AreaLocadora ||
				PlayerArea[i] == AreaDesmanche || PlayerArea[i] == AreaLixao || PlayerArea[i] == AreaSorveteria ||
                PlayerArea[i] == AreaLeite || PlayerArea[i] == AreaPosto || PlayerArea[i] == AreaCustomizacao ||
                PlayerArea[i] == AreaForte || PlayerArea[i] == AreaCoopPesca || PlayerArea[i] == AreaPedreiraCarga ||
                PlayerArea[i] == AreaConstrucao || PlayerArea[i] == AreaCarga || PlayerArea[i] == AreaPizzaria ||
				PlayerArea[i] == AreaDelegaciaFora || PlayerArea[i] == AreaCopPL)
				{
			        PlayerArea[i] = AreaNone;
			        RemoveTextDrawArea(i);
				}
			}
		}
	}
}

public MostrarMensagemArea(playerid){
	if(PlayerArea[playerid] == AreaCreditos){
		SendClientMessage(playerid, COLOR_PALHA, "|=============| Bem-Vindo a Loja de Utilidades 24/7 |=============|");
		SendClientMessage(playerid, COLOR_WHITE, "/celular = Para comprar um celular");
		SendClientMessage(playerid, COLOR_WHITE, "/agenda = Para comprar uma agenda");
		SendClientMessage(playerid, COLOR_WHITE, "/recarga = Para recarregar os créditos do seu celular.");
		SendClientMessage(playerid, COLOR_WHITE, "/eletrodomesticos = Para ver os eletrodomesticos.");
		SendClientMessage(playerid, COLOR_WHITE, "/alimentacao = Para ver as comidas e bebidas.");
		SendClientMessage(playerid, COLOR_WHITE, "/outros = Para ver outros sem especificações.");
	}
	if(PlayerArea[playerid] == AreaBanco){
    	SendClientMessage(playerid, COLOR_PALHA, "$ $ $ $ Banco Life $ $ $ $");
    	SendClientMessage(playerid, COLOR_WHITE, "Para visualizar os comandos digite /meubanco");
	}
	if(PlayerArea[playerid] == AreaDelegacia){
		SendClientMessage(playerid,COLOR_COP_SWAT,"[SECRETARIA] EM QUE POSSO AJUDAR? Visitas a presos, Passaportes, Portes de armas, pagamento de multas.");
		SendClientMessage(playerid,COLOR_COP_SWAT,"[SECRETARIA] <<<< Passaportes/Tribunal || Multas Veículares e Pessoais( /pagardivida ) >>>>");
		SendClientMessage(playerid,COLOR_COP_SWAT,"[SECRETARIA] no corredor à sua frente, Esquerda Teste de Porte de armas, a sua direita, Visita à Presos.");
	}
	if(PlayerArea[playerid] == AreaHotel){
		PlayerArea[playerid] = AreaNone;
		PlayerHotel[playerid] = -1;
	}
	if(PlayerArea[playerid] == AreaLCavalos) {
        SendClientMessage(playerid, COLOR_LIGHT_RED, "Loteria de cavalos - Comandos:");
        SendClientMessage(playerid, COLOR_WHITE, "/apostarcavalo [cavalo] [quantia] : Para apostar em um cavalo!");
	}
	if(PlayerArea[playerid] == AreaBar){
		SendClientMessage(playerid,COLOR_BARMAN,"Você entrou no Bar. No Balcão você pode se servir com drinks e petiscos.");
		SendClientMessage(playerid,COLOR_JUIZ, "Se for dirigir não beba, mas se for beber, ME CHAME... xD");
	}
    if(PlayerArea[playerid] == AreaStrip){
		if(CheckpointStatus[playerid] == NONE){
			SendClientMessage(playerid,COLOR_CLEAR_PINK,"Você entrou na Boate. No Balcão você pode se servir com drinks e petiscos.");
			SetPlayerCheckpoint(playerid, 1215.8606,-13.3520,1000.9219,2.0);
		    CheckpointStatus[playerid] = BALCAO_BAR;
		}
		if(pStats[playerid][Prof] == PROSTITUTA){
			SendClientMessage(playerid,COLOR_PROSTITUTA, "Você pode dançar aqui para seus clientes basta digitar /strip-tease [id].");
			SendClientMessage(playerid,COLOR_PROSTITUTA, "Ou então você poderá digitar /fazerstrip e fazer strip para todos os jogadores.");
		}
	}
	if(PlayerArea[playerid] == AreaBalada){
		SendClientMessage(playerid, COLOR_GREEN, "Você entrou na Balada, seja bem vindo!");
		SendClientMessage(playerid, COLOR_GREEN, "Que tal dançar um pouquinho? Caso esteja afim digite /dancar [1-3]");
		SendClientMessage(playerid, COLOR_BARMAN,"Você entrou na Balada. No Balcão você pode se servir com drinks e petiscos.");
	}
}
public OlhandoPelaJanela(playerid, Float:Z)
{
	KillTimer(TimerJanela[playerid]);
	if(!OlhandoJanela[playerid]) return ;
	new Float:ang;
	GetPlayerFacingAngle(playerid, ang);
	if(JanelaSentidoHorario[playerid])
	{
	    ang -= 1.0;
	}
	else
	{
		ang += 1.0;
	}
	if(ang >= 360)
	{
	    if(JanelaSentidoHorario[playerid])
	    {
	        ang = 360.0;
	    }
	    else
	    {
	        ang = 0.0;
	    }
	}
	if(ang <= 0)
	{
	    if(JanelaSentidoHorario[playerid])
	    {
			ang = 360.0;
	    }
	    else
	    {
			ang = 0.0;
	    }
	}
	SetPlayerFacingAngle(playerid, ang);
	new Float:x, Float:y;
	GetXYInFrontOfPlayer(playerid, x, y, 5.0);
	SetPlayerCameraLookAt(playerid, x, y, Z);
	TimerJanela[playerid] = SetTimerEx("OlhandoPelaJanela", 100, 0, "df", playerid, Z);
}
public FimMandato(playerid)
{
	KillTimer(TempoMandato[playerid]);
	if(RaceCheckpointStatus[playerid] == RASTREANDO_CASA){
	    DisablePlayerRaceCheckpoint(playerid);
	    RaceCheckpointStatus[playerid] = RNONE;
	}
	if(NaCasa[playerid] && PickupEntradaCasa[playerid]==Mandato[playerid] && (!EmLigacao[playerid] || extensao[playerid] != EXTENSION_TELEFONE)){
	    DesligarJogadorRadio(playerid);
	    SetPlayerVirtualWorld(playerid,0);
	   	SetPlayerInterior(playerid,0);
	    SetPlayerPos(playerid,EntradaCasa[playerid][0],EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
		NaCasa[playerid] = 0;
		PickupEntradaCasa[playerid] = 0;
	}
	Mandato[playerid] = -1;
	SendClientMessage(playerid, COLOR_COP_SWAT, "Você não tem mais um mandato para arrombar uma casa!");
}
public HealthCheck()
{
	for(new i = 0; i < MAX_SLOTS; i++)
	{
	    if(IsPlayerConnected(i) && Logado[i] == 1 && !ReceivingLife[i])
	    {
	        new Float:pcheck;
			GetPlayerHealth(i, pcheck);
			if(pcheck < pStats[i][Vida])
			{
			    SetPlayerHealthEx(i, pcheck);
			    SendClientMessage(i, COLOR_PARAMEDICO, "Cuidado, sua saúde foi alterada...");
			}
			else if(pcheck > pStats[i][Vida] || pcheck > MAX_HEALTH)
			{
				if(pStats[i][Vida] < 1)
				{
				    SetPlayerHealthEx(i, MAX_HEALTH);
				}
				else
				{
				    if(pcheck - pStats[i][Vida] == 35)
			    	{
						SendClientMessage(i, COLOR_BLUE, "ATENÇÃO: Sprunk não funciona aqui ¬¬'");
			    	}
			    	if(pcheck - pStats[i][Vida] > 1){
					    new str[128];
				    	format(str, sizeof str, "[ANTI HEALTH HACK] %s conseguiu %.1f pontos de vida por motivo desconhecido.", PlayerName(i), pcheck - pStats[i][Vida]);
						SendClientMessageAdmin(COLOR_ADMIN_MESSAGE, str);
						print(str);
						SetPlayerHealth(i, pStats[i][Vida]);
					}
				}
			}
			GetPlayerArmour(i, pcheck);
			if(pcheck < pStats[i][Colete])
			{
			    SetPlayerArmourEx(i, pcheck);
			    SendClientMessage(i, COLOR_VENDEDOR_DE_ARMAS, "Levando tiros? Seu colete acabou de ser alterado...");
			}
			else if(pcheck > pStats[i][Colete] || pcheck > MAX_ARMOUR)
			{
			    new str[128];
			    format(str, sizeof str, "[ANTI ARMOUR HACK] %s conseguiu %.1f pontos de colete por motivo desconhecido.", PlayerName(i), pcheck - pStats[i][Colete]);
				SendClientMessageAdmin(COLOR_ADMIN_MESSAGE, str);
				print(str);
				SetPlayerArmourEx(i, pStats[i][Colete]);
			}
		}
	}
}

stock WeaponSlot(weaponid)// Por Seif
{
	switch (weaponid)
	{
	    case 0,1: return 0;
	    case 2..9: return 1;
	    case 10..15: return 10;
	    case 16..18,39: return 8;
	    case 22..24: return 2;
	    case 25..27: return 3;
	    case 28,29,32: return 4;
	    case 30,31: return 5;
	    case 33,34: return 6;
	    case 35..38: return 7;
	    case 41..43: return 9;
	    case 44..46: return 11;
	    default: return 12;
	}
	return true;
}

public ZerarRecebendoArma(playerid) ReceivingWeapon[playerid] = 0;

stock GiveWeapon(playerid, weapon, ammo)
{
	KillTimer(TimerReceive[playerid][0]);
    ReceivingWeapon[playerid] = 1;
	if(ammo <= 0) return;
	if(GetWeapons[playerid][WeaponSlot(weapon)][0] != weapon)
	{
		GetWeapons[playerid][WeaponSlot(weapon)][1] = ammo;
	}
	else
	{
	    GetWeapons[playerid][WeaponSlot(weapon)][1] += ammo;
	}
	GetWeapons[playerid][WeaponSlot(weapon)][0] = weapon;
	GivePlayerWeapon(playerid, weapon, ammo);
	TimerReceive[playerid][0] = SetTimerEx("ZerarRecebendoArma", 5000, 0, "d", playerid);
}

stock ResetWeapons(playerid)
{
	ResetPlayerWeapons(playerid);
}

stock RemoveWeapons(playerid)
{
	for(new i = 0; i < 13; i++)
	{
		GetWeapons[playerid][i][0] = 0;
		GetWeapons[playerid][i][1] = 0;
	}
	ResetPlayerWeapons(playerid);
}

stock LoadWeapons(playerid)
{
	KillTimer(TimerReceive[playerid][0]);
    ReceivingWeapon[playerid] = 1;
	ResetWeapons(playerid);
	for(new i = 0; i < 13; i++)
	{
	    GivePlayerWeapon(playerid, GetWeapons[playerid][i][0], GetWeapons[playerid][i][1]);
	}
	SaveWeapons(playerid);
	TimerReceive[playerid][0] = SetTimerEx("ZerarRecebendoArma", 10000, 0, "d", playerid);
}

stock SaveWeapons(playerid)
{
	for(new i = 0; i < 13; i++)
	{
		new w = 0, a = 0;
		GetWeaponData(playerid, i, w, a);
		if(a <= 0)
		{
		    GetWeapons[playerid][i][0] = 0;
      		GetWeapons[playerid][i][1] = 0;
		}
		else if(a < 0xFFFF || i < 2)
		{
		    GetWeapons[playerid][i][0] = w;
	        GetWeapons[playerid][i][1] = a;
		}
	}
}

stock GetWeaponData(playerid, slot, &weapon, &ammo)
{
	new w = 0, a = 0;
	GetPlayerWeaponData(playerid, slot, w, a);
	if(a <= 0)
	{
	    w = 0;
	    a = 0;
	}
	if(a >= 0xFFFF)
	{
	    if(slot > 1)
	    {
	        w = GetWeapons[playerid][slot][0];
	        a = GetWeapons[playerid][slot][1];
	    }
	    else
	    {
			a = 1;
	    }
	}
	weapon = w;
	ammo = a;
}

public AntiWeaponHack()
{
	new string[128];
	for(new i = 0; i<MAX_SLOTS; i++){
	    if(IsPlayerConnected(i) && Logado[i] == 1 && !ReceivingWeapon[i]){
			new weapon;
			new ammo;
			GetPlayerWeaponData(i, 7, weapon, ammo);
			if((weapon == 38 || weapon == 36 || weapon == 35 || weapon == 40) && ammo > 0){
				SendClientMessage(i, COLOR_LIGHT_RED, "[VLR] Parabéns :D. Você foi banido por usar Weapon CHEAT. CLAP!");
				format(string, sizeof(string), "[VLR] Temos mais um vencedor! %s (id:%d) foi banido por usar Weapon Cheat.", PlayerName(i), i);
				SendClientMessageToAll(COLOR_WHITE, string);
				new warn[128];
    			format(warn, sizeof warn, "[ANTI WEAPON HACK] O jogador %s recebeu uma arma proibida e por isso foi banido (ID da arma: %d).", PlayerName(i), weapon);
       			SendClientMessageAdmin(COLOR_ADMIN_MESSAGE, warn);
				ResetPlayerWeapons(i);
	            new Hora,Minuto,Segundo,Ano,Mes,Dia;
	            gettime(Hora,Minuto,Segundo);
				getdate(Ano,Mes,Dia);
				format(string,sizeof(string),"[%s/%s/%s - %s:%s:%s] %s banido | Motivo: Weapon Cheat",ApplyZero(Dia),ApplyZero(Mes),ApplyZero(Ano),ApplyZero(Hora),ApplyZero(Minuto),ApplyZero(Segundo),PlayerName(i));
	            writebanlog(string);
				print(string);
				SendClientMessageToAll(COLOR_WHITE, string);
	            Banir(i, "Weapon Cheat");
			}
			new bool:found = false;
	        for(new s = 0; s < 13; s++)
			{
	            new w, a;
				GetWeaponData(i, s, w, a);
				if((GetWeapons[i][s][0] != w || (a > GetWeapons[i][s][1] && s != 1)) && w != 0 && a > 0 && MiniGame[i] == 0)
				{
				    if(a < 0xFFFF)
				    {
						new warn[128];
     					format(warn, sizeof warn, "[ANTI WEAPON HACK] O jogador %s recebeu %d/%d.", PlayerName(i), w, a - GetWeapons[i][s][1]);
     					SendClientMessageAdmin(COLOR_ADMIN_MESSAGE, warn);
						print(warn);
					}
					found = true;
				}
			}
			if(MiniGame[i] == 0)
			{
				if(found)
				{
				    LoadWeapons(i);
				}
				else if(CarregouArmas[i] == 1 && pStats[i][Morrendo] == 0 && pStats[i][Preso] == 0)
				{
				    SaveWeapons(i);
				}
			}
 		}
	}
}

stock SetPlayerWantedLevelColor(playerid)
{
    if(GetPlayerWantedLevel(playerid) == 1)
	{
		ChangePlayerColor(playerid, COLOR_WANTED_LEVEL_1);
	}
	else if(GetPlayerWantedLevel(playerid) == 2)
	{
 		ChangePlayerColor(playerid, COLOR_WANTED_LEVEL_2);
	}
	else if(GetPlayerWantedLevel(playerid) == 3)
	{
 		ChangePlayerColor(playerid, COLOR_WANTED_LEVEL_3);
	}
	else if(GetPlayerWantedLevel(playerid) == 4)
	{
 		ChangePlayerColor(playerid, COLOR_WANTED_LEVEL_4);
	}
	else if(GetPlayerWantedLevel(playerid) == 5)
	{
 		ChangePlayerColor(playerid, COLOR_WANTED_LEVEL_5);
	}
	else if(GetPlayerWantedLevel(playerid) == 6)
	{
 		ChangePlayerColor(playerid, COLOR_WANTED_LEVEL_6);
	}
	else
	{
	    ChangePlayerColor(playerid, COLOR_WHITE);
	}
}
stock RandomVehicleColor()
{
	return VehicleColor(random(MAX_COLORS));
}

stock VehicleColor(colorid)
{
	if(colorid < 0) return VehicleColor(random(MAX_COLORS));
	if(colorid < 127) return colorid;
	if(colorid >= MAX_COLORS) return VehicleColor(random(MAX_COLORS));
	return HiddenColors[colorid - 127];
}

public MoneyCheck()
{
	for(new i = 0; i < MAX_SLOTS; i++)
	{
		if(IsPlayerConnected(i) && !ReceivingMoney[i])
		{
		    new money = GetPlayerMoney(i);
			if(money > PlayerMoney[i] && money > PlayerOldMoney[i])
			{
				if(NaCasa[i] == 1 && money - PlayerMoney[i] > 50){
				    new string[128];
				    format(string, sizeof string, "[ANTI MONEY HACK] Cheat? %s recebeu $%d (Total: $%d) [Motivo: Desconhecido]", PlayerName(i), money - PlayerMoney[i], GetPlayerMoney(i));
	       			SendClientMessageAdmin(COLOR_ADMIN_MESSAGE, string);
					print(string);
				} else {
				    if(NaCasa[i] == 0){
					    new string[128];
					    format(string, sizeof string, "[ANTI MONEY HACK] Cheat? %s recebeu $%d (Total: $%d) [Motivo: Desconhecido]", PlayerName(i), money - PlayerMoney[i], GetPlayerMoney(i));
		       			SendClientMessageAdmin(COLOR_ADMIN_MESSAGE, string);
						print(string);
					}
				}
				if(money - PlayerMoney[i] > 50000){
				    new string[128];
    				PlayerOldMoney[i] = PlayerMoney[i];
    				GivePlayerMoney(i, -money + PlayerMoney[i]);
		            new Hora,Minuto,Segundo,Ano,Mes,Dia;
		            gettime(Hora,Minuto,Segundo);
					getdate(Ano,Mes,Dia);
					format(string,sizeof(string),"[%s/%s/%s - %s:%s:%s] %s banido | Motivo: Money Cheat",ApplyZero(Dia),ApplyZero(Mes),ApplyZero(Ano),ApplyZero(Hora),ApplyZero(Minuto),ApplyZero(Segundo),PlayerName(i));
		            writebanlog(string);
					print(string);
					SendClientMessageToAll(COLOR_WHITE, string);
		            Banir(i, "Money Cheat");
				}
			}
			if(PlayerMoney[i] > PlayerOldMoney[i] && MotivoGranaID[i] > -1 && MotivoGranaID[i] != 12)
			{
			    new string[128];
   				format(string, sizeof string, "[ANTI MONEY HACK] %s recebeu $%d (Total: $%d) [Motivo: %s]", PlayerName(i), PlayerMoney[i] - PlayerOldMoney[i], GetPlayerMoney(i), MotivosGrana[MotivoGranaID[i]]);
				SendClientMessageAdmin(COLOR_ADMIN_MESSAGE, string);
				print(string);
			}
			if(MotivoGranaID[i] == -1)
			{
				MotivoGranaID[i] = 0;
			}
    		PlayerOldMoney[i] = PlayerMoney[i];
    		GivePlayerMoney(i, -money + PlayerMoney[i]);
		}
	}
}

public GangCombat(zoneid, gangattackid, gangdefenseid, attackcount, defensecount)
{
	if(!IsZoneAttacked(zoneid)) return ;
	new gangattack[100], gangdefense[100];
	set(gangdefense, GangControlZone[zoneid]);
	set(gangattack, ZoneAttacked[zoneid]);
	new amount[3];
	for(new m = 0; m < gStats[gangattackid][GangMembros]; m++)
	{
	    if(!compare(MembersGang[gangattackid][m], "NONE") && IsStringAName(MembersGang[gangattackid][m]))
		{
		    if(GetPlayerZone(IDName(MembersGang[gangattackid][m])) == zoneid && pStats[IDName(MembersGang[gangattackid][m])][Morrendo] == 0)
		    {
		        amount[0]++;
		    }
		}
	}
	if(IsStringAName(gStats[gangattackid][GangDono]))
	{
	    new id = IDName(gStats[gangattackid][GangDono]);
	    if(id != INVALID_PLAYER_ID)
	    {
	    	if(GetPlayerZone(id) == zoneid && pStats[id][Morrendo] == 0)
	    	{
	    	    amount[0]++;
	    	}
		}
	}
	for(new m = 0; m < gStats[gangdefenseid][GangMembros]; m++)
	{
	    if(!compare(MembersGang[gangdefenseid][m], "NONE") && IsStringAName(MembersGang[gangdefenseid][m]))
		{
		    if(GetPlayerZone(IDName(MembersGang[gangdefenseid][m])) == zoneid && pStats[IDName(MembersGang[gangdefenseid][m])][Morrendo] == 0)
		    {
		        amount[1]++;
		    }
		}
	}
	if(IsStringAName(gStats[gangdefenseid][GangDono]))
	{
	    new id = IDName(gStats[gangattackid][GangDono]);
	    if(id != INVALID_PLAYER_ID)
	    {
	    	if(GetPlayerZone(id) == zoneid && pStats[id][Morrendo] == 0)
	    	{
	    	    amount[1]++;
	    	}
		}
	}
	for(new i = 0; i < MAX_SLOTS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	    	if(pStats[i][Prof] == COP_MILITAR || pStats[i][Prof] == COP_RODOVIARIO || pStats[i][Prof] == COP_SWAT || pStats[i][Prof] == DELEGADO)
			{
			    if(GetPlayerZone(i) == zoneid && pStats[i][Morrendo] == 0)
			    {
			    	amount[2]++;
				}
			}
		}
	}
	if(gangattackid == -1 || gangdefenseid == -1)
	{
	    printf("ERRO: Batalha de gangues na zona %s com gangue de ID -1... A guerra foi cancelada devido a isso", zones[zoneid][zonename]);
		ZoneAttacked[zoneid][0] = EOS;
		GangZoneStopFlashForAll(GZ[zoneid]);
		CreateGangZonesForAll();
		return ;
	}
	else if(amount[0] == 0 && amount[1] == 0 && amount[2] > 0)
	{
	    new str[128];
	    format(str, sizeof str, "FIM DA GUERRA! A polícia já colocou todos da gangue pra fora, agora a área %s ficou sem gangue...", zones[zoneid][zonename]);
		SendClientMessageGang(gangattack, COLOR_LIGHT_RED, str);
	    SendClientMessageGang(gangdefense, COLOR_LIGHT_RED, str);
	    format(str, sizeof str, "[NOTICIAS] É a polícia trabalhando bem, conseguiu expulsar as gangues do território %s durante uma batalha...", zones[zoneid][zonename]);
		SendClientMessageToAll(COLOR_WHITE, str);
		SendClientMessageToAll(COLOR_WHITE, "[NOTICIAS] Agora esse território não possui mais perigo (por enquanto)");
		set(GangControlZone[zoneid], "NONE");
		ZoneAttacked[zoneid][0] = EOS;
		CreateGangZonesForAll();
		return ;
	}
	else if(defensecount <= 0)
	{
	    SendClientMessageGang(gangdefense, COLOR_LIGHT_RED, "Vocês perderam a batalha pois não sobrou ninguém para defender o território...");
		SendClientMessageGang(gangattack, COLOR_WHITE, "Muito bem, vocês acabaram com a defesa da outra gangue e conseguiram o território...");
		GangAttackVictory(zoneid);
		return ;
	}
	else if(attackcount <= 0)
	{
	    SendClientMessageGang(gangdefense, COLOR_WHITE, "Vocês conseguiram destruir o ataque da outra gangue e conseguiram defender o território!");
		SendClientMessageGang(gangattack, COLOR_LIGHT_RED, "A outra gangue conseguiu defender o território devido ao ataque ser destruído.");
		GangDefenseVictory(zoneid);
		return ;
	}
	else
	{
	    if(amount[0] == 0)
		{
			new rand = random(5);
			if(rand == 0)
			{
			    new str[128];
			    format(str, sizeof str, "RÁPIDO, Vá para o território %s antes que o ataque de sua gangue seja falhado...", zones[zoneid][zonename]);
				SendClientMessageGang(gangattack, COLOR_LIGHT_RED, str);
			}
		}
		if(amount[1] == 0 && amount[0] > 0)
		{
			new rand = random(5);
			if(rand == 0)
			{
			    new str[128];
			    format(str, sizeof str, "RÁPIDO, Vá defender seu território %s antes que os atacantes o dominem...", zones[zoneid][zonename]);
				SendClientMessageGang(gangdefense, COLOR_LIGHT_RED, str);
			}
		}
		new defct = defensecount;
		if(amount[1] == 0 && amount[0] > 0)
		{
		    defct--;
		}
		new atkct = attackcount;
		if(amount[0] == 0)
		{
		    atkct--;
		}
		SetTimerEx("GangCombat", 3000, false, "ddddd", zoneid, gangattackid, gangdefenseid, atkct, defct);
	}
}
public DestruirCone(objectid)
{
	DestroyObject(objectid);
}
stock GangAttackVictory(zoneid)
{
	new str[128];
	format(str, sizeof str, "Muito bem! Vocês conseguiram o território %s no ataque à gangue %s, sua gangue acaba de upar de Nível.", zones[zoneid][zonename], GangControlZone[zoneid]);
	SendClientMessageGang(ZoneAttacked[zoneid], COLOR_WHITE, str);
	format(str, sizeof str, "Deprimente... Vocês perderam o território %s no ataque da gangue %s...", zones[zoneid][zonename], ZoneAttacked[zoneid]);
    SendClientMessageGang(GangControlZone[zoneid], COLOR_LIGHT_RED, str);
	set(GangControlZone[zoneid], ZoneAttacked[zoneid]);
	AddGangLevel(ZoneAttacked[zoneid], 3);
	ZoneAttacked[zoneid][0] = EOS;
	CreateGangZonesForAll();
}
stock GangDefenseVictory(zoneid)
{
    new str[128];
	format(str, sizeof str, "ATAQUE FALHADO! A gangue %s conseguiu defender o território %s do ataque de sua gangue!", GangControlZone[zoneid], zones[zoneid][zonename]);
	SendClientMessageGang(ZoneAttacked[zoneid], COLOR_LIGHT_RED, str);
	format(str, sizeof str, "PERFEITO! Vocês conseguiram defender o território %s do ataque da gangue %s, sua gangue acaba de upar de Nível...", zones[zoneid][zonename], ZoneAttacked[zoneid]);
    SendClientMessageGang(GangControlZone[zoneid], COLOR_WHITE, str);
    AddGangLevel(GangControlZone[zoneid], 3);
	ZoneAttacked[zoneid][0] = EOS;
	CreateGangZonesForAll();
}
stock AddGangLevel(gangname[], amount)
{
	gStats[GetGangID(gangname)][GangLevel] += amount;
	if(gStats[GetGangID(gangname)][GangLevel] >= 24)
	{
		if(IsStringAName(gStats[GetGangID(gangname)][GangDono]))
		{
		    pStats[IDName(gStats[GetGangID(gangname)][GangDono])][ConquistouTerritorio] = 0;
		}
		else
		{
			SetValue(PlayerFile(gStats[GetGangID(gangname)][GangDono]), "ConquistouTerritorio", "0");
        }
		gStats[GetGangID(gangname)][GangLevel] = 0;
		SendClientMessageGang(gangname, COLOR_JUIZ, "Sua gangue atingiu o nível 24 e agora pode conquistar outro território vazio...");
	}
}

public RadarNick()
{
	for(new i = 0; i < MAX_SLOTS; i++){
		if(IsPlayerConnected(i) && Logado[i]){
		    for(new x = 0; x < MAX_SLOTS; x++){
				if(!IsPlayerTransparent(i)){
					new Float:X[3], Float:Y[3], Float:Z[3];
					GetPlayerPos(i, X[0], Y[0], Z[0]);
					GetPlayerPos(x, X[1], Y[1], Z[1]);
					X[2] = X[0] - X[1];
					Y[2] = Y[0] - Y[1];
					Z[2] = Z[0] - Z[1];
					if(floatsqroot(floatpower(X[2], 2) + floatpower(Y[2], 2) + floatpower(Z[2], 2)) < 15.0){
					   	if(pStats[i][Prof] != ASSASSINO || pStats[i][Prof] != ASSALTANTE || pStats[i][Prof] != CONTRABANDISTA || pStats[i][Prof] != TRAFICANTE){
					    	ShowPlayerNameTagForPlayer(x, i, true);
					   	} else	{
						    ShowPlayerNameTagForPlayer(x, i, false);
						}
   					} else	{
					    ShowPlayerNameTagForPlayer(x, i, false);
					}
				} else {
				    ShowPlayerNameTagForPlayer(x, i, false);
				}
			}
		}
	}
}

public ReportarPoliciaDenovo(playerid) ReportPolice[playerid] = 0;

public ChecarDenovo(playerid) RadarCheck[playerid] = 0;

stock Radar(playerid, speed)
{
	if(RadarCheck[playerid] == 1 || GetPlayerState(playerid) != PLAYER_STATE_DRIVER || IsPlayerInBike(playerid) || IsPlayerInVehicleAir(playerid) || IsPlayerInBoat(playerid) || IsPolice(GetPlayerVehicleID(playerid)) || IsAmbulance(GetPlayerVehicleID(playerid))) return ;
	new Float:playerpos[3];
	GetPlayerPos(playerid, playerpos[0], playerpos[1], playerpos[2]);
	for(new r = 0; r < sizeof Radares; r++)
	{
		new Float:distance = 0.0;
		for(new a = 0; a < 3; a++)
		{
		    distance += floatpower(playerpos[a] - Radares[r][a], 2);
		}
	    if(floatsqroot(distance) < 15.0)
	    {
	        new msg[128];
			if(ReportPolice[playerid] == 0)
			{
			    new zone[28], vehid = GetPlayerVehicleID(playerid);
			    GetPlayer2DZone(playerid, zone, 28);
			    if(!IsPlayerTransparent(playerid))
			    {
			    	format(msg, sizeof msg, "[RADAR] Suspeito: %s - Velocidade: %d KM/H - Local: %s - Placa: %s - Modelo: %s", PlayerName(playerid), speed, zone, vStats[vehid][VPlaca], GetVehicleModelName(GetVehicleModel(vehid)));
					SendClientMessagePolicia(COLOR_CENTRAL, msg);
					if(GetPlayerWantedLevel(playerid) > 0)
					{
					    SendClientMessagePolicia(COLOR_CENTRAL, "ATENÇÃO ATENÇÃO: Jogador procurado identificado pelo radar, vá até lá e detenha-o");
					}
				}
				else
				{
				    format(msg, sizeof msg, "[RADAR] Suspeito: Desconhecido - Velocidade: %d KM/H - Local: %s - Placa: %s - Modelo: %s", speed, zone, vStats[vehid][VPlaca], GetVehicleModelName(GetVehicleModel(vehid)));
					SendClientMessagePolicia(COLOR_CENTRAL, msg);
				}
				ReportPolice[playerid] = 1;
	            SetTimerEx("ReportarPoliciaDenovo", 5000, false, "d", playerid);
			}
			new limit = floatround(Radares[r][3]);
			format(msg, sizeof msg, "[RADAR] %d / %d KM/H", speed, limit);
			SendClientMessage(playerid, COLOR_SKY_BLUE, msg);
	        if(speed > limit && speed < 400)
	        {
	            new vehid = GetPlayerVehicleID(playerid);
	            if(vehid < AmountServerVehicles)
	            {
		            if(FazendoTesteRua[playerid] == 1)
					{
     					new plid = InstrutorRua[playerid];
     					new string[128];
						format(string, sizeof(string), "[TESTE] Sr. %s, você levou uma multa por passar no radar acima da velocidade permitida...", PlayerName(playerid));
						SendPlayerMessageToPlayer(plid, playerid, string);
    					format(string, sizeof(string), "[TESTE] Sr. %s, você levou uma multa por passar no radar acima da velocidade permitida...", PlayerName(playerid));
						SendPlayerMessageToPlayer(plid, plid, string);
						SendClientMessagePolicia(COLOR_COP_SWAT,string);
						if(Chance[playerid] >= 1)
						{
							Chance[playerid] = Chance[playerid] - 1;
							format(string, sizeof(string), "[TESTE] Sr. %s, seu teste será refeito. CHANCE: %d/3.", PlayerName(playerid), Chance[playerid]);
							SendPlayerMessageToPlayer(plid, plid, string);
							format(string, sizeof(string), "[TESTE] Sr. %s, seu teste será refeito. CHANCE: %d/3.", PlayerName(playerid), Chance[playerid]);
							SendPlayerMessageToPlayer(plid, playerid, string);
							InstrutorRua[playerid] = plid;
   							SetVehicleToRespawn(GetPlayerVehicleID(playerid));
						    ADTeste[playerid] --;
							SetTimerEx("AvancoDirecao",5000,0,"dd",playerid,plid);
						}
						else
						{
							SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Seu teste foi CANCELADO, você perdeu todas as chances, terá que refazer tudo novamemnte.");
							format(string, sizeof(string), "[AUTO-ESCOLA] O aprendiz %s perdeu todas as chances e seu teste foi cancelado!", PlayerName(playerid));
							SendClientMessage(plid,COLOR_INSTRUTOR, string);
							Chance[playerid] = 0;
	    					SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	    					TrancarVeiculo(playerid,CarroAuto[0]);
							TrancarVeiculo(playerid,CarroAuto[1]);
							TrancarVeiculo(playerid,CarroAuto[2]);
							TrancarVeiculo(playerid,CarroAuto[3]);
							TrancarVeiculo(playerid,CarroAuto[4]);
							TrancarVeiculo(playerid,CarroAuto[5]);
						}
		            }
		            else
		            {
		                new multa = 50 + (((speed - limit) * 5) / 2);
		                multa -= (multa % 50);
						pStats[playerid][MultaPublica] += multa;
						new string[128];
						SendClientMessage(playerid, COLOR_SKY_BLUE, "Sua empresa recebeu uma multa e você foi o responsável, metade do valor foi desviado para sua multa pessoal.");
						format(string, sizeof string, "Multa recebida: $%d,00 dólares - Sua dívida total: $%d,00 dólares.", multa, pStats[playerid][MultaPublica]);
						SendClientMessage(playerid, COLOR_SKY_BLUE, string);
						if(pStats[playerid][HabTerrestre] == 1){
							if(pStats[playerid][MultaPublica] > 5000){
								SendClientMessage(playerid, COLOR_CENTRAL, "[DELEGACIA] Com essa quantidade de multas, tivemos que confiscar sua Habilitação.");
								SendClientMessage(playerid, COLOR_CENTRAL, "[DELEGACIA] Terá que pagar a multa e tirar outra habilitação.");
								pStats[playerid][HabTerrestre] = 0;
							}
						}
		            }
		        }
	            else
	            {
	                new multa = 100 + ((speed - limit) * 5);
	                multa -= (multa % 50);
	                vStats[vehid][Dividas] += multa;
	                SendClientMessage(playerid, COLOR_SKY_BLUE, "[RADAR] Veículo multado por ultrapassar o limite de velocidade imposto pelo radar.");
					format(msg, sizeof msg, "Valor da multa: $%d,00 dólares - Dívida atual do veículo: $%d,00 dólares.", multa, vStats[vehid][Dividas]);
					SendClientMessage(playerid, COLOR_SKY_BLUE, msg);
				}
	            RadarCheck[playerid] = 1;
	            SetTimerEx("ChecarDenovo", 5000, false, "d", playerid);
	        }
			break;
	    }
	}
}

public Velocimetro()
{
	for(new i = 0; i < MAX_SLOTS; i++)
	{
	    if(IsPlayerConnected(i) && Logado[i])
	    {
    		new Float:x, Float:y, Float:z;
    		GetPlayerPos(i, x, y, z);
   			if(IsPlayerInAnyVehicle(i)){
				new Float:distance = 0.0, vehicleid, Float:vHealth, string[128], velo;
				vehicleid = GetPlayerVehicleID(i);
				distance += floatpower(SavePlayerPos[i][LastX] - x, 2);
				distance += floatpower(SavePlayerPos[i][LastY] - y, 2);
				distance += floatpower(SavePlayerPos[i][LastZ] - z, 2);
				distance = floatsqroot(distance);
				velo = floatround((distance / 1000) * 3600);
				new nomeveiculo[128];
				nomeveiculo = GetVehicleModelName(GetVehicleModel(GetPlayerVehicleID(i)));
				GetVehicleHealth(vehicleid,vHealth);
				format(string, sizeof(string), "~g~Veiculo: ~w~%s ~n~~b~KM/H: ~w~%s%d ~b~Gas:~w~%s%d ~n~~g~Integridade: ~w~%s%d", nomeveiculo, ReturnColorGT(velo,30,120,"~y~","~w~","~r~"), velo, ReturnColorGT(vStats[GetPlayerVehicleID(i)][Combustivel],20,90,"~r~","~w~","~y~"),vStats[GetPlayerVehicleID(i)][Combustivel], ReturnColorGT(floatround(vHealth),500,900,"~r~","~w~","~g~"), floatround(vHealth));
    			TextDrawSetString(Speedo[i], string);
				Radar(i, velo);
			}
			SavePlayerPos[i][LastX] = x;
			SavePlayerPos[i][LastY] = y;
			SavePlayerPos[i][LastZ] = z;
		}
	}
}

public TempoeTimers()
{
	for(new i=0; i<MAX_SLOTS; i++)
	{
	    if(IsPlayerConnected(i) && Logado[i] == 1)
		{
		    ShowedForPlayer[i]=0;
			for(new oldm=0; oldm<32; oldm++) {RemovePlayerMapIcon(i, oldm);}
			for(new m=0; m<sizeof(MapIcons); m++) {
				if(ShowedForPlayer[i] < 32) {
					if (GetDistanceToMapIcon(i, m) <= 400) {
						SetPlayerMapIcon(i, ShowedForPlayer[i], MapIcons[m][miX], MapIcons[m][miY], MapIcons[m][miZ], MapIcons[m][miModel], 0xE6E6E6E6);
						ShowedForPlayer[i]++;
					}
				}
			}
			for(new m=0; m<sizeof(Radares); m++) {
				if(ShowedForPlayer[i] < 32) {
					if (GetPlayerDistanceToPoint(i, Radares[m][0], Radares[m][1]) <= 400) {
						SetPlayerMapIcon(i, ShowedForPlayer[i], Radares[m][0], Radares[m][1], Radares[m][2], 53, 0xE6E6E6E6);
						ShowedForPlayer[i]++;
					}
				}
			}
			for(new h=0; h<LastCasa; h++) {
			    if(ShowedForPlayer[i] < 32) {
                    if (GetPlayerDistanceToPoint(i, pckStats[h][pX], pckStats[h][pY]) <= 400) {
                        SetPlayerMapIcon(i, ShowedForPlayer[i], pckStats[h][pX], pckStats[h][pY], pckStats[h][pZ], 32, 0xE6E6E6E6);
						ShowedForPlayer[i]++;
					}
			    }
			}
		}
		if(IsPlayerConnected(i) && Logado[i] == 1 && !Tutorial[i]){
  			if(!IsPlayerInAnyVehicle(i))
			{
				new bool:searchedtell = false;
				for(new t = 0; t < sizeof(TelefonesPublicos); t++){
					if(GetPlayerDistanceToPointEx(i,TelefonesPublicos[t][0],TelefonesPublicos[t][1],TelefonesPublicos[t][2]) < 4 && !searchedtell){
						if(EmLigacao[i] == 0 || Chamando[i] == 0){
						    searchedtell = true;
							if(TellPublico[i] == -1)
							{
								TellPublico[i] = t;
								SendClientMessage(i, COLOR_JUIZ, "Telefone público - USE: /ligartelefonepublico [número]");
							}
							break;
						}
					}
				}
				if(!searchedtell) TellPublico[i] = -1;
				new bool:find = false;
				for(new t = 0; t < sizeof(TerminaisBusao); t++)
				{
				    if(GetPlayerDistanceToPointEx(i,TerminaisBusao[t][tX],TerminaisBusao[t][tY],TerminaisBusao[t][tZ]) < 6 && !find)
				    {
						if(Terminal[i] == -1)
						{
						    Terminal[i] = t;
							SendClientMessage(i, COLOR_WHITE, "[TERMINAL] Próximos destinos do ônibus à partir daqui:");
							if(t + 1 >= sizeof TerminaisBusao)
							{
							    SendClientMessage(i, COLOR_MOTORISTA_DE_ONIBUS, TerminaisBusao[0][tReference]);
							    SendClientMessage(i, COLOR_MOTORISTA_DE_ONIBUS, TerminaisBusao[1][tReference]);
							}
							else if(t + 2 >= sizeof TerminaisBusao)
							{
							    SendClientMessage(i, COLOR_MOTORISTA_DE_ONIBUS, TerminaisBusao[sizeof(TerminaisBusao) - 1][tReference]);
							    SendClientMessage(i, COLOR_MOTORISTA_DE_ONIBUS, TerminaisBusao[0][tReference]);
							}
							else
							{
							    SendClientMessage(i, COLOR_MOTORISTA_DE_ONIBUS, TerminaisBusao[t + 1][tReference]);
							    SendClientMessage(i, COLOR_MOTORISTA_DE_ONIBUS, TerminaisBusao[t + 2][tReference]);
							}
							new count = 0;
							for(new a = 0; a < MAX_SLOTS; a++)
							{
							    if((pStats[a][Prof] == MOTORISTA_DE_ONIBUS || IsPlayerAdmin(a)) && IsBus(GetPlayerVehicleID(a)))
							    {
							        count++;
							    }
							}
							new msg[128];
							format(msg, sizeof msg, "[TERMINAL] Quantidade de ônibus em circulação: %d", count);
							SendClientMessage(i, COLOR_WHITE, msg);
						}
						find = true;
				    }
				}
				if(!find) Terminal[i] = -1;
			}
			if(GetPickupServer[i] != -1)
			{
				new Float:dist = GetPlayerDistanceToPointEx(i, Pickups[GetPickupServer[i]][pickupposx], Pickups[GetPickupServer[i]][pickupposy], Pickups[GetPickupServer[i]][pickupposz]);
				if(dist >= 4)
				{
                    GetPickupServer[i] = -1;
				}
			}
			if(GetPickupServer[i] == -1)
			{
				for(new p = 0; p < sizeof(Pickups); p++){
					if(GetPlayerDistanceToPointEx(i,Pickups[p][pickupposx],Pickups[p][pickupposy],Pickups[p][pickupposz]) < 4){
                        GetPickupServer[i] = p;
						if(p == 13){
						    if(PlayerArea[i] != AreaHotel){
		    					SendClientMessage(i, COLOR_WHITE, "|================| Bem vindo ao Hotel |================|");
								SendClientMessage(i,COLOR_AQUA_GREEN,"[HOTEL] Olá senhor. Quer disfrutar do nosso hotel? Veja mais: /sisthotel");
								PlayerArea[i] = AreaHotel;
								PlayerHotel[i] = 0;
								SetTimerEx("MostrarMensagemArea",10000,0,"d",i);
							}
						}
						else if(p == 14){
							if(PlayerArea[i] != AreaHotel){
		    					SendClientMessage(i, COLOR_WHITE, "|================| Bem vindo ao Hotel |================|");
								SendClientMessage(i,COLOR_AQUA_GREEN,"[HOTEL] Olá senhor. Quer disfrutar do nosso hotel? Veja mais: /sisthotel");
								PlayerArea[i] = AreaHotel;
								PlayerHotel[i] = 1;
								SetTimerEx("MostrarMensagemArea",10000,0,"d",i);
							}
						}
						else if(p == 15){
							if(PlayerArea[i] != AreaHotel){
		    					SendClientMessage(i, COLOR_WHITE, "|================| Bem vindo ao Hotel |================|");
								SendClientMessage(i,COLOR_AQUA_GREEN,"[HOTEL] Olá senhor. Quer disfrutar do nosso hotel? Veja mais: /sisthotel");
								PlayerArea[i] = AreaHotel;
								PlayerHotel[i] = 2;
								SetTimerEx("MostrarMensagemArea",10000,0,"d",i);
							}
						}
						else if(p == 16){
							if(PlayerArea[i] != AreaHotel){
		    					SendClientMessage(i, COLOR_WHITE, "|================| Bem vindo ao Hotel |================|");
								SendClientMessage(i,COLOR_AQUA_GREEN,"[HOTEL] Olá senhor. Quer disfrutar do nosso hotel? Veja mais: /sisthotel");
								PlayerArea[i] = AreaHotel;
								PlayerHotel[i] = 3;
								SetTimerEx("MostrarMensagemArea",10000,0,"d",i);
							}
						}
						else if(p == 17 || p == 18){
							if(PlayerArea[i] != AreaHotel){
		    					SendClientMessage(i, COLOR_WHITE, "|================| Bem vindo ao Hotel |================|");
								SendClientMessage(i,COLOR_AQUA_GREEN,"[HOTEL] Olá senhor. Quer disfrutar do nosso hotel? Veja mais: /sisthotel");
								PlayerArea[i] = AreaHotel;
								PlayerHotel[i] = 4;
								SetTimerEx("MostrarMensagemArea",10000,0,"d",i);
							}
						}
						else if(p == 22){
							SendClientMessage(i, COLOR_WHITE, "Para entrar na Loja de registros de cofres digite /entrar.");
						}
						else if(p == 47){
							SendClientMessage(i, COLOR_WHITE, "Para entrar no Estádio digite /entrar.");
						}
						else if(p == 33){
							SendClientMessage(i, COLOR_WHITE, "Para entrar na Loja de munição digite /entrar.");
						}
						else if(p == 37){
							SendClientMessage(i, COLOR_WHITE, "Para entrar na Casa do Sweet digite /entrar.");
						}
						else if(p == 35){
							SendClientMessage(i, COLOR_WHITE, "Para entrar na Casa do Ryder digite /entrar.");
						}
						else if(p == 45){
							SendClientMessage(i, COLOR_WHITE, "Para entrar na Corretora de Propriedades digite /entrar.");
						}
						else if(p == 42){
							SendClientMessage(i, COLOR_WHITE, "Para entrar na Loteria digite /entrar.");
						}
						else if(p == 39){
							SendClientMessage(i, COLOR_WHITE, "Para entrar no Tribunal digite /entrar.");
						}
						else if(p == 43){
							SendClientMessage(i, COLOR_WHITE, "Para entrar na Agência de empregos digite /entrar.");
						}
						else if(p == 49){
							SendClientMessage(i, COLOR_WHITE, "Para entrar na Didier Sachs digite /entrar.");
						}
						else if(p == 50){
							SendClientMessage(i, COLOR_WHITE, "Para entrar na Pro Laps digite /entrar.");
						}
						else if(p == 51){
							SendClientMessage(i, COLOR_WHITE, "Para entrar na Victim digite /entrar.");
						}
						else if(p == 52){
							SendClientMessage(i, COLOR_WHITE, "Para entrar na Binco digite /entrar.");
						}
						else if(p == 53){
							SendClientMessage(i, COLOR_WHITE, "Para entrar na Sub Urban digite /entrar.");
						}
						else if(p == 54){
							SendClientMessage(i, COLOR_WHITE, "Para entrar no Bar digite /entrar.");
						}
						else if(p == 55){
							SendClientMessage(i, COLOR_WHITE, "Para entrar na Boate digite /entrar.");
						}
						else if(p == 56){
							SendClientMessage(i, COLOR_WHITE, "Para entrar na Balada digite /entrar.");
						}
						else if(p == 57 || p == 58){
							SendClientMessage(i, COLOR_WHITE, "Para entrar na Ammu-Nation digite /entrar.");
						}
						else if(p == 59){
							SendClientMessage(i, COLOR_WHITE, "Para entrar na Delegacia digite /entrar.");
						}
						else if(p == 61 || p == 62 || p == 63 || p == 64 || p == 65){
							SendClientMessage(i, COLOR_WHITE, "Para entrar na Loja de Utilidades digite /entrar.");
						}
						else if(p == 60){
							SendClientMessage(i, COLOR_WHITE, "Para entrar na Loteria de Cavalos digite /entrar.");
						}
						else if(p == 66 || p == 80){
							SendClientMessage(i, COLOR_WHITE, "Para entrar na Burger Shot digite /entrar.");
						}
						else if(p == 24 || p == 25 || p == 26 || p == 27){
							SendClientMessage(i, COLOR_WHITE, "Para entrar no Banco digite /entrar.");
						}
						else if(p == 83){
                            SendClientMessage(i, COLOR_WHITE, "Para entrar na Seguradora digite /entrar.");
						}
						else if(p == 85){
                            SendClientMessage(i, COLOR_WHITE, "Para entrar na Sala do Delegado digite /entrar.");
						}
						else if(p == 87){
                            SendClientMessage(i, COLOR_WHITE, "Para entrar na Fazenda digite /entrar.");
						}
						else if(p == 89){
                            SendClientMessage(i, COLOR_WHITE, "Para entrar na Loja de Donuts digite /entrar.");
						}
						else if(p == 81){
							if(pStats[i][Passaporte] == 0){
								SendClientMessage(i, COLOR_JUIZ, " ");
								SendClientMessage(i, COLOR_JUIZ, "[Secretária Juiz] Olá senhor gostaria de retirar seu Passaporte Inter-Estadual?");
								SendClientMessage(i, COLOR_WHITE,"Para retirar o passaporte digite: /tirarpassaporte. Custo: $100,00");
							}
						}
						else if(p == 82){
							if(pStats[i][Porte] == 0){
							    SendClientMessage(i, COLOR_JUIZ, " ");
								SendClientMessage(i, COLOR_DELEGADO, "[Escrivão] Quer retirar seu Porte de Armas?");
								SendClientMessage(i, COLOR_DELEGADO,"Para retirar o porte de armas digite: /tirarporte. Custo: $400,00");
							}
						}
						else if(p == 91){
						    if(GetPlayerVehicleID(i) > AmountServerVehicles){
								ShowTuningMainMenu(i);
							} else {
								SendClientMessage(i, COLOR_WHITE, "Não pode tunar veículos do servidor.");
							}
						}
						else if(p == 92){
				        	SendClientMessage(i, COLOR_GREEN, "Restaurante Life's'FOOD");
				        	SendClientMessage(i, COLOR_WHITE, "Para entrar no Restaurante digite /entrar.");
						}
						else if(p == 93){
							SendClientMessage(i, COLOR_WHITE, "Para sair do Restaurante digite /sair");
						}
						else if(p == 90){
                            SendClientMessage(i, COLOR_WHITE, "Para sair da Loja de Donuts digite /sair");
						}
						else if(p == 88){
                            SendClientMessage(i, COLOR_WHITE, "Para sair da Fazenda digite /sair");
						}
						else if(p == 86){
                            SendClientMessage(i, COLOR_WHITE, "Para sair da Sala do Delegado digite /sair");
						}
						else if(p == 84){
                            SendClientMessage(i, COLOR_WHITE, "Para sair da Seguradora digite /sair");
						}
						else if(p == 79){
		   					SendClientMessage(i, COLOR_WHITE, "Para sair da Burger Shot digite /sair");
						}
						else if(p == 67){
		    				SendClientMessage(i, COLOR_WHITE, "Para sair da Didier Sachs digite /sair");
						}
						else if(p == 68){
							SendClientMessage(i, COLOR_WHITE, "Para sair da Pro Laps digite /sair");
						}
						else if(p == 69){
		    				SendClientMessage(i, COLOR_WHITE, "Para sair da Victim digite /sair");
						}
						else if(p == 70){
		    				SendClientMessage(i, COLOR_WHITE, "Para sair da Binco digite /sair");
						}
						else if(p == 71){
		    				SendClientMessage(i, COLOR_WHITE, "Para sair da Sub Urban digite /sair");
						}
						else if(p == 72){
						    SendClientMessage(i, COLOR_WHITE, "Para sair do Bar digite /sair");
						}
						else if(p == 73){
		   					SendClientMessage(i, COLOR_WHITE, "Para sair da Boate digite /sair");
						}
						else if(p == 74){
		   					SendClientMessage(i, COLOR_WHITE, "Para sair da Balada digite /sair");
						}
						else if(p == 75){
		    				SendClientMessage(i, COLOR_WHITE, "Para sair da Ammu-Nation digite /sair");
						}
						else if(p == 76){
		    				SendClientMessage(i, COLOR_WHITE, "Para sair da Delegacia digite /sair");
						}
						else if(p == 78){
		    				SendClientMessage(i, COLOR_WHITE, "Para sair da Loja de utilidades 24/7 digite /sair");
						}
						else if(p == 77){
		    				SendClientMessage(i, COLOR_WHITE, "Para sair da Loteria de cavalos digite /sair");
						}
						else if(p == 23){
		    				SendClientMessage(i, COLOR_WHITE, "Para sair da Loja de registros de cofres digite /sair");
						}
						else if(p == 67){
		    				SendClientMessage(i, COLOR_WHITE, "Para sair da Didier Sachs digite /sair");
						}
						else if(p == 48){
							SendClientMessage(i, COLOR_WHITE, "Para sair do Estádio digite /sair");
						}
						else if(p == 34){
							SendClientMessage(i, COLOR_WHITE, "Para sair da Loja de munição digite /sair");
						}
						else if(p == 38){
		    				SendClientMessage(i, COLOR_WHITE, "Para sair da Casa do Sweet digite /sair");
						}
						else if(p == 36){
		    				SendClientMessage(i, COLOR_WHITE, "Para sair da Casa do Ryder digite /sair");
						}
						else if(p == 46){
						    SendClientMessage(i, COLOR_WHITE, "Para sair da Corretora de Propriedades digite /sair");
						}
						else if(p == 41){
		    				SendClientMessage(i, COLOR_WHITE, "Para sair da Loteria digite /sair");
						}
						else if(p == 40){
							SendClientMessage(i, COLOR_WHITE, "Para sair do Tribunal digite /sair");
						}
						else if(p == 44){
							SendClientMessage(i, COLOR_WHITE, "Para sair da Agência de empregos digite /sair");
						}
						else if(p == 28){
							SendClientMessage(i, COLOR_WHITE, "Para sair do Banco digite /sair");
						}
						break;
					}
				}
				if(GetPickupHouse[i] != -1)
				{
					new Float:dist = GetPlayerDistanceToPointEx(i, pckStats[GetPickupHouse[i]][pX], pckStats[GetPickupHouse[i]][pY], pckStats[GetPickupHouse[i]][pZ]);
					if(dist >= 4)
					{
	    				GetPickupHouse[i] = -1;
					}
				}
				if(GetPickupHouse[i] == -1)
				{
				    RemoveTextDrawHouse(i);
					new p = 0;
   					while(p < LastCasa){
						new str[128];
						set(str,PickupFile(p));
			   			if(fexist(str)){
			    			if(GetPlayerDistanceToPointEx(i,pckStats[p][pX],pckStats[p][pY],pckStats[p][pZ]) < 4){
		    					if(pckStats[p][Vendendo] == 1 && !compare(pckStats[p][CorretorVenda],"NONE")){
		    					    new string[128];
									format(string,sizeof(string),"~g~Casa a venda~n~~b~Valor:~n~~w~$%d~n~~b~Tratar com:~n~~w~%s",pckStats[p][PickupValor],pckStats[p][CorretorVenda]);
									SendClientMessage(i, COLOR_WHITE, "Essa casa está a venda, /comprarcasaavenda para adquiri-la...");
                	                SendTextDrawHouse(i, string);
								}
								else if(!compare(pckStats[p][PickupDono],"NONE") && strlen(pckStats[p][PickupDono]) > 0){
								    new string[128];
									if(!IsStringAName(pckStats[p][PickupDono])){
										if(pckStats[p][Vendendo] == 1){
											format(string,sizeof(string),"Essa casa está a venda no valor de $%d,00 dólares!",pckStats[p][PickupValor]);
			    							SendClientMessage(i, COLOR_PALHA, string);
	            	                    	SendClientMessage(i, COLOR_WHITE, "Para adquiri-la você deve digitar /comprarcasa.");
	            	                    	format(string,sizeof(string),"~b~Proprietario:~n~~w~%s~n~~b~Valor:~n~~w~$%d~n~~b~A venda:~n~~w~Sim",pckStats[p][PickupDono], pckStats[p][PickupValor]);
										}
										else{
										    format(string,sizeof(string),"~b~Proprietario:~n~~w~%s~n~~b~Valor:~n~~w~$%d~n~~b~A venda:~n~~w~Nao",pckStats[p][PickupDono], pckStats[p][PickupValor]);
										}
									}
									else{
										if(pckStats[p][Vendendo] == 1){
											format(string,sizeof(string),"Essa casa está a venda no valor de $%d,00 dólares!",pckStats[p][PickupValor]);
			    							SendClientMessage(i, COLOR_PALHA, string);
	            	                    	SendClientMessage(i, COLOR_WHITE, "Para adquiri-la você deve digitar /comprarcasa.");
	                	                	format(string,sizeof(string),"~b~Proprietario:~n~~w~%s~n~~b~Valor:~n~~w~$%d~n~~b~A venda:~n~~w~Sim",pckStats[p][PickupDono], pckStats[p][PickupValor]);
										}
										else{
										    format(string,sizeof(string),"~b~Proprietario:~n~~w~%s~n~~b~Valor:~n~~w~$%d~n~~b~A venda:~n~~w~Nao",pckStats[p][PickupDono], pckStats[p][PickupValor]);
										}
									}
									SendTextDrawHouse(i, string);
									SendClientMessage(i, COLOR_WHITE, "Para entrar nessa casa digite /entrarcasa");
								}
								GetPickupHouse[i] = p;
								break;
							}
						} else {
							break;
						}
						p++;
					}
				}
			}
		}
	}
}
stock DepositZonesCash()
{
	for(new z = 0; z < sizeof zones; z++)
	{
		if(!compare(GangControlZone[z], "NONE"))
		{
		    new gng = GetGangID(GangControlZone[z]);
			new bool:c = false;
			if(IsStringAName(gStats[gng][GangDono]))
		    {
		        c = true;
		    }
		    if(!c)
		    {
		        for(new m = 0; m < gStats[gng][GangMembros]; m++)
		        {
		            if(!compare(MembersGang[gng][m], "NONE") && IsStringAName(MembersGang[gng][m]))
		            {
		                c = true;
		                break;
		            }
		        }
		    }
			if(gng != -1 && c)
			{
			    new rand = random(3), cash;
				if(gStats[gng][GangLevel] < 10)
				{
				    if(rand == 0) cash = 300;
				    else if(rand == 1) cash = 400;
					else cash = 800;
				}
				else if(gStats[gng][GangLevel] < 20)
				{
				    if(rand == 0) cash = 400;
				    else if(rand == 1) cash = 800;
					else cash = 1050;
				}
				else
				{
				    if(rand == 0) cash = 800;
				    else if(rand == 1) cash = 1000;
					else cash = 1500;
				}
				ZoneCash[z] += cash;
				if(ZoneCash[z] > 10000) ZoneCash[z] = 10000;
				new string[128];
				format(string, sizeof string, "[INFO] Seu território %s recebeu $%d,00 dólares de dinheiro. Total: $%d,00 dólares", zones[z][zonename], cash, ZoneCash[z]);
				SendClientMessageGang(GangControlZone[z], COLOR_JUIZ, string);
			}
		}
	}
}
public Relogio(){
	if(MinutoJogo < 60){
		MinutoJogo++;
	}
	if(MinutoJogo > 59){
		MinutoJogo = 0;
		if(HoraJogo < 23){
			HoraJogo++;
		}
		else if(HoraJogo >= 23){
			HoraJogo = 0;
		}
		SetWorldTime(HoraJogo);
	}
	if(MinutoJogo==1){
		switch(HoraJogo)
 		{
 			case 1: if(ValorDia == 1) ImpostoBanco();
 			case 5: ResetCTMVehicles();
 			case 6: SetWeather(Previsao);
 			case 8:  if(ValorDia == 0) DepositZonesCash();
 			case 18: if(ValorDia == 0) CobrarContaLuz();
 			case 14: if(ValorDia == 2) CobrarContaTelefone();
 			case 16:
			{
   				if(ValorDia == 2) PagamentoSeguro();
				if(ValorDia == 6) Inflacao();
			}
 			case 15:
			{
   				if(ValorDia == 0) EmpresasCarros();
		    	if(ValorDia == 6){
					if(MostrouResultado == 0){
 			   	    	PropertiesResult();
 			   	    	MostrouResultado = 1;
 			   	    	SetTimer("ZerarResultadoMostrado",60000,false);
					}
				}
				if(ValorDia != 0 && ValorDia != 2) AnunciarProcurados();
				if(ValorDia == 0 || ValorDia == 5) AnunciarVendas();
				if(ValorDia == 4) SendBankMessage();
				if(ValorDia == 3) AnunciarCabecas();
				if(ValorDia == 2 || ValorDia == 6) AnunciarAlugueis();
			}
			case 19:
			{
	 			if(ValorDia == 4){
					new ofrand = random(7);
					if(ofrand == 3){
						new ofrand2 = random(3);
					    if(ofrand2 == 0){
				 			SendClientMessageToAll(COLOR_WHITE, " ");
				 	    	SendClientMessageToAll(COLOR_ORANGE, "PSIU... ei você aí, os números da loteria saem amanhã, as 19:00, APOSTE e tente a sorte.");
				 			SendClientMessageToAll(COLOR_WHITE, " ");
						}
						if(ofrand2 == 1){
				 			SendClientMessageToAll(COLOR_WHITE, " ");
				 	    	SendClientMessageToAll(COLOR_ORANGE, "[LOTÉRICA] Números amanhã as 19:00, venha já e aposte!.");
				 			SendClientMessageToAll(COLOR_WHITE, " ");
						}
						if(ofrand2 == 2){
				 			SendClientMessageToAll(COLOR_WHITE, " ");
				 	    	SendClientMessageToAll(COLOR_ORANGE, "Venha LOGO, você só tem 24 horas para apostar na loteria! ESSA É SUA GRANDE CHANCE.");
				 			SendClientMessageToAll(COLOR_WHITE, " ");
						}
			 	    }
				}
				if(ValorDia == 5){
				    LoteriaComeco();
				}
			}
			case 20:
			{
			 	if(ValorDia == 4){
					new ofrand = random(7);
					if(ofrand == 3){
						new ofrand2 = random(3);
						if(ofrand2 == 0){
				 			SendClientMessageToAll(COLOR_WHITE, " ");
				 	    	SendClientMessageToAll(COLOR_BLUE, "O Sorteio de hoje já ocorreu! Vamos tente a sorte nos cavalos, vá na loteria. Sorteio amanhã às 20:00.");
				 			SendClientMessageToAll(COLOR_WHITE, " ");
						}
						if(ofrand2 == 1){
				 			SendClientMessageToAll(COLOR_WHITE, " ");
				 	    	SendClientMessageToAll(COLOR_BLUE, "Corrida de cavalos amanhã às 20:00, faça seu palpite.");
				 			SendClientMessageToAll(COLOR_WHITE, " ");
						}
						if(ofrand2 == 2){
				 			SendClientMessageToAll(COLOR_WHITE, " ");
				 	    	SendClientMessageToAll(COLOR_BLUE, "Vá já a Loja de Apostas de Cavalos e dê seu lance, você só tem 24 horas.");
				 			SendClientMessageToAll(COLOR_WHITE, " ");
				 		}
			 	    }
				}
				if(ValorDia == 5 || ValorDia == 4 || ValorDia == 3 || ValorDia == 2 || ValorDia == 1){
				    ApostasdeCavalos();
				}
			}
   			case 21:
     		{
     		    if(PrevisaoAnunciada == 0){
    				SendClientMessageToAll(COLOR_WHITE,"New Paper's Life, previsão do tempo para amanhã:");
			    	Previsao = random(19);
			    	SendClientMessageToAll(COLOR_GREEN,WeatherName[Previsao]);
			    	weatherprevisao = Previsao;
			    	PrevisaoAnunciada = 1;
			    	SetTimer("ZerarAnuncioPrevisao",60000,false);
			    	if(weatherprevisao == 8 || weatherprevisao == 16){
			    	    SendClientMessageToAll(COLOR_WHITE, "[NOTICIAS] Chuva para os agricultores terem mais fartura APROVEITEM.");
						SendClientMessageToAll(COLOR_WHITE, "[NOTICIAS] Entretanto pessoas poderão gripar. CUIDADO!");
						SendClientMessageToAll(COLOR_WHITE, " ");
			    	}
				}
			}
			case 12:
			{
			    if(ValorDia == 6){
			    	PayHotel();
				}
			}
			case 0:
  			{
				if(SalarioEntregue == 0){
	 				if(ValorDia == 1){
	 				    TirarDiasAluguel();
	 				    RecebendoSalario = 1;
				    	PagamentoSegurancas();
				    	SalarioEntregue = 1;
				    	for(new i=0; i<MAX_SLOTS; i++){
				    	    if(pStats[i][VacinaDuracao] > 0){
				    	        pStats[i][VacinaDuracao]--;
								if(pStats[i][VacinaDuracao] <= 0){
									pStats[i][VacinaDuracao] = 0;
									SendClientMessage(i, COLOR_GRAY, "Acabou o efeito de sua vacina contra a Gripe Suína...");
								}
				    	    }
				    	    if(pStats[i][Propriedade] != 0)
				    	    {
				    	        AcrescentarPrejuizo(pStats[i][Propriedade], Profissoes[pStats[i][Prof]][ProfPay] + pStats[i][AumentoPropriedade]);
				    	        pStats[i][BancoTrabalho] += pStats[i][AumentoPropriedade];
								new msg[128];
								format(msg, sizeof msg, "Você recebeu seu salário da propriedade \"%s\" : $%d,00 dólares", Propriedades[pStats[i][Propriedade]][PropName], pStats[i][AumentoPropriedade]);
								SendClientMessage(i, COLOR_BLUE, msg);
				    	    }
						}
					}
					TirarDiasAluguel();
					SalarioEntregue = 1;
					RecebendoSalario = 0;
			    	SetTimer("ZerarSalarioEntregue",60000,false);
					MudancaDia();
					for(new i=0; i<MAX_SLOTS; i++){
						if(pStats[i][GanhouLevel] != 0){
							pStats[i][GanhouLevel] = 0;
						}
					}
					SendClientMessageAdmin(COLOR_JUIZ, "[ADMIN] Digite /admincomandos para saber os comandos de administradores.");
					if(DiaJogo < Meses[MesJogo][MesDias]){
	   					DiaJogo++;
	   					if(ValorDia == 0){
							SendClientMessageToAll(COLOR_WHITE, "\"Domingo até que enfim\", dia de ir pra praia curtir o mar, o sol, quem sabe até pescar.");
						}
						else if(ValorDia == 1){
							SendClientMessageToAll(COLOR_WHITE, "Segunda-Feira. É o trabalho vai iniciar, a ressaca de Domingo pode atrapalhar.");
						}
						else if(ValorDia == 2){
							SendClientMessageToAll(COLOR_WHITE, "Terça-Feira mais um dia de trabalho para os grandes trabalhadores de Los Santos.");
						}
						else if(ValorDia == 3){
							SendClientMessageToAll(COLOR_WHITE, "Quarta-Feira dia de um futebolzinho, ir para a boate assistir um strip-tease e... quem sabe? ^^");
						}
						else if(ValorDia == 4){
							SendClientMessageToAll(COLOR_WHITE, "Quinta-Feira dia de ir no restaurante com os amigos se divertir um pouco, claro depois de trabalhar.");
						}
						else if(ValorDia == 5){
							SendClientMessageToAll(COLOR_WHITE, "Sexta-Feira o último dia de trabalho na semana para alguns. Descansar, zoar um pouco, com moderação.");
						}
						else if(ValorDia == 6){
							SendClientMessageToAll(COLOR_WHITE, "Mais um dia se passa em Los Santos, Sábado dia de folga para alguns e trabalho para outros.");
						}
					}
					if(DiaJogo >= Meses[MesJogo][MesDias]){
	   					MesJogo++;
			   			DiaJogo = 1;
						if(MesJogo == 2){
							SendClientMessageToAll(COLOR_WHITE, " ");
							SendClientMessageToAll(COLOR_LIGHT_YELLOW, "|======================== FEVEREIRO ========================|");
							SendClientMessageToAll(COLOR_WHITE, "Chegamos em Fevereiro, mês do Carnaval, \"Olha a cabeleira do Zezé será que ele é será que ele é...\".");
							SendClientMessageToAll(COLOR_WHITE, " ");
						}
	    				else if(MesJogo == 3){
							SendClientMessageToAll(COLOR_WHITE, " ");
							SendClientMessageToAll(COLOR_LIGHT_YELLOW, "|======================== MARÇO ========================|");
							SendClientMessageToAll(COLOR_WHITE, "Março, \"Coelhinho da Páscoa que trazes pra mim? Um ovo, dois ovos...\" Mês da Páscoa em Los Santos, não esqueça de comprar seu ovo.");
							SendClientMessageToAll(COLOR_WHITE, " ");
						}
	    				else if(MesJogo == 4){
							SendClientMessageToAll(COLOR_WHITE, " ");
							SendClientMessageToAll(COLOR_LIGHT_YELLOW, "|======================== ABRIL ========================|");
							SendClientMessageToAll(COLOR_WHITE, "Abril, novo mês em Los Santos, ah... não esqueça 7 de abril, dia Internacional da Saúde, então passe no hospital e se vacine.");
							SendClientMessageToAll(COLOR_WHITE, " ");
						}
	    				else if(MesJogo == 5){
							SendClientMessageToAll(COLOR_WHITE, " ");
							SendClientMessageToAll(COLOR_LIGHT_YELLOW, "|======================== MAIO ========================|");
							SendClientMessageToAll(COLOR_WHITE, "Maio, NOVO Mês, mês da telecomunicação, então não se esqueça, quite sua conta telefônica.");
							SendClientMessageToAll(COLOR_WHITE, " ");
						}
	    				else if(MesJogo == 6){
							SendClientMessageToAll(COLOR_WHITE, " ");
							SendClientMessageToAll(COLOR_LIGHT_YELLOW, "|======================== JUNHO ========================|");
							SendClientMessageToAll(COLOR_WHITE, "Junho, o amor florece no ar..., nesse mês se comemora o Dia dos Namorados, ah não esqueçam de comprar camisinha. ;]");
							SendClientMessageToAll(COLOR_WHITE, " ");
						}
	    				else if(MesJogo == 7){
							SendClientMessageToAll(COLOR_WHITE, " ");
							SendClientMessageToAll(COLOR_LIGHT_YELLOW, "|======================== JULHO ========================|");
							SendClientMessageToAll(COLOR_WHITE, "Julho, novo mês em Los Santos, mas como ninguém estuda, ninguém está de férias. Então.. TRABALHEM! :)");
							SendClientMessageToAll(COLOR_WHITE, " ");
						}
	    				else if(MesJogo == 8){
							SendClientMessageToAll(COLOR_WHITE, " ");
							SendClientMessageToAll(COLOR_LIGHT_YELLOW, "|======================== AGOSTO ========================|");
							SendClientMessageToAll(COLOR_WHITE,  "AAAAgosto, ah... dia 14 de agosto, dia de combate a poluição e não se esqueça, JOGUE O LIXO NO LIXO.");
							SendClientMessageToAll(COLOR_WHITE, " ");
						}
	    				else if(MesJogo == 9){
							SendClientMessageToAll(COLOR_WHITE, " ");
							SendClientMessageToAll(COLOR_LIGHT_YELLOW, "|======================== SETEMEBRO ========================|");
							SendClientMessageToAll(COLOR_WHITE,  "Setembro, mês que se celebra a PAZ, dia 21 de setembro, dia internacional da PAZ. Amar é viver, viver é amar. *-*");
							SendClientMessageToAll(COLOR_WHITE, " ");
						}
	    				else if(MesJogo == 10){
							SendClientMessageToAll(COLOR_WHITE, " ");
							SendClientMessageToAll(COLOR_LIGHT_YELLOW, "|======================== OUTUBRO ========================|");
							SendClientMessageToAll(COLOR_WHITE,  "Outubro, mês em que se celebra o DIA DO MÉDICO, então agradeça o homem que uma vez salvou sua vida.");
							SendClientMessageToAll(COLOR_WHITE,   "E também do servidor público, então aos policiais, e todos que recebem salários do governo, PARABÉNS.");
							SendClientMessageToAll(COLOR_WHITE, " ");
						}
	    				else if(MesJogo == 11){
							SendClientMessageToAll(COLOR_WHITE, " ");
							SendClientMessageToAll(COLOR_LIGHT_YELLOW, "|======================== NOVEMBRO ========================|");
							SendClientMessageToAll(COLOR_WHITE,  "Novembro, mês da proclamação e da criação da Bandeira do Nosso BRASIL |<0>| ! Nada haver com o mode, mais é orgulho nosso ^^.");
							SendClientMessageToAll(COLOR_WHITE, " ");
						}
	    				else if(MesJogo == 12){
							SendClientMessageToAll(COLOR_WHITE, " ");
							SendClientMessageToAll(COLOR_LIGHT_YELLOW, "|======================== DEZEMBRO ========================|");
							SendClientMessageToAll(COLOR_WHITE,  "Dezembro, Mês do amor próximo, da repartição, da luta contra a AIDS, e do NATAL, dia 25 reuna sua família e coma aquele PERU(Loja de Utilidades)! ^^");
							SendClientMessageToAll(COLOR_WHITE, " ");
						}
						else if(MesJogo == 13){
							AnoJogo++;
							MesJogo = 1;
							DiaJogo = 1;
						    SendClientMessageToAll(COLOR_WHITE, " ");
						    SendClientMessageToAll(COLOR_LIGHT_YELLOW, "*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-* ANO NOVO! *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*");
						    SendClientMessageToAll(COLOR_WHITE, "Por aqui se acaba o ano, um ano de muito esforço, alegria e é claro, diversão...");
						    SendClientMessageToAll(COLOR_WHITE, "Porém, se inicia um novo ano, o qual esperamos que seja muito melhor.");
							SendClientMessageToAll(COLOR_WHITE, "Que o ano novo nos traga muita paz, alegria, e, é claro, dinheiro no bolso :P");
							SendClientMessageToAll(COLOR_WHITE, "                             - Equipe Virtual Life RPG -");
							SendClientMessageToAll(COLOR_WHITE, " ");
						}
					}
				}
			}
		}
	}
	for(new i=0; i<MAX_SLOTS; i++){
	    if(IsPlayerConnected(i) && Logado[i] == 1){
	        for(new f = 1; f < sizeof BarFome; f++)
	        {
	            TextDrawHideForPlayer(i, TextFome[f - 1]);
	            TextDrawHideForPlayer(i, BarFome[f]);
	        }
			new gfome = pStats[i][Fome];
			if(gfome <= 1) gfome = 1;
			else if(gfome >= 13) gfome = 13;
			TextDrawShowForPlayer(i, BarFome[gfome]);
			TextDrawShowForPlayer(i, TextFome[gfome - 1]);
	        TextDrawHideForPlayer(i, TextData[0]);
 			TextDrawHideForPlayer(i, TextData[1]);
		    if(GetPlayerWantedLevel(i) == 0) TextDrawShowForPlayer(i, TextData[0]);
			else TextDrawShowForPlayer(i, TextData[1]);
			SetPlayerScore(i, pStats[i][XL]);
			if(JaAvisouHorario == 0){
				JaAvisouHorario = 1;
				SetTimer("ZerarAvisoHorario",60000,false);
				new rand = random(5), rand2 = random(4);
		    	switch(ValorDia){
					case 0:
	 				{
	   					if(HoraJogo == HorarioTrabalho[pStats[i][Prof]][0]){
						    if(HorarioTrabalho[pStats[i][Prof]][0] == HorarioTrabalho[pStats[i][Prof]][1]){
				 				SendClientMessage(i, COLOR_GREEN, "Hoje é seu dia de folga, aproveite!");
							}
							else{
 								if(pStats[i][HistoriaFeita] == 1) {
								 	SendClientMessage(i, Profissoes[pStats[i][Prof]][ProfColor], "Seu trabalho começou... Anda, tá esperando o que?");
									if(pStats[i][Prof] != DESEMPREGADO){
										if(rand2 == 0 || rand2 == 1){
										    pStats[i][VirtualCard]++;
											SendClientMessage(i, COLOR_WHITE, "Sua empresa de trabalho lhe entregou um Virtual Card, útil para você");
											SendClientMessage(i, COLOR_WHITE, "deixar o dinheiro gasto em ônibus por conta dela!");
										}
									}
								}
							}
							PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
						}
						if(HoraJogo == HorarioTrabalho[pStats[i][Prof]][1]){
							Salario(i);
     						SendClientMessage(i, COLOR_GREEN, "[INFO] Seu trabalho acabou, aproveite o resto do dia para descansar!");
							SendClientMessage(i, COLOR_WHITE, " ");
							SendClientMessage(i, COLOR_WHITE, " ");
			   				PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
						}
					}
					case 1:
					{
	  	    			if(HoraJogo == HorarioTrabalho[pStats[i][Prof]][2]){
		    			    if(HorarioTrabalho[pStats[i][Prof]][2] == HorarioTrabalho[pStats[i][Prof]][3]){
			 					SendClientMessage(i, COLOR_GREEN, "Hoje é seu dia de folga, aproveite!");
							}
							else{
							 	SendClientMessage(i, Profissoes[pStats[i][Prof]][ProfColor], "Seu trabalho começou... Anda, tá esperando o que?");
								if(pStats[i][Prof] != DESEMPREGADO){
									if(rand2 == 0 || rand2 == 1){
									    pStats[i][VirtualCard]++;
										SendClientMessage(i, COLOR_WHITE, "Sua empresa de trabalho lhe entregou um Virtual Card, útil para você");
										SendClientMessage(i, COLOR_WHITE, "deixar o dinheiro gasto em ônibus por conta dela!");
									}
								}
							}
						}
						if(HoraJogo == HorarioTrabalho[pStats[i][Prof]][3]){
							if(rand == 1){
								PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
							    SendClientMessage(i, COLOR_GREEN, "Seu trabalho acabou, seu chefe está lhe perguntado se pode fazer HORA EXTRA!");
							    SendClientMessage(i, COLOR_GREEN, "Se não quiser, digite /recusar, mas se quiser, digite /aceitar");
								HoraExtra[i] = 1;
								ParaAceitar[i] = ACEITAR_HORAEXTRA;
								TempoHoraExtra[i] = SetTimerEx("CancelarHoraExtra",50000,0,"d",i);
							} else {
								Salario(i);
	     						SendClientMessage(i, COLOR_GREEN, "[INFO]Seu trabalho acabou, aproveite o resto do dia para descansar!");
								SendClientMessage(i, COLOR_WHITE, " ");
								SendClientMessage(i, COLOR_WHITE, " ");
				   				PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
							}
						}
					}
					case 2:
					{
		    			if(HoraJogo == HorarioTrabalho[pStats[i][Prof]][4]){
		    			    if(HorarioTrabalho[pStats[i][Prof]][4] == HorarioTrabalho[pStats[i][Prof]][5]){
			 					SendClientMessage(i, COLOR_GREEN, "Hoje é seu dia de folga, aproveite!");
							}
							else{
							 	SendClientMessage(i, Profissoes[pStats[i][Prof]][ProfColor], "Seu trabalho começou... Anda, tá esperando o que?");
								if(pStats[i][Prof] != DESEMPREGADO){
									if(rand2 == 0 || rand2 == 1){
	  									pStats[i][VirtualCard]++;
										SendClientMessage(i, COLOR_WHITE, "Sua empresa de trabalho lhe entregou um Virtual Card, útil para você");
										SendClientMessage(i, COLOR_WHITE, "deixar o dinheiro gasto em ônibus por conta dela!");
									}
								}
							}
						}
						if(HoraJogo == HorarioTrabalho[pStats[i][Prof]][5]){
					    	if(rand == 1){
					    	    Salario(i);
	  							PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
							    SendClientMessage(i, COLOR_GREEN, "Seu trabalho acabou, seu chefe está lhe perguntado se pode fazer HORA EXTRA!");
						   	 	SendClientMessage(i, COLOR_GREEN, "Se não quiser, digite /recusar, mas se quiser, digite /aceitar");
	                        	HoraExtra[i] = 1;
	                        	ParaAceitar[i] = ACEITAR_HORAEXTRA;
	                        	TempoHoraExtra[i] = SetTimerEx("CancelarHoraExtra",50000,0,"d",i);
							} else {
								Salario(i);
	     						SendClientMessage(i, COLOR_GREEN, "[INFO] Seu trabalho acabou, aproveite o resto do dia para descansar!");
								SendClientMessage(i, COLOR_WHITE, " ");
								SendClientMessage(i, COLOR_WHITE, " ");
				   				PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
							}
						}
					}
					case 3:
					{
		  			  	if(HoraJogo == HorarioTrabalho[pStats[i][Prof]][6]){
		  			  	    if(HorarioTrabalho[pStats[i][Prof]][6] == HorarioTrabalho[pStats[i][Prof]][7]){
			 					SendClientMessage(i, COLOR_GREEN, "Hoje é seu dia de folga, aproveite!");
							}
							else{
							 	SendClientMessage(i, Profissoes[pStats[i][Prof]][ProfColor], "Seu trabalho começou... Anda, tá esperando o que?");
								if(pStats[i][Prof] != DESEMPREGADO){
									if(rand2 == 0 || rand2 == 1){
										pStats[i][VirtualCard]++;
										SendClientMessage(i, COLOR_WHITE, "Sua empresa de trabalho lhe entregou um Virtual Card, útil para você");
										SendClientMessage(i, COLOR_WHITE, "deixar o dinheiro gasto em ônibus por conta dela!");
									}
								}
							}
						}
						if(HoraJogo == HorarioTrabalho[pStats[i][Prof]][7]){
							if(rand == 1){
								Salario(i);
				  				PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
						    	SendClientMessage(i, COLOR_GREEN, "Seu trabalho acabou, seu chefe está lhe perguntado se pode fazer HORA EXTRA!");
							    SendClientMessage(i, COLOR_GREEN, "Se não quiser, digite /recusar, mas se quiser, digite /aceitar");
	            	            HoraExtra[i] = 1;
	            	            ParaAceitar[i] = ACEITAR_HORAEXTRA;
	                	        TempoHoraExtra[i] = SetTimerEx("CancelarHoraExtra",50000,0,"d",i);
							} else {
								Salario(i);
	     						SendClientMessage(i, COLOR_GREEN, "[INFO] Seu trabalho acabou, aproveite o resto do dia para descansar!");
								SendClientMessage(i, COLOR_WHITE, " ");
								SendClientMessage(i, COLOR_WHITE, " ");
				   				PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
							}
						}
					}
					case 4:
					{
		    		    if(HoraJogo == HorarioTrabalho[pStats[i][Prof]][8]){
		    		        if(HorarioTrabalho[pStats[i][Prof]][8] == HorarioTrabalho[pStats[i][Prof]][9]){
			 					SendClientMessage(i, COLOR_GREEN, "Hoje é seu dia de folga, aproveite!");
							}
							else{
							 	SendClientMessage(i, Profissoes[pStats[i][Prof]][ProfColor], "Seu trabalho começou... Anda, tá esperando o que?");
								if(pStats[i][Prof] != DESEMPREGADO){
									if(rand2 == 0 || rand2 == 1){
										pStats[i][VirtualCard]++;
										SendClientMessage(i, COLOR_WHITE, "Sua empresa de trabalho lhe entregou um Virtual Card, útil para você");
										SendClientMessage(i, COLOR_WHITE, "deixar o dinheiro gasto em ônibus por conta dela!");
									}
								}
							}
						}
						if(HoraJogo == HorarioTrabalho[pStats[i][Prof]][9]){
							if(rand == 1){
							    PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
							    SendClientMessage(i, COLOR_GREEN, "Seu trabalho acabou, seu chefe está lhe perguntado se pode fazer HORA EXTRA!");
							    SendClientMessage(i, COLOR_GREEN, "Se não quiser, digite /recusar, mas se quiser, digite /aceitar");
	                	        HoraExtra[i] = 1;
	                	        ParaAceitar[i] = ACEITAR_HORAEXTRA;
	                	        TempoHoraExtra[i] = SetTimerEx("CancelarHoraExtra",50000,0,"d",i);
							}
							else{
								Salario(i);
	     						SendClientMessage(i, COLOR_GREEN, "[INFO] Seu trabalho acabou, aproveite o resto do dia para descansar!");
								SendClientMessage(i, COLOR_WHITE, " ");
								SendClientMessage(i, COLOR_WHITE, " ");
				   				PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
							}
						}
					}
					case 5:
					{
					    if(HoraJogo == HorarioTrabalho[pStats[i][Prof]][10]){
					        if(HorarioTrabalho[pStats[i][Prof]][10] == HorarioTrabalho[pStats[i][Prof]][11]){
			 					SendClientMessage(i, COLOR_GREEN, "Hoje é seu dia de folga, aproveite!");
							}
							else{
							 	SendClientMessage(i, Profissoes[pStats[i][Prof]][ProfColor], "Seu trabalho começou... Anda, tá esperando o que?");
								if(pStats[i][Prof] != DESEMPREGADO){
									if(rand2 == 0 || rand2 == 1){
										pStats[i][VirtualCard]++;
										SendClientMessage(i, COLOR_WHITE, "Sua empresa de trabalho lhe entregou um Virtual Card, útil para você");
										SendClientMessage(i, COLOR_WHITE, "deixar o dinheiro gasto em ônibus por conta dela!");
									}
								}
							}
						}
						if(HoraJogo == HorarioTrabalho[pStats[i][Prof]][11]){
							if(rand == 1){
							    Salario(i);
							    PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
							    SendClientMessage(i, COLOR_GREEN, "Seu trabalho acabou, seu chefe está lhe perguntado se pode fazer HORA EXTRA!");
						    	SendClientMessage(i, COLOR_GREEN, "Se não quiser, digite /recusar, mas se quiser, digite /aceitar");
	                        	HoraExtra[i] = 1;
	                        	ParaAceitar[i] = ACEITAR_HORAEXTRA;
	                        	TempoHoraExtra[i] = SetTimerEx("CancelarHoraExtra",50000,0,"d",i);
							} else {
								Salario(i);
	     						SendClientMessage(i, COLOR_GREEN, "[INFO] Seu trabalho acabou, aproveite o resto do dia para descansar!");
								SendClientMessage(i, COLOR_WHITE, " ");
								SendClientMessage(i, COLOR_WHITE, " ");
				   				PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
							}
						}
					}
					case 6:
					{
		    			if(HoraJogo == HorarioTrabalho[pStats[i][Prof]][12]){
		    			    if(HorarioTrabalho[pStats[i][Prof]][12] == HorarioTrabalho[pStats[i][Prof]][13]){
			 					SendClientMessage(i, COLOR_GREEN, "Hoje é seu dia de folga, aproveite!");
							}
							else{
						 		SendClientMessage(i, Profissoes[pStats[i][Prof]][ProfColor], "Seu trabalho começou... Anda, tá esperando o que?");
								if(pStats[i][Prof] != DESEMPREGADO){
									if(rand2 == 0 || rand2 == 1){
										pStats[i][VirtualCard]++;
										SendClientMessage(i, COLOR_WHITE, "Sua empresa de trabalho lhe entregou um Virtual Card, útil para você");
										SendClientMessage(i, COLOR_WHITE, "deixar o dinheiro gasto em ônibus por conta dela!");
									}
								}
							}
							PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
						}
						if(HoraJogo == HorarioTrabalho[pStats[i][Prof]][13]){
							Salario(i);
     						SendClientMessage(i, COLOR_GREEN, "[INFO] Seu trabalho acabou, aproveite o resto do dia para descansar!");
							SendClientMessage(i, COLOR_WHITE, " ");
							SendClientMessage(i, COLOR_WHITE, " ");
			   				PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
						}
					}
	  			}
			}
		    if(GetPlayerState(i) == PLAYER_STATE_SPECTATING && TVligada[i] == 1){
			    if(pckStats[PickupEntradaCasa[i]][SemLuz] == 1){
					SendClientMessage(i, COLOR_GRAY, "A TV foi desligada porque a casa está sem luz");
				    DesligarTV(i);
				}
				if(IsPlayerConnected(PlayerSpec[i]))
				{
				    new msg[128];
				    format(msg,sizeof(msg),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Canal: ~w~%d",PlayerSpec[i]);
				    GameTextForPlayer(i,msg,1000,3);
				    SetPlayerInterior(i,GetPlayerInterior(PlayerSpec[i]));
				    if(CameraAtiva[PlayerSpec[i]] == 1){
			    	    SetPlayerCameraPos(i,Filmagem[PlayerSpec[i]][0],Filmagem[PlayerSpec[i]][1],Filmagem[PlayerSpec[i]][2]);
						SetPlayerCameraLookAt(i,Filmagem[PlayerSpec[i]][3],Filmagem[PlayerSpec[i]][4],Filmagem[PlayerSpec[i]][5]);
					}
				    else if(Entrevista[PlayerSpec[i]][1] == 1){
				    	SetPlayerCameraPos(i,CamEntrevista[Entrevista[PlayerSpec[i]][3]][0],CamEntrevista[Entrevista[PlayerSpec[i]][3]][1],CamEntrevista[Entrevista[PlayerSpec[i]][3]][2]);
				    	SetPlayerCameraLookAt(i,CamEntrevista[Entrevista[PlayerSpec[i]][3]][3],CamEntrevista[Entrevista[PlayerSpec[i]][3]][4],CamEntrevista[Entrevista[PlayerSpec[i]][3]][5]);
					}
					else if(Entrevista[PlayerSpec[i]][2] == 1){
					    SetPlayerCameraPos(i,CamEntrevista[PlayerSpec[i]][0],CamEntrevista[PlayerSpec[i]][1],CamEntrevista[PlayerSpec[i]][2]);
					    SetPlayerCameraLookAt(i,CamEntrevista[PlayerSpec[i]][3],CamEntrevista[PlayerSpec[i]][4],CamEntrevista[PlayerSpec[i]][5]);
					}
					else{
		   		 		if(IsPlayerInAnyVehicle(PlayerSpec[i])) PlayerSpectateVehicle(i,GetPlayerVehicleID(PlayerSpec[i]));
						else PlayerSpectatePlayer(i,PlayerSpec[i]);
					}
				}
				else{
			 		DesligarTV(i);
			 		SendClientMessage(i, COLOR_GRAY, "O canal ficou inválido então sua TV foi desligada!");
				}
			}
	        if(IsPlayerConnected(i) && PlayerArea[i] == AreaBalada){
				if(!HaveDJ){
					if(tocando >= 0 && tocando < 7 && sombalada2[i] != 1){
						PlayerPlaySound(i,1088,0.0,0.0,0.0);
						SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
						PlayerPlaySound(i,1062,0.0,0.0,0.0);
						sombalada2[i] = 1;
					}
					if(tocando >= 7 && tocando < 14 && sombalada2[i] != 2){
						PlayerPlaySound(i,1063,0.0,0.0,0.0);
						SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
						PlayerPlaySound(i,1068,0.0,0.0,0.0);
						sombalada2[i] = 2;
					}
					if(tocando >= 14 && tocando < 21 && sombalada2[i] != 3){
	  					PlayerPlaySound(i,1069,0.0,0.0,0.0);
	  					SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
	  					PlayerPlaySound(i,1076,0.0,0.0,0.0);
	  					sombalada2[i] = 3;
	  				}
	  				if(tocando >= 21 && tocando < 28 && sombalada2[i] != 4){
	  					PlayerPlaySound(i,1077,0.0,0.0,0.0);
	  					SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
						PlayerPlaySound(i,1097,0.0,0.0,0.0);
						sombalada2[i] = 4;
	  				}
	  				if(tocando >= 28 && tocando < 35 && sombalada2[i] != 5){
	  					PlayerPlaySound(i,1098,0.0,0.0,0.0);
						SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
	  					PlayerPlaySound(i,1183,0.0,0.0,0.0);
	                    sombalada2[i] = 5;
				    }
				 	if(tocando >= 35 && tocando < 42 && sombalada2[i] != 6){
	  					PlayerPlaySound(i,1084,0.0,0.0,0.0);
	  					SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
	  					PlayerPlaySound(i,1185,0.0,0.0,0.0);
	  					sombalada2[i] = 6;
	  				}
	  				if(tocando >= 42 && tocando <= 49 && sombalada2[i] != 7){
	  					PlayerPlaySound(i,1086,0.0,0.0,0.0);
	  					SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
	  					PlayerPlaySound(i,1187,0.0,0.0,0.0);
	  					sombalada2[i] = 7;
	  				}
				}
				else{
				    if(sombalada2[i] != MusicSelected){
						if(MusicSelected == 1){
						    PlayerPlaySound(i,1088,0.0,0.0,0.0);
							SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
							PlayerPlaySound(i,1062,0.0,0.0,0.0);
						}
						if(MusicSelected == 2){
						    PlayerPlaySound(i,1063,0.0,0.0,0.0);
							SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
							PlayerPlaySound(i,1068,0.0,0.0,0.0);
						}
						if(MusicSelected == 3){
						    PlayerPlaySound(i,1069,0.0,0.0,0.0);
	  						SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
	  						PlayerPlaySound(i,1076,0.0,0.0,0.0);
						}
						if(MusicSelected == 4){
						    PlayerPlaySound(i,1077,0.0,0.0,0.0);
	  						SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
							PlayerPlaySound(i,1097,0.0,0.0,0.0);
						}
						if(MusicSelected == 5){
						    PlayerPlaySound(i,1098,0.0,0.0,0.0);
							SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
	  						PlayerPlaySound(i,1183,0.0,0.0,0.0);
						}
						if(MusicSelected == 6){
						    PlayerPlaySound(i,1084,0.0,0.0,0.0);
	  						SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
	  						PlayerPlaySound(i,1185,0.0,0.0,0.0);
						}
						if(MusicSelected == 7){
						    PlayerPlaySound(i,1086,0.0,0.0,0.0);
	  						SendClientMessage(i, COLOR_GREEN, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
	  						PlayerPlaySound(i,1187,0.0,0.0,0.0);
						}
				        sombalada2[i] = MusicSelected;
				    }
				}
			}
			if(MiniGame[i] == 1 && PLIniciou == 1 && EscolhendoEquipe[i] == 0){
			    new Float:X, Float:Y, Float:Z;
				GetPlayerPos(i, X, Y, Z);
				if(X <= -988.9893 || X >= -265.3752 || Y <= -2491.4412 || Y >= -1845.056){
					if(ForaAreaPL[i] == 0){
						SendClientMessage(i, COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] Volte para a área do evento ou será retirado dele!");
						ForaAreaPL[i] = 1;
						CtExpulsao[i] = 10;
					}
					else if(ForaAreaPL[i] == 1 && CtExpulsao[i] > 0){
					    new msg[128];
					    format(msg,sizeof(msg),"%d",CtExpulsao[i]);
					    SendClientMessage(i, COLOR_LIGHT_RED, msg);
					    CtExpulsao[i]--;
					}
					else if(CtExpulsao[i] == 0){
					    new msg[128];
					    format(msg,sizeof(msg),"[POLÍCIA E LADRÃO] %s foi desclassificado do evento por sair da área!",PlayerName(i));
					    SendClientMessageToAll(COLOR_LIGHT_YELLOW, msg);
					    RetirarPL(i);
					}
				}
				else{
				    CtExpulsao[i] = 10;
				    ForaAreaPL[i] = 0;
				}
			}
		}
	}
}
