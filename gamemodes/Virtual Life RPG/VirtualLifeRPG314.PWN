#include <a_samp>

//Cores
#define COLOR_HIGIENE0              0xFF3D23AA
#define COLOR_HIGIENE1              0x4C8C98AA
#define COLOR_HIGIENE2              0x5CA7B4AA
#define COLOR_HIGIENE3              0x64B8C7AA
#define COLOR_HIGIENE4              0x6BC6D6AA
#define COLOR_HIGIENE5              0x75D8EAAA
#define COLOR_HIGIENE6              0x73E5FAAA
#define COLOR_GRITAR                0xE0EEEEAA
#define COLOR_VERDE2                0x80C76AAA
#define COLOR_AZUL2                 0xA9CDE6AA
#define COLOR_BLACK                 0x050000AA
#define COLOR_TURQUESA       		0x00CED1AA
#define COLOR_GRAD1 		  		0xB4B5B7AA
#define COLOR_VERDE_AQUA            0x20B2AAAA
#define COLOR_AZUL                	0x0099FFAA
#define COLOR_ROSA2                 0xDDA0DDAA
#define COLOR_ORANGE 				0xFF9900AA
#define COLOR_PURPLE 				0x800080AA
#define COLOR_AZULPLUS          	0x4169FFAA
#define COLOR_VERDECLARO       		0x7FFF00AA
#define COLOR_VERDEESCURO           0x336600AA
#define COLOR_UNLOGGED         		0xAAAAAAAA
#define COLOR_PALHA            		0xF0E68CAA
#define COLOR_ROSA             		0xFF00FFAA
#define COLOR_ROSACLARO             0xFF91ECAA
#define COLOR_GREEN 				0x52D94EAA
#define COLOR_GREEN2                0x90FAACAA
#define COLOR_EMERGENCIA       		0xD06050AA
#define COLOR_RED              		0xAA3333AA
#define COLOR_RED2             		0xFF0000AA
#define COLOR_YELLOW           		0xFFFF00AA
#define COLOR_WHITE            		0xFFFFFFAA
#define COLOR_GRAY             		0xE1E2E7AA
#define COLOR_LIGHT_YELLOW          0xFFFFB3FF
#define COLOR_GRAY2                 0x808080FF
#define COLOR_KILLED            	0xB4E4FFAA
#define COLOR_BALADA                0x7FFF00AA
//Cores dos avisos
#define COLOR_AVISO                 0xFFFFFFAA
#define COLOR_TITULO_AVISO          0xF0E68CAA
#define COLOR_INFO_AVISO            0xA9CDE6AA
//Cores do tutorial
#define COLOR_TUTORIAL_TITULO       0xFF0000AA
#define COLOR_TUTORIAL_MENSAGEM     0xFFFFFFAA
#define COLOR_TUTORIAL_AVISO        0xA9CDE6AA
//Cores das profissões
#define COLOR_DESEMPREGADO     		0x666666AA
#define COLOR_BARMAN           		0x8B4513AA
#define COLOR_ASSASSINO        		0xA52A2AAA
#define COLOR_VENDEDOR_DE_CARROS  	0x009900AA
#define COLOR_CORRETOR         		0x8FBC8FAA
#define COLOR_SEGURANÇA        		0x80C76AAA
#define COLOR_MOTORISTA_PARTICULAR 	0x33CCFFAA
#define COLOR_MOTORISTA_DE_ONIBUS 	0xF5F5DCAA
#define COLOR_CAMINHONEIRO    		0xE4E4E4AA
#define COLOR_PESCADOR   	  		0xE9967AAA
#define COLOR_ENTREGADOR_PIZZA 		0xF0E68CAA
#define COLOR_TAXISTA          		0xFFFF00AA
#define COLOR_MOTOTAXI         		0xFFC000AA
#define COLOR_TAXI_AEREO       		0xFFA500AA
#define COLOR_INSTRUTOR	       		0xDC143CFF
#define COLOR_TRAFICANTE       		0x027A82AA
#define COLOR_JORNALISTA      	 	0x89FDF3AA
#define COLOR_PARAMEDICO       		0xF4EED7AA
#define COLOR_ADVOGADO         		0x18585EAA
#define COLOR_COP_MILITAR      		0x0000FFAA
#define COLOR_COP_RODOVIARIO   		0x1F9FBFAA
#define COLOR_COP_SWAT         		0x00C7FFAA
#define COLOR_COP_NARCOTICOS   		0x057ABDAA
#define COLOR_JUIZ             		0x7FFF00AA
#define COLOR_DELEGADO         		0x81694CAA
#define COLOR_LIXEIRO          		0xA9CDE6AA
#define COLOR_TRANSPORTE_DE_VALORES 0x83BFBFAA
#define COLOR_CONTRABANDISTA   		0xFF6347AA
#define COLOR_RECEITA_FEDERAL  		0xB8860BAA
#define COLOR_AGRICULTOR      		0xFFE4C4AA
#define COLOR_ASSALTANTE      		0xFFFFB3FF
#define COLOR_FRENTISTA          	0x8DFFD3AA
#define COLOR_LOCADOR_DE_CARROS 	0x77913AAA
#define COLOR_PEDREIRA         		0xE2E2E2AA
#define COLOR_VENDEDOR_DE_ARMAS    	0x10F441AA
#define COLOR_MECANICO              0x677594FF
#define COLOR_PROSTITUTA            0xFF00FFAA
#define COLOR_LIDER_DE_TRAFICO      0xF7D931FF
#define COLOR_CORRETOR_SEGUROS      0xFF6A6AAA
#define COLOR_EXERCITO              0x8DF299AA
//Cores polícia e ladrão
#define COLOR_POLICIA               0x00C7FF00
#define COLOR_LADRAO                0x05000000
//Profissões
#define DESEMPREGADO          		1
#define BARMAN                		2
#define ASSASSINO                   3
#define VENDEDOR_DE_CARROS    		4
#define CORRETOR              		5
#define SEGURANÇA             		6
#define MOTORISTA_PARTICULAR  		7
#define MOTORISTA_DE_ONIBUS   		8
#define CAMINHONEIRO          		9
#define PESCADOR              		10
#define ENTREGADOR_PIZZA      		11
#define TAXISTA               		12
#define MOTOTAXI              		13
#define TAXI_AEREO            		14
#define INSTRUTOR			  		15
#define TRAFICANTE            		16
#define JORNALISTA            		17
#define PARAMEDICO            		18
#define ADVOGADO              		19
#define COP_MILITAR           		20
#define COP_RODOVIARIO        		21
#define COP_SWAT              		22
#define COP_NARCOTICOS        		23
#define JUIZ                  		24
#define DELEGADO              		25
#define LIXEIRO               		26
#define TRANSPORTE_DE_VALORES 		27
#define CONTRABANDISTA        		28
#define RECEITA_FEDERAL       		29
#define AGRICULTOR            		30
#define ASSALTANTE            		31
#define FRENTISTA             		32
#define LOCADOR_DE_CARROS     		33
#define PEDREIRA              		34
#define VENDEDOR_DE_ARMAS     		35
#define MECANICO              		36
#define PROSTITUTA            		37
#define LIDER_DE_TRAFICO      		38
#define CORRETOR_SEGUROS      		39
#define EXERCITO              		40
//Max string
#define MAX_STRING                  255
//Polícia e Ladrão
#define MinutosPL             		10
//Chat Global
#define CHAT_PROXIMO                1
//Número de slots do servidor
#define SLOTS2 						31
//Carros
#define QTCARS                  	244
//Visão da camera
#define MAX_ZOOM                    4
//Desmanche
#define MAX_DESMANCHEVEICULO		19
//Loteria
#define LoteriaMax 					120000
#define LoteriaMin 					30000
//Preço máximo para vender um veículo
#define MAX_VEHICLE_VALUE 			300000
//dcmd
#define dcmd(%1,%2,%3) if ((strcmp((%3)[1], #%1, true, (%2)) == 0) && ((((%3)[(%2) + 1] == 0) && (dcmd_%1(playerid, "")))||(((%3)[(%2) + 1] == 32) && (dcmd_%1(playerid, (%3)[(%2) + 2]))))) return 1
//Para nunca mais crashar o servidor em caso de caracteres especiais
#define fixchars(%1) for(new charfixloop=0;charfixloop<strlen(%1);charfixloop++)if(%1[charfixloop]<0)%1[charfixloop]+=256
// Caps Lock
#define UpperToLower(%1) for ( new ToLowerChar; ToLowerChar < strlen( %1 ); ToLowerChar ++ ) if ( %1[ ToLowerChar ]> 64 && %1[ ToLowerChar ] < 91 ) %1[ ToLowerChar ] += 32
//Submissões
#define NONE 						0
#define SORVETERIA 					1
#define DROGAS 						2
#define DJ 							3
#define MAX_SUBMISSIONS 			4
//Abastecimentos de bebidas
#define ARestaurante                0
#define ABoate                      1
#define ABar                        2
#define ABalada                     3
#define MAX_ABASTECIMENTOS          4
//Posições inválidas
#define INVALID_POS_X 				3035.1768
#define INVALID_POS_Y 				-3033.6375
#define INVALID_POS_Z 				-0.2664
//Checkpoints
#define NONE 						0
#define CATANDOLATAS 				1
#define LAVANDOLIMOSINE 			2
#define REVISAOLIMO1 				3
#define REVISAOLIMO2 				4
#define CARREGANDOGAS 				5
#define TRANSPORTE_ROUPAS 			6
#define GPSDESTINO 					7
#define NOBAR 						8
#define CONTRABANDOINI 				9
#define CONTRABANDONAVIO 			10
#define CONTRABANDONAVIO2 			11
#define CONTRABANDORAMPA 			12
#define CONTRABANDOFINAL 			13
#define CONTRABANDOCAR1 			14
#define CONTRABANDOCAR2 			15
#define CONTRABANDOCAR3 			16
#define CONTRABANDOARMA1 			17
#define CONTRABANDOARMA2 			18
#define CONTRABANDOARMA3 			19
#define CONTRABANDODROGA 			20
#define CONTRABANDODROGA2 			21
#define CONTRABANDODROGA3 			22
#define CORRETORA_PROPRIEDADES 		23
#define RESTAURANTE 				24
#define LOJA_MUNICOES 				25
#define AUTOESCOLARUA 				26
#define ENTREGANDO_DELEGACIA 		27
#define NACAMA 						28
#define NOSTRIADS 					29
#define ENTREGANDORICK 				30
#define TELHADO 					31
#define SAINDOTELHADO 				32
#define AERO 						33
#define AGENCIA 					34
#define CONVERSA_MOTORISTA 			35
#define PEGAR_PASSAGEM 				36
#define ENTREGASF 					37
#define CARREGAMENTO 				38
#define PERSE 						39
#define ENTREGANDO_DROGAS 			40
#define ENTREGANDO_SORVETE 			41
#define ENTREGANDO_SORVETE2 		42
#define DERBY 						43
#define RASTREAMENTO 				44
#define OBRAS 						45
#define ENTREGA_CC_CAR              46
#define ENTREGANDO_CARRO_MULTA 		47
#define HOSPITAL 					48
#define	CDROGAS 					49
#define CASAJOGADOR                 50
#define ARMAS                       51
#define CATIVEIRO                   52
#define BURGERS                     53
//Race Checkpoints
#define RNONE                       0
#define RACE1                       1
#define RACE1_END                   2
//Convites
#define INVITE_NONE     			0
#define INVITE_FIANCA   			1
#define INVITE_CARRO    			2
#define INVITE_CASA     			3
#define INVITE_CONTRATO 			4
#define INVITE_CONTRATO_SEGURANCA 	5
#define INVITE_HABTERRESTRE 		6
#define INVITE_SOCIO 				7
//Extensões
#define none_extension 				0
#define celular_extension 			1
#define telefone_extension 			2
//Modelos de pickups
#define seta						1318
#define bancoi    					1274
//Negócios
#define MAX_PROPERTIES 				17
#define MAX_PROPERTIE_ID 			16
//Prostituta
#define KEY_UPP 					16
#define KEY_DOWNP 					32
#define KEY_LEFTP 					8192
#define KEY_RIGHTP 					16384
//Skins
#define Loja_invalida 				0
#define Binco 						1
#define SubUrban 					2
#define ProLaps 					3
#define Victim 						4
#define DidierSachs 				5
//Variaveis globais
#define MAX_CASAS                   300
#define MAX_CELL               		100
#define MAX_HOTEL_PLAYERS         	30
#define MAX_SEGURANCAS              20
#define MAX_GANGUES                 10
#define MAX_GANGUE_PLAYERS         	20
#define MAX_PLAYER_VEHICLES         20
#define MAX_JORNAIS                 10

forward Anunciar();
forward XPTText(playerid);
forward EnviandoAnuncio(playerid);
forward Balada();
forward VehicleDamnification();
forward RepararCarroAluguel(playerid,vehicleid,Float:x,Float:y,Float:z,Float:ang);
forward AbastecerCarroAluguel(playerid,vehicleid);
forward Filmando(playerid);
forward Filmando2(playerid);
forward ZerarVariaveis(playerid);
forward LevarJogador(playerid,plid);
forward Relogio();
forward Data();
forward HigieneAll();
forward VelocimetroALL1();
forward VelocimetroALL2();
forward XPTText(playerid);
forward EscovarDentes(playerid);
forward EscovarDenovo(playerid);
forward VerificarDenovo(playerid);
forward RastreandoJogador2(playerid,plid);
forward Curandoo(playerid);
forward Curandoo2(playerid);
forward Velocimetro();
forward VerArmas(playerid,plid);
forward CreatePlayerIcons(playerid);
forward Internando(playerid);
forward ZerarRecebeuMSG(playerid);
forward CancelarContinuacaoPos(playerid);
forward ApplyAnimCrack(playerid);
forward ZerarAcabouMorrer(playerid);
forward TirarSkinLoja(playerid);
forward Dead(playerid);
forward CtDead(playerid);
forward Tutorial(playerid);
forward Tutorial2(playerid);
forward Tutorial3(playerid);
forward Tutorial4(playerid);
forward Tutorial5(playerid);
forward Tutorial6(playerid);
forward Tutorial7(playerid);
forward Tutorial8(playerid);
forward Tutorial9(playerid);
forward Tutorial10(playerid);
forward Tutorial10b(playerid);
forward Tutorial11(playerid);
forward Tutorial12(playerid);
forward Tutorial13(playerid);
forward Tutorial14(playerid);
forward Tutorial15(playerid);
forward Tutorial16(playerid);
forward Tutorial17(playerid);
forward Tutorial18(playerid);
forward Tutorial19(playerid);
forward Tutorial20(playerid);
forward Tutorial21(playerid);
forward Tutorial22(playerid);
forward Tutorial23(playerid);
forward Tutorial24(playerid);
forward RecusarDroga(playerid, plid);
forward VaiIniciar(playerid);
forward GranaInfo();
forward AbastecerArma(playerid);
forward NaoAceitou(playerid,plid);
forward EndPL();
forward RetirarPL(playerid);
forward SetLadraoPL(playerid);
forward SetPolicialPL(playerid);
forward ZerarMultou(playerid);
forward ApplyPlacaForVehicle(vehicleid);
forward ApplyVehicleForPlayer(playerid,vehicleid);
forward ApplyVehicleToInvalidPos(vehicleid);
forward ZerarAcabouAssistir(playerid);
forward ContandoDerby();
forward NaoUsarCard(playerid,playerid2);
forward ConsertandoCarro(playerid,vehicleid);
forward AvisoTempoRestante(playerid);
forward ContagemD();
forward IniciarDerby();
forward VendoVencedor();
forward ValendoDerby();
forward ContangemD(playerid);
forward FimDJ(playerid);
forward SubMissoes();
forward FimCP();
forward FimCC();
forward ComecaEm60();
forward FimInscCC();
forward CancelarDerby(playerid);
forward Cancelar(playerid);
forward PickupHandler(playerid,pickupid);
forward PararWeather(playerid);
forward BIP(playerid);
forward BipDoTelefone(playerid);
forward CaixaMensagem(playerid);
forward StartLogin(playerid);
forward MensagemRegistro(playerid);
forward FimHoraExtra(playerid);
forward CancelarHoraExtra(playerid);
forward AreasTestes(playerid,plid);
forward IniciarTesteLeis(playerid,plid);
forward IniciarTesteLeis2(playerid,plid);
forward IniciarTesteLeis3(playerid,plid);
forward IniciarTesteLeis4(playerid,plid);
forward IniciarTesteLeis5(playerid,plid);
forward IniciarTesteLeis6(playerid,plid);
forward IniciarTesteLeis7(playerid,plid);
forward IniciarTesteLeis8(playerid,plid);
forward IniciarTesteLeis9(playerid,plid);
forward IniciarTesteLeis10(playerid,plid);
forward IniciarTesteLeis11(playerid,plid);
forward IniciarTesteLeis12(playerid,plid);
forward IniciarTesteLeis13(playerid,plid);
forward LeisLidas(playerid,plid);
forward DisfazerAcordo(playerid,plid);
forward AvancoDirecao(playerid,plid);
forward AvancoDirecao2(playerid,plid);
forward AvancoDirecao3(playerid,plid);
forward AvancoDirecao4(playerid,plid);
forward AvancoDirecao5(playerid,plid);
forward AvancoDirecao6(playerid,plid);
forward AvancoMoto(playerid,plid);
forward AvancoMoto2(playerid,plid);
forward AvancoMoto3(playerid,plid);
forward AvancoMoto4(playerid,plid);
forward AvancoMoto5(playerid,plid);
forward AvancoRua(playerid,plid);
forward AvancoRua1(playerid,plid);
forward AvancoRua2(playerid,plid);
forward AvancoRua3(playerid,plid);
forward AvancoRua4(playerid,plid);
forward AvancoRua5(playerid,plid);
forward AplicandoCarteira(playerid,plid);
forward AplicandoCarteira2(playerid,plid);
forward TempoAutoRua(playerid,plid);
forward EstouMicosado(playerid);
forward AumentarHigiene(playerid,pontos);
forward DiminuirHigiene(playerid,pontos);
forward PodeTomar(playerid);
forward LimparAnim(playerid);
forward ZerarPickupJogador(playerid);
forward Cozinhando(playerid,tmp[]);
forward PrendendoJogador(playerid,plid);
forward HistPri1(playerid,plid);
forward HistPri2(playerid,plid);
forward HistPri3(playerid,plid);
forward ConsiderePreso(playerid,plid);
forward LevarVeiculo(playerid);
forward VerificarContaLuz();
forward InstalarAlarmeBasico(playerid);
forward InstalarAlarmeAvancado(playerid);
forward RetirarTelefone(playerid);
forward RetirarTV(playerid);
forward RetirarRadio(playerid);
forward RetirarFogao(playerid);
forward RetirarGeladeira(playerid);
forward ColocarTV(playerid);
forward ColocarRadio(playerid);
forward ColocarFogao(playerid);
forward ColocarGeladeira(playerid);
forward ColocarTelefone(playerid);
forward ComprarTV(playerid);
forward ComprarRadio(playerid);
forward ComprarFogao(playerid);
forward ComprarGeladeira(playerid);
forward ComprarTelefone(playerid);
forward ComprarAlarmeBasico(playerid);
forward ComprarAlarmeAvancado(playerid);
forward TratamentoDrogas(playerid,plid);
forward ImpostoBanco();
forward ZerarAvisoHorario();
forward ZerarVeiculoConsertado(vehicleid);
forward ZerarVeiculoPintado(vehicleid);
forward ZerarCarroAbastecido(vehicleid);
forward ZerarCasaVendida(playerid);
forward ZerarJogadorMultado(playerid);
forward ApplyColorForVehicle(vehicleid);
forward ApplyVehicleToPos(vehicleid);
forward ApplySeguroForVehicle(vehicleid);
forward CarregandoRoupas(playerid);
forward DestroyText(playerid);
forward ComerSobremesa(playerid);
forward ComerComida(playerid);
forward TomarBebida(playerid);
forward ZerarAvisoVelocidade(playerid);
forward TerminarAbrirPortaoAuto();
forward FecharPortaoAutoEscola();
forward ApostasdeCavalos();
forward FomeDesmancheDoencaGarganBebi();
forward SpeedHandlerRadarHigieneLuz();
forward PickeRadar();
forward SavePCVPJGO();
forward FuelDoencaHigiene();
forward AnunciarPropeComu();
forward Bebado(playerid);
forward Intermediaria2();
forward Intermediaria3();
forward Intermediaria4();
forward Intermediaria5();
forward CancelarMulta(playerid);
forward Anunciou(playerid);
forward ZerarResultadoMostrado();
forward ZerarSalarioEntregue();
forward SellHouse(playerid);
forward SaveCarPos(vehicleid,Float:X,Float:Y,Float:Z,Float:Ang);
forward ArrumandoVeiculo(playerid,vehicleid,Float:X,Float:Y,Float:Z,Float:ang);
forward ColocandoPlaca(playerid,vehicleid,Float:X,Float:Y,Float:Z,Float:ang);
forward FimCamuflagem(playerid);
forward CancelarArma(playerid,plid);
forward DestruirPickupGrana(playerid,pickup);
forward FazendoStripTease(playerid);
forward DesarmandoDrogas(playerid);
forward DrogasPlant(playerid);
forward TomarSorvete(playerid);
forward Cobrar(playerid);
forward Cobrando(playerid);
forward AplicarGasosa(playerid,vehicleid,amount);
forward GatesCoordChecker();
forward ApplyTuningForVehicle(vehicleid);
forward AvancoLigacao(plcaller,plcalled);
forward writelog(log[]);
forward Taxi();
forward ATaxi();
forward ColocarNoVeiculoMot(playerid,vehid);
forward MTaxi();
forward Conversa1(playerid);
forward Conversa2(playerid);
forward Conversa3(playerid);
forward Conversa4(playerid);
forward Conversa5(playerid);
forward Conversa6(playerid);
forward Conversa7(playerid);
forward Conversa8(playerid);
forward Conversa9(playerid);
forward Conversa10(playerid);
forward Conversa11(playerid);
forward Conversa12(playerid);
forward Conversa13(playerid);
forward Conversa14(playerid);
forward Conversa15(playerid);
forward Conversa16(playerid);
forward Conversa17(playerid);
forward Conversa3b(playerid);
forward Conversa7b(playerid);
forward Conversa8b(playerid);
forward Conversa12b(playerid);
forward Conversa14b(playerid);
forward ConversaA1(playerid);
forward ConversaA2(playerid);
forward ConversaA3(playerid);
forward ConversaA4(playerid);
forward ConversaA5(playerid);
forward Conversa21(playerid);
forward Conversa22(playerid);
forward Conversa23(playerid);
forward Conversa24(playerid);
forward Conversa25(playerid);
forward Conversa26(playerid);
forward Conversa27(playerid);
forward Conversa28(playerid);
forward Conversa29(playerid);
forward Conversa21b(playerid);
forward Conversa22bb(playerid);
forward Conversa22b(playerid);
forward Conversa23b(playerid);
forward Conversa24b(playerid);
forward Conversa25b(playerid);
forward Conversa26b(playerid);
forward Conversa27b(playerid);
forward Conversa28b(playerid);
forward Conversa29b(playerid);
forward Conversa21c(playerid);
forward Conversa22c(playerid);
forward Conversa23c(playerid);
forward Conversa23cc(playerid);
forward Conversa24c(playerid);
forward Conversa25c(playerid);
forward Conversa26c(playerid);
forward Conversa27c(playerid);
forward Conversa28c(playerid);
forward Conversa29c(playerid);
forward Conversa21d(playerid);
forward Conversa22d(playerid);
forward Conversa23d(playerid);
forward Conversa24d(playerid);
forward Conversa25d(playerid);
forward Conversa25dd(playerid);
forward Conversa26d(playerid);
forward Conversa27d(playerid);
forward Conversa28d(playerid);
forward Conversa29d(playerid);
forward Conversa21e(playerid);
forward ConversaB1(playerid);
forward ConversaB2(playerid);
forward ConversaB3(playerid);
forward ConversaB4(playerid);
forward ConversaB5(playerid);
forward ConversaB6(playerid);
forward ConversaB4b(playerid);
forward ConversaB5b(playerid);
forward ConversaRoupa(playerid);
forward PassarDoenca(playerid);
forward TomandoRemedio1(plid,playerid);
forward TomandoRemedio2(playerid,plid);
forward TomandoRemedio3(playerid,plid);
forward TomandoRemedio4(playerid,plid);
forward TomandoInjecao(plid,playerid);
forward FazendoEfeito(plid);
forward SemCamisinha(playerid);
forward AidsPeguei(playerid);
forward JaEra(playerid,plid);
forward AnimTransa1(playerid,plid);
forward AnimTransa2(playerid,plid);
forward AnimTransa3(playerid,plid);
forward AnimTransa4(playerid,plid);
forward AnimTransa5(playerid,plid);
forward AnimTransa6(playerid,plid);
forward LimoLimpa(playerid);
forward LavandoLimosine(playerid);
forward ChecandoLimo(playerid);
forward ChecagemDeMotor(playerid);
forward Pescando(playerid);
forward Fazenda(playerid);
forward LeiteA(playerid);
forward Prostituir(playerid);
forward Strip(playerid);
forward Strip3(playerid);
forward Strip4(playerid);
forward CarregamentoGas(playerid);
forward CarregamentoGeral(playerid);
forward EnchendoCarroForte(playerid);
forward ChecandoDrogas(playerid);
forward PlayerPlaySoundEx(playerid,soundid);
forward minrand(min, max);
forward LogarPlayer(playerid);
forward GetClosestHospital(playerid);
forward Tempo();
forward Timers();
forward Areas();
forward GetPlayerDistanceToPoint(playerid,Float:x,Float:y);
forward InicioTribunal(plid,plid2,playerid);
forward InicioTribunal2(plid,plid2,playerid);
forward Veredicto(playerid);
forward Veredicto2(playerid);
forward Assalto(playerid);
forward AssaltandoBanco(playerid);
forward Roubo(playerid);
forward open(playerid);
forward LoteriaComeco();
forward IsStringAName(string[]);
forward TempoAlugando(playerid);
forward Desmanche(playerid);
forward VoteKickTimer();
forward StreamTimer();
forward updatezones();
forward GetPlayerZone(playerid);
forward ClearVote(kickedid);
forward Radar();
forward SentiuFaltaDe2(playerid,plid);
forward SentiuFaltaDe(playerid,plid);
forward JaEraPraTaNoCativeiro(playerid,plid);
forward LevandoProCativeiro(playerid,plid);
forward LigandoPolicia(playerid);
forward ContrabandoNavio();
forward ContrabandoSpawnCar(playerid);
forward Comeu(plid,playerid);
forward OpenGate(gateid);
forward CloseGate(gateid);
forward OpenPortao(objectid);
forward ClosePortao(objectid);
forward TerminarCarregamento(playerid);
forward TerminarCancelamento(playerid);
forward EntregarGrana(playerid);
forward SetarPosicaoDoVeiculo(vehid,Float:X,Float:Y,Float:Z,Float:ang);
forward AcaoEspecial(playerid,actionid);
forward ZerarAnuncioPrevisao();
forward ConfiscarArmas(playerid);
forward ChecandoContrabandoCar(playerid);
forward DesligarTV(playerid);
forward AnteriorCanal(playerid);
forward ProximoCanal(playerid);
forward SetCar(modelid, Float:X, Float:Y, Float:Z, Float:ang, Cor1, Cor2,e);
forward CPD_CPHandler();
forward Denovo(playerid);
forward ParouDeMijar(playerid);
forward PararBanho(playerid);
forward set(dest[],source[]);
public AcaoEspecial(playerid,actionid) SetPlayerSpecialAction(playerid,actionid);
public SetarPosicaoDoVeiculo(vehid,Float:X,Float:Y,Float:Z,Float:ang){
	SetVehiclePos(vehid,X,Y,Z);
	SetVehicleZAngle(vehid,ang);
}

public ColocarNoVeiculoMot(playerid,vehid) PutPlayerInVehicle(playerid,vehid,0);

//#define dcmd(%1,%2,%3) if ((strcmp(%3, "/%1", true, %2+1) == 0)&&(((%3[%2+1]==0)&&(dcmd_%1(playerid,"")))||((%3[%2+1]==32)&&(dcmd_%1(playerid,%3[%2+2]))))) return 1
new GangColors[] = {
0x00000000,//Cor inválida
0x00CED1AA,//Turquesa
0xB4B5B7AA,//Grad1
0x20B2AAAA,//Verde aqua
0x0099FFAA,//Azul
0xFF9900AA,//Orange
0x800080AA,//Purple
0x336600AA,//Verde escuro
0xF0E68CAA,//Palha
0x52D94EAA,//Green
0xD06050AA,//Emergencia
0xAA3333AA,//Red
0xFF0000AA,//Red2
0xFFFF00AA,//Yellow
0xFFFFFFAA,//White
0xAFAFAFAA,//Gray
0xFFFFB3FF,//Light Yellow
0x808080FF,//Gray2
0xB4E4FFAA,//Killed
0xE4E4E4AA,//Caminhoneiro
0xE9967AAA,//Pescador
0x89FDF3AA,//Jornalista
0xF4EED7AA,//Paramédico
0x18585EAA,//Advogado
0x7FFF00AA,//Juiz
0xA9CDE6AA,//Lixeiro
0x83BFBFAA,//Transporte de Valores
0xFF6347AA,//Contrabandista
0xFFE4C4AA,//Agricultor
0x8DFFD3AA,//Frentista
0x677594FF,//Mecânico
0xFF6A6AAA,//Corretor de Seguros
};
//PLAYERS
enum PlayerStats {
Senha[256],
GangueNome[256],
TituloJornal[256],
ContinuarPos,
Gangue,
Jornal,
Prof,
PastaDental,
EscovaDental,
Dinheiro,
Banco,
Skin,
Respeito,
Galao,
Divida,
Emprestimo,
HistoriaFeita,
XL,
ExPoints,
NM,
Culinaria,
Wanted,
Preso,
MotivoPrisao,
Passaporte,
Porte,
HabNautica,
HabAerea,
HabTerrestre,
Phone,
Agenda,
PhoneNumb,
CreditosCell,
CaixaPostal,
Doenca,
Micose,
Aids,
Higiene,
Seguro,
Pesca,
Latas,
Iscas,
LatasNecessarias,
Camisinha,
Alcool,
DosesMaconha,
DosesHeroina,
DosesCocaina,
ChaveMestra,
VirtualCard,
CofreCell,
Vacina,
VacinaDuracao,
Casa,
ValorCasa,
PickupCasa,
VendendoCasa,
NSegurancas,
JaContratado,
LastVeh,
Matou,
Morreu,
WeaponSlot0,
WeaponSlot0Ammo,
WeaponSlot1,
WeaponSlot1Ammo,
WeaponSlot2,
WeaponSlot2Ammo,
WeaponSlot3,
WeaponSlot3Ammo,
WeaponSlot4,
WeaponSlot4Ammo,
WeaponSlot5,
WeaponSlot5Ammo,
WeaponSlot6,
WeaponSlot6Ammo,
WeaponSlot7,
WeaponSlot7Ammo,
WeaponSlot8,
WeaponSlot8Ammo,
WeaponSlot9,
WeaponSlot9Ammo,
WeaponSlot10,
WeaponSlot10Ammo,
WeaponSlot11,
WeaponSlot11Ammo,
WeaponSlot12,
WeaponSlot12Ammo,
AumentoPropriedade,
VendendoCasas,
Banido,
MSGBIP[256],
DonoCasaAlugada[MAX_PLAYER_NAME],
LocouCasa,
DiasDeAluguel,
DiasAluguel,
LocandoCasa,
ValorAluguel,
Peixe,
VicioDrogas,
HistoriaSelecionada,
VCell,
GCell,
ValorCabeca,
Sanduiche,
Frango,
Salada,
Pizza,
Refrigerante,
Suco,
Carne,
Strogonoff,
Camarao,
Linguica,
ConquistouTerritorio,
SorveteChocolate,
SorveteNapolitano,
SorveteFlocos,
SeguroCasa,
Remedios,
DosesRemed,
Banheiro,
ConvidadoCasa,
DonoCasaConvidada[MAX_PLAYER_NAME],
QR,
ABasico,
AAvancado,
PFogao,
PTV,
PRadio,
PGeladeira,
PTelefone,
PTelefoneNumb,
PInvestimento,
Hotel,
DetectadoMorte,
BancoTrabalho,
BancoResidencia,
BancoEmpresa,
Float:Vida,
Float:Colete,
Float:SpawnPosX,
Float:SpawnPosY,
Float:SpawnPosZ,
Float:SpawnPosAng,
Float:LastPosX,
Float:LastPosY,
Float:LastPosZ
}
new GetSegurancas[SLOTS2][MAX_SEGURANCAS][MAX_PLAYER_NAME];
new GetSegurancasValor[SLOTS2][MAX_SEGURANCAS];
new GetVehicles[SLOTS2][MAX_PLAYER_VEHICLES];
new pStats[SLOTS2][PlayerStats];
//VEÍCULOS
enum VehicleStats {
VDono[MAX_PLAYER_NAME],
VPlaca[8],
VChave[MAX_PLAYER_NAME],
VEscondido,
VAlarme,
AlertadoMulta,
gasolina,
Confiscado,
Dividas,
TemAlarme,
Vendendo,
PrecoVenda,
VSeguro,
Color1,
Color2,
Fume,
Paintjob,
HavePos,
Float:CarPosX,
Float:CarPosY,
Float:CarPosZ,
Float:CarPosAng,
Tuning[18]
}
new vStats[MAX_VEHICLES][VehicleStats];
//CASAS
enum PickupStats {
PickupDono[MAX_PLAYER_NAME],
Trancada,
SemTelefone,
ContaTelefone,
SemLuz,
ContaLuz,
TV,
Radio,
Geladeira,
Fogao,
Alarme,
CofreCelular,
Telefone,
TelefoneNumb,
Int,
MaconhaCofre,
HeroinaCofre,
CocainaCofre,
DinheiroCofre,
CorretorVenda[MAX_PLAYER_NAME],
Vendendo,
VendendoValor,
Float:pX,
Float:pY,
Float:pZ,
Chave[MAX_PLAYER_NAME],
SenhaCofre[256],
ArmasCofre[13],
ArmasAmmoCofre[13],
FrangoGeladeira,
PeixeGeladeira,
SaladaGeladeira,
PizzaGeladeira,
RefriGeladeira,
SucoGeladeira,
CarneGeladeira,
StrogonoffGeladeira,
CamaraoGeladeira,
LinguicaGeladeira
}
new pckStats[MAX_CASAS][PickupStats];
//PROPRIEDADES
enum PropertieStats {
Dono1[MAX_PLAYER_NAME],
Dono2[MAX_PLAYER_NAME],
Trabalhador1[MAX_PLAYER_NAME],
Trabalhador2[MAX_PLAYER_NAME],
Trabalhador3[MAX_PLAYER_NAME],
Trabalhador4[MAX_PLAYER_NAME],
Trabalhador5[MAX_PLAYER_NAME],
Trabalhador6[MAX_PLAYER_NAME],
Trabalhador7[MAX_PLAYER_NAME],
Socio1[MAX_PLAYER_NAME],
Socio2[MAX_PLAYER_NAME],
Socio3[MAX_PLAYER_NAME],
Lucro,
Prejuizo,
Investimento,
SemanaPassada,
SemanaRetrasada
}
new propStats[MAX_PROPERTIES][PropertieStats];
//JORNAL
enum JornalStats {
Autor[MAX_PLAYER_NAME],
CEmpresas1[126],
CEmpresas2[126],
CEmpresas3[126],
CHomicidios1[126],
CHomicidios2[126],
CHomicidios3[126],
CEsporte1[126],
CEsporte2[126],
CEsporte3[126],
CMercadorias1[126],
CMercadorias2[126],
CMercadorias3[126],
COutros1[126],
COutros2[126],
COutros3[126]
}
new LastJN;
new Jornais[MAX_JORNAIS][256];
new jStats[MAX_JORNAIS][JornalStats];
//GANGUES
enum GangueStats {
GangDono[MAX_PLAYER_NAME],
GangType,
GangMembros,
GangPontos,
GangColor,
SkinSlot[4]
}
new LastGNG;
new Gangues[MAX_GANGUES][256];
new MembersGang[MAX_GANGUES][MAX_GANGUE_PLAYERS][MAX_PLAYER_NAME];
new gStats[MAX_GANGUES][GangueStats];
//HOTÉIS
new HotelLastP;
new PlayersInHotel[MAX_HOTEL_PLAYERS][MAX_PLAYER_NAME];
//TEXTDRAWS
new Text:FundoHigiene;
new Text:BarraHigiene[13];
new Text:TextVL;
new Text:TextHora[SLOTS2];
new Text:TextData[SLOTS2];
new Text:XPT[SLOTS2];
new Text:tdAero;
new Text:tdEsconderijo;
new Text:tdChaveiro;
new Text:tdMorro;
new Text:tdCOEVL;
new Text:tdECTVL;
new Text:tdBanheiro;
new Text:tdBalada;
new Text:tdLCavalos;
new Text:tdLoteria;
new Text:tdCustomizacao;
new Text:tdDelegacia;
new Text:tdDesmanche;
new Text:tdEntretenimentos;
new Text:Bemvindo;
new Text:Bemvindo2;
new Text:Bemvindo3;
new Text:Bemvindo4;
new Text:tdBanco;
new Text:tdHotel;
new Text:Posto;
new Text:Hospital;
new Text:tdPesca;
new Text:tdCoopPesca;
new Text:tdAreaCarga;
new Text:tdPlant;
new Text:tdLeite;
new Text:tdColheita;
new Text:tdForte;
new Text:tdPdCarga;
new Text:tdConstrucao;
new Text:td247;
new Text:tdLixao;
new Text:tdStrip;
new Text:tdPizzaria;
new Text:tdSorveteria;
new Text:tdLocadora;
new Text:tdBar;
//New velo
enum SavePlayerPosEnum {
Float:LastX,
Float:LastY,
Float:LastZ
}
//Map Icons
enum MIInfo {
Float:miX,
Float:miY,
Float:miZ,
miModel
}
new SavePlayerPos[SLOTS2][SavePlayerPosEnum];
//Vicio de alcool/drogas
new TempoVicio[SLOTS2];
//Areas
new PescaArea;
new InstrutorArea;
new ProstitutaArea;
new TaxiArea;
new DesmancheArea;
new SorveteriaArea;
new PoliciaLadraoArea;
new EquipeAzul;
new EquipeLaranja;
//Outros
new VerOutrosAvisos = 0;
new PassarFomeGrit  = 0;
new FuelDoencaHigi = 0;
//MapIcons
new Count=0;
new ShowedForPlayer[SLOTS2];
//CTC
new CTCCapturado[MAX_VEHICLES];
new EquipePontos[3];
new EquipeCC[SLOTS2];
new CarrosCC[20];
new Reboque[24];
new CCAberto;
new CaptureCAberto;
new AgoraEstouNoCC[SLOTS2] = 0;
new EstouNoCC[SLOTS2] = 0;
//Loja de roupas
new InVictim[SLOTS2] = 0;
new InSubUrban[SLOTS2] = 0;
new InBinco[SLOTS2] = 0;
new InProLaps[SLOTS2] = 0;
new InDidierSachs[SLOTS2] = 0;
//Motorista de ônibus
new TimerCard[SLOTS2] = 0;
new PropostaCard[SLOTS2] = 0;
new TerminaisAtivados[SLOTS2] = 0;
//Policia e Ladrao
new CtPL2;
new CtPL;
new TimerPL;
new CtExpulsao[SLOTS2];
new ForaAreaPL[SLOTS2];
new QtCapturados;
new EscolhendoEquipe[SLOTS2] = 0;
new Capturado[SLOTS2] = 0;
new NoPL[SLOTS2] = 0;
new Equipe[SLOTS2] = 0;
new PLIniciou;
new AreaCopPL[SLOTS2] = 0;
//Rastreamento
new Rastreador[SLOTS2];
new Rastreando[SLOTS2] = 0;
new VeiculoRastreando[SLOTS2];
new Rastreador2[SLOTS2];
new Rastreado[SLOTS2] = 0;
//Gangues
new GangInviteFile[SLOTS2][MAX_STRING];
new GangInviteNome[SLOTS2][MAX_STRING];
new GangInviteID[SLOTS2];
new GangInvite[SLOTS2] = 0;
//Corrida
new rcp[SLOTS2] = 0;
new RaceCheckpointStatus[SLOTS2];
new PosicaoRace1[6];
new positionname[6][MAX_STRING];
new lastposition;
//Mortes
new Acusar[SLOTS2] = 0;
new PlayerKiller[SLOTS2];
new PlayerDeath[SLOTS2];
new Reason[SLOTS2];
//Anuncio
new AnuncioMsg[][] = {
"             ~b~V",
"            ~b~Vi",
"           ~b~Vir",
"          ~b~Virt",
"         ~b~Virtu",
"        ~b~Virtua",
"       ~b~Virtual",
"      ~b~Virtual",
"     ~b~Virtual ~r~L",
"    ~b~Virtual ~r~L~w~i",
"   ~b~Virtual ~r~L~w~i~r~f",
"  ~b~Virtual ~r~L~w~i~r~f~w~e",
" ~b~Virtual ~r~L~w~i~r~f~w~e",
"~b~Virtual ~r~L~w~i~r~f~w~e ~y~R",
"~b~irtual ~r~L~w~i~r~f~w~e ~y~R~b~P",
"~b~rtual ~r~L~w~i~r~f~w~e ~y~R~b~P~g~G",
"~b~tual ~r~L~w~i~r~f~w~e ~y~R~b~P~g~G~w~,",
"~b~ual ~r~L~w~i~r~f~w~e ~y~R~b~P~g~G~w~,",
"~b~al ~r~L~w~i~r~f~w~e ~y~R~b~P~g~G~w~, m",
"~b~l ~r~L~w~i~r~f~w~e ~y~R~b~P~g~G~w~, ma",
" ~r~L~w~i~r~f~w~e ~y~R~b~P~g~G~w~, mai",
"~r~L~w~i~r~f~w~e ~y~R~b~P~g~G~w~, mais",
"~w~i~r~f~w~e ~y~R~b~P~g~G~w~, mais q",
"~r~f~w~e ~y~R~b~P~g~G~w~, mais qu",
"~w~e ~y~R~b~P~g~G~w~, mais que",
" ~y~R~b~P~g~G~w~, mais que",
"~y~R~b~P~g~G~w~, mais que u",
"~b~P~g~G~w~, mais que um",
"~g~G~w~, mais que um",
"~w~, mais que um ~y~R",
"~w~ mais que um ~y~R~b~P",
"~w~mais que um ~y~R~b~P~g~G",
"~w~ais que um ~y~R~b~P~g~G~w~,",
"~w~is que um ~y~R~b~P~g~G~w~, U",
"~w~s que um ~y~R~b~P~g~G~w~, UM",
"~w~ que um ~y~R~b~P~g~G~w~, UMA",
"~w~que um ~y~R~b~P~g~G~w~, UMA",
"~w~ue um ~y~R~b~P~g~G~w~, UMA V",
"~w~e um ~y~R~b~P~g~G~w~, UMA VI",
"~w~ um ~y~R~b~P~g~G~w~, UMA VID",
"~w~um ~y~R~b~P~g~G~w~, UMA VIDA",
"~w~m ~y~R~b~P~g~G~w~, UMA VIDA,",
" ~y~R~b~P~g~G~w~, UMA VIDA,",
"~y~R~b~P~g~G~w~, UMA VIDA, d",
"~y~R~b~P~g~G~w~, UMA VIDA, di",
"~b~P~g~G~w~, UMA VIDA, dig",
"~g~G~w~, UMA VIDA, digi",
"~w~, UMA VIDA, digit",
"~w~ UMA VIDA, digite",
"~w~UMA VIDA, digite",
"~w~MA VIDA, digite /",
"~w~A VIDA, digite /n",
"~w~ VIDA, digite /no",
"~w~VIDA, digite /nov",
"~w~IDA, digite /novi",
"~w~DA, digite /novid",
"~w~A, digite /novida",
"~w~, digite /novidad",
"~w~ digite /novidade",
"~w~digite /novidades",
"~w~igite /novidades,",
"~w~gite /novidades,",
"~w~ite /novidades, /",
"~w~te /novidades, /r",
"~w~e /novidades, /rp",
"~w~ /novidades, /rpg",
"~w~/novidades, /rpgl",
"~w~novidades, /rpgli",
"~w~ovidades, /rpglif",
"~w~vidades, /rpglife",
"~w~idades, /rpglife",
"~w~dades, /rpglife /",
"~w~ades, /rpglife /s",
"~w~des, /rpglife /si",
"~w~es, /rpglife /sis",
"~w~s, /rpglife /sist",
"~w~, /rpglife /siste",
"~w~ /rpglife /sistem",
"~w~/rpglife /sistema",
"~w~rpglife /sistemas",
"~w~pglife /sistemas",
"~w~glife /sistemas e",
"~w~life /sistemas e",
"~w~ife /sistemas e d",
"~w~fe /sistemas e de",
"~w~e /sistemas e des",
"~w~ /sistemas e desc",
"~w~/sistemas e descu",
"~w~sistemas e descub",
"~w~istemas e descubr",
"~w~stemas e descubra",
"~w~temas e descubra",
"~w~emas e descubra p",
"~w~mas e descubra po",
"~w~as e descubra por",
"~w~s e descubra porq",
"~w~ e descubra porqu",
"~w~e descubra porque",
"~w~ descubra porque",
"~w~descubra porque e",
"~w~escubra porque el",
"~w~scubra porque ele",
"~w~cubra porque ele",
"~w~ubra porque ele ",
"~w~bra porque ele ",
"~w~ra porque ele  u",
"~w~a porque ele  um",
"~w~ porque ele  um",
"~w~porque ele  um",
"~w~orque ele  um d",
"~w~rque ele  um do",
"~w~que ele  um dos",
"~w~ue ele  um dos",
"~w~e ele  um dos m",
"~w~ ele  um dos me",
"~w~ele  um dos mel",
"~w~le  um dos melh",
"~w~e  um dos melho",
"~w~  um dos melhor",
"~w~ um dos melhore",
"~w~ um dos melhores",
"~w~um dos melhores!"
};
new ParteAnuncio[SLOTS2] = 0;
new TempoAnuncio[SLOTS2];
//---
new MassagemCardiaca[SLOTS2] = 0;
new InVehicle[SLOTS2] = 0;
new LastVehicleHealth[SLOTS2] = 0;
new CarPrice[8];
new PassouTerminais[SLOTS2] = 0;
new BankOpc[SLOTS2] = 0;
new Zoom[SLOTS2];
new CameraAtiva[SLOTS2] = 0;
new Float:Filmagem[SLOTS2][6];
new TempoFilmando[SLOTS2];
new TempoFilmando2[SLOTS2];
new Float:CamEntrevista[SLOTS2][6];
new Entrevista[SLOTS2][5];
new LastCasa;
new PodeAlgemar[SLOTS2][SLOTS2];
new EntregandoPrisioneiro[SLOTS2] = 0;
new TimerLevando[SLOTS2];
new ExperimentandoSkin[SLOTS2];
new LevandoJogador[SLOTS2] = 0;
new GetCopCars[SLOTS2];
new GetPlayerCars[SLOTS2];
new Algemado[SLOTS2] = 0;
new Algemou[SLOTS2] = 0;
new AlgemaInfo[SLOTS2][2];
new CelularesNum[MAX_CELL][MAX_PLAYER_NAME];
new MoneyGive[SLOTS2];
new HourTimer[SLOTS2];
new XPTTimer[SLOTS2];
new EscoveiDentes[SLOTS2] = 0;
new ColocouPasta[SLOTS2] = 0;
new CarregouArmas[SLOTS2] = 0;
new PedidoRastreador[SLOTS2] = 0;
new ParteTutorial[SLOTS2] = 0;
new TimerTuto[SLOTS2];
new Float:AnteriorPos[SLOTS2][3];
new UpdateSeconds;
new Verificou[SLOTS2] = 0;
new CustoAluguel[SLOTS2] = 0;
new DiasSelecionados[SLOTS2];
new PickupBurgerShotSelect[SLOTS2];
new PickupUtilidadesSelect[SLOTS2];
new PickupAmmuSelect[SLOTS2];
new PedidoRastreador2[SLOTS2] = 0;
new TempoRastreamento[SLOTS2];
new JogadorRastreamento[SLOTS2];
new RastreandoJogador[SLOTS2] = 0;
new FazendoTesteRua[SLOTS2] = 0;
new InstrutorRua[SLOTS2];
new FiscalArmas[SLOTS2];
new FiscalizandoArmas[SLOTS2] = 0;
new Curandome[SLOTS2] = 0;
new	SubindoVida[SLOTS2] = 0;
new TempoInternando[SLOTS2];
new Float:PosHosp[SLOTS2][3];
new Mudo[SLOTS2] = 0;
new QtDrog[SLOTS2] = 0;
new RecebeuMSG[SLOTS2] = 0;
new OfertaSeguroV[SLOTS2] = 0;
new VehSeguro[SLOTS2];
new TimerContinuacaoPos[SLOTS2];
new AreaAero[SLOTS2] = 0;
new Morrendo[SLOTS2] = 0;
new Morreu2[SLOTS2] = 0;
new TimerDeath[SLOTS2];
new AcabouMorrer[SLOTS2] = 0;
new Float:DeadPos[SLOTS2][3];
new CtgDead[SLOTS2] = 0;
new AreaEsconderijo[SLOTS2] = 0;
new AreaEntretenimentos[SLOTS2] = 0;
new PropostaMoradia[SLOTS2] = 0;
new DonoPMoradia[SLOTS2];
new AcabouAssistirTV[SLOTS2] = 0;
new NaoMostrandoData[SLOTS2] = 0;
new NaoMostrandoHora[SLOTS2] = 0;
new UsingChaveMestra[SLOTS2][MAX_VEHICLES];
new PChaveMestra[SLOTS2] = 0;
new JaDestruido[MAX_VEHICLES] = 0;
new CPAtivado[SLOTS2] = 0;
new ComDocs[SLOTS2] = 0;
new EntregouDocs[SLOTS2] = 0;
new ReceiveDocs[SLOTS2];
new GiveDocs[SLOTS2];
new TimerConserto[SLOTS2];
new DinheiroConserto[SLOTS2] = 0;
new PropostaConserto[SLOTS2] = 0;
new VeiculoConserto[SLOTS2];
new TempoPrisaoFaltado[SLOTS2] = 0;
new extensao[SLOTS2] = 0;
new PickupCaller[MAX_CASAS];
new Atendente[MAX_CASAS];
new TelefoneTocando[MAX_CASAS] = 0;
new TellUsing[MAX_CASAS];
new confirmarprof[SLOTS2] = 0;
new profselection[SLOTS2] = 0;
new FumeLigado[SLOTS2] = 0;
new TimerDJ[SLOTS2];
new HaveDJ;
new MusicSelected;
new QtEntregasSorvetes[SLOTS2] = 0;
new QtEntregasDrogas[SLOTS2] = 0;
new AreaMorro[SLOTS2] = 0;
new SubMissaoAtiva[MAX_SUBMISSIONS] = 0;
new SM[SLOTS2] = 0;
new Perseguido[SLOTS2];
new CarroForagido[MAX_VEHICLES];
new ProcuradoRCarro[SLOTS2];
new AreaCOEVL[SLOTS2] = 0;
new AreaECTVL[SLOTS2] = 0;
new Float:GetPlayerPickupPos[SLOTS2][3];
new CaixaPostal2[SLOTS2] = 0;
new RecebedorMensagem[SLOTS2][MAX_STRING];
new TempoCaixaMensagem[SLOTS2][2];
new QtCars;
new TimerLogin[SLOTS2];
new NaoLogar[SLOTS2] = 0;
new CarroEntrega[SLOTS2] = 0;
new FazendoHoraExtra[SLOTS2] = 0;
new TempoHoraExtra[SLOTS2];
new TempoHoraExtra2[SLOTS2];
new HoraExtra[SLOTS2] = 0;
new AntMoney[SLOTS2] = 0;
new ComecouCLoteria;
new PedindoDemissao[SLOTS2] = 0;
new JaPodeTomarRemed[SLOTS2] = 0;
new Gritos[SLOTS2] = 0;
new AreaCofre[SLOTS2] = 0;
new AlimentoCozinhando[SLOTS2] = 0;
new GetPickup[SLOTS2] = 0;
new GetPickup2[SLOTS2] = 0;
new Frangos[SLOTS2] = 0;
new Peixes[SLOTS2] = 0;
new Pizzas[SLOTS2] = 0;
new Carnes[SLOTS2] = 0;
new Strogonoffes[SLOTS2] = 0;
new Camaroes[SLOTS2] = 0;
new Linguicas[SLOTS2] = 0;
new TempoCozinhando[SLOTS2];
new TempoPreso[SLOTS2];
new SeEntregando[SLOTS2] = 0;
new	Revistando[SLOTS2] = 0;
new	Revistado[SLOTS2] = 0;
new	AindaNaoAceitou[SLOTS2] = 0;
new OficialSolicitou[SLOTS2];
new PolicialApreendendo[SLOTS2];
new vehiculozao[SLOTS2] = 0;
new weatherprevisao;
new PickupEntradaCasa[SLOTS2] = 0;
new Float:EntradaCasa[SLOTS2][3];
new NaCasa[SLOTS2] = 0;
new Convidando[SLOTS2];
new QtConvidados[SLOTS2];
new Convidado[SLOTS2][SLOTS2];
new CurandoDrogas[SLOTS2] = 0;
new TimerCura[SLOTS2];
new SlotSelection[SLOTS2] = 0;
new Text:TextMessage[SLOTS2];
new TextoEnviado[SLOTS2] = 0;
new ComLeite[SLOTS2] = 0;
new NoRestaurante[SLOTS2] = 0;
new NoRestaurante2[SLOTS2] = 0;
new avisovelo[SLOTS2] = 0;
new VendedorProduto[SLOTS2];
new TimerBebida[SLOTS2];
new Produto[SLOTS2] = 0;
new TeorDoProduto[SLOTS2] = 0;
new ValorDoProduto[SLOTS2] = 0;
new OfertaDada[SLOTS2] = 0;
new TimerComidas[SLOTS2];
new TemJogador;
new Pressionado;
new cavalin[2];
new ValorApostado[SLOTS2] = 0;
new CavaloApostado[SLOTS2] = 0;
new bool:CPlayerDentro[SLOTS2];
new SegurancaContratado[SLOTS2] = 0;
new Scontratador[SLOTS2];
new Svaloroferecido[SLOTS2];
new MostrouResultado;
new PrevisaoAnunciada;
new SalarioEntregue;
new JaAvisouHorario;
new JaAnunciou[SLOTS2] = 0;
new Proposteiro[SLOTS2] = 0;
new JornalistaAvisado[SLOTS2] = 0;
new iemprego[3];
new JaComi[SLOTS2] = 0;
new JaVendi[SLOTS2] = 0;
new Negocio[SLOTS2] = 0;
new Negociador[SLOTS2] = 0;
new PropriedadeNomeacao[SLOTS2] = 0;
new JogadorNomeacao[SLOTS2];
new PropriedadeEscolhida[SLOTS2] = 0;
new ValorOferecido[SLOTS2] = 0;
new NegocianteName[SLOTS2][MAX_STRING];
new PropriedadeContrato[SLOTS2] = 0;
new TimerVenda[SLOTS2];
new TocandoBIP[SLOTS2];
new HoraJogo;
new MinutoJogo;
new DiaJogo;
new MesJogo;
new AnoJogo;
new PrecoGas;
new ValorTV;
new ValorRadio;
new ValorGeladeira;
new ValorFogao;
new ValorCelular;
new ValorTelefone;
new ValorFrango;
new ValorPeixe;
new ValorPizza;
new ValorSalada;
new ValorRefrigerante;
new ValorSuco;
new ValorCarne;
new ValorStrogonoff;
new ValorCamarao;
new ValorLinguica;
new PropostaSeguro[SLOTS2] = 0;
new SeguroImovel[SLOTS2] = 0;
new SeguroCarro[MAX_VEHICLES] = 0;
new VendedorSeguro[SLOTS2];
new TimerDivida[SLOTS2];
new AbastecendoCarroAluguel[SLOTS2] = 0;
new ReparandoCarroAluguel[SLOTS2] = 0;
new AluguelTempo[SLOTS2];
new AluguelFornecedor[SLOTS2];
new AluguelFornecedorName[SLOTS2][30];
new AluguelCarro[SLOTS2];
new AluguelContinuar[SLOTS2];
new CellCredits[SLOTS2];
new VCamuflado[SLOTS2] = 0;
new VerAlarme;
new AreaLoteria[SLOTS2] = 0;
new AreaCustomizacao[SLOTS2] = 0;
new AreaDesmanche[SLOTS2];
new AreaDelegacia[SLOTS2];
new AreaHotel[SLOTS2];
new AreaDeleg[SLOTS2];
new AreaHosp[SLOTS2];
new AreaBanheiro[SLOTS2];
new AreaChuveiro[SLOTS2];
new AreaSorveteria[SLOTS2];
new AreaLocadora[SLOTS2];
new AreaBar[SLOTS2];
new AreaLCavalos[SLOTS2];
new AreaBalada[SLOTS2];
new AreaChaveiro[SLOTS2] = 0;
new TomandoSorvete[SLOTS2] = 0;
new AcabeiDeMijar[SLOTS2] = 0;
new Mijando[SLOTS2] = 0;
new TomeiBanho[SLOTS2] = 0;
new Logado[SLOTS2];
new AreaBanco[SLOTS2];
new AreaCreditos[SLOTS2];
new MissaoLixeiro[SLOTS2] = 0;
new LixoColetado[SLOTS2] = 0;
new AreaLixao[SLOTS2] = 0;
new PrisaoTimer[SLOTS2][2];
new invitestatus[SLOTS2];
new envconvite[SLOTS2];
new kitmedico[SLOTS2] = 0;
new JogadorDoente[SLOTS2] = 0;
new AvisadoDasDoencas[SLOTS2] = 0;
new Curando[SLOTS2] = 0;
new confirmacaosenha[SLOTS2] = 0;
new senhaatual[SLOTS2] = 0;
new SacandoGrana[SLOTS2] = 0;
new pickupbancoselecionada[SLOTS2];
new DepositandoGrana[SLOTS2] = 0;
new EntregandoGrana[SLOTS2];
new FazendoEmprestimo[SLOTS2] = 0;
new InvestindoGrana[SLOTS2] = 0;
new DesInvestindoGrana[SLOTS2] = 0;
new carvenda1;
new carvenda2;
new carvenda3;
new carvenda4;
new carvenda5;
new carvenda6;
new carvenda7;
new carvenda8;
new carvenda9;
new carvenda10;
new ZeraMulta[SLOTS2] = 0;
new tocando2;
new tocando;
new sombalada[MAX_CASAS] = 0;
new sombalada2[SLOTS2] = 0;
//Auto-Escola
new NaAgenda[SLOTS2] = 0;
new Agendado[SLOTS2] = 0;
new AgendaTestes;
new FechandoPortaoAuto;
new AbrindoPortaoAuto;
new NoTeste[SLOTS2] = 0;
new InstrutorOcupado[SLOTS2] = 0;
new Chance[SLOTS2] = 0;
new InstrutorNovo[SLOTS2] = 0;
new LiAsLeis[SLOTS2] = 0;
new TempoLeisTransito[SLOTS2];
new AreaBalizaHabilitada[SLOTS2] = 0;
new AreaZigHabilitada[SLOTS2] = 0;
new Area180Habilitada[SLOTS2] = 0;
new AreaMotoHabilitada[SLOTS2] = 0;
new TempoRua[SLOTS2];
//Cofre
new CorrectPassword[SLOTS2][MAX_CASAS];
new GranaCofre[SLOTS2][2];
new ArmaCofre[SLOTS2][2];
new DrogaCofre[SLOTS2][2];
//Motorista
new LimoLavada[MAX_VEHICLES] = 0;
new LavandoLimo[SLOTS2] = 0;
new LimoRevisada[MAX_VEHICLES] = 0;
new LavagemLimo[SLOTS2] = 0;
new MotorLimo[SLOTS2] = 0;
new EntregaLimo[SLOTS2] = 0;
//Advogado
new dinheirofianca[SLOTS2];
//registrar
new RegisterPlayer[SLOTS2] = 0;
//Convites
new ivalorcasa[SLOTS2];
new icarid[SLOTS2];
new icor1[SLOTS2];
new icor2[SLOTS2];
new Float:iX[SLOTS2];
new Float:iY[SLOTS2];
new Float:iZ[SLOTS2];
new Float:iang[SLOTS2];
//Pesca
new PeixesRestantes[SLOTS2];
new Pescado[SLOTS2] = 0;
new AreaPesca[SLOTS2] = 0;
new AreaCoopPesca[SLOTS2] = 0;
new PescaInProgress[SLOTS2] = 0;
new QtPescas[SLOTS2] = 0;
new QtIscas[SLOTS2] = 0;
//Sequestro
new Sequestro[SLOTS2] = 0;
new Cativeiro[SLOTS2] = 0;
new Sequestrador[SLOTS2];
new CelularBloqueado[SLOTS2] = 0;
new Amarrado[SLOTS2] = 0;
new Amarrou[SLOTS2] = 0;
new AmarradoInfo[SLOTS2][2];
new FuiSequestrado[SLOTS2];
//Caminhoneiros
new AreaCarga[SLOTS2] = 0;
new ColocandoDrogas[SLOTS2] = 0;
new DrogasNoCaminhao[SLOTS2] = 0;
new CarregamentoRoupas[SLOTS2] = 0;
new GasCar[SLOTS2] = 0;
new GeralCar[SLOTS2] = 0;
//Aluguel de carros
new CarroAlugado[SLOTS2] = 0;
new TempoAlugar[SLOTS2] = 0;
new JogadorNoCarro[SLOTS2] = 0;
new OferecerCarro[SLOTS2] = 0;
new alugado1;
new alugado2;
new alugado3;
new alugado4;
new alugado5;
new alugado6;
new alugado7;
new alugado8;
new MotoPizza;
new MotoPizza2;
new MotoPizza3;
new MotoPizza4;
new MotoPizza5;
new MotoPizza6;
new CarroAuto;
new CarroAuto2;
new CarroAuto3;
new CarroAuto4;
new CarroAuto5;
new CarroAuto6;
new CarroJornal;
new CarroJornal2;
new CarroJornal3;
new Taxi1;
new Taxi2;
new Taxi3;
new MotoTaxi;
new MotoTaxi2;
new MotoTaxi3;
new AeroTaxi;
new limosine1;
new limosine2;
new CarroContrabando1;
new CarroContrabando2;
new CarroContrabando3;
new CarroContrabando4;
new CarroContrabando5;
new BikeEvent1;
new BikeEvent2;
new BikeEvent3;
new BikeEvent4;
new BikeEvent5;
new BikeEvent6;
new BikeEvent7;
new BikeEvent8;
new Float:CPD_CPPositions[6][3] = {
    {362.7719,173.7793,1008.3828}, // COORDENADA PRINCIPIANTE CP
	{361.8476,205.0786,1008.3828}, // CHECK_LEVEL20
	{355.6021,161.8357,1019.9844}, // CP_LEVEL 40
	{362.6747,171.6730,1025.7891}, // ANTEPENULTIMO_CP
	{362.8526,151.2095,1025.7964}, // PENULTIMO_CP
	{354.8842,172.7762,1025.7964} // ULTIMO_CP
};
new CPD_CPHandling[SLOTS2];
//Roubo
new TempoAssalto[SLOTS2] = 0;
new BancoRoubando[SLOTS2] = 0;
new RouboMao[SLOTS2] = 0;
new AssaltPlayer[SLOTS2] = 0;
//GangZones
new zoneupdates[SLOTS2];
new playerzone[SLOTS2];
new zoneupdate;
//Desmanche
new TempoDesmanche[SLOTS2] = 0;
//gate
new Float:rx;
new Float:ry;
new Float:rz;
new PortaoFechando[3];
new PortaoAbrindo[3];
new PortaoTimer[3];
new ContagemPortao[3];
new PortaoAberto[3];
new DelegaFechando[3];
new DelegaAbrindo[3];
new DelegaAberto[3];
//Auto Escola
new portaoauto;
//Juiz
new Tribunal[SLOTS2] = 0;
new declaracoesabertas[SLOTS2] = 0;
new Audiencia[SLOTS2];
//Fazenda
new AreaFazenda[SLOTS2] = 0;
new AreaCoopFazenda[SLOTS2] = 0;
new FazendaInProgress[SLOTS2] = 0;
new QtMilho[SLOTS2] = 0;
new Leite[SLOTS2] = 0;
new LeiteInProgress[SLOTS2] = 0;
new QtLeite[SLOTS2] = 0;
//Latinhas para desempregados
new CatarLatinha[SLOTS2] = 0;
new EntregandoLatas[SLOTS2] = 0;
new Missao[SLOTS2];
//Transporte
new AreaForte[SLOTS2] = 0;
new Carga[SLOTS2] = 0;
new PegarGrana[SLOTS2] = 0;
//Contrabando
new Contrabando[SLOTS2];
new CheckpointStatus[SLOTS2];
new ContrabandoPassar[SLOTS2] = 0;
new Receita[SLOTS2] = 0;
new ContrabandoCar[SLOTS2] = 0;
new EntregaCarro[SLOTS2] = 0;
new NaoSair[SLOTS2] = 0;
new PodePegar[SLOTS2] = 0;
new AcabeiDeRecusar[SLOTS2] = 0;
//Vendedor de Armas
new Armas[SLOTS2];
new Camuflado[SLOTS2] = 0;
new VendendoArmas[SLOTS2] = 0;
new VendedorVirou[SLOTS2];
//Pedreira
new PedreiraCarga[SLOTS2] = 0;
new Construcao[SLOTS2] = 0;
new Pedras[SLOTS2] = 0;
//Pizzaria
new PizzasNecessarias[SLOTS2] = 0;
new PizzasEntregues[SLOTS2] = 0;
new PizzariaCar[SLOTS2] = 0;
new EntregadePizza[SLOTS2] =0;
new avisado[SLOTS2];
new PizzasMoto[MAX_VEHICLES] = 0;
//Televisão
new TVligada[SLOTS2] = 0;
new PlayerSpec[SLOTS2] = 0;
new Spectator[SLOTS2] = 0;
new AntInt[SLOTS2];
new Float:AntPos[SLOTS2][3];
//defines de coisas
new Menu:Hamburguers;
new Menu:BuyCar;
new Menu:Weapons;
new Menu:WSlot2;
new Menu:WSlot3;
new Menu:WSlot4;
new Menu:WSlot5;
new Menu:WSlot6;
new Menu:WColete;
new Menu:WCamuflagem;
new Menu:CasaOpc;
new Menu:DiasAluguel1;
new Menu:DiasAluguel2;
new Menu:DiasAluguel3;
new Menu:ConfirmarProf;
new Menu:Outros;
new Menu:ComidaLoja;
new Menu:Eletrodomesticos;
new Menu:Transfeder1;
new Menu:Transfeder2;
new Menu:Transfeder3;
new Menu:Transfeder4;
new Menu:Transfeder5;
new Menu:QTMunicoes;
new Menu:Municoes;
new Menu:Sucos;
new Menu:Cardapio1;
new Menu:Cardapio2;
new Menu:Cardapio3;
new Menu:Cardapio4;
new Menu:Bombshop;
new Menu:Bombshopveh;
new Menu:BancoOpc;
new Menu:BancoOpc2;
new Menu:CargaGeral;
new Menu:VendoDrogas;
new Menu:QuantidadeDrog;
new Menu:Bar;
new Menu:OpcoesAlarme;
new Menu:CPD_First;
new Menu:CPD_Second;
new Menu:CPD_Third;
new Menu:CPD_Fourth;
new Menu:CPD_Fifth;
new Menu:CPD_Sixth;
new Menu:Properties;
new Menu:Properties2;
new Menu:ConfirmacaoNegocio;
new Menu:Sorvetes;
new Menu:Sorvetes2;
new Menu:cofremenu;
new Menu:drogascofre;
new Menu:Becks;
new PropriedadeSelecionada[SLOTS2] = 0;
new AreaBombShop[SLOTS2];
new DebugKeys[SLOTS2] = 0;
new Escondido[SLOTS2] = 0;
new Previsao;
new AreaPosto[SLOTS2];
new Presos[SLOTS2] = 0;
new JaMultou[SLOTS2] = 0;
new Profissao[SLOTS2] = 0;
new Taximetro[SLOTS2][2];
new ATaximetro[SLOTS2][2];
new MTaximetro[SLOTS2][2];
new PrecoCorrida[SLOTS2];
new NoTaxi[SLOTS2] = 0;
new Velo[SLOTS2];
new Velocidade[SLOTS2];
new VelocimetroEscolhido[SLOTS2] = 0;
new Perseguicao[SLOTS2] = 0;
new ChavePrisao[SLOTS2] = 0;
new Bebida[SLOTS2] = 0;
new RequerAbastecimento[MAX_ABASTECIMENTOS] = 0;
//Traficante/Lider de Tráfico
new Maconha[SLOTS2] = 0;
new Heroina[SLOTS2] = 0;
new Cocaina[SLOTS2] = 0;
new QtMaconha[SLOTS2] = 0;
new QtHeroina[SLOTS2] = 0;
new QtCocaina[SLOTS2] = 0;
new PegandoDrogas[SLOTS2] = 0;
new MaconhaEsc[SLOTS2] = 0;
new HeroinaEsc[SLOTS2] = 0;
new CocainaEsc[SLOTS2] = 0;
new MaconhaMao[SLOTS2] = 0;
new HeroinaMao[SLOTS2] = 0;
new CocainaMao[SLOTS2] = 0;
new DrogasPlantadas[MAX_VEHICLES] = 0;
new TempoPlantacao[SLOTS2];
new PlantandoDrogas[SLOTS2] = 0;
new TaAfim[SLOTS2] = 0;
new ComprandoBaguio[SLOTS2] = 0;
new DrogasNegoci[SLOTS2] = 0;
new DrogaOferecida[SLOTS2] = 0;
new QtdDrogaV[SLOTS2] = 0;
new TraficanteTra[SLOTS2];
//Narcoticos
new TempoDesarme[SLOTS2];
new DesarmandoAsDrogas[SLOTS2] = 0;
//Prostituta
new Metendo[SLOTS2] = 0;
new SemCamisa[SLOTS2] = 0;
new Transacama[SLOTS2] = 0;
new AreaStrip[SLOTS2];
new Prostitutacama[SLOTS2];
new Strip2[SLOTS2] = 0;
new TimerStrip[SLOTS2] = 0;
new FazendoStrip[SLOTS2] = 0;
new Prostitutacama2[SLOTS2];
new FST[SLOTS2] = 0;
//Loteria
new Aposta[SLOTS2][2];
new Acertos[SLOTS2];
new bool:PlayerDentro[SLOTS2];
//Reboque
new Reboques=0;
new isTowtruck[SLOTS2];
//Casino
new AreaCasino[SLOTS2];
//Historia
new LimoHistoria1;
new LimoHistoria2;
//Celular
new CellTimer[SLOTS2];
new Chamando[SLOTS2];
new CobrancaCall[SLOTS2];
new EmLigacao[SLOTS2];
new CalledID[SLOTS2];
new LastPN;
new LastPhone;
new LastCar;
new RingTone[SLOTS2];
new gdebug = 1;
new celular[SLOTS2];
new Gates[4];
new Portao[4];
//VoteKick
new KickVote[SLOTS2];
new VoteKick[SLOTS2];
new LastVote[SLOTS2];
new numplayers = 0;
//Derby
new DMinutosRestantes;
new DerbyIniciou;
new OficializarParticipacao[SLOTS2] = 0;
new Ocupado[MAX_VEHICLES] = 0;
new DerbyAvisado;
new PlayerDerby[SLOTS2] = 0;
new SegundosContagem[SLOTS2] = 0;
new DerbyIniciado[SLOTS2] = 0;
new contagemof;
new Derby1;
new Derby2;
new Derby3;
new Derby4;
new Derby5;
new Derby6;
new Derby7;
new Derby8;
new Derby9;
new Derby10;
//Motivos quando receber grana
new MotivoGranaID[SLOTS2] = 0;
new MotivosGrana[][] = {
"Desconhecido",
"Transferencia",
"Sacou",
"Trabalhou",
"Venda",
"Emprestimo",
"Homicidio",
"Ganhou evento",
"Logou-se",
"Foi recompensado",
"Ganhou na loteria",
"Admin entregou"
};
//GPS
new GPSLigado[SLOTS2] = 0;
//Prisão
new Menu:MotivosPrisao;
new Menu:MotivosPrisao2;
new Motivo[SLOTS2] = 0;
new Prisioneiro[SLOTS2] = 0;
new Motivos[][] = {
"Homicidio",
"Assalto a mao armada",
"Roubo de automovel",
"Roubo de imovel",
"Roubo de celular",
"Desacato a autoridade",
"Falsificacao de documento",
"Corrupcao",
"Nao pagar multas",
"Contrabando",
"Fuga de prisao",
"Tentativa de homicidio",
"Destruindo patrimonio",
"Formacao em quadrilha",
"Portando drogas",
"Portando armas sem porte",
"Sequestro"
};
new TempoPrisao[] = {
8,
6,
5,
5,
4,
2,
3,
4,
5,
3,
10,
7,
2,
5,
4,
5,
8
};
//Arrays
new ValorDia;
new MesesNomes[][] = {
"None",
"Janeiro",
"Fevereiro",
"Março",
"Abril",
"Maio",
"Junho",
"Julho",
"Agosto",
"Setembro",
"Outubro",
"Novembro",
"Dezembro"
};
new MesesDias[] = {
	31,//janeiro
	29,//fevereiro
	31,//março
	30,//abril
	31,//maio
	30,//junho
	31,//julho
	31,//agosto
	30,//setembro
	31,//outubro
	30,//novembro
	31//dezembro
};
new SimNao[][] ={
"Não",
"Sim"
};
new CavalosLargada[][] = {
	"NONE",
	"Cavalo 1 - Cor Verde",
	"Cavalo 2 - Cor Amarela",
	"Cavalo 3 - Cor Vermelho",
	"Cavalo 4 - Cor Azul",
	"Cavalo 5 - Cor Laranja",
	"Cavalo 6 - Cor Branca",
	"Cavalo 7 - Cor Preto",
	"Cavalo 8 - Cor Roxo"
};
new AbastecimentoString[][] = {
"Restaurante: Precisamos dos serviços de abastecimentos de bebidas, RÁPIDO VENHA!",
"Boate: Precisamos de bebidas aqui, afinal todos cansam-se de se divertir e ficam com sede!",
"Bar: Necessitamos de bebida no Bar, afinal é uma das coisas mais importantes por aqui...",
"Balada: Venha para cá rápido, precisamos abastecer nossas bebidas..."
};
new Float:RaceCheckpoints1[31][3] = {
{962.3429,-1049.6272,30.0040},
{943.0116,-1191.7502,18.7111},
{1038.4774,-1219.0596,16.7317},
{1112.6946,-1279.7950,13.5322},
{1195.4238,-1428.4999,13.2719},
{1151.5778,-1607.9861,13.7813},
{1249.4498,-1710.9374,13.3828},
{1483.4686,-1733.5248,13.3828},
{1568.9495,-1850.3403,13.3828},
{1689.7102,-1764.2863,13.3828},
{1761.0923,-1730.7655,13.3828},
{1846.1188,-1752.2253,13.3828},
{2048.3628,-1751.6432,13.3828},
{2185.2002,-1736.8257,13.3750},
{2263.3887,-1658.5081,15.2201},
{2483.7041,-1669.7219,13.3359},
{2454.2139,-1732.7047,13.4766},
{2233.8174,-1732.6643,13.3828},
{2199.8857,-1649.2726,15.2779},
{2211.1272,-1477.2211,23.8190},
{2227.3760,-1452.2050,23.8358},
{2270.6101,-1438.0858,23.8281},
{2241.9150,-1416.2784,23.8281},
{2168.3645,-1337.8356,23.8281},
{2195.7505,-1220.9460,23.8125},
{2271.1450,-1188.8108,24.9961},
{2228.6096,-1135.1045,25.6250},
{1975.6503,-1099.8062,25.4112},
{1843.0417,-1179.5222,23.6367},
{1715.0651,-1272.2500,13.3828},
{1699.5094,-1528.0724,13.3828}
};
new CarrosVendaModelos[27] = {
400, 410, 405, 409, 411, 415, 436, 439, 445, 451, 458, 461,
462, 467, 474, 475, 480, 496, 517, 522, 533, 551, 558, 560,
562, 585, 602
};
new Float:CarrosVendaPos[10][3] = {
{563.0165,-1288.3673,17.0482},
{556.2867,-1288.1897,17.0482},
{548.9844,-1287.5002,17.0482},
{542.2426,-1287.7181,17.0422},
{535.2770,-1288.5321,17.0422},
{563.0725,-1279.3744,17.0516},
{556.3665,-1279.6246,16.9035},
{548.7620,-1279.5273,17.0547},
{542.2704,-1279.3419,16.8953},
{535.0467,-1280.2908,16.9693}
};
new Float:CarrosVendaAng[10] = {
358.5501,
358.7783,
0.7674,
1.4636,
2.1568,
0.793946,
1.5179,
1.1872,
1.6472,
1.8496
};
//Propriedades
new NomesPropriedades[MAX_PROPERTIES][] = {
"Pizzaria",
"Yellow's'Taxi",
"LuxLimosine",
"Corretora_de_seguros",
"SecurityLife",
"Ammu-Nation",
"Boate",
"Posto",
"Bar",
"Pay'n'Spray",
"Lixao",
"Fazenda",
"COEVL",
"ECTVL",
"Concecionaria",
"Corretora_de_imoveis",
"Cooperativa_de_pesca"
};
new ValoresPropriedades[MAX_PROPERTIES] = {
90000,//Pizzaria
120000,//Yellow's'Taxi
140000,//LuxLimosine
180000,//Corretora de seguros
110000,//SecurityLife
150000,//Ammu-Nation
170000,//Boate
210000,//Posto
80000,//Bar
200000,//Pay'n'Spray
75000,//Lixao
160000,//Fazenda
180000,//COEVL
160000,//ECTVL
200000,//Concecionaria
200000,//Corretora de imóveis
140000//Cooperativa de pesca
};
//Peixes
new PeixeNome[][] = {
"Atum",
"Bagre",
"Barracuda",
"Cavala",
"Dourado",
"Garoupa",
"Namorado",
"Pargo",
"Pescada",
"Robalo",
"Tilápia",
"Truta",
"Salmão"
};
new PeixeValor[] = {
39,
28,
24,
29,
31,
32,
26,
26,
28,
33,
34,
31,
41
};
//Dias
new DiaName[][] = {
	"Domingo",
	"Segunda-feira",
	"Terça-feira",
	"Quarta-feira",
	"Quinta-feira",
	"Sexta-feira",
	"Sábado"
};
new DiaNameGT[][] = {
	"Domingo",
	"Segunda-feira",
	"Tera-feira",
	"Quarta-feira",
	"Quinta-feira",
	"Sexta-feira",
	"Sbado"
};
//[Arrays necessárias]
new SkinsLadroes[] = {
116,
115,
127,
19,
107,
106
};
new SkinsPoliciais[] = {
280,
282,
283,
285
};
new Float:LadroesPos[][3] = {
{-871.6448,-2213.6428,30.4920},
{-921.7756,-2307.1833,54.1561},
{-807.9471,-2210.8643,24.7928},
{-965.0370,-2193.1489,41.9644},
{-983.3970,-2421.8074,75.6219},
{-797.1565,-2432.5356,83.2568},
{-638.3835,-2264.6726,25.7041},
{-722.7740,-2062.6951,7.4829},
{-803.9843,-2077.7625,24.7095},
{-781.5229,-1889.4730,8.6424},
{-523.2393,-1872.7600,10.5943},
{-737.4069,-2286.0640,34.1270},
{-796.9286,-2277.1687,41.4843},
{-737.4069,-2286.0640,34.1270},
{-796.9286,-2277.1687,41.4843}
};
new Float:Celas[][] = {
	{227.6684,110.1895,999.0156},
	{223.0134,110.3193,999.0156},
	{219.3730,110.2772,999.0156},
	{214.9654,109.4626,999.0156}
};
new Float:EntregaDrogaPos[10][3] = {
    {2013.2772,-1717.0242,13.5547},
	{1999.8834,-1114.8395,27.1318},
	{2249.8291,-1236.4523,25.6999},
	{2498.2324,-1642.6064,13.7826},
	{2069.0466,-1588.7394,13.4913},
	{1929.3640,-1917.4486,15.2568},
	{1734.5961,-2127.8760,13.5469},
	{1440.1974,-926.2419,39.6477},
	{876.4865,-968.6357,37.1875},
	{2101.3157,-1333.4294,25.5391}
};
new Float:EntregaSorvetePos[9][3] = {
	{2076.3848,-1733.0042,13.5469},
	{1176.6527,-1704.6572,13.8879},
	{962.9757,-1467.7639,13.4774},
	{816.9569,-1388.4523,13.6182},
	{760.6097,-1600.7350,13.4187},
	{2145.4211,-991.4246,61.7636},
	{2455.4146,-1096.6976,42.9169},
	{2808.9885,-1182.8438,25.3433},
	{2792.7083,-1944.9254,13.5469}
};
new Float:DelegaciaPos[5][3] = {
	{1538.9716,-1645.5699,5.8906},
	{1543.7681,-1663.1426,5.8906},
	{1544.5663,-1680.0636,5.8906},
	{1582.6725,-1708.7140,5.8906},
	{1600.0254,-1700.1019,5.8906}
};
new GPSNames[][] = {
	"Inválido",//0
	"Delegacia",//1
	"Sorveteria",//2
	"Clube Alhambra",//3
	"Posto",//4
	"Banco",//5
	"Ammu-Nation",//6
	"Hospital",//7
	"Posto",//8
	"Hotel",//9
	"Banco",//10
	"Skate Park",//11
	"Agencia de empregos",//12
	"Hotel",//13
	"Aeroporto",//14
	"Pay'n'Spray",//15
	"Ammu-Nation",//16
	"Clube de Strip",//17
	"Beco do desmanche",//18
	"Lixão/Ferro-Velho",//19
	"Auto-Escola",//20
	"Balada",//21
	"Companhia Elétrica Virtual Life",//22
	"Well Stacked Pizza Co",//23
	"Loteria",//24
	"Loja de Utilidades/Eletrodomesticos",//25
	"Apostas de Cavalos",//26
	"Club de Strip-Tease",//27
	"Estadio de Los Santos",//28
	"Compra de Propriedades",//29
	"Bar",//30
	"Restaurante",//31
	"Revendedora de Carros",//32
	"Banheiro Publico",//33
	"Cooperativa de Pesca",//34
	"Registro de Cofres",//35
	"Loja de Municao",//36
	"Locadora de Veículos",//37
	"Praia de Los Santos",//38
	"Morro",//39
	"Casa do Ryder",//40
	"Casa do Sweet",//41
	"Empresa de Contas Telefônicas Virtual Life",//42
	"Chaveiro",//43
	"Pizzaria",//44
	"Binco",//45
	"Sub Urban",//46
	"Victim",//47
	"Didier Sachs",//48
	"Pro Laps",//49
	"Area de entretenimentos",//50
	"Loja de customização",//51
	"Loja de modificações",//52
	"Banheiro público"//53
};
new Float:GPSLocais[][3] = {
    {0.0,0.0,0.0},//Invalido
    {1535.4200,-1666.4794,13.3828},//Delegacia
	{1568.4116,-1880.2959,13.5469},//Sorveteria
	{1831.0593,-1682.8829,13.5469},//Clube Alhambra
	{1932.0693,-1765.6171,13.5469},//Posto
	{1762.7281,-1665.8135,13.5613},//Banco
	{1362.3558,-1279.0985,13.3828},//Ammu-Nation
	{1191.4152,-1313.4065,13.3984},//Hospital
	{1003.0652,-953.1113,42.1452},//Posto
	{1025.4990,-970.7648,42.3083},//Hotel
	{1372.8091,-1022.2424,26.5281},//Banco
	{1860.2725,-1378.7266,13.5625},//Skate Park
	{1309.4923,-1382.2971,13.7309},//Agencia de empregos
	{1864.3087,-1605.5023,13.5391},//Hotel
	{1965.6682,-2172.5632,13.4233},//Aeroporto
	{2075.3633,-1830.1956,13.5545},//Pay'n'Spray
	{2397.4094,-1977.0671,13.3828},//Ammu-Nation
	{2410.9180,-1223.8486,24.7019},//Clube de Strip
	{2530.2302,-1714.7545,13.4838},//Beco do desmanche
	{2154.7485,-1977.6985,13.5513},//Lixão/Ferro-Velho
	{1796.5983,-2067.2034,13.5721},//Auto-Escola
	{1833.9900,-1681.7484,13.4503},//Balada
	{2125.6216,-2293.9382,13.4691},//COEVL
	{2095.2544,-1806.9081,13.5514},//Pizzaria
	{1736.9136,-1592.3561,13.5468},//Loteria
	{1315.5143,-908.7983,38.2960},//Utilidades Loja
	{1631.3163,-1167.5299,24.0781},//Cavalos
	{2421.1406,-1224.8090,25.1705},//Club de Strip
	{2692.5483,-1699.3090,10.4211},//Estádio LS
	{2866.1802,-1406.4285,10.9909},//Propriedades
	{2311.9138,-1650.9624,14.3784},//Bar
	{1477.4462,-1878.1508,13.5469},//Restaurante
	{556.4490,-1257.3784,17.2422},//Revendedora
	{820.0054,-1618.6536,13.5469},//Banheiro Publico
	{723.6508,-1488.4236,1.9343},//Cooperativa Pesca
	{1842.2422,-1866.5482,13.3897},//Loja Cofre
	{1983.0643,-1988.2290,13.5469},//Loja Munição
	{209.7955,-1453.7579,13.0892},//Locadora
	{585.0648,-1879.0148,4.1277},//Praia
	{2187.5598,-1062.9542,48.1465},//Morro
	{2460.6907,-1688.0582,13.5285},//Casa do Ryder
	{2519.9287,-1678.3815,14.8827},//Casa do Sweet
	{551.1316,-1504.6674,14.5329},//ECTVL
	{2489.1387,-1753.1366,13.5282},//Chaveiro
	{2092.9590,-1806.3910,13.5491},//Pizzaria
	{2245.2300,-1663.8357,15.4766},//Binco
	{2111.6140,-1212.7043,23.9647},//Sub Urban
	{458.6580,-1500.4800,31.0444},//Victim
	{452.4577,-1479.4701,30.8395},//Didier Sachs
	{497.9007,-1358.6243,16.5186},//Pro Laps
	{1019.2133,-1134.7303,23.8281},//Area de entretenimentos
	{2128.1797,-1126.4047,25.5413},//Loja de customização
	{1040.8463,-1030.4175,32.0807},//Loja de modificações
	{1208.9995,-932.5928,42.7141}//Banheiro público
};
new Float:TerminaisBusao[][3] = {
    {2311.9138,-1650.9624,14.3784},//Bar
    {1568.4116,-1880.2959,13.5469},//Sorveteria
    {1477.4462,-1878.1508,13.5469},//Restaurante
    {1831.0593,-1682.8829,13.5469},//Clube Alhambra
    {2866.1802,-1406.4285,10.9909},//Propriedades
    {1736.9136,-1592.3561,13.5468},//Loteria
    {1965.6682,-2172.5632,13.4233},//Aeroporto
    {1191.4152,-1313.4065,13.3984},//Hospital
    {1932.0693,-1765.6171,13.5469},//Posto
    {1372.8091,-1022.2424,26.5281},//Banco
    {1842.2422,-1866.5482,13.3897},//Loja Cofre
    {1315.5143,-908.7983,38.2960},//Utilidades Loja
    {2095.2544,-1806.9081,13.5514}//Pizzaria
};
new Float:EntregarContrabandoCarro[4][3] = {
	{-2714.5276,1483.8269,7.3764},
	{-1746.6765,202.1463,3.1335},
	{-2420.3567,2314.0894,2.3943},
	{2313.7090,-2389.8708,2.7796}
};
new Float:EntregarContrabandoArma[4][3] = {
    {-2015.3627,897.3715,45.4453},
	{-2337.9707,577.8401,27.9782},
	{-2656.4023,202.7016,4.3359},
	{-2795.4751,-181.8443,7.1950}
};
new Float:ContrabandoEntregaDroga[4][3] = {
	{1368.2190,1897.0417,11.4688},
	{1687.5352,2124.2644,11.4609},
	{2043.7354,734.2840,11.4609},
	{2661.7920,746.2242,14.7396}
};
new Float:Caixas[][] = {
    {2316.2163,-12.7220,26.7422},
	{2316.2273,-7.0617,26.7422}
};
new Float:CarroCC[41][4] = {
	{2668.4922,1206.6991,10.5474,180.3174},
	{2574.8108,1125.0209,10.5474,181.1967},
	{2228.4417,1137.2524,10.5474,107.9905},
	{1581.8627,898.6188,10.4179,183.3651},
	{1356.6176,1096.0950,10.5474,90.9337},
	{1151.9634,1524.1710,5.5472,178.9493},
	{1051.8745,1873.2301,10.5474,0.1983},
	{929.5215,2069.4702,10.4049,170.7763},
	{956.1917,2181.3809,10.3984,271.1207},
	{1100.7805,2091.2830,10.3898,358.9906},
	{1119.1703,2276.9883,16.2978,268.9280},
	{1076.0725,2924.0420,40.1449,261.4352},
	{1420.2354,2799.0095,10.4012,2.0092},
	{1749.8053,2879.6272,10.4106,272.9167},
	{2029.0978,2699.9490,10.3990,89.2702},
	{2139.7026,2835.4854,10.4048,268.5278},
	{2409.4907,2543.2065,21.4537,356.6750},
	{2494.9517,2317.8181,10.3983,0.8066},
	{2492.4773,2398.8542,3.7891,85.3324},
	{2641.2695,2410.6670,10.3988,180.1915},
	{2973.7959,2389.2285,24.9535,327.6482},
	{2844.4370,1650.3428,10.3926,0.7127},
	{2942.3459,1265.4744,32.6677,57.4269},
	{2295.8374,1511.2206,23.2092,175.9818},
	{2249.7029,1747.2190,10.4049,356.2835},
	{1882.2380,2017.3435,7.1733,270.9932},
	{2400.2312,1838.6890,5.5933,352.1205},
	{2221.5205,1945.2988,31.3601,358.3367},
	{1636.0177,2388.5591,10.5515,179.3788},
	{2003.7339,2258.2200,11.2394,270.4591},
	{2053.5474,2165.4058,10.3865,358.3701},
	{2568.7632,2175.4695,10.3901,265.5720},
	{2059.5950,2431.3452,27.5952,271.9005},
	{2107.2444,2415.5232,49.0883,182.6570},
	{1499.2971,2029.3713,10.3707,357.0333},
	{1598.0389,1170.1449,13.7844,267.0974},
	{1597.7311,2053.3071,10.2423,268.1779},
	{2308.8643,2452.9121,10.3853,280.0033},
	{2401.7202,2313.6318,7.7113,180.0397},
	{2470.2244,2336.0071,10.3688,352.2810},
	{2509.9971,1648.2078,10.3863,266.8287}
};

//Lixeiras
new Float:LixeirasCheckpoints[37][3] = {
	{1919.4543,-2088.9211,13.5816},
	{1920.1440,-2123.2827,13.5848},
	{1175.3402,-1878.8687,13.5765},
	{1093.4054,-1881.3174,13.5469},
	{1102.4594,-1876.7643,13.5469},
	{959.8318,-821.7481,96.4444},
	{974.5941,-814.8570,97.6700},
	{914.9440,-671.0176,117.1938},
	{1071.5637,-777.2383,107.2760},
	{2545.2141,-1035.6591,69.5822},
	{2527.9951,-1056.7031,69.5759},
	{2510.4429,-1030.7483,70.0345},
	{2426.7161,-1017.5425,54.3441},
	{2441.4590,-1979.9978,13.5469},
	{2382.4392,-1940.1761,13.5469},
	{2176.5598,-1344.8451,23.9844},
	{2224.2134,-1409.4204,24.0000},
	{1424.1855,-1319.8253,13.5547},
	{1420.2666,-1355.4493,13.5643},
	{1439.2612,-1324.7502,13.5458},
	{1604.3488,-1060.3590,23.9063},
	{1630.1682,-988.8309,24.0752},
	{1829.5371,-1113.9519,23.8766},
	{1786.1411,-1147.2623,23.8730},
	{1660.6748,-1201.4055,19.7935},
	{1592.9694,-1201.4099,19.8162},
	{1425.5841,-1080.7632,17.5580},
	{1435.4409,-1094.6079,17.5942},
	{1148.7889,-1386.2189,13.8293},
	{734.3256,-1341.2900,13.5255},
	{1322.0441,-1236.9178,13.5469},
	{1461.8387,-1488.1692,13.5469},
	{1537.7135,-1479.5881,9.5000},
	{1516.4315,-1849.2903,13.5469},
	{1420.4170,-1844.5044,13.5469},
	{1338.2338,-1815.8656,13.5502},
	{1337.4501,-1773.7675,13.5469}
};
new Float:EntregaPizza[55][3] = {
	{667.4611,-1768.2632,13.6395},
	{206.8691,-1769.8591,4.3528},
	{476.1749,-1279.7399,16.4891},
	{725.3467,-998.7245,52.7344},
	{688.4912,-1052.6003,50.0404},
	{471.1869,-1165.1737,67.1114},
	{299.4418,-1155.4586,80.9099},
	{1109.8466,-965.3030,42.7156},
	{1250.4656,-814.9561,84.1478},
	{1094.9318,-647.0628,113.6484},
	{1045.5042,-642.3704,120.1172},
	{944.5483,-707.0009,122.2109},
	{785.9003,-826.5245,70.2896},
	{786.7748,-1436.6754,13.5563},
	{761.2948,-1601.4784,13.3963},
	{791.3557,-1759.9124,13.3795},
	{959.2263,-1805.2899,14.2764},
	{1328.2424,-1272.9170,13.5469},
	{1095.1053,-1271.9298,13.5469},
	{972.0071,-1309.1213,13.3828},
	{645.5919,-1353.4913,13.5469},
	{461.3967,-1529.1140,29.9626},
	{480.3898,-1415.5505,16.9723},
	{1016.4984,-1537.2197,13.5189},
	{1247.9326,-1562.5531,13.6183},
	{1653.8300,-1485.2672,13.3828},
	{1565.9774,-1168.3051,24.0781},
	{1641.5500,-1170.2367,24.0781},
	{1791.1555,-1165.0851,23.8281},
	{1893.0699,-1127.8049,24.3029},
	{1933.5380,-1127.7698,25.3210},
	{2060.4194,-1076.7515,24.8981},
	{2288.0876,-1079.5088,47.5459},
	{2153.5376,-1013.3929,62.9425},
	{2049.1118,-985.5848,44.5556},
	{2399.9370,-1144.3446,29.6275},
	{2802.2549,-1086.2662,30.7238},
	{2714.1917,-1116.2172,69.5781},
	{2756.3625,-1178.7412,69.4011},
	{2775.8726,-1248.9669,49.2383},
	{2804.6245,-1302.6187,38.9612},
	{2714.8755,-1468.6206,30.5460},
	{2762.4402,-1978.8011,13.5475},
	{2674.3159,-2012.6364,13.5547},
	{2653.7363,-1995.4392,13.5547},
	{2507.9199,-2017.8193,13.5469},
	{2241.7156,-1885.1985,13.5469},
	{2007.9795,-1704.7460,13.5469},
	{2238.5420,-1645.5743,15.4854},
	{2452.7036,-1649.8158,13.4427},
	{2206.6975,-1410.6456,23.9844},
	{2196.6240,-1470.1097,25.4775},
	{2150.2930,-1290.0696,23.9850},
	{2078.5088,-1202.1044,23.9135},
	{2131.2275,-1148.2389,24.3877}
};
new Float:AzulEquipe[12][3] = {
	{2171.8464,713.1972,10.6719},
	{2180.8342,713.3547,10.6719},
	{2191.4609,713.5405,10.6719},
	{2205.0579,713.7786,10.6719},
	{2220.4702,713.6301,10.6719},
	{2235.9902,713.6530,10.6719},
	{2250.7075,713.4274,10.6719},
	{2261.0798,713.4387,10.6719},
	{2267.6699,632.9584,10.6719},
	{2224.4556,633.4627,10.6719},
	{2200.3901,632.9679,10.6719},
	{2175.0718,632.7612,10.6719}
};
new Float:LaranjaEquipe[12][3] = {
	{2311.1377,711.9603,10.6719},
	{2343.3589,713.1957,10.6719},
	{2359.2310,712.6921,10.6719},
	{2372.4932,712.9538,10.6719},
	{2383.5713,712.9311,10.6719},
	{2397.8135,713.3541,10.6719},
	{2407.5864,713.0441,10.6719},
	{2430.3333,707.4073,10.7679},
	{2427.2654,662.8263,10.6797},
	{2404.2920,633.4774,10.6719},
	{2364.3040,633.0352,10.6719},
	{2349.9368,633.5334,10.6719}
};
new ValorConserto[9] = {
	300,
	325,
	350,
	375,
	400,
	425,
	450,
	475,
	500
};
new ValorTratamento[9] = {
	200,
	225,
	250,
	275,
	300,
	325,
	350,
	375,
	400
};
new Float:MaterialGeral[32][3] = {
	{2276.7805,2792.2209,11.4132},
	{2867.6741,2587.1086,11.2717},
	{2789.8125,2581.5967,11.4076},
	{2788.3848,1976.5139,11.4002},
	{2767.2917,1430.3484,11.0297},
	{1699.5713,932.0217,11.4064},
	{1482.0475,1029.7655,11.4041},
	{1105.0337,1926.7305,10.5474},
	{1049.1306,2134.0002,10.5473},
	{2485.1016,-2118.3237,13.2740},
	{2173.9971,-2278.9578,13.2070},
	{2200.5720,-2302.4646,14.4918},
	{2079.4766,-2034.2172,13.2739},
	{-59.4326,-1135.3506,0.8052},
	{132.7787,-275.9363,1.5781},
	{-575.1917,-497.0947,25.5234},
	{-188.6011,-279.2888,2.1525},
	{-112.9081,-328.3716,2.1595},
	{-1573.1852,-2737.4255,48.2643},
	{-2098.2527,-2241.5991,30.3522},
	{-2124.7537,-95.1831,35.0474},
	{-1831.8756,161.7327,14.8443},
	{-1726.8512,-124.4487,3.2790},
	{2770.4475,-2511.1726,13.2162},
	{2612.7383,-2225.4827,12.9616},
	{2249.1465,-2641.5596,13.1596},
	{2208.6328,-2644.1208,13.1365},
	{-83.0790,91.2185,3.1172},
	{686.7947,1729.0151,6.7192},
	{-295.2475,1776.8915,42.4146},
	{-1204.5481,1821.3715,41.8111},
	{1992.3278,2075.2271,10.9127}
};
new Float:GasCami[16][3] = {
	{78.7559,1217.7043,18.5619},
	{250.5986,1394.6223,10.3130},
	{648.2774,1688.6320,6.7193},
	{-1307.0088,2688.7847,50.1549},
	{2146.3752,2747.7520,10.9125},
	{2202.2908,2474.5410,10.9127},
	{2639.8176,1106.0364,10.9127},
	{2112.1296,920.4982,10.9127},
	{1937.0416,-1771.6200,13.4751},
	{-91.8008,-1170.4994,2.4884},
	{-1606.9624,-2713.7676,48.5391},
	{-1675.1785,414.5792,7.1797},
	{-2404.0574,979.5306,45.0239},
	{1595.5406,2198.0520,10.3863},
	{608.5971,1699.6238,6.9922},
	{-1470.0050,1863.2375,32.3521}
};
new Float:DrogasAbastecer[5][3] = {
	{-726.0346,1520.2312,39.1688},
	{-1329.5159,2499.2334,87.0469},
	{-2549.3452,2227.9382,4.7114},
	{-1429.8599,2185.9900,50.4650},
	{-426.7101,2258.0132,42.4297}
};
new Float:DeixandoDrogas[2][3] = {
	{2273.0935,-1042.1615,50.2367},
	{2298.5928,-1781.8463,13.5538}
};
new Float:Latinhas[37][3] = {
	{1919.4543,-2088.9211,13.5816},
	{1920.1440,-2123.2827,13.5848},
	{1175.3402,-1878.8687,13.5765},
	{1093.4054,-1881.3174,13.5469},
	{1102.4594,-1876.7643,13.5469},
	{959.8318,-821.7481,96.4444},
	{974.5941,-814.8570,97.6700},
	{914.9440,-671.0176,117.1938},
	{1071.5637,-777.2383,107.2760},
	{2545.2141,-1035.6591,69.5822},
	{2527.9951,-1056.7031,69.5759},
	{2510.4429,-1030.7483,70.0345},
	{2426.7161,-1017.5425,54.3441},
	{2441.4590,-1979.9978,13.5469},
	{2382.4392,-1940.1761,13.5469},
	{2176.5598,-1344.8451,23.9844},
	{2224.2134,-1409.4204,24.0000},
	{1424.1855,-1319.8253,13.5547},
	{1420.2666,-1355.4493,13.5643},
	{1439.2612,-1324.7502,13.5458},
	{1604.3488,-1060.3590,23.9063},
	{1630.1682,-988.8309,24.0752},
	{1829.5371,-1113.9519,23.8766},
	{1786.1411,-1147.2623,23.8730},
	{1660.6748,-1201.4055,19.7935},
	{1592.9694,-1201.4099,19.8162},
	{1425.5841,-1080.7632,17.5580},
	{1435.4409,-1094.6079,17.5942},
	{1148.7889,-1386.2189,13.8293},
	{734.3256,-1341.2900,13.5255},
	{1322.0441,-1236.9178,13.5469},
	{1461.8387,-1488.1692,13.5469},
	{1537.7135,-1479.5881,9.5000},
	{1516.4315,-1849.2903,13.5469},
	{1420.4170,-1844.5044,13.5469},
	{1338.2338,-1815.8656,13.5502},
	{1337.4501,-1773.7675,13.5469}
};
new Float:MapIconPos[58][3] = {
    {1556.1224,-1629.2106,13.1586},
	{1181.4885,-1309.3250,13.4093},
	{2107.1155,-1068.3652,25.6829},
	{2031.4415,-1415.3073,16.9922},
    {1771.7144,-1655.8201,14.4236},
	{1386.0540,-1015.7602,26.6676},
	{419.7245,-1428.6298,32.4797},
	{2862.3201,-1440.2727,10.9410},
	{-2431.5830,1544.0275,32.0368},
	{1776.8333,-2049.3662,13.5644},
	{623.3184,860.1561,-42.9534},
	{2644.6877,-2038.3588,13.5500},
	{-2180.8816,610.9266,35.1641},
	{2197.3296,-1999.1161,19.5405},
	{1480.7003,-1758.4271,17.5313},
	{1776.8333,-2049.3662,13.5644},
	{565.8999,-2304.5605,0.2333},
	{1041.6371,-1028.2263,31.6374},
	{1567.7448,-1882.4926,13.1481},
	{1309.2073,-1374.3125,13.6252},
	{213.2892,-1437.2351,13.2062},
	{2098.7305,-1804.9253,13.5548},
	{1873.1766,-1683.9338,57.7960},
	{2316.2393,-1638.8606,18.5078},
	{1733.8523,-1586.3459,13.5553},
	{2128.1797,-1126.4047,25.5413},
	{1633.1495,-1170.9047,24.0781},
    {2861.6653,-1405.8640,11.7344},
    {243.5183,66.3445,1003.6406},
    {1477.3245,-1880.2889,13.5469},
    {1990.3060,-1990.8094,13.5469},
	{1828.2477,-1842.6029,13.5781},
	{1945.2451,-1770.4231,13.2434},
	{1767.2935,-2286.3599,26.7960},
	{1175.6183,-1799.5095,33.6363},
	{873.7300,-1628.3906,28.0000},
	{725.4943,-1440.3260,17.6953},
	{697.7910,-1353.5240,28.9446},
	{552.5939,-1506.7219,14.5530},
	{299.9258,-1517.2720,24.6007},
	{454.9222,-1493.9830,31.0979},
	{540.7327,-1297.7850,32.5406},
	{501.3290,-1355.7961,16.1328},
	{1002.4153,-935.5881,48.2118},
	{984.9221,-987.2853,53.2734},
	{1316.6016,-887.8411,45.2266},
	{2531.9443,-1715.5150,13.4909},
	{2491.0833,-1758.7891,13.5469},
	{2401.6462,-1707.7507,19.0884},
	{2180.4106,-2302.6389,13.5469},
	{1675.8083,-2460.5801,13.5547},
	{2116.3132,-2274.6536,20.6760},
	{1845.9636,-1868.8071,13.5781},
	{1909.5448,-1599.1969,14.1250},
	{2244.9802,-1663.0822,15.4766},
	{2112.2898,-1213.2855,23.9655},
	{1022.6393,-1123.2445,23.8705},
	{1349.8267,-1750.8270,13.3647}
};
new MapIconID[] = {
	30,
	22,
	19,
	22,
	52,
	52,
	52,
	52,
	23,
	36,
	11,
	27,
	43,
	23,
	16,
	36,
	9,
	27,
	17,
	61,
	55,
	29,
	48,
	49,
	25,
	27,
	25,
	31,
	42,
	50,
	18,
	24,
	55,
	5,
	30,
	31,
	9,
	60,
	42,
	31,
	45,
	55,
	45,
	55,
	31,
	24,
	19,
	12,
	21,
	51,
	5,
	56,
	12,
	31,
	45,
	45,
	53,
	24
};
new SucosName[][] = {
"Laranja",
"Abacaxi",
"Acerola",
"Mamão",
"Limão",
"Morango",
"Uva",
"Maracuja",
"Framboesa"
};
new ComidasName[][] = {
"Feijoada",
"Lagosta Gourmet",
"Camarão",
"Peixe Frito",
"Filé",
"Salmão",
"Batata Frita",
"Sopa",
"Frango Assado"
};
new ComidasValor[] = {
40,
220,
140,
120,
80,
140,
80,
20,
100
};
new BebidasName[][] = {
"Coca-Cola",
"Sprite",
"Cerveja",
"Fanta",
"Vinho",
"Suco com leite",
"Suco com agua"
};
new BebidasValor[] = {
8,
8,
9,
9,
100,
14,
10
};
new SobremesasName[][] = {
"Pudim de chocolate",
"Sorvete",
"Bolo de chocolate",
"Bomba de chocolate",
"Brigadeiro"
};
new SobremesasValor[] = {
15,
8,
13,
9,
6
};
new AvisoTrabalho[][] = {
	"Inválido",//Inválida
	"Seu trabalho começou, rápido vá colentando as latinhas.",//Desempregado
	"[BAR] Seu trabalho começou, e eu não bebi para dizer isso!",//Barman
	"É um novo dia, parece ser cansativo, pois infelizmente você tem que trabalhar =/",//Assassino
	"[CONCECIONÁRIA] Tá na hora de você começar a trabalhar, vamos você é pago pra que?",//Vendedor de carros
	"[CORRETORA DE IMÓVEIS] Comece a trabalhar, vamos, os imóveis não são vendidos sozinhos.",//Corretor de imóveis
	"[SECURITY LIFE] Seu trabalho começou, tá pensando o que? A vida não é só festa não amigo.",//Segurança
	"[LUXLIMOSINE] Foi dado o inicio de seu trabalho, vamos mexa-se ou nada de salário.",//Motorista Particular
	"[COMPANHIA DE TRANSPORTES PÚBLICOS] Seu trabalho começou, rápido vamos lá, você é pago pra trabalhar eu acho...",//Motorista de ônibus
	"[AREA DE CARGA] Tá na hora de trabalhar amigo, você pode estar triste mas nós estamos felizes",//Caminhoneiro
	"[COOPERATIVA DE PESCA] Seu trabalho começou! Tá nervoso? VÁ PESCAR!",//Pescador
	"[PIZZARIA] Tenho uma má notícia pra você, entretanto boa pra mim, seu trabalho começa agora!",//Entregador de Pizza
    "[YELLOW'S'TAXI] Vamos seu trabalho começa agora, se você está doente, seu salário também vai estar!",//Taxista
	"[YELLOW'S'TAXI] Vamos comece a trabalhar, não quero que as pessoas pensem que é melhor ir aos locais a pé, MEXA-SE!!",//Moto taxista
	"[YELLOW'S'TAXI] Tenho que te falar uma coisa muito importante: seu trabalho começa agora",//Taxista aéreo
	"[AUTO-ESCOLA] Seu trabalho começou, se não aparecer aqui, seu salário não vai aparecer ai!",//Instrutor
	"[LIDER DE TRÁFICO] Seu trabalho começou, não eu não fumei para dizer isso!",//Traficante
	"[NOTICIA] Seu trabalho começou, e se fosse está assistindo TV agora, irá ver eu botando a mão no seu salário.",//Jornalista
	"[HOSPITAL] Seu trabalho começou, se está doente, venha aqui imediatamente, não, não é pra te curarmos!",//Paramédico
	"[EMPRESA DE ADVOGADOS] Venha trabalhar, senão irá pro Tribunal e ninguém daqui irá te defender!",//Advogado
	"[DELEGACIA] Rápido venha até a delegacia, não, não tem crime nenhum, simplesmente seu trabalho começou!",//Policia Militar
    "[DELEGACIA] Rápido venha até a delegacia, não, não tem crime nenhum, simplesmente seu trabalho começou!",//Policia rodoviária
    "[DELEGACIA] Rápido venha até a delegacia, não, não tem crime nenhum, simplesmente seu trabalho começou!",//Swat
    "[DELEGACIA] Rápido venha até a delegacia, não, não tem crime nenhum, simplesmente seu trabalho começou!",//Narcótico
    "[PREFEITURA] Senhor Juiz queremos lhe falar uma coisa que é muito importante para você e para o povo, seu trabalho acaba de começar.",//Juiz
    "[DELEGACIA] Rápido venha até a delegacia, não, não tem crime nenhum, simplesmente seu trabalho começou!",//Delegado
    "[LIXÃO] Amigo seu trabalho começa agora, se não vier será tratado como um lixo para nós e iremos coleta-lo imediatamente!",//Lixeiro
    "[CENTRAL 24/7] Cara quer ouvir uma piada? Pena que eu não sei nenhuma, só vim avisar que seu trabalho começa agora!",//Transporte de Valores
	"Cansado de tanto trabalhar? Que pena, porque seu trabalho começa agora...",//Contrabandista
	"[PREFEITURA] Seu trabalho iniciou, se não vier aqui, o seu salário não vai até ai!",//Receita Federal
	"[FAZENDA] Sinhor o seu trabaio começa agora, vai pranta porque sinaum nois vai fica sem dinhero",//Agricultor
	"Mano seu trampo começou é bom começar a assaltar, senão vamos roubar o pouco que você tem!",//Assaltante
	"[POSTO] Amigo venha trabalhar, é seu salário que paga o combustível do seu veículo, então NÃO RECLAME!!!",//Frentista
	"[CONCECIONÁRIA] Há uma coisa que posso te dizer em mil palavras, mas vou dizer somente em duas, 'VENHA TRABALHAR'",//Locador
	"[PEDREIRA] Seu trabalho começa agora, seu salário está comigo, e se não vier, ele vai continuar aqui!",//Pedreiro
	"[AMMU-NATION] Sei que somos amigos, mas também sou seu chefe, então venha trabalhar!",//Vendedor de armas
	"[OFICINA] Vim interromper sua vida pessoal para te dizer algo muito importante, seu trabalho começou!",//Mecânico
	"[BOATE] Tá na hora de subir no batente. VOCÊ ENTENDEU!",//Prostituta
	"[MORRO] Bora mano trabalhar, a vida né só rosas não!",//Líder de Tráfico
	"[CORRETORA DE SEGUROS] Não tem o que fazer? Que bom pois o seu trabalho acaba de começar...",//Segurador
	"[MARINHA] Você se esforçou muito para chegar até aqui, e é por isso que eu vou lhe dizer: seu trabalho começou!"//Exercito
};
new ProfExp[] = {
	10,//Inválida
	5,//Desempregado
	7,//Barman
	10,//Assassino
	9,//Vendedor de Carros
	6,//Corretor
	7,//Segurança
	7,//Motorista Pa
	5,//Motorista On
	10,//Caminhoneiro
	7,//Pescador
	7,//Entregador de Pizza
	7,//Taxista
	7,//Moto Taxista
	7,//Taxista Aereo
	6,//Instrutor
	5,//Traficante
	10,//Jornalista
	9,//Paramedico
	6,//Advogado
	8,//Militar
	8,//Rodoviario
	9,//Swat
	8,//Narcoticos
	10,//Juiz
	10,//Delegado
	7,//Lixeiro
	9,//Transporte
	9,//Contrabandista
	8,//Receita
	10,//Agricultor
	9,//Assaltante
	6,//Frentista
	5,//Locador
 	10,//Pedreira
  	7,//Vendedor de Armas
   	7,//Mecanico
    8,//Prostituta
    7,//Lider de Tráfico
	7,//Corretor de Seguros
	10//EXERCITO
};
new ProfLevel[] = {
	0,//Inválida
	0,//Desempregado
	0,//Barman
	20,//Assassino
	120,//Vendedor de Carros
	120,//Corretor
	20,//Segurança
	20,//Motorista Pa
	10,//Motorista On
	40,//Caminhoneiro
	0,//Pescador
	0,//Entregador de Pizza
	10,//Taxista
	10,//Moto Taxista
	20,//Taxista Aereo
	70,//Instrutor
	40,//Traficante
	20,//Jornalista
	60,//Paramedico
	90,//Advogado
	50,//Militar
	60,//Rodoviario
	90,//Swat
	70,//Narcoticos
	130,//Juiz
	160,//Delegado
	20,//Lixeiro
	40,//Transporte
	60,//Contrabandista
	70,//Receita
	30,//Agricultor
	60,//Assaltante
	50,//Frentista
	70,//Locador
 	10,//Pedreira
  	50,//Vendedor de Armas
   	50,//Mecanico
    40,//Prostituta
    90,//Lider de Tráfico
	80,//Corretor de Seguros
	110//EXERCITO
};

new HorarioTrabalho[][14] = {
{0,0,0,0,0,0,0,0,0,0,0,0,0,0},//Invalida
{0,0,6,18,6,18,6,18,6,18,6,18,6,12},//Desempregado
{0,0,7,20,7,20,7,20,7,20,0,0,7,20},//Barman
{0,24,0,24,0,24,0,24,0,24,0,24,0,24},//Assassino
{0,0,6,19,6,19,0,0,6,19,6,19,6,15},//Vendedor de carros
{0,0,6,19,6,19,6,15,6,19,0,0},//Corretor de imóveis
{0,0,0,20,0,20,0,20,0,16,0,16,0,20},//Segurança
{0,0,7,22,7,22,7,22,7,22,7,20,7,15},//Motorista Particular
{0,0,6,23,6,23,6,23,6,23,6,23,6,18},//Motorista de Onibus
{0,0,7,17,7,17,7,17,7,17,7,17,7,13},//Caminhoneiro
{0,0,6,18,6,18,6,18,6,18,6,18,6,14},//Pescador
{0,0,12,21,12,21,12,21,12,21,12,21,12,21},//Entregador de Pizzas
{0,0,7,20,7,20,7,20,7,20,7,20,7,20},//Taxista
{0,0,7,20,7,20,7,20,7,20,7,20,7,21},//Moto-Taxista
{0,0,7,20,7,20,7,20,7,20,7,20,7,20},//Aero-Taxista
{0,0,8,16,8,16,8,16,8,16,8,16,8,16},//Instrutor
{0,24,0,24,0,24,0,24,0,24,0,24,0,24},//Traficante
{0,0,7,20,7,20,7,20,7,20,7,20,7,14},//Jornalista
{0,0,5,20,5,20,5,20,5,20,5,20,5,16},//Paramédico
{0,0,9,18,9,18,9,18,9,18,9,18,9,18},//Advogado
{0,0,5,20,5,20,5,20,5,20,5,20,5,13},//Cop Militar
{0,0,12,3,12,3,12,3,12,3,12,3,12,3},//Cop Rodoviário
{0,24,0,24,0,24,0,24,0,24,0,24,0,24},//Cop Swat
{0,0,8,16,8,16,8,16,8,16,8,16,5,13},//Cop Narcóticos
{0,0,9,18,9,18,9,18,9,18,9,18,9,18},//Juiz
{0,24,0,24,0,24,0,24,0,24,0,24,0,24},//Delegado
{0,0,6,18,6,18,6,18,6,18,6,18,6,12},//Lixeiro
{0,0,10,16,10,16,10,16,10,16,10,16,10,16},//Transporte de Valores
{0,0,8,16,8,16,8,16,8,16,8,16,5,13},//Contrabandista
{0,0,8,17,8,17,8,17,8,17,8,17,5,12},//Receita Federal
{0,0,4,15,4,15,4,15,4,15,4,15,4,10},//Agricultor
{0,0,10,15,10,15,10,15,10,15,10,15,10,15},//Assaltante
{0,0,7,20,7,20,7,20,7,20,7,20,7,20},//Frentista
{0,0,8,24,8,24,8,24,8,24,8,24,0,0},//Locador De Carros
{0,0,7,17,7,17,7,17,7,17,7,17,7,10},//Pedreira
{0,0,11,16,11,16,11,16,11,16,11,16,11,15},//Vendedor de Armas
{0,0,7,19,7,19,7,19,7,19,7,19,7,10},//Mecânico
{0,0,19,4,19,4,19,4,19,4,19,4,19,4},//Prostituta
{0,24,0,24,0,24,0,24,0,24,0,24,0,24},//Líder do Tráfico
{0,0,6,19,6,19,6,15,6,19,0,0},//Corretor de Seguros
{0,24,0,24,0,24,0,24,0,24,0,24,0,24}//Exército
};

new ProfExtName[][] = {
	"Inválida",
	"Desempregado",
	"Barman",
	"Assassino",
	"Vendedor de carros",
	"Corretor",
	"Segurança",
	"Motorista Particular",
	"Motorista de Ônibus",
	"Caminhoneiro",
	"Pescador",
	"Entregador de Pizza",
	"Taxista",
	"Mototaxista",
	"Taxista Aéreo",
	"Instrutor de Direção",
	"Traficante",
	"Jornalista",
	"Paramédico",
	"Advogado",
	"Cop Militar",
	"Cop Rodoviário",
	"Cop Elite/SWAT",
	"Cop Narcoticos",
	"Juiz",
	"Delegado",
	"Lixeiro",
	"Transporte de Valores",
	"Contrabandista",
	"Receita Federal",
 	"Agricultor",
 	"Assaltante",
 	"Frentista",
 	"Locador de Carros",
 	"Pedreira",
 	"Vendedor de Armas",
 	"Mecânico",
 	"Prostituta",
 	"Líder de Tráfico",
 	"Corretor de seguros",
 	"EXERCITO"
};
new ProfGT[][] = {
	"Invlida",
	"Desempregado",
	"Barman",
	"Assassino",
	"Vendedor de carros",
	"Corretor",
	"Segurana",
	"Motorista Particular",
	"Motorista de §nibus",
	"Caminhoneiro",
	"Pescador",
	"Entregador de Pizza",
	"Taxista",
	"Mototaxista",
	"Taxista Areo",
	"Instrutor de Direo",
	"Traficante",
	"Jornalista",
	"Paramdico",
	"Advogado",
	"Pol¢cia Militar",
	"Pol¢cia Rodoviria",
	"Pol¢cia SWAT",
	"Pol¢cia Narc¦ticos",
	"Juiz",
	"Delegado",
	"Lixeiro",
	"Transporte de Valores",
	"Contrabandista",
	"Receita Federal",
 	"Agricultor",
 	"Assaltante",
 	"Frentista",
 	"Locador de Carros",
 	"Pedreira",
 	"Vendedor de Armas",
 	"Mecanico",
 	"Prostituta",
 	"L¢der de Trfico",
 	"Corretor de seguros",
 	"EXERCITO"
};
new IntSalario[] = {
	0,//Inválida
	350,//Desempregado
	1500,//Barman
	400,//Assassino
	350,//Vendedor de carros
	350,//Corretor
	2000,//Segurança
	2000,//Motorista Partic
	1500,//Motorista Onibus
	800,//Caminhoneiro
	1100,//Pescador
	1300,//Entregador Pizza
	1500,//Taxista
	1500,//Mototaxista
	2500,//Aero Taxista
	850,//Instrutor
	1200,//Traficante
	1500,//Jornalista
	1000,//Paramedico
	1000,//Advogado
	1400,//Cop Militar
	1700,//Cop Rodoviaria
	2000,//Cop Swat
	2000,//Cop Narcoticos
	4000,//Juiz
	4500,//Delegado
	1000,//Lixeiro
	800,//Transporte Valores
	800,//Contrabandista
	3000,//Receita Federal
	1200,//Agricultor
	600,//Assaltante
	1200,//Frentista
	1000,//Locador de Carros
	1500,//Pedreira
	1400,//Vendedor de Armas
	1000,//Mecanico
	800,//Prostituta
	2000,//Lider de Trafico
	1400,//Corretor de Seguros
	4000//EXERCITO
};
new StringsSalario[][] = {
	"invalido",
	"Seu seguro desemprego foi depositado, não vai procurar emprego? $350",
	"O Life's Club depositou seu salário: $1000",
	"A Agência de crimes de Los Santos depositou seu salário $400",
	"A Revendedora Your Life Car's depositou seu salário: $350",
	"A Imobiliária Los Santos imoveis depositou seu salário: $350",
	"A SecurityLife depositou seu salário: $2000",
	"A LuxLimosine depositou seu salário: $2000",
	"A Companhia de Transportes públicos depositou seu salário: $2000",
	"A Companhia de Transportes RoadTrain depositou seu salário: $800",
	"Salário da cooperativa recebido: $1000",
	"A Well Stacked Pizza Co. depositou seu salário: $900",
	"A Yellow's Taxi depositou seu salário: $1500",
	"A Yellow's Taxi depositou seu salário: $1500",
	"A Air Yellow's Taxi depositou seu salário: $2500",
	"A Auto-escola de Los Santos depositou seu salário: $850",
	"A Boca de fumo que você comanda rendeu: $1200",
	"O Diretor da Folha de Los Santos depositou seu salário: $1500",
	"O Hospital Geral de Los Santos depositou seu salário: $1000",
	"A Empresa de Advogados associados depositou seu salário: $1000",
	"A Delegacia de Los Santos depositou seu salário: $1200",
	"A Delegacia de Los Santos depositou seu salário $1400",
	"A Delegacia de Los Santos depositou seu salário $2000",
	"A Delegacia de Los Santos depositou seu salário $2000",
	"O Governo Federal depositou seu salário: $4000",
	"A Prefeitura de Los Santos depositou seu salário: $4500",
	"O Lixão de Los Santos depositou seu salário: $1000",
	"A Central 24/7 depositou seu salário: $800",
	"Contrabando lhe gerou: $800",
	"A Prefeitura de Los Santos depositou seu salário: 3000",
	"A Fazenda depositou seu salário: $1200",
	"A partilha dos roubos deu: $600",
	"A Motos S/A LTDA depositou seu salário: $1200",
	"A Los Santos Company CAR depositou seu salário: $1000",
	"A Pedreira de Las Venturas depositou seu salário: $1500",
	"A Ammu Nation depositou seu salário: $1400",
	"A Pay 'n' Spray depositou seu salário: $1000",
	"A Boate depositou seu salário: $800",
	"Você recebeu os lucros do tráfico de drogas na cidade: R$2000",
	"A Empresa de seguros Virtual SA depositou seu salário: R$1400",
	"A Marinha depositou seu salário: R$4000"
};
new ProfColors[] = {
	COLOR_UNLOGGED,
	COLOR_DESEMPREGADO,
	COLOR_BARMAN,
	COLOR_ASSASSINO,
	COLOR_VENDEDOR_DE_CARROS,
	COLOR_CORRETOR,
	COLOR_SEGURANÇA,
	COLOR_MOTORISTA_PARTICULAR,
	COLOR_MOTORISTA_DE_ONIBUS,
	COLOR_CAMINHONEIRO,
	COLOR_PESCADOR,
	COLOR_ENTREGADOR_PIZZA,
	COLOR_TAXISTA,
	COLOR_MOTOTAXI,
	COLOR_TAXI_AEREO,
	COLOR_INSTRUTOR,
	COLOR_TRAFICANTE,
	COLOR_JORNALISTA,
	COLOR_PARAMEDICO,
	COLOR_ADVOGADO,
	COLOR_COP_MILITAR,
	COLOR_COP_RODOVIARIO,
	COLOR_COP_SWAT,
	COLOR_COP_NARCOTICOS,
	COLOR_JUIZ,
	COLOR_DELEGADO,
    COLOR_LIXEIRO,
    COLOR_TRANSPORTE_DE_VALORES,
    COLOR_CONTRABANDISTA,
    COLOR_RECEITA_FEDERAL,
    COLOR_AGRICULTOR,
    COLOR_ASSALTANTE,
    COLOR_FRENTISTA,
    COLOR_LOCADOR_DE_CARROS,
    COLOR_PEDREIRA,
    COLOR_VENDEDOR_DE_ARMAS,
    COLOR_MECANICO,
    COLOR_PROSTITUTA,
    COLOR_LIDER_DE_TRAFICO,
    COLOR_CORRETOR_SEGUROS,
    COLOR_EXERCITO
};
new Float:Hospitais[4][4] = {
	{-2651.6501,634.1177,14.4531,180.0},//Hospital de SF
	{1173.5842,-1324.5615,15.1953,15.19},
	{2031.9415,-1404.3578,17.2614,17.2614},
	{1582.5615,1768.7921,10.8203,93.7454}
};
new Float:ProfPos[41][3] = {
	{223.0134,110.3193,999.0156},//Nothing
	{1742.9363,-1860.3250,13.5789},//Desempregado
	{1833.0266,-1682.5698,13.4905},//Barman
	{2420.3650,-1277.3169,24.6585},//Assassino
	{554.7894,-1239.5341,17.2017},//Vendedor
	{942.9459,-1743.0730,13.5546},//Corretor
	{1218.5189,-1813.0267,16.5938},//Segurança
	{1218.5189,-1813.0267,16.5938},//Motorista
	{1753.7489,-1893.6107,13.5571},//Motorista de ônibus
	{-551.8864,2593.8428,53.9348},//Caminhoneiro
	{723.2698,-1494.2714,1.9343},//Pescador
	{2100.5085,-1806.6075,13.5547},//EPizza
	{1654.7979,-1074.3058,23.8984},//Taxi
	{1654.7979,-1074.3058,23.8984},//MTaxi
	{1654.7979,-1074.3058,23.8984},//ATaxi
	{1766.6227,-2038.8000,13.5212},//Instrutor
	{2182.7061,-1074.6581,55.5280},//Traficante
	{739.4120,-1355.6163,13.5000},//Jornalista
	{1172.4821,-1323.4320,15.4032},//Paramédico
	{1788.7454,-1295.3768,13.4763},//Advogado
	{1546.0544,-1675.3378,13.5616},//Polícia Militar
	{1546.0544,-1675.3378,13.5616},//Polícia Rodoviária
	{1546.0544,-1675.3378,13.5616},//Polícia Swat/Elite
	{1546.0544,-1675.3378,13.5616},//Polícia Narcoticos
	{1480.9635,-1762.8883,18.7958},//Juiz
	{1480.9635,-1762.8883,18.7958},//Delegado
	{2197.3296,-1999.1161,19.5405},//Lixeiro
	{2546.9211,1963.0864,10.8203},//Transporte de Valores
	{2730.0046,-2452.3933,17.5937},//Contrabandista
	{1480.9635,-1762.8883,18.7958},//Receita Federal
	{-1060.5527,-1195.2561,129.5891},//Agricultor
	{2420.3650,-1277.3169,24.6585},//Assaltante
	{1929.5538,-1779.9630,13.5469},//Frentista
	{205.2888,-1459.2094,13.0272},//Locador de Carros
	{817.2215,856.4513,12.7891},//Pedreira
	{2398.6543,-1979.9775,13.5469},//Vendedor de Armas
	{2074.8208,-1837.0865,13.5545},//Mecânico
	{2421.6042,-1224.7599,25.2050},//Prostituta
	{2182.7061,-1074.6581,55.5280},//Lider de Trafico
	{1218.5189,-1813.0267,16.5938},//Corretor de seguros
	{1546.0544,-1675.3378,13.5616}//EXERCITO
};
new ProfSkin[] = {
	0,//Nothing
	0,//Desempregado
	171,//Barman
	127,//Assassino
	187,//Vendedor
	59,//Corretor
	164,//Segurança
	255,//Motorista Particular
	112,//Motorista de ônibus
	95,//Caminhoneiro
	35,//Pescador
	155,//Entregador De Pizza
	234,//Taxista
	52,//Moto-Taxi
	61,//Aero-Taxi
	188,//Instrutor
	28,//Traficante
	37,//Jornalista
	276,//Paramedico
	147,//Advogado
	282,//COP Militar
	283,//COP Rodoviário
 	285,//COP Swat
 	126,//COP Narcóticos
	59,//Juiz
	125,//Delegado
	137,//Lixeiro
	71,//Transportador De Valores
	127,//Contrabandista
	165,//Receita Federal
	159,//Agricultor
	19,//Assaltante
	59,//FRENTISTA
	147,//Locador De Carros
	27,//Pedreira
	179,//Vendedor de Armas
	50,//Mecânico
	246,//Prostituta
	29,//Lider de Trafico
	17,//Corretor de seguros
	287//EXERCITO
};
new WeatherName[][] = {
	"Super ensolarado, 40 graus",
	"Ensolarado, 30 graus",
	"Super ensolarado, com smog, 35 graus",
	"Ensolarado, com smog, 29 graus",
	"Nublado, 25 graus",
	"Ensolarado, 30 graus",
	"Super ensolarado, 40 graus",
	"Nublado, 25 graus",
	"Tempestade, ventos fortes e trovões, 20 graus",
	"Neblina, 15 graus",
	"Ensolarado, 35 graus",
	"Super ensolarado, 45 graus",
	"Nublado, 30 graus",
	"Super ensolarado, 38 graus",
	"Ensolarado, 28 graus",
	"Nublado, 24 graus",
	"Chuvoso, 22 graus",
	"Super ensolarado, 50 graus",
	"Ensolarado, 40 graus",
	"Tempestade de areia, 45 graus"
};
//Sabores
new SaborName2[][] = {
"Napolitano",
"Chocolate",
"Flocos"
};
new SaborValor2[] = {
32,
25,
30
};
new SaborName[][] = {
	"Milho verde",
	"Morango",
	"Leite Condensado",
	"Flocos",
	"Creme",
	"Abacaxi",
	"Chocolate",
	"Limão",
	"Tutti-Fruti"
};
new SaborValor[] = {
	5,
	5,
	7,
	5,
	4,
	5,
	7,
	4,
	5
};
//Hamburguers
new HamburguersName[][] = {
"X-Salada",
"X-Burger",
"X-Bacon",
"X-Frango",
"X-Tudo",
"Cachorro quente"
};
new HamburguersPrice[] = {
7,
5,
8,
7,
10,
6
};
//Armas Nomes
new weaponname[][] = {
	"Mão livre",
	"Soco Inglês",
	"Taco de Golfe",
	"Cacetete",
	"Faca",
	"Taco de Baseball",
	"Shovel",
	"Taco de Sinuca",
	"Katana",
	"Motosserra",
	"Vibrador roxo de duas pontas",
	"Vibrador branco grande",
	"Vibrador branco médio",
	"Vibrador prata pequeno",
	"Flores",
	"Bengala",
	"Granada",
	"Teargas",
	"Coquetel Molotov",
	"Lança Foguetes",
	"Lança-Foguetes Tele-guiado",
	"Hydra Rocket",
	"Pistola",
	"Silenced Pistol",
	"Desert Eagle",
	"Escopeta Calibre 12",
	"Escopeta de Cano Serrado",
	"Escopeta de Combate",
	"Micro Uzi",
	"MP5",
	"AK47",
	"M4",
	"Tec9",
	"Country Rifle"
};
new valorarma[] = {
	0,
	500,
	600,
	650,
	750,
	350,
	400,
	300,
	800,
	1000,
	100,
	100,
	100,
	100,
	100,
	150,
	300,
	300,
	0,
	0,
	0,
	0,
	800,
	1000,
	3000,
	1800,
	6000,
	7500,
	8000,
	5500,
	7500,
	9000,
	8000,
	4000
};
new armamuni[] = {
	0,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	4,
	4,
	0,
	0,
	0,
	0,
	100,
	100,
	100,
	46,
	80,
 	80,
 	300,
 	300,
  	150,
  	150,
  	300,
  	80,
  	0
};

new ProfWeapons[][6] = {
	{0,0,0,0,0,0},//nothing
	{5,1,0,0,0,0},//desempregado
	{4,1,0,0,0,0},//barman
	{4,1,0,0,0,0},//assassino
	{5,1,0,0,0,0},//vendedor
	{5,1,0,0,0,0},//corretor
	{3,1,0,0,0,0},//segurança
	{5,1,0,0,0,0},//motorista particular
	{5,1,0,0,0,0},//motorista de onibus
	{5,1,0,0,0,0},//caminhoneiro
	{5,1,0,0,0,0},//pescador
	{5,1,0,0,0,0},//entregador
	{5,1,0,0,0,0},//taxista
	{5,1,0,0,0,0},//mototaxi
   	{5,1,0,0,0,0},//taxi aereo
	{5,1,0,0,0,0},//instrutor
	{5,1,0,0,0,0},//traficante
	{5,1,0,0,0,0},//jornalista
	{5,1,0,0,0,0},//paramédico
	{5,1,0,0,0,0},//advogado
	{3,1,0,0,0,0},//cop militar
	{3,1,0,0,0,0},//rodoviario
	{3,1,0,0,0,0},//swat
	{3,1,0,0,0,0},//cop narcoticos
	{4,1,0,0,0,0},//Juíz
	{3,1,0,0,0,0},//Delegado
	{5,1,0,0,0,0},//lixeiro
	{3,1,0,0,0,0},//transporte valores
	{4,1,0,0,0,0},//contrabandista
	{3,1,0,0,0,0},//receita
	{5,1,0,0,0,0},//agricultor
	{4,1,0,0,0,0},//assaltante
	{5,1,0,0,0,0},//frentista
	{5,1,0,0,0,0},//locador
	{5,1,0,0,0,0},//pedreira
	{4,1,0,0,0,0},//vendedor armas
	{5,1,0,0,0,0},//mecanico
	{3,1,0,0,0,0},//prostituta
	{4,1,0,0,0,0},//lider de trafico
	{5,1,0,0,0,0},//Corretor de seguros
	{3,1,0,0,0,0}//exercito
};
//Desmanche
new Veiculoprocurado;
new Veiculosprocurados[MAX_DESMANCHEVEICULO] = {
	463,
	461,
	411,
	468,
	541,
	424,
	402,
	415,
	562,
	587,
	565,
	521,
	434,
	559,
 	400,
 	522,
 	535,
 	560,
 	451
};
new Veiculosprocuradosnome[MAX_DESMANCHEVEICULO][32] = {
	"Freeway",
	"PCJ-600",
	"Infernus",
	"Sanchez",
	"Bullet",
	"BjInject",
	"Buffalo",
	"Cheetah",
	"Elegy",
	"Euros",
	"Flash",
	"FCR-900",
	"HotKnife",
	"Jester",
	"Landstal",
	"NRG-500",
	"Slamvam",
	"Sultan",
	"Turismo"
};

enum PickupsArguments {
pickupmodel,
pickuptype,
Float:pickupposx,
Float:pickupposy,
Float:pickupposz
}

new Float:Pickups[][PickupsArguments] = {
	{362,1,1420.2501,2881.3828,10.8203},
	{350,1,-1609.9634,674.0835,-5.2422},
	{356,1,-1608.0623,674.1035,-5.2422},
	{355,1,-1603.5215,674.7878,-5.2422},
	{348,1,-1609.7281,679.0164,-5.2422},
	{357,1,-1608.2559,678.6394,-5.2422},
	{372,1,-1606.7788,678.6942,-5.2422},
	{353,1,-1603.8494,678.8831,-5.2422},
	{343,1,-1605.1569,678.0090,-5.2422},
	{1272,1,-1600.4955,863.6196,7.6875},
	{1240,1,-2655.5859,637.5977,14.4531},
	{1253,1,-318.5863,1535.5477,75.5625},
	{367,1,-312.4564,1515.9036,75.3594},
	{1273,1,2218.8909,-1144.5692,25.7929},
	{1273,1,1027.2871,-972.7601,42.5321},
	{1273,1,329.0426,-1515.0957,35.8672},
	{1273,1,892.0764,-1644.6343,13.5469},
	{1273,1,1909.8356,-1601.7092,13.5482},
	{1273,1,1863.7584,-1601.7079,13.5443},
	{1243,1,1389.0552,1768.4464,10.8203},
	{1244,1,-1248.6545,-96.2660,14.1484},
	{1244,1,1422.8640,-2432.5745,13.0956},
	{seta,1,1846.6281,-1868.1149,13.5781},
	{seta,1,1494.4365,1305.2708,1093.2891},
	{bancoi,1,1771.7144,-1655.8201,14.4236},
	{bancoi,1,1386.0540,-1015.7602,26.6676},
	{bancoi,1,419.7245,-1428.6298,32.4797},
	{bancoi,1,2862.3201,-1440.2727,10.9410},
	{bancoi,1,2306.8198,-16.0497,26.7496},
	{1212,1,2316.3098,-12.5673,26.7422},
	{1212,1,2316.3083,-10.0476,26.7422},
	{1212,1,2316.2732,-7.2987,26.7422},
	{bancoi,1,2309.4019,-1.9465,26.7422},
	{seta,1,1990.3060,-1990.8094,13.5469},
	{seta,1,315.6061,-127.8440,1004.0625},
	{seta,1,2459.0925,-1690.8879,13.5506},
	{seta,1,2462.8713,-1698.1802,1013.5078},
	{seta,1,2521.4871,-1679.4111,15.4272},
	{seta,1,2525.4128,-1679.2469,1015.4986},
	{seta,1,243.5183,66.3445,1003.6406},
	{seta,1,245.7224,109.9319,1003.2188},
	{seta,1,-2158.9731,642.4365,1052.3817},
	{seta,1,1735.8115,-1587.6827,13.5422},
	{seta,1,1310.4824,-1368.2488,13.5471},
	{seta,1,389.0653,173.7855,1008.3828},
	{seta,1,2861.6653,-1405.8640,11.7344},
	{seta,1,278.6607,-1617.1837,97.4182},
	{seta,1,2695.6543,-1704.8678,11.8438},
	{seta,1,-1463.6781,1556.7661,1052.5313},
	{seta,1,452.4577,-1479.4701,30.8395},
	{seta,1,497.9007,-1358.6243,16.5186},
	{seta,1,458.6580,-1500.4800,31.0444},
	{seta,1,2245.2300,-1663.8357,15.4766},
	{seta,1,2111.6140,-1212.7043,23.9647},
	{seta,1,2308.3047,-1644.2471,14.8270},
	{seta,1,2421.2444,-1222.3062,25.3649},
	{seta,1,1833.9900,-1681.7484,13.4503},
	{seta,1,1365.3528,-1279.0581,13.5469},
	{seta,1,2400.6978,-1979.9229,13.5469},
	{seta,1,1553.1730,-1675.0323,16.1953},
	{seta,1,1631.3468,-1168.5192,24.0781},
	{seta,1,1315.4430,-900.6385,39.5781},
	{seta,1,1929.8149,-1776.3326,13.5469},
	{seta,1,999.4342,-920.1180,42.1797},
	{seta,1,1352.4203,-1758.5322,13.5078},
	{seta,1,1832.4796,-1842.6014,13.5781},
	{seta,1,811.6748,-1616.1306,13.5469},
	{seta,1,204.3330,-166.6950,1000.5234},
	{seta,1,207.0562,-138.3951,1003.5078},
	{seta,1,226.2940,-7.4315,1002.2109},
	{seta,1,207.7106,-109.3912,1005.1328},
	{seta,1,203.7780,-48.4924,1001.8047},
	{seta,1,502.0535,-69.5163,998.7578},
	{seta,1,1204.9303,-11.9801,1000.9219},
	{seta,1,493.3910,-22.4116,1000.6797},
	{seta,1,296.9226,-111.0700,1001.5156},
	{seta,1,246.7840,63.9002,1003.6406},
	{seta,1,832.8324,7.4180,1004.1797},
	{seta,1,-31.0222,-89.7937,1003.5469},
	{seta,1,363.4130,-74.5787,1001.5078},
	{seta,1,1199.1923,-918.6677,43.1197}
};

enum carrovalorinfo {
Info_CarID,
Info_CarName[256],
Info_CarPrice
}

new CarrosVenda[][carrovalorinfo] = {
	{400,"Landstalker",30000},
	{401,"Bravura",25000},
	{402,"Buffalo",95000},
	{403,"Linerunner",0},
	{404,"Perenial",17000},
	{405,"Sentinel",40000},
	{406,"Pedreira",0},
	{407,"Bombeiros",0},
	{408,"Caminhao de Lixo",0},
	{409,"Limosine",120000},
	{410,"Manana",4000},
	{411,"Infernus",400000},
	{412,"Voodoo",20000},
	{413,"Pony",0},
	{414,"Mule",0},
	{415,"Cheetah",170000},
	{416,"Ambulancia",0},
	{417,"Leviathan",0},
	{418,"Moonbeam",0},
	{419,"Esperanto",30000},
	{420,"Taxi",0},
	{421,"Washington",37000},
	{422,"Bobcat",27000},
	{423,"Whoopee",0},
	{424,"BF Injection",36000},
	{425,"Hunter",0},
	{426,"Premier",33000},
	{427,"Enforcer",0},
	{428,"Carro Forte",0},
	{429,"Banshee",100000},
	{430,"Predator",0},
	{431,"Onibus",0},
	{432,"Rhino",0},
	{433,"Barracks",0},
	{434,"Hotknife",110000},
	{435,"Trailer",0},
	{436,"Previon",32000},
	{437,"Onibus",0},
	{438,"Taxi",0},
	{439,"Stallion",32000},
	{440,"Rumpo",0},
	{441,"RC Bandit",0},
	{442,"Romero",0},
	{443,"Packer",0},
	{444,"Monster",0},
	{445,"Admiral",42000},
	{446,"Squalo",360000},
	{447,"Seasparrow",0},
	{448,"MotoPizza",0},
	{449,"Bonde",0},
	{450,"Trailer",0},
	{451,"Turismo",350000},
	{452,"Speeder",380000},
	{453,"Reefer",0},
	{454,"Tropic",160000},
	{455,"Flatbed",0},
	{456,"Yankee",0},
	{457,"Caddy",0},
	{458,"Solair",33000},
	{459,"Berkley's RC Van",0},
	{460,"Skimmer",260000},
	{461,"PCJ-600",10000},
	{462,"Faggio",2000},
	{463,"Freeway",18000},
	{464,"RC Baron",0},
	{465,"RC Raider",0},
	{466,"Glendale",0},
	{467,"Oceanic",47000},
	{468,"Sanchez",12000},
	{469,"Sparrow",210000},
	{470,"Patriot",0},
	{471,"Quadriciclo",9000},
	{472,"Coastguard",0},
	{473,"Dinghy",7000},
	{474,"Hermes",57000},
	{475,"Sabre",24000},
	{476,"Rustler",0},
	{477,"ZR-350",280000},
	{478,"Walton",0},
	{479,"Regina",0},
	{480,"Comet",95000},
	{481,"BMX",100},
	{482,"Burrito",0},
	{483,"Camper",19000},
	{484,"Marquis",460000},
	{485,"Baggage",0},
	{486,"Dozer",0},
	{487,"Maverick",700000},
	{488,"News Chopper",0},
	{489,"Rancher",52000},
	{490,"FBI Rancher",0},
	{491,"Virgo",0},
	{492,"Greenwood",30000},
	{493,"Jetmax",450000},
	{494,"Hotring",0},
	{495,"Sandking",0},
	{496,"Blista Compact",33000},
	{497,"Helicoptero Policial",0},
	{498,"Boxvillde",0},
	{499,"Benson",0},
	{500,"Mesa",0},
	{501,"RC Goblin",0},
	{502,"Hotring Racer A",0},
	{503,"Hotring Racer B",0},
	{504,"Bloodring Banger",0},
	{505,"Rancher",0},
	{506,"Super GT",230000},
	{507,"Elegant",40000},
	{508,"Journey",0},
	{509,"Bike",100},
	{510,"Mountain Bike",100},
	{511,"Beagle",0},
	{512,"Cropduster",0},
	{513,"Stunt",0},
	{514,"Tank",0},
	{515,"Roadtrain",26000},
	{516,"Nebula",36000},
	{517,"Majestic",32000},
	{518,"Buccaneer",0},
	{519,"Shamal",34000},
	{520,"Hydra",0},
	{521,"FCR-900",50000},
	{522,"NRG-500",80000},
	{523,"HPV1000",0},
	{524,"Cement Truck",0},
	{525,"Reboque",0},
	{526,"Fortune",0},
	{527,"Cadrona",0},
	{528,"FBI Truck",0},
	{529,"Willard",0},
	{530,"Forklift",0},
	{531,"Tractor",0},
	{532,"Combine",0},
	{533,"Feltzer",40000},
	{534,"Remington",60000},
	{535,"Slamvan",19000},
	{536,"Blade",42000},
	{537,"Freight",0},
	{538,"Streak",0},
	{539,"Vortex",0},
	{540,"Vincent",43000},
	{541,"Bullet",120000},
	{542,"Clover",5000},
	{543,"Sadler",40000},
	{544,"Firetruck",0},
	{545,"Hustler",0},
	{546,"Intruder",28000},
	{547,"Primo",30000},
	{548,"Cargobob",0},
	{549,"Tampa",},
	{550,"Sunrise",95000},
	{551,"Merit",95000},
	{552,"Utility",0},
	{553,"Nevada",0},
	{554,"Yosemite",0},
	{555,"Windsor",0},
	{556,"Monster",0},
	{557,"Monster",0},
	{558,"Uranus",80000},
	{559,"Jester",95000},
	{560,"Sultan",105000},
	{561,"Stratium",95000},
	{562,"Elegy",105000},
	{563,"Raindance",0},
	{564,"RC Tiger",0},
	{565,"Flash",45000},
	{566,"Tahoma",37000},
	{567,"Savanna",51000},
	{568,"Bandito",0},
	{569,"Freight Flat",43000},
	{570,"Streak Carriage",13000},
	{571,"Kart",0},
	{572,"Mower",0},
	{573,"Dune",0},
	{574,"Sweeper",0},
	{575,"Broadway",0},
	{576,"Tornado",0},
	{577,"AT-400",0},
	{578,"DFT-30",0},
	{579,"Huntley",0},
	{580,"Stafford",0},
	{581,"BF-400",30000},
	{582,"Reportagem",0},
	{583,"Tug",0},
	{584,"Trailer",0},
	{585,"Emperor",41000},
	{586,"Wayfarer",110000},
	{587,"Euros",30000},
	{588,"Hotdog",0},
	{589,"Club",47000},
	{590,"Freight Box",0},
	{591,"Trailer",0},
	{592,"Andromada",0},
	{593,"Dodo",0},
	{594,"RC Cam",0},
	{595,"Launch",0},
	{596,"Viatura Policial",0},
	{597,"Viatura Policial",0},
	{598,"Viatura Policial",0},
	{599,"Caminhoneta Policial",0},
	{600,"Picador",0},
	{601,"S.W.A.T",0},
	{602,"Alpha",74000},
	{603,"Phoenix",100000},
	{604,"Glendale",0},
	{605,"Sadler",0},
	{606,"Luggage",0},
	{607,"Luggage",0},
	{608,"Stairs",0},
	{609,"Boxville",0},
	{610,"Tiller",0}
};

//SKINS
enum skinsinfo {
	skin_id,
	skin_loja,
	skin_valor
}
new SkinsType[][skinsinfo] = {
	{0, 	Binco, 			100},
	{7, 	Binco, 			150},
	{9,  	DidierSachs,    250},
	{10, 	Binco, 			125},
	{11,  	DidierSachs,    200},
	{12, 	Binco, 			200},
	{13, 	SubUrban, 		150},
	{14, 	SubUrban, 		150},
	{15, 	Binco, 			150},
	{16,   	Loja_invalida,  0},
	{17, 	Binco, 			200},
	{18,  	Victim,         150},
	{19,   	SubUrban,    	150},
	{20, 	Binco, 			150},
	{21,   	SubUrban,    	175},
	{22,   	SubUrban,    	150},
	{23,   	SubUrban,    	150},
	{24,   	SubUrban,    	150},
	{25,   	SubUrban,    	150},
	{26,   	ProLaps,    	200},
	{27,   	Loja_invalida,  0},
	{28,   	SubUrban,    	200},
	{29,   	SubUrban,    	200},
	{30,   	SubUrban,    	200},
	{31,   	Victim,         150},
	{32,   	Victim,         150},
	{33,   	Victim,         150},
	{34,   	Victim,         150},
	{35,   	Victim,         150},
	{36,  	Binco,    		150},
	{37,   	Victim,         150},
	{38,  	Binco,    		150},
	{39,  	Binco,    		150},
	{40,  	DidierSachs,    200},
	{41,  	Binco,    		150},
	{43,  	Binco,    		150},
	{44,  	Binco,    		150},
	{45,  	Victim,         150},
	{46,  	DidierSachs,    250},
	{47,  	Binco,    		200},
	{48,  	Binco,    		200},
	{49,  	Victim,         200},
	{50,   	Loja_invalida,  0},
	{51,   	ProLaps,    	150},
	{52,   	ProLaps,    	150},
	{54, 	Binco, 			125},
	{55, 	Binco, 			200},
	{56,  	Binco,    		150},
	{57,   	DidierSachs,    300},
	{58,   	Binco,      	150},
	{59,   	DidierSachs,    250},
	{60,   	Binco,      	200},
	{61,   	Victim,  		250},
	{62,   	Victim,  		125},
	{63,  	SubUrban,       150},
	{64,  	SubUrban,       150},
	{66,  	SubUrban,       150},
	{67,  	SubUrban,       150},
	{68,   	Loja_invalida,  0},
	{69,  	Binco,    		150},
	{70,   	Victim,  		150},
	{72, 	Binco, 			200},
	{73,   	Victim,  		150},
	{74, 	Binco, 			200},
	{75,   	Victim,  		150},
	{77,   	Victim,  		125},
	{78,   	Victim,  		125},
	{79,   	Victim,  		125},
	{80,  	SubUrban,       175},
	{81,  	SubUrban,       175},
	{82,   	DidierSachs,    300},
	{83,   	DidierSachs,    300},
	{84,   	DidierSachs,    300},
	{87,  	SubUrban,       150},
	{88,  	Binco,		    150},
	{89,  	Binco,       	150},
	{90,  	SubUrban,       150},
	{92,   	Victim,         150},
	{93,  	Binco,       	150},
	{94, 	Binco, 			125},
	{95, 	Binco, 			125},
	{96,   	ProLaps,        150},
	{97,   	Victim,         150},
	{98, 	Binco, 			200},
	{99,   	ProLaps,        150},
	{100,   ProLaps,    	150},
	{101, 	Binco, 			150},
	{102, 	SubUrban, 		150},
	{103, 	SubUrban, 		150},
	{104, 	SubUrban, 		150},
	{105, 	SubUrban, 		150},
	{106, 	SubUrban, 		150},
	{107, 	SubUrban, 		150},
	{108,   SubUrban,   	150},
	{109,   SubUrban,   	150},
	{110, 	SubUrban,   	150},
	{111,   DidierSachs,    350},
	{112,   DidierSachs,    350},
	{113,   DidierSachs,    400},
	{114, 	SubUrban, 		150},
	{115, 	SubUrban, 		150},
	{116, 	SubUrban, 		150},
	{117,   SubUrban,   	200},
	{118,   SubUrban,   	200},
	{120,   SubUrban,   	200},
	{121,   SubUrban,   	200},
	{122,   SubUrban,   	200},
	{123,   SubUrban,   	200},
	{124,   DidierSachs,    300},
	{125,   DidierSachs,    400},
	{126,   DidierSachs,    400},
	{127,   DidierSachs,    400},
	{128,   Victim,    		125},
	{129,   Victim,    		125},
	{130,   Victim,    		125},
	{131,   Victim,    		125},
	{132,   Victim,    		125},
	{133,   Victim,    		125},
	{134,   SubUrban,   	125},
	{135,   SubUrban,   	125},
	{136, 	SubUrban, 		150},
	{137,   SubUrban,   	125},
	{138,   Victim,         150},
	{139,   Victim,         150},
	{140,   Victim,         150},
	{141,   DidierSachs,    200},
	{142, 	SubUrban, 		200},
	{143, 	SubUrban, 		200},
	{144, 	SubUrban, 		200},
	{145,   Victim,         150},
	{146,   Victim,         150},
	{147,   DidierSachs,    300},
	{148,   DidierSachs,    300},
	{150,   DidierSachs,    300},
	{151,   Binco,    		150},
	{152,  	SubUrban,       200},
	{153,   DidierSachs,    200},
	{154,   Victim,         150},
	{155,   Loja_invalida,  0},
	{156,   Binco,    		125},
	{157,   Victim,         150},
	{158,   Victim,         150},
	{159,   Victim,         150},
	{160,   Victim,         150},
	{161,   Victim,         150},
	{162,   Victim,         150},
	{163,   Loja_invalida,  0},
	{164,   Loja_invalida,  0},
	{165,   Loja_invalida,  0},
	{166,   Loja_invalida,  0},
	{167,   Loja_invalida,  0},
	{168,   Victim,         125},
	{169,   Binco,         	200},
	{170, 	Binco, 			150},
	{171,   DidierSachs,  	300},
	{172,   DidierSachs,  	300},
	{173,   SubUrban,  		125},
	{174,   SubUrban,   	125},
	{175,   SubUrban,   	125},
	{176,   SubUrban,   	200},
	{177,  	SubUrban,       200},
	{179,   Loja_invalida,  0},
	{180, 	Binco, 			150},
	{181,   Binco,    		150},
	{182,   Binco,    		125},
	{183,   SubUrban,   	125},
	{184, 	Binco, 			150},
	{185,   DidierSachs,    300},
	{186,   DidierSachs,    300},
	{187,   DidierSachs,    300},
	{188, 	Binco, 			150},
	{189,   DidierSachs,    300},
	{190,   Binco,   		150},
	{191,   Binco,  		150},
	{192,   ProLaps,  		150},
	{193,   Binco,  		150},
	{194,   DidierSachs,  	200},
	{195,   SubUrban,   	150},
	{196,   Victim,         150},
	{197,   Victim,         150},
	{198,   Victim,         150},
	{199,   Victim,         150},
	{200,   Victim,         150},
	{201,   Victim,         150},
	{202,   Victim,         150},
	{203,   ProLaps,        250},
	{204,   ProLaps,        250},
	{205,   Loja_invalida,  0},
	{206,   Victim,         150},
	{207,   SubUrban,       150},
	{209,   Loja_invalida,  0},
	{210,   Binco,  		150},
	{211,   Binco,  		200},
	{212,   Victim,  		200},
	{213,   Victim,  		200},
	{214,   DidierSachs,  	300},
	{215,   Binco,  		150},
	{216,   DidierSachs,  	300},
	{217,   Binco,  		200},
	{218,   Binco,  		150},
	{219,   DidierSachs,  	200},
	{220,   SubUrban,       150},
	{221,   SubUrban,       150},
	{222,   Binco,  		150},
	{223,   Binco,  		150},
	{224,   DidierSachs,    200},
	{225,   Binco,  		150},
	{226,   Binco,  		150},
	{227,  	DidierSachs,  	300},
	{228,   DidierSachs,  	300},
	{229,   Binco,      	200},
	{230,   SubUrban,       125},
	{231,   Binco,  		150},
	{232,   Binco,  		150},
	{233,   Binco,  		200},
	{234,   Binco,  		150},
	{235,   Binco,  		150},
	{236,   Binco,  		150},
	{237,   SubUrban,       200},
	{239,   SubUrban,       125},
	{238,   SubUrban,       150},
	{240,   DidierSachs,  	300},
	{241,   SubUrban,       150},
	{242,   SubUrban,       150},
	{243,   SubUrban,       150},
	{244,   SubUrban,       200},
	{245,   SubUrban,       150},
	{246,   SubUrban,       200},
	{247,   ProLaps,    	150},
	{248,   ProLaps,    	200},
	{249,   DidierSachs,    300},
	{250,   Binco,      	150},
	{251,   Victim,         150},
	{252,   Victim,         50},
	{253,   Loja_invalida,  0},
	{254,   ProLaps,    	150},
	{255,   Loja_invalida,  0},
	{256,   SubUrban,    	150},
	{257,   SubUrban,    	150},
	{258,   ProLaps,    	200},
	{259,   ProLaps,    	200},
	{260,   Loja_invalida,  0},
	{261,   Binco,      	150},
	{262,   Binco,      	125},
	{263,   DidierSachs,  	250},
	{264,   Victim,  		150},
	{265,   Loja_invalida,  0},
	{266,   Loja_invalida,  0},
	{267,   Loja_invalida,  0},
	{269,   SubUrban,       200},
	{270,   SubUrban,       200},
	{271,   SubUrban,       200},
	{272,   SubUrban,       200},
	{274,   Loja_invalida,  0},
	{275,   Loja_invalida,  0},
	{276,   Loja_invalida,  0},
	{277,   Loja_invalida,  0},
	{278,   Loja_invalida,  0},
	{279,   Loja_invalida,  0},
	{280,   Loja_invalida,  0},
	{281,   Loja_invalida,  0},
	{282,   Loja_invalida,  0},
	{283,   Loja_invalida,  0},
	{284,   Loja_invalida,  0},
	{285,   Loja_invalida,  0},
	{286,   Loja_invalida,  0},
	{287,   Loja_invalida,  0},
	{288,   Loja_invalida,  0}
};
enum CasasInfo {
Float:hX,
Float:hY,
Float:hZ
};

new IntCasas[] = {
1,
2,
10,
2,
15,
5,
3,
6
};

new Float:PosCasas[][CasasInfo] = {
{245.2307,304.7632,999.1484},//Casa de 5k
{269.6405,305.9512,999.1484},//Casa de 10k
{2261.3999,-1135.9399,1050.6328},//Casa de 20k
{447.1544,1398.5393,1084.3120},//Casa de 40k
{294.8661,1474.0015,1080.2578},//Casa de 60k
{228.3588,1114.5723,1080.9922},//Casa de 80k
{234.6087,1187.8195,1080.2578},//Casa de 100k
{233.8762, 1065.2466, 1084.2101}//Casa de 200k
};

enum zoneinfo {
	zonename[27],
    Float:zoneminx,
    Float:zoneminy,
    Float:zoneminz,
    Float:zonemaxx,
    Float:zonemaxy,
    Float:zonemaxz
}

new Float:zones[][zoneinfo] = {
{"Commerce",                     1323.90, -1842.20,   -89.00,  1701.90, -1722.20,   110.90},
{"Commerce",                     1323.90, -1722.20,   -89.00,  1440.90, -1577.50,   110.90},
{"Commerce",                     1370.80, -1577.50,   -89.00,  1463.90, -1384.90,   110.90},
{"Commerce",                     1463.90, -1577.50,   -89.00,  1667.90, -1430.80,   110.90},
{"Commerce",                     1583.50, -1722.20,   -89.00,  1758.90, -1577.50,   110.90},
{"Commerce",                     1667.90, -1577.50,   -89.00,  1812.60, -1430.80,   110.90},
{"East Beach",                   2632.80, -1852.80,   -89.00,  2959.30, -1668.10,   110.90},
{"East Beach",                   2632.80, -1668.10,   -89.00,  2747.70, -1393.40,   110.90},
{"East Beach",                   2747.70, -1668.10,   -89.00,  2959.30, -1498.60,   110.90},
{"East Beach",                   2747.70, -1498.60,   -89.00,  2959.30, -1120.00,   110.90},
{"East Los Santos",              2421.00, -1628.50,   -89.00,  2632.80, -1454.30,   110.90},
{"East Los Santos",              2222.50, -1628.50,   -89.00,  2421.00, -1494.00,   110.90},
{"East Los Santos",              2266.20, -1494.00,   -89.00,  2381.60, -1372.00,   110.90},
{"East Los Santos",              2381.60, -1494.00,   -89.00,  2421.00, -1454.30,   110.90},
{"East Los Santos",              2281.40, -1372.00,   -89.00,  2381.60, -1135.00,   110.90},
{"East Los Santos",              2381.60, -1454.30,   -89.00,  2462.10, -1135.00,   110.90},
{"East Los Santos",              2462.10, -1454.30,   -89.00,  2581.70, -1135.00,   110.90},
{"Ganton",                       2222.50, -1852.80,   -89.00,  2632.80, -1722.30,   110.90},
{"Ganton",                       2222.50, -1722.30,   -89.00,  2632.80, -1628.50,   110.90},
{"Glen Park",                    1812.60, -1449.60,   -89.00,  1996.90, -1350.70,   110.90},
{"Glen Park",                    1812.60, -1100.80,   -89.00,  1994.30,  -973.30,   110.90},
{"Glen Park",                    1812.60, -1350.70,   -89.00,  2056.80, -1100.80,   110.90},
{"Idlewood",                     1812.60, -1852.80,   -89.00,  1971.60, -1742.30,   110.90},
{"Idlewood",                     1812.60, -1742.30,   -89.00,  1951.60, -1602.30,   110.90},
{"Idlewood",                     1951.60, -1742.30,   -89.00,  2124.60, -1602.30,   110.90},
{"Idlewood",                     1812.60, -1602.30,   -89.00,  2124.60, -1449.60,   110.90},
{"Idlewood",                     2124.60, -1742.30,   -89.00,  2222.50, -1494.00,   110.90},
{"Idlewood",                     1971.60, -1852.80,   -89.00,  2222.50, -1742.30,   110.90},
{"Jefferson",                    1996.90, -1449.60,   -89.00,  2056.80, -1350.70,   110.90},
{"Jefferson",                    2124.60, -1494.00,   -89.00,  2266.20, -1449.60,   110.90},
{"Jefferson",                    2056.80, -1372.00,   -89.00,  2281.40, -1210.70,   110.90},
{"Jefferson",                    2056.80, -1210.70,   -89.00,  2185.30, -1126.30,   110.90},
{"Jefferson",                    2185.30, -1210.70,   -89.00,  2281.40, -1154.50,   110.90},
{"Jefferson",                    2056.80, -1449.60,   -89.00,  2266.20, -1372.00,   110.90},
{"Las Colinas",                  1994.30, -1100.80,   -89.00,  2056.80,  -920.80,   110.90},
{"Las Colinas",                  2056.80, -1126.30,   -89.00,  2126.80,  -920.80,   110.90},
{"Las Colinas",                  2185.30, -1154.50,   -89.00,  2281.40,  -934.40,   110.90},
{"Las Colinas",                  2126.80, -1126.30,   -89.00,  2185.30,  -934.40,   110.90},
{"Las Colinas",                  2747.70, -1120.00,   -89.00,  2959.30,  -945.00,   110.90},
{"Las Colinas",                  2632.70, -1135.00,   -89.00,  2747.70,  -945.00,   110.90},
{"Las Colinas",                  2281.40, -1135.00,   -89.00,  2632.70,  -945.00,   110.90},
{"Little Mexico",                1701.90, -1842.20,   -89.00,  1812.60, -1722.20,   110.90},
{"Little Mexico",                1758.90, -1722.20,   -89.00,  1812.60, -1577.50,   110.90},
{"Los Flores",                   2581.70, -1454.30,   -89.00,  2632.80, -1393.40,   110.90},
{"Los Flores",                   2581.70, -1393.40,   -89.00,  2747.70, -1135.00,   110.90},
{"Playa del Seville",            2703.50, -2126.90,   -89.00,  2959.30, -1852.80,   110.90},
{"Unity Station",                1692.60, -1971.80,   -20.40,  1812.60, -1932.80,    79.50},
{"Verdant Bluffs",                930.20, -2488.40,   -89.00,  1249.60, -2006.70,   110.90},
{"Verdant Bluffs",               1073.20, -2006.70,   -89.00,  1249.60, -1842.20,   110.90},
{"Verdant Bluffs",               1249.60, -2179.20,   -89.00,  1692.60, -1842.20,   110.90},
{"Willowfield",                  1970.60, -2179.20,   -89.00,  2089.00, -1852.80,   110.90},
{"Willowfield",                  2089.00, -2235.80,   -89.00,  2201.80, -1989.90,   110.90},
{"Willowfield",                  2089.00, -1989.90,   -89.00,  2324.00, -1852.80,   110.90},
{"Willowfield",                  2201.80, -2095.00,   -89.00,  2324.00, -1989.90,   110.90},
{"Willowfield",                  2541.70, -1941.40,   -89.00,  2703.50, -1852.80,   110.90},
{"Willowfield",                  2324.00, -2059.20,   -89.00,  2541.70, -1852.80,   110.90},
{"Willowfield",                  2541.70, -2059.20,   -89.00,  2703.50, -1941.40,   110.90}
};
new GangControlZone[sizeof(zones)][256];
new GZ[sizeof(zones)];
new playerkillzone[SLOTS2][sizeof(zones)];
new playerdeathzone[SLOTS2][sizeof(zones)];

//Arrays do sistema de Experience Level
new VeiculoConsertado[MAX_VEHICLES] = 0;
new VeiculoPintado[MAX_VEHICLES] = 0;
new CasaVendida[SLOTS2] = 0;
new CarroAbastecido[MAX_VEHICLES] = 0;
new JogadorMultado[SLOTS2] = 0;
public ZerarVeiculoConsertado(vehicleid) VeiculoConsertado[vehicleid]=0;
public ZerarVeiculoPintado(vehicleid) VeiculoPintado[vehicleid]=0;
public ZerarCasaVendida(playerid) CasaVendida[playerid]=0;
public ZerarCarroAbastecido(vehicleid) CarroAbastecido[vehicleid]=0;
public ZerarJogadorMultado(playerid) JogadorMultado[playerid]=0;
public ZerarAvisoHorario() JaAvisouHorario = 0;
stock TrancarVeiculo(playerid,veiculo) SetVehicleParamsForPlayer(veiculo,playerid, 0, 1);
stock DestrancarVeiculo(playerid,veiculo) SetVehicleParamsForPlayer(veiculo,playerid, 0, 0);

main()
{
	print(" ");
	print(" ");
	print(" Virtual Life RPG: Los Santos");
	print(" _________________________________________________");
	print(" Desenvolvido pela equipe Virtual Life");
	print(" ");
	print(" Integrantes: Texugo, Rafael, Guilherme & osorkon");
	print(" _________________________________________________");
	print(" ");
	print(" Variaveis globais:");
	print(" ");
	printf(" MAX_CASAS: %d",MAX_CASAS);
	printf(" MAX_HOTEL_PLAYERS: %d",MAX_HOTEL_PLAYERS);
	printf(" MAX_CELL: %d",MAX_CELL);
	printf(" MAX_SEGURANCAS: %d",MAX_SEGURANCAS);
	printf(" MAX_PLAYER_VEHICLES: %d",MAX_PLAYER_VEHICLES);
	printf(" MAX_GANGUES: %d",MAX_GANGUES);
	printf(" MAX_GANGUE_PLAYERS: %d",MAX_GANGUE_PLAYERS);
	printf(" MAX_JORNAIS: %d",MAX_JORNAIS);
	print(" ");

	writelog("\n---------------------------------------------");
	writelog("          	Virtual Life RPG          		 ");
	writelog("---------------------------------------------\n");
}
// ------------ Functions by DracoBlue ------------ //
fcopy(oldname[],newname[]) {
	new File:ohnd,File:nhnd;
  	if (!fexist(oldname)) return false;
  	ohnd=fopen(oldname,io_read);
  	nhnd=fopen(newname,io_write);
  	new buf2[1];
  	new i;
  	for (i=flength(ohnd);i>0;i--) {
    	fputchar(nhnd, fgetchar(ohnd, buf2[0],false),false);
  	}
  	fclose(ohnd);
  	fclose(nhnd);
  	return true;
}
public set(dest[],source[])
{
  	for(new i = 0; i < strlen(source); i++)
	{
		dest[i] = source[i];
  	}
  	dest[strlen(source)] = 0;
  	return 1;
}
strtok(const string[], &index, seperator=' ')
{
	new length = strlen(string);
	new offset = index;
	new result[256];
	while ((index < length) && (string[index] != seperator) && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}

	result[index - offset] = EOS;
	if ((index < length) && (string[index] == seperator))
	{
		index++;
	}
	return result;
}
// ---------------------------------------------- //

// ------------ Functions by Y_Less ------------ //
stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
    new Float:a;
    GetPlayerPos(playerid, x, y, a);
    GetPlayerFacingAngle(playerid, a);
    if (GetPlayerVehicleID(playerid)) {
        GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
    }
    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
}
stock GetXYInBackOfPlayer(playerid, &Float:x, &Float:y, Float:distance) // Edited by Rafael
{
    new Float:a;
    GetPlayerPos(playerid, x, y, a);
    GetPlayerFacingAngle(playerid, a);
    if (GetPlayerVehicleID(playerid)) {
        GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
    }
    if(a - 180 < 0) a = a + 180;
    else a = a - 180;
    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
}
// ---------------------------------------------- //

GiveValue(filename[],key[],getgiven)
{
	new value=strval(GetValue(filename,key));
	SetValue(filename,key,ReturnValueStr(value+getgiven));
}
SetValue(filename[],key[],newvalue[])
{
    if(!fexist(filename)) return 0;
	new string[256];
	format(string,sizeof(string),"%s.part",filename);
    new File:arquive=fopen(filename,io_read);
    new File:arquive2=fopen(string,io_write);
	new tmp[256],key2[256],str[256];
	while(fread(arquive,tmp,sizeof(tmp))){
	    set(key2,GetValueKey(tmp));
	    if(compare(key,key2)){
	        format(str,sizeof(str),"%s=%s",key,newvalue);
	        fwrite(arquive2,str);
		}
		else{
		    fwrite(arquive2,tmp);
		}
	}
	fclose(arquive);
	fclose(arquive2);
	fcopy(string,filename);
	fremove(string);
	return 1;
}
GetValue(filename[],key[])
{
	new val[256];
	val[0]=0;
	if(!fexist(filename)) return val;
    new File:arquive=fopen(filename,io_read);
	new tmp[256],key2[256];
	while(fread(arquive,tmp,sizeof(tmp))){
		key2 = GetValueKey(tmp);
		if(compare(key,key2)){
			set(val,GetKeyValue(tmp));
			break;
		}
	}
	fclose(arquive);
	return val;
}
stock GetGangID(namegangue[])
{
	for(new g=1;g<LastGNG;g++){
	    if(compare(Gangues[g],namegangue)){
	        return g;
		}
	}
	return 0;
}
stock GetJornalID(titulo[])
{
	for(new j=0;j<LastJN;j++){
	    if(compare(Jornais[j],titulo)){
	        return j;
		}
	}
	return 0;
}
stock LoadGangues()
{
    if(!fexist("Utilidades/Gangues.rpg")){
        new File:gfile = fopen("Utilidades/Gangues.rpg",io_write);
		fclose(gfile);
	}
	new File:gfile = fopen("Utilidades/Gangues.rpg",io_read),tmp2[256],idx,File:gfile2,gangfile[256];
	new tmp[256],g = 1;
	while(fread(gfile,tmp,sizeof(tmp))){
	    set(Gangues[g],tmp);
	    set(gangfile,GangFile(tmp));
	    gfile2 = fopen(gangfile,io_read);
	    fread(gfile2,tmp2,sizeof(tmp2));
	   	set(gStats[g][GangDono],strtok(tmp2,idx));
    	gStats[g][GangType] = strval(strtok(tmp2,idx));
    	gStats[g][GangMembros] = strval(strtok(tmp2,idx));
    	gStats[g][GangPontos] = strval(strtok(tmp2,idx));
    	gStats[g][GangColor] = strval(strtok(tmp2,idx));
    	gStats[g][SkinSlot][1] = strval(strtok(tmp2,idx));
    	gStats[g][SkinSlot][2] = strval(strtok(tmp2,idx));
    	gStats[g][SkinSlot][3] = strval(strtok(tmp2,idx));
    	idx=0;
    	fread(gfile2,tmp2,sizeof(tmp2));
    	for(new m=0; m<gStats[g][GangMembros]; m++){
			set(MembersGang[g][m],strtok(tmp2,idx,';'));
		}
		fclose(gfile2);
		idx=0;
		g++;
	}
	fclose(gfile);
}
stock SaveGangues()
{
	new File:gfile=fopen("Utilidades/Gangues.rpg",io_write),File:gfile2,strsave[256],string[256];
	for(new g=1;g<LastGNG;g++){
 		fwrite(gfile,Gangues[g]);
	    fwrite(gfile,"\r\n");
	    format(strsave,sizeof(strsave),"%s %d %d %d %d %d %d %d\r\n",
		gStats[g][GangDono],
		gStats[g][GangType],
		gStats[g][GangMembros],
		gStats[g][GangPontos],
		gStats[g][GangColor],
		gStats[g][SkinSlot][1],
		gStats[g][SkinSlot][2],
		gStats[g][SkinSlot][3]
		);
		gfile2=fopen(GangFile(Gangues[g]),io_write);
		fwrite(gfile2,strsave);
		for(new m=0; m<gStats[g][GangMembros]; m++){
		    strcat(string,MembersGang[g][m]);
		    strcat(string,";");
		}
		fwrite(gfile2,string);
		fclose(gfile2);
	}
	fclose(gfile);
}
stock SaveJornais()
{
	new strsave[256],jfile[256],File:jornalfile2;
	new File:jornalfile = fopen("Utilidades/Jornais.rpg",io_write);
	for(new j=1;j<LastJN;j++){
	    fwrite(jornalfile,Jornais[j]);
		fwrite(jornalfile,"\r\n");
		format(strsave,sizeof(strsave),"%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;",
		jStats[j][Autor],
		jStats[j][CEmpresas1],
		jStats[j][CEmpresas2],
		jStats[j][CEmpresas3],
		jStats[j][CHomicidios1],
		jStats[j][CHomicidios2],
		jStats[j][CHomicidios3],
		jStats[j][CEsporte1],
		jStats[j][CEsporte2],
		jStats[j][CEsporte3],
		jStats[j][CMercadorias1],
		jStats[j][CMercadorias2],
		jStats[j][CMercadorias3],
		jStats[j][COutros1],
		jStats[j][COutros2],
		jStats[j][COutros3]
		);
		set(jfile,JornalFile(Jornais[j]));
		jornalfile2 = fopen(jfile,io_write);
		fwrite(jornalfile2,strsave);
		fclose(jornalfile2);
	}
	fclose(jornalfile);
}
stock LoadJornais()
{
    if(!fexist("Utilidades/Jornais.rpg")){
        new File:jfile = fopen("Utilidades/Jornais.rpg",io_write);
		fclose(jfile);
	}
	new jfile[256];
	new File:jornalfile,tmp[256],index,s[256],j=1;
	new File:jornaisfile=fopen("Utilidades/Jornais.rpg",io_read);
	while(fread(jornaisfile,s,sizeof(s))){
		set(Jornais[j],s);
		set(jfile,JornalFile(s));
		jornalfile = fopen(jfile,io_read);
		fread(jornalfile,tmp,sizeof(tmp));
		set(jStats[j][Autor],strtok(tmp,index,';'));
		set(jStats[j][CEmpresas1],strtok(tmp,index,';'));
		set(jStats[j][CEmpresas2],strtok(tmp,index,';'));
		set(jStats[j][CEmpresas3],strtok(tmp,index,';'));
		set(jStats[j][CHomicidios1],strtok(tmp,index,';'));
		set(jStats[j][CHomicidios2],strtok(tmp,index,';'));
		set(jStats[j][CHomicidios3],strtok(tmp,index,';'));
		set(jStats[j][CEsporte1],strtok(tmp,index,';'));
		set(jStats[j][CEsporte2],strtok(tmp,index,';'));
		set(jStats[j][CEsporte3],strtok(tmp,index,';'));
		set(jStats[j][CMercadorias1],strtok(tmp,index,';'));
		set(jStats[j][CMercadorias2],strtok(tmp,index,';'));
		set(jStats[j][CMercadorias3],strtok(tmp,index,';'));
		set(jStats[j][COutros1],strtok(tmp,index,';'));
		set(jStats[j][COutros2],strtok(tmp,index,';'));
		set(jStats[j][COutros3],strtok(tmp,index,';'));
		fclose(jornalfile);
		j++;
	}
	fclose(jornaisfile);
}
stock SavePropertie(propertie)
{
	new str[256],strsave[256];
	new File:propfile;
	set(str,PropertieFile(propertie));
	format(strsave,sizeof(strsave),"%s %s %s %s %s %s %s %s %s %s %s %s %d %d %d %d %d",
	propStats[propertie][Dono1],
	propStats[propertie][Dono2],
	propStats[propertie][Trabalhador1],
   	propStats[propertie][Trabalhador2],
   	propStats[propertie][Trabalhador3],
   	propStats[propertie][Trabalhador4],
   	propStats[propertie][Trabalhador5],
   	propStats[propertie][Trabalhador6],
   	propStats[propertie][Trabalhador7],
   	propStats[propertie][Socio1],
   	propStats[propertie][Socio2],
  	propStats[propertie][Socio3],
   	propStats[propertie][Lucro],
   	propStats[propertie][Prejuizo],
   	propStats[propertie][Investimento],
   	propStats[propertie][SemanaPassada],
   	propStats[propertie][SemanaRetrasada]
   	);
	propfile = fopen(str,io_write);
	fwrite(propfile,strsave);
	fclose(propfile);
}
stock LoadPropertie(propertie)
{
	new tmp[256],index,str[256],File:propfile;
	set(str,PropertieFile(propertie));
	if(fexist(str)){
		propfile = fopen(str,io_read);
		fread(propfile,tmp,sizeof(tmp));
		set(propStats[propertie][Dono1],strtok(tmp,index));
		set(propStats[propertie][Dono2],strtok(tmp,index));
		set(propStats[propertie][Trabalhador1],strtok(tmp,index));
    	set(propStats[propertie][Trabalhador2],strtok(tmp,index));
    	set(propStats[propertie][Trabalhador3],strtok(tmp,index));
    	set(propStats[propertie][Trabalhador4],strtok(tmp,index));
    	set(propStats[propertie][Trabalhador5],strtok(tmp,index));
    	set(propStats[propertie][Trabalhador6],strtok(tmp,index));
    	set(propStats[propertie][Trabalhador7],strtok(tmp,index));
    	set(propStats[propertie][Socio1],strtok(tmp,index));
    	set(propStats[propertie][Socio2],strtok(tmp,index));
    	set(propStats[propertie][Socio3],strtok(tmp,index));
    	propStats[propertie][Lucro] = strval(strtok(tmp,index));
    	propStats[propertie][Prejuizo] = strval(strtok(tmp,index));
    	propStats[propertie][Investimento] = strval(strtok(tmp,index));
    	propStats[propertie][SemanaPassada] = strval(strtok(tmp,index));
    	propStats[propertie][SemanaRetrasada] = strval(strtok(tmp,index));
    	fclose(propfile);
	}
	return 1;
}
stock SavePickup(pickupid)
{
	new pfile[256];
	new strsave[256];
	new File:pickupfile;
	set(pfile,PickupFile(pickupid));
	if(fexist(pfile)){
	    pickupfile = fopen(pfile,io_write);
		format(strsave,256,"PickupDono=%s\r\n",pckStats[pickupid][PickupDono]); fwrite(pickupfile,strsave);
        format(strsave,256,"Trancada=%d\r\n",pckStats[pickupid][Trancada]); fwrite(pickupfile,strsave);
        format(strsave,256,"SemTelefone=%d\r\n",pckStats[pickupid][SemTelefone]); fwrite(pickupfile,strsave);
        format(strsave,256,"ContaTelefone=%d\r\n",pckStats[pickupid][ContaTelefone]); fwrite(pickupfile,strsave);
        format(strsave,256,"SemLuz=%d\r\n",pckStats[pickupid][SemLuz]); fwrite(pickupfile,strsave);
        format(strsave,256,"ContaLuz=%d\r\n",pckStats[pickupid][ContaLuz]); fwrite(pickupfile,strsave);
        format(strsave,256,"TV=%d\r\n",pckStats[pickupid][TV]); fwrite(pickupfile,strsave);
        format(strsave,256,"Radio=%d\r\n",pckStats[pickupid][Radio]); fwrite(pickupfile,strsave);
        format(strsave,256,"Geladeira=%d\r\n",pckStats[pickupid][Geladeira]); fwrite(pickupfile,strsave);
        format(strsave,256,"Fogao=%d\r\n",pckStats[pickupid][Fogao]); fwrite(pickupfile,strsave);
        format(strsave,256,"Alarme=%d\r\n",pckStats[pickupid][Alarme]); fwrite(pickupfile,strsave);
        format(strsave,256,"CofreCelular=%d\r\n",pckStats[pickupid][CofreCelular]); fwrite(pickupfile,strsave);
        format(strsave,256,"Telefone=%d\r\n",pckStats[pickupid][Telefone]); fwrite(pickupfile,strsave);
        format(strsave,256,"TelefoneNumb=%d\r\n",pckStats[pickupid][TelefoneNumb]); fwrite(pickupfile,strsave);
        format(strsave,256,"Int=%d\r\n",pckStats[pickupid][Int]); fwrite(pickupfile,strsave);
        format(strsave,256,"MaconhaCofre=%d\r\n",pckStats[pickupid][MaconhaCofre]); fwrite(pickupfile,strsave);
        format(strsave,256,"HeroinaCofre=%d\r\n",pckStats[pickupid][HeroinaCofre]); fwrite(pickupfile,strsave);
        format(strsave,256,"CocainaCofre=%d\r\n",pckStats[pickupid][CocainaCofre]); fwrite(pickupfile,strsave);
        format(strsave,256,"DinheiroCofre=%d\r\n",pckStats[pickupid][DinheiroCofre]); fwrite(pickupfile,strsave);
        format(strsave,256,"CorretorVenda=%s\r\n",pckStats[pickupid][CorretorVenda]); fwrite(pickupfile,strsave);
        format(strsave,256,"Vendendo=%d\r\n",pckStats[pickupid][Vendendo]); fwrite(pickupfile,strsave);
        format(strsave,256,"VendendoValor=%d\r\n",pckStats[pickupid][VendendoValor]); fwrite(pickupfile,strsave);
        format(strsave,256,"X=%f\r\n",pckStats[pickupid][pX]); fwrite(pickupfile,strsave);
        format(strsave,256,"Y=%f\r\n",pckStats[pickupid][pY]); fwrite(pickupfile,strsave);
        format(strsave,256,"Z=%f\r\n",pckStats[pickupid][pZ]); fwrite(pickupfile,strsave);
        format(strsave,256,"Chave=%s\r\n",pckStats[pickupid][Chave]); fwrite(pickupfile,strsave);
        format(strsave,256,"SenhaCofre=%s\r\n",pckStats[pickupid][SenhaCofre]); fwrite(pickupfile,strsave);
        format(strsave,256,"ArmasCofre0=%d\r\n",pckStats[pickupid][ArmasCofre][0]); fwrite(pickupfile,strsave);
        format(strsave,256,"ArmasCofre1=%d\r\n",pckStats[pickupid][ArmasCofre][1]); fwrite(pickupfile,strsave);
        format(strsave,256,"ArmasCofre2=%d\r\n",pckStats[pickupid][ArmasCofre][2]); fwrite(pickupfile,strsave);
        format(strsave,256,"ArmasCofre3=%d\r\n",pckStats[pickupid][ArmasCofre][3]); fwrite(pickupfile,strsave);
        format(strsave,256,"ArmasCofre4=%d\r\n",pckStats[pickupid][ArmasCofre][4]); fwrite(pickupfile,strsave);
        format(strsave,256,"ArmasCofre5=%d\r\n",pckStats[pickupid][ArmasCofre][5]); fwrite(pickupfile,strsave);
        format(strsave,256,"ArmasCofre6=%d\r\n",pckStats[pickupid][ArmasCofre][6]); fwrite(pickupfile,strsave);
        format(strsave,256,"ArmasCofre7=%d\r\n",pckStats[pickupid][ArmasCofre][7]); fwrite(pickupfile,strsave);
        format(strsave,256,"ArmasCofre8=%d\r\n",pckStats[pickupid][ArmasCofre][8]); fwrite(pickupfile,strsave);
        format(strsave,256,"ArmasCofre9=%d\r\n",pckStats[pickupid][ArmasCofre][9]); fwrite(pickupfile,strsave);
        format(strsave,256,"ArmasCofre10=%d\r\n",pckStats[pickupid][ArmasCofre][10]); fwrite(pickupfile,strsave);
        format(strsave,256,"ArmasCofre11=%d\r\n",pckStats[pickupid][ArmasCofre][11]); fwrite(pickupfile,strsave);
        format(strsave,256,"ArmasCofre12=%d\r\n",pckStats[pickupid][ArmasCofre][12]); fwrite(pickupfile,strsave);
        format(strsave,256,"ArmasAmmoCofre0=%d\r\n",pckStats[pickupid][ArmasAmmoCofre][0]); fwrite(pickupfile,strsave);
        format(strsave,256,"ArmasAmmoCofre1=%d\r\n",pckStats[pickupid][ArmasAmmoCofre][1]); fwrite(pickupfile,strsave);
        format(strsave,256,"ArmasAmmoCofre2=%d\r\n",pckStats[pickupid][ArmasAmmoCofre][2]); fwrite(pickupfile,strsave);
        format(strsave,256,"ArmasAmmoCofre3=%d\r\n",pckStats[pickupid][ArmasAmmoCofre][3]); fwrite(pickupfile,strsave);
        format(strsave,256,"ArmasAmmoCofre4=%d\r\n",pckStats[pickupid][ArmasAmmoCofre][4]); fwrite(pickupfile,strsave);
        format(strsave,256,"ArmasAmmoCofre5=%d\r\n",pckStats[pickupid][ArmasAmmoCofre][5]); fwrite(pickupfile,strsave);
        format(strsave,256,"ArmasAmmoCofre6=%d\r\n",pckStats[pickupid][ArmasAmmoCofre][6]); fwrite(pickupfile,strsave);
        format(strsave,256,"ArmasAmmoCofre7=%d\r\n",pckStats[pickupid][ArmasAmmoCofre][7]); fwrite(pickupfile,strsave);
        format(strsave,256,"ArmasAmmoCofre8=%d\r\n",pckStats[pickupid][ArmasAmmoCofre][8]); fwrite(pickupfile,strsave);
        format(strsave,256,"ArmasAmmoCofre9=%d\r\n",pckStats[pickupid][ArmasAmmoCofre][9]); fwrite(pickupfile,strsave);
        format(strsave,256,"ArmasAmmoCofre10=%d\r\n",pckStats[pickupid][ArmasAmmoCofre][10]); fwrite(pickupfile,strsave);
        format(strsave,256,"ArmasAmmoCofre11=%d\r\n",pckStats[pickupid][ArmasAmmoCofre][11]); fwrite(pickupfile,strsave);
        format(strsave,256,"ArmasAmmoCofre12=%d\r\n",pckStats[pickupid][ArmasAmmoCofre][12]); fwrite(pickupfile,strsave);
        format(strsave,256,"FrangoGeladeira=%d\r\n",pckStats[pickupid][FrangoGeladeira]); fwrite(pickupfile,strsave);
        format(strsave,256,"PeixeGeladeira=%d\r\n",pckStats[pickupid][PeixeGeladeira]); fwrite(pickupfile,strsave);
        format(strsave,256,"SaladaGeladeira=%d\r\n",pckStats[pickupid][SaladaGeladeira]); fwrite(pickupfile,strsave);
        format(strsave,256,"PizzaGeladeira=%d\r\n",pckStats[pickupid][PizzaGeladeira]); fwrite(pickupfile,strsave);
        format(strsave,256,"RefriGeladeira=%d\r\n",pckStats[pickupid][RefriGeladeira]); fwrite(pickupfile,strsave);
        format(strsave,256,"SucoGeladeira=%d\r\n",pckStats[pickupid][SucoGeladeira]); fwrite(pickupfile,strsave);
        format(strsave,256,"CarneGeladeira=%d\r\n",pckStats[pickupid][CarneGeladeira]); fwrite(pickupfile,strsave);
        format(strsave,256,"StrogonoffGeladeira=%d\r\n",pckStats[pickupid][StrogonoffGeladeira]); fwrite(pickupfile,strsave);
        format(strsave,256,"CamaraoGeladeira=%d\r\n",pckStats[pickupid][CamaraoGeladeira]); fwrite(pickupfile,strsave);
        format(strsave,256,"LinguicaGeladeira=%d\r\n",pckStats[pickupid][LinguicaGeladeira]); fwrite(pickupfile,strsave);
	    fclose(pickupfile);
	}
    return 1;
}
stock LoadPickup(pickupid)
{
    new pfile[256],tmp[256],value[256],key[256];
    new File:pickupfile;
	set(pfile,PickupFile(pickupid));
	if(fexist(pfile)){
		pickupfile = fopen(pfile,io_read);
		while(fread(pickupfile,tmp,sizeof(tmp))){
		    key = GetValueKey(tmp);
		    value = GetKeyValue(tmp);
		    if(compare(key,"PickupDono")) { set(pckStats[pickupid][PickupDono],value); }
		    if(compare(key,"Trancada")) { pckStats[pickupid][Trancada] = strval(value); }
		    if(compare(key,"SemTelefone")) { pckStats[pickupid][SemTelefone] = strval(value); }
		    if(compare(key,"ContaTelefone")) { pckStats[pickupid][ContaTelefone] = strval(value); }
		    if(compare(key,"SemLuz")) { pckStats[pickupid][SemLuz] = strval(value); }
		    if(compare(key,"TV")) { pckStats[pickupid][TV] = strval(value); }
		    if(compare(key,"Radio")) { pckStats[pickupid][Radio] = strval(value); }
		    if(compare(key,"Geladeira")) { pckStats[pickupid][Geladeira] = strval(value); }
		    if(compare(key,"Fogao")) { pckStats[pickupid][Fogao] = strval(value); }
		    if(compare(key,"Alarme")) { pckStats[pickupid][Alarme] = strval(value); }
		    if(compare(key,"CofreCelular")) { pckStats[pickupid][CofreCelular] = strval(value); }
		    if(compare(key,"Telefone")) { pckStats[pickupid][Telefone] = strval(value); }
		    if(compare(key,"TelefoneNumb")) { pckStats[pickupid][TelefoneNumb] = strval(value); }
		    if(compare(key,"Int")) { pckStats[pickupid][Int] = strval(value); }
		    if(compare(key,"MaconhaCofre")) { pckStats[pickupid][MaconhaCofre] = strval(value); }
		    if(compare(key,"HeroinaCofre")) { pckStats[pickupid][HeroinaCofre] = strval(value); }
		    if(compare(key,"CocainaCofre")) { pckStats[pickupid][CocainaCofre] = strval(value); }
		    if(compare(key,"DinheiroCofre")) { pckStats[pickupid][DinheiroCofre] = strval(value); }
		    if(compare(key,"CorretorVenda")) { set(pckStats[pickupid][CorretorVenda],value); }
		    if(compare(key,"Vendendo")) { pckStats[pickupid][Vendendo] = strval(value); }
		    if(compare(key,"VendendoValor")) { pckStats[pickupid][VendendoValor] = strval(value); }
		    if(compare(key,"X")) { pckStats[pickupid][pX] = floatstr(value); }
		    if(compare(key,"Y")) { pckStats[pickupid][pY] = floatstr(value); }
		    if(compare(key,"Z")) { pckStats[pickupid][pZ] = floatstr(value); }
		    if(compare(key,"Chave")) { set(pckStats[pickupid][Chave],value); }
		    if(compare(key,"SenhaCofre")) { set(pckStats[pickupid][SenhaCofre],value); }
            if(compare(key,"ArmasCofre0")) { pckStats[pickupid][ArmasCofre][0] = strval(value); }
            if(compare(key,"ArmasCofre1")) { pckStats[pickupid][ArmasCofre][1] = strval(value); }
            if(compare(key,"ArmasCofre2")) { pckStats[pickupid][ArmasCofre][2] = strval(value); }
            if(compare(key,"ArmasCofre3")) { pckStats[pickupid][ArmasCofre][3] = strval(value); }
            if(compare(key,"ArmasCofre4")) { pckStats[pickupid][ArmasCofre][4] = strval(value); }
            if(compare(key,"ArmasCofre5")) { pckStats[pickupid][ArmasCofre][5] = strval(value); }
            if(compare(key,"ArmasCofre6")) { pckStats[pickupid][ArmasCofre][6] = strval(value); }
            if(compare(key,"ArmasCofre7")) { pckStats[pickupid][ArmasCofre][7] = strval(value); }
            if(compare(key,"ArmasCofre8")) { pckStats[pickupid][ArmasCofre][8] = strval(value); }
            if(compare(key,"ArmasCofre9")) { pckStats[pickupid][ArmasCofre][9] = strval(value); }
            if(compare(key,"ArmasCofre10")) { pckStats[pickupid][ArmasCofre][10] = strval(value); }
            if(compare(key,"ArmasCofre11")) { pckStats[pickupid][ArmasCofre][11] = strval(value); }
            if(compare(key,"ArmasCofre12")) { pckStats[pickupid][ArmasCofre][12] = strval(value); }
            if(compare(key,"ArmasAmmoCofre0")) { pckStats[pickupid][ArmasAmmoCofre][0] = strval(value); }
            if(compare(key,"ArmasAmmoCofre1")) { pckStats[pickupid][ArmasAmmoCofre][1] = strval(value); }
            if(compare(key,"ArmasAmmoCofre2")) { pckStats[pickupid][ArmasAmmoCofre][2] = strval(value); }
            if(compare(key,"ArmasAmmoCofre3")) { pckStats[pickupid][ArmasAmmoCofre][3] = strval(value); }
            if(compare(key,"ArmasAmmoCofre4")) { pckStats[pickupid][ArmasAmmoCofre][4] = strval(value); }
            if(compare(key,"ArmasAmmoCofre5")) { pckStats[pickupid][ArmasAmmoCofre][5] = strval(value); }
            if(compare(key,"ArmasAmmoCofre6")) { pckStats[pickupid][ArmasAmmoCofre][6] = strval(value); }
            if(compare(key,"ArmasAmmoCofre7")) { pckStats[pickupid][ArmasAmmoCofre][7] = strval(value); }
            if(compare(key,"ArmasAmmoCofre8")) { pckStats[pickupid][ArmasAmmoCofre][8] = strval(value); }
            if(compare(key,"ArmasAmmoCofre9")) { pckStats[pickupid][ArmasAmmoCofre][9] = strval(value); }
            if(compare(key,"ArmasAmmoCofre10")) { pckStats[pickupid][ArmasAmmoCofre][10] = strval(value); }
            if(compare(key,"ArmasAmmoCofre11")) { pckStats[pickupid][ArmasAmmoCofre][11] = strval(value); }
            if(compare(key,"ArmasAmmoCofre12")) { pckStats[pickupid][ArmasAmmoCofre][12] = strval(value); }
            if(compare(key,"FrangoGeladeira")) { pckStats[pickupid][FrangoGeladeira] = strval(value); }
            if(compare(key,"PeixeGeladeira")) { pckStats[pickupid][PeixeGeladeira] = strval(value); }
            if(compare(key,"SaladaGeladeira")) { pckStats[pickupid][SaladaGeladeira] = strval(value); }
            if(compare(key,"PizzaGeladeira")) { pckStats[pickupid][PizzaGeladeira] = strval(value); }
            if(compare(key,"RefriGeladeira")) { pckStats[pickupid][RefriGeladeira] = strval(value); }
            if(compare(key,"SucoGeladeira")) { pckStats[pickupid][SucoGeladeira] = strval(value); }
            if(compare(key,"CarneGeladeira")) { pckStats[pickupid][CarneGeladeira] = strval(value); }
            if(compare(key,"StrogonoffGeladeira")) { pckStats[pickupid][StrogonoffGeladeira] = strval(value); }
            if(compare(key,"CamaraoGeladeira")) { pckStats[pickupid][CamaraoGeladeira] = strval(value); }
            if(compare(key,"LinguicaGeladeira")) { pckStats[pickupid][LinguicaGeladeira] = strval(value); }
		}
		fclose(pickupfile);
	}
	return 1;
}
stock SaveVehicle(vehicleid)
{
	new vfile[256];
	new strsave[256];
	new File:vehiclefile;
	set(vfile,VehicleFile(vehicleid));
	if(fexist(vfile)){
		vehiclefile = fopen(vfile,io_write);
    	format(strsave,256,"Dono=%s\r\n",vStats[vehicleid][VDono]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Placa=%s\r\n",vStats[vehicleid][VPlaca]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Chave=%s\r\n",vStats[vehicleid][VChave]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Escondido=%d\r\n",vStats[vehicleid][VEscondido]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Alarme=%d\r\n",vStats[vehicleid][VAlarme]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"AlertadoMulta=%d\r\n",vStats[vehicleid][AlertadoMulta]); fwrite(vehiclefile,strsave);
   	 	format(strsave,256,"Gasolina=%d\r\n",vStats[vehicleid][gasolina]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Confiscado=%d\r\n",vStats[vehicleid][Confiscado]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Dividas=%d\r\n",vStats[vehicleid][Dividas]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"TemAlarme=%d\r\n",vStats[vehicleid][TemAlarme]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Vendendo=%d\r\n",vStats[vehicleid][Vendendo]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"PrecoVenda=%d\r\n",vStats[vehicleid][PrecoVenda]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Seguro=%d\r\n",vStats[vehicleid][VSeguro]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Color1=%d\r\n",vStats[vehicleid][Color1]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Color2=%d\r\n",vStats[vehicleid][Color2]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Fume=%d\r\n",vStats[vehicleid][Fume]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"HavePos=%d\r\n",vStats[vehicleid][HavePos]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"CarPosX=%f\r\n",vStats[vehicleid][CarPosX]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"CarPosY=%f\r\n",vStats[vehicleid][CarPosY]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"CarPosZ=%f\r\n",vStats[vehicleid][CarPosZ]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"CarPosAng=%f\r\n",vStats[vehicleid][CarPosAng]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Tuning0=%d\r\n",vStats[vehicleid][Tuning][0]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Tuning1=%d\r\n",vStats[vehicleid][Tuning][1]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Tuning2=%d\r\n",vStats[vehicleid][Tuning][2]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Tuning3=%d\r\n",vStats[vehicleid][Tuning][3]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Tuning4=%d\r\n",vStats[vehicleid][Tuning][4]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Tuning5=%d\r\n",vStats[vehicleid][Tuning][5]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Tuning6=%d\r\n",vStats[vehicleid][Tuning][6]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Tuning7=%d\r\n",vStats[vehicleid][Tuning][7]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Tuning8=%d\r\n",vStats[vehicleid][Tuning][8]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Tuning9=%d\r\n",vStats[vehicleid][Tuning][9]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Tuning10=%d\r\n",vStats[vehicleid][Tuning][10]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Tuning11=%d\r\n",vStats[vehicleid][Tuning][11]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Tuning12=%d\r\n",vStats[vehicleid][Tuning][12]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Tuning13=%d\r\n",vStats[vehicleid][Tuning][13]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Tuning14=%d\r\n",vStats[vehicleid][Tuning][14]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Tuning15=%d\r\n",vStats[vehicleid][Tuning][15]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Tuning16=%d\r\n",vStats[vehicleid][Tuning][16]); fwrite(vehiclefile,strsave);
    	format(strsave,256,"Tuning17=%d\r\n",vStats[vehicleid][Tuning][17]); fwrite(vehiclefile,strsave);
		fclose(vehiclefile);
	}
}
stock LoadVehicle(vehicleid)
{
	new vfile[256];
	new File:vehiclefile,tmp[256],value[256],key[256];
	set(vfile,VehicleFile(vehicleid));
	if(fexist(vfile)){
		vehiclefile = fopen(vfile,io_read);
		while(fread(vehiclefile,tmp,sizeof(tmp))){
		    key = GetValueKey(tmp);
		    value = GetKeyValue(tmp);
			if(compare(key,"Dono")) { set(vStats[vehicleid][VDono],value); }
			if(compare(key,"Placa")) { set(vStats[vehicleid][VPlaca],value); }
			if(compare(key,"Chave")) { set(vStats[vehicleid][VChave],value); }
			if(compare(key,"Escondido")) { vStats[vehicleid][VEscondido] = strval(value); }
			if(compare(key,"Alarme")) { vStats[vehicleid][VAlarme] = strval(value); }
			if(compare(key,"AlertadoMulta")) { vStats[vehicleid][AlertadoMulta] = strval(value); }
			if(compare(key,"Gasolina")) { vStats[vehicleid][gasolina] = strval(value); }
			if(compare(key,"Confiscado")) { vStats[vehicleid][Confiscado] = strval(value); }
			if(compare(key,"Dividas")) { vStats[vehicleid][Dividas] = strval(value); }
			if(compare(key,"TemAlarme")) { vStats[vehicleid][TemAlarme] = strval(value); }
			if(compare(key,"Vendendo")) { vStats[vehicleid][Vendendo] = strval(value); }
			if(compare(key,"PrecoVenda")) { vStats[vehicleid][PrecoVenda] = strval(value); }
			if(compare(key,"Seguro")) { vStats[vehicleid][VSeguro] = strval(value); }
			if(compare(key,"Color1")) { vStats[vehicleid][Color1] = strval(value); }
			if(compare(key,"Color2")) { vStats[vehicleid][Color2] = strval(value); }
			if(compare(key,"Fume")) { vStats[vehicleid][Fume] = strval(value); }
			if(compare(key,"HavePos")) { vStats[vehicleid][HavePos] = strval(value); }
			if(compare(key,"CarPosX")) { vStats[vehicleid][CarPosX] = floatstr(value); }
			if(compare(key,"CarPosY")) { vStats[vehicleid][CarPosY] = floatstr(value); }
			if(compare(key,"CarPosZ")) { vStats[vehicleid][CarPosZ] = floatstr(value); }
			if(compare(key,"CarPosAng")) { vStats[vehicleid][CarPosAng] = floatstr(value); }
			if(compare(key,"Tuning0")) { vStats[vehicleid][Tuning][0] = strval(value); }
			if(compare(key,"Tuning1")) { vStats[vehicleid][Tuning][1] = strval(value); }
			if(compare(key,"Tuning2")) { vStats[vehicleid][Tuning][2] = strval(value); }
			if(compare(key,"Tuning3")) { vStats[vehicleid][Tuning][3] = strval(value); }
			if(compare(key,"Tuning4")) { vStats[vehicleid][Tuning][4] = strval(value); }
			if(compare(key,"Tuning5")) { vStats[vehicleid][Tuning][5] = strval(value); }
			if(compare(key,"Tuning6")) { vStats[vehicleid][Tuning][6] = strval(value); }
			if(compare(key,"Tuning7")) { vStats[vehicleid][Tuning][7] = strval(value); }
			if(compare(key,"Tuning8")) { vStats[vehicleid][Tuning][8] = strval(value); }
			if(compare(key,"Tuning9")) { vStats[vehicleid][Tuning][9] = strval(value); }
			if(compare(key,"Tuning10")) { vStats[vehicleid][Tuning][10] = strval(value); }
			if(compare(key,"Tuning11")) { vStats[vehicleid][Tuning][11] = strval(value); }
			if(compare(key,"Tuning12")) { vStats[vehicleid][Tuning][12] = strval(value); }
			if(compare(key,"Tuning13")) { vStats[vehicleid][Tuning][13] = strval(value); }
			if(compare(key,"Tuning14")) { vStats[vehicleid][Tuning][14] = strval(value); }
			if(compare(key,"Tuning15")) { vStats[vehicleid][Tuning][15] = strval(value); }
			if(compare(key,"Tuning16")) { vStats[vehicleid][Tuning][16] = strval(value); }
			if(compare(key,"Tuning17")) { vStats[vehicleid][Tuning][17] = strval(value); }
		}
    	fclose(vehiclefile);
	}
 	return 1;
}
stock SavePlayer(playerid)
{
    if(!NoPL[playerid] && CarregouArmas[playerid] == 1) SaveWeapons(playerid);
	new name[30];
	GetPlayerName(playerid,name,30);
	new strsave[256];
	new File:playerfile = fopen(PlayerFile(name),io_write),vinfo[20];
	format(strsave,256,"Senha=%s\r\n",pStats[playerid][Senha]); fwrite(playerfile,strsave);
	format(strsave,256,"GangueNome=%s\r\n",pStats[playerid][GangueNome]); fwrite(playerfile,strsave);
	format(strsave,256,"TituloJornal=%s\r\n",pStats[playerid][TituloJornal]); fwrite(playerfile,strsave);
	format(strsave,256,"ContinuarPos=%d\r\n",pStats[playerid][ContinuarPos]); fwrite(playerfile,strsave);
	format(strsave,256,"Gangue=%d\r\n",pStats[playerid][Gangue]); fwrite(playerfile,strsave);
	format(strsave,256,"Jornal=%d\r\n",pStats[playerid][Jornal]); fwrite(playerfile,strsave);
	format(strsave,256,"Prof=%d\r\n",pStats[playerid][Prof]); fwrite(playerfile,strsave);
	format(strsave,256,"PastaDental=%d\r\n",pStats[playerid][PastaDental]); fwrite(playerfile,strsave);
	format(strsave,256,"EscovaDental=%d\r\n",pStats[playerid][EscovaDental]); fwrite(playerfile,strsave);
	format(strsave,256,"Dinheiro=%d\r\n",pStats[playerid][Dinheiro]); fwrite(playerfile,strsave);
	format(strsave,256,"Banco=%d\r\n",pStats[playerid][Banco]); fwrite(playerfile,strsave);
	format(strsave,256,"Skin=%d\r\n",pStats[playerid][Skin]); fwrite(playerfile,strsave);
	format(strsave,256,"Respeito=%d\r\n",pStats[playerid][Respeito]); fwrite(playerfile,strsave);
	format(strsave,256,"Galao=%d\r\n",pStats[playerid][Galao]); fwrite(playerfile,strsave);
	format(strsave,256,"Divida=%d\r\n",pStats[playerid][Divida]); fwrite(playerfile,strsave);
	format(strsave,256,"Emprestimo=%d\r\n",pStats[playerid][Emprestimo]); fwrite(playerfile,strsave);
	format(strsave,256,"HistoriaFeita=%d\r\n",pStats[playerid][HistoriaFeita]); fwrite(playerfile,strsave);
	format(strsave,256,"XL=%d\r\n",pStats[playerid][XL]); fwrite(playerfile,strsave);
	format(strsave,256,"ExPoints=%d\r\n",pStats[playerid][ExPoints]); fwrite(playerfile,strsave);
	format(strsave,256,"NM=%d\r\n",pStats[playerid][NM]); fwrite(playerfile,strsave);
	format(strsave,256,"Culinaria=%d\r\n",pStats[playerid][Culinaria]); fwrite(playerfile,strsave);
	format(strsave,256,"Wanted=%d\r\n",pStats[playerid][Wanted]); fwrite(playerfile,strsave);
	format(strsave,256,"Preso=%d\r\n",pStats[playerid][Preso]); fwrite(playerfile,strsave);
	format(strsave,256,"MotivoPrisao=%d\r\n",pStats[playerid][MotivoPrisao]); fwrite(playerfile,strsave);
	format(strsave,256,"Passaporte=%d\r\n",pStats[playerid][Passaporte]); fwrite(playerfile,strsave);
	format(strsave,256,"Porte=%d\r\n",pStats[playerid][Porte]); fwrite(playerfile,strsave);
	format(strsave,256,"HabNautica=%d\r\n",pStats[playerid][HabNautica]); fwrite(playerfile,strsave);
	format(strsave,256,"HabAerea=%d\r\n",pStats[playerid][HabAerea]); fwrite(playerfile,strsave);
	format(strsave,256,"HabTerrestre=%d\r\n",pStats[playerid][HabTerrestre]); fwrite(playerfile,strsave);
	format(strsave,256,"Phone=%d\r\n",pStats[playerid][Phone]); fwrite(playerfile,strsave);
	format(strsave,256,"Agenda=%d\r\n",pStats[playerid][Agenda]); fwrite(playerfile,strsave);
	format(strsave,256,"PhoneNumb=%d\r\n",pStats[playerid][PhoneNumb]); fwrite(playerfile,strsave);
	format(strsave,256,"CreditosCell=%d\r\n",pStats[playerid][CreditosCell]); fwrite(playerfile,strsave);
	format(strsave,256,"CaixaPostal=%d\r\n",pStats[playerid][CaixaPostal]); fwrite(playerfile,strsave);
	format(strsave,256,"Doenca=%d\r\n",pStats[playerid][Doenca]); fwrite(playerfile,strsave);
	format(strsave,256,"Micose=%d\r\n",pStats[playerid][Micose]); fwrite(playerfile,strsave);
	format(strsave,256,"Aids=%d\r\n",pStats[playerid][Aids]); fwrite(playerfile,strsave);
	format(strsave,256,"Higiene=%d\r\n",pStats[playerid][Higiene]); fwrite(playerfile,strsave);
	format(strsave,256,"Seguro=%d\r\n",pStats[playerid][Seguro]); fwrite(playerfile,strsave);
	format(strsave,256,"Pesca=%d\r\n",pStats[playerid][Pesca]); fwrite(playerfile,strsave);
	format(strsave,256,"Latas=%d\r\n",pStats[playerid][Latas]); fwrite(playerfile,strsave);
	format(strsave,256,"Iscas=%d\r\n",pStats[playerid][Iscas]); fwrite(playerfile,strsave);
	format(strsave,256,"LatasNecessarias=%d\r\n",pStats[playerid][LatasNecessarias]); fwrite(playerfile,strsave);
	format(strsave,256,"Camisinha=%d\r\n",pStats[playerid][Camisinha]); fwrite(playerfile,strsave);
	format(strsave,256,"Alcool=%d\r\n",pStats[playerid][Alcool]); fwrite(playerfile,strsave);
	format(strsave,256,"DosesMaconha=%d\r\n",pStats[playerid][DosesMaconha]); fwrite(playerfile,strsave);
	format(strsave,256,"DosesHeroina=%d\r\n",pStats[playerid][DosesHeroina]); fwrite(playerfile,strsave);
	format(strsave,256,"DosesCocaina=%d\r\n",pStats[playerid][DosesCocaina]); fwrite(playerfile,strsave);
	format(strsave,256,"ChaveMestra=%d\r\n",pStats[playerid][ChaveMestra]); fwrite(playerfile,strsave);
	format(strsave,256,"VirtualCard=%d\r\n",pStats[playerid][VirtualCard]); fwrite(playerfile,strsave);
	format(strsave,256,"CofreCell=%d\r\n",pStats[playerid][CofreCell]); fwrite(playerfile,strsave);
	format(strsave,256,"Vacina=%d\r\n",pStats[playerid][Vacina]); fwrite(playerfile,strsave);
	format(strsave,256,"VacinaDuracao=%d\r\n",pStats[playerid][VacinaDuracao]); fwrite(playerfile,strsave);
	format(strsave,256,"Casa=%d\r\n",pStats[playerid][Casa]); fwrite(playerfile,strsave);
	format(strsave,256,"ValorCasa=%d\r\n",pStats[playerid][ValorCasa]); fwrite(playerfile,strsave);
	format(strsave,256,"PickupCasa=%d\r\n",pStats[playerid][PickupCasa]); fwrite(playerfile,strsave);
	format(strsave,256,"VendendoCasa=%d\r\n",pStats[playerid][VendendoCasa]); fwrite(playerfile,strsave);
	format(strsave,256,"NSegurancas=%d\r\n",pStats[playerid][NSegurancas]); fwrite(playerfile,strsave);
	format(strsave,256,"JaContratado=%d\r\n",pStats[playerid][JaContratado]); fwrite(playerfile,strsave);
	format(strsave,256,"LastVeh=%d\r\n",pStats[playerid][LastVeh]); fwrite(playerfile,strsave);
	format(strsave,256,"Matou=%d\r\n",pStats[playerid][Matou]); fwrite(playerfile,strsave);
	format(strsave,256,"Morreu=%d\r\n",pStats[playerid][Morreu]); fwrite(playerfile,strsave);
	format(strsave,256,"WeaponSlot0=%d\r\n",pStats[playerid][WeaponSlot0]); fwrite(playerfile,strsave);
	format(strsave,256,"WeaponSlot0Ammo=%d\r\n",pStats[playerid][WeaponSlot0Ammo]); fwrite(playerfile,strsave);
	format(strsave,256,"WeaponSlot1=%d\r\n",pStats[playerid][WeaponSlot1]); fwrite(playerfile,strsave);
	format(strsave,256,"WeaponSlot1Ammo=%d\r\n",pStats[playerid][WeaponSlot1Ammo]); fwrite(playerfile,strsave);
    format(strsave,256,"WeaponSlot2=%d\r\n",pStats[playerid][WeaponSlot2]); fwrite(playerfile,strsave);
	format(strsave,256,"WeaponSlot2Ammo=%d\r\n",pStats[playerid][WeaponSlot2Ammo]); fwrite(playerfile,strsave);
	format(strsave,256,"WeaponSlot3=%d\r\n",pStats[playerid][WeaponSlot3]); fwrite(playerfile,strsave);
	format(strsave,256,"WeaponSlot3Ammo=%d\r\n",pStats[playerid][WeaponSlot3Ammo]); fwrite(playerfile,strsave);
	format(strsave,256,"WeaponSlot4=%d\r\n",pStats[playerid][WeaponSlot4]); fwrite(playerfile,strsave);
	format(strsave,256,"WeaponSlot4Ammo=%d\r\n",pStats[playerid][WeaponSlot4Ammo]); fwrite(playerfile,strsave);
	format(strsave,256,"WeaponSlot5=%d\r\n",pStats[playerid][WeaponSlot5]); fwrite(playerfile,strsave);
	format(strsave,256,"WeaponSlot5Ammo=%d\r\n",pStats[playerid][WeaponSlot5Ammo]); fwrite(playerfile,strsave);
	format(strsave,256,"WeaponSlot6=%d\r\n",pStats[playerid][WeaponSlot6]); fwrite(playerfile,strsave);
	format(strsave,256,"WeaponSlot6Ammo=%d\r\n",pStats[playerid][WeaponSlot6Ammo]); fwrite(playerfile,strsave);
	format(strsave,256,"WeaponSlot7=%d\r\n",pStats[playerid][WeaponSlot7]); fwrite(playerfile,strsave);
	format(strsave,256,"WeaponSlot7Ammo=%d\r\n",pStats[playerid][WeaponSlot7Ammo]); fwrite(playerfile,strsave);
	format(strsave,256,"WeaponSlot8=%d\r\n",pStats[playerid][WeaponSlot8]); fwrite(playerfile,strsave);
	format(strsave,256,"WeaponSlot8Ammo=%d\r\n",pStats[playerid][WeaponSlot8Ammo]); fwrite(playerfile,strsave);
	format(strsave,256,"WeaponSlot9=%d\r\n",pStats[playerid][WeaponSlot9]); fwrite(playerfile,strsave);
	format(strsave,256,"WeaponSlot9Ammo=%d\r\n",pStats[playerid][WeaponSlot9Ammo]); fwrite(playerfile,strsave);
	format(strsave,256,"WeaponSlot10=%d\r\n",pStats[playerid][WeaponSlot10]); fwrite(playerfile,strsave);
	format(strsave,256,"WeaponSlot10Ammo=%d\r\n",pStats[playerid][WeaponSlot10Ammo]); fwrite(playerfile,strsave);
	format(strsave,256,"WeaponSlot11=%d\r\n",pStats[playerid][WeaponSlot11]); fwrite(playerfile,strsave);
	format(strsave,256,"WeaponSlot11Ammo=%d\r\n",pStats[playerid][WeaponSlot11Ammo]); fwrite(playerfile,strsave);
	format(strsave,256,"WeaponSlot12=%d\r\n",pStats[playerid][WeaponSlot12]); fwrite(playerfile,strsave);
	format(strsave,256,"WeaponSlot12Ammo=%d\r\n",pStats[playerid][WeaponSlot12Ammo]); fwrite(playerfile,strsave);
 	format(strsave,256,"AumentoPropriedade=%d\r\n",pStats[playerid][AumentoPropriedade]); fwrite(playerfile,strsave);
 	format(strsave,256,"VendendoCasas=%d\r\n",pStats[playerid][VendendoCasas]); fwrite(playerfile,strsave);
 	format(strsave,256,"Banido=%s\r\n",pStats[playerid][Banido]); fwrite(playerfile,strsave);
 	format(strsave,256,"DonoCasaAlugada=%d\r\n",pStats[playerid][DonoCasaAlugada]); fwrite(playerfile,strsave);
	format(strsave,256,"LocouCasa=%d\r\n",pStats[playerid][LocouCasa]); fwrite(playerfile,strsave);
	format(strsave,256,"DiasDeAluguel=%d\r\n",pStats[playerid][DiasDeAluguel]); fwrite(playerfile,strsave);
	format(strsave,256,"DiasAluguel=%d\r\n",pStats[playerid][DiasAluguel]); fwrite(playerfile,strsave);
	format(strsave,256,"LocandoCasa=%d\r\n",pStats[playerid][LocandoCasa]); fwrite(playerfile,strsave);
	format(strsave,256,"ValorAluguel=%d\r\n",pStats[playerid][ValorAluguel]); fwrite(playerfile,strsave);
	format(strsave,256,"Peixe=%d\r\n",pStats[playerid][Peixe]); fwrite(playerfile,strsave);
	format(strsave,256,"VicioDrogas=%d\r\n",pStats[playerid][VicioDrogas]); fwrite(playerfile,strsave);
	format(strsave,256,"HistoriaSelecionada=%d\r\n",pStats[playerid][HistoriaSelecionada]); fwrite(playerfile,strsave);
	format(strsave,256,"VCell=%d\r\n",pStats[playerid][VCell]); fwrite(playerfile,strsave);
	format(strsave,256,"GCell=%d\r\n",pStats[playerid][GCell]); fwrite(playerfile,strsave);
	format(strsave,256,"ValorCabeca=%d\r\n",pStats[playerid][ValorCabeca]); fwrite(playerfile,strsave);
	format(strsave,256,"Sanduiche=%d\r\n",pStats[playerid][Sanduiche]); fwrite(playerfile,strsave);
	format(strsave,256,"Frango=%d\r\n",pStats[playerid][Frango]); fwrite(playerfile,strsave);
	format(strsave,256,"Peixe=%d\r\n",pStats[playerid][Peixe]); fwrite(playerfile,strsave);
	format(strsave,256,"Salada=%d\r\n",pStats[playerid][Salada]); fwrite(playerfile,strsave);
	format(strsave,256,"Pizza=%d\r\n",pStats[playerid][Pizza]); fwrite(playerfile,strsave);
	format(strsave,256,"Refrigerante=%d\r\n",pStats[playerid][Refrigerante]); fwrite(playerfile,strsave);
	format(strsave,256,"Suco=%d\r\n",pStats[playerid][Suco]); fwrite(playerfile,strsave);
    format(strsave,256,"Carne=%d\r\n",pStats[playerid][Carne]); fwrite(playerfile,strsave);
    format(strsave,256,"Strogonoff=%d\r\n",pStats[playerid][Strogonoff]); fwrite(playerfile,strsave);
    format(strsave,256,"Camarao=%d\r\n",pStats[playerid][Camarao]); fwrite(playerfile,strsave);
    format(strsave,256,"Linguica=%d\r\n",pStats[playerid][Linguica]); fwrite(playerfile,strsave);
    format(strsave,256,"ConquistouTerritorio=%d\r\n",pStats[playerid][ConquistouTerritorio]); fwrite(playerfile,strsave);
    format(strsave,256,"SorveteChocolate=%d\r\n",pStats[playerid][SorveteChocolate]); fwrite(playerfile,strsave);
    format(strsave,256,"SorveteNapolitano=%d\r\n",pStats[playerid][SorveteNapolitano]); fwrite(playerfile,strsave);
    format(strsave,256,"SorveteFlocos=%d\r\n",pStats[playerid][SorveteFlocos]); fwrite(playerfile,strsave);
    format(strsave,256,"SeguroCasa=%d\r\n",pStats[playerid][SeguroCasa]); fwrite(playerfile,strsave);
    format(strsave,256,"Remedios=%d\r\n",pStats[playerid][Remedios]); fwrite(playerfile,strsave);
    format(strsave,256,"DosesRemed=%d\r\n",pStats[playerid][DosesRemed]); fwrite(playerfile,strsave);
	format(strsave,256,"Banheiro=%d\r\n",pStats[playerid][Banheiro]); fwrite(playerfile,strsave);
	format(strsave,256,"ConvidadoCasa=%d\r\n",pStats[playerid][ConvidadoCasa]); fwrite(playerfile,strsave);
	format(strsave,256,"DonoCasaConvidada=%s\r\n",pStats[playerid][DonoCasaConvidada]); fwrite(playerfile,strsave);
	format(strsave,256,"QR=%d\r\n",pStats[playerid][QR]); fwrite(playerfile,strsave);
	format(strsave,256,"ABasico=%d\r\n",pStats[playerid][ABasico]); fwrite(playerfile,strsave);
	format(strsave,256,"AAvancado=%d\r\n",pStats[playerid][AAvancado]); fwrite(playerfile,strsave);
	format(strsave,256,"Fogao=%d\r\n",pStats[playerid][PFogao]); fwrite(playerfile,strsave);
	format(strsave,256,"TV=%d\r\n",pStats[playerid][PTV]); fwrite(playerfile,strsave);
	format(strsave,256,"Radio=%d\r\n",pStats[playerid][PRadio]); fwrite(playerfile,strsave);
	format(strsave,256,"Geladeira=%d\r\n",pStats[playerid][PGeladeira]); fwrite(playerfile,strsave);
	format(strsave,256,"Telefone=%d\r\n",pStats[playerid][PTelefone]); fwrite(playerfile,strsave);
	format(strsave,256,"TelefoneNumb=%d\r\n",pStats[playerid][PTelefoneNumb]); fwrite(playerfile,strsave);
	format(strsave,256,"Investimento=%d\r\n",pStats[playerid][PInvestimento]); fwrite(playerfile,strsave);
	format(strsave,256,"Hotel=%d\r\n",pStats[playerid][Hotel]); fwrite(playerfile,strsave);
	format(strsave,256,"DetectadoMorte=%d\r\n",pStats[playerid][DetectadoMorte]); fwrite(playerfile,strsave);
	format(strsave,256,"BancoTrabalho=%d\r\n",pStats[playerid][BancoTrabalho]); fwrite(playerfile,strsave);
    format(strsave,256,"BancoResidencia=%d\r\n",pStats[playerid][BancoResidencia]); fwrite(playerfile,strsave);
    format(strsave,256,"BancoEmpresa=%d\r\n",pStats[playerid][BancoEmpresa]); fwrite(playerfile,strsave);
	format(strsave,256,"Vida=%f\r\n",pStats[playerid][Vida]); fwrite(playerfile,strsave);
	format(strsave,256,"Colete=%f\r\n",pStats[playerid][Colete]); fwrite(playerfile,strsave);
	format(strsave,256,"SpawnPosX=%f\r\n",pStats[playerid][SpawnPosX]); fwrite(playerfile,strsave);
	format(strsave,256,"SpawnPosY=%f\r\n",pStats[playerid][SpawnPosY]); fwrite(playerfile,strsave);
	format(strsave,256,"SpawnPosZ=%f\r\n",pStats[playerid][SpawnPosZ]); fwrite(playerfile,strsave);
	format(strsave,256,"SpawnPosAng=%f\r\n",pStats[playerid][SpawnPosAng]); fwrite(playerfile,strsave);
	format(strsave,256,"LastPosX=%f\r\n",pStats[playerid][LastPosX]); fwrite(playerfile,strsave);
	format(strsave,256,"LastPosY=%f\r\n",pStats[playerid][LastPosY]); fwrite(playerfile,strsave);
	format(strsave,256,"LastPosZ=%f\r\n",pStats[playerid][LastPosZ]); fwrite(playerfile,strsave);
	format(strsave,256,"MSGBIP=%s\r\n",pStats[playerid][MSGBIP]); fwrite(playerfile,strsave);
	set(strsave,"");
	new s[256];
	for(new v = 0; v < pStats[playerid][LastVeh]; v++)
	{
		format(vinfo,20,"%d;",GetVehicles[playerid][v]);
		strcat(strsave,vinfo);
	}
	strcat(strsave,"\r\n");
	format(s,256,"Vehicles=%s",strsave);
 	fwrite(playerfile,s);
 	set(strsave,"");
 	for(new sg = 0; sg < pStats[playerid][NSegurancas]; sg++)
 	{
		strcat(strsave,GetSegurancas[playerid][sg]);
		strcat(strsave,";");
		strcat(strsave,GetSegurancasValor[playerid][sg]);
		strcat(strsave,";");
 	}
 	strcat(strsave,"\r\n");
 	format(s,256,"Segurancas=%s",strsave);
 	fwrite(playerfile,s);
	fclose(playerfile);
	printf("Dados de %s salvos...",name);
}
stock LoadPlayer(playerid)
{
	new name[30];
	GetPlayerName(playerid,name,30);
	if(!fexist(PlayerFile(name))) return 0;
	new File:playerfile = fopen(PlayerFile(name),io_read),tmp[256],index,key[256],value[256];
	while(fread(playerfile,tmp,sizeof(tmp))){
	    key = GetValueKey(tmp);
	    value = GetKeyValue(tmp);
		if(compare(key,"Senha")) { pStats[playerid][Senha] = value; }
		if(compare(key,"GangueNome")) { pStats[playerid][GangueNome] = value; }
		if(compare(key,"TituloJornal")) { pStats[playerid][TituloJornal] = value; }
		if(compare(key,"ContinuarPos")) { pStats[playerid][ContinuarPos] = strval(value); }
		if(compare(key,"Gangue")) { pStats[playerid][Gangue] = strval(value); }
		if(compare(key,"Jornal")) { pStats[playerid][Jornal] = strval(value); }
		if(compare(key,"Prof")) { pStats[playerid][Prof] = strval(value); }
		if(compare(key,"PastaDental")) { pStats[playerid][PastaDental] = strval(value); }
		if(compare(key,"EscovaDental")) { pStats[playerid][EscovaDental] = strval(value); }
		if(compare(key,"Dinheiro")) { pStats[playerid][Dinheiro] = strval(value); }
		if(compare(key,"Banco")) { pStats[playerid][Banco] = strval(value); }
		if(compare(key,"Skin")) { pStats[playerid][Skin] = strval(value); }
		if(compare(key,"Respeito")) { pStats[playerid][Respeito] = strval(value); }
		if(compare(key,"Galao")) { pStats[playerid][Galao] = strval(value); }
		if(compare(key,"Divida")) { pStats[playerid][Divida] = strval(value); }
		if(compare(key,"Emprestimo")) { pStats[playerid][Emprestimo] = strval(value); }
		if(compare(key,"HistoriaFeita")) { pStats[playerid][HistoriaFeita] = strval(value); }
		if(compare(key,"XL")) { pStats[playerid][XL] = strval(value); }
		if(compare(key,"ExPoints")) { pStats[playerid][ExPoints] = strval(value); }
		if(compare(key,"NM")) { pStats[playerid][NM] = strval(value); }
		if(compare(key,"Culinaria")) { pStats[playerid][Culinaria] = strval(value); }
		if(compare(key,"Wanted")) { pStats[playerid][Wanted] = strval(value); }
		if(compare(key,"Preso")) { pStats[playerid][Preso] = strval(value); }
		if(compare(key,"MotivoPrisao")) { pStats[playerid][MotivoPrisao] = strval(value); }
		if(compare(key,"Passaporte")) { pStats[playerid][Passaporte] = strval(value); }
		if(compare(key,"Porte")) { pStats[playerid][Porte] = strval(value); }
		if(compare(key,"HabNautica")) { pStats[playerid][HabNautica] = strval(value); }
		if(compare(key,"HabAerea")) { pStats[playerid][HabAerea] = strval(value); }
		if(compare(key,"HabTerrestre")) { pStats[playerid][HabTerrestre] = strval(value); }
		if(compare(key,"Phone")) { pStats[playerid][Phone] = strval(strtok(tmp,index)); }
		if(compare(key,"Agenda")) { pStats[playerid][Agenda] = strval(value); }
		if(compare(key,"PhoneNumb")) { pStats[playerid][PhoneNumb] = strval(value); }
		if(compare(key,"CreditosCell")) { pStats[playerid][CreditosCell] = strval(value); }
		if(compare(key,"CaixaPostal")) { pStats[playerid][CaixaPostal] = strval(value); }
		if(compare(key,"Doenca")) { pStats[playerid][Doenca] = strval(value); }
		if(compare(key,"Micose")) { pStats[playerid][Micose] = strval(value); }
		if(compare(key,"Aids")) { pStats[playerid][Aids] = strval(value); }
		if(compare(key,"Higiene")) { pStats[playerid][Higiene] = strval(value); }
		if(compare(key,"Seguro")) { pStats[playerid][Seguro] = strval(value); }
		if(compare(key,"Pesca")) { pStats[playerid][Pesca] = strval(value); }
		if(compare(key,"Latas")) { pStats[playerid][Latas] = strval(value); }
		if(compare(key,"Iscas")) { pStats[playerid][Iscas] = strval(value); }
		if(compare(key,"LatasNecessarias")) { pStats[playerid][LatasNecessarias] = strval(value); }
		if(compare(key,"Camisinha")) { pStats[playerid][Camisinha] = strval(value); }
		if(compare(key,"Alcool")) { pStats[playerid][Alcool] = strval(value); }
		if(compare(key,"DosesMaconha")) { pStats[playerid][DosesMaconha] = strval(value); }
		if(compare(key,"DosesHeroina")) { pStats[playerid][DosesHeroina] = strval(value); }
		if(compare(key,"DosesCocaina")) { pStats[playerid][DosesCocaina] = strval(value); }
		if(compare(key,"ChaveMestra")) { pStats[playerid][ChaveMestra] = strval(value); }
		if(compare(key,"VirtualCard")) { pStats[playerid][VirtualCard] = strval(value); }
		if(compare(key,"CofreCell")) { pStats[playerid][CofreCell] = strval(value); }
		if(compare(key,"Vacina")) { pStats[playerid][Vacina] = strval(value); }
		if(compare(key,"VacinaDuracao")) { pStats[playerid][VacinaDuracao] = strval(value); }
		if(compare(key,"Casa")) { pStats[playerid][Casa] = strval(value); }
		if(compare(key,"ValorCasa")) { pStats[playerid][ValorCasa] = strval(value); }
		if(compare(key,"PickupCasa")) { pStats[playerid][PickupCasa] = strval(value); }
		if(compare(key,"VendendoCasa")) { pStats[playerid][VendendoCasa] = strval(value); }
		if(compare(key,"NSegurancas")) { pStats[playerid][NSegurancas] = strval(value); }
		if(compare(key,"JaContratado")) { pStats[playerid][JaContratado] = strval(value); }
		if(compare(key,"LastVeh")) { pStats[playerid][LastVeh] = strval(value); }
    	if(compare(key,"Matou")) { pStats[playerid][Matou] = strval(value); }
    	if(compare(key,"Morreu")) { pStats[playerid][Morreu] = strval(value); }
		if(compare(key,"WeaponSlot0")) { pStats[playerid][WeaponSlot0] = strval(value); }
		if(compare(key,"WeaponSlot0Ammo")) { pStats[playerid][WeaponSlot0Ammo] = strval(value); }
		if(compare(key,"WeaponSlot1")) { pStats[playerid][WeaponSlot1] = strval(value); }
		if(compare(key,"WeaponSlot1Ammo")) { pStats[playerid][WeaponSlot1Ammo] = strval(value); }
		if(compare(key,"WeaponSlot2")) { pStats[playerid][WeaponSlot2] = strval(value); }
		if(compare(key,"WeaponSlot2Ammo")) { pStats[playerid][WeaponSlot2Ammo] = strval(value); }
		if(compare(key,"WeaponSlot3")) { pStats[playerid][WeaponSlot3] = strval(value); }
		if(compare(key,"WeaponSlot3Ammo")) { pStats[playerid][WeaponSlot3Ammo] = strval(value); }
		if(compare(key,"WeaponSlot4")) { pStats[playerid][WeaponSlot4] = strval(value); }
		if(compare(key,"WeaponSlot4Ammo")) { pStats[playerid][WeaponSlot4Ammo] = strval(value); }
		if(compare(key,"WeaponSlot5")) { pStats[playerid][WeaponSlot5] = strval(value); }
		if(compare(key,"WeaponSlot5Ammo")) { pStats[playerid][WeaponSlot5Ammo] = strval(value); }
		if(compare(key,"WeaponSlot6")) { pStats[playerid][WeaponSlot6] = strval(value); }
		if(compare(key,"WeaponSlot6Ammo")) { pStats[playerid][WeaponSlot6Ammo] = strval(value); }
		if(compare(key,"WeaponSlot7")) { pStats[playerid][WeaponSlot7] = strval(value); }
		if(compare(key,"WeaponSlot7Ammo")) { pStats[playerid][WeaponSlot7Ammo] = strval(value); }
		if(compare(key,"WeaponSlot8")) { pStats[playerid][WeaponSlot8] = strval(value); }
		if(compare(key,"WeaponSlot8Ammo")) { pStats[playerid][WeaponSlot8Ammo] = strval(value); }
		if(compare(key,"WeaponSlot9")) { pStats[playerid][WeaponSlot9] = strval(value); }
		if(compare(key,"WeaponSlot9Ammo")) { pStats[playerid][WeaponSlot9Ammo] = strval(value); }
		if(compare(key,"WeaponSlot10")) { pStats[playerid][WeaponSlot10] = strval(value); }
		if(compare(key,"WeaponSlot10Ammo")) { pStats[playerid][WeaponSlot10Ammo] = strval(value); }
		if(compare(key,"WeaponSlot11")) { pStats[playerid][WeaponSlot11] = strval(value); }
		if(compare(key,"WeaponSlot11Ammo")) { pStats[playerid][WeaponSlot11Ammo] = strval(value); }
		if(compare(key,"WeaponSlot12")) { pStats[playerid][WeaponSlot12] = strval(value); }
		if(compare(key,"WeaponSlot12Ammo")) { pStats[playerid][WeaponSlot12Ammo] = strval(value); }
    	if(compare(key,"AumentoPropriedade")) { pStats[playerid][AumentoPropriedade] = strval(value); }
    	if(compare(key,"VendendoCasas")) { pStats[playerid][VendendoCasas] = strval(value); }
    	if(compare(key,"Banido")) { pStats[playerid][Banido] = strval(value); }
    	if(compare(key,"DonoCasaAlugada")) { set(pStats[playerid][DonoCasaAlugada],value); }
		if(compare(key,"LocouCasa")) { pStats[playerid][LocouCasa] = strval(value); }
		if(compare(key,"DiasDeAluguel")) { pStats[playerid][DiasDeAluguel] = strval(value); }
		if(compare(key,"DiasAluguel")) { pStats[playerid][DiasAluguel] = strval(value); }
		if(compare(key,"LocandoCasa")) { pStats[playerid][LocandoCasa] = strval(value); }
		if(compare(key,"ValorAluguel")) { pStats[playerid][ValorAluguel] = strval(value); }
		if(compare(key,"Peixe")) { pStats[playerid][Peixe] = strval(value); }
		if(compare(key,"VicioDrogas")) { pStats[playerid][VicioDrogas] = strval(value); }
		if(compare(key,"HistoriaSelecionada")) { pStats[playerid][HistoriaSelecionada] = strval(value); }
		if(compare(key,"VCell")) { pStats[playerid][VCell] = strval(strtok(tmp,index)); }
		if(compare(key,"GCell")) { pStats[playerid][GCell] = strval(strtok(tmp,index)); }
		if(compare(key,"ValorCabeca")) { pStats[playerid][ValorCabeca] = strval(value); }
		if(compare(key,"Sanduiche")) { pStats[playerid][Sanduiche] = strval(value); }
		if(compare(key,"Frango")) { pStats[playerid][Frango] = strval(value); }
		if(compare(key,"Peixe")) { pStats[playerid][Peixe] = strval(value); }
		if(compare(key,"Salada")) { pStats[playerid][Salada] = strval(value); }
		if(compare(key,"Pizza")) { pStats[playerid][Pizza] = strval(value); }
		if(compare(key,"Refrigerante")) { pStats[playerid][Refrigerante] = strval(value); }
		if(compare(key,"Suco")) { pStats[playerid][Suco] = strval(value); }
		if(compare(key,"Carne")) { pStats[playerid][Carne] = strval(value); }
		if(compare(key,"Strogonoff")) { pStats[playerid][Strogonoff] = strval(value); }
		if(compare(key,"Camarao")) { pStats[playerid][Camarao] = strval(value); }
		if(compare(key,"Linguica")) { pStats[playerid][Linguica] = strval(value); }
    	if(compare(key,"ConquistouTerritorio")) { pStats[playerid][ConquistouTerritorio] = strval(value); }
    	if(compare(key,"SorveteChocolate")) { pStats[playerid][SorveteChocolate] = strval(value); }
    	if(compare(key,"SorveteNapolitano")) { pStats[playerid][SorveteNapolitano] = strval(value); }
    	if(compare(key,"SorveteFlocos")) { pStats[playerid][SorveteFlocos] = strval(value); }
    	if(compare(key,"SeguroCasa")) { pStats[playerid][SeguroCasa] = strval(value); }
    	if(compare(key,"Remedios")) { pStats[playerid][Remedios] = strval(value); }
    	if(compare(key,"DosesRemed")) { pStats[playerid][DosesRemed] = strval(value); }
    	if(compare(key,"Banheiro")) { pStats[playerid][Banheiro] = strval(value); }
    	if(compare(key,"ConvidadoCasa")) { pStats[playerid][ConvidadoCasa] = strval(value); }
    	if(compare(key,"DonoCasaConvidada")) { set(pStats[playerid][DonoCasaConvidada],value); }
    	if(compare(key,"QR")) { pStats[playerid][QR] = strval(value); }
    	if(compare(key,"ABasico")) { pStats[playerid][ABasico] = strval(value); }
    	if(compare(key,"AAvancado")) { pStats[playerid][AAvancado] = strval(value); }
    	if(compare(key,"Fogao")) { pStats[playerid][PFogao] = strval(value); }
    	if(compare(key,"TV")) { pStats[playerid][PTV] = strval(value); }
    	if(compare(key,"Radio")) { pStats[playerid][PRadio] = strval(value); }
    	if(compare(key,"Geladeira")) { pStats[playerid][PGeladeira] = strval(value); }
    	if(compare(key,"Telefone")) { pStats[playerid][PTelefone] = strval(value); }
    	if(compare(key,"TelefoneNumb")) { pStats[playerid][PTelefoneNumb] = strval(value); }
    	if(compare(key,"Investimento")) { pStats[playerid][PInvestimento] = strval(value); }
    	if(compare(key,"Hotel")) { pStats[playerid][Hotel] = strval(value); }
    	if(compare(key,"DetectadoMorte")) { pStats[playerid][DetectadoMorte] = strval(value); }
    	if(compare(key,"BancoTrabalho")) { pStats[playerid][BancoTrabalho] = strval(value); }
    	if(compare(key,"BancoResidencia")) { pStats[playerid][BancoResidencia] = strval(value); }
    	if(compare(key,"BancoEmpresa")) { pStats[playerid][BancoEmpresa] = strval(value); }
		if(compare(key,"Vida")) { pStats[playerid][Vida] = floatstr(value); }
		if(compare(key,"Colete")) { pStats[playerid][Colete] = floatstr(value); }
		if(compare(key,"SpawnPosX")) { pStats[playerid][SpawnPosX] = floatstr(value); }
		if(compare(key,"SpawnPosY")) { pStats[playerid][SpawnPosY] = floatstr(value); }
		if(compare(key,"SpawnPosZ")) { pStats[playerid][SpawnPosZ] = floatstr(value); }
		if(compare(key,"SpawnPosAng")) { pStats[playerid][SpawnPosAng] = floatstr(value); }
		if(compare(key,"LastPosX")) { pStats[playerid][LastPosX] = floatstr(value); }
		if(compare(key,"LastPosY")) { pStats[playerid][LastPosY] = floatstr(value); }
		if(compare(key,"LastPosZ")) { pStats[playerid][LastPosZ] = floatstr(value); }
		if(compare(key,"MSGBIP")) { set(pStats[playerid][MSGBIP],value); }
		if(compare(key,"Vehicles")) {
		    index = 0;
			for(new v=0; v<pStats[playerid][LastVeh]; v++){
				GetVehicles[playerid][v] = strval(strtok(value,index,';'));
			}
		}
		if(compare(key,"Segurancas")) {
		    index = 0;
		    for(new s=0; s<pStats[playerid][NSegurancas]; s++){
				set(GetSegurancas[playerid][s],strtok(value,index,';'));
				GetSegurancasValor[playerid][s] = strval(strtok(value,index,';'));
			}
		}
	}
	fclose(playerfile);
	printf("Dados de %s carregados...",name);
	return 1;
}
stock AddPlayerMoney(playerid, value, motive){
	if(value > 0){
		MotivoGranaID[playerid] = motive;
	}
	MoneyGive[playerid] = value;
}
public EndPL(){
	if(QtPoliciaisPL() == 0){
        PLIniciou = 0;
       	QtCapturados = 0;
		for(new i = 0; i < SLOTS2; i++){
	    	if(IsPlayerConnected(i) && NoPL[i] == 1){
    		    GameTextForPlayer(i, "~w~Equipe dos ladroes~n~~r~venceu",4000,0);
				if(Equipe[i] == 1){
				    AddPlayerMoney(i,100,7);
				    pStats[i][Respeito]++;
				    SendClientMessage(i, COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] Sua equipe venceu e você recebeu $100");
			    	SendClientMessage(i, COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] E para melhorar você ganhou mais 1 ponto de respeito.");
				}
				RetirarPL(i);
			}
		}
		return 1;
	}
	if(QtCapturadosPL() == QtLadroesPL()){
	    PLIniciou = 0;
    	QtCapturados = 0;
 		SendClientMessageToAll(COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] Todos os ladrões foram capturados a equipe dos policiais venceu!");
	    for(new i = 0; i < SLOTS2; i++){
    		if(IsPlayerConnected(i) && NoPL[i] == 1){
    	    	GameTextForPlayer(i, "~w~Equipe dos policiais~n~~r~venceu",4000,0);
				if(Equipe[i] == 2){
				    KillTimer(TimerPL);
			    	AddPlayerMoney(i,100,7);
                    pStats[i][Respeito]++;
			    	SendClientMessage(i, COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] Sua equipe venceu e você recebeu $100");
			    	SendClientMessage(i, COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] E para melhorar você ganhou mais 1 ponto de respeito.");
				}
				RetirarPL(i);
			}
		}
		return 1;
	}
	if(CtPL != 1){
		CtPL--;
		if(CtPL > 1){
	    	new string[256];
			format(string,sizeof(string),"[POLÍCIA E LADRÃO] Restam %d minutos para o evento acabar...",CtPL);
			SendClientMessageToAll(COLOR_LIGHT_YELLOW, string);
			TimerPL = SetTimer("EndPL",60000,0);
		}
		else if(CtPL == 1){
    	    SendClientMessageToAll(COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] Resta 1 minuto para o evento acabar!");
			KillTimer(TimerPL);
			CtPL2 = 10;
			TimerPL = SetTimer("EndPL",50000,0);
		}
		else if(CtPL == 0){
		    PLIniciou = 0;
        	QtCapturados = 0;
			for(new i = 0; i < SLOTS2; i++){
		    	if(IsPlayerConnected(i) && NoPL[i] == 1){
	    		    GameTextForPlayer(i, "~w~Equipe dos ladroes~n~~r~venceu",4000,0);
					if(Equipe[i] == 1){
					    AddPlayerMoney(i,100,7);
					    SendClientMessage(i, COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] Sua equipe venceu e você recebeu $100");
					}
					RetirarPL(i);
				}
			}
		}
	}
	else{
	    CtPL2--;
		SendClientMessageToAll(COLOR_LIGHT_YELLOW, ApplyZero(CtPL2));
		if(CtPL2 == 1){
			CtPL--;
			EndPL();
		}
		if(CtPL2 >= 1) SetTimer("EndPL",1000,0);
	}
	return 1;
}
public SetLadraoPL(playerid){
    SaveWeapons(playerid);
	new string[256];
	new rand = random(sizeof(LadroesPos));
	Equipe[playerid] = 1;
	SetPlayerPos(playerid,LadroesPos[playerid][0],LadroesPos[playerid][1],LadroesPos[playerid][2]);
	rand = random(sizeof(SkinsLadroes));
	SetPlayerSkin(playerid,SkinsLadroes[rand]);
	SetPlayerHealth(playerid,5.0);
	SetPlayerColor(playerid, COLOR_LADRAO);
    SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] Suas armas foram salvas, não se preocupe!");
    CarregouArmas[playerid] = 0;
	ResetPlayerWeapons(playerid);
	GameTextForPlayer(playerid,"~r~fuja dos ~n~policiais",3000,1);
	format(string,sizeof(string),"[POLÍCIA E LADRÃO] %s entrou para a equipe dos ladrões",PlayerName(playerid));
	SendClientMessageToAll(COLOR_LIGHT_YELLOW, string);
	GangZoneShowForPlayer(playerid, PoliciaLadraoArea, COLOR_COP_SWAT);
}
public SetPolicialPL(playerid){
    SaveWeapons(playerid);
	new string[256];
	Equipe[playerid] = 2;
	SetPlayerPos(playerid,-283.9879,-2187.1279,28.6916);
	new rand = random(sizeof(SkinsPoliciais));
	SetPlayerSkin(playerid,SkinsPoliciais[rand]);
	SetPlayerColor(playerid, COLOR_POLICIA);
    SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] Suas armas foram salvas, não se preocupe!");
	CarregouArmas[playerid] = 0;
	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid,29,100);
	GameTextForPlayer(playerid,"~b~capture os ~n~ladroes",3000,1);
	format(string,sizeof(string),"[POLÍCIA E LADRÃO] %s entrou para a equipe dos policiais",PlayerName(playerid));
	SendClientMessageToAll(COLOR_LIGHT_YELLOW, string);
	GangZoneShowForPlayer(playerid, PoliciaLadraoArea, COLOR_COP_SWAT);
}
public RetirarPL(playerid){
	new string[256];
	NoPL[playerid] = 0;
	Equipe[playerid] = 0;
	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid,pStats[playerid][WeaponSlot0],pStats[playerid][WeaponSlot0Ammo]);
	GivePlayerWeapon(playerid,pStats[playerid][WeaponSlot1],pStats[playerid][WeaponSlot1Ammo]);
	GivePlayerWeapon(playerid,pStats[playerid][WeaponSlot2],pStats[playerid][WeaponSlot2Ammo]);
	GivePlayerWeapon(playerid,pStats[playerid][WeaponSlot3],pStats[playerid][WeaponSlot3Ammo]);
	GivePlayerWeapon(playerid,pStats[playerid][WeaponSlot4],pStats[playerid][WeaponSlot4Ammo]);
	GivePlayerWeapon(playerid,pStats[playerid][WeaponSlot5],pStats[playerid][WeaponSlot5Ammo]);
	GivePlayerWeapon(playerid,pStats[playerid][WeaponSlot6],pStats[playerid][WeaponSlot6Ammo]);
	GivePlayerWeapon(playerid,pStats[playerid][WeaponSlot7],pStats[playerid][WeaponSlot7Ammo]);
	GivePlayerWeapon(playerid,pStats[playerid][WeaponSlot8],pStats[playerid][WeaponSlot8Ammo]);
	GivePlayerWeapon(playerid,pStats[playerid][WeaponSlot9],pStats[playerid][WeaponSlot9Ammo]);
	GivePlayerWeapon(playerid,pStats[playerid][WeaponSlot10],pStats[playerid][WeaponSlot10Ammo]);
	GivePlayerWeapon(playerid,pStats[playerid][WeaponSlot11],pStats[playerid][WeaponSlot11Ammo]);
	GivePlayerWeapon(playerid,pStats[playerid][WeaponSlot12],pStats[playerid][WeaponSlot12Ammo]);
    CarregouArmas[playerid] = 1;
	SetPlayerHealth(playerid,100);
 	SetPlayerSkin(playerid,pStats[playerid][Skin]);
 	SetPlayerColor(playerid,ProfColors[Profissao[playerid]]);
 	GameTextForPlayer(playerid,"~w~voce saiu do ~n~evento",3000,1);
 	GangZoneHideForPlayer(playerid, PoliciaLadraoArea);
 	format(string,sizeof(string),"[POLÍCIA E LADRÃO] %s saiu do evento",PlayerName(playerid));
	SendClientMessageToAll(COLOR_LIGHT_YELLOW, string);
	SetPlayerPos(playerid,1019.2133,-1134.7303,23.8281);
}
public AbastecerArma(playerid){
	TogglePlayerControllable(playerid,1);
	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid,29,100);
    SendClientMessage(playerid, COLOR_POLICIA, "Arma abastecida... GO GO GO!");
}
stock QtLadroesPL(){
    if(!PLIniciou) return 0;
	new result;
	for(new i = 0; i < SLOTS2; i++){
	    if(Equipe[i] == 1 && NoPL[i] == 1) result++;
	}
	return result;
}
stock QtPoliciaisPL(){
    if(!PLIniciou) return 0;
	new result;
	for(new i = 0; i < SLOTS2; i++){
	    if(Equipe[i] == 2 && NoPL[i] == 1) result++;
	}
	return result;
}
stock QtCapturadosPL(){
    if(!PLIniciou) return 0;
	new result;
	for(new i = 0; i < SLOTS2; i++){
	    if(Capturado[i] == 1 && Equipe[i] == 1 && NoPL[i] == 1) result++;
	}
	return result;
}
stock TrancarVeiculoPorProf(playerid)
{
	for(new i=0; i<QTCARS; i++){
		if(Profissao[playerid] != MOTOTAXI){
			if(i == MotoTaxi || i == MotoTaxi2 || i == MotoTaxi3){
		    	SetVehicleParamsForPlayer(i,playerid, 0, 1);
		    }
		}
  		else{
		    SetVehicleParamsForPlayer(i,playerid, 0, 0);
		}
		if(Profissao[playerid] != TAXI_AEREO){
		    if(i == AeroTaxi){
		    	SetVehicleParamsForPlayer(i,playerid, 0, 1);
			}
		}
		else{
		    SetVehicleParamsForPlayer(i,playerid, 0, 0);
		}
		if(Profissao[playerid] != MOTORISTA_PARTICULAR){
			if(i == limosine1 || i == limosine2){
		    	SetVehicleParamsForPlayer(i,playerid, 0, 1);
			}
		}
		else{
		    SetVehicleParamsForPlayer(i,playerid, 0, 0);
		}
		if(Profissao[playerid] != TAXISTA){
            if(i == Taxi1 || i == Taxi2 || i == Taxi3){
				SetVehicleParamsForPlayer(i,playerid, 0, 1);
			}
		}
  		else{
		    SetVehicleParamsForPlayer(i,playerid, 0, 0);
		}
		if(Profissao[playerid] != JORNALISTA || Profissao[playerid] !=MOTORISTA_PARTICULAR){
	 		if(i == CarroJornal || i == CarroJornal2 || i == CarroJornal3){
  				SetVehicleParamsForPlayer(i,playerid, 0, 1);
			}
		}
		else{
		    SetVehicleParamsForPlayer(i,playerid, 0, 0);
		}
		if(Profissao[playerid] != ENTREGADOR_PIZZA){
	 		if(i == MotoPizza || i == MotoPizza2 || i == MotoPizza3 || i == MotoPizza4 || i == MotoPizza5 || i == MotoPizza6){
		    	SetVehicleParamsForPlayer(i,playerid, 0, 1);
			}
		}
		else{
		    SetVehicleParamsForPlayer(i,playerid, 0, 0);
		}
		if(Profissao[playerid] != INSTRUTOR){
			if(i == CarroAuto || i == CarroAuto2 || i == CarroAuto3 || i == CarroAuto4 || i == CarroAuto5 || i == CarroAuto6){
		    	SetVehicleParamsForPlayer(i,playerid, 0, 1);
		    }
		}
        else{
		    SetVehicleParamsForPlayer(i,playerid, 0, 0);
		}
		if(GetVehicleModel(i) == 596 || GetVehicleModel(i) == 497 || GetVehicleModel(i) == 597 || GetVehicleModel(i) == 598 || GetVehicleModel(i) == 599 || GetVehicleModel(i) == 523 || GetVehicleModel(i) == 490 || GetVehicleModel(i) == 427){
			if(Profissao[playerid] != COP_SWAT && Profissao[playerid] != EXERCITO && Profissao[playerid] != COP_MILITAR && Profissao[playerid] != COP_RODOVIARIO && Profissao[playerid] != COP_NARCOTICOS && Profissao[playerid] != DELEGADO){
				SetVehicleParamsForPlayer(i,playerid, 0, 1);
			}
			else{
                SetVehicleParamsForPlayer(i,playerid, 0, 0);
			}
		}
		if(GetVehicleModel(i) == 416){
			if(Profissao[playerid] != PARAMEDICO){
				SetVehicleParamsForPlayer(i,playerid, 0, 1);
			}
			else{
                SetVehicleParamsForPlayer(i,playerid, 0, 0);
			}
		}
		if(GetVehicleModel(i) == 525){
			if(Profissao[playerid] != MECANICO){
				SetVehicleParamsForPlayer(i,playerid, 0, 1);
			}
			else{
                SetVehicleParamsForPlayer(i,playerid, 0, 0);
			}
		}
		if(GetVehicleModel(i) == 408){
			if(Profissao[playerid] != LIXEIRO){
				SetVehicleParamsForPlayer(i,playerid, 0, 1);
			}
			else{
                SetVehicleParamsForPlayer(i,playerid, 0, 0);
			}
		}
	}
}
public LevarJogador(playerid,plid)
{
	if(LevandoJogador[playerid]==1){
	    if(Profissao[playerid] != ASSASSINO){
			new Float:x,Float:y,Float:z;
			GetPlayerPos(playerid,x,y,z);
			GetXYInBackOfPlayer(playerid,x,y,0.7);
			SetPlayerPos(plid,x,y,z);
			if(GetPlayerCars[plid]==INVALID_VEHICLE_ID){
				if(GetDistancePlayerToCar(plid,7)==1){
				    SendClientMessage(playerid, COLOR_COP_SWAT, "Para por ele no veículo digite: /pornocarro.");
				}
			}
		} else {
			new Float:x,Float:y,Float:z;
			GetPlayerPos(playerid,x,y,z);
			GetXYInBackOfPlayer(playerid,x,y,0.7);
			SetPlayerPos(plid,x,y,z);
			if(GetCopCars[plid]==INVALID_VEHICLE_ID){
				if(GetDistanceToCopCars(plid,7)==1){
				    SendClientMessage(playerid, COLOR_COP_SWAT, "/pornocarro para colocar o jogador no veículo de polícia...");
				}
			}
		}
	}
	else{
		KillTimer(TimerLevando[playerid]);
		LevandoJogador[playerid]=0;
	}
}
stock GetDistanceToCopCars(playerid,Float:distance)
{
	new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez,Float:getdistance;
	GetPlayerPos(playerid,x,y,z);
	for(new v=0;v<QTCARS;v++){
    	if(GetVehicleModel(v) == 596 || GetVehicleModel(v) == 497 || GetVehicleModel(v) == 597 || GetVehicleModel(v) == 598 || GetVehicleModel(v) == 599 || GetVehicleModel(v) == 523 || GetVehicleModel(v) == 490 || GetVehicleModel(v) == 427){
			GetVehiclePos(v,x2,y2,z2);
			distancex=x-x2;
			distancey=y-y2;
			distancez=z-z2;
			getdistance=(distancex*distancex + distancey*distancey + distancez*distancez);
			if(getdistance <= distance){
				GetCopCars[playerid]=v;
				return 1;
			}
		}
	}
	GetCopCars[playerid]=INVALID_VEHICLE_ID;
	return 0;
}
stock GetDistancePlayerToCar(playerid,Float:distance)
{
	new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez,Float:getdistance;
	GetPlayerPos(playerid,x,y,z);
	for(new v=0;v<MAX_VEHICLES;v++){
	    if(!fexist(VehicleFile(v))) break;
    	if((GetVehicleModel(v) >= 400) && (GetVehicleModel(v) <= 610)){
			GetVehiclePos(v,x2,y2,z2);
			distancex=x-x2;
			distancey=y-y2;
			distancez=z-z2;
			getdistance=(distancex*distancex + distancey*distancey + distancez*distancez);
			if(getdistance <= distance){
				GetPlayerCars[playerid]=v;
				return 1;
			}
		}
	}
	GetPlayerCars[playerid]=INVALID_VEHICLE_ID;
	return 0;
}
stock GetProxPlayer(Float:x,Float:y,Float:z,Float:radi)
{
	new playa = -1, Float:dis = radi, Float:playerx, Float:playery, Float:playerz, Float:getdistance;
	for(new i = 0; i < SLOTS2; i++){
	    if(IsPlayerConnected(i)){
	        GetPlayerPos(i,playerx,playery,playerz);
			getdistance = x - playerx * x - playerx + y - playery * y - playery + z - playerz * z - playerz;
	        if(getdistance <= dis){
	            playa = i;
			}
		}
	}
	return playa;
}
stock GetProxUnbewusstePlayer(playerid,Float:x,Float:y,Float:z,Float:radi)
{
	new playa = -1, Float:dis = radi, Float:playerx, Float:playery, Float:playerz, Float:getdistance;
	for(new i = 0; i < SLOTS2; i++){
	    if(IsPlayerConnected(i) && Morrendo[i] == 1 && i != playerid){
	        GetPlayerPos(i,playerx,playery,playerz);
			getdistance = x - playerx * x - playerx + y - playery * y - playery + z - playerz * z - playerz;
	        if(getdistance <= dis){
	            playa = i;
			}
		}
	}
	return playa;
}
stock PlayerName(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	return name;
}
writelog(log[])
{
	fixchars(log);
	if(!fexist("Utilidades/RPGLog.txt")){
	    new File:logstr;
	    logstr = fopen("Utilidades/RPGLog.txt", io_write);
	    fclose(logstr);
	    logstr = fopen("Utilidades/RPGLog.txt", io_append);
	    fwrite(logstr,"|--------------------------------------------------------------------------------|");
        fwrite(logstr,"\r\n");
		fwrite(logstr,"|-                                  RPGLog.txt                                  -|");
		fwrite(logstr,"\r\n");
		fwrite(logstr,"|-           Essa pasta terá todos os dados do servidor, isto inclue:           -|");
		fwrite(logstr,"\r\n");
		fwrite(logstr,"|-       			    Monitoramentos           			-|");
		fwrite(logstr,"\r\n");
		fwrite(logstr,"|-       			        Bugs                                    -|");
		fwrite(logstr,"\r\n");
		fwrite(logstr,"|-       			       Avisos					-|");
		fwrite(logstr,"\r\n");
		fwrite(logstr,"|-                                      etc...				        -|");
		fwrite(logstr,"\r\n");
		fwrite(logstr,"|- Sempre é bom passar aqui e dar uma lida para ver o que acontece no servidor! -|");
        fwrite(logstr,"\r\n");
        fwrite(logstr,"|--------------------------------------------------------------------------------|");
		fwrite(logstr,"\r\n");
		fclose(logstr);
	} else {
		new File:logstr;
		logstr = fopen("Utilidades/RPGLog.txt", io_append);
        fwrite(logstr, log);
        fwrite(logstr, "\r\n");
        fclose(logstr);
	}
}

public GetClosestHospital(playerid)
{
	if(!IsPlayerConnected(playerid)){
	    return -1;
	}
	new Float:prevdist = 100000.000;
	new prevhosp;
	for(new hospid; hospid < 4; hospid++){
	    new Float:dist;
	    dist = GetPlayerDistanceToPoint(playerid,Hospitais[hospid][0],Hospitais[hospid][1]);
		if((dist < prevdist)){
		    prevdist = dist;
		    prevhosp = hospid;
		}
	}
	return prevhosp;
}

stock AddPlayerHealth(playerid,Float:h)
{
	if(!IsPlayerConnected(playerid)) return 0;
	new Float:x;
	GetPlayerHealth(playerid,x);
	if(x+h < 100) SetPlayerHealth(playerid,x+h);
	if(x+h >= 100) SetPlayerHealth(playerid,100);
	return 0;
}
stock GetDistanceBetweenPlayers(playerid,playerid2)
{
	if(GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(playerid2)) return 100;
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	new Float:tmpdis;
	GetPlayerPos(playerid,x1,y1,z1);
	GetPlayerPos(playerid2,x2,y2,z2);
	tmpdis = floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
	return floatround(tmpdis);
}

stock GetPlayerDistanceToPointEx(playerid,Float:x2,Float:y2,Float:z2)
{
	new Float:x1,Float:y1,Float:z1;
	new Float:tmpdis;
	GetPlayerPos(playerid,x1,y1,z1);
	tmpdis = floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
	return floatround(tmpdis);
}

stock GetDistanceToObject(playerid,objectid)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	new Float:tmpdis;
	GetPlayerPos(playerid,x1,y1,z1);
	GetObjectPos(objectid,x2,y2,z2);
	tmpdis = floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
	return floatround(tmpdis);
}

stock IsHaveProf(prof)
{
	new have = 0;
	for(new i=0; i<SLOTS2; i++){
 		if(Profissao[i] == prof && IsPlayerConnected(i)) have = 1;
	}
	if(have == 1) return true;
	return false;
}
stock GangFile(gangname[]){
    new str[256];
	format(str,sizeof(str),"Gangues/%s.gng",gangname);
	return str;
}
stock JornalFile(titulo[]){
    new str[256];
	format(str,sizeof(str),"Jornais/%s.jornal",titulo);
	return str;
}
stock PropertieFile(propriedade){
    new str[256];
	format(str,sizeof(str),"Propriedades/%s.pro",NomesPropriedades[propriedade]);
	return str;
}
stock VehicleFile(vehicleid){
	new str[256];
	format(str,sizeof(str),"Veiculos/%d.veh",vehicleid);
	return str;
}
stock PickupFile(pickupid){
	new str[256];
	format(str,sizeof(str),"Pickups/%d.pck",pickupid);
	return str;
}
stock PlayerFile(name[]){
	new str[256];
	format(str,sizeof(str),"Jogadores/%s.ini",name);
	return str;
}
public LogarPlayer(playerid){
    Logado[playerid] = 1;
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid,name,sizeof(name));
    if(fexist(PlayerFile(name))){
		if(pStats[playerid][Micose] == 1 || pStats[playerid][Aids] == 1){
			if(AvisadoDasDoencas[playerid] == 0){
				SetTimerEx("EstouMicosado",120000,0,"d",playerid);
				SetTimerEx("AidsPeguei",30000,0,"d",playerid);
				AvisadoDasDoencas[playerid] = 1;
				AddPlayerMoney(playerid, - GetPlayerMoney(playerid) + pStats[playerid][Dinheiro], 8);
			} else {
				AvisadoDasDoencas[playerid] = 1;
				AddPlayerMoney(playerid, - GetPlayerMoney(playerid) + pStats[playerid][Dinheiro], 8);
			}
		}
		Profissao[playerid]       =     pStats[playerid][Prof];
		QtIscas[playerid]         =     pStats[playerid][Iscas];
		QtHeroina[playerid]       =     pStats[playerid][DosesHeroina];
		QtMaconha[playerid]       =     pStats[playerid][DosesMaconha];
		QtCocaina[playerid]       =     pStats[playerid][DosesCocaina];
		Bebida[playerid]          =     pStats[playerid][Alcool];
		QtPescas[playerid]        =     pStats[playerid][Pesca];
		CellCredits[playerid]     =     pStats[playerid][CreditosCell];
		new Float:X,Float:Y,Float:Z;
		X = pStats[playerid][SpawnPosX];
		Y = pStats[playerid][SpawnPosY];
		Z = pStats[playerid][SpawnPosZ];
		if(pStats[playerid][ConvidadoCasa] == 1){
			X = floatstr(GetValue(PlayerFile(pStats[playerid][DonoCasaConvidada]),"SpawnPosX"));
			Y = floatstr(GetValue(PlayerFile(pStats[playerid][DonoCasaConvidada]),"SpawnPosY"));
			Z = floatstr(GetValue(PlayerFile(pStats[playerid][DonoCasaConvidada]),"SpawnPosZ"));
		}
		if(pStats[playerid][LocouCasa] == 1){
			X = floatstr(GetValue(PlayerFile(pStats[playerid][DonoCasaAlugada]),"SpawnPosX"));
			Y = floatstr(GetValue(PlayerFile(pStats[playerid][DonoCasaAlugada]),"SpawnPosY"));
			Z = floatstr(GetValue(PlayerFile(pStats[playerid][DonoCasaAlugada]),"SpawnPosZ"));
		}
		XPTTimer[playerid] = SetTimerEx("XPTText",500,1,"d",playerid);
		SetPlayerArmour(playerid, pStats[playerid][Colete]);
		SetSpawnInfo(playerid, 1, ProfSkin[Profissao[playerid]], X, Y, Z, pStats[playerid][SpawnPosAng], 0, 0, 0, 0, 0, 0);
		SetPlayerWantedLevel(playerid,pStats[playerid][Wanted]);
		TrancarVeiculosConfiscados(playerid);
		if((pStats[playerid][Preso] == 1 || pStats[playerid][Wanted]) && Morrendo[playerid] == 0){
	    	SetPlayerHealth(playerid,100);
	    	SpawnPlayer(playerid);
			pStats[playerid][Wanted] = 0;
			SetPlayerWantedLevel(playerid,0);
			new cela;
			new string[256];
			Presos[playerid] = 1;
			CelularBloqueado[playerid] = 1;
			cela = random(3);
			SetPlayerFacingAngle(playerid,0);
			SetPlayerInterior(playerid,10);
			TempoPrisaoFaltado[playerid] = TempoPrisao[pStats[playerid][MotivoPrisao]];
			PrisaoTimer[playerid][0]=SetTimerEx("AvisoTempoRestante",60000,0,"d",playerid);
			PrisaoTimer[playerid][1]=1;
			SetPlayerPos(playerid,Celas[cela][0],Celas[cela][1],Celas[cela][2]);
			format(string,sizeof(string),"[DELEGACIA] Você cometeu um crime: %s",Motivos[pStats[playerid][MotivoPrisao]]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string,sizeof(string), "[DELEGACIA] Você pagará esse crime ficando preso %d hora(s) no jogo!",TempoPrisao[pStats[playerid][MotivoPrisao]]);
			SendClientMessage(playerid, COLOR_WHITE, string);
  			return 1;
		}
		else{
			SpawnPlayer(playerid);
			return 1;
		}
	}
	return 1;
}
public AvisoTempoRestante(playerid){
	if(Presos[playerid] == 1){
	    TempoPrisaoFaltado[playerid]--;
		if(TempoPrisaoFaltado[playerid] > 1){
		    new string[256];
		    format(string,sizeof(string),"Restam %d minutos para você cumprir sua pena de prisão!",TempoPrisaoFaltado[playerid]);
		    SendClientMessage(playerid, COLOR_COP_SWAT, string);
		    KillTimer(PrisaoTimer[playerid][0]);
		    PrisaoTimer[playerid][0]=SetTimerEx("AvisoTempoRestante",60000,0,"d",playerid);
		    return 1;
		}
		else if(TempoPrisaoFaltado[playerid] == 1){
		    SendClientMessage(playerid, COLOR_COP_SWAT, "Resta apenas 1 minuto para você cumprir sua pena de prisão!");
		    KillTimer(PrisaoTimer[playerid][0]);
		    PrisaoTimer[playerid][0]=SetTimerEx("AvisoTempoRestante",60000,0,"d",playerid);
		    return 1;
		}
		else if(TempoPrisaoFaltado[playerid] == 0){
			KillTimer(PrisaoTimer[playerid][0]);
		    SendClientMessage(playerid, COLOR_PALHA, "Solto...");
			SetPlayerFree(playerid);
			return 1;
		}
	}
	return 1;
}
public ConfiscarArmas(playerid)
{
	if(fexist(PlayerFile(PlayerName(playerid))))
	{
		new weapon,ammo;
		for(new s = 0; s < 12; s++){
	        GetPlayerWeaponData(playerid, s, weapon, ammo);
			ResetPlayerWeapons(playerid);
			if(pStats[playerid][Porte] == 0){
			    pStats[playerid][WeaponSlot0] = 0;
			    pStats[playerid][WeaponSlot0Ammo] = 0;
			    pStats[playerid][WeaponSlot1] = 0;
			    pStats[playerid][WeaponSlot1Ammo] = 0;
			    pStats[playerid][WeaponSlot2] = 0;
			    pStats[playerid][WeaponSlot2Ammo] = 0;
			    pStats[playerid][WeaponSlot3] = 0;
				pStats[playerid][WeaponSlot3Ammo] = 0;
                pStats[playerid][WeaponSlot4] = 0;
                pStats[playerid][WeaponSlot4Ammo] = 0;
                pStats[playerid][WeaponSlot5] = 0;
                pStats[playerid][WeaponSlot5Ammo] = 0;
				pStats[playerid][WeaponSlot6] = 0;
				pStats[playerid][WeaponSlot6Ammo] = 0;
				pStats[playerid][WeaponSlot7] = 0;
				pStats[playerid][WeaponSlot7Ammo] = 0;
				pStats[playerid][WeaponSlot8] = 0;
				pStats[playerid][WeaponSlot8Ammo] = 0;
				pStats[playerid][WeaponSlot9] = 0;
				pStats[playerid][WeaponSlot9Ammo] = 0;
				pStats[playerid][WeaponSlot10] = 0;
				pStats[playerid][WeaponSlot10Ammo] = 0;
				pStats[playerid][WeaponSlot11] = 0;
				pStats[playerid][WeaponSlot11Ammo] = 0;
				pStats[playerid][WeaponSlot12] = 0;
				pStats[playerid][WeaponSlot12Ammo] = 0;
			}
	   		else if(pStats[playerid][Porte] == 1){
	    	   	if(weapon == 4){
	        	   	pStats[playerid][WeaponSlot1] = 0;
			    	pStats[playerid][WeaponSlot1Ammo] = 0;
				}
	       		if(weapon == 25){
		    		pStats[playerid][WeaponSlot3] = 0;
					pStats[playerid][WeaponSlot3Ammo] = 0;
				}
	       		if(weapon == 29){
		    		pStats[playerid][WeaponSlot4] = 0;
                	pStats[playerid][WeaponSlot4Ammo] = 0;
				}
	       		if(weapon == 30 || weapon == 31){
	       			pStats[playerid][WeaponSlot5] = 0;
                	pStats[playerid][WeaponSlot5Ammo] = 0;
				}
				pStats[playerid][WeaponSlot7] = 0;
				pStats[playerid][WeaponSlot7Ammo] = 0;
				pStats[playerid][WeaponSlot8] = 0;
				pStats[playerid][WeaponSlot8Ammo] = 0;
			}
			else if(pStats[playerid][Porte] == 2){
				pStats[playerid][WeaponSlot7] = 0;
				pStats[playerid][WeaponSlot7Ammo] = 0;
				pStats[playerid][WeaponSlot8] = 0;
				pStats[playerid][WeaponSlot8Ammo] = 0;
			}
		}
	}
}
stock SendClientMessagePolicia(text_color, string_text[]){
    for(new i=0;i<SLOTS2;i++)
    {
        if(IsPlayerConnected(i))
        {
            if(Profissao[i] == COP_SWAT || Profissao[i] == EXERCITO || Profissao[i] == COP_RODOVIARIO || Profissao[i] == COP_MILITAR || Profissao[i] == COP_NARCOTICOS || Profissao[i] == DELEGADO)
            {
            	SendClientMessage(i, text_color, string_text);
            }
        }
    }
}
stock SendClientMessageJuiz(text_color, string_text[]){
	for(new i=0;i<SLOTS2;i++)
	{
 		if(IsPlayerConnected(i))
        {
       		if(Profissao[i] == JUIZ || IsPlayerAdmin(i))
			{
				SendClientMessage(i, text_color, string_text);
			}
		}
	}
}
stock SendClientMessageVendedor(text_color, string_text[]){
	for(new i=0;i<SLOTS2;i++)
		{
            if(!IsPlayerConnected(i))
            {
            	if(Profissao[i] == VENDEDOR_DE_ARMAS)
				{
					SendClientMessage(i, text_color, string_text);
				}
			}
		}
}
stock SendClientMessageCarros(text_color, string_text[]){
	for(new i=0;i<SLOTS2;i++)
		{
            if(!IsPlayerConnected(i))
			{
            	if(Profissao[i] == LOCADOR_DE_CARROS)
				{
					SendClientMessage(i, text_color, string_text);
				}
			}
		}
}
stock SendClientMessageTV(text_color, string_text[]){
	for(new i=0;i<SLOTS2;i++)
	{
	    if(IsPlayerConnected(i) && TVligada[i] == 1)
	    {
	        SendClientMessage(i, text_color, string_text);
		}
	}
}
stock SendClientMessageSpectators(playerid, text_color, string_text[]){
	for(new i=0;i<SLOTS2;i++)
	{
 		if(IsPlayerConnected(i))
 		{
           	if(TVligada[i] == 1)
			{
			    if(PlayerSpec[i] == playerid)
				{
					SendClientMessage(i, text_color, string_text);
				}
			}
		}
	}
}
stock SendClientMessageAdmin(text_color, string_text[]){
	for(new i=0;i<SLOTS2;i++)
	{
 		if(IsPlayerConnected(i))
 		{
           	if(IsPlayerAdmin(i))
			{
				SendClientMessage(i, text_color, string_text);
			}
		}
	}
}

stock SendClientMessageGang(gangname[], text_color, string_text[]){
	new gangfile[256];
	set(gangfile,GangFile(gangname));
	if(!fexist(gangfile)) return 0;
	new str[256];
	format(str,sizeof(str),"[GANGUE %s] %s",gangname,string_text);
	writelog(str);
	print(str);
	if(IsStringAName(gStats[GetGangID(gangname)][GangDono])) SendClientMessage(IDName(gStats[GetGangID(gangname)][GangDono]),text_color,string_text);
	for(new g = 0; g < gStats[GetGangID(gangname)][GangMembros]; g++){
		if(IsStringAName(MembersGang[GetGangID(gangname)][g])){
			SendClientMessage(IDName(MembersGang[GetGangID(gangname)][g]),text_color,string_text);
		}
	}
	return 1;
}
stock SetPlayerFree(playerid){
	if(fexist(PlayerFile(PlayerName(playerid)))){
    	pStats[playerid][Preso] = 0;
    	Presos[playerid] = 0;
    	CelularBloqueado[playerid] = 0;
    	SetSpawnInfo(playerid,0,pStats[playerid][Skin],1546.5948,-1675.9949,13.5626,0,0,0,0,0,0,0);
    	SpawnPlayer(playerid);
    	GameTextForPlayer(playerid, "~r~ Libertado!", 5000,0);
    	SendClientMessage(playerid,COLOR_GREEN,"[CENTRAL COP] Você foi solto, mas se cometer mais crimes, pagará novamente.");
    	Contrabando[playerid] = 0;
		Receita[playerid] = 0;
		Motivo[playerid] = 0;
		SetPlayerInterior(playerid,0);
		pStats[playerid][MotivoPrisao] = 0;
		SetPlayerWantedLevel(playerid, 0);
		pStats[playerid][Wanted] = 0;
		pStats[playerid][DetectadoMorte] = 0;
	}
	else{
		printf("Bug encontrado ao soltar %s da prisão",PlayerName(playerid));
		printf("O arquivo do jogador não foi encontrado.");
		new msg[256];
		format(msg,sizeof(msg),"BUG encontrado ao soltar %s da prisão,",PlayerName(playerid));
		writelog(msg);
		writelog("o arquivo do jogador não foi encontrado na pasta 'scriptfiles'");
	}
}
stock DesativarRastreador(playerid){
	DisablePlayerCheckpoint(playerid);
    CheckpointStatus[playerid] = NONE;
    Rastreador2[Rastreador[playerid]] = -1;
    Rastreado[Rastreador[playerid]] = 0;
	Rastreador[playerid] = -1;
	Rastreando[playerid] = 0;
	VeiculoRastreando[playerid] = -1;
}
public FazendoStripTease(playerid)
{
   if(FazendoStrip[playerid] == 1){
      FST[playerid] = 0;
      ApplyAnimation(playerid,"STRIP","STR_Loop_A",4.1,0,1,1,1,1);
	  KillTimer(TimerStrip[playerid]);
	  TimerStrip[playerid] = SetTimerEx("FazendoStripTease",100,false,"d",playerid);
   }
}
stock InGuinchoCC(playerid){
    for(new r = 0; r < 24; r++){
		if(IsPlayerInVehicle(playerid,Reboque[r])) return true;
	}
	return false;
}
stock IsCarCC(vehicleid){
    for(new c = 0; c < 20; c++){
		if(vehicleid == CarrosCC[c]) return true;
	}
	return false;
}
public OnPlayerKeyStateChange(playerid,newkeys,oldkeys){
    if((newkeys==KEY_ACTION)&&(InGuinchoCC(playerid))&&(EstouNoCC[playerid] == 1)&&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER)){
		new Float:playerX,Float:playerY,Float:playerZ;
		GetPlayerPos(playerid,playerX,playerY,playerZ);
		new Float:vX,Float:vY,Float:vZ;
		new Found=0;
		new vid=0;
		while((vid<MAX_VEHICLES)&&(!Found))
		{
   			vid++;
			GetVehiclePos(vid,vX,vY,vZ);
   			if  ((floatabs(playerX-vX)<7.0)&&(floatabs(playerY-vY)<7.0)&&(floatabs(playerZ-vZ)<7.0)&&(CTCCapturado[vid]==0)&&(IsCarCC(vid)))
   		    {
   			    Found=1;
   			    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
		        {
   			        DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
		        }
   			    AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
   			    SendClientMessage(playerid,COLOR_MECANICO,"Carro capturado!");
   			    CheckpointStatus[playerid] = ENTREGA_CC_CAR;
   			    if(EquipeCC[playerid] == 1) SetPlayerCheckpoint(playerid,2399.1150,2753.4324,10.5658,3.0);
   			    else if(EquipeCC[playerid] == 2) SetPlayerCheckpoint(playerid,2368.2146,2754.0471,10.5656,3.0);
				SendClientMessage(playerid, COLOR_WHITE, "Siga o checkpoint em seu radar para entrega-lo...");
				break;
 			}
		}
		if  (!Found){
		   	SendClientMessage(playerid,COLOR_GRAY,"Sem carro para capturar!");
		}
	}
	if((newkeys == KEY_SECONDARY_ATTACK && NoRestaurante[playerid] == 1)){
	    SetPlayerPos(playerid,678.4282,-453.1841,-25.6172);
		SetPlayerFacingAngle(playerid,87.3506);
		SetPlayerInterior(playerid,1);
		NoRestaurante[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
		SetPlayerCheckpoint(playerid,683.9002,-455.4134,-25.6099,1.5);
		CheckpointStatus[playerid] = RESTAURANTE;
		SendClientMessage(playerid, COLOR_GREEN, "Para sair do restaurante pressione a tecla ENTER!");
	}
	if((newkeys == KEY_SECONDARY_ATTACK && NoRestaurante2[playerid] == 1)){
	    SetPlayerPos(playerid,1477.3245,-1880.2889,13.5469);
		SetPlayerInterior(playerid,0);
		DisablePlayerCheckpoint(playerid);
		NoRestaurante2[playerid] = 0;
	}
    if((newkeys == KEY_LEFTP)&&(FazendoStrip[playerid] == 1)&&(FST[playerid] == 0)){
		KillTimer(TimerStrip[playerid]);
		ApplyAnimation(playerid,"STRIP","STR_C1",4.1,0,1,1,1,1);
		FST[playerid] = 1;
		TimerStrip[playerid] = SetTimerEx("FazendoStripTease",5500,false,"d",playerid);
	}
	if((newkeys == KEY_RIGHTP)&&(FazendoStrip[playerid] == 1)&&(FST[playerid] == 0)){
		KillTimer(TimerStrip[playerid]);
		ApplyAnimation(playerid,"STRIP","STR_B2C",4.1,0,1,1,1,1);
		FST[playerid] = 1;
		TimerStrip[playerid] = SetTimerEx("FazendoStripTease",5000,false,"d",playerid);
	}
    if((newkeys == KEY_UPP)&&(FazendoStrip[playerid] == 1)&&(FST[playerid] == 0)){
		KillTimer(TimerStrip[playerid]);
		ApplyAnimation(playerid,"STRIP","STR_C2",4.1,0,1,1,1,1);
		FST[playerid] = 1;
		TimerStrip[playerid] = SetTimerEx("FazendoStripTease",5000,false,"d",playerid);
	}
	if((newkeys == KEY_DOWNP)&&(FazendoStrip[playerid] == 1)&&(FST[playerid] == 0)){
		KillTimer(TimerStrip[playerid]);
		ApplyAnimation(playerid,"STRIP","STR_A2B",4.1,0,1,1,1,1);
		FST[playerid] = 1;
		TimerStrip[playerid] = SetTimerEx("FazendoStripTease",4500,false,"d",playerid);
	}
	if(newkeys == KEY_JUMP) {
		if(HaveDJ && SM[playerid] == DJ) {
		    new txt[256];
			if(MusicSelected == 7) MusicSelected = 0;
			else MusicSelected++;
			format(txt,sizeof(txt),"~n~~n~~n~~n~~n~~n~~n~~n~~y~Musica: ~w~%d",MusicSelected);
			GameTextForPlayer(playerid,txt,5000,3);
		}
	}
	if(newkeys == KEY_SPRINT) {
	    if(HaveDJ && SM[playerid] == DJ) {
	    	new txt[256];
			if(MusicSelected == 0) MusicSelected = 7;
			else MusicSelected--;
			format(txt,sizeof(txt),"~n~~n~~n~~n~~n~~n~~n~~n~~y~Musica: ~w~%d",MusicSelected);
			GameTextForPlayer(playerid,txt,5000,3);
		}
	}
	if(newkeys == KEY_JUMP) {
		if(sombalada[PickupEntradaCasa[playerid]] != 0){
			ProximaRadio(playerid);
		}
	}
	if(newkeys == KEY_SPRINT) {
	    if(sombalada[PickupEntradaCasa[playerid]] != 0){
	    	AnteriorRadio(playerid);
		}
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && TVligada[playerid] == 1)
	{
		if(newkeys == 16384) ProximoCanal(playerid);
		if(newkeys == 8192)  AnteriorCanal(playerid);
	}
	if(Rastreando[playerid] == 1){
	    if(newkeys == 16384){
	        for(new v = VeiculoRastreando[playerid]; v < pStats[Rastreador[playerid]][LastVeh]; v++){
				if(GetVehicles[Rastreador[playerid]][v] != -1 && JaDestruido[GetVehicles[Rastreador[playerid]][v]] == 0 && v != VeiculoRastreando[playerid]){
					VeiculoRastreando[playerid] = v;
					new str[256],strveh[256],Float:X,Float:Y,Float:Z,RastreadorAvisado = 0;
					if(RastreadorAvisado == 0) {
						format(str,sizeof(str),"[RASTREADOR] Veículo alterado para: %d",VeiculoRastreando[playerid]);
						SendClientMessage(playerid, COLOR_WHITE, str);
						format(strveh,sizeof(strveh),"VehicleID_%d",VeiculoRastreando[playerid]);
						GetVehiclePos(GetVehicles[Rastreador[playerid]][v],X,Y,Z);
						DisablePlayerCheckpoint(playerid);
						CheckpointStatus[playerid] = RASTREAMENTO;
						SetPlayerCheckpoint(playerid,X,Y,Z,3.0);
						RastreadorAvisado = 1;
					}
					break;
				}
			}
	    }
		if(newkeys == 8192){
		    for(new v = VeiculoRastreando[playerid]; v > 0; v--){
				if(GetVehicles[Rastreador[playerid]][v] != -1 && JaDestruido[GetVehicles[Rastreador[playerid]][v]] == 0 && v != VeiculoRastreando[playerid]){
					VeiculoRastreando[playerid] = v;
					new str[256],strveh[256],Float:X,Float:Y,Float:Z,RastreadorAvisado = 0;
					if(RastreadorAvisado == 0) {
						format(str,sizeof(str),"[RASTREADOR] Veículo alterado para: %d",VeiculoRastreando[playerid]);
						SendClientMessage(playerid, COLOR_WHITE, str);
						format(strveh,sizeof(strveh),"VehicleID_%d",VeiculoRastreando[playerid]);
						GetVehiclePos(GetVehicles[Rastreador[playerid]][v],X,Y,Z);
						DisablePlayerCheckpoint(playerid);
						CheckpointStatus[playerid] = RASTREAMENTO;
						SetPlayerCheckpoint(playerid,X,Y,Z,3.0);
						RastreadorAvisado = 1;
					}
					break;
				}
			}
		}
	}
	if(CameraAtiva[playerid]==1){
		if(newkeys == 16384){
		    if(Zoom[playerid]+1 > MAX_ZOOM) Zoom[playerid]=1;
			else Zoom[playerid]++;
		}
		if(newkeys == 8192){
			if(Zoom[playerid]-1 < 1) Zoom[playerid]=MAX_ZOOM;
			else Zoom[playerid]--;
		}
	}
	if(newkeys == 16){
	    if(IsPlayerInAnyVehicle(playerid) && GetPlayerInterior(playerid) == 0){
	        TogglePlayerControllable(playerid,1);
	        RemovePlayerFromVehicle(playerid);
	        PChaveMestra[playerid] = 0;
		}
	}
	if((newkeys==KEY_ACTION)&&(IsPlayerInAnyVehicle(playerid))&&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER)){
	    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525){
	        if(Profissao[playerid] == MECANICO){
			new Float:playerX,Float:playerY,Float:playerZ;
			GetPlayerPos(playerid,playerX,playerY,playerZ);
			new Float:vX,Float:vY,Float:vZ;
			new Found=0;
			new vid=0;
			while((vid<MAX_VEHICLES)&&(!Found))
   				{
   				vid++;
   				GetVehiclePos(vid,vX,vY,vZ);
   				if  ((floatabs(playerX-vX)<7.0)&&(floatabs(playerY-vY)<7.0)&&(floatabs(playerZ-vZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
   				    {
   				    Found=1;
   				    if	(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
   				        {
   				        DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
   				        }
   				    AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
   				    SendClientMessage(playerid,COLOR_MECANICO,"Carro rebocado!");
   				    }
       			}
			if  (!Found)
			    {
			    SendClientMessage(playerid,COLOR_GRAY,"Sem carro!");
			    }
		    }
	    }
	}
}

stock CreateHotelFile(){
	if(!fexist("Utilidades/Hoteis.rpg")){
	    new File:hotelfile = fopen("Utilidades/Hoteis.rpg",io_write);
	    fclose(hotelfile);
		writelog("Arquivo de hotéis \"Utilidades/Hoteis.rpg\" criado...");
	}
}
stock SaveHotelFile(){
    if(!fexist("Utilidades/Hoteis.rpg")) CreateHotelFile();
    new strsave[256],str[256];
    format(str,sizeof(str),"%d;",HotelLastP);
    strcat(strsave,str);
    for(new i = 0; i < HotelLastP; i++)
    {
        format(str,sizeof(str),"%s;",PlayersInHotel[i]);
        strcat(strsave,str);
    }
	new File:hotelfile = fopen("Utilidades/Hoteis.rpg",io_write);
	fwrite(hotelfile,strsave);
 	fclose(hotelfile);
}
stock LoadHotelFile(){
	new File:hotelfile = fopen("Utilidades/Hoteis.rpg",io_read),tmp[256],index,key[256];
	fread(hotelfile,tmp,sizeof(tmp));
	HotelLastP = strval(strtok(tmp,index,';'));
	for(new i = 0; i < HotelLastP; i++){
	    PlayersInHotel[i] = strtok(tmp,index,';');
	}
	fclose(hotelfile);
}
stock ApplyPlayerInHotel(playerid){
	new bool:searched=false;
    for(new h = 0; h < HotelLastP; h++){
		if(compare("NONE",PlayersInHotel[h])){
		    set(PlayersInHotel[h],PlayerName(playerid));
		    searched=true;
		    break;
		}
	}
	if(!searched){
		set(PlayersInHotel[HotelLastP],PlayerName(playerid));
		HotelLastP++;
	}
}
stock RemovePlayerForHotel(playerid){
	pStats[playerid][Hotel] = 0;
	for(new h = 0; h < HotelLastP; h++){
		if(compare(PlayerName(playerid),PlayersInHotel[h])){
		    set(PlayersInHotel[h],"NONE");
		}
	}
}
stock PayHotel(){
	for(new i = 0; i < HotelLastP; i++){
	    if(!compare(PlayersInHotel[i],"NONE")){
	    	if(!IsStringAName(PlayersInHotel[i])){
	        	GiveValue(PlayersInHotel[i],"Banco",-200);
	    		GuardarMensagem(PlayersInHotel[i],"Foram retirados $200,00 dólares do seu banco pela despeja do hotel!");
			}
			else{
			    SendClientMessage(IDName(PlayersInHotel[i]), COLOR_WHITE, "Foram retirados $200,00 dólares do seu banco pela despeja do hotel!");
				pStats[IDName(PlayersInHotel[i])][Banco] -= 200;
			}
		}
		AcrescentarLucro(15,200);
	}
}
stock CriarTextDraws(){
    Bemvindo = TextDrawCreate(320,130,"~b~Virtual ~r~L~w~i~r~f~w~e ~y~R~b~P~g~G");
	TextDrawColor(Bemvindo,0xFFF000FF);
	TextDrawAlignment(Bemvindo,2);
	TextDrawFont(Bemvindo,0);
	TextDrawLetterSize(Bemvindo,2.2,4.8);

	Bemvindo2 = TextDrawCreate(320,190,"~w~ mais que um ~y~R~b~P~g~G~w~, UMA VIDA!");
	TextDrawColor(Bemvindo2,COLOR_AZUL2);
	TextDrawAlignment(Bemvindo2,2);
	TextDrawFont(Bemvindo2,1);
	TextDrawLetterSize(Bemvindo2,0.8,1.7);

	Bemvindo3 = TextDrawCreate(320,230,"~w~Comandos principais: ~n~ ~n~ ~h~~y~/ajuda : Para obter ajuda ~n~ ~n~ /comandos : Ver os comandos do RPG ~n~ ~n~ /aprender : Para aprender como jogar no RPG ~n~ ~n~ /sistemas : Ver os sistemas do gamemode ~n~ ~n~ ~w~Por favor registre-se com /registrar [senha]");
	TextDrawColor(Bemvindo3,COLOR_WHITE);
	TextDrawAlignment(Bemvindo3,2);
	TextDrawSetOutline(Bemvindo3,2);
	TextDrawFont(Bemvindo3,1);
	TextDrawLetterSize(Bemvindo3,0.5,1.1);

    Bemvindo4 = TextDrawCreate(320,230,"~w~Comandos principais: ~n~ ~n~ ~h~~y~/ajuda : Para obter ajuda ~n~ ~n~ /comandos : Ver os comandos do RPG ~n~ ~n~ /aprender : Para aprender como jogar no RPG ~n~ ~n~ /sistemas : Ver os sistemas do gamemode ~n~ ~n~ ~w~Por favor logue-se com /logar [senha]");
	TextDrawColor(Bemvindo4,COLOR_WHITE);
	TextDrawAlignment(Bemvindo4,2);
	TextDrawSetOutline(Bemvindo4,2);
	TextDrawFont(Bemvindo4,1);
	TextDrawLetterSize(Bemvindo4,0.5,1.1);
	//Higiene [Fundo]
	FundoHigiene = TextDrawCreate(550.0,30.0," ");
	TextDrawUseBox(FundoHigiene, true);
	TextDrawBoxColor(FundoHigiene, COLOR_BLACK);
	TextDrawSetShadow(FundoHigiene,0);
	TextDrawTextSize(FundoHigiene, 610, 0);
	//Higiene [0]
	BarraHigiene[0] = TextDrawCreate(550.0,30.0," ");
	TextDrawUseBox(BarraHigiene[0], true);
	TextDrawBoxColor(BarraHigiene[0], COLOR_HIGIENE0);
	TextDrawSetShadow(BarraHigiene[0],0);
	TextDrawTextSize(BarraHigiene[0], 550, 0);
	//Higiene [1]
	BarraHigiene[1] = TextDrawCreate(550.0,30.0," ");
	TextDrawUseBox(BarraHigiene[1], true);
	TextDrawBoxColor(BarraHigiene[1], COLOR_HIGIENE0);
	TextDrawSetShadow(BarraHigiene[1],0);
	TextDrawTextSize(BarraHigiene[1], 555, 0);
	//Higiene [2]
	BarraHigiene[2] = TextDrawCreate(550.0,30.0," ");
	TextDrawUseBox(BarraHigiene[2], true);
	TextDrawBoxColor(BarraHigiene[2], COLOR_HIGIENE1);
	TextDrawSetShadow(BarraHigiene[2],0);
	TextDrawTextSize(BarraHigiene[2], 560, 0);
	//Higiene [3]
	BarraHigiene[3] = TextDrawCreate(550.0,30.0," ");
	TextDrawUseBox(BarraHigiene[3], true);
	TextDrawBoxColor(BarraHigiene[3], COLOR_HIGIENE1);
	TextDrawSetShadow(BarraHigiene[3],0);
	TextDrawTextSize(BarraHigiene[3], 565, 0);
	//Higiene [4]
	BarraHigiene[4] = TextDrawCreate(550.0,30.0," ");
	TextDrawUseBox(BarraHigiene[4], true);
	TextDrawBoxColor(BarraHigiene[4], COLOR_HIGIENE2);
	TextDrawSetShadow(BarraHigiene[4],0);
	TextDrawTextSize(BarraHigiene[4], 570, 0);
	//Higiene [5]
	BarraHigiene[5] = TextDrawCreate(550.0,30.0," ");
	TextDrawUseBox(BarraHigiene[5], true);
	TextDrawBoxColor(BarraHigiene[5], COLOR_HIGIENE2);
	TextDrawSetShadow(BarraHigiene[5],0);
	TextDrawTextSize(BarraHigiene[5], 575, 0);
	//Higiene [6]
	BarraHigiene[6] = TextDrawCreate(550.0,30.0," ");
	TextDrawUseBox(BarraHigiene[6], true);
	TextDrawBoxColor(BarraHigiene[6], COLOR_HIGIENE3);
	TextDrawSetShadow(BarraHigiene[6],0);
	TextDrawTextSize(BarraHigiene[6], 580, 0);
	//Higiene [7]
	BarraHigiene[7] = TextDrawCreate(550.0,30.0," ");
	TextDrawUseBox(BarraHigiene[7], true);
	TextDrawBoxColor(BarraHigiene[7], COLOR_HIGIENE3);
	TextDrawSetShadow(BarraHigiene[7],0);
	TextDrawTextSize(BarraHigiene[7], 585, 0);
	//Higiene [8]
	BarraHigiene[8] = TextDrawCreate(550.0,30.0," ");
	TextDrawUseBox(BarraHigiene[8], true);
	TextDrawBoxColor(BarraHigiene[8], COLOR_HIGIENE4);
	TextDrawSetShadow(BarraHigiene[8],0);
	TextDrawTextSize(BarraHigiene[8], 590, 0);
	//Higiene [9]
	BarraHigiene[9] = TextDrawCreate(550.0,30.0," ");
	TextDrawUseBox(BarraHigiene[9], true);
	TextDrawBoxColor(BarraHigiene[9], COLOR_HIGIENE4);
	TextDrawSetShadow(BarraHigiene[9],0);
	TextDrawTextSize(BarraHigiene[9], 595, 0);
	//Higiene [10]
	BarraHigiene[10] = TextDrawCreate(550.0,30," ");
	TextDrawUseBox(BarraHigiene[10], true);
	TextDrawBoxColor(BarraHigiene[10], COLOR_HIGIENE5);
	TextDrawSetShadow(BarraHigiene[10],0);
	TextDrawTextSize(BarraHigiene[10], 600, 0);
	//Higiene [11]
	BarraHigiene[11] = TextDrawCreate(550.0,30," ");
	TextDrawUseBox(BarraHigiene[11], true);
	TextDrawBoxColor(BarraHigiene[11], COLOR_HIGIENE5);
	TextDrawSetShadow(BarraHigiene[11],0);
	TextDrawTextSize(BarraHigiene[11], 605, 0);
	//Higiene [12]
	BarraHigiene[12] = TextDrawCreate(550.0,30.0," ");
	TextDrawUseBox(BarraHigiene[12], true);
	TextDrawBoxColor(BarraHigiene[12], COLOR_HIGIENE6);
	TextDrawSetShadow(BarraHigiene[12],0);
	TextDrawTextSize(BarraHigiene[12], 610, 0);
	//banco-td
	tdBanco = TextDrawCreate(5,300,"Banco");
	TextDrawColor(tdBanco,COLOR_GREEN);
	TextDrawAlignment(tdBanco,0);
	TextDrawFont(tdBanco,0);
	TextDrawLetterSize(tdBanco,2,2);
	//posto-td
	Posto = TextDrawCreate(5,300,"~b~Posto");
	TextDrawColor(Posto,COLOR_WHITE);
	TextDrawAlignment(Posto,0);
	TextDrawFont(Posto,0);
	TextDrawLetterSize(Posto,2,2);
	//hotel-td
	tdHotel = TextDrawCreate(320,180,"~b~Hotel");
	TextDrawColor(tdHotel,COLOR_WHITE);
	TextDrawAlignment(tdHotel,2);
	TextDrawFont(tdHotel,0);
	TextDrawLetterSize(tdHotel,3,3);
	//hospital-td
	Hospital = TextDrawCreate(5,300,"Hospital");
	TextDrawColor(Hospital,COLOR_WHITE);
	TextDrawAlignment(Hospital,0);
	TextDrawFont(Hospital,0);
	TextDrawLetterSize(Hospital,2,2);
	//24/7-td
	td247 = TextDrawCreate(5,300,"Loja de Utilidades ~n~$1,99");
	TextDrawColor(td247,COLOR_PALHA);
	TextDrawFont(td247,3);
	TextDrawLetterSize(td247,1,1);
	//Pizzaria
	tdPizzaria = TextDrawCreate(5,300,"Pizzaria");
	TextDrawColor(tdPizzaria,COLOR_PALHA);
	TextDrawAlignment(tdPizzaria,0);
	TextDrawFont(tdPizzaria,0);
	TextDrawLetterSize(tdPizzaria,2,2);
	//lixao-td
	tdLixao = TextDrawCreate(5,300,"Lixo ou~n~Ferro-Velho");
	TextDrawColor(tdLixao,COLOR_TRAFICANTE);
	TextDrawFont(tdLixao,0);
	TextDrawLetterSize(tdLixao,2,2);
	//desmanche
	tdDesmanche = TextDrawCreate(5,300,"Beco do desmanche");
	TextDrawColor(tdDesmanche,COLOR_RED);
	TextDrawAlignment(tdDesmanche,0);
	TextDrawFont(tdDesmanche,0);
	TextDrawLetterSize(tdDesmanche,2,2);
	//pesca-td
	tdPesca = TextDrawCreate(5,300,"rea de Pesca");
	TextDrawColor(tdPesca,COLOR_GREEN);
	TextDrawAlignment(tdPesca,0);
	TextDrawFont(tdPesca,0);
	TextDrawLetterSize(tdPesca,2,2);
	//cooppesca-td
	tdCoopPesca = TextDrawCreate(5,300,"Cooperativa de Pesca");
	TextDrawColor(tdCoopPesca,COLOR_GREEN);
	TextDrawAlignment(tdCoopPesca,0);
	TextDrawFont(tdCoopPesca,0);
	TextDrawLetterSize(tdCoopPesca,2,2);
	//areacarga-td
	tdAreaCarga = TextDrawCreate(5,300,"rea de Carga");
	TextDrawColor(tdAreaCarga,COLOR_GREEN);
	TextDrawAlignment(tdAreaCarga,0);
	TextDrawFont(tdAreaCarga,0);
	TextDrawLetterSize(tdAreaCarga,2,2);
	//plant
	tdPlant = TextDrawCreate(5,300,"rea de Plantio");
	TextDrawColor(tdPlant,COLOR_GREEN);
	TextDrawAlignment(tdPlant,0);
	TextDrawFont(tdPlant,0);
	TextDrawLetterSize(tdPlant,2,2);
	//leite
	tdLeite = TextDrawCreate(5,300,"Curral das Vaca");
	TextDrawColor(tdLeite,COLOR_RED);
	TextDrawAlignment(tdLeite,0);
	TextDrawFont(tdLeite,0);
	TextDrawLetterSize(tdLeite,2,2);
	//venda-milho
	tdColheita = TextDrawCreate(5,300,"Venda do milho/Leite");
	TextDrawColor(tdColheita,COLOR_GREEN);
	TextDrawAlignment(tdColheita,0);
	TextDrawFont(tdColheita,0);
	TextDrawLetterSize(tdColheita,2,2);
	//forte-td
	tdForte = TextDrawCreate(5,300,"rea Forte");
	TextDrawColor(tdForte,COLOR_RED);
	TextDrawAlignment(tdForte,0);
	TextDrawFont(tdForte,0);
	TextDrawLetterSize(tdForte,2,2);
	//pedreira-td
	tdPdCarga = TextDrawCreate(5,300,"Pedreira");
	TextDrawColor(tdPdCarga,COLOR_GREEN);
	TextDrawAlignment(tdPdCarga,0);
	TextDrawFont(tdPdCarga,0);
	TextDrawLetterSize(tdPdCarga,2,2);
	//construção
	tdConstrucao = TextDrawCreate(5,300,"Construo");
	TextDrawColor(tdConstrucao,COLOR_GREEN);
	TextDrawAlignment(tdConstrucao,0);
	TextDrawFont(tdConstrucao,0);
	TextDrawLetterSize(tdConstrucao,2,2);
	//Boate
	tdStrip = TextDrawCreate(5,300,"Boate de Strip");
	TextDrawColor(tdStrip,COLOR_ROSA);
	TextDrawAlignment(tdStrip,0);
	TextDrawFont(tdStrip,0);
	TextDrawLetterSize(tdStrip,2,2);
	//Sorveteria
	tdSorveteria = TextDrawCreate(5,300,"Sorveteria");
	TextDrawColor(tdSorveteria,COLOR_ROSACLARO);
	TextDrawAlignment(tdSorveteria,0);
	TextDrawFont(tdSorveteria,0);
	TextDrawLetterSize(tdSorveteria,2,2);
	//Loja de customização
	tdCustomizacao = TextDrawCreate(5,300,"Loja de ~n~Customizao");
	TextDrawColor(tdCustomizacao,COLOR_VERDECLARO);
	TextDrawAlignment(tdCustomizacao,0);
	TextDrawFont(tdCustomizacao,0);
	TextDrawLetterSize(tdCustomizacao,2,2);
	//Loteria
	tdLoteria = TextDrawCreate(5,300,"Loteria");
	TextDrawColor(tdLoteria,COLOR_CORRETOR_SEGUROS);
	TextDrawAlignment(tdLoteria,0);
	TextDrawFont(tdLoteria,0);
	TextDrawLetterSize(tdLoteria,2,2);
	//Loteria de cavalos
	tdLCavalos = TextDrawCreate(5,300,"Loteria de ~n~cavalos");
	TextDrawColor(tdLCavalos,COLOR_BARMAN);
	TextDrawAlignment(tdLCavalos,0);
	TextDrawFont(tdLCavalos,0);
	TextDrawLetterSize(tdLCavalos,2,2);
	//Locadora
	tdLocadora = TextDrawCreate(5,300,"Locadora");
	TextDrawColor(tdLocadora,COLOR_LIDER_DE_TRAFICO);
	TextDrawAlignment(tdLocadora,0);
	TextDrawFont(tdLocadora,0);
	TextDrawLetterSize(tdLocadora,2,2);
	//Bar
	tdBar = TextDrawCreate(5,280,"Bar");
	TextDrawColor(tdBar,COLOR_BARMAN);
	TextDrawAlignment(tdBar,0);
	TextDrawFont(tdBar,0);
	TextDrawLetterSize(tdBar,2,2);
	//Delegacia
	tdDelegacia = TextDrawCreate(5,280,"Delegacia");
	TextDrawColor(tdDelegacia,COLOR_COP_SWAT);
	TextDrawAlignment(tdDelegacia,0);
	TextDrawFont(tdDelegacia,0);
	TextDrawLetterSize(tdDelegacia,2,2);
	//Balada
	tdBalada = TextDrawCreate(5,300,"Balada");
	TextDrawColor(tdBalada,COLOR_ORANGE);
	TextDrawAlignment(tdBalada,0);
	TextDrawFont(tdBalada,0);
	TextDrawLetterSize(tdBalada,2,2);
	//Banheiro
	tdBanheiro = TextDrawCreate(5,300,"Banheiro");
	TextDrawColor(tdBanheiro, COLOR_DESEMPREGADO);
	TextDrawAlignment(tdBanheiro,0);
	TextDrawFont(tdBanheiro,0);
	TextDrawLetterSize(tdBanheiro,2,2);
	//COEVL
	tdCOEVL = TextDrawCreate(5,300,"COEVL");
	TextDrawColor(tdCOEVL, COLOR_LIGHT_YELLOW);
	TextDrawAlignment(tdCOEVL,0);
	TextDrawFont(tdCOEVL,0);
	TextDrawLetterSize(tdCOEVL,2,2);
	//ECTVL
	tdECTVL = TextDrawCreate(5,300,"ECTVL");
	TextDrawColor(tdECTVL, COLOR_RED2);
	TextDrawAlignment(tdECTVL,0);
	TextDrawFont(tdECTVL,0);
	TextDrawLetterSize(tdECTVL,2,2);
	//Chaveiro
	tdChaveiro = TextDrawCreate(5,300,"Chaveiro");
	TextDrawColor(tdChaveiro,COLOR_CONTRABANDISTA);
	TextDrawAlignment(tdChaveiro,0);
	TextDrawFont(tdChaveiro,0);
	TextDrawLetterSize(tdChaveiro,2,2);
	//Morro
	tdMorro = TextDrawCreate(5,300,"Morro");
	TextDrawColor(tdMorro, COLOR_DESEMPREGADO);
	TextDrawAlignment(tdMorro,0);
	TextDrawFont(tdMorro,0);
	TextDrawLetterSize(tdMorro,2,2);
	//Esconderijo
	tdEsconderijo = TextDrawCreate(5,300,"Esconderijo");
	TextDrawColor(tdEsconderijo, COLOR_ASSALTANTE);
	TextDrawAlignment(tdEsconderijo,0);
	TextDrawFont(tdEsconderijo,0);
	TextDrawLetterSize(tdEsconderijo,2,2);
	//Aeroporto
	tdAero = TextDrawCreate(5,300,"Aeroporto");
	TextDrawColor(tdAero, COLOR_RED2);
	TextDrawAlignment(tdAero,0);
	TextDrawFont(tdAero,0);
	TextDrawLetterSize(tdAero,2,2);
	//Área de entretenimentos
	tdEntretenimentos = TextDrawCreate(5,300,"rea de~n~entretenimentos");
	TextDrawColor(tdEntretenimentos, COLOR_WHITE);
	TextDrawAlignment(tdEntretenimentos,0);
	TextDrawFont(tdEntretenimentos,0);
	TextDrawLetterSize(tdEntretenimentos,2,2);
	//Virtual Life
	TextVL = TextDrawCreate(10.0, 430.5,"~b~Virtual ~r~L~w~i~r~f~w~e ~y~R~b~P~g~G");
    TextDrawFont(TextVL,0);
    TextDrawLetterSize(TextVL,0.600000,1.299999);
    TextDrawColor(TextVL, COLOR_WHITE);
    TextDrawBackgroundColor(TextVL, 126);
	writelog("Criando Text Draws de jogo... Concluído!");
}
public OnGameModeInit()
{
	AgendaTestes = 1;
	EnableTirePopping(1);
	EnableZoneNames(1);
	ShowPlayerMarkers(0);
	EnableStuntBonusForAll(0);
	DisableInteriorEnterExits();
	new Segundo,Minuto,Hora,Dia,Mes,Ano, msg[256];
	gettime(Hora,Minuto,Segundo);
	getdate(Ano,Mes,Dia);
	format(msg,sizeof(msg),"Gamemode iniciado em %s/%s/%s às %s:%s:%s.",ApplyZero(Dia),ApplyZero(Mes),ApplyZero(Ano),ApplyZero(Hora),ApplyZero(Minuto),ApplyZero(Segundo));
	writelog(msg);
	writelog("Carregando Reload Virtual Life RPG...");
	SetGameModeText("Virtual Life RPG");
	CriarTextDraws();

//|------------------------------------[ GANGZONE ]--------------------------------------------------
    PescaArea = GangZoneCreate(396.2206,-2490.5803,813.0812,-2063.8291);
    InstrutorArea = GangZoneCreate(1730.8315,-2076.4917,1811.4198,-2021.2544);
    ProstitutaArea = GangZoneCreate(2391.9038,-1245.3613,2440.9629,-1209.1268);
    TaxiArea = GangZoneCreate(1612.3163,-1139.9810,1687.0649,-1040.5436);
    DesmancheArea = GangZoneCreate(2521.7185,-1720.9760,2535.7808,-1699.4797);
    SorveteriaArea = GangZoneCreate(1560.3988,-1897.6273,1576.5190,-1882.6194);
    PoliciaLadraoArea = GangZoneCreate(-988.9893,-2491.4412,-266.9886,-1845.056);
	EquipeAzul = GangZoneCreate(2143.5068,620.0174,2279.5994,758.1225);
	EquipeLaranja = GangZoneCreate(2293.1055,621.5815,2424.1060,772.3373);
//|------------------------------------[ VEÍCULOS ]--------------------------------------------------
	AddStaticVehicle(400,-362.1651,1182.2360,19.9293,224.5314,23,23);//1
	AddStaticVehicle(400,-358.5877,1185.9308,19.9359,227.4491,23,23);//2
	AddStaticVehicle(406,831.4123,838.7061,11.8114,10.7364,27,27);//3
	AddStaticVehicle(406,825.0017,835.9022,11.3056,28.6806,27,27);//4
    AddStaticVehicle(428,2587.1069,1968.5189,10.3600,359.4350,2,125);//5
	AddStaticVehicle(428,2578.8755,1979.8069,10.3595,269.6775,2,125);//6
	AddStaticVehicle(428,2578.1614,1991.9865,10.3634,268.5700,2,125);//7
    AddStaticVehicle(416,1601.9666,1830.5586,10.9692,179.6767,6,3);//8
	AddStaticVehicle(416,1609.5704,1849.0504,10.9694,180.1948,6,3);//9
	AddStaticVehicle(481,1733.3511,-1750.2358,13.1041,359.0227,3,3);//10
	AddStaticVehicle(481,1735.0503,-1749.8060,13.1061,2.9314,2,2);//11
	AddStaticVehicle(481,1730.6892,-1749.8074,13.1054,0.2107,0,0);//12
	AddStaticVehicle(519,1564.3187,-2455.8386,13.1393,176.7860,0,0);//13
	AddStaticVehicle(487,1921.1626,-2292.6611,13.1141,273.2114,1,3);//14
	AddStaticVehicle(593,1821.0220,-2622.9812,13.1316,4.2006,3,1);//15
	AddStaticVehicle(496,2399.8655,-2009.8938,13.1832,269.2247,36,1);//16
	AddStaticVehicle(521,2530.2676,-2011.0364,13.1821,91.6209,36,1);//17
	AddStaticVehicle(531,-1067.3071,-1146.1510,129.2188,263.1791,0,0);//18
	AddStaticVehicle(531,-1042.8000,-1113.4921,129.2188,172.3349,0,0);//19
	AddStaticVehicle(492,-1062.0110,-1220.5941,129.2188,272.7150,5,5);//20
	AddStaticVehicleEx(523,-1574.3988,722.4133,-5.5151,88.7114,0,0,-1);//21
	AddStaticVehicleEx(599,-1582.4146,672.9401,6.9159,1.3782,0,0,-1);//22
	AddStaticVehicle(416,-2589.3899,637.8578,14.8142,93.1434,1,3);//23
	AddStaticVehicle(416,-2570.5264,632.3824,14.8083,91.5122,1,3);//24
	AddStaticVehicle(416,-2413.7605,535.7818,30.2737,79.1394,2,125);//25
	AddStaticVehicle(406,-2115.5364,188.9033,34.9001,267.4751,27,27);//26
	AddStaticVehicle(609,2765.1882,-2382.2258,13.6997,358.9371,79,0);//27
	AddStaticVehicle(530,2772.3267,-2424.4426,13.4038,93.5541,16,16); //28
	AddStaticVehicle(530,2772.3887,-2428.4539,13.4003,92.1269,0,0);//29
	AddStaticVehicle(426,2746.7949,-2447.6257,13.2329,270.3224,4,4);//30
	AddStaticVehicle(408,2159.3633,-1971.4208,14.0973,269.7029,1,4);//31
	AddStaticVehicle(408,2146.1206,-1971.5450,14.0976,270.3433,1,4);//32
	AddStaticVehicle(436,2465.3845,-2558.5488,13.4172,269.7191,0,0);//33
	AddStaticVehicle(461,2505.0012,-2636.7678,13.2188,267.7787,3,3);//34
	AddStaticVehicle(461,2170.3921,-2659.5852,13.1315,0.7963,0,0);//35
	AddStaticVehicle(461,1914.8511,-2247.8777,13.7238,184.6557,1,3);//36
	AddStaticVehicle(519,1692.2711,-2451.8022,14.4767,182.7362,0,0);//37
	AddStaticVehicleEx(427,1530.4825,-1644.2167,6.0226,0.2721,0,1,-1);//38
	AddStaticVehicleEx(427,1534.8368,-1644.4755,6.0226,0.2481,0,1,-1);//39
	AddStaticVehicleEx(490,1544.8265,-1654.9677,6.0182,270.0331,0,0,-1);//40
	AddStaticVehicleEx(490,1544.9852,-1651.0159,6.0209,269.8402,0,0,-1);//41
	AddStaticVehicle(601,1528.9193,-1677.4371,5.6495,94.8572,0,0);//42
	AddStaticVehicleEx(523,1586.2186,-1667.6611,5.4763,268.5813,0,0,-1);//43
	AddStaticVehicleEx(523,1585.5693,-1671.7798,5.4624,268.4720,0,0,-1);//44
	AddStaticVehicleEx(596,1600.2476,-1692.1685,5.6125,90.4433,0,1,-1);//45
	AddStaticVehicleEx(596,1600.6448,-1684.0197,5.6112,90.1220,0,1,-1);//46
	AddStaticVehicleEx(596,1587.7020,-1709.8081,5.6095,179.3531,0,1,-1);//47
	AddStaticVehicleEx(599,1570.3877,-1709.3484,6.0758,180.6934,1,0,-1);//48
	AddStaticVehicleEx(599,1574.4928,-1710.0585,6.0792,179.2536,1,0,-1);//49
	AddStaticVehicleEx(497,1557.2480,-1609.4486,13.5194,267.8856,1,0,-1);//50
	AddStaticVehicle(445,1455.9663,-1752.0988,13.4219,0.2017,0,0);//51
	AddStaticVehicle(480,1404.7682,-1780.0381,13.3192,268.7308,1,1);//52
	AddStaticVehicle(431,1804.2316,-1906.8671,13.5048,180.1803,106,106);//53
	AddStaticVehicle(431,1804.2971,-1927.5952,13.4861,180.1802,106,106);//54
	AddStaticVehicle(517,1778.2910,-1886.2679,13.2429,272.0609,6,6);//55
	AddStaticVehicle(517,1559.9014,-2251.0684,13.4022,270.1830,16,16);//56
	AddStaticVehicle(439,1536.1716,-2212.1941,13.4503,359.5571,77,77);//57
	AddStaticVehicle(458,1552.4875,-2211.9360,13.4496,179.4589,53,53);//58
	AddStaticVehicle(462,1552.8226,-2360.9094,13.4503,180.4037,3,3);//59
	AddStaticVehicle(474,1512.3892,-2361.5264,13.4465,2.7157,2,2);//60
	AddStaticVehicle(475,1559.8593,-2325.2949,13.4433,89.9776,3,3);//61
	AddStaticVehicle(467,1911.0831,-1775.8362,13.2784,359.2661,1,1);//62
	AddStaticVehicle(439,2052.5374,-1904.9375,13.4425,1.5015,3,3);//63
	AddStaticVehicle(500,1988.9980,-2058.5310,13.2663,89.8185,10,10);//64
	AddStaticVehicle(558,1736.0695,-1323.5487,13.2373,358.3241,13,13);//65
	AddStaticVehicle(562,1771.7740,-1303.7465,13.3406,179.9932,3,3);//66
	AddStaticVehicle(445,763.6828,-1378.5768,13.1999,0.3843,1,1);//67
	AddStaticVehicleEx(453,787.9286,-1901.9200,-0.2205,181.7859,0,0,-1);//68
	AddStaticVehicleEx(453,776.9243,-1897.2621,-0.3764,173.2890,0,0,-1);//69
	AddStaticVehicleEx(453,728.8290,-1494.8489,-0.4036,181.4149,0,0,-1);//70
	AddStaticVehicleEx(453,718.1939,-1495.2104,-0.2883,179.7184,0,0,-1);//71
	AddStaticVehicle(480,2425.6162,-1224.2859,25.0405,176.1279,126,126);//72
	AddStaticVehicle(439,2415.3428,-1224.9528,24.5806,359.1565,103,103);//73
	AddStaticVehicle(444,2808.9202,-1831.9814,9.6919,269.0453,0,0);//74
	AddStaticVehicle(461,2438.2285,-1279.7000,23.7659,264.7029,0,0);//75
	AddStaticVehicle(405,1262.6462,-1796.8795,13.2915,179.2647,0,0);//76
	AddStaticVehicle(405,1269.2242,-1796.1495,13.2810,180.8411,0,0);//77
	AddStaticVehicle(602,932.4058,-1715.0298,13.4203,271.8796,3,3);//78
	AddStaticVehicle(416,1180.0553,-1308.9070,13.8667,270.2787,3,1);//79
	AddStaticVehicle(416,1179.3953,-1338.5397,13.9476,271.7199,3,1);//80
	AddStaticVehicle(416,2036.1782,-1425.3702,17.1395,1.1178,3,1);//81
	AddStaticVehicle(492,2503.1892,-1747.8586,13.1863,178.0792,16,16);//82
	AddStaticVehicle(525,2066.2373,-1880.1583,13.1308,2.9639,1,1);//83
	AddStaticVehicle(525,2059.7856,-1880.6703,13.1225,177.3285,1,1);//84
	AddStaticVehicle(481,1922.7769,-1412.3431,13.7190,2.7285,1,1);//85
	AddStaticVehicle(481,1915.8792,-1412.2249,13.7195,3.4159,6,6);//86
	AddStaticVehicle(435,-510.2876,2552.6294,53.9990,360.0,1,1);//87
	AddStaticVehicle(435,-514.6652,2552.3184,53.9967,360.0,1,1);//88
	AddStaticVehicle(584,-539.6450,2552.9534,54.0036,360.0,1,1);//89
	AddStaticVehicle(584,-534.3781,2552.7854,54.0010,360.0,1,1);//90
	AddStaticVehicle(515,-538.8222,2633.9297,54.4309,178.9377,3,3);//91
	AddStaticVehicle(515,-526.8589,2633.6460,54.4351,179.1391,1,1);//92
	AddStaticVehicle(515,-520.0616,2633.5579,54.4314,180.5195,7,7);//93
	AddStaticVehicle(515,-507.3741,2633.9558,54.4342,177.3320,16,16);//94
    AddStaticVehicle(461,-2179.486083,605.130798,34.895198,88.596977,0,0);//95
    AddStaticVehicle(461,-2179.404296,608.762268,34.891155,90.874336,0,0);//96
    AddStaticVehicle(461,-2183.5845,614.7171,34.7222,329.4128,1,1);//97
	AddStaticVehicle(461,-2191.1814,604.7941,34.7449,151.7564,1,1);//98
	AddStaticVehicle(461,-2188.1414,604.2820,34.7399,163.6357,1,1);//99
	AddStaticVehicle(461,-2211.5535,619.2351,34.7383,342.1588,0,0);//100
	AddStaticVehicle(461,-2214.3005,619.0332,34.7437,342.0723,0,0);//101
	AddStaticVehicle(461,-2215.7854,603.3849,34.7501,278.8244,0,0);//102
	AddStaticVehicle(461,-2205.3501,602.9380,34.7449,259.1532,0,0);//103
    AddStaticVehicle(414,-552.4551,2619.4041,53.6094,270.1524,1,1);//104
	AddStaticVehicle(414,-552.6380,2615.2505,53.6094,270.9333,1,1);//105
	AddStaticVehicle(468,-2444.2495,2224.3125,4.4159,183.3584,6,6);//106
	AddStaticVehicle(555,-2450.6069,2305.1060,4.5477,271.6614,16,16);//107
	AddStaticVehicle(481,-2440.3440,2301.6963,4.5404,265.9458,1,1);//108
	AddStaticVehicle(552,-2553.9397,1415.3110,-0.6195,11.6278,0,3);//109
	AddStaticVehicle(552,-2537.6506,1415.0796,-0.5574,346.1778,0,6);//110
	AddStaticVehicle(439,-2636.4941,1334.9673,6.7600,97.0348,0,0);//111
	AddStaticVehicle(533,-1717.9885,1350.6946,6.7420,229.3763,2,2);//112
	AddStaticVehicle(414,-1849.8406,122.1667,14.6879,93.5895,1,1);//113
	AddStaticVehicle(481,-1676.1387,438.6737,6.7309,135.5489,3,3);//114
	AddStaticVehicle(581,-2035.6842,-2330.5239,30.1994,309.1145,0,0);//115
	AddStaticVehicle(521,-2036.8646,-2329.2380,30.1956,320.3472,2,2);//116
	AddStaticVehicle(515,-2041.8279,-2393.9004,30.1904,219.4306,3,3);//117
	AddStaticVehicle(475,-2046.9973,145.1143,28.5630,0.7972,1,1);//118
	AddStaticVehicle(581,-2029.6890,-2334.8398,30.2208,133.2190,3,3);//119
	AddStaticVehicle(581,-2026.2222,-2339.1248,30.2115,133.0651,6,6);//120
	AddStaticVehicle(581,-2023.7893,-2341.7976,30.2176,135.3792,5,5);//121
	AddStaticVehicle(581,-2019.2566,-2345.8330,30.2200,312.0899,3,3);//122
	AddStaticVehicle(581,-2015.2013,-2349.4011,30.2185,146.6107,0,0);//123
	AddStaticVehicle(475,-2053.1897,146.1172,28.6373,1.9392,3,3);//124
	AddStaticVehicle(475,-2029.6227,156.8629,28.6416,1.8515,6,6);//125
	AddStaticVehicle(475,-2034.6327,178.3249,28.6452,268.0952,12,12);//126
	AddStaticVehicle(521,-2037.5001,140.8673,28.4235,273.6909,10,10);//127
	AddStaticVehicle(481,-1743.3865,-2489.2075,11.8375,73.1635,3,3);//128
	AddStaticVehicle(481,-1738.1725,-2492.5203,11.3138,51.3785,2,2);//129
	AddStaticVehicle(481,-1740.3934,-2483.0354,13.8901,42.1364,1,1);//130
	CarroAuto = AddStaticVehicle(410,1778.4686,-2076.3037,13.2469,90.6574,3,3); // CarroBaliza1 - 131
	CarroAuto2 = AddStaticVehicle(410,1766.9196,-2076.3057,13.2610,90.4201,3,3); // CarroBaliza2 -132
	CarroAuto3 = AddStaticVehicle(410,1769.3566,-2022.6123,13.7949,271.5938,3,3); // CarroZigzag - 133
	CarroAuto4 = AddStaticVehicle(410,1784.2090,-2041.7047,13.1850,270.2375,3,3); // Carro180 - 134
	CarroAuto5 = AddStaticVehicle(521,1773.0260,-2061.4858,13.1724,0.2121,3,3); // MotoZig - 135
	CarroAuto6 = AddStaticVehicle(521,1765.9749,-2041.0818,13.1276,270.1337,3,3);//136
	MotoPizza = AddStaticVehicle(448,2096.5664,-1796.2372,12.9851,90.3936,1,1);//137
	MotoPizza2 = AddStaticVehicle(448,2096.5557,-1799.8225,12.9788,89.8821,1,1);//138
	MotoPizza3 = AddStaticVehicle(448,2096.6338,-1793.0216,12.9879,90.7173,1,1);//139
	MotoPizza4 = AddStaticVehicle(448,2096.7373,-1817.1201,12.9822,89.8361,1,1);//140
	CarroJornal = AddStaticVehicle(582,741.8798,-1337.0168,13.1006,272.7129,28,1);//141
	CarroJornal2 = AddStaticVehicle(582,760.6467,-1338.8859,13.1004,178.7378,28,1);//142
	CarroJornal3 = AddStaticVehicle(488,779.1324,-1355.3369,13.7157,88.6369,28,1);//143
	limosine1 = AddStaticVehicle(409,1229.5652,-1835.9869,13.1877,90.0444,0,0);//144
	limosine2 = AddStaticVehicle(409,1252.0458,-1835.9653,13.1880,90.0540,0,0);//145
	MotoTaxi = AddStaticVehicle(586,1620.1650,-1085.0001,23.4775,269.8010,6,6);//146
	MotoTaxi2 = AddStaticVehicle(586,1620.8981,-1089.1842,23.4721,272.8326,6,6);//147
	MotoTaxi3 = AddStaticVehicle(586,1620.6460,-1093.6416,23.4647,271.0250,6,6);//148
	AeroTaxi = AddStaticVehicle(487,1714.5737,-1052.4772,24.0793,90.4235,6,6);//149
	Taxi1 = AddStaticVehicle(420,1675.5963,-1120.2175,23.6846,268.4628,6,1);//150
	Taxi2 = AddStaticVehicle(420,1617.1656,-1127.9691,23.6839,91.0981,6,1);//151
	Taxi3 = AddStaticVehicle(420,1645.3558,-1047.4185,23.6766,179.2427,6,1);//152
    alugado1 = AddStaticVehicle(411,200.1081,-1440.4156,12.8115,318.7880,6,6);//153 - Infernus
	alugado2 = AddStaticVehicle(451,204.5762,-1444.3474,12.8010,139.4082,16,16);//154 - Turismo
	alugado3 = AddStaticVehicle(560,218.3302,-1429.6761,12.9740,132.8096,3,3);//155 - Sultan
	alugado4 = AddStaticVehicle(475,221.7918,-1432.9316,13.0922,314.6425,1,1);//156 - Sabre
	alugado5 = AddStaticVehicle(603,195.6884,-1436.2327,12.9144,140.2273,0,0);//157 - Phoenix
	alugado6 = AddStaticVehicle(415,215.5169,-1428.1981,13.0317,314.4549,108,108);//158 - Cheetah
	alugado7 = AddStaticVehicle(521,198.1436,-1438.5488,12.6583,289.7877,6,6);//159 - FCR-900
	alugado8 = AddStaticVehicle(522,202.5581,-1442.4858,12.6605,108.6459,0,16);//160 - NRG-500
    LimoHistoria1 = AddStaticVehicle(409,1907.5162,2085.2627,10.6202,1.6192,0,0);//161
	LimoHistoria2 = AddStaticVehicle(409,1700.1578,1481.0664,10.5723,170.1613,0,0);//162
	CarroContrabando1 = AddStaticVehicle(492,2173.5430,-2265.4812,13.1428,41.9938,16,16);//163
	CarroContrabando2 = AddStaticVehicle(445,2165.9097,-2273.1045,13.2358,39.6703,0,0);//164
	CarroContrabando3 = AddStaticVehicle(415,2206.7341,-2289.6543,14.5348,25.1289,0,0);//165
	CarroContrabando4 = AddStaticVehicle(560,2165.2048,-2307.9785,13.2520,156.6602,0,0);//166
	CarroContrabando5 = AddStaticVehicle(411,2192.1260,-2247.6174,13.3889,44.0117,0,0);//167
	BikeEvent1 = AddStaticVehicle(522,-1482.1729,1653.9805,1052.5313,174.9476,0,0);//168
	BikeEvent2 = AddStaticVehicle(522,-1487.0488,1651.6216,1052.5313,203.0029,2,2);//169
	BikeEvent3 = AddStaticVehicle(522,-1490.9745,1651.3367,1052.5313,188.5894,3,3);//170
	BikeEvent4 = AddStaticVehicle(522,-1494.0836,1651.5405,1052.5313,185.1427,10,10);//171
	BikeEvent5 = AddStaticVehicle(522,-1496.2614,1651.1521,1052.5313,185.1427,1,1);//172
	BikeEvent6 = AddStaticVehicle(522,-1495.4508,1653.9109,1052.5313,185.1427,12,12);//173
	BikeEvent7 = AddStaticVehicle(522,-1490.8447,1653.5055,1052.5313,185.1427,25,25);//174
	BikeEvent8 = AddStaticVehicle(522,-1488.1433,1653.2740,1052.5313,185.1427,9,9);//175
	Derby1 = AddStaticVehicle(504,-1362.8434,1056.5216,1038.2021,177.4065,-1,-1); // 176
	Derby2 = AddStaticVehicle(504,-1329.5347,1048.7799,1038.0103,152.6775,-1,-1); // 177
	Derby3 = AddStaticVehicle(504,-1295.5067,1025.8018,1037.5696,129.9235,-1,-1); // 178
	Derby4 = AddStaticVehicle(504,-1413.5791,1056.1185,1038.2798,182.0372,-1,-1); // 179
	Derby5 = AddStaticVehicle(504,-1432.6188,1055.8660,1038.3093,185.3242,-1,-1); // 180
	Derby6 = AddStaticVehicle(504,-1449.7091,1052.7480,1038.2817,194.6754,-1,-1); // 181
	Derby7 = AddStaticVehicle(504,-1460.4928,1049.3802,1038.2437,200.5020,-1,-1); // 182
	Derby8 = AddStaticVehicle(504,-1406.2797,1055.9629,1038.2645,177.2762,-1,-1); // 183
	Derby9 = AddStaticVehicle(504,-1387.2533,1056.6328,1038.2452,178.5495,-1,-1); // 184
	Derby10 = AddStaticVehicle(504,-1383.2393,1056.6461,1038.2389,178.6510,-1,-1); // 185

    MotoPizza5 = AddStaticVehicle(448,2096.7070,-1813.9661,12.9825,92.5864,1,1); // 191
	MotoPizza6 = AddStaticVehicle(448,2096.8818,-1820.5515,12.9829,89.8825,1,1); // 192

	AddStaticVehicle(532,-1180.1852,-1064.3158,130.1944,11.4957,1,1); // 188
	AddStaticVehicle(532,-1173.9580,-1063.5544,130.1994,9.6866,1,1); // 189
	AddStaticVehicle(532,-1169.0393,-1062.9961,130.1862,7.0070,1,1); // 190

	new randmodel;
	new randcolor1;
	new randcolor2;
	randmodel = random(26);
	randcolor1 = random(139);
	randcolor2 = random(139);
	carvenda1 = AddStaticVehicle(CarrosVendaModelos[randmodel],CarrosVendaPos[0][0],CarrosVendaPos[0][1],CarrosVendaPos[0][2],CarrosVendaAng[0],randcolor1,randcolor2);//191
	randmodel = random(26);
	randcolor1 = random(139);
	randcolor2 = random(139);
	carvenda2 = AddStaticVehicle(CarrosVendaModelos[randmodel],CarrosVendaPos[1][0],CarrosVendaPos[1][1],CarrosVendaPos[1][2],CarrosVendaAng[1],randcolor1,randcolor2);//192
    randmodel = random(26);
	randcolor1 = random(139);
	randcolor2 = random(139);
	carvenda3 = AddStaticVehicle(CarrosVendaModelos[randmodel],CarrosVendaPos[2][0],CarrosVendaPos[2][1],CarrosVendaPos[2][2],CarrosVendaAng[2],randcolor1,randcolor2);//193
    randmodel = random(26);
	randcolor1 = random(139);
	randcolor2 = random(139);
	carvenda4 = AddStaticVehicle(CarrosVendaModelos[randmodel],CarrosVendaPos[3][0],CarrosVendaPos[3][1],CarrosVendaPos[3][2],CarrosVendaAng[3],randcolor1,randcolor2);//194
    randmodel = random(26);
	randcolor1 = random(139);
	randcolor2 = random(139);
	carvenda5 = AddStaticVehicle(CarrosVendaModelos[randmodel],CarrosVendaPos[4][0],CarrosVendaPos[4][1],CarrosVendaPos[4][2],CarrosVendaAng[4],randcolor1,randcolor2);//195
	randmodel = random(26);
	randcolor1 = random(139);
	randcolor2 = random(139);
	carvenda6 = AddStaticVehicle(CarrosVendaModelos[randmodel],CarrosVendaPos[5][0],CarrosVendaPos[5][1],CarrosVendaPos[5][2],CarrosVendaAng[5],randcolor1,randcolor2);//196
	randmodel = random(26);
	randcolor1 = random(139);
	randcolor2 = random(139);
	carvenda7 = AddStaticVehicle(CarrosVendaModelos[randmodel],CarrosVendaPos[6][0],CarrosVendaPos[6][1],CarrosVendaPos[6][2],CarrosVendaAng[6],randcolor1,randcolor2);//197
	randmodel = random(26);
	randcolor1 = random(139);
	randcolor2 = random(139);
	carvenda8 = AddStaticVehicle(CarrosVendaModelos[randmodel],CarrosVendaPos[7][0],CarrosVendaPos[7][1],CarrosVendaPos[7][2],CarrosVendaAng[7],randcolor1,randcolor2);//198
    randmodel = random(26);
	randcolor1 = random(139);
	randcolor2 = random(139);
	carvenda9 = AddStaticVehicle(CarrosVendaModelos[randmodel],CarrosVendaPos[8][0],CarrosVendaPos[8][1],CarrosVendaPos[8][2],CarrosVendaAng[8],randcolor1,randcolor2);//199
    randmodel = random(26);
	randcolor1 = random(139);
	randcolor2 = random(139);
	carvenda10 = AddStaticVehicle(CarrosVendaModelos[randmodel],CarrosVendaPos[9][0],CarrosVendaPos[9][1],CarrosVendaPos[9][2],CarrosVendaAng[9],randcolor1,randcolor2);//200
	for(new r = 0; r < 24; r++){
	    Reboque[r] = AddStaticVehicle(525,INVALID_POS_X,INVALID_POS_Y,INVALID_POS_Z,0.0,1,5);
	}
	for(new c = 0; c < 20; c++){
	    CarrosCC[c] = AddStaticVehicle(415,INVALID_POS_X,INVALID_POS_Y,INVALID_POS_Z,0.0,1,5);
	}

    LinkVehicleToInterior(BikeEvent1, 14);
	LinkVehicleToInterior(BikeEvent2, 14);
	LinkVehicleToInterior(BikeEvent3, 14);
	LinkVehicleToInterior(BikeEvent4, 14);
	LinkVehicleToInterior(BikeEvent5, 14);
	LinkVehicleToInterior(BikeEvent6, 14);
	LinkVehicleToInterior(BikeEvent7, 14);
	LinkVehicleToInterior(BikeEvent8, 14);
	LinkVehicleToInterior(Derby1,	  15);
    LinkVehicleToInterior(Derby2,	  15);
    LinkVehicleToInterior(Derby3,	  15);
    LinkVehicleToInterior(Derby4,	  15);
    LinkVehicleToInterior(Derby5,	  15);
    LinkVehicleToInterior(Derby6,  	  15);
    LinkVehicleToInterior(Derby7,	  15);
    LinkVehicleToInterior(Derby8,	  15);
    LinkVehicleToInterior(Derby9,	  15);
    LinkVehicleToInterior(Derby10,	  15);

    SetGasDerby();
    CreateHotelFile();

//|------------------------------------[ PICKUPS ]----------------------------------------------------
	for(new pickups=0;pickups<sizeof(Pickups);pickups++) {
		AddStaticPickup(Pickups[pickups][pickupmodel],Pickups[pickups][pickuptype],Pickups[pickups][pickupposx],Pickups[pickups][pickupposy],Pickups[pickups][pickupposz]);
	}
	
	//HAMBURGUERS
	Hamburguers = CreateMenu("Hamburguers",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(Hamburguers)){
	    SetMenuColumnHeader(Hamburguers,0,"Lanche");
	    SetMenuColumnHeader(Hamburguers,1,"Preco");
	    AddMenuItem(Hamburguers,0,"X-Salada");
	    AddMenuItem(Hamburguers,1,"$7");
	    AddMenuItem(Hamburguers,0,"X-Burguer");
	    AddMenuItem(Hamburguers,1,"$5");
	    AddMenuItem(Hamburguers,0,"X-Bacon");
	    AddMenuItem(Hamburguers,1,"$8");
	    AddMenuItem(Hamburguers,0,"X-Frango");
	    AddMenuItem(Hamburguers,1,"$7");
	    AddMenuItem(Hamburguers,0,"X-Tudo");
	    AddMenuItem(Hamburguers,1,"$10");
	    AddMenuItem(Hamburguers,0,"Cachorro quente");
	    AddMenuItem(Hamburguers,1,"$6");
	    AddMenuItem(Hamburguers,0,"Sair");
	}
	//MOTIVOS DE PRISÃO
	MotivosPrisao = CreateMenu("Motivos da Prisao",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(MotivosPrisao)){
	    SetMenuColumnHeader(MotivosPrisao,0,"Motivo");
	    SetMenuColumnHeader(MotivosPrisao,1,"Tempo");
  	    AddMenuItem(MotivosPrisao,0,"Homicidio");
  	    AddMenuItem(MotivosPrisao,1,"8 horas");
  	    AddMenuItem(MotivosPrisao,0,"Assalto a mao armada");
  	    AddMenuItem(MotivosPrisao,1,"6 horas");
  	    AddMenuItem(MotivosPrisao,0,"Roubo de automovel");
  	    AddMenuItem(MotivosPrisao,1,"5 horas");
  	    AddMenuItem(MotivosPrisao,0,"Roubo de imovel");
  	    AddMenuItem(MotivosPrisao,1,"5 horas");
  	    AddMenuItem(MotivosPrisao,0,"Roubo de celular");
  	    AddMenuItem(MotivosPrisao,1,"4 horas");
  	    AddMenuItem(MotivosPrisao,0,"Desacato a autoridade");
  	    AddMenuItem(MotivosPrisao,1,"2 horas");
  	    AddMenuItem(MotivosPrisao,0,"Falsificaao de documento");
  	    AddMenuItem(MotivosPrisao,1,"3 horas");
  	    AddMenuItem(MotivosPrisao,0,"Corrupao");
  	    AddMenuItem(MotivosPrisao,1,"4 horas");
  	    AddMenuItem(MotivosPrisao,0,"Nao pagar multas");
  	    AddMenuItem(MotivosPrisao,1,"5 horas");
  	    AddMenuItem(MotivosPrisao,0,"Contrabando");
  	    AddMenuItem(MotivosPrisao,1,"3 horas");
  	    AddMenuItem(MotivosPrisao,0,"Fuga de prisao");
  	    AddMenuItem(MotivosPrisao,1,"10 horas");
  	    AddMenuItem(MotivosPrisao,0,"Mais motivos");
  	    AddMenuItem(MotivosPrisao,1,">");
	}
	MotivosPrisao2 = CreateMenu("Motivos da Prisao",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(MotivosPrisao2)){
	    SetMenuColumnHeader(MotivosPrisao2,0,"Motivo");
	    SetMenuColumnHeader(MotivosPrisao2,1,"Tempo");
  	    AddMenuItem(MotivosPrisao2,0,"Tentativa de homicidio");
  	    AddMenuItem(MotivosPrisao2,1,"7 horas");
  	    AddMenuItem(MotivosPrisao2,0,"Destruindo patrimonio");
  	    AddMenuItem(MotivosPrisao2,1,"2 horas");
  	    AddMenuItem(MotivosPrisao2,0,"Formacao em quadrilha");
  	    AddMenuItem(MotivosPrisao2,1,"5 horas");
  	    AddMenuItem(MotivosPrisao2,0,"Portando drogas");
  	    AddMenuItem(MotivosPrisao2,1,"4 horas");
  	    AddMenuItem(MotivosPrisao2,0,"Portando armas sem porte");
  	    AddMenuItem(MotivosPrisao2,1,"5 horas");
  	    AddMenuItem(MotivosPrisao2,0,"Sequestro");
  	    AddMenuItem(MotivosPrisao2,1,"8 horas");
	}
	//Drogas Morro
	Becks = CreateMenu("Drogas",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(Becks)){
		SetMenuColumnHeader(Becks,0,"Droga");
 		SetMenuColumnHeader(Becks,1,"Preo");
 		AddMenuItem(Becks,0,"Maconha");
 		AddMenuItem(Becks,1,"$150");
  		AddMenuItem(Becks,0,"Cocaina");
 		AddMenuItem(Becks,1,"$250");
 		AddMenuItem(Becks,0,"Heroina");
 		AddMenuItem(Becks,1,"$300");
	}
	//Outros na loja 24/7
	Outros = CreateMenu("Outros",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(Outros)){
		SetMenuColumnHeader(Outros,0,"Item");
 		SetMenuColumnHeader(Outros,1,"Preo");
 		AddMenuItem(Outros,0,"Camisinha");
 		AddMenuItem(Outros,1,"$50");
  		AddMenuItem(Outros,0,"Sanduiche natural");
 		AddMenuItem(Outros,1,"$50");
  		AddMenuItem(Outros,0,"Faca");
 		AddMenuItem(Outros,1,"$300");
 		AddMenuItem(Outros,0,"Escova de dentes");
 		AddMenuItem(Outros,1,"$50");
 		AddMenuItem(Outros,0,"Pasta dental");
 		AddMenuItem(Outros,1,"$50");
	}
	//Casas
	CasaOpc = CreateMenu("Casa",1,30.0,140.0,220.0,0.0);
	if(IsValidMenu(CasaOpc)){
	    SetMenuColumnHeader(CasaOpc,0,"Selecione uma opao");
		AddMenuItem(CasaOpc,0,"Colocar sua casa a venda");
		AddMenuItem(CasaOpc,0,"Colocar sua casa em locaao");
		AddMenuItem(CasaOpc,0,"Cancelar venda da sua casa");
		AddMenuItem(CasaOpc,0,"Cancelar aluguel da sua casa");
		AddMenuItem(CasaOpc,0,"Rastrear sua casa");
		AddMenuItem(CasaOpc,0,"Sair");
	}
	DiasAluguel1 = CreateMenu("Aluguel",1,30.0,140.0,220.0,0.0);
	if(IsValidMenu(DiasAluguel1)){
	    SetMenuColumnHeader(DiasAluguel1,0,"Dias de aluguel");
	    AddMenuItem(DiasAluguel1,0,"1 dia");
	    AddMenuItem(DiasAluguel1,0,"2 dias");
	    AddMenuItem(DiasAluguel1,0,"3 dias");
	    AddMenuItem(DiasAluguel1,0,"4 dias");
	    AddMenuItem(DiasAluguel1,0,"5 dias");
	    AddMenuItem(DiasAluguel1,0,"6 dias");
	    AddMenuItem(DiasAluguel1,0,"7 dias");
	    AddMenuItem(DiasAluguel1,0,"8 dias");
	    AddMenuItem(DiasAluguel1,0,"9 dias");
	    AddMenuItem(DiasAluguel1,0,"10 dias");
	    AddMenuItem(DiasAluguel1,0,"Mais dias >>");
	}
	DiasAluguel2 = CreateMenu("Aluguel",1,30.0,140.0,220.0,0.0);
	if(IsValidMenu(DiasAluguel2)){
	    SetMenuColumnHeader(DiasAluguel2,0,"Dias de aluguel");
	    AddMenuItem(DiasAluguel2,0,"11 dias");
	    AddMenuItem(DiasAluguel2,0,"12 dias");
	    AddMenuItem(DiasAluguel2,0,"13 dias");
	    AddMenuItem(DiasAluguel2,0,"14 dias");
	    AddMenuItem(DiasAluguel2,0,"15 dias");
	    AddMenuItem(DiasAluguel2,0,"16 dias");
	    AddMenuItem(DiasAluguel2,0,"17 dias");
	    AddMenuItem(DiasAluguel2,0,"18 dias");
	    AddMenuItem(DiasAluguel2,0,"19 dias");
	    AddMenuItem(DiasAluguel2,0,"20 dias");
	    AddMenuItem(DiasAluguel2,0,"Mais dias >>");
	}
	DiasAluguel3 = CreateMenu("Aluguel",1,30.0,140.0,220.0,0.0);
	if(IsValidMenu(DiasAluguel3)){
	    SetMenuColumnHeader(DiasAluguel3,0,"Dias de aluguel");
	    AddMenuItem(DiasAluguel3,0,"21 dias");
	    AddMenuItem(DiasAluguel3,0,"22 dias");
	    AddMenuItem(DiasAluguel3,0,"23 dias");
	    AddMenuItem(DiasAluguel3,0,"24 dias");
	    AddMenuItem(DiasAluguel3,0,"25 dias");
	    AddMenuItem(DiasAluguel3,0,"26 dias");
	    AddMenuItem(DiasAluguel3,0,"27 dias");
	    AddMenuItem(DiasAluguel3,0,"28 dias");
	    AddMenuItem(DiasAluguel3,0,"29 dias");
	    AddMenuItem(DiasAluguel3,0,"30 dias");
	    AddMenuItem(DiasAluguel3,0,"Sair");
	}
	//Armas
	Weapons = CreateMenu("Armas",1,30.0,140.0,220.0,0.0);
	if(IsValidMenu(Weapons)){
	    SetMenuColumnHeader(Weapons,0,"Armas:");
	    AddMenuItem(Weapons,0,"Pistolas");
	    AddMenuItem(Weapons,0,"Shotguns");
	    AddMenuItem(Weapons,0,"Micro Uzi");
	    AddMenuItem(Weapons,0,"Rifles");
	    AddMenuItem(Weapons,0,"Snipers");
	    AddMenuItem(Weapons,0,"Colete");
	    AddMenuItem(Weapons,0,"Camuflagem");
	    AddMenuItem(Weapons,0,"Sair");
	}
	WSlot2 = CreateMenu("Pistolas",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(WSlot2)){
	    SetMenuColumnHeader(WSlot2,0,"Nome");
	    SetMenuColumnHeader(WSlot2,1,"Valor");
	    SetMenuColumnHeader(WSlot2,2,"Municao");
	    AddMenuItem(WSlot2,0,"Desert Eagle");
	    AddMenuItem(WSlot2,1,"$3200");
	    AddMenuItem(WSlot2,2,"100");
	    AddMenuItem(WSlot2,0,"Pistola 9mm");
	    AddMenuItem(WSlot2,1,"$1000");
	    AddMenuItem(WSlot2,2,"100");
	    AddMenuItem(WSlot2,0,"Pistola 9mm c/ silenciador");
	    AddMenuItem(WSlot2,1,"$1200");
	    AddMenuItem(WSlot2,2,"100");
	}
	WSlot3 = CreateMenu("Shotguns",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(WSlot3)){
	    SetMenuColumnHeader(WSlot3,0,"Nome");
	    SetMenuColumnHeader(WSlot3,1,"Valor");
	    SetMenuColumnHeader(WSlot3,2,"Municao");
	    AddMenuItem(WSlot3,0,"Shotgun");
	    AddMenuItem(WSlot3,1,"$2000");
	    AddMenuItem(WSlot3,2,"46");
	    AddMenuItem(WSlot3,0,"Combat Shotgun");
	    AddMenuItem(WSlot3,1,"$6200");
	    AddMenuItem(WSlot3,2,"80");
	    AddMenuItem(WSlot3,0,"Sawnoff Shotgun");
	    AddMenuItem(WSlot3,1,"$7700");
	    AddMenuItem(WSlot3,2,"80");
	}
	WSlot4 = CreateMenu("Micro Uzi",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(WSlot4)){
	    SetMenuColumnHeader(WSlot4,0,"Nome");
	    SetMenuColumnHeader(WSlot4,1,"Valor");
	    SetMenuColumnHeader(WSlot4,2,"Municao");
	    AddMenuItem(WSlot4,0,"MP5");
	    AddMenuItem(WSlot4,1,"$8200");
	    AddMenuItem(WSlot4,2,"300");
	    AddMenuItem(WSlot4,0,"Tec9");
	    AddMenuItem(WSlot4,1,"$5700");
	    AddMenuItem(WSlot4,2,"150");
	    AddMenuItem(WSlot4,0,"Micro Uzi (Mac 10)");
	    AddMenuItem(WSlot4,1,"$8200");
	    AddMenuItem(WSlot4,2,"150");
	}
	WSlot5 = CreateMenu("Rifles",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(WSlot5)){
	    SetMenuColumnHeader(WSlot5,0,"Nome");
	    SetMenuColumnHeader(WSlot5,1,"Valor");
	    SetMenuColumnHeader(WSlot5,2,"Municao");
	    AddMenuItem(WSlot5,0,"AK47");
	    AddMenuItem(WSlot5,1,"$7700");
	    AddMenuItem(WSlot5,2,"150");
	    AddMenuItem(WSlot5,0,"M4");
	    AddMenuItem(WSlot5,1,"$9200");
	    AddMenuItem(WSlot5,2,"150");
	}
	WSlot6 = CreateMenu("Snipers",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(WSlot6)){
	    SetMenuColumnHeader(WSlot6,0,"Nome");
	    SetMenuColumnHeader(WSlot6,1,"Valor");
	    SetMenuColumnHeader(WSlot6,2,"Municao");
	    AddMenuItem(WSlot6,0,"Country Rifle");
	    AddMenuItem(WSlot6,1,"$4200");
	    AddMenuItem(WSlot6,2,"80");
	}
	WColete = CreateMenu("Colete",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(WColete)){
	    SetMenuColumnHeader(WColete,0,"Confirma?");
	    SetMenuColumnHeader(WColete,1,"Valor");
	    AddMenuItem(WColete,0,"Colete");
	    AddMenuItem(WColete,1,"$300");
	}
	WCamuflagem = CreateMenu("Camuflagem",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(WCamuflagem)){
	    SetMenuColumnHeader(WCamuflagem,0,"Tempo");
	    SetMenuColumnHeader(WCamuflagem,1,"Valor");
	    AddMenuItem(WCamuflagem,0,"1 minuto");
	    AddMenuItem(WCamuflagem,1,"$100");
	    AddMenuItem(WCamuflagem,0,"2 minutos");
	    AddMenuItem(WCamuflagem,1,"$200");
	    AddMenuItem(WCamuflagem,0,"3 minutos");
	    AddMenuItem(WCamuflagem,1,"$300");
	    AddMenuItem(WCamuflagem,0,"4 minutos");
	    AddMenuItem(WCamuflagem,1,"$400");
	    AddMenuItem(WCamuflagem,0,"5 minutos");
	    AddMenuItem(WCamuflagem,1,"$500");
	    AddMenuItem(WCamuflagem,0,"6 minutos");
	    AddMenuItem(WCamuflagem,1,"$600");
	    AddMenuItem(WCamuflagem,0,"7 minutos");
	    AddMenuItem(WCamuflagem,1,"$700");
	    AddMenuItem(WCamuflagem,0,"8 minutos");
	    AddMenuItem(WCamuflagem,1,"$800");
		AddMenuItem(WCamuflagem,0,"9 minutos");
	    AddMenuItem(WCamuflagem,1,"$900");
		AddMenuItem(WCamuflagem,0,"10 minutos");
	    AddMenuItem(WCamuflagem,1,"$1000");
	}
	//TUNING LIFE
	Transfeder1 = CreateMenu("Componentes",2,30.0,140.0,220.0,0.0);
  	if(IsValidMenu(Transfeder1)){
  	    SetMenuColumnHeader(Transfeder1,0,"Parte");
  	    AddMenuItem(Transfeder1,0,"Wheels");
  	    AddMenuItem(Transfeder1,0,"Lamps");
  	    AddMenuItem(Transfeder1,0,"Hoods");
  	    AddMenuItem(Transfeder1,0,"Spoilers");
  	    AddMenuItem(Transfeder1,0,"Side Skirts");
  	    AddMenuItem(Transfeder1,0,"Roof Scoop");
  	    AddMenuItem(Transfeder1,0,"Exhaust");
  	    AddMenuItem(Transfeder1,0,"Vents");
  	    AddMenuItem(Transfeder1,0,"Stereo");
	    AddMenuItem(Transfeder1,0,"Hydraulics");
	    AddMenuItem(Transfeder1,0,"Nitro");
	}
	Transfeder2 = CreateMenu("Componentes",2,30.0,140.0,220.0,0.0);
  	if(IsValidMenu(Transfeder2)){
  	    SetMenuColumnHeader(Transfeder2,0,"Wheel");
  	    SetMenuColumnHeader(Transfeder2,1,"Preco");
  	    AddMenuItem(Transfeder2,0,"Shadow");
  	    AddMenuItem(Transfeder2,0,"Mega");
  	    AddMenuItem(Transfeder2,0,"Rimshine");
  	    AddMenuItem(Transfeder2,0,"Wires");
  	    AddMenuItem(Transfeder2,0,"Classic");
  	    AddMenuItem(Transfeder2,0,"Twist");
  	    AddMenuItem(Transfeder2,0,"Cutter");
  	    AddMenuItem(Transfeder2,0,"Switch");
	    AddMenuItem(Transfeder2,0,"Grove");
	    AddMenuItem(Transfeder2,0,"Import");
	    AddMenuItem(Transfeder2,0,"Dollar");
	    AddMenuItem(Transfeder2,0,"Trance");
	    AddMenuItem(Transfeder2,0,"Atomic");
	}
    Transfeder3 = CreateMenu("Componentes",2,30.0,140.0,220.0,0.0);
  	if(IsValidMenu(Transfeder3)){
  	    SetMenuColumnHeader(Transfeder3,0,"Lamp");
  	    SetMenuColumnHeader(Transfeder3,1,"Preco");
  	    AddMenuItem(Transfeder3,0,"Round Fog");
  	    AddMenuItem(Transfeder3,0,"Square Fog");
	}
	Transfeder4 = CreateMenu("Componentes",2,30.0,140.0,220.0,0.0);
  	if(IsValidMenu(Transfeder4)){
  	    SetMenuColumnHeader(Transfeder4,0,"Hood");
  	    SetMenuColumnHeader(Transfeder4,1,"Preco");
  	    AddMenuItem(Transfeder4,0,"Champ Scoop");
  	    AddMenuItem(Transfeder4,0,"Fury Scoop");
  	    AddMenuItem(Transfeder4,0,"Race Scoop");
  	    AddMenuItem(Transfeder4,0,"Worx Scoop");
	}
	Transfeder5 = CreateMenu("Componentes",2,30.0,140.0,220.0,0.0);
  	if(IsValidMenu(Transfeder5)){
  	    SetMenuColumnHeader(Transfeder5,0,"Spoiler");
  	    SetMenuColumnHeader(Transfeder5,1,"Preco");
  	    AddMenuItem(Transfeder5,0,"Pro");
  	    AddMenuItem(Transfeder5,0,"Win");
  	    AddMenuItem(Transfeder5,0,"Drag");
  	    AddMenuItem(Transfeder5,0,"Alpha");
  	    AddMenuItem(Transfeder5,0,"Champ");
  	    AddMenuItem(Transfeder5,0,"Race");
  	    AddMenuItem(Transfeder5,0,"Worx");
  	    AddMenuItem(Transfeder5,0,"Fury");
	}
	//MUNIÇÕES
	Municoes = CreateMenu("Municoes",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(Municoes)){
	    SetMenuColumnHeader(Municoes,0,"Escolha o SLOT:");
	    AddMenuItem(Municoes,0,"SLOT 2");
	    AddMenuItem(Municoes,1,"$5 cada muniao");
	    AddMenuItem(Municoes,0,"SLOT 3");
	    AddMenuItem(Municoes,1,"$40 cada muniao");
	    AddMenuItem(Municoes,0,"SLOT 4");
	    AddMenuItem(Municoes,1,"$10 cada muniao");
	    AddMenuItem(Municoes,0,"SLOT 5");
	    AddMenuItem(Municoes,1,"$30 cada muniao");
	    AddMenuItem(Municoes,0,"SLOT 6");
	    AddMenuItem(Municoes,1,"$50 cada muniao");
	}
	QTMunicoes = CreateMenu("Municoes",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(QTMunicoes)){
	    SetMenuColumnHeader(QTMunicoes,0,"Escolha a quantidade:");
	    AddMenuItem(QTMunicoes,0,"5");
	    AddMenuItem(QTMunicoes,0,"10");
	    AddMenuItem(QTMunicoes,0,"20");
	    AddMenuItem(QTMunicoes,0,"50");
	    AddMenuItem(QTMunicoes,0,"100");
	    AddMenuItem(QTMunicoes,0,"200");
	}

	//RESTAURANTE
	Sucos = CreateMenu("Sucos",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(Sucos)){
	    SetMenuColumnHeader(Sucos,0,"Escolha o sabor:");
	    AddMenuItem(Sucos,0,"Laranja");
	    AddMenuItem(Sucos,0,"Abacaxi");
	    AddMenuItem(Sucos,0,"Acerola");
	    AddMenuItem(Sucos,0,"Mamo");
	    AddMenuItem(Sucos,0,"Limo");
	    AddMenuItem(Sucos,0,"Morango");
	    AddMenuItem(Sucos,0,"Uva");
	    AddMenuItem(Sucos,0,"Maracuja");
	    AddMenuItem(Sucos,0,"Framboesa");
	}
	Cardapio1 = CreateMenu("Cardapio",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(Cardapio1)){
	    SetMenuColumnHeader(Cardapio1,0,"Menu");
	    AddMenuItem(Cardapio1,0,"Comidas");
	    AddMenuItem(Cardapio1,0,"Bebidas");
	    AddMenuItem(Cardapio1,0,"Sobremesas");
	    AddMenuItem(Cardapio1,0,"Sair");
	}
	Cardapio2 = CreateMenu("Comidas",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(Cardapio2)){
	    SetMenuColumnHeader(Cardapio2,0,"Comida");
	    SetMenuColumnHeader(Cardapio2,1,"Preo");
	    AddMenuItem(Cardapio2,0,"Feijoada");
	    AddMenuItem(Cardapio2,1,"$40");
	    AddMenuItem(Cardapio2,0,"Lagosta Gourmet");
	    AddMenuItem(Cardapio2,1,"$220");
	    AddMenuItem(Cardapio2,0,"Camaro");
	    AddMenuItem(Cardapio2,1,"$140");
	    AddMenuItem(Cardapio2,0,"Peixe Frito");
	    AddMenuItem(Cardapio2,1,"$120");
	    AddMenuItem(Cardapio2,0,"Fil");
	    AddMenuItem(Cardapio2,1,"$80");
	    AddMenuItem(Cardapio2,0,"Salmo");
	    AddMenuItem(Cardapio2,1,"$140");
	    AddMenuItem(Cardapio2,0,"Batata Frita");
	    AddMenuItem(Cardapio2,1,"$80");
	    AddMenuItem(Cardapio2,0,"Sopa");
	    AddMenuItem(Cardapio2,1,"$20");
	    AddMenuItem(Cardapio2,0,"Frango Assado");
	    AddMenuItem(Cardapio2,1,"$100");
	}
	Cardapio3 = CreateMenu("Bebidas",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(Cardapio3)){
	    SetMenuColumnHeader(Cardapio3,0,"Bebida");
	    SetMenuColumnHeader(Cardapio3,1,"Preo");
	    AddMenuItem(Cardapio3,0,"Coca-Cola");
	    AddMenuItem(Cardapio3,1,"$8");
	    AddMenuItem(Cardapio3,0,"Sprite");
	    AddMenuItem(Cardapio3,1,"$8");
	    AddMenuItem(Cardapio3,0,"Cerveja");
	    AddMenuItem(Cardapio3,1,"$9");
	    AddMenuItem(Cardapio3,0,"Fanta");
	    AddMenuItem(Cardapio3,1,"$9");
	    AddMenuItem(Cardapio3,0,"Vinho");
	    AddMenuItem(Cardapio3,1,"$100");
	    AddMenuItem(Cardapio3,0,"Suco c/ leite");
	    AddMenuItem(Cardapio3,1,"$14");
	    AddMenuItem(Cardapio3,0,"Suco c/ agua");
	    AddMenuItem(Cardapio3,1,"$10");
	}
	Cardapio4 = CreateMenu("Sobremesas",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(Cardapio4)){
	    SetMenuColumnHeader(Cardapio4,0,"Sobremesa");
	    SetMenuColumnHeader(Cardapio4,1,"Preo");
	    AddMenuItem(Cardapio4,0,"Pudim de chocolate");
	    AddMenuItem(Cardapio4,1,"$15");
	    AddMenuItem(Cardapio4,0,"Sorvete");
	    AddMenuItem(Cardapio4,1,"$8");
	    AddMenuItem(Cardapio4,0,"Bolo de chocolate");
	    AddMenuItem(Cardapio4,1,"$13");
	    AddMenuItem(Cardapio4,0,"Bomba de chocolate");
	    AddMenuItem(Cardapio4,1,"$9");
	    AddMenuItem(Cardapio4,0,"Brigadeiro");
	    AddMenuItem(Cardapio4,1,"$6");
	}
	//SORVETES
	Sorvetes2 = CreateMenu("Menu",2,2,150,100,20);
	if(IsValidMenu(Sorvetes2)){
	    SetMenuColumnHeader(Sorvetes2,0,"Sabor");
	    SetMenuColumnHeader(Sorvetes2,1,"Preo");
		AddMenuItem(Sorvetes2,0,"Napolitano");
		AddMenuItem(Sorvetes2,1,"$32");
		AddMenuItem(Sorvetes2,0,"Chocolate");
		AddMenuItem(Sorvetes2,1,"$25");
		AddMenuItem(Sorvetes2,0,"Flocos");
		AddMenuItem(Sorvetes2,1,"$30");
	}
	Sorvetes = CreateMenu("Menu",2,2,150,100,20);
	if(IsValidMenu(Sorvetes)){
	    SetMenuColumnHeader(Sorvetes,0,"Sabor");
	    SetMenuColumnHeader(Sorvetes,1,"Preo");
	    AddMenuItem(Sorvetes,0,"Milho verde");
	    AddMenuItem(Sorvetes,1,"$5");
	    AddMenuItem(Sorvetes,0,"Morango");
	    AddMenuItem(Sorvetes,1,"$5");
	    AddMenuItem(Sorvetes,0,"Leite Condensado");
	    AddMenuItem(Sorvetes,1,"$7");
	    AddMenuItem(Sorvetes,0,"Flocos");
	    AddMenuItem(Sorvetes,1,"$5");
	    AddMenuItem(Sorvetes,0,"Creme");
	    AddMenuItem(Sorvetes,1,"$4");
	    AddMenuItem(Sorvetes,0,"Abacaxi");
	    AddMenuItem(Sorvetes,1,"$5");
	    AddMenuItem(Sorvetes,0,"Chocolate");
	    AddMenuItem(Sorvetes,1,"$7");
	    AddMenuItem(Sorvetes,0,"Limo");
	    AddMenuItem(Sorvetes,1,"$4");
	    AddMenuItem(Sorvetes,0,"Tutti-Fruti");
	    AddMenuItem(Sorvetes,1,"$5");
	}
	cofremenu = CreateMenu("Cofre",1,30.0,140.0,220.0,0.0);
	if(IsValidMenu(cofremenu)){
		SetMenuColumnHeader(cofremenu,0,"Deseja:");
		AddMenuItem(cofremenu,0,"Guardar dinheiro");
		AddMenuItem(cofremenu,0,"Guardar arma");
		AddMenuItem(cofremenu,0,"Guardar droga");
		AddMenuItem(cofremenu,0,"Guardar celular");
		AddMenuItem(cofremenu,0,"Retirar dinheiro");
		AddMenuItem(cofremenu,0,"Retirar arma");
		AddMenuItem(cofremenu,0,"Retirar droga");
		AddMenuItem(cofremenu,0,"Retirar celular");
	}
	drogascofre = CreateMenu("Cofre",1,30.0,140.0,220.0,0.0);
	if(IsValidMenu(drogascofre)){
		SetMenuColumnHeader(drogascofre,0,"Deseja guardar/retirar:");
		AddMenuItem(drogascofre,0,"Cocaina");
		AddMenuItem(drogascofre,0,"Maconha");
		AddMenuItem(drogascofre,0,"Heroina");
	}
	//PROPRIEDADES
	Properties = CreateMenu("Propriedades",2,2,150,100,20);
	if(IsValidMenu(Properties)){
	    SetMenuColumnHeader(Properties,0,"Nome");
	    SetMenuColumnHeader(Properties,1,"Valor");
	    AddMenuItem(Properties,0,"Pizzaria");
	    AddMenuItem(Properties,1,"$90000");
	    AddMenuItem(Properties,0,"Yellow's'Taxi");
	    AddMenuItem(Properties,1,"$120000");
	    AddMenuItem(Properties,0,"LuxLimosine");
	    AddMenuItem(Properties,1,"$140000");
	    AddMenuItem(Properties,0,"Corretora de seguros");
	    AddMenuItem(Properties,1,"$180000");
	    AddMenuItem(Properties,0,"SecurityLife");
	    AddMenuItem(Properties,1,"$110000");
	    AddMenuItem(Properties,0,"Ammu-Nation");
	    AddMenuItem(Properties,1,"$150000");
	    AddMenuItem(Properties,0,"Boate de strip");
	    AddMenuItem(Properties,1,"$170000");
	    AddMenuItem(Properties,0,"Posto");
	    AddMenuItem(Properties,1,"$210000");
	    AddMenuItem(Properties,0,"Bar");
	    AddMenuItem(Properties,1,"$80000");
	    AddMenuItem(Properties,0,"Pay'n'Spray");
	    AddMenuItem(Properties,1,"$200000");
	    AddMenuItem(Properties,0,"Lixao");
	    AddMenuItem(Properties,1,"$75000");
	    AddMenuItem(Properties,0,"Proximo");
	    AddMenuItem(Properties,1,">");
	}
	Properties2 = CreateMenu("Propriedades",2,2,150,100,20);
	if(IsValidMenu(Properties2)){
	    SetMenuColumnHeader(Properties2,0,"Nome");
	    SetMenuColumnHeader(Properties2,1,"Valor");
	    AddMenuItem(Properties2,0,"Fazenda");
	    AddMenuItem(Properties2,1,"$160000");
	    AddMenuItem(Properties2,0,"COEVL");
	    AddMenuItem(Properties2,1,"$180000");
	    AddMenuItem(Properties2,0,"ECTVL");
	    AddMenuItem(Properties2,1,"$160000");
	    AddMenuItem(Properties2,0,"Concecionaria");
	    AddMenuItem(Properties2,1,"$200000");
	    AddMenuItem(Properties2,0,"Corretora de imoveis");
	    AddMenuItem(Properties2,1,"$200000");
	    AddMenuItem(Properties2,0,"Cooperativa de pesca");
	    AddMenuItem(Properties2,1,"$140000");
	    AddMenuItem(Properties2,0,"Voltar");
	    AddMenuItem(Properties2,1,"<");
	}
	ConfirmacaoNegocio = CreateMenu("Propriedades",2,2,150,100,20);
	if(IsValidMenu(ConfirmacaoNegocio)){
		SetMenuColumnHeader(ConfirmacaoNegocio,0,"Quer mesmo compra-la?");
		AddMenuItem(ConfirmacaoNegocio,0,"Sim");
		AddMenuItem(ConfirmacaoNegocio,0,"No");
	}
	//MENUBOMBSHOP
	Bombshop = CreateMenu("Loja de bombas",2,2,150,100,20);
	if(IsValidMenu(Bombshop)){
	    SetMenuColumnHeader(Bombshop,0,"Produto");
	    SetMenuColumnHeader(Bombshop,1,"Preo");
		AddMenuItem(Bombshop,0,"Napalm");
		AddMenuItem(Bombshop,1,"$500");
		AddMenuItem(Bombshop,0,"Dinamite");
		AddMenuItem(Bombshop,1,"$450");
		AddMenuItem(Bombshop,0,"Sair");
	}
	//----
	Bombshopveh = CreateMenu("Loja de bombas",2,2,150,100,20);
	if(IsValidMenu(Bombshopveh)){
	    SetMenuColumnHeader(Bombshop,0,"Produto");
	    SetMenuColumnHeader(Bombshop,1,"Preo");
		AddMenuItem(Bombshopveh,0,"Instalar bomba");
		AddMenuItem(Bombshopveh,1,"$500");
		AddMenuItem(Bombshopveh,0,"Napalm");
		AddMenuItem(Bombshopveh,1,"$500");
		AddMenuItem(Bombshopveh,0,"Dinamite");
		AddMenuItem(Bombshopveh,1,"$450");
		AddMenuItem(Bombshopveh,0,"Sair");
	}
	OpcoesAlarme = CreateMenu("Seu Carro:",1,30.0,140.0,220.0,0.0);
	if(IsValidMenu(OpcoesAlarme)){
		AddMenuItem(OpcoesAlarme,0,"Trancar");
		AddMenuItem(OpcoesAlarme,0,"Destrancar");
		AddMenuItem(OpcoesAlarme,0,"Alarmar e impossivel dirigir");
		AddMenuItem(OpcoesAlarme,0,"Avisar a policia sem alarmar");
		AddMenuItem(OpcoesAlarme,0,"Desativar todos os alarmes");
		AddMenuItem(OpcoesAlarme,0,"Sair");
	}
	Bar = CreateMenu("Comes & Bebes",2,30.0,140.0,220.0,0.0);
	if(IsValidMenu(Bar)){
	    SetMenuColumnHeader(Bar,0,"Cardapio");
	    SetMenuColumnHeader(Bar,1,"Valor");
		AddMenuItem(Bar,0,"Guarana KUAT");
		AddMenuItem(Bar,1,"R$5");
		AddMenuItem(Bar,0,"Suco");
		AddMenuItem(Bar,1,"R$8");
		AddMenuItem(Bar,0,"Cerveja");
		AddMenuItem(Bar,1,"R$10");
		AddMenuItem(Bar,0,"Pinga");
		AddMenuItem(Bar,1,"R$15");
		AddMenuItem(Bar,0,"Whisky");
		AddMenuItem(Bar,1,"R$25");
		AddMenuItem(Bar,0,"X-Bacon");
		AddMenuItem(Bar,1,"R$10");
		AddMenuItem(Bar,0,"X-Burguer");
		AddMenuItem(Bar,1,"R$5");
		AddMenuItem(Bar,0,"X-Salada");
		AddMenuItem(Bar,1,"R$6");
		AddMenuItem(Bar,0,"Sair");
	}
	BancoOpc = CreateMenu("Opoes do banco",1,30.0,140.0,220.0,0.0);
	if(IsValidMenu(BancoOpc)){
		AddMenuItem(BancoOpc,0,"Sacar");
		AddMenuItem(BancoOpc,0,"Depositar");
		AddMenuItem(BancoOpc,0,"Ver Extrato");
		AddMenuItem(BancoOpc,0,"Pagar D¢vidas");
        AddMenuItem(BancoOpc,0,"Fazer Emprstimo");
        AddMenuItem(BancoOpc,0,"Fazer Aplicao");
        AddMenuItem(BancoOpc,0,"Retirar Aplicao");
		AddMenuItem(BancoOpc,0,"Sair");
	}
	BancoOpc2 = CreateMenu("Opoes do saque",1,30.0,140.0,220.0,0.0);
	if(IsValidMenu(BancoOpc2)){
		AddMenuItem(BancoOpc2,0,"Dinheiro pessoal");
		AddMenuItem(BancoOpc2,0,"Trabalho");
		AddMenuItem(BancoOpc2,0,"Residencia");
		AddMenuItem(BancoOpc2,0,"Empresa");
		AddMenuItem(BancoOpc2,0,"Sair");
	}
	VendoDrogas = CreateMenu("Drogas:",2,2,150,100,20);
	if(IsValidMenu(VendoDrogas)){
		AddMenuItem(VendoDrogas,0,"Maconha");
		AddMenuItem(VendoDrogas,0,"Heroina");
		AddMenuItem(VendoDrogas,0,"Cocaina");
		AddMenuItem(VendoDrogas,0,"Sair");
	}
	QuantidadeDrog = CreateMenu("Quantidade:",2,2,150,100,20);
	if(IsValidMenu(QuantidadeDrog)){
		AddMenuItem(QuantidadeDrog,0,"1");
		AddMenuItem(QuantidadeDrog,0,"2");
		AddMenuItem(QuantidadeDrog,0,"3");
		AddMenuItem(QuantidadeDrog,0,"Sair");
	}
	CargaGeral = CreateMenu("Cargas:",1,2,150,100,20);
	if(IsValidMenu(CargaGeral)){
		AddMenuItem(CargaGeral,0,"Material em Geral");
		AddMenuItem(CargaGeral,0,"Combustivel");
		AddMenuItem(CargaGeral,0,"Drogas");
		AddMenuItem(CargaGeral,0,"Roupas");
		AddMenuItem(CargaGeral,0,"Sair");
	}

	CPD_First = CreateMenu("Profisso",2,2,150,100,20);
	if(IsValidMenu(CPD_First)){
	    SetMenuColumnHeader(CPD_First,0,"Nome");
	    SetMenuColumnHeader(CPD_First,1,"Salrio");
	    AddMenuItem(CPD_First,0,"Desempregado");
		AddMenuItem(CPD_First,1,"$350");
		AddMenuItem(CPD_First,0,"Barman");
		AddMenuItem(CPD_First,1,"$800");
		AddMenuItem(CPD_First,0,"Entregador de Pizza");
		AddMenuItem(CPD_First,1,"$1400");
		AddMenuItem(CPD_First,0,"Pescador");
		AddMenuItem(CPD_First,1,"$1400");
		AddMenuItem(CPD_First,0,"Motorista de Onibus");
		AddMenuItem(CPD_First,1,"$1500");
		AddMenuItem(CPD_First,0,"Taxista");
		AddMenuItem(CPD_First,1,"$1400");
		AddMenuItem(CPD_First,0,"Mototaxista");
		AddMenuItem(CPD_First,1,"$1400");
		AddMenuItem(CPD_First,0,"Pedreira");
		AddMenuItem(CPD_First,1,"$1500");
	}
	CPD_Second = CreateMenu("Profisso",2,2,150,100,20);
	if(IsValidMenu(CPD_Second)){
		SetMenuColumnHeader(CPD_Second,0,"Nome");
	    SetMenuColumnHeader(CPD_Second,1,"Salrio");
	    AddMenuItem(CPD_Second,0,"Taxi Aereo");
	    AddMenuItem(CPD_Second,1,"$1500");
	    AddMenuItem(CPD_Second,0,"Segurana");
	    AddMenuItem(CPD_Second,1,"$1000");
	    AddMenuItem(CPD_Second,0,"Assassino");
	    AddMenuItem(CPD_Second,1,"$400");
	    AddMenuItem(CPD_Second,0,"Motorista Particular");
	    AddMenuItem(CPD_Second,1,"$2000");
		AddMenuItem(CPD_Second,0,"Jornalista");
	    AddMenuItem(CPD_Second,1,"$1500");
	    AddMenuItem(CPD_Second,0,"Lixeiro");
	    AddMenuItem(CPD_Second,1,"$1000");
	    AddMenuItem(CPD_Second,0,"Agricultor");
	    AddMenuItem(CPD_Second,1,"$1200");
	    AddMenuItem(CPD_Second,0,"Caminhoneiro");
	    AddMenuItem(CPD_Second,1,"$800");
	    AddMenuItem(CPD_Second,0,"Transporte de Valores");
	    AddMenuItem(CPD_Second,1,"$1200");
	    AddMenuItem(CPD_Second,0,"Prostituta");
	    AddMenuItem(CPD_Second,1,"$800");
	    AddMenuItem(CPD_Second,0,"Traficante");
	    AddMenuItem(CPD_Second,1,"$1000");
	}
	CPD_Third = CreateMenu("Profisso",2,2,150,100,20);
	if(IsValidMenu(CPD_Third)){
		SetMenuColumnHeader(CPD_Third,0,"Nome");
	    SetMenuColumnHeader(CPD_Third,1,"Salrio");
	    AddMenuItem(CPD_Third,0,"Frentista");
	    AddMenuItem(CPD_Third,1,"$1200");
	    AddMenuItem(CPD_Third,0,"Vendedor de Armas");
	    AddMenuItem(CPD_Third,1,"$1400");
	    AddMenuItem(CPD_Third,0,"Mecanico");
	    AddMenuItem(CPD_Third,1,"$1000");
	    AddMenuItem(CPD_Third,0,"Cop Militar");
	    AddMenuItem(CPD_Third,1,"$1200");
	    AddMenuItem(CPD_Third,0,"Paramdico");
	    AddMenuItem(CPD_Third,1,"$1000");
	    AddMenuItem(CPD_Third,0,"Assaltante");
	    AddMenuItem(CPD_Third,1,"$600");
	    AddMenuItem(CPD_Third,0,"Cop Rodoviario");
	    AddMenuItem(CPD_Third,1,"$1400");
	    AddMenuItem(CPD_Third,0,"Contrabandista");
	    AddMenuItem(CPD_Third,1,"$800");
	    AddMenuItem(CPD_Third,0,"Receita Federal");
	    AddMenuItem(CPD_Third,1,"$2000");
	    AddMenuItem(CPD_Third,0,"Locador de Carros");
	    AddMenuItem(CPD_Third,1,"$1000");
	    AddMenuItem(CPD_Third,0,"Instrutor de Direo");
	    AddMenuItem(CPD_Third,1,"$850");
	    AddMenuItem(CPD_Third,0,"Cop Narcoticos");
	    AddMenuItem(CPD_Third,1,"$1800");
	}

	CPD_Fourth = CreateMenu("Profisso",2,2,150,100,20);
	if(IsValidMenu(CPD_Fourth)){
		SetMenuColumnHeader(CPD_Fourth,0,"Nome");
	    SetMenuColumnHeader(CPD_Fourth,1,"Salrio");
	    AddMenuItem(CPD_Fourth,0,"Corretor de seguros");
	    AddMenuItem(CPD_Fourth,1,"$1400");
	    AddMenuItem(CPD_Fourth,0,"Lider de Trfico");
	    AddMenuItem(CPD_Fourth,1,"$2000");
	    AddMenuItem(CPD_Fourth,0,"Advogado");
	    AddMenuItem(CPD_Fourth,1,"$1000");
	    AddMenuItem(CPD_Fourth,0,"Cop Elite/SWAT");
	    AddMenuItem(CPD_Fourth,1,"$2000");
	}

	CPD_Fifth = CreateMenu("Profisso",2,2,150,100,20);
	if(IsValidMenu(CPD_Fifth)){
		SetMenuColumnHeader(CPD_Fifth,0,"Nome");
	    SetMenuColumnHeader(CPD_Fifth,1,"Salrio");
	    AddMenuItem(CPD_Fifth,0,"Exercito");
	    AddMenuItem(CPD_Fifth,1,"$4000");
	    AddMenuItem(CPD_Fifth,0,"Corretor");
	    AddMenuItem(CPD_Fifth,1,"$350");
	    AddMenuItem(CPD_Fifth,0,"Vendedor de Carros");
	    AddMenuItem(CPD_Fifth,1,"$350");
	    AddMenuItem(CPD_Fifth,0,"Juiz");
	    AddMenuItem(CPD_Fifth,1,"$3000");
	}

	CPD_Sixth = CreateMenu("Profisso",2,2,150,100,20);
	if(IsValidMenu(CPD_Sixth)){
		SetMenuColumnHeader(CPD_Sixth,0,"Nome");
	    SetMenuColumnHeader(CPD_Sixth,1,"Salrio");
	    AddMenuItem(CPD_Sixth,0,"Delegado");
	    AddMenuItem(CPD_Sixth,1,"$4500");
	}

	//Objetos Auto-escola
	CreateObject(1238, 1801.204102, -2039.499512, 12.850002, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1802.588989, -2039.746338, 12.851125, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1781.893799, -2020.181763, 12.798002, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1783.344727, -2020.545410, 12.785471, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1785.194336, -2020.852661, 12.786898, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1787.009399, -2021.287964, 12.788723, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1788.512207, -2021.978394, 12.796572, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1782.145142, -2026.361938, 12.803642, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1783.982422, -2027.169922, 12.806655, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1785.295532, -2028.530884, 12.811297, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1785.799438, -2030.528931, 12.817763, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1789.897339, -2023.202026, 12.800632, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1790.991455, -2024.516602, 12.799944, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1791.009155, -2026.243530, 12.805431, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1791.240234, -2027.927490, 12.810834, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1791.393066, -2029.639771, 12.816306, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1791.299316, -2031.213135, 12.821278, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1786.086548, -2032.447754, 12.823925, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1786.505859, -2034.307129, 12.829929, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1787.566040, -2035.928833, 12.835338, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1789.317871, -2036.870117, 12.838754, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1796.921265, -2033.386475, 12.829550, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1791.195923, -2037.207642, 12.840282, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1793.254272, -2036.817261, 12.839546, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1791.400879, -2022.925293, 12.805038, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1796.382568, -2034.677856, 12.833519, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1796.848999, -2031.981567, 12.825073, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1796.609619, -2029.139160, 12.815990, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1796.681885, -2027.382446, 12.820515, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1792.750000, -2021.701538, 12.808992, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1794.129272, -2021.274048, 12.813034, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1796.046387, -2021.083862, 12.818651, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1797.945679, -2021.199829, 12.824218, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1799.659912, -2022.042358, 12.829241, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1801.110962, -2023.458252, 12.833496, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1802.074219, -2031.384277, 12.836315, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1802.047363, -2027.271729, 12.836237, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1802.038940, -2028.650757, 12.836212, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1802.046631, -2030.079468, 12.836235, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1799.863525, -2036.586182, 12.840427, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1801.527222, -2037.319214, 12.843159, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1803.593994, -2037.380005, 12.843859, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1805.268799, -2036.813477, 12.842470, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1806.919189, -2035.852783, 12.850513, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1807.848267, -2034.505859, 12.853235, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1808.010010, -2032.711182, 12.853710, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1808.021240, -2030.948364, 12.853745, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1808.099976, -2029.338745, 12.853972, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1808.128906, -2027.839844, 12.854059, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1808.153931, -2025.434937, 12.854133, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1806.340820, -2020.720215, 12.848819, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1811.948608, -2020.740356, 12.867365, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1804.853149, -2021.300415, 12.844460, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1803.535889, -2022.358276, 12.840599, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1802.734741, -2023.533325, 12.838251, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1809.504395, -2025.368408, 12.858090, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1810.783203, -2025.330811, 12.863096, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1810.711060, -2020.742065, 12.862831, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1807.816284, -2020.517822, 12.853143, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1811.984009, -2025.365601, 12.867494, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1809.219116, -2020.570313, 12.857367, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1802.014404, -2024.683472, 12.836141, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1808.122559, -2026.637451, 12.854041, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1802.039917, -2026.032471, 12.836216, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1794.981079, -2036.052002, 12.837538, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1798.530884, -2035.673828, 12.837204, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1797.521484, -2034.509766, 12.833261, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1796.714233, -2030.510864, 12.820371, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1804.268799, -2040.190430, 12.852946, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1805.923584, -2040.304199, 12.853710, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1807.644897, -2040.656738, 12.855249, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1809.008423, -2041.482056, 12.858203, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1810.321289, -2042.502319, 12.861763, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1811.429932, -2043.540161, 12.872149, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1812.079956, -2045.313721, 12.871353, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1812.010620, -2047.065430, 12.871441, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1809.966187, -2050.147461, 12.873938, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1808.550537, -2051.330811, 12.875666, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1806.803955, -2052.094238, 12.877796, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1805.096436, -2052.402588, 12.879881, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1803.071899, -2052.508057, 12.882355, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1801.269409, -2052.416748, 12.884556, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1811.162109, -2048.881104, 12.872478, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1804.228516, -2046.519287, 12.880941, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1802.216309, -2046.598755, 12.879358, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1800.641602, -2046.568726, 12.878866, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1799.001587, -2046.303467, 12.877560, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1796.197876, -2046.144409, 12.876331, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1797.589966, -2046.322998, 12.877281, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1796.033936, -2047.975708, 12.882553, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1795.825317, -2049.866699, 12.891201, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1795.774170, -2051.532959, 12.891264, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1797.459351, -2051.976563, 12.889206, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1799.098999, -2052.164551, 12.887205, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1799.024780, -2039.382813, 12.849102, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1796.825562, -2039.410034, 12.848650, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1794.811646, -2039.253540, 12.847662, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1773.959717, -2027.003174, 12.803680, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1776.050171, -2026.943604, 12.804001, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1774.951660, -2026.389282, 12.801972, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1773.730591, -2028.059448, 12.806976, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1776.413330, -2028.022583, 12.807513, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1774.977539, -2031.121094, 12.817000, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1774.968750, -2034.834473, 12.828785, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1775.009033, -2038.591431, 12.840725, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1775.084351, -2042.328735, 12.852606, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1775.043945, -2046.499390, 12.865835, 0.0000, 0.0000, 0.0000);
	CreateObject(1238, 1775.239868, -2050.690186, 12.886753, 0.0000, 0.0000, 0.0000);

	Gates[0] = CreateObject(968, 1544.687866, -1630.546875, 13.165515, 0, 269.4727, 269.9995);
	Gates[1] = CreateObject(968, 2238.198730, 2450.429932, 10.597424, 0, 269.4727, 269.9996);
	Gates[2] = CreateObject(968, -1572.189331, 658.876709, 6.887374, 0, 269.4727, 269.9995);
	Gates[3] = CreateObject(968, -1701.452271, 687.616211, 24.592068, 0, 269.4727, 269.9995);

	Portao[0] =	CreateObject(10184, 1592.921753, -1638.546753, 14.789343, 0, 0, 90);//fechado LS
	Portao[1] =	CreateObject(10184, 2334.678711, 2443.014404, 7.259488, 0, 0, 326.25);//fechado LV
	Portao[2] =	CreateObject(10184, 2294.276123, 2503.250488, 4.719362, 0, 0, 0);//fechado LV
	Portao[3] = CreateObject(10184,-1631.699219, 688.715637, 8.709263, 0, 0, 270);//fechado SF

    portaoauto = CreateObject(980,1812.601,-2071.738,15.326,0.0,0.0,90.241);

    CreateObject(980,681.7346,-450.7061,-25.6099,0.0,0.0,180.0000);

    CreateObject(980,313.6470,-127.6511,1004.0547,0.0,0.0,271.1015);

    CreateObject(980,2530.0852,-1680.9191,1015.4986,0.0,0.0,182.9398);

//-----------------------------------------------------------------------------------------------------

    SetTimer("Radar", 400, 1);
	SetTimer("Tempo", 1000, 1);
	SetTimer("Timers", 1000, 1);
	SetTimer("Areas", 1000, 1);
	SetTimer("StreamTimer",1000, 1);
	SetTimer("GranaInfo", 1000, 1);
	SetTimer("Relogio",1000,1);
	SetTimer("VelocimetroALL1",1000,1);
	SetTimer("Data",1000,1);
	SetTimer("HigieneAll",1000,1);
	SetTimer("GatesCoordChecker", 2000, 1);
	SetTimer("VehicleDamnification", 3000, 1);
	SetTimer("Balada", 5000, 1);
	SetTimer("PickeRadar",5000,1);
	SetTimer("FuelDoencaHigiene",20000,1);
	SetTimer("AnunciarPropeComu",60000,1);
	SetTimer("SavePCVPJGO", 60000, 1);
	SetTimer("FomeDesmancheDoencaGarganBebi",100000,1);
	SetTimer("Anunciar",900000,1);
	SetTimer("SubMissoes",1200000,1);
	

	if(!fexist("Utilidades/life.tmp")){
	    new File:lf = fopen("Utilidades/life.tmp",io_write);
	    fclose(lf);
	    CriarPastaUtilitarios("Utilidades/utilitarios.cfg");
 	    CreateStartupVehicleFiles();
	    CriarPlacas();
	    CreatePropertiesFiles();
	} else {
	    LoadPastaUtilitarios("Utilidades/utilitarios.cfg");
 		LoadColors();
	}
	CarregarPastaGangZones("Utilidades/zones.rpg");
	LoadCell("Utilidades/celulares.rpg");
	LoadGangues();
	LoadJornais();
	LoadRcars("Utilidades/carrosrpg.rpg");
  	for(new p=0;p<MAX_CASAS;p++){ LoadPickup(p); }
 	for(new p=0;p<MAX_PROPERTIES;p++){ LoadPropertie(p); }
 	for(new p=0;p<MAX_VEHICLES;p++){ LoadVehicle(p); }
 	CreatePickupsHouses();
    SetWorldTime(HoraJogo);
	return 1;
}
public CancelarContinuacaoPos(playerid){
	KillTimer(TimerContinuacaoPos[playerid]);
    pStats[playerid][ContinuarPos] = 0;
    SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "OK, você não aceitou continuar de onde parou!");
}
stock CreatePropertiesFiles()
{
    new str[256],File:propfile, string[256];
	new p = 0;
	while(p < MAX_PROPERTIES){
		set(str,PropertieFile(p));
		set(propStats[p][Dono1],"NONE");
		set(propStats[p][Dono2],"NONE");
		set(propStats[p][Trabalhador1],"NONE");
		set(propStats[p][Trabalhador2],"NONE");
		set(propStats[p][Trabalhador3],"NONE");
		set(propStats[p][Trabalhador4],"NONE");
		set(propStats[p][Trabalhador5],"NONE");
		set(propStats[p][Trabalhador6],"NONE");
		set(propStats[p][Trabalhador7],"NONE");
		set(propStats[p][Socio1],"NONE");
		set(propStats[p][Socio2],"NONE");
		set(propStats[p][Socio3],"NONE");
		propStats[p][Lucro] = 0;
		propStats[p][Prejuizo] = 0;
		propStats[p][Investimento] = 0;
		propStats[p][SemanaPassada] = 0;
		propStats[p][SemanaRetrasada] = 0;
		propfile = fopen(str,io_write);
		fclose(propfile);
		format(string,sizeof(string),"Criando arquivo de propriedade '%s' ... Concluído",str); writelog(string);
		p++;
		set(str,PropertieFile(p));
		format(string,sizeof(string),"Próximo arquivo de propriedade a ser criado: '%s'",str); writelog(string);
	}
}
stock SetGasDerby()
{
	new string[256];
	if(vStats[Derby1][gasolina] != -1)
	{
	    vStats[Derby1][gasolina] = -1;
		format(string,sizeof(string),"Gasolina do arquivo de Derby1 setada para -1");
		writelog(string);
	}
    if(vStats[Derby2][gasolina] != -1)
	{
	    vStats[Derby2][gasolina] = -1;
		format(string,sizeof(string),"Gasolina do arquivo de Derby2 setada para -1");
		writelog(string);
	}
	if(vStats[Derby3][gasolina] != -1)
	{
	    vStats[Derby3][gasolina] = -1;
		format(string,sizeof(string),"Gasolina do arquivo de Derby3 setada para -1");
		writelog(string);
	}
	if(vStats[Derby4][gasolina] != -1)
	{
	    vStats[Derby4][gasolina] = -1;
		format(string,sizeof(string),"Gasolina do arquivo de Derby4 setada para -1");
		writelog(string);
	}
	if(vStats[Derby5][gasolina] != -1)
	{
	    vStats[Derby5][gasolina] = -1;
		format(string,sizeof(string),"Gasolina do arquivo de Derby5 setada para -1");
		writelog(string);
	}
	if(vStats[Derby6][gasolina] != -1)
	{
	    vStats[Derby6][gasolina] = -1;
		format(string,sizeof(string),"Gasolina do arquivo de Derby6 setada para -1");
		writelog(string);
	}
	if(vStats[Derby7][gasolina] != -1)
	{
	    vStats[Derby7][gasolina] = -1;
		format(string,sizeof(string),"Gasolina do arquivo de Derby7 setada para -1");
		writelog(string);
	}
	if(vStats[Derby8][gasolina] != -1)
	{
	    vStats[Derby8][gasolina] = -1;
		format(string,sizeof(string),"Gasolina do arquivo de Derby8 setada para -1");
		writelog(string);
	}
	if(vStats[Derby9][gasolina] != -1)
	{
	    vStats[Derby9][gasolina] = -1;
		format(string,sizeof(string),"Gasolina do arquivo de Derby9 setada para -1");
		writelog(string);
	}
	if(vStats[Derby10][gasolina] != -1)
	{
	    vStats[Derby10][gasolina] = -1;
		format(string,sizeof(string),"Gasolina do arquivo de Derby10 setada para -1");
		writelog(string);
	}
}
stock SetZoneForGang(zoneid,gangname[])
{
	set(GangControlZone[zoneid],gangname);
	CreateGangZonesForAll();
}
stock GetGangColor(gangname[])
{
	new gangfile[256];
	set(gangfile,GangFile(gangname));
	if(!fexist(gangfile)) return 0xFFFFFFAA;
	return gStats[GetGangID(gangname)][GangColor];
}
stock CreateGangZonesForPlayer(playerid)
{
	new z;
	while(z < sizeof(zones)){
		if(!compare(GangControlZone[z],"NONE")){
		    GZ[z] = GangZoneCreate(zones[z][zoneminx],zones[z][zoneminy],zones[z][zonemaxx],zones[z][zonemaxy]);
		    GangZoneShowForPlayer(playerid, GZ[z], gStats[GetGangID(GangControlZone[z])][GangColor]);
		}
		z++;
	}
}
stock CreateGangZonesForAll()
{
	for(new z = 0; z < sizeof(zones); z++){
		if(!compare(GangControlZone[z],"NONE")){
		    GangZoneDestroy(GZ[z]);
		    GZ[z] = GangZoneCreate(zones[z][zoneminx],zones[z][zoneminy],zones[z][zonemaxx],zones[z][zonemaxy]);
			GangZoneShowForAll(GZ[z], gStats[GetGangID(GangControlZone[z])][GangColor]);
		}
	}
}
stock IsPlayerInGangTerritory(playerid)
{
	if(compare(GangControlZone[GetPlayerZone(playerid)],pStats[playerid][GangueNome])) return true;
	return false;
}
stock SalvarPastaGangZones(pattern[])
{
	new File:zonesfile = fopen(pattern,io_write),string[256];
	for(new s = 0; s < sizeof(zones); s++){
		if(!strlen(GangControlZone[s])) set(GangControlZone[s],"NONE");
	    format(string,sizeof(string),"%s;\r\n",GangControlZone[s]);
	    fwrite(zonesfile,string);
	}
    fclose(zonesfile);
}
stock CarregarPastaGangZones(pattern[])
{
	if(!fexist(pattern)) SalvarPastaGangZones(pattern);
	new File:zonesfile = fopen(pattern,io_read),tmp[256],index,s;
	while(fread(zonesfile,tmp,sizeof(tmp)))
	{
		set(GangControlZone[s],strtok(tmp,index,';'));
	    s++;
	    index = 0;
	}
	fclose(zonesfile);
}
stock CriarPastaUtilitarios(pattern[])
{
	if(fexist(pattern)){
	writelog("Criando pasta de utilitários do gamemode... A pasta não foi criada pois já existia!");
	return 0;
	} else {
	new File:f = fopen(pattern,io_write);
	fclose(f);
	writelog("Criando pasta de utilitários do gamemode... Arquivo criado com sucesso!");
 	DiaJogo = 2;
	MesJogo = 5;
	AnoJogo = 2008;
	ValorDia = 4;
	PrecoGas = 1;
	ValorTV = 2300;
	ValorRadio = 400;
	ValorGeladeira = 1800;
	ValorFogao = 1500;
	ValorCelular = 500;
	ValorTelefone = 300;
	ValorFrango = 30;
	ValorPeixe = 40;
	ValorPizza = 25;
	ValorSalada = 15;
	ValorRefrigerante = 12;
	ValorSuco = 18;
	ValorCarne = 35;
	ValorStrogonoff = 45;
	ValorCamarao = 50;
	ValorLinguica = 30;
	LastPN = 1000;
	LastPhone = 30000;
	LastGNG = 1;
	LastJN = 1;
	LastCasa = 0;
	HoraJogo = 2;
	MinutoJogo = 0;
	CarPrice[0] = 1000;
	CarPrice[1] = 1000;
	CarPrice[2] = 1000;
	CarPrice[3] = 1000;
	CarPrice[4] = 1000;
	CarPrice[5] = 1000;
	CarPrice[6] = 1000;
	CarPrice[7] = 1000;
	writelog("Dados: LastCasa, LastGNG, LastJN, LastPN, LastPhone, Dia da semana, Hora, Minuto, Segundo, Dia, Mes e Ano foram setados na pasta de utilitários do gamemode...");
	return 1;
	}
}
stock SavePastaUtilitarios(pattern[])
{
	if(!fexist(pattern)){
		writelog("Salvando pasta de utilitários do gamemode... A pasta não foi encontrada! Devido à isso estamos criando uma nova!");
		CriarPastaUtilitarios(pattern);
	}
	new strsave[256];
	format(strsave,sizeof(strsave),"%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d",
	HoraJogo,
	MinutoJogo,
	DiaJogo,
	MesJogo,
	AnoJogo,
	ValorDia,
	PrecoGas,
	ValorTV,
	ValorRadio,
	ValorGeladeira,
	ValorFogao,
	ValorCelular,
	ValorFrango,
	ValorPeixe,
	ValorPizza,
	ValorSalada,
	ValorRefrigerante,
	ValorSuco,
	ValorCarne,
	ValorStrogonoff,
	ValorCamarao,
	ValorLinguica,
	ValorTelefone,
	LastPhone,
	LastPN,
	LastGNG,
	LastJN,
	LastCasa,
	CarPrice[0],
	CarPrice[1],
	CarPrice[2],
	CarPrice[3],
	CarPrice[4],
	CarPrice[5],
	CarPrice[6],
	CarPrice[7]
	);
	new File:f = fopen(pattern,io_write);
	fwrite(f,strsave);
	fclose(f);
}
stock LoadPastaUtilitarios(pattern[])
{
	if(!fexist(pattern)){
		writelog("Carregando pasta de utilitários do gamemode... A pasta não foi encontrada! Devido à isso estamos criando uma nova!");
		CriarPastaUtilitarios(pattern);
	}
	new File:f,tmp[256],index;
	f = fopen(pattern,io_read);
	while(fread(f,tmp,sizeof(tmp))){
		HoraJogo = strval(strtok(tmp,index));
		MinutoJogo = strval(strtok(tmp,index));
		DiaJogo = strval(strtok(tmp,index));
		MesJogo = strval(strtok(tmp,index));
		AnoJogo = strval(strtok(tmp,index));
		ValorDia = strval(strtok(tmp,index));
		PrecoGas = strval(strtok(tmp,index));
		ValorTV = strval(strtok(tmp,index));
		ValorRadio = strval(strtok(tmp,index));
		ValorGeladeira = strval(strtok(tmp,index));
		ValorFogao = strval(strtok(tmp,index));
		ValorCelular = strval(strtok(tmp,index));
 		ValorFrango = strval(strtok(tmp,index));
		ValorPeixe = strval(strtok(tmp,index));
		ValorPizza = strval(strtok(tmp,index));
		ValorSalada = strval(strtok(tmp,index));
		ValorRefrigerante = strval(strtok(tmp,index));
		ValorSuco = strval(strtok(tmp,index));
		ValorCarne = strval(strtok(tmp,index));
		ValorStrogonoff = strval(strtok(tmp,index));
		ValorCamarao = strval(strtok(tmp,index));
		ValorLinguica = strval(strtok(tmp,index));
		ValorTelefone = strval(strtok(tmp,index));
		LastPhone = strval(strtok(tmp,index));
		LastPN = strval(strtok(tmp,index));
		LastGNG = strval(strtok(tmp,index));
		LastJN = strval(strtok(tmp,index));
		LastCasa = strval(strtok(tmp,index));
		CarPrice[0] = strval(strtok(tmp,index));
		CarPrice[1] = strval(strtok(tmp,index));
		CarPrice[2] = strval(strtok(tmp,index));
		CarPrice[3] = strval(strtok(tmp,index));
		CarPrice[4] = strval(strtok(tmp,index));
		CarPrice[5] = strval(strtok(tmp,index));
		CarPrice[6] = strval(strtok(tmp,index));
		CarPrice[7] = strval(strtok(tmp,index));
	}
	writelog("Carregando pasta de utilitários do gamemode... Concluído!");
}

stock CreatePickupsHouses()
{
	new str[256];
    for(new i=0; i<MAX_CASAS; i++){
        str = PickupFile(i);
        if(fexist(str)){
        	CreatePickup(1272,1,pckStats[i][pX],pckStats[i][pY],pckStats[i][pZ]);
		}
		else break;
	}
}
stock CreateStartupVehicleFiles()
{
	new File:vfile,tmp[256];
	for(new v=0;v<QTCARS+1;v++){
	    set(tmp,VehicleFile(v));
	    if(fexist(tmp)) return 1;
		vfile = fopen(tmp,io_write);
		fclose(vfile);
		switch(GetVehicleModel(v)){
		    case 481,509,510,594:
	        {
	                vStats[v][gasolina] = -1;
	                set(vStats[v][VDono],"Servidor");
	                set(vStats[v][VChave],"Servidor");
					vStats[v][Confiscado] = 0;
					vStats[v][Dividas] = 0;
			}
			default:
		    {
		            vStats[v][gasolina] = 100;
	                set(vStats[v][VDono],"Servidor");
	                set(vStats[v][VChave],"Servidor");
					vStats[v][Confiscado] = 0;
					vStats[v][Dividas] = 0;
			}
		}
	}
	writelog("Criando arquivos dos veículos... Arquivos criados com sucesso!");
	return 1;
}
stock GetValueKey(string[])
{
    new tmp[256];
	tmp[0]=0;
	new sf = strfind(string,"=",true);
	if(sf == -1) return tmp;
	strmid(tmp,string,0,sf);
	return tmp;
}
stock GetKeyValue(string[])
{
    new tmp[256];
	tmp[0]=0;
	new sf = strfind(string,"=",true);
	if(sf == -1) return tmp;
	new sf2 = strfind(string,"\r",true);
	if(sf2==-1){
		strmid(tmp,string,sf+1,strlen(string));
	}
	else{
        strmid(tmp,string,sf+1,sf2);
	}
	return tmp;
}
stock SaveCell(pattern[])
{
	if(LastPN == 1000) return 0;
	new string[256],File:cellfile = fopen(pattern,io_write);
	for(new i = 1000; i < LastPN; i++)
	{
	    if(i == LastPN) break;
		format(string,sizeof(string),"%d=%s;\r\n",i,CelularesNum[i-1000]);
		fwrite(cellfile,string);
	}
	fclose(cellfile);
	return 1;
}
stock LoadCell(pattern[])
{
	if(!fexist(pattern)){
		new File:cfile=fopen(pattern,io_write);
		fclose(cfile);
	}
    if(LastPN == 1000) return 0;
	new File:cellfile = fopen(pattern,io_read),tmp[256],c,index,v[256];
	while(fread(cellfile,tmp,sizeof(tmp)))
	{
		c = strval(GetValueKey(tmp));
		if(c == LastPN) break;
	    v = strtok(tmp,index,';');
		set(CelularesNum[c - 1000],GetKeyValue(v));
		index = 0;
	}
	fclose(cellfile);
	return 1;
}
stock LoadRcars(pattern[])
{
	new tmp[256],tmp2[256],File:temp,modelid,Float:X,Float:Y,Float:Z,Float:ang,Cor1,Cor2,resveh;
	if(!fexist(pattern)){
	    new msg[256];
	    format(msg,256,"Carregando lista de veículos... Arquivo %s não encontrado.\nPara o salvamento de veículos, o arquivo %s foi criado.",pattern,pattern);
	    writelog(msg);
		new File:vfile = fopen(pattern,io_write);
		fclose(vfile);
		return 1;
	}
    new index;
	temp = fopen(pattern, io_readwrite);
	while(fread(temp, tmp, sizeof(tmp), false)) {
		index = 0;
		modelid    = strval(strtok(tmp, index));
		X          = Float:floatstr(strtok(tmp, index));
		Y          = Float:floatstr(strtok(tmp, index));
		Z          = Float:floatstr(strtok(tmp, index));
		ang        = Float:floatstr(strtok(tmp, index));
		Cor1       = strval(strtok(tmp, index));
		Cor2       = strval(strtok(tmp, index));
		QtCars++;
		resveh = CreateVehicle(modelid, X, Y, Z, ang, Cor1, Cor2, -1);
		if(HaveCarPos(resveh)){
		    new Float:x,Float:y,Float:z,Float:angle;
		    DestroyVehicle(resveh);
		    GetCarPos(resveh,x,y,z,angle);
		    resveh = CreateVehicle(modelid, x, y, z, angle, Cor1, Cor2, -1);
		}
		LastCar = resveh;
		set(tmp2,VehicleFile(resveh));
		if(!fexist(tmp2)){
		    new File:temp2 = fopen(tmp2,io_write);
		    fclose(temp2);
		    set(vStats[resveh][VDono],"Servidor");
		    new strplaca[256];
			format(strplaca,sizeof(strplaca),"RVL %d",resveh);
			set(vStats[resveh][VPlaca],strplaca);
			vStats[resveh][TemAlarme] = 0;
			vStats[resveh][Vendendo] = 0;
			vStats[resveh][PrecoVenda] = 0;
			switch(modelid){
			    case 481,509,510,594,599,523:
		        {
         			vStats[resveh][Dividas] = 0;
		            vStats[resveh][Confiscado] = 0;
		            vStats[resveh][gasolina] = -1;
				}
				default:
			    {
			        vStats[resveh][Dividas] = 0;
		            vStats[resveh][Confiscado] = 0;
		            vStats[resveh][gasolina] =100;
				}
			}
		} else {
			if(vStats[resveh][Color1] != 0 && vStats[resveh][Color2] != 0){
				ChangeVehicleColor(resveh,vStats[resveh][Color1],vStats[resveh][Color2]);
			}
		}
	}
	fclose(temp);
	writelog("Carregando lista de veículos... OK!");
	format(tmp,sizeof(tmp),"%d veículos carregados.",QtCars);
	writelog(tmp);
	ApplyTuningForAllVehicles();
	ApplyColorForAllVehicles();
	return 1;
}
stock HaveCarPos(vehicleid)
{
   	if(vStats[vehicleid][HavePos] == 1) return true;
	return false;
}
stock GetCarPos(vehicleid,&Float:X,&Float:Y,&Float:Z,&Float:ang)
{
    if(vStats[vehicleid][HavePos] == 1)
	{
		X = vStats[vehicleid][CarPosX];
		Y = vStats[vehicleid][CarPosY];
		Z = vStats[vehicleid][CarPosZ];
		ang  = vStats[vehicleid][CarPosAng];
	}
	return true;
}
stock ApplyColorForAllVehicles(){
	new pattern[256];
    new contagem = 1;
	set(pattern,VehicleFile(contagem));
	while(fexist(pattern)){
	    ApplyColorForVehicle(contagem);
	    contagem++;
	    set(pattern,VehicleFile(contagem));
	}
}
stock ApplyTuningForAllVehicles(){
	new pattern[256];
    new contagem = 1;
	set(pattern,VehicleFile(contagem));
	while(fexist(pattern)){
	    ApplyTuningForVehicle(contagem);
	    ApplyPlacaForVehicle(contagem);
	    contagem++;
	    set(pattern,VehicleFile(contagem));
	}
}
public DesarmandoDrogas(playerid)
{
    if(IsPlayerInAnyVehicle(playerid)){
  		DrogasPlantadas[GetPlayerVehicleID(playerid)] = 0;
		TogglePlayerControllable(playerid,1);
		DesarmandoAsDrogas[playerid] = 0;
		SendClientMessage(playerid, COLOR_COP_NARCOTICOS, "Drogas desarmadas!");
		SendClientMessage(playerid, COLOR_COP_NARCOTICOS, "Calma, não acabou ainda, leve esse veículo para a delegacia, ele será confiscado!");
		SendClientMessage(playerid, COLOR_WHITE, "Siga o Checkpoint em seu radar...");
		new rand = random(5);
		DisablePlayerCheckpoint(playerid);
		SetPlayerCheckpoint(playerid,DelegaciaPos[rand][0],DelegaciaPos[rand][1],DelegaciaPos[rand][2],2.0);
		CheckpointStatus[playerid] = ENTREGANDO_DELEGACIA;
		CarroEntrega[playerid] = GetPlayerVehicleID(playerid);
	}
}
public SaveCarPos(vehicleid,Float:X,Float:Y,Float:Z,Float:Ang)
{
	new tmp[256];
	set(tmp,VehicleFile(vehicleid));
	if(!fexist(tmp)) return 0;
	vStats[vehicleid][CarPosX] = X;
	vStats[vehicleid][CarPosY] = Y;
	vStats[vehicleid][CarPosZ] = Z;
	vStats[vehicleid][CarPosAng] = Ang;
	return 1;
}
public ApplyTuningForVehicle(vehicleid){
	new tmp[256];
	set(tmp,VehicleFile(vehicleid));
	if(!fexist(tmp)) return 0;
	ChangeVehiclePaintjob(vehicleid,vStats[vehicleid][Paintjob]);
	for(new ts=0; ts<18; ts++){
	    if(vStats[vehicleid][Tuning][ts] != 0) AddVehicleComponent(vehicleid,vStats[vehicleid][Tuning][ts]);
	}
	return 1;
}

stock ComprarMunicao(playerid, slot, quantia)
{
    new string[256];
	new custo;
	new weapon,getmunicion;
	GetPlayerWeaponData(playerid,slot,weapon,getmunicion);
	if(weapon == 0){
	    SendClientMessage(playerid, COLOR_RED2, "Você não possui arma desse SLOT!");
	    SendClientMessage(playerid, COLOR_RED2, "Veja as armas e os SLOTS em /slotarmas");
	    return 1;
	}
	else{
	    if(slot == 2) custo = quantia*5;
		else if(slot == 3) custo = quantia*40;
		else if(slot == 4) custo = quantia*10;
		else if(slot == 5) custo = quantia*30;
		else if(slot == 6) custo = quantia*50;
		if(GetPlayerMoney(playerid) < custo){
			format(string,sizeof(string),"Você não possui dinheiro, CUSTO: $%d",custo);
			SendClientMessage(playerid, COLOR_RED2, string);
			return 1;
		}
		else{
			GivePlayerWeapon(playerid,weapon,getmunicion+quantia);
			AddPlayerMoney(playerid,-custo, 4);
			format(string,sizeof(string),"Você comprou %d munições para a arma de SLOT %d por $%d",quantia,slot,custo);
			SendClientMessage(playerid, COLOR_GREEN, string);
			return 1;
		}
	}
}
stock SaveWeapons(playerid)
{
	new weapon0,weapon1,weapon2,weapon3,weapon4,weapon5,weapon6,weapon7,weapon8,weapon9,weapon10,weapon11,weapon12,ammo0,ammo1,ammo2,ammo3,ammo4,ammo5,ammo6,ammo7,ammo8,ammo9,ammo10,ammo11,ammo12;
    GetPlayerWeaponData(playerid,0,weapon0,ammo0);
	GetPlayerWeaponData(playerid,1,weapon1,ammo1);
	GetPlayerWeaponData(playerid,2,weapon2,ammo2);
	GetPlayerWeaponData(playerid,3,weapon3,ammo3);
	GetPlayerWeaponData(playerid,4,weapon4,ammo4);
	GetPlayerWeaponData(playerid,5,weapon5,ammo5);
	GetPlayerWeaponData(playerid,6,weapon6,ammo6);
	GetPlayerWeaponData(playerid,7,weapon7,ammo7);
	GetPlayerWeaponData(playerid,8,weapon8,ammo8);
	GetPlayerWeaponData(playerid,9,weapon9,ammo9);
	GetPlayerWeaponData(playerid,10,weapon10,ammo10);
	GetPlayerWeaponData(playerid,11,weapon11,ammo11);
	GetPlayerWeaponData(playerid,12,weapon12,ammo12);
	pStats[playerid][WeaponSlot0] = weapon0;
	pStats[playerid][WeaponSlot0Ammo] = ammo0;
	pStats[playerid][WeaponSlot1] = weapon1;
	pStats[playerid][WeaponSlot1Ammo] = ammo1;
	pStats[playerid][WeaponSlot2] = weapon2;
	pStats[playerid][WeaponSlot2Ammo] = ammo2;
	pStats[playerid][WeaponSlot3] = weapon3;
	pStats[playerid][WeaponSlot3Ammo] = ammo3;
	pStats[playerid][WeaponSlot4] = weapon4;
	pStats[playerid][WeaponSlot4Ammo] = ammo4;
	pStats[playerid][WeaponSlot5] = weapon5;
	pStats[playerid][WeaponSlot5Ammo] = ammo5;
	pStats[playerid][WeaponSlot6] = weapon6;
	pStats[playerid][WeaponSlot6Ammo] = ammo6;
	pStats[playerid][WeaponSlot7] = weapon7;
	pStats[playerid][WeaponSlot7Ammo] = ammo7;
	pStats[playerid][WeaponSlot8] = weapon8;
	pStats[playerid][WeaponSlot8Ammo] = ammo8;
	pStats[playerid][WeaponSlot9] = weapon9;
	pStats[playerid][WeaponSlot9Ammo] = ammo9;
	pStats[playerid][WeaponSlot10] = weapon10;
	pStats[playerid][WeaponSlot10Ammo] = ammo10;
	pStats[playerid][WeaponSlot11] = weapon11;
	pStats[playerid][WeaponSlot11Ammo] = ammo11;
	pStats[playerid][WeaponSlot12] = weapon12;
	pStats[playerid][WeaponSlot12Ammo] = ammo12;
}
public VerArmas(playerid,plid){
	new weapon0,weapon1,weapon2,weapon3,weapon4,weapon5,weapon6,weapon7,weapon8,weapon9,weapon10,weapon11,weapon12,ammo0,ammo1,ammo2,ammo3,ammo4,ammo5,ammo6,ammo7,ammo8,ammo9,ammo10,ammo11,ammo12,string[256];
    GetPlayerWeaponData(plid,0,weapon0,ammo0);
	GetPlayerWeaponData(plid,1,weapon1,ammo1);
	GetPlayerWeaponData(plid,2,weapon2,ammo2);
	GetPlayerWeaponData(plid,3,weapon3,ammo3);
	GetPlayerWeaponData(plid,4,weapon4,ammo4);
	GetPlayerWeaponData(plid,5,weapon5,ammo5);
	GetPlayerWeaponData(plid,6,weapon6,ammo6);
	GetPlayerWeaponData(plid,7,weapon7,ammo7);
	GetPlayerWeaponData(plid,8,weapon8,ammo8);
	GetPlayerWeaponData(plid,9,weapon9,ammo9);
	GetPlayerWeaponData(plid,10,weapon10,ammo10);
	GetPlayerWeaponData(plid,11,weapon11,ammo11);
	GetPlayerWeaponData(plid,12,weapon12,ammo12);
	SendClientMessage(playerid, COLOR_JUIZ, "|===============================| ARMAS |===============================|");
    SendClientMessage(plid, COLOR_JUIZ, "|===============================| ARMAS |===============================|");
	format(string,sizeof(string),"Arma de slots 0: %s com %d munições | Arma de slot 1: %s com %d munições | Arma de slot 2: %s com %d munições",weaponname[weapon0],ammo0,weaponname[weapon1],ammo1,weaponname[weapon2],ammo2);
	SendClientMessage(playerid, COLOR_WHITE, string);
	SendClientMessage(plid, COLOR_WHITE, string);
	format(string,sizeof(string),"Arma de slots 3: %s com %d munições | Arma de slot 4: %s com %d munições | Arma de slot 5: %s com %d munições",weaponname[weapon3],ammo3,weaponname[weapon4],ammo4,weaponname[weapon5],ammo5);
	SendClientMessage(playerid, COLOR_WHITE, string);
	SendClientMessage(plid, COLOR_WHITE, string);
	format(string,sizeof(string),"Arma de slots 6: %s com %d munições | Arma de slot 7: %s com %d munições | Arma de slot 8: %s com %d munições",weaponname[weapon6],ammo6,weaponname[weapon7],ammo7,weaponname[weapon8],ammo8);
	SendClientMessage(playerid, COLOR_WHITE, string);
	SendClientMessage(plid, COLOR_WHITE, string);
	format(string,sizeof(string),"Arma de slots 9: %s com %d munições | Arma de slot 10: %s com %d munições | Arma de slot 11: %s com %d munições",weaponname[weapon9],ammo9,weaponname[weapon10],ammo10,weaponname[weapon11],ammo11);
	SendClientMessage(playerid, COLOR_WHITE, string);
	SendClientMessage(plid, COLOR_WHITE, string);
	format(string,sizeof(string),"Arma de slots 12: %s com %d munições",weaponname[weapon12],ammo12);
	SendClientMessage(playerid, COLOR_WHITE, string);
	SendClientMessage(plid, COLOR_WHITE, string);
	SendClientMessage(playerid, COLOR_JUIZ, "Informações de armas recebidas...");
	SendClientMessage(plid, COLOR_JUIZ, "Informações de armas mostradas...");
	Revistando[playerid] = 0;
	Revistado[plid] = 0;
	AindaNaoAceitou[plid] = 0;
}
stock SavePaintjob(vehicle,paintjobid)
{
	vStats[vehicle][Paintjob] = paintjobid;
	return 1;
}
stock SaveTuning(vehicleid,slot,componentid)
{
	vStats[vehicleid][Tuning][slot] = componentid;
	return 1;
}
public OnVehicleMod(vehicleid, componentid)
{
    if(componentid == 1000 || componentid == 1001 || componentid == 1002 || componentid == 1003 || componentid == 1014 || componentid == 1015 || componentid == 1016 ||
	componentid == 1023 || componentid == 1049 || componentid == 1050 || componentid == 1058 || componentid == 1138 || componentid == 1139 || componentid == 1146 || componentid == 1147 ||
	componentid == 1158 || componentid == 1162 || componentid == 1163 || componentid == 1164) SaveTuning(vehicleid,1,componentid);

	else if(componentid == 1006 || componentid == 1032 || componentid == 1033 || componentid == 1035 || componentid == 1038 || componentid == 1053 || componentid == 1054 ||
	componentid == 1055 || componentid == 1061 || componentid == 1067 || componentid == 1068 || componentid == 1088 || componentid == 1091 || componentid == 1103 ||
	componentid == 1128 || componentid == 1130 || componentid == 1131) SaveTuning(vehicleid,2,componentid);

	else if(componentid == 1004 || componentid == 1005 || componentid == 1011 || componentid == 1012) SaveTuning(vehicleid,3,componentid);

	else if(componentid == 1007 || componentid == 1017 || componentid == 1026 || componentid == 1027 || componentid == 1030 || componentid == 1031 || componentid == 1036 ||
	componentid == 1039 || componentid == 1040 || componentid == 1041 || componentid == 1042 || componentid == 1047 || componentid == 1048 || componentid == 1051 || componentid == 1052 ||
	componentid == 1056 || componentid == 1057 || componentid == 1062 || componentid == 1063 || componentid == 1069 || componentid == 1070 || componentid == 1071 || componentid == 1072 ||
	componentid == 1090 || componentid == 1093 || componentid == 1094 || componentid == 1095 || componentid == 1099 || componentid == 1101 || componentid == 1102 || componentid == 1106 ||
	componentid == 1107 || componentid == 1108 || componentid == 1118 || componentid == 1119 || componentid == 1120 || componentid == 1121 || componentid == 1122 || componentid == 1124 ||
	componentid == 1133 || componentid == 1134 || componentid == 1137) SaveTuning(vehicleid,4,componentid);

	else if(componentid == 1008 || componentid == 1009 || componentid == 1010) SaveTuning(vehicleid,5,componentid);

	else if(componentid == 1013 || componentid == 1024) SaveTuning(vehicleid,6,componentid);

	else if(componentid == 1018 || componentid == 1019 || componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1028 || componentid == 1029 ||
	componentid == 1034 || componentid == 1037 || componentid == 1043 || componentid == 1044 || componentid == 1045 || componentid == 1046 || componentid == 1059 || componentid == 1064 ||
	componentid == 1065 || componentid == 1066 || componentid == 1089 || componentid == 1092 || componentid == 1104 || componentid == 1105 || componentid == 1113 || componentid == 1114 ||
	componentid == 1126 || componentid == 1127 || componentid == 1129 || componentid == 1132 || componentid == 1135 || componentid == 1136) SaveTuning(vehicleid,7,componentid);

	else if(componentid == 1025 || componentid == 1073 || componentid == 1074 || componentid == 1075 || componentid == 1076 || componentid == 1077 || componentid == 1078 ||
	componentid == 1079 || componentid == 1080 || componentid == 1081 || componentid == 1082 || componentid == 1083 || componentid == 1084 || componentid == 1085 || componentid == 1096 ||
	componentid == 1097 || componentid == 1098) SaveTuning(vehicleid,8,componentid);

	else if(componentid == 1086) SaveTuning(vehicleid,9,componentid);

	else if(componentid == 1087) SaveTuning(vehicleid,10,componentid);

 	else if(componentid == 1100 || componentid == 1123 || componentid == 1125) SaveTuning(vehicleid,11,componentid);

 	else if(componentid == 1109 || componentid == 1110) SaveTuning(vehicleid,12,componentid);

 	else if(componentid == 1115 || componentid == 1116) SaveTuning(vehicleid,13,componentid);

 	else if(componentid == 1117 || componentid == 1152 || componentid == 1153 || componentid == 1155 || componentid == 1157 || componentid == 1160 || componentid == 1165 ||
  	componentid == 1166 || componentid == 1169 || componentid == 1170 || componentid == 1171 || componentid == 1172 || componentid == 1173 || componentid == 1174 || componentid == 1176 ||
 	componentid == 1179 || componentid == 1181 || componentid == 1182 || componentid == 1185 || componentid == 1188 || componentid == 1189 || componentid == 1190 || componentid == 1191) SaveTuning(vehicleid,14,componentid);

	else if(componentid == 1140 || componentid == 1141 || componentid == 1148 || componentid == 1149 || componentid == 1150 || componentid == 1151 || componentid == 1154 ||
	componentid == 1156 || componentid == 1159 || componentid == 1161 || componentid == 1167 || componentid == 1168 || componentid == 1175 || componentid == 1177 || componentid == 1178 ||
	componentid == 1180 || componentid == 1183 || componentid == 1184 || componentid == 1186 || componentid == 1187 || componentid == 1192 || componentid == 1193) SaveTuning(vehicleid,15,componentid);

	else if(componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145) SaveTuning(vehicleid,16,componentid);

	else if(componentid == 1111 || componentid == 1112) SaveTuning(vehicleid,17,componentid);

}
stock CriarPlacas()
{
	new contagem = 1;
	new placa[256],tmp[256];
	format(placa, sizeof(placa), "RVL %d",contagem);
	set(tmp,VehicleFile(contagem));
	while(fexist(tmp)){
		set(vStats[contagem][VPlaca],placa);
		SetVehicleNumberPlate(contagem,placa);
		contagem++;
		format(placa, sizeof(placa), "RVL %d",contagem);
        set(tmp,VehicleFile(contagem));
	}
	writelog("Criando placas dos veículos... Concluído!");
}
stock SalvarPlaca(vehicleid,string[])
{
	new tmp[256];
	set(tmp,VehicleFile(vehicleid));
	if(fexist(tmp)){
		set(vStats[vehicleid][VPlaca],string);
		SetVehicleNumberPlate(vehicleid,string);
	}
	else{
		printf("Não conseguimos salvar a placa do veiculo %d",vehicleid);
		printf("Pois seu arquivo não foi encontrado");
	}
}

stock SalvarAlarme(vehicleid,num)
{
	new tmp[256];
	set(tmp,VehicleFile(vehicleid));
	if(fexist(tmp)){
		vStats[vehicleid][VAlarme] = num;
	} else {
		printf("Não conseguimos salvar o alarme do veiculo %d",vehicleid);
		printf("Pois seu arquivo não foi encontrado");
	}
}
public OnPlayerRequestClass(playerid, classid)
{
	PlayerPlaySound(playerid,1185,0.0,0.0,0.0);
    TextDrawHideForPlayer(playerid,Bemvindo);
    TextDrawHideForPlayer(playerid,Bemvindo2);
    TextDrawHideForPlayer(playerid,Bemvindo3);
    TextDrawHideForPlayer(playerid,Bemvindo4);
	SetPlayerColor(playerid,COLOR_UNLOGGED);
	SetPlayerCameraPos(playerid,2042.6848,-1404.6050,68.8817);
	SetPlayerCameraLookAt(playerid,2000.6848,-1398.6050,69.8817);
	TextDrawShowForPlayer(playerid,Bemvindo);
	TextDrawShowForPlayer(playerid,Bemvindo2);
	if(!fexist(PlayerFile(PlayerName(playerid)))) TextDrawShowForPlayer(playerid,Bemvindo3);
	else TextDrawShowForPlayer(playerid,Bemvindo4);
	if(Logado[playerid] == 1){
	    SpawnPlayer(playerid);
	}
}
public FimDJ(playerid){
	KillTimer(TimerDJ[playerid]);
	SetCameraBehindPlayer(playerid);
    SM[playerid] = NONE;
    HaveDJ = 0;
    AddPlayerMoney(playerid,200,4);
    TogglePlayerControllable(playerid,true);
    SendClientMessage(playerid, COLOR_WHITE, "Fim de trabalho, obrigado por nos ajudar, aqui está seu dinheiro: $200");
}
public OnGameModeExit()
{
    SaveCell("Utilidades/celulares.rpg");
    SalvarPastaGangZones("Utilidades/zones.rpg");
    SavePastaUtilitarios("Utilidades/utilitarios.cfg");
    SaveGangues();
    SaveJornais();
	writelog("Reload Virtual Life RpG finalizado. Fechando log e salvando estatísticas dos usuários...");
	new msg[256];
	for(new i=0; i<SLOTS2; i++){
		if(IsPlayerConnected(i)){
		    if(fexist(PlayerFile(PlayerName(i))) && Logado[i]){
				format(msg,sizeof(msg),"Salvando dados de %s (ID %d)... OK!",PlayerName(i),i);
				writelog(msg);
				printf("Dados de %s (ID: %d) salvos com sucesso\n",PlayerName(i),i);
			}
		}
	}
  	for(new p=0;p<MAX_CASAS;p++){ SavePickup(p); }
 	for(new p=0;p<MAX_PROPERTIES;p++){ SavePropertie(p); }
 	for(new p=0;p<MAX_VEHICLES;p++){ SaveVehicle(p); }
	DestroyMenu(Weapons);
	DestroyMenu(WSlot2);
	DestroyMenu(WSlot3);
	DestroyMenu(WSlot4);
	DestroyMenu(WSlot5);
	DestroyMenu(WSlot6);
	DestroyMenu(WColete);
	DestroyMenu(WCamuflagem);
	DestroyMenu(CasaOpc);
	DestroyMenu(DiasAluguel1);
	DestroyMenu(DiasAluguel2);
	DestroyMenu(DiasAluguel3);
	DestroyMenu(ConfirmarProf);
	DestroyMenu(Outros);
	DestroyMenu(ComidaLoja);
	DestroyMenu(Eletrodomesticos);
	DestroyMenu(Transfeder1);
	DestroyMenu(Transfeder2);
	DestroyMenu(Transfeder3);
	DestroyMenu(Transfeder4);
	DestroyMenu(Transfeder5);
	DestroyMenu(QTMunicoes);
	DestroyMenu(Municoes);
	DestroyMenu(Sucos);
	DestroyMenu(Cardapio1);
	DestroyMenu(Cardapio2);
	DestroyMenu(Cardapio3);
	DestroyMenu(Cardapio4);
	DestroyMenu(Bombshop);
	DestroyMenu(Bombshopveh);
	DestroyMenu(BancoOpc);
	DestroyMenu(CargaGeral);
	DestroyMenu(VendoDrogas);
	DestroyMenu(QuantidadeDrog);
	DestroyMenu(Bar);
	DestroyMenu(OpcoesAlarme);
	DestroyMenu(CPD_First);
	DestroyMenu(CPD_Second);
	DestroyMenu(CPD_Third);
	DestroyMenu(CPD_Fourth);
	DestroyMenu(CPD_Fifth);
	DestroyMenu(CPD_Sixth);
	DestroyMenu(Properties);
	DestroyMenu(Properties2);
	DestroyMenu(ConfirmacaoNegocio);
	DestroyMenu(Sorvetes);
	DestroyMenu(Sorvetes2);
	DestroyMenu(cofremenu);
	DestroyMenu(drogascofre);
	DestroyMenu(Becks);
	DestroyMenu(BuyCar);
	writelog("Salvando a pasta de utilitários do gamemode... OK!");
	writelog("Salvando estatísticas dos usuários... Concluído!");
	writelog("Reload Virtual Life RpG finalizado com sucesso");
	print("Saindo do Gamemode RPG");
	return 1;
}

public ZerarVariaveis(playerid){
    for(new i = 0; i < QtConvidados[playerid]; i++) Convidado[playerid][i] = INVALID_PLAYER_ID;
	ColocouPasta[playerid] = 0; EscoveiDentes[playerid] = 0; BankOpc[playerid] = 0;
	Acusar[playerid] = 0; PlayerKiller[playerid] = -1; PlayerDeath[playerid] = 0; Reason[playerid] = 0; CarregouArmas[playerid] = 0;
	rcp[playerid] = 0; RaceCheckpointStatus[playerid] = RNONE; Verificou[playerid] = 0; GetPickup[playerid] = -1;
	PedidoRastreador[playerid] = 0; JogadorRastreamento[playerid] = -1; RastreandoJogador[playerid] = 0; VCamuflado[playerid] = 0;
	EquipeCC[playerid] = 0; EstouNoCC[playerid] = 0; AgoraEstouNoCC[playerid] = 0; Curandome[playerid] = 0; FiscalArmas[playerid] = -1; FiscalizandoArmas[playerid] = 0;
	Morrendo[playerid] = 0; AcabouMorrer[playerid] = 0; TempoVicio[playerid] = 75; RecebeuMSG[playerid] = 0;
	NoPL[playerid] = 0; Equipe[playerid] = 0; AreaCopPL[playerid] = 0; Capturado[playerid] = 0; AreaEntretenimentos[playerid] = 0;
 	PChaveMestra[playerid] = 0; Convidando[playerid] = -1; confirmarprof[playerid] = 0; profselection[playerid] = 0; PropostaConserto[playerid] = 0;
	Gritos[playerid] = 0; ivalorcasa[playerid] = 0; Area180Habilitada[playerid] = 0; AreaBalada[playerid] = 0;
	icarid[playerid] = 0; AreaMotoHabilitada[playerid] = 0; AreaLCavalos[playerid] = 0; MotivoGranaID[playerid] = 0;
	NaAgenda[playerid] = 0; icor1[playerid] = 0; ComLeite[playerid] = 0; AreaBar[playerid] = 0; FazendoHoraExtra[playerid] = 0;
	Agendado[playerid] = 0; icor2[playerid] = 0; NoRestaurante[playerid] = 0; AreaLocadora[playerid] = 0;
    numplayers++; iX[playerid] = 0.0; NoRestaurante2[playerid] = 0; AreaSorveteria[playerid] = 0; VeiculoConserto[playerid] = -1;
    NaCasa[playerid] = 0; iY[playerid] = 0.0; avisovelo[playerid] = 0; AreaChuveiro[playerid] = 0; QtConvidados[playerid] = 0;
	PickupEntradaCasa[playerid] = 0; iZ[playerid] = 0.0; VendedorProduto[playerid] = 0; AreaBanheiro[playerid] = 0;
	TVligada[playerid] = 0; iang[playerid] = 0; Produto[playerid] = 0; AreaHosp[playerid] = 0; CaixaPostal2[playerid] = 0;
	Frangos[playerid] = 0; AntMoney[playerid] = 0; TeorDoProduto[playerid] = 0; AreaDeleg[playerid] = 0; QtDrog[playerid] = 0;
	Pizzas[playerid] = 0; PedindoDemissao[playerid] = 0; ValorDoProduto[playerid] = 0; AreaHotel[playerid] = 0;
	Peixes[playerid] = 0; JaPodeTomarRemed[playerid] = 0; OfertaDada[playerid] = 0; AreaDelegacia[playerid] = 0;
  	AreaCustomizacao[playerid] = 0; Morreu2[playerid] = 0; confirmacaosenha[playerid] = 0; Logado[playerid] = 0;
    Algemado[playerid] = 0; Algemou[playerid] = 0; AlgemaInfo[playerid][0] = -1; AlgemaInfo[playerid][1] = -1; GetCopCars[playerid] = INVALID_VEHICLE_ID;
   	Contrabando[playerid] = 0; Gritos[playerid] = 0; FazendoEmprestimo[playerid] = 0; AreaLoteria[playerid] = 0;
   	Acertos[playerid]=0; AreaCofre[playerid] = 0; EntregandoGrana[playerid] = 0; CellCredits[playerid] = 0; FazendoTesteRua[playerid] = 0;
	PlayerDentro[playerid]=false; AlimentoCozinhando[playerid] = 0; DepositandoGrana[playerid] = 0; AluguelFornecedor[playerid] = 0;
	Receita[playerid] = 0; GetPickup[playerid] = 0; SacandoGrana[playerid] = 0; VendedorSeguro[playerid] = 0;
    celular[playerid] = 0; Frangos[playerid] = 0; senhaatual[playerid] = 0; OficializarParticipacao[playerid] = 0; Negocio[playerid] = 0;
	Negociador[playerid] = 0; Pizzas[playerid] = 0; Curando[playerid] = 0; OferecerCarro[playerid] = 0;
	PropriedadeContrato[playerid] = -1; Carnes[playerid] = 0; JogadorDoente[playerid] = 0; JogadorNoCarro[playerid] = 0;
	PropriedadeEscolhida[playerid] = -1; Strogonoffes[playerid] = 0; kitmedico[playerid] = 0; PropriedadeSelecionada[playerid] = -1; Camaroes[playerid] = 0; envconvite[playerid] = -1; CarroAlugado[playerid] = 0;
	ValorOferecido[playerid] = 0; Linguicas[playerid] = 0; invitestatus[playerid] = INVITE_NONE; GeralCar[playerid] = 0;
   	LastVote[playerid] = 255; SeEntregando[playerid] = 0; AreaLixao[playerid] = 0; GasCar[playerid] = 0;
   	KickVote[playerid] = 0; PolicialApreendendo[playerid] = 0; LixoColetado[playerid] = 0; CarregamentoRoupas[playerid] = 0;
	VoteKick[playerid] = 0; NoTeste[playerid] = 0; MissaoLixeiro[playerid] = 0; DrogasNoCaminhao[playerid] = 0;
	InstrutorOcupado[playerid] = 0; AreaCreditos[playerid] = 0; ColocandoDrogas[playerid] = 0; Rastreando[playerid] = 0;
	Chance[playerid] = 0; AreaBanco[playerid] = 0; DinheiroConserto[playerid] = 0; AcabouAssistirTV[playerid] = 0;
	MissaoLixeiro[playerid] = 0; InstrutorNovo[playerid] = 0; TomeiBanho[playerid] = 0; AreaCarga[playerid] = 0;
	DebugKeys[playerid] = 0; LiAsLeis[playerid] = 0; Mijando[playerid] = 0; HoraExtra[playerid] = 0; NaoMostrandoHora[playerid] = 0;
	AreaBalizaHabilitada[playerid] = 0; AcabeiDeMijar[playerid] = 0; Sequestrador[playerid] = -1; Rastreado[playerid] = 0;
	Escondido[playerid] = 0; AreaZigHabilitada[playerid] = 0; TomandoSorvete[playerid] = 0; Sequestro[playerid] = 0;
	AreaPesca[playerid] = 0; AreaCoopPesca[playerid] = 0; PescaInProgress[playerid] = 0; QtPescas[playerid] = 0; QtIscas[playerid] = 0;
	Tribunal[playerid] = 0; declaracoesabertas[playerid] = 0; Audiencia[playerid] = 0; ContrabandoCar[playerid] = 0;
	QtMilho[playerid] = 0; FazendaInProgress[playerid] = 0; AreaCoopFazenda[playerid] = 0; AreaFazenda[playerid] = 0;
	Missao[playerid] = 0; EntregandoLatas[playerid] = 0; QtLeite[playerid] = 0; NaoMostrandoData[playerid] = 0;
	PegarGrana[playerid] = 0; Carga[playerid] = 0; AreaForte[playerid] = 0; CatarLatinha[playerid] = 0; SeguroImovel[playerid] = 0;
	Receita[playerid] = 0; ContrabandoPassar[playerid] = 0; CheckpointStatus[playerid] = NONE; Contrabando[playerid] = 0;
	PodePegar[playerid] = 0; NaoSair[playerid] = 0; EntregaCarro[playerid] = 0; GangInvite[playerid] = 0;
	Pedras[playerid] = 0; Construcao[playerid] = 0; PedreiraCarga[playerid] = 0; Camuflado[playerid] = 0; DinheiroConserto[playerid] = 0;
	EntregadePizza[playerid] = 0; PizzariaCar[playerid] = 0; PizzasEntregues[playerid] = 0; PizzasNecessarias[playerid] = 0;
	CPlayerDentro[playerid]=false; AntInt[playerid] = 0; Spectator[playerid] = -1; PlayerSpec[playerid] = -1;
	DebugKeys[playerid] = 0; AreaBombShop[playerid] = 0; PropriedadeSelecionada[playerid] = -1; ComDocs[playerid] = 0;
	Profissao[playerid] = 1; Presos[playerid] = 0; AreaPosto[playerid] = 0; Escondido[playerid] = 0; ReceiveDocs[playerid] = -1;
	ChavePrisao[playerid] = 0; Perseguicao[playerid] = 0; NoTaxi[playerid] = 0; EntregouDocs[playerid] = 0;
	Maconha[playerid] = 0; Heroina[playerid] = 0; Cocaina[playerid] = 0; Bebida[playerid] = 0; GiveDocs[playerid] = -1;
	PegandoDrogas[playerid] = 0; QtCocaina[playerid] = 0; QtHeroina[playerid] = 0; QtMaconha[playerid] = 0;
	CocainaMao[playerid] = 0; MaconhaMao[playerid] = 0; HeroinaMao[playerid] = 0; MaconhaEsc[playerid] = 0;
	SemCamisa[playerid] = 0; PlantandoDrogas[playerid] = 0; CocainaEsc[playerid] = 0; AluguelCarro[playerid] = -1;
	Prostitutacama[playerid] = -1; AreaStrip[playerid] = 0; Transacama[playerid] = 0; HeroinaEsc[playerid] = 0;
	FST[playerid] = 0; Prostitutacama2[playerid] = -1; FazendoStrip[playerid] = 0; Strip2[playerid] = 0; PeixesRestantes[playerid] = 4;
	isTowtruck[playerid] = 0; Acertos[playerid] = 0; DesarmandoAsDrogas[playerid] = 0; Motivo[playerid] = 0; ParteTutorial[playerid] = 0;
	EmLigacao[playerid] = 0; CobrancaCall[playerid] = 0; Chamando[playerid] = 0; AreaCasino[playerid] = 0; VeiculoConserto[playerid] = -1;
	celular[playerid] = 0; RingTone[playerid] = 0; CalledID[playerid] = -1; Prisioneiro[playerid] = -1;
	LastVote[playerid] = 0; VoteKick[playerid] = 0; KickVote[playerid] = 0; CarroEntrega[playerid] = -1;
	Metendo[playerid] = 0; CPAtivado[playerid] = 0; ComDocs[playerid] = 0; EntregouDocs[playerid] = 0; Mudo[playerid] = 0;
	Entrevista[playerid][0] = 0; Entrevista[playerid][1] = 0; Entrevista[playerid][2] = 0; Entrevista[playerid][3] = -1; Entrevista[playerid][4] = -1;
	AbastecendoCarroAluguel[playerid] = 0; ReparandoCarroAluguel[playerid] = 0; ParteAnuncio[playerid] = 0;
	pStats[playerid][ContinuarPos] = 0; pStats[playerid][Gangue] = 0; pStats[playerid][Jornal] = 0; pStats[playerid][Prof] = 0;
	pStats[playerid][PastaDental] = 0; pStats[playerid][EscovaDental] = 0; pStats[playerid][Dinheiro] = 0;
	pStats[playerid][Banco] = 0; pStats[playerid][Skin] = 0; pStats[playerid][Respeito] = 0; pStats[playerid][Galao] = 0;
	pStats[playerid][Divida] = 0; pStats[playerid][Emprestimo] = 0; pStats[playerid][HistoriaFeita] = 0;
	pStats[playerid][XL] = 0; pStats[playerid][ExPoints] = 0; pStats[playerid][NM] = 0; pStats[playerid][Culinaria] = 0;
	pStats[playerid][Wanted] = 0; pStats[playerid][Preso] = 0; pStats[playerid][MotivoPrisao] = 0; pStats[playerid][Passaporte] = 0;
	pStats[playerid][Porte] = 0; pStats[playerid][HabNautica] = 0; pStats[playerid][HabAerea] = 0; pStats[playerid][HabTerrestre] = 0;
	pStats[playerid][Phone] = 0; pStats[playerid][Agenda] = 0; pStats[playerid][PhoneNumb] = 0; pStats[playerid][CreditosCell] = 0;
	pStats[playerid][CaixaPostal] = 0; pStats[playerid][Doenca] = 0; pStats[playerid][Micose] = 0; pStats[playerid][Aids] = 0;
	pStats[playerid][Higiene] = 0; pStats[playerid][Seguro] = 0; pStats[playerid][Pesca] = 0; pStats[playerid][Latas] = 0;
	pStats[playerid][Iscas] = 0; pStats[playerid][LatasNecessarias] = 0; pStats[playerid][Camisinha] = 0; pStats[playerid][Alcool] = 0;
 	pStats[playerid][DosesMaconha] = 0; pStats[playerid][DosesHeroina] = 0; pStats[playerid][DosesCocaina] = 0;
	pStats[playerid][ChaveMestra] = 0; pStats[playerid][VirtualCard] = 0; pStats[playerid][CofreCell] = 0;
	pStats[playerid][Vacina] = 0; pStats[playerid][VacinaDuracao] = 0; pStats[playerid][Casa] = 0; pStats[playerid][ValorCasa] = 0;
	pStats[playerid][PickupCasa] = 0; pStats[playerid][VendendoCasa] = 0; pStats[playerid][NSegurancas] = 0;
	pStats[playerid][JaContratado] = 0; pStats[playerid][LastVeh] = 0; pStats[playerid][Matou] = 0; pStats[playerid][Morreu] = 0;
	pStats[playerid][AumentoPropriedade] = 0; pStats[playerid][VendendoCasas] = 0; pStats[playerid][Banido] = 0;
	pStats[playerid][LocouCasa] = 0; pStats[playerid][DiasDeAluguel] = 0; pStats[playerid][DiasAluguel] = 0;
	pStats[playerid][LocandoCasa] = 0; pStats[playerid][ValorAluguel] = 0; pStats[playerid][Peixe] = 0; pStats[playerid][BancoEmpresa] = 0;
	pStats[playerid][VicioDrogas] = 0; pStats[playerid][HistoriaSelecionada] = 0; pStats[playerid][VCell] = 0; pStats[playerid][GCell] = 0;
	pStats[playerid][ValorCabeca] = 0; pStats[playerid][Sanduiche] = 0; pStats[playerid][Frango] = 0;
	pStats[playerid][Salada] = 0; pStats[playerid][Pizza] = 0; pStats[playerid][Refrigerante] = 0; pStats[playerid][Suco] = 0;
	pStats[playerid][Carne] = 0; pStats[playerid][Strogonoff] = 0; pStats[playerid][Camarao] = 0; pStats[playerid][Linguica] = 0;
	pStats[playerid][ConquistouTerritorio] = 0; pStats[playerid][SorveteChocolate] = 0; pStats[playerid][SorveteNapolitano] = 0;
	pStats[playerid][SorveteFlocos] = 0; pStats[playerid][SeguroCasa] = 0; pStats[playerid][Remedios] = 0;
	pStats[playerid][DosesRemed] = 0; pStats[playerid][Banheiro] = 0; pStats[playerid][ConvidadoCasa] = 0;
	pStats[playerid][QR] = 0; pStats[playerid][ABasico] = 0; pStats[playerid][AAvancado] = 0; pStats[playerid][Hotel] = 0;
	pStats[playerid][PFogao] = 0; pStats[playerid][PTV] = 0; pStats[playerid][PRadio] = 0; pStats[playerid][PGeladeira] = 0;
	pStats[playerid][PTelefone] = 0; pStats[playerid][PTelefoneNumb] = 0; pStats[playerid][PInvestimento] = 0;
	pStats[playerid][DetectadoMorte] = 0; pStats[playerid][BancoTrabalho] = 0; pStats[playerid][BancoResidencia] = 0;
	pStats[playerid][WeaponSlot0] = 0; pStats[playerid][WeaponSlot0Ammo] = 0;
	pStats[playerid][WeaponSlot1] = 0; pStats[playerid][WeaponSlot1Ammo] = 0;
	pStats[playerid][WeaponSlot2] = 0; pStats[playerid][WeaponSlot2Ammo] = 0;
	pStats[playerid][WeaponSlot3] = 0; pStats[playerid][WeaponSlot3Ammo] = 0;
	pStats[playerid][WeaponSlot4] = 0; pStats[playerid][WeaponSlot4Ammo] = 0;
	pStats[playerid][WeaponSlot5] = 0; pStats[playerid][WeaponSlot5Ammo] = 0;
	pStats[playerid][WeaponSlot6] = 0; pStats[playerid][WeaponSlot6Ammo] = 0;
	pStats[playerid][WeaponSlot7] = 0; pStats[playerid][WeaponSlot7Ammo] = 0;
	pStats[playerid][WeaponSlot8] = 0; pStats[playerid][WeaponSlot8Ammo] = 0;
	pStats[playerid][WeaponSlot9] = 0; pStats[playerid][WeaponSlot9Ammo] = 0;
	pStats[playerid][WeaponSlot10] = 0; pStats[playerid][WeaponSlot10Ammo] = 0;
	pStats[playerid][WeaponSlot11] = 0; pStats[playerid][WeaponSlot11Ammo] = 0;
	pStats[playerid][WeaponSlot12] = 0; pStats[playerid][WeaponSlot12Ammo] = 0;
}
public OnPlayerConnect(playerid)
{
	if(strval(GetValue(PlayerFile(PlayerName(playerid)),"Banido")) == 1){
		SendClientMessage(playerid, COLOR_LIXEIRO, "[VLR] Você está banido do Virtual Life RPG.");
		SendClientMessage(playerid, COLOR_LIXEIRO, "Se for inocente e quer provar, entre em contato com nós na comunidade ou MSN");
        SendClientMessage(playerid, COLOR_WHITE, "Texugo - <texugo_cs@hotmail.com>");
		SendClientMessage(playerid, COLOR_WHITE, "Rafael - <rafael_msn_7@hotmail.com>");
        SendClientMessage(playerid, COLOR_WHITE, "Guilherme - <guilhermesilio@hotmail.com>");
        SendClientMessage(playerid, COLOR_WHITE, "osorkon - <osorkon8@hotmail.com>");
        SendClientMessage(playerid, COLOR_WHITE, "michael - <michael_felipe_436@hotmail.com>");
        SendClientMessage(playerid, COLOR_LIXEIRO, "Esses são os membros mais ativos da equipe, você pode contatar um deles para explicar-se");
        SendClientMessage(playerid, COLOR_COP_SWAT, "Atenciosamente equipe Virtual Life, obrigado...");
		return Kick(playerid);
	}
	if(playerid > SLOTS2){
		new string[256];
		format(string,sizeof(string),"[INFO] %s (id: %d) foi kickado do servidor. MOTIVO: ID inválido.",PlayerName(playerid),playerid);
		SendClientMessageToAll(COLOR_COP_SWAT, string);
		writelog(string);
		return Kick(playerid);
	}
    new second,minute,hour,day,month,year,msg[256];
	gettime(hour,minute,second);
	getdate(year,month,day);
	if(hour > 3 && hour < 10){
		SendClientMessage(playerid, COLOR_COP_SWAT, "[VLR]: Infelizmente nosso servidor está fechado.");
		SendClientMessage(playerid, COLOR_COP_SWAT, "[VLR]: Abrimos todos os Dias de 12:00 até as 02:00 da manhã.");
		SendClientMessage(playerid, COLOR_COP_SWAT, "[VLR]: Obrigado e volte mais tarde.");
		format(msg,sizeof(msg),"[VLR] Hora Certa: %s:%s:%s",ApplyZero(hour),ApplyZero(minute),ApplyZero(second));
		SendClientMessage(playerid, COLOR_WHITE, msg);
		return Kick(playerid);
	}
	Logado[playerid] = 0;
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerColor(playerid,COLOR_UNLOGGED);
 	format(msg,sizeof(msg),"%s entrou no servidor.",PlayerName(playerid));
	for(new i = 0; i < SLOTS2; i++){
		if(i != playerid) SendClientMessage(i, COLOR_AZUL2, msg);
	}
	format(msg,sizeof(msg),"%s entra no servidor, com o ID %d.",PlayerName(playerid),playerid);
	writelog(msg);
    if(!fexist(PlayerFile(PlayerName(playerid)))){
		format(msg,sizeof(msg),"Olá %s seja Bem-vindo ao Virtual Life RPG Server",PlayerName(playerid));
		SendClientMessage(playerid, COLOR_AZUL2, msg);
		SendClientMessage(playerid, COLOR_WHITE, "O Virtual Life RPG é um gamemode que representa a vida real.");
		SendClientMessage(playerid, COLOR_WHITE, "Aqui você obterá um emprego, uma casa, carros, móveis, propriedades, tudo dependendo de sua condição financeira.");
		SendClientMessage(playerid, COLOR_WHITE, "Seu objetivo aqui é ir evoluindo de classe social, e junto curtir os lazeres(eventos) que oferecemos.");
		SendClientMessage(playerid, COLOR_WHITE, "Se cometer crimes, terá que resolver as contas com a policia, mas você também pode tentar escapar da lei.");
		SendClientMessage(playerid, COLOR_WHITE, "Ou seja é importante que saiba que aqui é proibido Death-Match(DM).");
		SendClientMessage(playerid, COLOR_PALHA, "Comados principais no anuncio ao lado -->");
	} else {
		format(msg,sizeof(msg),"Olá %s seja Bem-vindo novamente ao Virtual Life RPG Server",PlayerName(playerid));
		SendClientMessage(playerid, COLOR_AZUL2, msg);
	}
	if(fexist(PlayerFile(PlayerName(playerid)))){
		SendClientMessage(playerid, COLOR_WHITE, "Aguarde um momento para se logar...");
	}
	else{
        SendClientMessage(playerid, COLOR_WHITE, "Aguarde um momento para se registrar...");
	}
    NaoLogar[playerid] = 1;
	TimerLogin[playerid] = SetTimerEx("StartLogin",10000,0,"d",playerid);
	return 1;
}
public StartLogin(playerid){
    KillTimer(TimerLogin[playerid]);
	NaoLogar[playerid] = 0;
	if(fexist(PlayerFile(PlayerName(playerid)))){
		SendClientMessage(playerid, COLOR_JUIZ, "Você já tem registro. Por favor faça login com /logar [senha].");
	}
	else if(!fexist(PlayerFile(PlayerName(playerid)))) {
		SendClientMessage(playerid, COLOR_JUIZ, "Registre-se, faça a história, leia o tutorial e VIVA SUA VIDA. Espero que tenha um Bom Jogo.");
		TimerLogin[playerid] = SetTimerEx("MensagemRegistro",2000,0,"d",playerid);
	}
}
public MensagemRegistro(playerid){
    KillTimer(TimerLogin[playerid]);
	if(!fexist(PlayerFile(PlayerName(playerid)))) {
		SendClientMessage(playerid, COLOR_GRAY, "Você não tem registro. Por favor registre-se digitando /registrar [senha].");
	}
}
stock TrancarVeiculosConfiscados(playerid){
	new str[256];
	for(new v = 0; v < QTCARS+QtCars; v++){
	    set(str,VehicleFile(v));
		if(fexist(str)){
			if(vStats[v][Confiscado] == 1){
				if(Profissao[playerid] != COP_MILITAR && Profissao[playerid] != COP_RODOVIARIO && Profissao[playerid] != COP_SWAT && Profissao[playerid] != DELEGADO && Profissao[playerid] != COP_NARCOTICOS && Profissao[playerid] != EXERCITO){
				    TrancarVeiculo(playerid,v);
				}
			}
		}
	}
}
public OnPlayerRequestSpawn(playerid)
{
	if(!Logado[playerid]) SendClientMessage(playerid,COLOR_GRAY,"Não é possivel entrar no jogo. Por favor logue-se ou registre-se.");
	else LogarPlayer(playerid);
    return 0;
}

public OnPlayerDisconnect(playerid, reason)
{
	if(Entrevista[playerid][1] == 1){
	    Entrevista[Entrevista[playerid][3]][2]=0;
	    Entrevista[playerid][1]=0;
	    SetCameraBehindPlayer(playerid);
	    SetCameraBehindPlayer(Entrevista[playerid][3]);
	    TogglePlayerControllable(playerid,1);
	    TogglePlayerControllable(Entrevista[playerid][3],1);
	}
	if(Entrevista[playerid][2] == 1){
	    Entrevista[Entrevista[playerid][4]][1]=0;
	    Entrevista[playerid][2]=0;
	    SetCameraBehindPlayer(playerid);
	    SetCameraBehindPlayer(Entrevista[playerid][4]);
	    TogglePlayerControllable(playerid,1);
	    TogglePlayerControllable(Entrevista[playerid][4],1);
	}
	if(Algemado[playerid] == 1){
	    new plid=AlgemaInfo[playerid][0];
	    DisablePlayerRaceCheckpoint(plid);
	    EntregandoPrisioneiro[plid]=0;
	    SendClientMessage(plid, COLOR_GRAY, "O jogador saiu do servidor...");
    	TogglePlayerControllable(playerid,1);
	    Algemado[playerid]=0;
		Algemou[plid]=0;
		LevandoJogador[plid]=0;
		GetCopCars[playerid]=INVALID_VEHICLE_ID;
		AlgemaInfo[playerid][0]=-1;
	    AlgemaInfo[plid][1]=-1;
	    PodeAlgemar[plid][playerid]=0;
	}
	CarregouArmas[playerid] = 0;
	if(pStats[playerid][HistoriaFeita] == 1){
		new Float:X,Float:Y,Float:Z;
		GetPlayerPos(playerid,X,Y,Z);
		pStats[playerid][LastPosX] = X;
		pStats[playerid][LastPosY] = Y;
		pStats[playerid][LastPosZ] = Z;
		pStats[playerid][ContinuarPos] = 1;
	}
	new msg[256];
	switch(reason)
	{
		case 0: format(msg,sizeof(msg),"%s saiu do servidor (Queda de conexão)",PlayerName(playerid));
		case 1: format(msg,sizeof(msg),"%s saiu do servidor (Vontade própria)",PlayerName(playerid));
		case 2: format(msg,sizeof(msg),"%s saiu do servidor (Kickado/Banido)",PlayerName(playerid));
	}
	SendClientMessageToAll(COLOR_AZUL2,msg);
    numplayers--;
    KillTimer(AluguelTempo[playerid]);
    KillTimer(TempoFilmando[playerid]);
    KillTimer(TempoFilmando2[playerid]);
    KillTimer(HourTimer[playerid]);
    KillTimer(XPTTimer[playerid]);
    KillTimer(avisado[playerid]);
	KillTimer(PrisaoTimer[playerid][0]);
	KillTimer(TempoRastreamento[playerid]);
	KillTimer(TempoInternando[playerid]);
	KillTimer(TempoCaixaMensagem[playerid][0]);
	KillTimer(TempoCaixaMensagem[playerid][1]);
	KillTimer(TempoHoraExtra2[playerid]);
	KillTimer(TempoHoraExtra[playerid]);
    KillTimer(TempoLeisTransito[playerid]);
    KillTimer(TempoRua[playerid]);
    KillTimer(TempoPreso[playerid]);
	KillTimer(TempoCozinhando[playerid]);
 	KillTimer(TempoAnuncio[playerid]);
	KillTimer(TimerDJ[playerid]);
	KillTimer(TimerDeath[playerid]);
	KillTimer(TimerLogin[playerid]);
	KillTimer(TimerVenda[playerid]);
	KillTimer(TimerStrip[playerid]);
	KillTimer(TimerDivida[playerid]);
	KillTimer(TimerConserto[playerid]);
	KillTimer(TimerTuto[playerid]);
	KillTimer(TimerContinuacaoPos[playerid]);
	KillTimer(TimerCard[playerid]);
   	TextDrawHideForPlayer(playerid,Bemvindo);
   	TextDrawHideForPlayer(playerid,Bemvindo2);
   	TextDrawHideForPlayer(playerid,Bemvindo3);
   	TextDrawHideForPlayer(playerid,Bemvindo4);
   	TextDrawHideForPlayer(playerid,TextHora[playerid]);
   	TextDrawHideForPlayer(playerid,tdStrip);
   	TextDrawHideForPlayer(playerid,tdDesmanche);
   	TextDrawHideForPlayer(playerid,tdLixao);
   	TextDrawHideForPlayer(playerid,tdPizzaria);
   	TextDrawHideForPlayer(playerid,tdColheita);
   	TextDrawHideForPlayer(playerid,tdPlant);
   	TextDrawHideForPlayer(playerid,tdLeite);
   	TextDrawHideForPlayer(playerid,tdBanco);
   	TextDrawHideForPlayer(playerid,Posto);
   	TextDrawHideForPlayer(playerid,tdForte);
   	TextDrawHideForPlayer(playerid,Hospital);
   	TextDrawHideForPlayer(playerid,tdPesca);
   	TextDrawHideForPlayer(playerid,tdCoopPesca);
   	TextDrawHideForPlayer(playerid,tdHotel);
   	TextDrawHideForPlayer(playerid,tdPdCarga);
   	TextDrawHideForPlayer(playerid,tdConstrucao);
   	TextDrawHideForPlayer(playerid,td247);
   	TextDrawHideForPlayer(playerid,tdAreaCarga);
   	TextDrawHideForPlayer(playerid,tdStrip);
   	TextDrawHideForPlayer(playerid,tdSorveteria);
   	TextDrawHideForPlayer(playerid,tdLocadora);
   	TextDrawHideForPlayer(playerid,tdBar);
   	TextDrawHideForPlayer(playerid,tdLoteria);
   	TextDrawHideForPlayer(playerid,tdBalada);
   	TextDrawHideForPlayer(playerid,tdCOEVL);
   	TextDrawHideForPlayer(playerid,tdMorro);
	if(declaracoesabertas[playerid] == 1 || Audiencia[playerid] == 1){
        Audiencia[playerid] = 0;
        declaracoesabertas[playerid] = 0;
        SendClientMessageToAll(COLOR_JUIZ, "O Processo foi arquivado.");
	}
	if(EmLigacao[playerid] == 1){
	    EmLigacao[playerid]=0;
	    EmLigacao[CalledID[playerid]]=0;
	    SetPlayerSpecialAction(CalledID[playerid],SPECIAL_ACTION_STOPUSECELLPHONE);
	    SendClientMessage(CalledID[playerid],COLOR_GRAY,"Ligação terminada.");
		if(CobrancaCall[playerid] == 0){
		    KillTimer(CellTimer[CalledID[playerid]]);
		}
		if(CobrancaCall[playerid] == 1){
		    KillTimer(CellTimer[playerid]);
		}
	}
	if(SM[playerid] == DJ){
	    HaveDJ = 0;
	    SM[playerid] = NONE;
	}
	if(Rastreando[playerid] == 1){
		SendClientMessage(Rastreador[playerid], COLOR_GRAY, "O jogador se desconectou e o rastreador foi desativado!");
		DesativarRastreador(playerid);
	}
	if(Rastreado[playerid] == 1){
	    SendClientMessage(Rastreador2[playerid], COLOR_GRAY, "O jogador se desconectou e o seu rastreador foi desativado!");
	    DesativarRastreador(Rastreador2[playerid]);
	}
	if(ComDocs[playerid] == 1){
	    SendClientMessage(GiveDocs[playerid], COLOR_JUIZ, "Seus documentos foram devolvidos pois o policial saiu do servidor!");
		EntregouDocs[GiveDocs[playerid]] = 0;
		ComDocs[playerid] = 0;
	}
	if(EntregouDocs[playerid] == 1){
	    SendClientMessage(ReceiveDocs[playerid], COLOR_WHITE, "Os documentos do outro jogador foram devolvidos para o dono pois ele saiu do servidor!");
		EntregouDocs[playerid] = 0;
		ComDocs[ReceiveDocs[playerid]] = 0;
	}
	switch (Logado[playerid])
    {
        case 0:
		{
				format(msg,sizeof(msg),"%s (ID: %d) deixou o servidor sem se registrar/logar.",PlayerName(playerid),playerid);
				writelog(msg);
				printf("Jogador %s (ID: %d) deixou o servidor sem se registrar/logar",PlayerName(playerid),playerid);
		}
		case 1:
  		{
				format(msg,sizeof(msg),"%s (ID %d) está deixando o servidor. Salvando dados.",PlayerName(playerid),playerid);
				writelog(msg);
		 		printf("Jogador %s (ID: %d) deixou o servidor. Seus dados foram salvos com sucesso.",PlayerName(playerid),playerid);
		}
    }
    for(new z = 0; z < sizeof(zones); z++){
		GangZoneHideForPlayer(playerid, GZ[z]);
	}
	if(Logado[playerid] == 1)
	{
		SavePlayer(playerid);
	}
	Logado[playerid] = 0;
    SetPlayerHealth(playerid,100);
    ZerarVariaveis(playerid);
}
public ApplyAnimCrack(playerid){
    ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
}
public OnPlayerSpawn(playerid){
    TextDrawShowForPlayer(playerid, TextVL);
    CreateGangZonesForPlayer(playerid);
	zoneupdates[playerid] = 1;
	playerzone[playerid] = -1;
	if(!zoneupdate) zoneupdate = SetTimer("updatezones",8000,1);
	if(Morreu2[playerid] == 1){
	    SetPlayerPos(playerid,DeadPos[playerid][0],DeadPos[playerid][1],DeadPos[playerid][2]);
		SetPlayerHealth(playerid,1);
		TogglePlayerControllable(playerid,0);
		SetTimerEx("ApplyAnimCrack",1000,0,"d",playerid);
		CtgDead[playerid] = 5;
		Morrendo[playerid] = 1;
		TimerDeath[playerid] = SetTimerEx("CtDead",3000,0,"d",playerid);
		Morreu2[playerid] = 0;
	}
	if(EstouNoCC[playerid] == 1){
		SetPlayerCCGroup(playerid,EquipeCC[playerid]);
	}
	if(Capturado[playerid] == 1 && NoPL[playerid] == 1 && Equipe[playerid] == 1){
		SetPlayerPos(playerid,-272.4936,-2146.8669,28.6770);
		SetPlayerColor(playerid,COLOR_LADRAO);
		SetPlayerHealth(playerid,5.0);
		SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] Você foi capturado, não saiá daqui!");
		return 1;
	}
	ResetPlayerWeapons(playerid);
	GivePlayerWeapon(playerid,pStats[playerid][WeaponSlot0],pStats[playerid][WeaponSlot0Ammo]);
	GivePlayerWeapon(playerid,pStats[playerid][WeaponSlot1],pStats[playerid][WeaponSlot1Ammo]);
	GivePlayerWeapon(playerid,pStats[playerid][WeaponSlot2],pStats[playerid][WeaponSlot2Ammo]);
	GivePlayerWeapon(playerid,pStats[playerid][WeaponSlot3],pStats[playerid][WeaponSlot3Ammo]);
	GivePlayerWeapon(playerid,pStats[playerid][WeaponSlot4],pStats[playerid][WeaponSlot4Ammo]);
	GivePlayerWeapon(playerid,pStats[playerid][WeaponSlot5],pStats[playerid][WeaponSlot5Ammo]);
	GivePlayerWeapon(playerid,pStats[playerid][WeaponSlot6],pStats[playerid][WeaponSlot6Ammo]);
	GivePlayerWeapon(playerid,pStats[playerid][WeaponSlot7],pStats[playerid][WeaponSlot7Ammo]);
	GivePlayerWeapon(playerid,pStats[playerid][WeaponSlot8],pStats[playerid][WeaponSlot8Ammo]);
	GivePlayerWeapon(playerid,pStats[playerid][WeaponSlot9],pStats[playerid][WeaponSlot9Ammo]);
	GivePlayerWeapon(playerid,pStats[playerid][WeaponSlot10],pStats[playerid][WeaponSlot10Ammo]);
	GivePlayerWeapon(playerid,pStats[playerid][WeaponSlot11],pStats[playerid][WeaponSlot11Ammo]);
	GivePlayerWeapon(playerid,pStats[playerid][WeaponSlot12],pStats[playerid][WeaponSlot12Ammo]);
    CarregouArmas[playerid] = 1;
	if(NoPL[playerid] == 1 && Equipe[playerid] == 1) SetPlayerColor(playerid, COLOR_LADRAO);
	if(NoPL[playerid] == 1 && Equipe[playerid] == 2) SetPlayerColor(playerid, COLOR_POLICIA);
	if(AcabouAssistirTV[playerid] == 1) return 0;
	new name[30];
	GetPlayerName(playerid, name, sizeof(name));
	SetPlayerArmour(playerid, pStats[playerid][Colete]);
    PlayerPlaySound(playerid, 1186, 0.0,0.0,0.0);
	TextDrawHideForPlayer(playerid,Bemvindo);
	TextDrawHideForPlayer(playerid,Bemvindo2);
	TextDrawHideForPlayer(playerid,Bemvindo3);
	TextDrawHideForPlayer(playerid,Bemvindo4);
	TextDrawHideForPlayer(playerid,TextHora[playerid]);
	SetPlayerColor(playerid,ProfColors[Profissao[playerid]]);
	GivePlayerWeapon(playerid,ProfWeapons[Profissao[playerid]][0],ProfWeapons[Profissao[playerid]][1]);
	GivePlayerWeapon(playerid,ProfWeapons[Profissao[playerid]][2],ProfWeapons[Profissao[playerid]][3]);
	GivePlayerWeapon(playerid,ProfWeapons[Profissao[playerid]][4],ProfWeapons[Profissao[playerid]][5]);
	GangZoneShowForPlayer(playerid, PescaArea, COLOR_PESCADOR);
	GangZoneShowForPlayer(playerid, InstrutorArea, COLOR_INSTRUTOR);
	GangZoneShowForPlayer(playerid, DesmancheArea, COLOR_RED2);
	GangZoneShowForPlayer(playerid, TaxiArea, COLOR_TAXISTA);
	GangZoneShowForPlayer(playerid, ProstitutaArea, COLOR_ROSA);
	GangZoneShowForPlayer(playerid, SorveteriaArea, COLOR_ROSACLARO);
	if((pStats[playerid][Preso] == 1 || pStats[playerid][Wanted] > 0) && Morrendo[playerid] == 0){
		new cela;
		new string[256];
		pStats[playerid][Wanted] = 0;
		SetPlayerWantedLevel(playerid,0);
		Presos[playerid] = 1;
		CelularBloqueado[playerid] = 1;
		cela = random(3);
		SetPlayerFacingAngle(playerid,0);
		SetPlayerInterior(playerid,10);
		TempoPrisaoFaltado[playerid] = TempoPrisao[pStats[playerid][MotivoPrisao]];
		PrisaoTimer[playerid][0]=SetTimerEx("AvisoTempoRestante",60000,0,"d",playerid);
		PrisaoTimer[playerid][1]=1;
		SetPlayerPos(playerid,Celas[cela][0],Celas[cela][1],Celas[cela][2]);
		format(string,sizeof(string),"[DELEGACIA] Você cometeu um crime: %s",Motivos[pStats[playerid][MotivoPrisao]]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string,sizeof(string), "[DELEGACIA] Você pagará esse crime ficando preso %d hora(s) no jogo!",TempoPrisao[pStats[playerid][MotivoPrisao]]);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
    return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	new stringdeath[256];
	if(killerid != INVALID_PLAYER_ID){
		format(stringdeath,sizeof(stringdeath),"%s morreu por %s",PlayerName(playerid),PlayerName(killerid));
	}
	else{
	    format(stringdeath,sizeof(stringdeath),"%s se matou",PlayerName(playerid));
	}
	SendClientMessageAdmin(COLOR_WHITE, stringdeath);
	writelog(stringdeath);
	print(stringdeath);
	pStats[playerid][Vida] = 100;
	NaCasa[playerid] = 0;
	CarregouArmas[playerid] = 0;
    new string[256];
    if(NoPL[playerid] == 1 && Capturado[playerid] == 0 && PLIniciou == 1){
	    if(Equipe[playerid] == 1){
	        new str[256];
			if(killerid != INVALID_PLAYER_ID){
			    format(str,sizeof(str),"[POLÍCIA E LADRÃO] O ladrão %s foi capturado por %s",PlayerName(playerid),PlayerName(killerid));
			}
			else{
			    format(str,sizeof(str),"[POLÍCIA E LADRÃO] O ladrão %s foi capturado por ser encontrado morto",PlayerName(playerid));
			}
			SendClientMessageToAll(COLOR_LIGHT_YELLOW, str);
			Capturado[playerid] = 1;
			if(QtCapturadosPL() == QtLadroesPL()){
			    PLIniciou = 0;
        		QtCapturados = 0;
			    SendClientMessageToAll(COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] Todos os ladrões foram capturados a equipe dos policiais venceu!");
			    for(new i = 0; i < SLOTS2; i++){
		    		if(IsPlayerConnected(i) && NoPL[i] == 1){
	    		    	GameTextForPlayer(i, "~w~Equipe dos policiais~n~~r~venceu",4000,0);
						if(Equipe[i] == 2){
					    	AddPlayerMoney(i,100,7);
					    	SendClientMessage(i, COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] Sua equipe venceu e você recebeu $100");
						}
						RetirarPL(i);
					}
				}
			}
		}
	}
	if(pStats[killerid][Gangue] == 1){
		playerkillzone[killerid][GetPlayerZone(killerid)]++;
		playerdeathzone[playerid][GetPlayerZone(playerid)]++;
		if(playerkillzone[killerid][GetPlayerZone(killerid)] > (playerdeathzone[killerid][GetPlayerZone(killerid)] + 10)){
			if(!IsPlayerInGangTerritory(killerid)){
			    SetZoneForGang(GetPlayerZone(killerid),pStats[killerid][GangueNome]);
				SendClientMessage(killerid, GetPlayerGangColor(killerid), "Agora esse território pertence à sua gangue!");
				new msg[256];
				format(msg,sizeof(msg),"%s conquistou um território para a gangue nas proximidades de %s!",PlayerName(killerid),zones[GetPlayerZone(killerid)][zonename]);
				SendClientMessageGang(pStats[killerid][GangueNome],GetPlayerGangColor(killerid), msg);
			}
		}
	}
    if(PlayerDerby[playerid] == 1){
	   	PlayerDerby[playerid] = 0;
	   	TogglePlayerControllable(playerid,1);
	   	DerbyIniciado[playerid] = 0;
		format(string, sizeof(string), "[ESTÁDIO] %s foi desclassificado pois saiu do seu carro, sua posição: %d/%d", PlayerName(playerid),QtDerbeiro(),contagemof);
		SendClientMessageToAll(COLOR_PALHA, string);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 2693.9199,-1701.8795,11.0741);
  	}
 	if(AcabouMorrer[playerid] == 0){
  		GetPlayerPos(playerid,DeadPos[playerid][0],DeadPos[playerid][1],DeadPos[playerid][2]);
		Morreu2[playerid] = 1;
		GameTextForPlayer(playerid, "~r~Foi pro saco", 4000, 1);
		if(!NoPL[playerid]){
			for(new i=0; i<SLOTS2; i++){
				if(GetDistanceBetweenPlayers(i,killerid) < 20 && Camuflado[killerid] == 0){
				    if(i != killerid && i != playerid){
				        SendClientMessage(killerid, COLOR_RED2, "Alguém viu o seu ato...");
						format(string,sizeof(string),"Você viu o ato que %s cometeu com %s, deseja entregá-lo?",PlayerName(killerid),PlayerName(playerid));
						SendClientMessage(i, COLOR_WHITE, string);
						SendClientMessage(i, COLOR_LIXEIRO, "Para acusar digite /acusar caso contrário /naoacusar");
                        PlayerKiller[i] = killerid;
						PlayerDeath[i] = playerid;
						Reason[i] = reason;
						Acusar[i] = 1;
					} else {
						new sorte = random(6);
						if(sorte == 4){
							format(string, sizeof(string), "[CENTRAL] [Crime: Homicídio Culposo].  Criminoso: %s - Vítima %s - Testemunha: Desconhecido.",PlayerName(killerid),PlayerName(playerid));
							SendClientMessageToAll(COLOR_COP_SWAT, string);
							SendClientMessageToAll(COLOR_COP_SWAT, "[CENTRA] A unidade que tiver conhecimento da localização de alguém envolvido se diriga ao local, câmbio.");
						}
					}
				}
			}
			Contrabando[playerid] = 0;
			Receita[playerid] = 0;
			pStats[killerid][Matou]++;
			if(pStats[killerid][Matou] == 5){
			    pStats[killerid][Matou] = 0;
			    pStats[killerid][Respeito]++;
				new resp = random(9);
				if(resp == 0){
					format(string,sizeof(string),"Quero ver quem não vai respeitar! Você tem %d pontos de respeito agora.",pStats[killerid][Respeito]);
	      			SendClientMessage(killerid, COLOR_TRAFICANTE , string);
				}
				if(resp == 1){
					format(string,sizeof(string),"Moral é outra coisa! Com %d pontos de respeito você está indo bem.",pStats[killerid][Respeito]);
	      			SendClientMessage(killerid, COLOR_TRAFICANTE , string);
				}
				if(resp == 2){
					format(string,sizeof(string),"Segura, tenta segurar! Você já está com %d pontos de respeito.",pStats[killerid][Respeito]);
	      			SendClientMessage(killerid, COLOR_TRAFICANTE , string);
				}
				if(resp == 3){
					format(string,sizeof(string),"SÓ DÁ VOCÊ! Parabéns conseguiu mais 1 ponto de respeito. TOTAL: %d.",pStats[killerid][Respeito]);
	      			SendClientMessage(killerid, COLOR_TRAFICANTE , string);
				}
				if(resp == 4){
					format(string,sizeof(string),"Nussaaa! Um pontinho de respeitooo a mais! TOTAL: %d.",pStats[killerid][Respeito]);
	      			SendClientMessage(killerid, COLOR_TRAFICANTE , string);
				}
				if(resp == 5){
					format(string,sizeof(string),"Guarde bem isso! Você está com o respeito aumentando. %d pontos.",pStats[killerid][Respeito]);
	      			SendClientMessage(killerid, COLOR_TRAFICANTE , string);
				}
				if(resp == 6){
					format(string,sizeof(string),"Parabéns, mais um ponto de respeito. Totalizando: %d pontos.",pStats[killerid][Respeito]);
	      			SendClientMessage(killerid, COLOR_TRAFICANTE , string);
				}
				if(resp == 7){
					format(string,sizeof(string),"Nossa, você é Brutal, todos temem você agora que tem %d pontos de respeito.",pStats[killerid][Respeito]);
	      			SendClientMessage(killerid, COLOR_TRAFICANTE , string);
				}
				if(resp == 8){
					format(string,sizeof(string),"ISSO AÍ MOSTROU PRA ELE! Todos se impressionaram com sua crueldade, você agora tem %d pontos de respeito.",pStats[killerid][Respeito]);
	      			SendClientMessage(killerid, COLOR_TRAFICANTE , string);
				}
			}
			pStats[playerid][Morreu]++;
			if(pStats[playerid][Morreu] == 5){
			    pStats[playerid][Morreu] = 0;
			    pStats[playerid][Respeito]--;
				new resp = random(8);
				if(resp == 0){
					format(string,sizeof(string),"Que isso cara? Assim você fica desmoralizado! Você perdeu 1 ponto de respeito. TOTAL: %d",pStats[playerid][Respeito]);
	      			SendClientMessage(killerid, COLOR_TRAFICANTE , string);
				}
				if(resp == 1){
					format(string,sizeof(string),"Nossa! Você foi motivo de piada! Perdeu 1 ponto de respeito. Agora você possue: %d pontos de respeito.",pStats[playerid][Respeito]);
	      			SendClientMessage(killerid, COLOR_TRAFICANTE , string);
				}
				if(resp == 2){
					format(string,sizeof(string),"HuaHAHuahUHAuHAuA, perdeu 1 ponto de respeito! Por ter morrido, tente melhorar. TOTAL: %d.",pStats[playerid][Respeito]);
	      			SendClientMessage(killerid, COLOR_TRAFICANTE , string);
				}
				if(resp == 3){
					format(string,sizeof(string),"Tem gente passando na sua frente, morrendo assim você se dá mal. Perdeu 1 ponto de respeito.TOTAL: %d.",pStats[playerid][Respeito]);
	      			SendClientMessage(killerid, COLOR_TRAFICANTE , string);
				}
				if(resp == 4){
					format(string,sizeof(string),"Nóóóóóóóóóóssaaa! Assim não vai né! Menos um pontinho de respeito. TOTAL: %d.",pStats[playerid][Respeito]);
	      			SendClientMessage(killerid, COLOR_TRAFICANTE , string);
				}
				if(resp == 5){
					format(string,sizeof(string),"Caramba!!! Perdeu um ponto de respeito por ter morrido. Parabéns ¬¬' %d pontos.",pStats[playerid][Respeito]);
	      			SendClientMessage(killerid, COLOR_TRAFICANTE , string);
				}
				if(resp == 6){
					format(string,sizeof(string),"Parabéns? NÃO. Você perdeu um ponto de respeito por ter morrido. TOTAL: %d pontos.",pStats[playerid][Respeito]);
	      			SendClientMessage(killerid, COLOR_TRAFICANTE , string);
				}
				if(resp == 7){
					format(string,sizeof(string),"AFF que isso pow?! Sua moral está indo pro chão, acaba de perder 1 ponto de respeito. TOTAL: %d",pStats[playerid][Respeito]);
	      			SendClientMessage(killerid, COLOR_TRAFICANTE , string);
				}
			}
    		DisablePlayerCheckpoint(playerid);
			if(pStats[playerid][ValorCabeca] != 0 && Profissao[killerid] != ASSASSINO){
	   		 	new str[256];
				SendClientMessage(killerid, COLOR_GREEN, "Muito bem! Matou um jogador que estava com a cabeça premiada!");
				format(str,sizeof(str),"Você recebeu: $%d",pStats[playerid][ValorCabeca]);
				SendClientMessage(killerid, COLOR_GREEN, string);
				AddPlayerMoney(killerid, pStats[playerid][ValorCabeca], 6);
				AcrescentarExPoints(killerid,1);
                pStats[playerid][ValorCabeca] = 0;
			}
			if(pStats[playerid][Wanted] > 0){
			    SetSpawnInfo(playerid, 1, pStats[playerid][Skin], 262.9540, 78.4339, 1001.0391, 270.0000, 0, 0, 0, 0, 0, 0);
				pStats[playerid][Preso] = 1;
				format(string,sizeof(string), "[NOTICIAS] O criminoso %s foi encontrado inconsciente e foi entregado para a Delegacia!",PlayerName(playerid));
				SendClientMessageToAll(COLOR_WHITE, string);
			}
    		if(killerid != INVALID_PLAYER_ID) {
    	   	 	if(pStats[playerid][Wanted] > 0 && Profissao[killerid] != ASSASSINO && Profissao[killerid] != ASSALTANTE){
					if(Camuflado[killerid] == 0){
						format(string, sizeof(string), "[CENTRAL] Você matou um Procurado Level %d, não aconselhamos fazer nosso trabalho.", pStats[playerid][Wanted]);
						SendClientMessage(killerid,COLOR_COP_SWAT, string);
						format(string, sizeof(string), "[CENTRAL POLICIA] Excelentissímo Senhor Juiz. [Crime: Homicídio] Vítima1? :%s - Assassinou - Vítima2? :%s procurado pela polícia, verifique se foi legítima defesa",PlayerName(killerid), PlayerName(playerid));
						SendClientMessageJuiz(COLOR_JUIZ, string);
						pStats[killerid][DetectadoMorte] += 1;
					} else if(Camuflado[killerid] == 0){
						format(string, sizeof(string), "[CENTRAL] Você matou um Procurado Level %d, não aconselhamos fazer nosso trabalho.", pStats[playerid][Wanted]);
						SendClientMessage(killerid,COLOR_COP_SWAT, string);
						format(string, sizeof(string), "[CENTRAL POLICIA] Excelentissímo Senhor Juiz. [Crime: Homicídio] Vítima1: Desconhecido - Assassinou - Vítima2? :%s procurado pela polícia, tente apurar quem o matou.", PlayerName(playerid));
						SendClientMessageJuiz(COLOR_JUIZ, string);
					}
				}
				if(Profissao[killerid] == COP_MILITAR || Profissao[killerid] == COP_RODOVIARIO || Profissao[killerid] == COP_SWAT || Profissao[killerid] == DELEGADO || Profissao[killerid] == COP_NARCOTICOS || Profissao[killerid] == EXERCITO){
				    SetPlayerWantedLevel(killerid, 0);
				    SetPlayerWantedLevel(playerid, 0);
				    pStats[killerid][Wanted] = 0;
				    if(ChavePrisao[playerid] == 1){
					    SendClientMessage(playerid, COLOR_GRAY, "Você foi morto por um policial e a chave da cadeia foi tomada de você!");
						SendClientMessage(killerid, COLOR_COP_SWAT, "[CENTRAL] Bom trabalho! A chave da cadeia foi retomada.");
						ChavePrisao[playerid] = 0;
						AcrescentarExPoints(killerid,1);
					}
					if(Profissao[playerid] == ASSASSINO || Profissao[playerid] == ASSALTANTE || Profissao[playerid] == CONTRABANDISTA){
					    if(pStats[playerid][Wanted] > 0){
				   			AcrescentarExPoints(killerid,1);
							DiminuirExPoints(playerid,1);
       		 	    		format(string, sizeof(string), "[CENTRAL] Bom Trabalho Oficial. Você matou um Procurado Level %d. [ Recompensa: $%d.000 ].", pStats[playerid][Wanted], pStats[playerid][Wanted]*1000);
							SendClientMessage(killerid,COLOR_COP_SWAT, string);
							new granadar = pStats[playerid][Wanted] * 1000;
							AddPlayerMoney(killerid, granadar, 3);
							for(new i=0; i<SLOTS2; i++){
							    if(Profissao[i] == JORNALISTA){
									format(string,sizeof(string),"[JORNAL] O Oficial da Polícia %s matou o Criminoso %s, Procurado Level: %d.",PlayerName(killerid),PlayerName(playerid),pStats[playerid][Wanted]);
									SendClientMessage(i, COLOR_JORNALISTA, string);
								}
							}
						}
        				for(new i=0; i<SLOTS2; i++){
							if(Cativeiro[i] == 1){
			   					if(Sequestrador[i] == playerid){
									if(i != INVALID_PLAYER_ID){
				   						Cativeiro[i] = 0;
			   							Sequestro[i] = 0;
			   							AcrescentarExPoints(killerid,1);
			   							DiminuirExPoints(playerid,1);
			   							SendClientMessage(playerid, COLOR_GRAY, "As pessoas que você sequestrou foram soltas porque você morreu!");
			   							format(string, sizeof(string), "[CENTRAL] Olá %s você está livre! Graças ao excelente trabalho de %s, ele conseguiu te libertar.",PlayerName(killerid));
										SendClientMessage(i, COLOR_COP_SWAT, string);
										format(string,sizeof(string),"[JORNAL] Segundo fontes da polícia, o Oficial Sr. %s acabou com o cativeiro que %s estava, %s foi morto quando trocava tiros.",PlayerName(killerid),PlayerName(i),PlayerName(playerid));
										SendClientMessageToAll(COLOR_JORNALISTA, string);
										SendClientMessageToAll(COLOR_JORNALISTA, "[JORNAL] A Recompensa foi paga ao Oficial. Valor: $$Não Declarado$$.");
										AddPlayerMoney(killerid,400,9);
									}
								}
							}
						}
					}
					if(Profissao[playerid] == TRAFICANTE || Profissao[playerid] == LIDER_DE_TRAFICO){
					    if(pStats[playerid][Wanted] > 0){
					        if(Profissao[killerid] == COP_NARCOTICOS){
					   			AcrescentarExPoints(killerid,1);
								DiminuirExPoints(playerid,1);
	       		 	    		format(string, sizeof(string), "[CENTRAL] Bom Trabalho Oficial. Você matou o Traficante Level %d. [ Recompensa: $%d.000 ].", pStats[playerid][Wanted], pStats[playerid][Wanted]*1000);
								SendClientMessage(killerid,COLOR_COP_SWAT, string);
								new granadar = pStats[playerid][Wanted] * 1000;
								AddPlayerMoney(killerid, granadar, 3);
								for(new i=0; i<SLOTS2; i++){
								    if(Profissao[i] == JORNALISTA){
										format(string,sizeof(string),"[JORNAL] O Oficial da Polícia %s matou o Traficante %s, Procurado Level: %d.",PlayerName(killerid),PlayerName(playerid),pStats[playerid][Wanted]);
										SendClientMessage(i, COLOR_JORNALISTA, string);
									}
								}
							} else {
	       		 	    		SendClientMessage(killerid,COLOR_COP_SWAT,"[CENTRAL] Bom Trabalho Oficial. Porém seu trabalho não é com Traficantes, deixe para os Narcóticos fazerem isso.");
								for(new i=0; i<SLOTS2; i++){
								    if(Profissao[i] == JORNALISTA){
										format(string,sizeof(string),"[JORNAL] O Oficial da Polícia %s matou o Traficante %s, Procurado Level: %d.",PlayerName(killerid),PlayerName(playerid),pStats[playerid][Wanted]);
										SendClientMessage(i, COLOR_JORNALISTA, string);
									}
								}
							}
						}
					}
				}
				if(Profissao[killerid] == ASSASSINO || Profissao[killerid] == ASSALTANTE || Profissao[killerid] == CONTRABANDISTA || Profissao[killerid] == TRAFICANTE || Profissao[killerid] == LIDER_DE_TRAFICO){
					if(Profissao[playerid] == COP_MILITAR || Profissao[playerid] == COP_RODOVIARIO || Profissao[playerid] == COP_SWAT || Profissao[playerid] == DELEGADO || Profissao[playerid] == COP_NARCOTICOS || Profissao[playerid] == EXERCITO){
						if(Profissao[killerid] == TRAFICANTE || Profissao[killerid] == LIDER_DE_TRAFICO){
							if(Profissao[playerid] == COP_NARCOTICOS){
           						if(Camuflado[killerid] == 0){
							   		AcrescentarExPoints(killerid,1);
									DiminuirExPoints(playerid,1);
									SendClientMessage(killerid,COLOR_TRAFICANTE, "Boa Mano, lugar de policial é no Hospital, ainda bem que tu matou esse policial.");
			       		 	    	SendClientMessage(playerid,COLOR_COP_SWAT, "[CENTRAL] Oficial, você deu sorte, conseguimos lhe salvar, dá próxima não brinque com traficantes.");
									format(string, sizeof(string), "[CENTRAL] Todas as unidades, oficial ferido. [ Crime: Homicídio Doloso ] [ Vítima: %s ] [ Assassino: %s ] [ Testemunha: Desconhecido ].",PlayerName(playerid),PlayerName(killerid));
									SendClientMessageToAll(COLOR_COP_SWAT, string);
									format(string, sizeof(string), "[CENTRAL] * Repito * Todas as unidades, oficial ferido, dirigam-se ao local do ocorrido, câmbio.",PlayerName(playerid),PlayerName(killerid));
									SendClientMessageToAll(COLOR_COP_SWAT, string);
									pStats[killerid][DetectadoMorte] += 1;
									for(new i=0; i<SLOTS2; i++){
									    if(Profissao[i] == JORNALISTA){
											SendClientMessage(i, COLOR_JORNALISTA,"[JORNAL] Atenção! A relatos de que um Policial da Narcoticos foi assassinado! Suspeita-se de algum traficante. Vá checar isso.");
										}
									}
								} else {
							   		AcrescentarExPoints(killerid,1);
									DiminuirExPoints(playerid,1);
									SendClientMessage(killerid,COLOR_TRAFICANTE, "Boa Mano, lugar de policial é no Hospital, ainda bem que tu matou esse policial.");
			       		 	    	SendClientMessage(playerid,COLOR_COP_SWAT, "[CENTRAL] Oficial, você deu sorte, conseguimos lhe salvar, dá próxima não brinque com traficantes.");
									format(string, sizeof(string), "[CENTRAL] Todas as unidades, oficial ferido. [ Crime: Homicídio Doloso ] [ Vítima: %s ] [ Assassino: Desconhecido Camuflado ] [ Testemunha: Desconhecido ].",PlayerName(playerid));
									SendClientMessageToAll(COLOR_COP_SWAT, string);
									format(string, sizeof(string), "[CENTRAL] * Repito * Todas as unidades, oficial ferido, dirigam-se ao local do ocorrido, câmbio.",PlayerName(playerid),PlayerName(killerid));
									SendClientMessageToAll(COLOR_COP_SWAT, string);
									for(new i=0; i<SLOTS2; i++){
									    if(Profissao[i] == JORNALISTA){
											SendClientMessage(i, COLOR_JORNALISTA,"[JORNAL] Atenção! A relatos de que um Policial da Narcoticos foi assassinado! Suspeita-se de algum traficante. Vá checar isso.");
										}
									}
								}
							} else {
			       		    	SendClientMessage(playerid, COLOR_COP_SWAT,"[CENTRAL] Você foi vitimado por um Traficante, tome providências junte viaturas e procure ele.");
								for(new i=0; i<SLOTS2; i++){
								    if(Profissao[i] == JORNALISTA){
										SendClientMessage(i, COLOR_JORNALISTA,"[JORNAL] Atenção! A relatos de que um Policial foi assassinado! Suspeita-se de algum criminoso da pesada. Vá checar isso.");
									}
								}
							}
						} else {
							if(Profissao[playerid] == COP_MILITAR || Profissao[playerid] == COP_RODOVIARIO || Profissao[playerid] == COP_SWAT || Profissao[playerid] == DELEGADO || Profissao[playerid] == EXERCITO){
                             	if(Camuflado[killerid] == 0){
		  							AcrescentarExPoints(killerid,1);
									DiminuirExPoints(playerid,1);
									SendClientMessage(killerid,COLOR_TRAFICANTE, "Eita cara. Esse crime pode lascar pro teu lado! Toma cuidado.. É bom você tá camuflado. CANA É CANA.");
			       		 	    	SendClientMessage(playerid,COLOR_COP_SWAT, "[CENTRAL] Oficial, você deu sorte, conseguimos lhe salvar, dá próxima não brinque com bandidos!");
									format(string, sizeof(string), "[CENTRAL] Todas as unidades, oficial ferido. [ Crime: Homicídio Doloso ] [ Vítima: %s ] [ Assassino: %s ] [ Testemunha: Desconhecido ].",PlayerName(playerid),PlayerName(killerid));
									SendClientMessageToAll(COLOR_COP_SWAT, string);
									format(string, sizeof(string), "[CENTRAL] * Repito * Todas as unidades, oficial ferido, dirigam-se ao local do ocorrido, câmbio.",PlayerName(playerid),PlayerName(killerid));
									SendClientMessageToAll(COLOR_COP_SWAT, string);
									pStats[killerid][DetectadoMorte] += 1;
									for(new i=0; i<SLOTS2; i++){
									    if(Profissao[i] == JORNALISTA){
											SendClientMessage(i, COLOR_JORNALISTA,"[JORNAL] Atenção! Informantes repassaram que um Policial foi assassinado! Suspeita-se de algum bandido barra pesada. Vá checar isso.");
										}
									}
								} else {
		  							AcrescentarExPoints(killerid,1);
									DiminuirExPoints(playerid,1);
									SendClientMessage(killerid,COLOR_TRAFICANTE, "Eita cara. Esse crime pode lascar pro teu lado! Toma cuidado.. É bom você tá camuflado. CANA É CANA.");
			       		 	    	SendClientMessage(playerid,COLOR_COP_SWAT, "[CENTRAL] Oficial, você deu sorte, conseguimos lhe salvar, dá próxima não brinque com bandidos!");
									format(string, sizeof(string), "[CENTRAL] Todas as unidades, oficial ferido. [ Crime: Homicídio Doloso ] [ Vítima: %s ] [ Assassino: Desconhecido Camuflado ] [ Testemunha: Desconhecido ].",PlayerName(playerid));
									SendClientMessageToAll(COLOR_COP_SWAT, string);
									format(string, sizeof(string), "[CENTRAL] * Repito * Todas as unidades, oficial ferido, dirigam-se ao local do ocorrido, câmbio.",PlayerName(playerid),PlayerName(killerid));
									SendClientMessageToAll(COLOR_COP_SWAT, string);
									for(new i=0; i<SLOTS2; i++){
									    if(Profissao[i] == JORNALISTA){
											SendClientMessage(i, COLOR_JORNALISTA,"[JORNAL] Atenção! Informantes repassaram que um Policial foi assassinado! Suspeita-se de algum bandido barra pesada. Vá checar isso.");
										}
									}
								}
							} else {
							    if(Camuflado[killerid] == 0){
								    SendClientMessage(killerid, COLOR_ASSASSINO,"Você matando Narcóticos, pode comprar Briga com alguém, vê lá! Nem Camuflado está. Poderá ter problemas.");
				       		    	SendClientMessage(playerid, COLOR_COP_SWAT,"[CENTRAL] Você foi vitimado por um Traficante, tome providências junte viaturas e procure ele.");
									format(string, sizeof(string), "[CENTRAL] Todas as unidades, Oficial baleado. [ Crime: Homicídio Doloso ] [ Vítima: %s ] [ Assassino: %s ] [ Testemunha: Desconhecido ].",PlayerName(playerid),PlayerName(killerid));
									SendClientMessageToAll(COLOR_COP_SWAT, string);
									format(string, sizeof(string), "[CENTRAL] * Repito * Todas as unidades, oficial baleado, dirigam-se ao local do ocorrido, câmbio.",PlayerName(playerid),PlayerName(killerid));
									SendClientMessageToAll(COLOR_COP_SWAT, string);
									pStats[killerid][DetectadoMorte] += 1;
									for(new i=0; i<SLOTS2; i++){
									    if(Profissao[i] == JORNALISTA){
											SendClientMessage(i, COLOR_JORNALISTA,"[JORNAL] Atenção! A relatos de que um Policial foi assassinado! Suspeita-se de algum bandido. Vá checar isso.");
										}
									}
								} else {
								    SendClientMessage(killerid, COLOR_ASSASSINO,"Você matando Narcóticos, pode comprar Briga com alguém, vê lá! Sua sorte é que está Camuflado.");
				       		    	SendClientMessage(playerid, COLOR_COP_SWAT,"[CENTRAL] Você foi vitimado por um Traficante, tome providências junte viaturas e procure ele.");
									format(string, sizeof(string), "[CENTRAL] Todas as unidades, Oficial baleado. [ Crime: Homicídio Doloso ] [ Vítima: %s ] [ Assassino: Desconhecido Camuflado ] [ Testemunha: Desconhecido ].",PlayerName(playerid));
									SendClientMessageToAll(COLOR_COP_SWAT, string);
									format(string, sizeof(string), "[CENTRAL] * Repito * Todas as unidades, oficial baleado, dirigam-se ao local do ocorrido, câmbio.",PlayerName(playerid),PlayerName(killerid));
									SendClientMessageToAll(COLOR_COP_SWAT, string);
    								for(new i=0; i<SLOTS2; i++){
									    if(Profissao[i] == JORNALISTA){
											SendClientMessage(i, COLOR_JORNALISTA,"[JORNAL] Atenção! A relatos de que um Policial foi assassinado! Suspeita-se de algum bandido. Vá checar isso.");
										}
									}
								}
							}
						}
					}
					if(pStats[playerid][Casa] == 1){
						set(pckStats[pStats[playerid][PickupCasa]][Chave],PlayerName(killerid));
						SendClientMessage(killerid, COLOR_GRAY, "Boa Mano, você tá com a chave da casa dele, pode ir lá fazer uma festinha... HUHU.");
						SendClientMessage(playerid, COLOR_GRAY, "Contate a polícia RÁPIDO! Ele levou a chave da sua casa, poderá levar tudo e você ficar mais ainda no prejuízo.");
						SendClientMessage(playerid, COLOR_GRAY, "Aconselho que sua casa tenha um Alarme Anti-Furto, isso impedirá ROUBOS!!");
					}
					if(Profissao[killerid] == ASSASSINO){
						if(GetPlayerMoney(playerid) >= 10000 && GetPlayerMoney(playerid) < 30000){
	    					AcrescentarExPoints(killerid,1);
	    					AddPlayerMoney(killerid,GetPlayerMoney(playerid),3);
	    					ResetPlayerMoney(playerid);
							SendClientMessage(killerid, COLOR_ASSASSINO, "Uhu boa mano! Boa mesmo. Você ganhou 1 XP por saber escolher a pessoa certa, e ainda roubou mais de $10.000");
							format(string, sizeof(string), "[CENTRAL] * Repito * Todas as unidades. [ Crime: Latrocinio ( Roubo seguido de Morte ) ] [ Vítima: %s ] [ Assassino: Desconhecido ] [ Testemunha: Desconhecido ].",PlayerName(playerid));
							SendClientMessageToAll(COLOR_COP_SWAT, string);
							for(new i=0; i<SLOTS2; i++){
							    if(Profissao[i] == JORNALISTA){
									SendClientMessage(i, COLOR_JORNALISTA,"[JORNAL] Atenção! Nosso informante da policia acaba de falar que aconteceu um Latrocinio ( Roubo seguido de Morte ), tome par dos fatos.");
								}
							}
						}
						else if(GetPlayerMoney(playerid) >= 30000 && GetPlayerMoney(playerid) < 50000){
		 					AcrescentarExPoints(killerid,2);
		 	    			AddPlayerMoney(killerid,GetPlayerMoney(playerid),3);
							ResetPlayerMoney(playerid);
							SendClientMessage(killerid, COLOR_ASSASSINO, "Aprendendo rápido né! Você ganhou 2 XP por saber escolher a pessoa certa, e ainda roubou mais de $30.000");
							format(string, sizeof(string), "[CENTRAL] * Repito * Todas as unidades. [ Crime: Latrocinio ( Roubo seguido de Morte ) ] [ Vítima: %s ] [ Assassino: Desconhecido ] [ Testemunha: Desconhecido ].",PlayerName(playerid));
							SendClientMessageToAll(COLOR_COP_SWAT, string);
							for(new i=0; i<SLOTS2; i++){
							    if(Profissao[i] == JORNALISTA){
									SendClientMessage(i, COLOR_JORNALISTA,"[JORNAL] Atenção! Nosso informante da policia acaba de falar que aconteceu um Latrocinio ( Roubo seguido de Morte ), tome par dos fatos.");
								}
							}
						}
						else if(GetPlayerMoney(playerid) >= 50000 && GetPlayerMoney(playerid) < 100000){
		   					AcrescentarExPoints(killerid,3);
							AddPlayerMoney(killerid,GetPlayerMoney(playerid),3);
		   		 			ResetPlayerMoney(playerid);
		   	 				SendClientMessage(killerid, COLOR_ASSASSINO, "Quem pediu pra esse cara andar com mais de $50.000? Eunão fui. Boa. Toma a grana e 3 XP.");
							format(string, sizeof(string), "[CENTRAL] * Repito * Todas as unidades. [ Crime: Latrocinio ( Roubo seguido de Morte ) ] [ Vítima: %s ] [ Assassino: Desconhecido ] [ Testemunha: Desconhecida ].",PlayerName(playerid));
							SendClientMessageToAll(COLOR_COP_SWAT, string);
							for(new i=0; i<SLOTS2; i++){
							    if(Profissao[i] == JORNALISTA){
									SendClientMessage(i, COLOR_JORNALISTA,"[JORNAL] Atenção! Nosso informante da policia acaba de falar que aconteceu um Latrocinio ( Roubo seguido de Morte ), tome par dos fatos.");
								}
							}
						}
						else if(GetPlayerMoney(playerid) >= 100000){
			   				AcrescentarExPoints(killerid,4);
			 				AddPlayerMoney(killerid,GetPlayerMoney(playerid),3);
				    		ResetPlayerMoney(playerid);
		    				SendClientMessage(killerid, COLOR_ASSASSINO, "Haha, pode ter certeza, poucos conseguem isso, talvez você seja o único. Você ganhou 4 Pontos por ter matado ele e ainda levou mais de $100.000");
							format(string, sizeof(string), "[CENTRAL] * Repito * Todas as unidades. [ Crime: Latrocinio ( Roubo seguido de Morte ) ] [ Vítima: %s ] [ Assassino: Desconhecido ] [ Testemunha: Desconhecida ].",PlayerName(playerid));
							SendClientMessageToAll(COLOR_COP_SWAT, string);
							for(new i=0; i<SLOTS2; i++){
							    if(Profissao[i] == JORNALISTA){
									SendClientMessage(i, COLOR_JORNALISTA,"[JORNAL] Atenção! Nosso informante da policia acaba de falar que aconteceu um Latrocinio ( Roubo seguido de Morte ), tome par dos fatos.");
								}
							}
						}
					}
				}
	    		if((Profissao[playerid] == DELEGADO  || Profissao[playerid] == JUIZ) && ChavePrisao[killerid] == 0){
					if(Camuflado[killerid] == 0){
					 	SendClientMessage(killerid, COLOR_GREEN, "Você matou o Juiz/Delegado, roubou a chave da cadeia, agora pode libertar 1 pessoa!");
					 	SendClientMessage(killerid, COLOR_GREEN, "Basta usar /soltarpreso [id]");
						format(string, sizeof(string), "[CENTRAL] Todas as unidades. [ Crime: Roubo ( Chave da Prisão ) com tentativa de assassinato.] [ Vítima: Delegado/JUIZ ] [ Assassino: %s ] [ Testemunha: Desconhecido ].",PlayerName(playerid),PlayerName(killerid));
						SendClientMessageToAll(COLOR_COP_SWAT, string);
						ChavePrisao[killerid] = 1;
						pStats[killerid][DetectadoMorte] += 1;
						for(new i=0; i<SLOTS2; i++){
						    if(Profissao[i] == JORNALISTA){
								SendClientMessage(i, COLOR_JORNALISTA,"[JORNAL] Eu tou te pagando pra ficar parado? Roubaram o Juiz/Delegado e você fica ai? E o pior eles tem o suspeito! Averigue isso e publique!");
							}
						}
					} else {
					 	SendClientMessage(killerid, COLOR_GREEN, "Você matou o Juiz/Delegado, roubou a chave da cadeia, agora pode libertar 1 pessoa!");
					 	SendClientMessage(killerid, COLOR_GREEN, "Basta usar /soltarpreso [id]");
						format(string, sizeof(string), "[CENTRAL] Todas as unidades. [ Crime: Roubo ( Chave da Prisão ) com tentativa de assassinato.] [ Vítima: Delegado/JUIZ ] [ Assassino: Desconhecido Camuflado ] [ Testemunha: Desconhecido ].",PlayerName(playerid),PlayerName(killerid));
						SendClientMessageToAll(COLOR_COP_SWAT, string);
						ChavePrisao[killerid] = 1;
						for(new i=0; i<SLOTS2; i++){
						    if(Profissao[i] == JORNALISTA){
								SendClientMessage(i, COLOR_JORNALISTA,"[JORNAL] Eu tou te pagando pra ficar parado? Roubaram o Juiz/Delegado e você fica ai? Seja mais rápido que a polícia, descubra quem foi! E PUBLIQUE NO JORNAL.");
							}
						}
					}
				}
				if(Sequestro[killerid] == 1 && Sequestrador[killerid] == playerid){
				   Sequestro[killerid] = 0;
				   Sequestrador[killerid] = 0;
				   SendClientMessage(killerid, COLOR_GRAY, "Muito bem! Você matou o sequestrador, agora o sequestro ja era!");
				   SendClientMessage(playerid, COLOR_GRAY, "Sua vítima de sequestro te matou então o sequestro já era!");
				}
				if(Profissao[killerid] != COP_MILITAR || Profissao[killerid] != COP_RODOVIARIO || Profissao[killerid] != COP_SWAT || Profissao[killerid] != COP_NARCOTICOS || Profissao[killerid] != EXERCITO || Profissao[killerid] != DELEGADO || Profissao[killerid] != JUIZ || Profissao[killerid] != RECEITA_FEDERAL){
   					switch(pStats[killerid][DetectadoMorte]){
	  					case 2:
			    		{
							format(string, sizeof(string), "[CENTRAL] Oficiais, a ficha de %s está com 1 Estrela de Procurado, [ Crime: 2 Homicídios ].",PlayerName(killerid));
							SendClientMessageToAll(COLOR_COP_SWAT, string);
							SendClientMessageToAll(COLOR_COP_SWAT,"[CENTRAL] Prenda-o, o lugar dele não é nas ruas, ou quer perder seu emprego?");
							SendClientMessage(killerid, COLOR_GRAY, "A polícia sabe do seu novo Homicídio agora você tem 1 Estrela de Procurado por 2 mortes.");
						    SetPlayerWantedLevel(killerid, 1);
							SetPlayerWantedLevel(playerid, 0);
							pStats[killerid][Wanted] = 1;
							Motivo[killerid] = 0;
							pStats[killerid][MotivoPrisao] = 0;
							format(string,sizeof(string),"[JORNAL] Novo assassino a solta? Informantes nos passaram que um suspeito de Nome: %s, é acusado por 2 mortes.",PlayerName(killerid));
							SendClientMessageToAll(COLOR_JORNALISTA, string);
						}
						case 5:
			    		{
							format(string, sizeof(string), "[CENTRAL] Oficiais, SOLICITAMOS A PRISÃO DE %s, o mesmo agora é acusado novamento, e está com 2 Estrelas [ Crime Pendente: 5 Homicídios ]",PlayerName(killerid));
							SendClientMessageToAll(COLOR_COP_SWAT, string);
							SendClientMessage(killerid, COLOR_GRAY, "Bom... Você agora tem 2 Estrelas de Procurado por 5 mortes. E a polícia... no seu calso.");
							SetPlayerWantedLevel(killerid, 2);
							SetPlayerWantedLevel(playerid, 0);
							pStats[killerid][Wanted] = 2;
							Motivo[killerid] = 0;
							pStats[killerid][MotivoPrisao] = 0;
							format(string,sizeof(string),"[JORNAL] Parece que a polícia não é eficaz! Chega a informação que %s continua matando, [ Crime: 5 Homicídios ]",PlayerName(killerid));
							SendClientMessageToAll(COLOR_JORNALISTA, string);
						}
						case 7:
			   			{
							format(string, sizeof(string), "[CENTRAL] Oficiais! %s está com 3 Estrelas de Procurado, PRENDA-O. [ Crime Pendente: 7 Homicídios ]",PlayerName(killerid));
							SendClientMessageToAll(COLOR_COP_SWAT, string);
							SendClientMessage(killerid, COLOR_GRAY, "Exímino?! Você agora tem 3 Estrelas de Procurado por 7 mortes.");
							SetPlayerWantedLevel(killerid, 3);
							SetPlayerWantedLevel(playerid, 0);
							pStats[killerid][Wanted] = 3;
							Motivo[killerid] = 0;
							pStats[killerid][MotivoPrisao] = 0;
							format(string,sizeof(string),"[JORNAL] Delegado impaciente está quando recebe a notícia que Los Santos está com %s a solta e com 7 Homicídos no currículo",PlayerName(killerid));
							SendClientMessageToAll(COLOR_JORNALISTA, string);
						}
						case 12:
			  			{
							format(string, sizeof(string), "[CENTRAL] Oficiais e Swat! Esqueceram do Juramento? %s está com 4 Estrelas de Procurado, PRENDA-O. [ Crime Pendente: 12 Homicídios ]",PlayerName(killerid));
							SendClientMessageToAll(COLOR_COP_SWAT, string);
							SendClientMessage(killerid, COLOR_GRAY, "A polícia está com medo e com raiva. Você agora tem 4 Estrelas de Procurado por 12 mortes.");
							SetPlayerWantedLevel(killerid, 4);
							SetPlayerWantedLevel(playerid, 0);
							pStats[killerid][Wanted] = 4;
							Motivo[killerid] = 0;
							pStats[killerid][MotivoPrisao] = 0;
							format(string,sizeof(string),"[JORNAL] Juiz constata que o Exército deverá ser mandado pois os policiais não conseguem prender %s, já cometeu 12 Homicídios.",PlayerName(killerid));
							SendClientMessageToAll(COLOR_JORNALISTA, string);
						}
						case 18:
						{
							format(string, sizeof(string), "[CENTRAL] Oficiais, SWAT, EXÉRCITO! ULTIMATO A PEGAR AS ARMAS E VEÍCULOS E CAÇAR ATÉ A MORTE %s, [ Crime Pendente: 18 Homicídios ]",PlayerName(killerid));
							SendClientMessageToAll(COLOR_COP_SWAT, string);
							SendClientMessage(killerid, COLOR_GRAY, "Los Santos está em pânico com você a solta.! Você agora tem 5 Estrelas de Procurado por 18 mortes.");
							SetPlayerWantedLevel(killerid, 5);
							SetPlayerWantedLevel(playerid, 0);
							pStats[killerid][Wanted] = 5;
							Motivo[killerid] = 0;
							pStats[killerid][MotivoPrisao] = 0;
							format(string,sizeof(string),"[JORNAL] A Delegacia está de cabeça para baixo, o último comando do Delegado foi que os policiais podem abrir fogo contra %s. [ Crime: 18 Homicídios ].",PlayerName(killerid));
							SendClientMessageToAll(COLOR_JORNALISTA, string);
						}
						case 25:
	   					{
							format(string, sizeof(string), "[CENTRAL] Oficiais, SWAT, EXÉRCITO! Se não prenderem %s, todos vão estar demitido, não quero ver mais 1 morte causada por ele [ Crime Pendente: 25 Homicídios ]",PlayerName(killerid));
							SendClientMessageToAll(COLOR_COP_SWAT, string);
							format(string, sizeof(string), "[CENTRAL] câmbio, desligo.",PlayerName(playerid),PlayerName(killerid));
							SendClientMessageToAll(COLOR_COP_SWAT, string);
							SendClientMessage(killerid, COLOR_GRAY, "PODER EXTREMO. Daqui você não passa! Você agora tem 6 Estrelas de Procurado por 25 mortes.");
							SetPlayerWantedLevel(killerid, 6);
							SetPlayerWantedLevel(playerid, 0);
							pStats[killerid][Wanted] = 6;
							Motivo[killerid] = 0;
							pStats[killerid][MotivoPrisao] = 0;
							format(string,sizeof(string),"[JORNAL] Cortes na polícia, delegado já pensar em demitir alguns oficiais, pois %s continua matando e a polícia nada faz.[ Crime Pendente: 25 Homicídios ]",PlayerName(killerid));
							SendClientMessageToAll(COLOR_JORNALISTA, string);
						}
					}
				} else {
				    if(Camuflado[killerid] == 1){
						format(string, sizeof(string), "[CENTRAL] [Crime: Homicídio Culposo].  [ Criminoso: Desconhecido Camuflado ] [ Vítima %s ] [ Testemunha: Desconhecido ]",PlayerName(playerid));
						SendClientMessageToAll(COLOR_COP_SWAT, string);
						format(string, sizeof(string), "[CENTRAL] * Repito * Checar ocorrência! câmbio.",PlayerName(playerid),PlayerName(killerid));
						SendClientMessageToAll(COLOR_COP_SWAT, string);
					} else {
						format(string, sizeof(string), "[CENTRAL] [Crime: Homicídio Culposo].  [ Criminoso: %s ] [ Vítima %s ] [ Testemunha: Desconhecido ]",PlayerName(killerid),PlayerName(playerid));
						SendClientMessageToAll(COLOR_COP_SWAT, string);
						format(string, sizeof(string), "[CENTRAL] * Repito * Checar ocorrência! câmbio.",PlayerName(playerid),PlayerName(killerid));
						SendClientMessageToAll(COLOR_COP_SWAT, string);
						pStats[killerid][DetectadoMorte] += 1;
					}
				}
			}
		}
	}
}
public CtDead(playerid){
	KillTimer(TimerDeath[playerid]);
	CtgDead[playerid]--;
	if(CtgDead[playerid] > 0){
		new r = random(5);
		ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
		for(new i = 0; i < SLOTS2; i++){
			if(GetDistanceBetweenPlayers(playerid,i) < 10){
				if(r == 0) SendPlayerMessageToPlayer(i,playerid,"COF COF, AHHH QUE DOR DO *******...");
				if(r == 1) SendPlayerMessageToPlayer(i,playerid,"AI AI UI, o que essa luz tá fazendo aqui?");
        		if(r == 2) SendPlayerMessageToPlayer(i,playerid,"AI UI AI UI, Estou vendo estrelas, já é de noite? COF COF");
				if(r == 3) SendPlayerMessageToPlayer(i,playerid,"UIIII não sinto minhas pernas, acho que vou morrer! SOCORRO ALGUM MÉDICO ME AJUDE COF COF COF");
				if(r == 4) SendPlayerMessageToPlayer(i,playerid,"AAAAAAIIIII POUPE MINHA POBRE VIDA, UI COF COF COF!!!");
			}
		}
		TimerDeath[playerid] = SetTimerEx("CtDead",10000,0,"d",playerid);
	}
	else{
	    new morte = random(15), string[256];
	    SendClientMessageToAll(0xF5FFC0AA, " ");
		if(morte == 0){
			format(string,sizeof(string),"O hospital acaba de avisar, que mais uma vitima do crime foi achada, nome da vitima: %s.",PlayerName(playerid));
			SendClientMessageToAll(COLOR_KILLED,string);
		} else if(morte == 1){
			format(string,sizeof(string),"Os paramédicos foram chamados para o local mas quando chegaram lá %s já estava inconsciente.",PlayerName(playerid));
			SendClientMessageToAll(COLOR_KILLED,string);
		} else if(morte == 2){
			format(string,sizeof(string),"Mendigos encontraram o corpo de %s no chão, paramédicos levaram para o Hospital.",PlayerName(playerid));
			SendClientMessageToAll(COLOR_KILLED,string);
		} else if(morte == 3){
			format(string,sizeof(string),"Fazendo a ronda do quarteirão, políciais acharam o corpo de %s inconsciente.",PlayerName(playerid));
			SendClientMessageToAll(COLOR_KILLED,string);
		} else if(morte == 4){
			format(string,sizeof(string),"Olhando para a esquerda, um cidadão encontra %s inconsciente e liga imediatamente para os paramédicos.",PlayerName(playerid));
			SendClientMessageToAll(COLOR_KILLED,string);
   	 	} else if(morte == 5){
			format(string,sizeof(string),"Jornalista encontra %s inconsciente e resolve publicar no jornal antes da ambulância chegar!",PlayerName(playerid));
			SendClientMessageToAll(COLOR_KILLED,string);
    	} else if(morte == 6){
			format(string,sizeof(string),"Delegado encontra %s inconsciente e fala que vai investigar sobre o crime, os paramédicos já foram chamados ao local!",PlayerName(playerid));
			SendClientMessageToAll(COLOR_KILLED,string);
    	} else if(morte == 7){
			format(string,sizeof(string),"Uma ambulância que estava passeando encontrou %s inconsciente, o motorista resolveu leva-lo ao hospital.",PlayerName(playerid));
			SendClientMessageToAll(COLOR_KILLED,string);
		} else if(morte == 8){
			format(string,sizeof(string),"\"Pode deixar, eu me cuido\" foi o que %s disse antes de parar no hospital.",PlayerName(playerid));
			SendClientMessageToAll(COLOR_KILLED,string);
		} else if(morte == 9){
			format(string,sizeof(string),"[NOTICIAS] Mais vítimas do crime foram encontradas, %s é só mais uma delas...",PlayerName(playerid));
			SendClientMessageToAll(COLOR_KILLED,string);
		} else if(morte == 10){
		    format(string,sizeof(string),"\"Não acho essa cidade nem um pouco perigosa\" foram as últimas palavras de %s ¬¬",PlayerName(playerid));
		    SendClientMessageToAll(COLOR_KILLED,string);
		} else if(morte == 11){
		    format(string,sizeof(string),"\"UFA! Acho que agora estou seguro\" foram as últimas palavras de %s",PlayerName(playerid));
		    SendClientMessageToAll(COLOR_KILLED,string);
		} else if(morte == 12){
		    format(string,sizeof(string),"\"Pode atravessar, qualquer coisa os carros param\" foram as últimas palavras que %s ouviu!",PlayerName(playerid));
		    SendClientMessageToAll(COLOR_KILLED,string);
		} else if(morte == 13){
		    format(string,sizeof(string),"\"É pura invenção essa história de bala perdida\" foram as últimas palavras de %s",PlayerName(playerid));
		    SendClientMessageToAll(COLOR_KILLED,string);
		} else if(morte == 14){
		    format(string,sizeof(string),"\"Consigo ficar mais de 1 minuto sem respirar\" foram as últimas palavras de %s ¬¬",PlayerName(playerid));
		    SendClientMessageToAll(COLOR_KILLED,string);
		}
	    SendClientMessageToAll(0xF5FFC0AA, " ");
		new hosp = GetClosestHospital(playerid);
    	SetSpawnInfo(playerid, 1, pStats[playerid][Skin],Hospitais[hosp][0],Hospitais[hosp][1],Hospitais[hosp][2],Hospitais[hosp][3],0,0,0,0,0,0);
    	new strrand = random(9);
    	if(pStats[playerid][Seguro] == 0){
			format(string,sizeof(string), "Você foi encontrado quase morto e foi levado ao Hospital. O valor do tratamento foi de $%d",ValorTratamento[strrand]);
			SendClientMessage(playerid, COLOR_GRAY, string);
			pStats[playerid][Banco] -= ValorTratamento[strrand];
		}
		else if(pStats[playerid][Seguro] == 1){
    	    SendClientMessage(playerid, COLOR_GRAY, "Você foi encontrado quase morto e foi levado ao Hospital. Seu seguro cobriu o pagamento do tratamento.");
			AcrescentarPrejuizo(3,ValorTratamento[strrand]/2);
		}
		if(pStats[playerid][Doenca] == 1){
			SendClientMessage(playerid, COLOR_PARAMEDICO, "[HOSPITAL] Curamos sua doença pelo custo de $300, o dinheiro foi retirado do banco, Obrigado!");
			pStats[playerid][Doenca] = 0;
			JogadorDoente[playerid] = 0;
			pStats[playerid][Banco] -= 300;
		}
		if(pStats[playerid][Micose] == 1){
			SendClientMessage(playerid, COLOR_PARAMEDICO, "[HOSPITAL] Você não está mais com Micose, curamos pelo custo de $200, o dinheiro foi retirado do banco, Obrigado!");
			pStats[playerid][Micose] = 0;
			pStats[playerid][Banco] -= 200;
		}
		if(pStats[playerid][Aids] == 1){
			SendClientMessage(playerid, COLOR_PARAMEDICO, "[HOSPITAL] Livramos você da AIDS, dá próxima vez use camisinha. Custo: $500, o dinheiro foi retirado do banco, Obrigado!");
			pStats[playerid][Aids] = 0;
			pStats[playerid][Banco] -= 500;
		}
		Morrendo[playerid] = 0;
		TogglePlayerControllable(playerid,1);
		ClearAnimations(playerid);
		SetPlayerHealth(playerid,0);
		AcabouMorrer[playerid] = 1;
		SetTimerEx("ZerarAcabouMorrer",3000,0,"d",playerid);
	}
}
public ZerarAcabouMorrer(playerid) AcabouMorrer[playerid] = 0;
public ApplyColorForVehicle(vehicleid)
{
	if(vStats[vehicleid][Color1] != 0 && vStats[vehicleid][Color2] != 0) ChangeVehicleColor(vehicleid,vStats[vehicleid][Color1],vStats[vehicleid][Color2]);
}
public ApplySeguroForVehicle(vehicleid)
{
	if(vStats[vehicleid][VSeguro] == 1){
		SeguroCarro[vehicleid] = 1;
		if(IsStringAName(vStats[vehicleid][VDono])){
		    new playa = IDName(vStats[vehicleid][VDono]);
		    if(pStats[playa][Banco] < 50){
				SendClientMessage(playa, COLOR_GRAY, "Seu seguro de veículo foi removido pois você não possui dinheiro para pagar!");
				SeguroCarro[vehicleid] = 0;
				vStats[vehicleid][VSeguro] = 0;
			}
		}
		else{
		    if(strval(GetValue(PlayerFile(vStats[vehicleid][VDono]),"Banco")) < 50){
				GuardarMensagem(vStats[vehicleid][VDono],"Seu seguro de veículo foi removido pois você não possui dinheiro para pagar!");
				SeguroCarro[vehicleid] = 0;
				vStats[vehicleid][VSeguro] = 0;
			}
			else{
			    GuardarMensagem(vStats[vehicleid][VDono],"Foram retirados $50 de seu banco para pagar o seu seguro de veículo!");
				new getmoneybank[256];
				set(getmoneybank,GetValue(PlayerFile(vStats[vehicleid][VDono]),"Banco"));
				new newval[256];
				format(newval,256,"%d",strval(getmoneybank) - 50);
				SetValue(PlayerFile(vStats[vehicleid][VDono]),"Banco",newval);
				AcrescentarLucro(3,50);
			}
		}
    }
	else{
		SeguroCarro[vehicleid] = 0;
	}
}
public ApplyVehicleToInvalidPos(vehicleid)
{
	SetVehiclePos(vehicleid,INVALID_POS_X,INVALID_POS_Y,INVALID_POS_Z);
}
public ApplyPlacaForVehicle(vehicleid){
    new tmp[256];
    set(tmp,VehicleFile(vehicleid));
	if(fexist(tmp)) SetVehicleNumberPlate(vehicleid,vStats[vehicleid][VPlaca]);
}
public OnVehicleSpawn(vehicleid)
{
	new tmp[256];
	set(tmp,VehicleFile(vehicleid));
	if(JaDestruido[vehicleid] == 0){
    	SetTimerEx("ApplyColorForVehicle",3000,false,"d",vehicleid);
		SetTimerEx("ApplyTuningForVehicle",3000,false,"d",vehicleid);
		SetTimerEx("ApplySeguroForVehicle",3000,false,"d",vehicleid);
		SetTimerEx("ApplyPlacaForVehicle",3000,false,"d",vehicleid);
	}
	else{
		SetTimerEx("ApplyVehicleToInvalidPos",5000,false,"d",vehicleid);
	}
	printf("OnVehicleSpawn(%d)", vehicleid);
	if(fexist(tmp)){
		SetVehicleNumberPlate(vehicleid,vStats[vehicleid][VPlaca]);
	}
	else{
		printf("Não conseguimos carregar a placa do veiculo %d",vehicleid);
		printf("Pois seu arquivo não foi encontrado");
	   }
  }
stock LoadColors()
{
	for(new i=0; i<QTCARS; i++){
		ChangeVehicleColor(i,vStats[i][Color1],vStats[i][Color2]);
	}
}
stock SaveColors(vehicleid,color1,color2)
{
	vStats[vehicleid][Color1] = color1;
	vStats[vehicleid][Color2] = color2;
	return 1;
}
public OnVehiclePaintjob(vehicleid,paintjobid)
{
	SavePaintjob(vehicleid,paintjobid);
}
public OnVehicleRespray(vehicleid, color1, color2)
{
	SaveColors(vehicleid,color1,color2);
}
public OnPlayerEnterVehicle(playerid,vehicleid){
    if(strcmp(vStats[vehicleid][VDono],PlayerName(playerid),true)){
		if(vStats[vehicleid][Fume] == 1){
		    VCamuflado[playerid] = 1;
		    SendClientMessage(playerid, COLOR_WHITE, "Você entrou em um veículo que possui vidro fume, ficará camuflado até sair dele!");
		}
		VerAlarme = vStats[vehicleid][VAlarme];
		if(VerAlarme == 1){
		    SendClientMessage(playerid, COLOR_RED2, "O Dono deste veículo trancou ele.");
		    RemovePlayerFromVehicle(playerid);
		    TrancarVeiculo(playerid,vehicleid);
			return 1;
		}
	}
	return 1;
}
public OnVehicleDeath(vehicleid, killerid)
{
	JaDestruido[vehicleid] = 1;
   	new donovehicle[256];
   	set(donovehicle,vStats[vehicleid][VDono]);
	if(SeguroCarro[vehicleid] == 1){
	    JaDestruido[vehicleid] = 0;
		SetVehicleToRespawn(vehicleid);
	   	if(IsStringAName(donovehicle)){
	   		SendClientMessage(IDName(donovehicle), COLOR_PALHA, "Seu veículo foi destruído, mas está devolta pois ele estava assegurado!");
			AcrescentarPrejuizo(3,50);
	   	}
   	}
   	else{
		if(IsStringAName(donovehicle)){
		    new randmoney = random(9), string[256];
			SendClientMessage(IDName(donovehicle), COLOR_MECANICO, "[OFICINA] Seu veículo foi destruído!");
			format(string,sizeof(string),"[OFICINA] Estamos cobrando $%d para conserta-lo...",ValorConserto[randmoney]);
			SendClientMessage(IDName(donovehicle), COLOR_MECANICO, string);
			SendClientMessage(IDName(donovehicle), COLOR_MECANICO, "[OFICINA] Para aceitar nossa proposta digite /aceitarconserto caso contrário digite /recusarconserto");
			SendClientMessage(IDName(donovehicle), COLOR_MECANICO, "OBS: Se você não envia-lo para conserto, irá perde-lo!");
			PropostaConserto[IDName(donovehicle)] = 1;
			VeiculoConserto[IDName(donovehicle)] = vehicleid;
			DinheiroConserto[IDName(donovehicle)] = ValorConserto[randmoney];
		}
   	}
}
stock ClearCapsLock(string[])
{
	new tmp[256];
	tmp[0]=0;
	if(!strlen(string)) return tmp;
	set(tmp,string);
	for(new len=0;len<strlen(tmp);len++)
	{
	    if(tmp[len]=='A')tmp[len]='a';
	    else if(tmp[len]=='B')tmp[len]='b';
	    else if(tmp[len]=='C')tmp[len]='c';
	    else if(tmp[len]=='D')tmp[len]='d';
	    else if(tmp[len]=='E')tmp[len]='e';
	    else if(tmp[len]=='F')tmp[len]='f';
	    else if(tmp[len]=='G')tmp[len]='g';
	    else if(tmp[len]=='H')tmp[len]='h';
	    else if(tmp[len]=='I')tmp[len]='i';
	    else if(tmp[len]=='J')tmp[len]='j';
	    else if(tmp[len]=='K')tmp[len]='k';
	    else if(tmp[len]=='L')tmp[len]='l';
	    else if(tmp[len]=='M')tmp[len]='m';
	    else if(tmp[len]=='N')tmp[len]='n';
	    else if(tmp[len]=='O')tmp[len]='o';
	    else if(tmp[len]=='P')tmp[len]='p';
	    else if(tmp[len]=='Q')tmp[len]='q';
	    else if(tmp[len]=='R')tmp[len]='r';
	    else if(tmp[len]=='S')tmp[len]='s';
	    else if(tmp[len]=='T')tmp[len]='t';
	    else if(tmp[len]=='U')tmp[len]='u';
	    else if(tmp[len]=='V')tmp[len]='v';
	    else if(tmp[len]=='W')tmp[len]='w';
	    else if(tmp[len]=='X')tmp[len]='x';
	    else if(tmp[len]=='Y')tmp[len]='y';
	    else if(tmp[len]=='Z')tmp[len]='z';
	    else if(tmp[len]=='Ç')tmp[len]='ç';
	    else if(tmp[len]=='Á')tmp[len]='á';
	    else if(tmp[len]=='É')tmp[len]='é';
	    else if(tmp[len]=='Í')tmp[len]='í';
	    else if(tmp[len]=='Ó')tmp[len]='ó';
	    else if(tmp[len]=='Ú')tmp[len]='ú';
	    else if(tmp[len]=='Ñ')tmp[len]='ñ';
	    else if(tmp[len]=='Ã')tmp[len]='ã';
	    else if(tmp[len]=='Õ')tmp[len]='õ';
	    else if(tmp[len]=='Â')tmp[len]='â';
	    else if(tmp[len]=='Ê')tmp[len]='ê';
	    else if(tmp[len]=='Î')tmp[len]='î';
	    else if(tmp[len]=='Ô')tmp[len]='ô';
	    else if(tmp[len]=='Û')tmp[len]='û';
	    else if(tmp[len]=='À')tmp[len]='à';
	    else if(tmp[len]=='È')tmp[len]='è';
	    else if(tmp[len]=='Ì')tmp[len]='ì';
	    else if(tmp[len]=='Ò')tmp[len]='ò';
	    else if(tmp[len]=='Ù')tmp[len]='ù';
	}
	return tmp;
}
stock ChatProximo(playerid,const msg[])
{
  	new str[256];
	if(Camuflado[playerid] == 0 && VCamuflado[playerid] == 0){
		if(Profissao[playerid] == JUIZ || Profissao[playerid] == RECEITA_FEDERAL){
		    format(str,sizeof(str),"Sr. %s diz: %s",PlayerName(playerid),msg);
		}
		else if(Profissao[playerid] == COP_MILITAR || Profissao[playerid] == COP_RODOVIARIO || Profissao[playerid] == COP_SWAT || Profissao[playerid] == COP_NARCOTICOS || Profissao[playerid] == EXERCITO || Profissao[playerid] == DELEGADO){
		    format(str,sizeof(str),"[OFICIAL] %s diz: %s",PlayerName(playerid),msg);
		}
		else if(Profissao[playerid] == PARAMEDICO){
		    format(str,sizeof(str),"[Paramédico] %s diz: %s",PlayerName(playerid),msg);
		}
		else if(Profissao[playerid] == CORRETOR){
		    format(str,sizeof(str),"[Corretor] %s diz: %s",PlayerName(playerid),msg);
		}
		else if(Profissao[playerid] == VENDEDOR_DE_CARROS){
		    format(str,sizeof(str),"[Vendedor] %s diz: %s",PlayerName(playerid),msg);
		}
		else if(Profissao[playerid] == JORNALISTA){
		    format(str,sizeof(str),"[Repórter] %s diz: %s",PlayerName(playerid),msg);
		}
		else if(Profissao[playerid] == BARMAN){
		    format(str,sizeof(str),"[Barman] %s diz: %s",PlayerName(playerid),msg);
		}
		else if(Profissao[playerid] == SEGURANÇA){
		    format(str,sizeof(str),"[Segurança] %s diz: %s",PlayerName(playerid),msg);
		}
		else if(Profissao[playerid] == MOTORISTA_DE_ONIBUS){
		    format(str,sizeof(str),"[Motorista] %s diz: %s",PlayerName(playerid),msg);
		}
		else if(Profissao[playerid] == MOTORISTA_PARTICULAR){
		    format(str,sizeof(str),"[Motorista] %s diz: %s",PlayerName(playerid),msg);
		}
		else if(Profissao[playerid] == CAMINHONEIRO){
		    format(str,sizeof(str),"[Caminhoneiro] %s diz: %s",PlayerName(playerid),msg);
		}
		else if(Profissao[playerid] == PESCADOR){
		    format(str,sizeof(str),"[Pescador] %s diz: %s",PlayerName(playerid),msg);
		}
		else if(Profissao[playerid] == ENTREGADOR_PIZZA){
		    format(str,sizeof(str),"[Entregador] %s diz: %s",PlayerName(playerid),msg);
		}
		else if(Profissao[playerid] == TAXISTA){
		    format(str,sizeof(str),"[Taxista] %s diz: %s",PlayerName(playerid),msg);
		}
		else if(Profissao[playerid] == MOTOTAXI){
		    format(str,sizeof(str),"[Moto-Taxi] %s diz: %s",PlayerName(playerid),msg);
		}
		else if(Profissao[playerid] == TAXI_AEREO){
		    format(str,sizeof(str),"[Aero-Taxi] %s diz: %s",PlayerName(playerid),msg);
		}
		else if(Profissao[playerid] == INSTRUTOR){
		    format(str,sizeof(str),"[Instrutor] %s diz: %s",PlayerName(playerid),msg);
		}
		else if(Profissao[playerid] == ADVOGADO){
		    format(str,sizeof(str),"DR. %s diz: %s",PlayerName(playerid),msg);
		}
		else if(Profissao[playerid] == LIXEIRO){
		    format(str,sizeof(str),"[Lixeiro] %s diz: %s",PlayerName(playerid),msg);
		}
		else if(Profissao[playerid] == TRANSPORTE_DE_VALORES){
		    format(str,sizeof(str),"[Transporte] %s diz: %s",PlayerName(playerid),msg);
		}
		else if(Profissao[playerid] == AGRICULTOR){
		    format(str,sizeof(str),"[Agricultor] %s diz: %s",PlayerName(playerid),msg);
		}
		else if(Profissao[playerid] == FRENTISTA){
		    format(str,sizeof(str),"[Frentista] %s diz: %s",PlayerName(playerid),msg);
		}
		else if(Profissao[playerid] == LOCADOR_DE_CARROS){
		    format(str,sizeof(str),"[Locador] %s diz: %s",PlayerName(playerid),msg);
		}
		else if(Profissao[playerid] == PEDREIRA){
		    format(str,sizeof(str),"[Carregador] %s diz: %s",PlayerName(playerid),msg);
		}
		else if(Profissao[playerid] == VENDEDOR_DE_ARMAS){
		    format(str,sizeof(str),"[Vendedor] %s diz: %s",PlayerName(playerid),msg);
		}
		else if(Profissao[playerid] == MECANICO){
		    format(str,sizeof(str),"[Mecânico] %s diz: %s",PlayerName(playerid),msg);
		}
		else if(Profissao[playerid] == CORRETOR_SEGUROS){
		    format(str,sizeof(str),"[Segurador] %s diz:",PlayerName(playerid),msg);
		}
		else{
			format(str,sizeof(str),"%s diz: %s",PlayerName(playerid),msg);
		}
		for(new i = 0; i < SLOTS2; i++){
	    	if(IsPlayerConnected(i) && GetDistanceBetweenPlayers(playerid,i) < 30 && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid)){
	    		SendClientMessage(i, GetPlayerColor(playerid), str);
			}
		}
	} else if(Camuflado[playerid] == 1 || VCamuflado[playerid] == 1){
		format(str,sizeof(str),"%s diz: %s",PlayerName(playerid),msg);
		for(new i = 0; i < SLOTS2; i++){
	   		if(IsPlayerConnected(i) && GetDistanceBetweenPlayers(playerid,i) < 30 && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid)){
	       		SendClientMessage(i, COLOR_GRAY, str);
	       	}
		}
	}
}

public OnPlayerText(playerid,text[])
{
	new stringtext[256];
	format(stringtext,sizeof(stringtext),"[CHAT] %s: %s",PlayerName(playerid),text);
	writelog(stringtext);
	if(text[0] == '!'){
		if(pStats[playerid][Gangue] == 1){
		    new gangmsg[256], seperator[256];
		    strmid(seperator,text,1,strlen(text));
			format(gangmsg,256,"%s: %s",PlayerName(playerid),seperator);
			SendClientMessageGang(pStats[playerid][GangueNome],gStats[GetGangID(pStats[playerid][GangueNome])][GangColor],gangmsg);
		}
		else{
            SendClientMessage(playerid, COLOR_GRAY, "Você não tem gangue!");
		}
		return 0;
	}
	if(Logado[playerid] == 0){
		SendClientMessage(playerid, COLOR_GRAY, "Você só pode digitar se estiver logado no jogo!");
		return 0;
	}
	if(CustoAluguel[playerid] == 1){
	    if(strval(text) <= 0){
			SendClientMessage(playerid, COLOR_GRAY, "Valor inválido... Digite um acima de $0,00!");
		}
	    else{
        	LocarMinhaCasa(playerid,DiasSelecionados[playerid],strval(text));
		}
		CustoAluguel[playerid] = 0;
		return 0;
	}
	if(NoPL[playerid] == 1 && PLIniciou == 1){
	    new string[256];
	    if(Equipe[playerid] == 1) format(string,sizeof(string),"[LADRÕES] %s: %s",PlayerName(playerid),text);
        else if(Equipe[playerid] == 2) format(string,sizeof(string),"[POLICIAIS] %s: %s",PlayerName(playerid),text);
		for(new i = 0; i < SLOTS2; i++){
	        if(IsPlayerConnected(i) && Equipe[i] == Equipe[playerid]) SendClientMessage(i, COLOR_WHITE, string);
		}
		return 0;
	}
	fixchars(text);
	if(CaixaPostal2[playerid] == 1){
	    EnviarMensagemCaixaPostal(playerid,RecebedorMensagem[playerid],text);
	    SendClientMessage(playerid, COLOR_GREEN, "Mensagem enviada e chamada finalizada!");
	    CaixaPostal2[playerid] = 0;
	    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		return 0;
	}
	if(ArmaCofre[playerid][0] == 1){
	    ArmaCofre[playerid][0] = 0;
		TogglePlayerControllable(playerid,1);
	    new string[256];
	    new slot = strval(text);
		if(GetPlayerAmmo(slot) == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui arma nesse slot!");
		if(pckStats[PickupEntradaCasa[playerid]][ArmasCofre][slot] != 0) return SendClientMessage(playerid, COLOR_GRAY, "Já tem armas desse slot guardadas ai!");
		new weapon,ammo;
		GetPlayerWeaponData(playerid,slot,weapon,ammo);
		pckStats[PickupEntradaCasa[playerid]][ArmasCofre][slot] = weapon;
		pckStats[PickupEntradaCasa[playerid]][ArmasAmmoCofre][slot] = ammo;
		SendClientMessage(playerid, COLOR_WHITE, "Arma guardada!");
		format(string,sizeof(string),"Slot %d: Arma de ID %d com %d munições",slot,weapon,ammo);
		SendClientMessage(playerid, COLOR_WHITE, string);
		SetPlayerAmmo(playerid,slot,0);
		return 1;
	}
	if(ArmaCofre[playerid][1] == 1){
	    ArmaCofre[playerid][1] = 0;
		TogglePlayerControllable(playerid,1);
	    new slot = strval(text);
	    if(pckStats[PickupEntradaCasa[playerid]][ArmasCofre][slot] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem armas desse slot guardadas ai!");
		GivePlayerWeapon(playerid,pckStats[PickupEntradaCasa[playerid]][ArmasCofre][slot],pckStats[PickupEntradaCasa[playerid]][ArmasAmmoCofre][slot]);
		pckStats[PickupEntradaCasa[playerid]][ArmasCofre][slot] = 0;
		pckStats[PickupEntradaCasa[playerid]][ArmasAmmoCofre][slot] = 0;
		SendClientMessage(playerid, COLOR_WHITE, "Arma retirada do cofre!");
		return 1;
	}
	if(GranaCofre[playerid][0] == 1){
	    GranaCofre[playerid][0] = 0;
	    TogglePlayerControllable(playerid,1);
	    new string[256];
	    new quantidade = strval(text);
	    if(quantidade > GetPlayerMoney(playerid)){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não possui tudo isso em suas mãos!");
	        return 0;
		}
		if(quantidade <= 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Quantidade inválida!");
		    return 0;
		}
	    if(quantidade+pckStats[PickupEntradaCasa[playerid]][DinheiroCofre] > 20000){
			format(string,sizeof(string),"Seu cofre só pode ter $20000 no máximo, você possui $%d! Digite uma quantidade menor...",pckStats[PickupEntradaCasa[playerid]][DinheiroCofre]);
	        SendClientMessage(playerid, COLOR_GRAY, string);
			return 0;
		}
		else{
		    pckStats[PickupEntradaCasa[playerid]][DinheiroCofre] += quantidade;
		    AddPlayerMoney(playerid,-quantidade,-1);
		    format(string,sizeof(string),"Você adicionou $%d no cofre e ele ficou com $%d",quantidade,pckStats[PickupEntradaCasa[playerid]][DinheiroCofre]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return 0;
		}
	}
	if(GranaCofre[playerid][1] == 1){
	    GranaCofre[playerid][1] = 0;
	    TogglePlayerControllable(playerid,1);
	    new quantidade = strval(text);
	    if(quantidade > pckStats[PickupEntradaCasa[playerid]][DinheiroCofre]){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não tem toda essa grana no cofre!");
	        return 0;
		}
		else{
		    AddPlayerMoney(playerid,quantidade,2);
		    pckStats[PickupEntradaCasa[playerid]][DinheiroCofre] -= quantidade;
			new string[256];
			format(string,sizeof(string),"Você retirou $%d do cofre e ele ficou com $%d",quantidade,pckStats[PickupEntradaCasa[playerid]][DinheiroCofre]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return 0;
		}
	}
	if(declaracoesabertas[playerid] == 1){
	    new tmp[256];
		format(tmp,256,"[Audiência] %s",text);
		fixchars(tmp);
 		SendPlayerMessageToAll(playerid,tmp);
 		return 0;
 	}
 	if(Audiencia[playerid] == 1){
     	new tmp[256];
		format(tmp,256,"[Audiência]JUIZ: %s",text);
		fixchars(tmp);
 		SendPlayerMessageToAll(playerid,tmp);
 		return 0;
 	}
	if(FazendoEmprestimo[playerid] == 1){
	    FazendoEmprestimo[playerid] = 0;
		new quantidade;
		quantidade = strval(text);
		if(quantidade > pStats[playerid][Banco]/4){
		new string[256];
		format(string, sizeof(string),"Você não pode emprestar tudo isto! O máximo que você pode é $%d",pStats[playerid][Banco]/4);
		SendClientMessage(playerid, COLOR_GRAY, string);
		TogglePlayerControllable(playerid,1);
		return 0;
		}
		if(quantidade < 1000){
		SendClientMessage(playerid, COLOR_GRAY, "Digite um número maior que $1.000.");
		TogglePlayerControllable(playerid,1);
		return 0;
		}
		if(pStats[playerid][Divida] > 0){
		SendClientMessage(playerid, COLOR_GRAY, "Ei, você já fez um empréstimo! Pague as dividas desse antes para fazer outro.");
        TogglePlayerControllable(playerid,1);
		return 0;
		}
		if(AreaBanco[playerid] == 1){
            TogglePlayerControllable(playerid,1);
			AddPlayerMoney(playerid,quantidade,5);
			pStats[playerid][Emprestimo] = quantidade;
			pStats[playerid][Divida] = quantidade/2+quantidade;
			ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,0,1);
			new string[256];
			format(string, sizeof(string), "Você emprestou $%d e recebeu uma dívida de $%d.",quantidade,quantidade/2+quantidade);
			SendClientMessage(playerid, COLOR_GREEN, string);
			SendClientMessage(playerid, COLOR_PALHA, "Caso não pague, vão vir os JUROS!");
			SendClientMessage(playerid, COLOR_PALHA, "Você terá que pagar essa grana em 15 minutos!");
			TimerDivida[playerid] = SetTimerEx("Cobrar",900000,false,"d",playerid);
			return 0;
			}
			else{
				SendClientMessage(playerid, COLOR_GRAY, "Ei, você não está no banco!");
				return 0;
			}
	}
	if(DepositandoGrana[playerid] == 1){
        DepositandoGrana[playerid] = 0;
        new string[256];
		new quantidade;
	    quantidade = strval(text);
	    if(quantidade <= 0 || quantidade > GetPlayerMoney(playerid)){
	        SendClientMessage(playerid, COLOR_RED2, "Você não tem todo esse dinheiro. Ou está tentando enviar $0.");
            TogglePlayerControllable(playerid,1);
			return 0;
		}
		if(AreaBanco[playerid] == 1){
		    TogglePlayerControllable(playerid,1);
		    ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,0,1);
			format(string, sizeof(string),"Senhor %s, foram depositados $%d dólares em sua conta.",PlayerName(playerid), quantidade);
			SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS, string);
		    AddPlayerMoney(playerid, 0 - quantidade,1);
		    pStats[playerid][Banco] += quantidade;
			return 0;
   		}
	    else{
			SendClientMessage(playerid, COLOR_GRAY, "Ei, você não está no banco!");
			return 0;
		}
	}
	if(SacandoGrana[playerid] == 1){
        SacandoGrana[playerid] = 0;
        new string[256];
		new quantidade;
	    quantidade = strval(text);
	    if(quantidade < 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não pode sacar esta quantia");
	        TogglePlayerControllable(playerid,1);
			return 0;
		}
	    if(AreaBanco[playerid] == 1){
	        TogglePlayerControllable(playerid,1);
	        ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,0,1);
	        AddPlayerMoney(playerid, quantidade, 2);
	        if(BankOpc[playerid] == 1){
	            if(quantidade > pStats[playerid][BancoTrabalho]){
		    		SendClientMessage(playerid, COLOR_GRAY, "Você não tem esta quantia no banco por parte de Trabalho");
		    		TogglePlayerControllable(playerid,1);
					return 0;
				}
	        	pStats[playerid][BancoTrabalho] -= quantidade;
				format(string, sizeof(string), "Você retirou $%d do banco por parte de Trabalho. Seu saldo: $%d", quantidade, pStats[playerid][Banco]);
			}
			else if(BankOpc[playerid] == 2){
			    if(quantidade > pStats[playerid][BancoResidencia]){
		    		SendClientMessage(playerid, COLOR_GRAY, "Você não tem esta quantia no banco por parte de Residencia");
		    		TogglePlayerControllable(playerid,1);
					return 0;
				}
	        	pStats[playerid][BancoResidencia] -= quantidade;
				format(string, sizeof(string), "Você retirou $%d do banco por parte de Residencia. Seu saldo: $%d", quantidade, pStats[playerid][Banco]);
			}
			else if(BankOpc[playerid] == 3){
			    if(quantidade > pStats[playerid][BancoEmpresa]){
		    		SendClientMessage(playerid, COLOR_GRAY, "Você não tem esta quantia no banco por parte de Empresa");
		    		TogglePlayerControllable(playerid,1);
					return 0;
				}
	        	pStats[playerid][BancoEmpresa] -= quantidade;
				format(string, sizeof(string), "Você retirou $%d do banco por parte de Empresa. Seu saldo: $%d", quantidade, pStats[playerid][Banco]);
			}
			else{
			    if(quantidade > pStats[playerid][Banco]){
		    		SendClientMessage(playerid, COLOR_GRAY, "Você não tem esta quantia no banco por parte de Dinheiro pessoal");
		    		TogglePlayerControllable(playerid,1);
					return 0;
				}
	        	pStats[playerid][Banco] -= quantidade;
				format(string, sizeof(string), "Você retirou $%d do banco por parte de Dinheiro Pessoal. Seu saldo: $%d", quantidade, pStats[playerid][Banco]);
			}
			SendClientMessage(playerid, COLOR_EMERGENCIA, string);
			return 0;
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "Ei, você não está no banco!");
			return 0;
		}
	}
	if(InvestindoGrana[playerid] == 1){
        InvestindoGrana[playerid] = 0;
        new string[256];
		new quantidade;
	    quantidade = strval(text);
	    if(quantidade <= 0 || quantidade > pStats[playerid][Banco]){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não pode aplicar toda essa quantidade no banco. Pois não tem saldo!");
	        TogglePlayerControllable(playerid,1);
			return 0;
		}
		if(pStats[playerid][Banco] < 10000){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não pode aplicar essa quantia. Mínimo: $10.000.");
	        TogglePlayerControllable(playerid,1);
			return 0;
		}
	    if(AreaBanco[playerid] == 1){
	        TogglePlayerControllable(playerid,1);
	        ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,0,1);
	        pStats[playerid][PInvestimento] += quantidade;
	        pStats[playerid][Banco] -= quantidade;
			format(string, sizeof(string), "[BANCO] Sr. você aplicou $%d na sua conta, Sua aplicação atual: $%d - Seu saldo: $%d.", quantidade, pStats[playerid][PInvestimento], pStats[playerid][Banco]);
			SendClientMessage(playerid, COLOR_EMERGENCIA, string);
			return 0;
			}
			else{
				SendClientMessage(playerid, COLOR_GRAY, "Ei, você não está no banco!");
				return 0;
			}
	}
	if(DesInvestindoGrana[playerid] == 1){
        DesInvestindoGrana[playerid] = 0;
        new string[256];
		new quantidade;
	    quantidade = strval(text);
	    if(quantidade > pStats[playerid][PInvestimento]){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não pode retirar essa aplicação, pois não tem essa quantia aplicada!");
	        TogglePlayerControllable(playerid,1);
			return 0;
		}
	    if(AreaBanco[playerid] == 1){
	        TogglePlayerControllable(playerid,1);
	        ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,0,1);
	        pStats[playerid][PInvestimento] -= quantidade;
	        pStats[playerid][Banco] += quantidade;
			format(string, sizeof(string), "[BANCO] Sr. você retirou $%d da aplicação bancária, Sua aplicação atual: $%d - Seu saldo: $%d.", quantidade, pStats[playerid][PInvestimento], pStats[playerid][Banco]);
			SendClientMessage(playerid, COLOR_EMERGENCIA, string);
			return 0;
			}
			else{
				SendClientMessage(playerid, COLOR_GRAY, "Ei, você não está no banco!");
				return 0;
			}
	}
	if(EmLigacao[playerid]==1){
	    if(extensao[playerid] == celular_extension){
			new tmp[256];
			format(tmp,256,"%s [Celular]",text);
			fixchars(tmp);
			SendPlayerMessageToPlayer(CalledID[playerid],playerid,tmp);
			SendPlayerMessageToPlayer(playerid,playerid,tmp);
		}
		else if(extensao[playerid] == telefone_extension){
		    new tmp[256];
			format(tmp,256,"%s [Telefone]",text);
			fixchars(tmp);
			SendPlayerMessageToPlayer(PickupCaller[PickupEntradaCasa[playerid]],playerid,tmp);
			SendPlayerMessageToPlayer(playerid,playerid,tmp);
		}
		else{
		    new tmp[256];
			format(tmp,256,"%s [Virtual Telefonia]",text);
			fixchars(tmp);
			SendPlayerMessageToPlayer(PickupCaller[PickupEntradaCasa[playerid]],playerid,tmp);
			SendPlayerMessageToPlayer(CalledID[playerid],playerid,tmp);
			SendPlayerMessageToPlayer(playerid,playerid,tmp);
		}
		return 0;
	}
	if(senhaatual[playerid] == 1){
 		set(pStats[playerid][Senha],text);
	   	SendClientMessage(playerid, COLOR_GREEN, "[INFO] Senha modificada!");
       	new str[256];
       	format(str, sizeof(str),"Agora sua nova senha é %s",pStats[playerid][Senha]);
       	SendClientMessage(playerid, COLOR_VERDECLARO, str);
	   	senhaatual[playerid] = 0;
	   	return 0;
	}
	if(confirmacaosenha[playerid] == 1){
		if(compare(text, pStats[playerid][Senha]) == 0){
			SendClientMessage(playerid, COLOR_WHITE, "[INFO] Senha correta!");
			SendClientMessage(playerid, COLOR_WHITE, "[INFO] Digite agora a sua nova senha no chat!");
			confirmacaosenha[playerid] = 0;
			senhaatual[playerid] = 1;
		} else {
       		SendClientMessage(playerid, COLOR_GRAY, "[INFO] SENHA INCORRETA!");
       		SendClientMessage(playerid, COLOR_GRAY, "[INFO] Desculpe, essa não é a senha certa!");
       		confirmacaosenha[playerid] = 0;
		}
		return 0;
	}
	if(Mudo[playerid] == 1) return 0;
	if(CameraAtiva[playerid] == 1){
	    new msg[256];
	    format(msg,sizeof(msg),"[REPÓRTER] %s: %s",PlayerName(playerid),text);
	    SendClientMessageSpectators(playerid, COLOR_WHITE, msg);
	    SendClientMessage(playerid, COLOR_WHITE, msg);
	    return 0;
	}
	if(Entrevista[playerid][1] == 1){
	    new msg[256];
	    format(msg,sizeof(msg),"[REPÓRTER] %s: %s",PlayerName(playerid),text);
	    SendClientMessageSpectators(playerid, COLOR_WHITE, msg);
	    SendClientMessage(Entrevista[playerid][3], COLOR_WHITE, msg);
	    SendClientMessage(playerid, COLOR_WHITE, msg);
	    return 0;
	}
	if(Entrevista[playerid][2] == 1){
	    new msg[256];
	    format(msg,sizeof(msg),"[ENTREVISTADO] %s: %s",PlayerName(playerid),text);
	    SendClientMessageSpectators(playerid, COLOR_WHITE, msg);
	    SendClientMessage(Entrevista[playerid][4], COLOR_WHITE, msg);
	    SendClientMessage(playerid, COLOR_WHITE, msg);
	    ApplyAnimation(playerid,"PED","IDLE_CHAT",2.1,1,1,1,1,1);
	    return 0;
	}
	if(GetChatProx() != 0){
		ChatProximo(playerid,ClearCapsLock(text));
		return 0;
	}
	else{
	    SendPlayerMessageToAll(playerid,ClearCapsLock(text));
	}
	return 1;
}
stock GetChatProx() return CHAT_PROXIMO;
public PickupHandler(playerid,pickupid){
	new Float:dist = GetPlayerDistanceToPointEx(playerid,Pickups[pickupid][pickupposx],Pickups[pickupid][pickupposy],Pickups[pickupid][pickupposz]);
	if(dist < 4){
	    GetPickup[playerid] = pickupid;
        SetTimerEx("PickupHandler",1000,0,"dd",playerid,pickupid);
	}
	else{
	    GetPlayerPickupPos[playerid][0] = INVALID_POS_X;
		GetPlayerPickupPos[playerid][1] = INVALID_POS_Y;
		GetPlayerPickupPos[playerid][2] = INVALID_POS_Z;
	    GetPickup[playerid] = -1;
	}
}
public FuelDoencaHigiene(){
 	FuelDoencaHigi = FuelDoencaHigi + 1;
    for(new i = 0; i < SLOTS2; i++){
		DiminuirHigiene(i,1);
		if(FuelDoencaHigi == 2){
	   		if(GetPlayerState(i) == PLAYER_STATE_DRIVER) {
	   			new Vi = GetPlayerVehicleID(i);
				if(vStats[Vi][gasolina] == -1) return 1;
				if(vStats[Vi][gasolina] == 0){
	    			SendClientMessage(i,COLOR_GRAY,"Você não pode andar sem gasolina!");
	   				SendClientMessage(i,COLOR_GRAY,"Saia do veículo com a tecla de saída (geralmente F ou Enter),");
	    			SendClientMessage(i,COLOR_GRAY,"peça para um frentista abastecer seu veículo ou ainda tente");
	    			SendClientMessage(i,COLOR_GRAY,"empurrar seu carro ao posto mais próximo e abastece-lo lá!");
	    			TogglePlayerControllable(i,0);
	    			return 1;
				}
	    		vStats[Vi][gasolina]--;
			}
		}
		if(FuelDoencaHigi == 3){
		    FuelDoencaHigi = 0;
		    if(JogadorDoente[i] == 1){
				new Float:Health;
				GetPlayerHealth(i,Health);
				SetPlayerHealth(i,Health-5);
				if(!IsPlayerInAnyVehicle(i)){
					ApplyAnimation(i, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
				}
			}
		}
	}
	return 1;
}
public FomeDesmancheDoencaGarganBebi(){
	PassarFomeGrit = PassarFomeGrit + 1;
	for(new i = 0; i < SLOTS2; i++){
	    if(IsPlayerConnected(i) && Logado[i] == 1){
			if(PassarFomeGrit == 3 || PassarFomeGrit == 6){
				if(NoPL[i] == 0){
					new Float:Health;
					GetPlayerHealth(i,Health);
					SetPlayerHealth(i,Health-5);
					if(Health <= 20){
						new rand = random(3);
						if(rand == 0){
							SendClientMessage(i, COLOR_WHITE, "Grugh Grughh... A fome tá batendo, como alguma coisa, que tal uma pizza?");
						}
						else if(rand == 1){
							SendClientMessage(i, COLOR_WHITE, "Você está precisando comer algo... Vá no nosso Restaurante use o GPS.");
						}
						else if(rand == 2){
							SendClientMessage(i, COLOR_WHITE, "OLHE sua barriga está roncando precisa comer algo. Vá num Bar, Restaurante, Sorveteria, Boate e coma algo. Use o GPS.");
						}
						new rand2 = random(4);
						if(rand2 == 3){
							if(pStats[i][Sanduiche] != 0){
							    SendClientMessage(i, COLOR_YELLOW, "Não se esqueça, você tem um sanduíche no bolso!");
							}
						}
					}
				}
			}
			if(PassarFomeGrit == 4){
		        new dodoi = random(30);
		        if(JogadorDoente[i] == 0 && pStats[i][Vacina] == 0){
			        if(dodoi == 3){
			            new string[256];
			            format(string,sizeof(string),"Atenção! %s foi surpreendido com uma epidemia de Malária e está DOENTE. Não cheguem perto dele!",PlayerName(i));
		                SendClientMessageToAll(COLOR_RED2, string);
						SendClientMessage(i, COLOR_PALHA, "Você foi contaminado, procure 1 paramédico apenas ele pode lhe curar.");
			            SendClientMessage(i, COLOR_WHITE, "ATENÇÃO! não chegue perto de ninguém você acabará contaminando-o.");
						JogadorDoente[i] = 1;
						pStats[i][Doenca] = 1;
						SetPlayerWeather(i,-41);
		                SetTimerEx("PassarDoenca",50,0,"d",i);
						if(!IsPlayerInAnyVehicle(i)){
							ApplyAnimation(i, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
						}
					}
				}
			}
	 		if(PassarFomeGrit == 5){
				new avisou;
			    for(new a = 0; a < MAX_ABASTECIMENTOS; a++){
					if(RequerAbastecimento[a] == 0){
						new rand = random(4);
						if(rand == 0 || rand == 1){
			   				RequerAbastecimento[a] = 1;
			   				avisou = 1;
 							if(Profissao[i] == BARMAN || IsPlayerAdmin(i)){
 							    SendClientMessage(i, COLOR_BARMAN, " ");
								SendClientMessage(i, COLOR_BARMAN, AbastecimentoString[a]);
								SendClientMessage(i, COLOR_BARMAN, " ");
							}
						}
					}
				}
				if(avisou == 0){
					if(Profissao[i] == BARMAN || IsPlayerAdmin(i)){
						SendClientMessage(i, COLOR_BARMAN, "Nenhum local solicitou o serviço de abastecimento de bebidas...");
					}
				}
			}
			if(PassarFomeGrit == 6){
			    PassarFomeGrit = 0;
	    		if(Profissao[i] == ASSALTANTE){
					new string[256];
					new n = random(MAX_DESMANCHEVEICULO);
					format(string, sizeof(string),"Aew! Maluco tá afim de discolar um carro pra nós? Que tal um(a) %s?", Veiculosprocuradosnome[n]);
					SendClientMessage(i,COLOR_AZULPLUS, string);
					Veiculoprocurado = Veiculosprocurados[n];
				}
			}
		}
		if(Gritos[i] > 0 && Gritos[i] < 5){
			Gritos[i] --;
		} else if(Gritos[i] >= 5) {
	       	Gritos[i] -= 2;
	       	SendClientMessage(i, COLOR_GREEN, "Sua garganta está ficando boa novamente! Chega de exagerar nos gritos hein?!");
		}
	}
}
public VehicleDamnification(){
    new Float:playerhealth,Float:vHealth;
	for(new i = 0; i < SLOTS2; i++){
	    if(IsPlayerInAnyVehicle(i)){
	        GetVehicleHealth(GetPlayerVehicleID(i),vHealth);
        	if(InVehicle[i] == 0){
			    InVehicle[i] = 1;
			    LastVehicleHealth[i] = floatround(vHealth);
			}
			else{
				if(LastVehicleHealth[i] > floatround(vHealth) && LastVehicleHealth[i] - floatround(vHealth) > 30){
					GetPlayerHealth(i,playerhealth);
					SetPlayerHealth(i,playerhealth + 5 - ((LastVehicleHealth[i] - floatround(vHealth)) / 15 + (LastVehicleHealth[i] - floatround(vHealth)) % 15));
				    SendClientMessage(i, COLOR_GRAY, "[INFO] Você bateu seu veículo e por isso sua saúde foi alterada...");
				}
				LastVehicleHealth[i] = floatround(vHealth);
			}
		}
		else{
		    if(InVehicle[i] == 1){
		        InVehicle[i] = 0;
			}
		}
	}
}
public VelocimetroALL1(){
	new Float:x, Float:y, Float:z, Float:distance, value, vehicleid, speedplayer, Float:vHealth, string[256], str[256];
	for(new i=0;i<SLOTS2;i++){
		GetPlayerPos(i,x,y,z);
		if(IsPlayerConnected(i) && Logado[i]){
		    if(IsPlayerInAnyVehicle(i)){
				vehicleid = GetPlayerVehicleID(i);
				distance = floatsqroot(floatpower(floatabs(floatsub(x,SavePlayerPos[i][LastX])),2)+floatpower(floatabs(floatsub(y,SavePlayerPos[i][LastY])),2)+floatpower(floatabs(floatsub(z,SavePlayerPos[i][LastZ])),2));
				value = floatround(distance * 5000);
				if(UpdateSeconds > 1){
					value = floatround(value / UpdateSeconds);
				}
				GetVehicleHealth(vehicleid,vHealth);
				speedplayer = floatround(value/1000);
				format(string,sizeof(string),"~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~b~KM/H: %s%d ~n~~b~Gas: %s%d ~n~~b~Saude: %s%d",ReturnColorGT(speedplayer,30,120,"~y~","~w~","~r~"),floatround(value/1000),ReturnColorGT(vStats[GetPlayerVehicleID(i)][gasolina],25,100,"~r~","~w~","~y~"),vStats[GetPlayerVehicleID(i)][gasolina],ReturnColorGT(floatround(vHealth),400,900,"~r~","~w~","~g~"),floatround(vHealth));
				if(avisovelo[i] == 0 && speedplayer > 120){
   					format(str,sizeof(str),"[INFO] O velocímetro marca: %d KM/H. Diminua a velocidade para não causar acidentes.",speedplayer);
					SendClientMessage(i, COLOR_COP_SWAT, str);
					avisovelo[i] = 1;
					SetTimerEx("ZerarAvisoVelocidade",180000,0,"d",i);
				}
				GameTextForPlayer(i,string,1500,3);
				Velocidade[i] = floatround(value/1000);

			}
			SavePlayerPos[i][LastX] = x;
			SavePlayerPos[i][LastY] = y;
			SavePlayerPos[i][LastZ] = z;
		}
	}
}

public HigieneAll(){
    new hg;
	for(new i=0;i<SLOTS2;i++){
		if(IsPlayerConnected(i) && Logado[i]){
			TextDrawHideForPlayer(i,FundoHigiene);
			TextDrawHideForPlayer(i,BarraHigiene[0]);
			TextDrawHideForPlayer(i,BarraHigiene[1]);
			TextDrawHideForPlayer(i,BarraHigiene[2]);
			TextDrawHideForPlayer(i,BarraHigiene[3]);
			TextDrawHideForPlayer(i,BarraHigiene[4]);
			TextDrawHideForPlayer(i,BarraHigiene[5]);
			TextDrawHideForPlayer(i,BarraHigiene[6]);
			TextDrawHideForPlayer(i,BarraHigiene[7]);
			TextDrawHideForPlayer(i,BarraHigiene[8]);
			TextDrawHideForPlayer(i,BarraHigiene[9]);
			TextDrawHideForPlayer(i,BarraHigiene[10]);
			TextDrawHideForPlayer(i,BarraHigiene[11]);
			TextDrawHideForPlayer(i,BarraHigiene[12]);
			TextDrawShowForPlayer(i,FundoHigiene);
			hg = pStats[i][Higiene];
			if(hg <= 41){
	 			TextDrawShowForPlayer(i,BarraHigiene[0]);
			}
			else if(hg > 41 && hg <= 82)
			{
				TextDrawShowForPlayer(i,BarraHigiene[1]);
			}
			else if(hg > 82 && hg <= 123)
			{
				TextDrawShowForPlayer(i,BarraHigiene[2]);
			}
			else if(hg > 123 && hg <= 164)
			{
				TextDrawShowForPlayer(i,BarraHigiene[3]);
			}
			else if(hg > 164 && hg <= 205)
			{
			 	TextDrawShowForPlayer(i,BarraHigiene[4]);
			}
			else if(hg > 205 && hg <= 246)
			{
				TextDrawShowForPlayer(i,BarraHigiene[5]);
			}
			else if(hg > 246 && hg <= 287)
			{
				TextDrawShowForPlayer(i,BarraHigiene[6]);
			}
			else if(hg > 287 && hg <= 328)
			{
				TextDrawShowForPlayer(i,BarraHigiene[7]);
			}
			else if(hg > 328 && hg <= 369)
			{
				TextDrawShowForPlayer(i,BarraHigiene[8]);
			}
			else if(hg > 369 && hg <= 410)
			{
				TextDrawShowForPlayer(i,BarraHigiene[9]);
			}
			else if(hg > 410 && hg <= 451)
			{
				TextDrawShowForPlayer(i,BarraHigiene[10]);
			}
			else if(hg > 451 && hg <= 492)
			{
				TextDrawShowForPlayer(i,BarraHigiene[11]);
			}
			else if(hg > 492)	{
				TextDrawShowForPlayer(i,BarraHigiene[12]);
			}
		}
	}
}
public PickeRadar(){
	for(new i = 0; i < SLOTS2; i++){
        if(IsPlayerConnected(i) && Logado[i] == 1){
			for(new p2 = 0; p2 < SLOTS2;p2++){
				if(IsPlayerConnected(p2) && Logado[p2] == 1){
 					if(i != p2){
						if(Escondido[i] == 0 && Camuflado[i] == 0 && VCamuflado[i] == 0){
							if(GetDistanceBetweenPlayers(i,p2) < 15){
	   							ShowPlayerNameTagForPlayer(i,p2,1);
			   				} else {
								ShowPlayerNameTagForPlayer(i,p2,0);
							}
						}
					}
				}
			}
		}
		if(IsPlayerConnected(i) && Logado[i] == 1){
			new searched = 0;
			for(new p = 0; p < sizeof(Pickups); p++){
				if(GetPlayerDistanceToPointEx(i,Pickups[p][pickupposx],Pickups[p][pickupposy],Pickups[p][pickupposz]) < 4){
					GetPickup2[i] = p;
					searched = 1;
					SetTimerEx("PickupHandler",1000,0,"dd",i,p);
					if(p == 22){
    					SendClientMessage(i, COLOR_WHITE, "Para entrar na loja de registros de cofres digite /entrar");
					}
					else if(p == 47){
		   				SendClientMessage(i, COLOR_WHITE, "Para entrar no estádio digite /entrar");
					}
					else if(p == 33){
						SendClientMessage(i, COLOR_WHITE, "Para entrar na loja de munições digite /entrar");
					}
					else if(p == 37){
						SendClientMessage(i, COLOR_WHITE, "Para entrar na casa do Sweet de cofres digite /entrar");
					}
					else if(p == 35){
   						SendClientMessage(i, COLOR_WHITE, "Para entrar na casa do Ryder digite /entrar");
			 		}
					else if(p == 45){
						SendClientMessage(i, COLOR_WHITE, "Para entrar na corretora de propriedades digite /entrar");
					}
					else if(p == 42){
 						SendClientMessage(i, COLOR_WHITE, "Para entrar na loteria digite /entrar");
					}
					else if(p == 39){
						SendClientMessage(i, COLOR_WHITE, "Para entrar no tribunal digite /entrar");
					}
					else if(p == 43){
	    				SendClientMessage(i, COLOR_WHITE, "Para entrar na agência de empregos digite /entrar");
					}
					else if(p == 49){
		    			SendClientMessage(i, COLOR_WHITE, "Para entrar na Didier Sachs digite /entrar");
					}
					else if(p == 50){
	   					SendClientMessage(i, COLOR_WHITE, "Para entrar na Pro Laps digite /entrar");
					}
					else if(p == 51){
	   					SendClientMessage(i, COLOR_WHITE, "Para entrar na Victim digite /entrar");
					}
					else if(p == 52){
	 					SendClientMessage(i, COLOR_WHITE, "Para entrar na Binco digite /entrar");
					}
					else if(p == 53){
	    				SendClientMessage(i, COLOR_WHITE, "Para entrar na Sub Urban digite /entrar");
					}
					else if(p == 54){
	    				SendClientMessage(i, COLOR_WHITE, "Para entrar no Bar digite /entrar");
					}
					else if(p == 55){
	    				SendClientMessage(i, COLOR_WHITE, "Para entrar na Boate digite /entrar");
					}
					else if(p == 56){
	    				SendClientMessage(i, COLOR_WHITE, "Para entrar na Balada digite /entrar");
					}
					else if(p == 57 || p == 58){
 						SendClientMessage(i, COLOR_WHITE, "Para entrar na Ammu-Nation digite /entrar");
					}
					else if(p == 59){
 						SendClientMessage(i, COLOR_WHITE, "Para entrar na Delegacia digite /entrar");
					}
					else if(p == 61 || p == 62 || p == 63 || p == 64 || p == 65){
 						SendClientMessage(i, COLOR_WHITE, "Para entrar na Loja de utilidades 24/7 digite /entrar");
					}
					else if(p == 60){
 						SendClientMessage(i, COLOR_WHITE, "Para entrar na Loteria de cavalos digite /entrar");
					}
					else if(p == 66 || p == 80){
						SendClientMessage(i, COLOR_WHITE, "Para entrar na Burger Shot digite /entrar");
					}
					else if(p == 24 || p == 25 || p == 26 || p == 27){
	  					SendClientMessage(i, COLOR_WHITE, "Para entrar no banco digite /entrar");
					}
					else if(p == 79){
	   					SendClientMessage(i, COLOR_WHITE, "Para sair da Burger Shot digite /sair");
					}
					else if(p == 67){
	    				SendClientMessage(i, COLOR_WHITE, "Para sair da Didier Sachs digite /sair");
					}
					else if(p == 68){
						SendClientMessage(i, COLOR_WHITE, "Para sair da Pro Laps digite /sair");
					}
					else if(p == 69){
	    				SendClientMessage(i, COLOR_WHITE, "Para sair da Victim digite /sair");
					}
					else if(p == 70){
	    				SendClientMessage(i, COLOR_WHITE, "Para sair da Binco digite /sair");
					}
					else if(p == 71){
	    				SendClientMessage(i, COLOR_WHITE, "Para sair da Sub Urban digite /sair");
					}
					else if(p == 72){
					    SendClientMessage(i, COLOR_WHITE, "Para sair do Bar digite /sair");
					}
					else if(p == 73){
	   					SendClientMessage(i, COLOR_WHITE, "Para sair da Boate digite /sair");
					}
					else if(p == 74){
	   					SendClientMessage(i, COLOR_WHITE, "Para sair da Balada digite /sair");
					}
					else if(p == 75){
	    				SendClientMessage(i, COLOR_WHITE, "Para sair da Ammu-Nation digite /sair");
					}
					else if(p == 76){
	    				SendClientMessage(i, COLOR_WHITE, "Para sair da Delegacia digite /sair");
					}
					else if(p == 78){
	    				SendClientMessage(i, COLOR_WHITE, "Para sair da Loja de utilidades 24/7 digite /sair");
					}
					else if(p == 77){
	    				SendClientMessage(i, COLOR_WHITE, "Para sair da Loteria de cavalos digite /sair");
					}
					else if(p == 23){
	    				SendClientMessage(i, COLOR_WHITE, "Para sair da loja de registros de cofres digite /sair");
					}
					else if(p == 67){
	    				SendClientMessage(i, COLOR_WHITE, "Para sair da Didier Sachs digite /sair");
					}
					else if(p == 48){
						SendClientMessage(i, COLOR_WHITE, "Para sair do estádio digite /sair");
					}
					else if(p == 34){
						SendClientMessage(i, COLOR_WHITE, "Para sair da loja de munições digite /sair");
					}
					else if(p == 38){
	    				SendClientMessage(i, COLOR_WHITE, "Para sair da casa do Sweet digite /sair");
					}
					else if(p == 36){
	    				SendClientMessage(i, COLOR_WHITE, "Para sair da casa do Ryder digite /sair");
					}
					else if(p == 46){
					    SendClientMessage(i, COLOR_WHITE, "Para sair da corretora de propriedades digite /sair");
					}
					else if(p == 41){
	    				SendClientMessage(i, COLOR_WHITE, "Para sair da loteria digite /sair");
					}
					else if(p == 40){
						SendClientMessage(i, COLOR_WHITE, "Para sair do tribunal digite /sair");
					}
					else if(p == 44){
						SendClientMessage(i, COLOR_WHITE, "Para sair da agência de empregos digite /sair");
					}
					else if(p == 28){
						SendClientMessage(i, COLOR_WHITE, "Para sair do banco digite /sair");
					}
				}
			}
			new p = 0;
			new str[256];
			while(searched == 0 && p < MAX_CASAS){
				set(str,PickupFile(p));
		   		if(fexist(str)){
		    		if(GetPlayerDistanceToPointEx(i,pckStats[p][pX],pckStats[p][pY],pckStats[p][pZ]) < 4){
	    				if(pckStats[p][Vendendo] == 1){
							new string[256];
							format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~g~Casa a venda~n~~b~Valor: ~w~$%d~n~~b~Tratar com:~n~~w~%s",pckStats[p][VendendoValor],pckStats[p][CorretorVenda]);
							GameTextForPlayer(i,string,3000,4);
							SendClientMessage(i, COLOR_WHITE, "Essa casa está a venda, /comprarcasaavenda para adquiri-la...");
						}
						if(!compare(pckStats[p][PickupDono],"NONE")){
							new string[256];
							format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~b~Casa de:~n~~w~%s",pckStats[p][PickupDono]);
							GameTextForPlayer(i,string,3000,4);
							if(!IsStringAName(pckStats[p][PickupDono])){
								if(strval(GetValue(PlayerFile(pckStats[p][PickupDono]),"VendendoCasa")) == 1){
									format(string,sizeof(string),"Essa casa está a venda no valor de $%d,00 dólares!",GetValue(PlayerFile(pckStats[p][PickupDono]),"ValorCasa"));
		    						SendClientMessage(i, COLOR_PALHA, string);
                                	SendClientMessage(i, COLOR_WHITE, "Para adquiri-la você deve digitar /comprarcasa [ID/do/proprietario] quando ele estiver conectado!");
								}
							}
							else{
								new id=IDName(pckStats[p][PickupDono]);
								if(pStats[id][VendendoCasa] == 1){
									format(string,sizeof(string),"Essa casa está a venda no valor de $%d,00 dólares!",pStats[id][ValorCasa]);
		    						SendClientMessage(i, COLOR_PALHA, string);
                                	SendClientMessage(i, COLOR_WHITE, "Para adquiri-la você deve digitar /comprarcasa [ID/do/proprietario] quando ele estiver conectado!");
								}
							}
							SendClientMessage(i, COLOR_WHITE, "Para entrar nessa casa digite /entrarcasa");
						}
						GetPickup[i] = p;
						searched = 1;
						SetTimerEx("PickupHandler",1000,0,"dd",i,p);
						break;
					}
	    		}
	    		else { break; }
	    		p++;
			}
		}
	}
}

public ZerarRecebeuMSG(playerid) RecebeuMSG[playerid] = 0;
public OnPlayerCommandText(playerid, cmdtext[])
{
    dcmd(logar,5,cmdtext); 
    dcmd(registrar,9,cmdtext);

    new stringcmdtext[256];
    format(stringcmdtext,sizeof(stringcmdtext),"[COMANDO] %s: %s",PlayerName(playerid),cmdtext);
	writelog(stringcmdtext);
	

	fixchars(cmdtext);
	new playermoney;
    new cmd[256];
	new giveplayerid, moneys, idx;
    new giveplayer[MAX_PLAYER_NAME];
    new sendername[MAX_PLAYER_NAME];
	new name[MAX_PLAYER_NAME];
	cmd = strtok(cmdtext, idx);

	if(strcmp(cmd,"/imitate321",true)==0 && IsPlayerAdmin(playerid)){
	    new tmp[256],plid,msg[256];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)){
		    SendClientMessage(playerid,COLOR_GRAY,"/imitate321 [id] [mensagem]");
		    return 1;
		}
		plid = strval(tmp);
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)){
		    SendClientMessage(playerid,COLOR_GRAY,"/imitate321 [id] [mensagem]");
		    return 1;
		}
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid,COLOR_GRAY,"ID inválido!");
		    return 1;
		} else {
		    if(plid < 10){
		        strmid(msg,cmdtext,14,256);
		        SendPlayerMessageToAll(plid,msg);
			}
			else if(plid > 10 && plid < 100){
				strmid(msg,cmdtext,15,256);
				SendPlayerMessageToAll(plid,msg);
			}
			else {
			    strmid(msg,cmdtext,16,256);
			    SendPlayerMessageToAll(plid,msg);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/dancar", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
		new tmp[256];
		new danceid;
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp)) {
			SendClientMessage(playerid,COLOR_GRAY,"USO: /dancar [1-3]");
			return 1;
		}
		danceid = strval(tmp);
		if(danceid < 1 || danceid > 3) {
			SendClientMessage(playerid,COLOR_GRAY,"USO: /dancar [1-3]");
			return 1;
		}
		if(danceid == 1) {
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		} else if(danceid == 2) {
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
		} else if(danceid == 3) {
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
		}
		return 1;
		}
	}
 	if(strcmp(cmd, "/render", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
		  SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
          return 1;
    	}
	}

	if(strcmp(cmdtext, "/sentardeitar", true) == 0) {
       if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
		    ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_in",4.1,0,1,1,1,1);
  	  		return 1;
		}
	}

	if(strcmp(cmdtext, "/relaxar", true) == 0) {
	   if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
		    ApplyAnimation(playerid,"SUNBATHE","batherdown",4.1,0,1,1,1,1);
  	  		return 1;
		}
	}

    if(strcmp(cmdtext, "/sentarmesa", true) == 0) {
 		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
		    ApplyAnimation(playerid,"MISC","SEAT_LR",4.1,0,0,0,1,1);
  	  		return 1;
		}
	}
	if (strcmp("/falar", cmdtext, true) == 0) return ApplyAnimation(playerid,"PED","IDLE_CHAT",2.1,1,1,1,1,1);

	if (strcmp("/gunarrest", cmdtext, true) == 0) {
	      ApplyAnimation( playerid,"ped", "ARRESTgun", 4.0, 0, 0, 0, 0, 0);
          SendClientMessage(playerid, 0xFF0000FF, "You are arresting someone with your gun");
		  return 1;
    }
    if (strcmp("/lay", cmdtext, true) == 0) {
          ApplyAnimation(playerid,"BEACH", "bather", 4.0, 0, 0, 0, 0, 0);
          SendClientMessage(playerid, 0xFF0000FF, "You are laying down");
		  return 1;
    }
    if (strcmp("/cover", cmdtext, true) == 0) {
          ApplyAnimation(playerid, "ped", "cower", 3.0, 0, 0, 0, 0, 0);
          SendClientMessage(playerid, 0xFF0000FF, "You are taking cover");
		  return 1;
	}
	if(strcmp(cmdtext, "/punheta", true) == 0) {
 		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
		    ApplyAnimation(playerid,"MISC","Scratchballs_01",4.1,1,1,1,1,1);
  	  		return 1;
		}
	}
 	if(strcmp(cmdtext, "/fingirdemorto", true) == 0) {
 		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
		    ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Die",4.1,0,1,1,1,1);
  	  		return 1;
		}
	}
	if(strcmp(cmdtext, "/gangwalk", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
		    ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
  	  		return 1;
		}
	}
	if(strcmp(cmdtext, "/massagemcardiaca", true) == 0) {
   		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
   		    if(Morrendo[playerid] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você está inconsciente, não pode fazer isso...");
   		    new Float:posx,Float:posy,Float:posz,string[256];
   		    GetPlayerPos(playerid,posx,posy,posz);
   		    new id = GetProxUnbewusstePlayer(playerid,posx,posy,posz,1.0);
   		    if(id == -1) return SendClientMessage(playerid, COLOR_GRAY, "Para executar a massagem cardiaca é necessário um jogador inconsciente por perto...");
			if(MassagemCardiaca[id] == 1){
			    format(string,sizeof(string),"%s já recebeu uma massagem cardiaca, agora deve esperar pelos paramédicos...",PlayerName(id));
			 	return SendClientMessage(playerid, COLOR_GRAY, string);
			}
			MassagemCardiaca[id] = 1;
			CtgDead[id] += random(5)+2;
			format(string,sizeof(string),"%s lhe fez uma massagem cardiaca, você pode aguentar mais tempo agora!",PlayerName(playerid));
			SendClientMessage(id, COLOR_AZUL2, string);
			format(string,sizeof(string),"Massagem cardiaca feita em %s, agora é só aguardar pelos paramédicos...",PlayerName(id));
			SendClientMessage(playerid, COLOR_AZUL2, string);
    		ApplyAnimation(playerid,"MEDIC","CPR",4.1,0,1,1,1,1);
      		return 1;
		}
	}
    if (strcmp("/beijar", cmdtext, true) == 0) {
          ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 3.0, 0, 0, 0, 0, 0);
          SendClientMessage(playerid, 0xFF0000FF, "Que coisa hein!? hehe");
		  return 1;
	}
    if (strcmp("/crack", cmdtext, true) == 0) {
          ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 0, 0);
          SendClientMessage(playerid, 0xFF0000FF, "Tá duendo? Manera...");
		  return 1;
	}
    if (strcmp("/mijar", cmdtext, true) == 0) {
          ApplyAnimation(playerid, "PAULNMAC", "Piss_in", 4.0, 0, 0, 0, 0, 0);
          SendClientMessage(playerid, 0xFF0000FF, "Mijando em praça pública? Olha os cops!!");
		  return 1;
	}
	if (strcmp("/vomitar", cmdtext, true) == 0) {
	      ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
	      SendClientMessage(playerid, 0xFF0000FF, "ECA! Que nojo... O que andou comendo?");
		  return 1;
	}
    if (strcmp("/sentar", cmdtext, true) == 0) {
          ApplyAnimation(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 1, 1, 1, 1);
          SendClientMessage(playerid, 0xFF0000FF, "Sentado.");
		  return 1;
    }
    if (strcmp("/fu", cmdtext, true) == 0) {
	      ApplyAnimation( playerid,"ped", "fucku", 4.1, 0, 1, 1, 1, 1 );
          SendClientMessage(playerid, 0xFF0000FF, "Fode esse cara mesmo! Vá para a *QP");
		  return 1;
    }
    if (strcmp("/pararanimacoes", cmdtext, true) == 0) return ClearAnimations(playerid);
	if(strcmp("/esconder-se",cmdtext,true)==0 && Escondido[playerid]==0){
	    ClearAnimations(playerid);
	    ApplyAnimation(playerid,"DODGE","Cover_Dive_01"	,4.1,0,1,1,1,1);
		for(new i; i<SLOTS2; i++){
		    ShowPlayerNameTagForPlayer(i,playerid,0);
		}
		Escondido[playerid] = 1;
		SendClientMessage(playerid,COLOR_GREEN,"Hum, ninguém está te vendo agora!");
		return 1;
	}
	if(strcmp("/aparecer",cmdtext,true)==0 && Escondido[playerid]==1){
	    ClearAnimations(playerid);
		for(new i; i<SLOTS2; i++){
		    ShowPlayerNameTagForPlayer(i,playerid,1);
		}
		Escondido[playerid] = 1;
		SendClientMessage(playerid,COLOR_GREEN,"Hum, estão te vendo agora!");
		return 1;
	}
	if(strcmp(cmd,"/som",true) == 0){
		if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não é admin...");
		new tmp[256];
		tmp = strtok(cmdtext,idx);
		new soundid = strval(tmp);
		new string[256];
	    format(string,sizeof(string),"[INFO] Som executado: %d",soundid);
	    SendClientMessage(playerid, COLOR_GREEN, string);
	    PlayerPlaySound(playerid,soundid,0.0,0.0,0.0);
		return 1;
	}

	if(strcmp(cmd, "/soltarpreso", true) == 0) {
	 	    new tmp[256];
			new plid;
			new string[256];
			tmp = strtok(cmdtext, idx);
     		if(ChavePrisao[playerid] == 0){
	        	SendClientMessage(playerid,COLOR_GRAY,"Você não tem a chave da cadeia!");
	        	return 1;
	        }
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/soltar [id]");
				return 1;
			}
	        plid = strval(tmp);
	     	if(IsPlayerConnected(plid) && Logado[playerid] == 1){
				if(Presos[plid] == 0){
				    SendClientMessage(playerid,COLOR_GRAY,"O jogador não está preso!");
					return 1;
				} else {
				    pStats[playerid][Preso] = 0;
				    Presos[plid] = 0;
				   	CelularBloqueado[playerid] = 0;
				    SetSpawnInfo(plid,0,pStats[plid][Skin],-1605.5067,710.3071,13.8672,0,0,0,0,0,0,0);
				    SpawnPlayer(plid);
				    format(string, sizeof(string), "%s conseguiu a chave da cadeia, e fez você fugir!",PlayerName(playerid));
   			        SendClientMessage(plid, COLOR_RED2, string);
				    SendClientMessage(playerid,COLOR_GREEN,"Fuga concedida!");
				    Contrabando[playerid] = 0;
					Receita[playerid] = 0;
					SetPlayerWantedLevel(plid, 0);
					pStats[plid][Wanted] = 0;
					ChavePrisao[playerid] = 0;
					return 1;
				}
			}
			else{
	            SendClientMessage(playerid, COLOR_GRAY, "Jogador não está conectado/logado");
				return 1;
			}
		}

//PESCADOR

	if(strcmp(cmd, "/iscas", true) == 0) {
		new tmp[256];
		new quant;
		tmp = strtok(cmdtext,idx);
		quant = strval(tmp);
		if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_GRAY, "USO: /iscas [quantia/de/iscas]");
			return 1;
		}
		if(QtIscas[playerid] == 20){
			SendClientMessage(playerid, COLOR_GRAY, "Você já possui o máximo de iscas!");
			return 1;
		}
		if(quant+QtIscas[playerid] > 20){
			SendClientMessage(playerid, COLOR_GRAY, "Você só pode levar 20 iscas no máximo!");
			return 1;
		}
		if(quant <= 0){
			SendClientMessage(playerid, COLOR_GRAY, "Ei, a quantidade é de 1 à 20");
			return 1;
		}
		if(AreaCoopPesca[playerid] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Você não está na cooperativa de pesca!");
			return 1;
		} else {
			  if(Profissao[playerid] == PESCADOR || IsPlayerAdmin(playerid)){
			  	SendClientMessage(playerid, COLOR_PESCADOR, "Você não precisou pagar as iscas pois é Pescador!");
			  	new string[256];
			  	format(string,sizeof(string), "Você pegou %d iscas! Total de iscas que você possui: %d",quant,quant+QtIscas[playerid]);
			  	SendClientMessage(playerid, COLOR_PESCADOR, string);
			  	QtIscas[playerid] = QtIscas[playerid]+quant;
			  	pStats[playerid][Iscas] = QtIscas[playerid];
			  	return 1;
			  } else {
			        new custo;
			        custo = quant*10;
			        if(GetPlayerMoney(playerid) < custo){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro para pagar as iscas!");
					return 1;
					} else {
						  new string[256];
						  format(string,sizeof(string),"Você comprou %d iscas por $%d. Agora você possui %d iscas!",quant,QtIscas[playerid]+quant);
						  SendClientMessage(playerid, COLOR_PESCADOR, string);
						  AddPlayerMoney(playerid,-custo,4);
						  QtIscas[playerid] = QtIscas[playerid]+quant;
						  pStats[playerid][Iscas] = QtIscas[playerid];
						  AcrescentarLucro(16,custo);
						  return 1;
			  		}
			  }
		}
	}
	if(strcmp(cmd, "/levarpesca", true) == 0) {
		if(AreaCoopPesca[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está na cooperativa de pesca!");
		    return 1;
		}
		if(QtPescas[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhuma pesca para levar!");
		    return 1;
		}
		pStats[playerid][Peixe] += Pescado[playerid];
        QtPescas[playerid] = 0;
        PeixesRestantes[playerid] = 4;
		Pescado[playerid] = 0;
		pStats[playerid][Pesca] = 0;
		SendClientMessage(playerid, COLOR_PESCADOR, "[COOPERATIVA DE PESCA] Hum, OK, pode levar os peixes!");
		return 1;
	}
	if(strcmp(cmd, "/venderpesca", true) == 0) {
	    new msg[256];
	    if(AreaCoopPesca[playerid] == 1){
	    	if(QtPescas[playerid] == 0){
	        	SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhuma pesca, como poderá vender?");
	        	format(msg,sizeof(msg),"%s usou o comando /venderpesca sem nenhuma pesca acumulada.",PlayerName(playerid));
	        	writelog(msg);
	        	return 1;
			} else {
				format(msg,sizeof(msg),"Pescado vendido, você recebeu $%d.",QtPescas[playerid]);
				SendClientMessage(playerid, COLOR_PESCADOR, msg);
				AcrescentarPrejuizo(16,QtPescas[playerid]);
				AddPlayerMoney(playerid,QtPescas[playerid],3);
				QtPescas[playerid] = 0;
				PeixesRestantes[playerid] = 4;
				Pescado[playerid] = 0;
				pStats[playerid][Pesca] = 0;
				return 1;
			}
		}
		else {
			SendClientMessage(playerid, COLOR_GRAY, "Você não está na Cooperativa de Pesca.");
			return 1;
		}
	}

	if(strcmp(cmd, "/carga", true) == 0) {
	    if(Profissao[playerid] == CAMINHONEIRO || IsPlayerAdmin(playerid)){
			new tmp[256];
			new CarG[4];
			new plid;
			new string[256];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_RED2, "/carga [id]");
				return 1;
			}
			plid = strval(tmp);
			new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
			if(modelo == 515 || modelo == 414){
				if(IsPlayerConnected(plid)){
				    CarG[0] = GeralCar[playerid];
				    CarG[1] = GasCar[playerid];
				    CarG[2] = DrogasNoCaminhao[playerid];
		            CarG[3] = CarregamentoRoupas[playerid];
					if(CarG[0] == 1){
					    SendClientMessage(plid, COLOR_GREEN, "O Caminhoneiro está transportando Mantimentos em Geral.");
					}
					if(CarG[1] == 1){
					    SendClientMessage(plid, COLOR_GREEN, "O Caminhoneiro está transportado Combustível.");
					}
					if(CarG[2] == 1){
					    SendClientMessage(plid, COLOR_RED2, "ATENÇÃO!! Esse caminhoneiro está transportando mercadoria ILEGAL (drogas).");
					    SendClientMessage(plid, COLOR_RED2, "Peça para ele descer do veículo e digitar /render, feito isso PRENDA-O.");
					}
					if(CarG[3] == 1){
					    SendClientMessage(plid, COLOR_GREEN, "O Caminhoneiro está transportado Roupas.");
					}
					else if(!CarG[0] && !CarG[1] && !CarG[2] && !CarG[3]){
					    SendClientMessage(plid, COLOR_GREEN, "O Caminhoneiro não está transportando nenhum tipo de mercadoria.");
					}
					format(string, sizeof(string), "A Documentação da Carga foi mostrada para %s.", PlayerName(plid));
					SendClientMessage(playerid, COLOR_AZULPLUS, string);
					return 1;
				} else{
				    SendClientMessage(playerid, COLOR_RED2, "Esse jogador nao existe!");
				    return 1;
				}
			} else {
			    SendClientMessage(playerid, COLOR_GRAY, "Você não está em 1 RoadTrain da Companhia.");
			    return 1;
			}
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Caminhoneiro.");
		    return 1;
		}
	}
	if(strcmp(cmd, "/carregar", true) == 0) {
	    if(Profissao[playerid] == CAMINHONEIRO || IsPlayerAdmin(playerid)){
	        if(AreaCarga[playerid] == 1){
				new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
				if(modelo == 515 || modelo == 414){
				    if(CheckpointStatus[playerid] != CARREGAMENTO){
						if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)) || modelo == 414){
	       					ShowMenuForPlayer(CargaGeral,playerid);
				       		TogglePlayerControllable(playerid,0);
							return 1;
 						} else {
				        	SendClientMessage(playerid,COLOR_CAMINHONEIRO,"Seu caminhão não tem Trailer!");
							return 1;
						}
					} else {
			        	SendClientMessage(playerid,COLOR_CAMINHONEIRO,"Seu caminhão já está carregado!");
						return 1;
					}
				} else {
			    	SendClientMessage(playerid,COLOR_GRAY,"Você não está em um caminhão ROADTRAIN ou MULE!");
					return 1;
				}
	  		} else {
	        	SendClientMessage(playerid, COLOR_GRAY, "Você não está na área de carga!");
				return 1;
			}
    	}else{
        	SendClientMessage(playerid,COLOR_GRAY,"Você não tem permissão!");
    		return 1;
		}
	}

	if(strcmp(cmd, "/carregarcaminhao", true) == 0) {
	    if(Profissao[playerid] == PEDREIRA || IsPlayerAdmin(playerid)){
	        if(PedreiraCarga[playerid] == 1){
				new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
				if(modelo == 406){
				    if(Pedras[playerid] == 0){
				        new rand = random(3);
				        if(rand == 0){
				            SetPlayerCheckpoint(playerid,2446.8005,1934.5291,7.2706,5.0);
				        } else if(rand == 1){
				            SetPlayerCheckpoint(playerid,1270.9941,-1253.3600,13.4342,5.0);
				        } else if(rand == 2){
				         	SetPlayerCheckpoint(playerid,-2086.2314,286.0349,35.4725,5.0);
				        }
				    	CheckpointStatus[playerid] = OBRAS;
				    	SendClientMessage(playerid,COLOR_PEDREIRA,"Veículo carregado!");
				    	SendClientMessage(playerid,COLOR_PEDREIRA,"Para descarregá-lo, vá até o ponto vermelho marcado no Radar.");
				    	Pedras[playerid] = 1;
				    	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
				    	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
						return 1;
					} else {
				        SendClientMessage(playerid,COLOR_PEDREIRA,"Seu caminhão já está carregado!");
						return 1;
					}
				} else {
				    SendClientMessage(playerid,COLOR_GRAY,"Você não está em um caminhão DUMPER!");
					return 1;
				}
	        } else {
	            SendClientMessage(playerid, COLOR_GRAY, "Você não está na área de carregamento de carga!");
				return 1;
			}
	    } else {
	        SendClientMessage(playerid,COLOR_GRAY,"Você não tem permissão!");
	    	return 1;
	    }
	}

	if(strcmp(cmd, "/pegardroga", true) == 0) {
	    if(Profissao[playerid] == TRAFICANTE || Profissao[playerid] == LIDER_DE_TRAFICO || IsPlayerAdmin(playerid)){
			SetPlayerCheckpoint(playerid,2258.3687,-1030.6180,52.6575,3.0);
			SendClientMessage(playerid, COLOR_TRAFICANTE,"Vá para o CP marcado no radar para pegar as drogas.");
			EntregadePizza[playerid] = 0;
			MissaoLixeiro[playerid] = 0;
    		ColocandoDrogas[playerid] = 0;
			DrogasNoCaminhao[playerid] = 0;
			PegandoDrogas[playerid] = 1;
			return 1;
		} else {
			SendClientMessage(playerid,COLOR_RED2,"Você não é traficante!");
			return 1;
		}
	}
	if(strcmp(cmd, "/pararplantacao", true) == 0) {
	   if(PlantandoDrogas[playerid] == 0){
		  SendClientMessage(playerid, COLOR_GRAY, "Você não está plantando drogas em um veículo!");
		  return 1;
		  }
		  else{
			  PlantandoDrogas[playerid] = 0;
			  SendClientMessage(playerid, COLOR_LIDER_DE_TRAFICO, "Plantação de drogas cancelada!");
			  TogglePlayerControllable(playerid,1);
			  RemovePlayerFromVehicle(playerid);
			  KillTimer(TempoPlantacao[playerid]);
			  return 1;
		  }
	}
	if(strcmp(cmd, "/plantardrogas", true) == 0) {
	    if(Profissao[playerid] == LIDER_DE_TRAFICO || IsPlayerAdmin(playerid)){
            if(HeroinaMao[playerid] < 1){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não tem Heroina, vá para a Boca pegar mais.");
				return 1;
			}
			if(CocainaMao[playerid] < 1){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não tem Cocaína, vá para a Boca pegar mais.");
				return 1;
			}
			if(MaconhaMao[playerid] < 1){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não tem Maconha, vá para a Boca pegar mais.");
				return 1;
			}
			if(PlantandoDrogas[playerid] == 1){
				SendClientMessage(playerid, COLOR_GRAY, "Ei, você já está plantando drogas, plante essas primeiro!");
				return 1;
			}
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
			    if(strcmp(vStats[GetPlayerVehicleID(playerid)][VDono], "Servidor", false) && strcmp(vStats[GetPlayerVehicleID(playerid)][VDono],PlayerName(playerid), false)){
					TogglePlayerControllable(playerid,0);
					PlantandoDrogas[playerid] = 1;
					SendClientMessage(playerid, COLOR_LIDER_DE_TRAFICO, "OK... Você está plantando as drogas! Cuidado se algum narcótico te pegar");
					SendClientMessage(playerid, COLOR_LIDER_DE_TRAFICO, "você será preso e não irá conseguir terminar de plantar essas drogas!");
					TempoPlantacao[playerid] = SetTimerEx("DrogasPlant",45000,false,"d",playerid);
					return 1;
				}
				else{
				    SendClientMessage(playerid, COLOR_GRAY, "Você não pode plantar drogas em um veículo seu ou do governo/servidor.");
					return 1;
				}
			}
			else{
				SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar dirigindo um veículo!");
				return 1;
				}
			}
			else{
				SendClientMessage(playerid, COLOR_GRAY, "Você não é Líder de Tráfico!");
				return 1;
				}
	}

	if(strcmp(cmd, "/drogas", true) == 0) {
		if(AreaMorro[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está mais no MORRO PORRA.");
			return 1;
		}
		if(TaAfim[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Anh? TÁ DOIDO? Quando te ofereci droga?");
			return 1;
		}
		TaAfim[playerid] = 0;
		ComprandoBaguio[playerid] = 1;
	    SendClientMessage(playerid, COLOR_TRAFICANTE, "Blz Mano, vá até o ponto vermelho pegar o bagulho.");
		SetPlayerCheckpoint(playerid, 2140.3203,-1005.8080,61.7145, 3.0);
        CheckpointStatus[playerid] = CDROGAS;
        return 1;
	}


	if(strcmp(cmd, "/heroina", true) == 0) {
	    if(Profissao[playerid] == TRAFICANTE || Profissao[playerid] == LIDER_DE_TRAFICO || IsPlayerAdmin(playerid)){
	        new tmp[256];
	        new string[256];
	        new plid, mili;
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp)){
	            SendClientMessage(playerid, COLOR_GRAY,"/heroina [id] [quantidade]");
				return 1;
			}
			plid = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "/heroina [id] [quantidade]");
				return 1;
			}
			mili = strval(tmp);
			if(mili > 3){
			    SendClientMessage(playerid, COLOR_RED2, "Você está louco? Quer matar o seu cliente? Doses de 1 a 7");
				return 1;
			}
			if(mili < 1){
			    SendClientMessage(playerid, COLOR_RED2, "Doses de 1 à 3");
				return 1;
			}
			if(Profissao[plid] == TRAFICANTE){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não pode vender para traficantes.");
				return 1;
			}
			if(HeroinaMao[playerid] < 1){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não tem Heroina, vá para a Boca pegar mais.");
				return 1;
			}
		    if(GetDistanceBetweenPlayers(playerid,plid) > 20){
		       	SendClientMessage(playerid,COLOR_GRAY,"Você está muito longe, chegue mais perto!");
				return 1;
			}
		    if(GetPlayerMoney(plid) < 150){
		       	SendClientMessage(playerid,COLOR_GRAY,"Ele não tem dinheiro para pagar a droga. Custo: $150.");
				return 1;
			}
			if(DrogasNegoci[playerid] == 1){
		       	SendClientMessage(playerid,COLOR_GRAY,"Você ainda está negociando.");
				return 1;
			}
		    if(IsPlayerConnected(plid)){
			    DrogaOferecida[plid] =3;
			    QtdDrogaV[plid] = mili;
			    DrogasNegoci[playerid] = 1;
			    format(string,sizeof(string),"Aew Mano, tu ofereceu Heroína para o %s pera ele responder.",PlayerName(playerid));
			    SendClientMessage(playerid, COLOR_TRAFICANTE,string);
				format(string,sizeof(string), "O Traficante %s está lhe oferencendo %d gramas de heroina.", PlayerName(playerid), QtdDrogaV[plid]);
				SendClientMessage(plid, COLOR_WHITE, string);
			    SendClientMessage(plid, COLOR_TRAFICANTE,"Para aceitar digite: /aceitardroga, para recusar: /recusardroga");
				SetTimerEx("RecusarDroga",45000,0,"dd",playerid,plid);
                TraficanteTra[plid] = playerid;
				return 1;
			}
		}
	}
	if(strcmp(cmd, "/maconha", true) == 0) {
	    if(Profissao[playerid] == TRAFICANTE || Profissao[playerid] == LIDER_DE_TRAFICO || IsPlayerAdmin(playerid)){
	        new tmp[256];
	        new string[256];
	        new plid, mili;
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp)){
	            SendClientMessage(playerid, COLOR_GRAY,"/maconha [id] [quantidade]");
				return 1;
			}
			plid = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "/maconha [id] [quantidade]");
				return 1;
			}
			mili = strval(tmp);
			if(mili > 3){
			    SendClientMessage(playerid, COLOR_RED2, "Você está louco? Quer matar o seu cliente? Doses de 1 a 3");
				return 1;
			}
			if(mili < 1){
			    SendClientMessage(playerid, COLOR_RED2, "Doses de 1 à 3");
				return 1;
			}
			if(Profissao[plid] == TRAFICANTE){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não pode vender para traficantes.");
				return 1;
			}
			if(MaconhaMao[playerid] < 1){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não tem Maconha, vá para a Boca pegar mais.");
				return 1;
			}
		    if(GetDistanceBetweenPlayers(playerid,plid) > 20){
		       	SendClientMessage(playerid,COLOR_GRAY,"Você está muito longe, chegue mais perto!");
				return 1;
			}
			if(DrogasNegoci[playerid] == 1){
		       	SendClientMessage(playerid,COLOR_GRAY,"Você ainda está negociando.");
				return 1;
			}
		    if(IsPlayerConnected(plid)){
			    DrogaOferecida[plid] =1;
			    QtdDrogaV[plid] = mili;
			    DrogasNegoci[playerid] = 1;
			    format(string,sizeof(string),"Aew Mano, tu ofereceu Maconha para o %s pera ele responder.",PlayerName(playerid));
			    SendClientMessage(playerid, COLOR_TRAFICANTE,string);
				format(string,sizeof(string), "O Traficante %s está lhe oferencendo %d papelotes de maconha.", PlayerName(playerid), QtdDrogaV[plid]);
				SendClientMessage(plid, COLOR_WHITE, string);
			    SendClientMessage(plid, COLOR_TRAFICANTE,"Para aceitar digite: /aceitardroga, para recusar: /recusardroga");
				SetTimerEx("RecusarDroga",45000,0,"dd",playerid,plid);
                TraficanteTra[plid] = playerid;
				return 1;
			}
		}
	}

	if(strcmp(cmd, "/cocaina", true) == 0) {
	    if(Profissao[playerid] == TRAFICANTE || Profissao[playerid] == LIDER_DE_TRAFICO || IsPlayerAdmin(playerid)){
	        new tmp[256];
	        new string[256];
	        new plid, mili;
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp)){
	            SendClientMessage(playerid, COLOR_GRAY,"/cocaina [id] [quantidade]");
				return 1;
			}
			plid = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "/cocaina [id] [quantidade]");
				return 1;
			}
			mili = strval(tmp);
			if(mili > 3){
			    SendClientMessage(playerid, COLOR_GRAY, "Você está louco? Quer matar o seu cliente? Doses de 1 a 3");
				return 1;
			}
			if(mili < 1){
			    SendClientMessage(playerid, COLOR_GRAY, "Doses de 1 à 3");
				return 1;
			}
			if(Profissao[plid] == TRAFICANTE){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não pode vender para traficantes.");
				return 1;
			}
			if(CocainaMao[playerid] < 1){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não tem Cocaína, vá para a Boca pegar mais.");
				return 1;
			}
		    if(GetDistanceBetweenPlayers(playerid,plid) > 20){
		       	SendClientMessage(playerid,COLOR_GRAY,"Você está muito longe, chegue mais perto!");
				return 1;
			}
			if(DrogasNegoci[playerid] == 1){
		       	SendClientMessage(playerid,COLOR_GRAY,"Você ainda está negociando.");
				return 1;
			}
		    if(IsPlayerConnected(plid)){
			    DrogaOferecida[plid] =2;
			    QtdDrogaV[plid] = mili;
			    DrogasNegoci[playerid] = 1;
			    format(string,sizeof(string),"Aew Mano, tu ofereceu Cocaína para o %s pera ele responder.",PlayerName(playerid));
			    SendClientMessage(playerid, COLOR_TRAFICANTE,string);
				format(string,sizeof(string), "O Traficante %s está lhe oferencendo %d saquinhos de pó.", PlayerName(playerid), QtdDrogaV[plid]);
				SendClientMessage(plid, COLOR_WHITE, string);
			    SendClientMessage(plid, COLOR_TRAFICANTE,"Para aceitar digite: /aceitardroga, para recusar: /recusardroga");
				SetTimerEx("RecusarDroga",45000,0,"dd",playerid,plid);
                TraficanteTra[plid] = playerid;
				return 1;
			}
		}
	}

	if(strcmp(cmd,"/aceitardroga",true) == 0) {
		if(DrogaOferecida[playerid] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma droga!");
			return 1;
		}
		if(!IsPlayerConnected(TraficanteTra[playerid])){
		    SendClientMessage(playerid, COLOR_GRAY, "O Traficante não tá aqui!");
		    return 1;
		}
	    if(GetDistanceBetweenPlayers(playerid,TraficanteTra[playerid]) > 20){
	       	SendClientMessage(playerid,COLOR_GRAY,"Você está muito longe, chegue mais perto do traficante!");
			return 1;
		}
	    new string[256];
	    if(DrogaOferecida[playerid] == 1){
		    if(GetPlayerMoney(playerid) < 100){
		       	SendClientMessage(playerid,COLOR_GRAY,"Você não tem dinheiro.");
				return 1;
			}
		    format(string,sizeof(string),"Bagulho vendido você vendeu %d papelotes de maconha.", QtdDrogaV[playerid]);
		    SendClientMessage(TraficanteTra[playerid], COLOR_TRAFICANTE,string);
			format(string,sizeof(string), "O Traficante %s lhe vendeu %d papelotes de maconha pra você ter efeito tem que fumar. /fumar.", PlayerName(TraficanteTra[playerid]));
			SendClientMessage(playerid, COLOR_WHITE, string);
		    AddPlayerMoney(playerid, -100, -1);
		    AddPlayerMoney(TraficanteTra[playerid], 200, 3);
		    DrogaOferecida[playerid] = 0;
		    Maconha[playerid] = Maconha[playerid] + QtdDrogaV[playerid];
		    AddPlayerHealth(playerid,30);
		    QtdDrogaV[playerid] = 0;
		    DrogasNegoci[TraficanteTra[playerid]] = 0;
		   	AcrescentarExPoints(TraficanteTra[playerid],1);
		} else if(DrogaOferecida[playerid] == 2){
		    if(GetPlayerMoney(playerid) < 200){
		       	SendClientMessage(playerid,COLOR_GRAY,"Você não tem dinheiro.");
				return 1;
			}
		    format(string,sizeof(string),"PÓ vendido você vendeu %d saquinhos de cocaína.", QtdDrogaV[playerid]);
		    SendClientMessage(TraficanteTra[playerid], COLOR_TRAFICANTE,string);
			format(string,sizeof(string), "O Traficante %s lhe vendeu %d saquinhos de pó, para você ter efeito tem que cheirar. /cheirar.", PlayerName(TraficanteTra[playerid]));
			SendClientMessage(playerid, COLOR_WHITE, string);
		    AddPlayerMoney(playerid, -200, -1);
		    AddPlayerMoney(TraficanteTra[playerid], 300, 3);
		    DrogaOferecida[playerid] = 0;
		    Cocaina[playerid] = Cocaina[playerid] + QtdDrogaV[playerid];
		    AddPlayerHealth(playerid,30);
		    QtdDrogaV[playerid] = 0;
		    DrogasNegoci[TraficanteTra[playerid]] = 0;
		   	AcrescentarExPoints(TraficanteTra[playerid],1);
		} else if(DrogaOferecida[playerid] == 3){
		    if(GetPlayerMoney(playerid) < 250){
		       	SendClientMessage(playerid,COLOR_GRAY,"Você não tem dinheiro.");
				return 1;
			}
		    format(string,sizeof(string),"Heroína vendida! Você vendeu %d gramas de heroína.", QtdDrogaV[playerid]);
		    SendClientMessage(TraficanteTra[playerid], COLOR_TRAFICANTE,string);
			format(string,sizeof(string), "O Traficante %s lhe vendeu %d gramas de heroína, para você ter efeito tem que injetar. /injetar.", PlayerName(TraficanteTra[playerid]));
			SendClientMessage(playerid, COLOR_WHITE, string);
		    AddPlayerMoney(playerid, -250, -1);
		    AddPlayerMoney(TraficanteTra[playerid], 350, 3);
		    DrogaOferecida[playerid] = 0;
		    Heroina[playerid] = Heroina[playerid] + QtdDrogaV[playerid];
		    AddPlayerHealth(playerid,30);
		    QtdDrogaV[playerid] = 0;
		    DrogasNegoci[TraficanteTra[playerid]] = 0;
		   	AcrescentarExPoints(TraficanteTra[playerid],1);
		}
		new rand = random(5);
		if(rand == 4){
		    for(new i=0; i<SLOTS2; i++){
		    	if(Profissao[i] == COP_NARCOTICOS || IsPlayerAdmin(playerid)){
					format(string,sizeof(string),"[DENUNCIA] Morador anônimo denúncia que %s esteje vendendo drogas. Apure os fatos.",PlayerName(TraficanteTra[playerid]));
					SendClientMessage(i, COLOR_COP_SWAT, string);
					return 1;
				}
			}
		}
	}
	if(strcmp(cmd,"/recusardroga",true) == 0) {
		if(DrogaOferecida[playerid] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma droga!");
			return 1;
		}
		new string[256];
		DrogaOferecida[playerid] = 0;
	    QtdDrogaV[playerid] = 0;
		DrogasNegoci[TraficanteTra[playerid]] = 0;
	    format(string,sizeof(string),"Aew maluco o %s recusou o teu bagulho. Que isso assim você perde respeito.", PlayerName(playerid));
	    SendClientMessage(TraficanteTra[playerid], COLOR_TRAFICANTE,string);
		SendClientMessage(playerid, COLOR_WHITE, "É assim que se faz? Drogas não!");
		return 1;
	}

	if(strcmp(cmd, "/meubolso", true) == 0) {
	    if(Profissao[playerid] == TRAFICANTE || Profissao[playerid] == LIDER_DE_TRAFICO || IsPlayerAdmin(playerid)){
	        new msg[256];
		    format(msg, sizeof(msg), "Maconha : %d papelotes",MaconhaMao[playerid]);
		    SendClientMessage(playerid,COLOR_TRAFICANTE,msg);
   		    format(msg, sizeof(msg), "Heroina : %d papelotes",HeroinaMao[playerid]);
		    SendClientMessage(playerid,COLOR_TRAFICANTE,msg);
		    format(msg, sizeof(msg), "Cocaína : %d papelotes",CocainaMao[playerid]);
		    SendClientMessage(playerid,COLOR_TRAFICANTE,msg);
			return 1;
		} else {
			SendClientMessage(playerid,COLOR_RED2,"Você não é Traficante!");
			return 1;
		}
	}
	if(strcmp(cmd, "/injetar", true) == 0) {
	    new msg[256];
	    new tmp[256];
	    new quantia;
	    tmp = strtok(cmdtext, idx);
     	if(!strlen(tmp)){
      		SendClientMessage(playerid, COLOR_RED2,"/injetar [injeções]");
			return 1;
		}
		quantia = strval(tmp);
		if(quantia > Heroina[playerid]){
		    SendClientMessage(playerid, COLOR_RED2, "Você não tem toda essa quantidade de heroína.");
			return 1;
		}
    	if(Heroina[playerid] == 0){
	       	SendClientMessage(playerid, COLOR_RED2, "Você não possui heroína, como poderá injetar?!");
	       	return 1;
		} else {
		    Heroina[playerid] = Heroina[playerid] - quantia;
		    QtHeroina[playerid] = QtHeroina[playerid]+quantia;
		    pStats[playerid][DosesHeroina] = QtHeroina[playerid];
		    ApplyAnimation(playerid,"CRACK","crckdeth4",4.1, 1, 1, 1, 1, 1);
		    ApplyAnimation(playerid,"CRACK","crckdeth4",4.1, 1, 1, 1, 1, 1);
			format(msg,sizeof(msg),"Você tomou %d injeções de heroína.",quantia);
			SendClientMessage(playerid, COLOR_GREEN, msg);
			if(pStats[playerid][VicioDrogas] == 1){
			 	TempoVicio[playerid] += 200;
				SendClientMessage(playerid, COLOR_WHITE, "AHHH AMO MUITO TUDO ISSO! UFA já não aguentava mais...");
			}
			if(QtHeroina[playerid] >= 5 && pStats[playerid][VicioDrogas] == 0){
				new rand = random(3);
				if(rand == 0){
					SendClientMessage(playerid, COLOR_GRAY, "Você ficou viciado em drogas de tanto injetar heroína!");
			    	SendClientMessage(playerid, COLOR_GRAY, "Poderá se tratar indo para o Departamento dos Narcóticos...");
					pStats[playerid][VicioDrogas] = 1;
					ApplyAnimCrack(playerid);
					SetPlayerWeather(playerid,-66);
					SendPlayerMessageToPlayer(playerid, playerid, "COF COF COF... Drogas, PRECISO DE DROGAS, COF COF COF, COF COF");
					SetTimerEx("PararWeather",25000,0,"d",playerid);
					SetTimerEx("LimparAnim",13000,0,"d",playerid);
					TempoVicio[playerid] = random(30)+random(random(20)) + 40;
					new r = random(4);
					if(r == 0){
						format(msg,sizeof(msg),"[NOTICIAS] %s se interagiu demais com drogas e acabou viciado!!!",PlayerName(playerid));
						SendClientMessageToAll(COLOR_WHITE, msg);
					}
				}
			}
			return 1;
		}
	}

	if(strcmp(cmd, "/fumar", true) == 0) {
	    new msg[256];
	    new tmp[256];
	    new quantia;
	    tmp = strtok(cmdtext, idx);
     	if(!strlen(tmp)){
      		SendClientMessage(playerid, COLOR_RED2,"/fumar [cigarros]");
			return 1;
		}
		quantia = strval(tmp);
		if(quantia > Maconha[playerid]){
		    SendClientMessage(playerid, COLOR_RED2, "Você não tem toda essa quantidade de maconha.");
			return 1;
		}
    	if(Maconha[playerid] == 0){
	       	SendClientMessage(playerid, COLOR_RED2, "Você não tem maconha, como poderá cheirar?");
	       	return 1;
		} else {
		    Maconha[playerid] = Maconha[playerid] - quantia;
		    QtMaconha[playerid] = QtMaconha[playerid]+quantia;
		    pStats[playerid][DosesMaconha] = QtMaconha[playerid];
		    ApplyAnimation(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 1, 1, 1, 1);
		    ApplyAnimation(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 1, 1, 1, 1);
			format(msg,sizeof(msg),"Você fumou %d cigarro(s) de maconha.",quantia);
			SendClientMessage(playerid, COLOR_GREEN, msg);
			if(pStats[playerid][VicioDrogas] == 1){
			 	TempoVicio[playerid] += 200;
				SendClientMessage(playerid, COLOR_WHITE, "AHHH AMO MUITO TUDO ISSO! UFA já não aguentava mais...");
			}
			if(QtMaconha[playerid] >= 5 && pStats[playerid][VicioDrogas] == 0){
				new rand = random(3);
				if(rand == 0){
					SendClientMessage(playerid, COLOR_GRAY, "Você ficou viciado em drogas de tanto fumar maconha!");
			    	SendClientMessage(playerid, COLOR_GRAY, "Poderá se tratar indo para o Departamento dos Narcóticos...");
					pStats[playerid][VicioDrogas] = 1;
					ApplyAnimCrack(playerid);
					SetPlayerWeather(playerid,-66);
					SendPlayerMessageToPlayer(playerid, playerid, "COF COF COF... Drogas, PRECISO DE DROGAS, COF COF COF, COF COF");
					SetTimerEx("PararWeather",25000,0,"d",playerid);
					SetTimerEx("LimparAnim",13000,0,"d",playerid);
					TempoVicio[playerid] = random(30)+random(random(20)) + 40;
					new r = random(4);
					if(r == 0){
						format(msg,sizeof(msg),"[NOTICIAS] %s se interagiu demais com drogas e acabou viciado!!!",PlayerName(playerid));
						SendClientMessageToAll(COLOR_WHITE, msg);
					}
				}
			}
			return 1;
		}
	}

	if(strcmp(cmd, "/cheirar", true) == 0) {
	    new msg[256];
	    new tmp[256];
	    new quantia;
	    tmp = strtok(cmdtext, idx);
     	if(!strlen(tmp)){
      		SendClientMessage(playerid, COLOR_RED2,"/cheirar [gramas]");
			return 1;
		}
		quantia = strval(tmp);
		if(quantia > Cocaina[playerid]){
		    SendClientMessage(playerid, COLOR_RED2, "Você não tem toda essa quantidade de cocaína.");
			return 1;
		}
    	if(Cocaina[playerid] == 0){
	       	SendClientMessage(playerid, COLOR_RED2, "Você não tem cocaína, como poderá cheirar?");
	       	return 1;
		} else {
		    Cocaina[playerid] = Cocaina[playerid] - quantia;
		    QtCocaina[playerid] = QtCocaina[playerid]+quantia;
		    pStats[playerid][DosesCocaina] = QtCocaina[playerid];
		   	ApplyAnimation(playerid,"CRACK", "crckdeth1", 4.0, 1, 1, 1, 1, 1);
		   	ApplyAnimation(playerid,"CRACK", "crckdeth1", 4.0, 1, 1, 1, 1, 1);
			format(msg,sizeof(msg),"Você cheirou %d grama(s) de cocaína.",quantia);
			SendClientMessage(playerid, COLOR_GREEN, msg);
			if(pStats[playerid][VicioDrogas] == 1){
			 	TempoVicio[playerid] += 200;
				SendClientMessage(playerid, COLOR_WHITE, "AHHH AMO MUITO TUDO ISSO! UFA já não aguentava mais...");
			}
			if(QtCocaina[playerid] >= 5 && pStats[playerid][VicioDrogas] == 0){
				new rand = random(3);
				if(rand == 0){
					SendClientMessage(playerid, COLOR_GRAY, "Você ficou viciado em drogas de tanto cheirar cocaína!");
			    	SendClientMessage(playerid, COLOR_GRAY, "Poderá se tratar indo para o Departamento dos Narcóticos...");
			    	pStats[playerid][VicioDrogas] = 1;
					ApplyAnimCrack(playerid);
					SetPlayerWeather(playerid,-66);
					SendPlayerMessageToPlayer(playerid, playerid, "COF COF COF... Drogas, PRECISO DE DROGAS, COF COF COF, COF COF");
					SetTimerEx("PararWeather",25000,0,"d",playerid);
					SetTimerEx("LimparAnim",13000,0,"d",playerid);
					TempoVicio[playerid] = random(30)+random(random(20)) + 40;
					new r = random(4);
					if(r == 0){
						format(msg,sizeof(msg),"[NOTICIAS] %s se interagiu demais com drogas e acabou viciado!!!",PlayerName(playerid));
						SendClientMessageToAll(COLOR_WHITE, msg);
					}
				}
			}
			return 1;
		}
	}

	if(strcmp(cmd, "/logarplayer", true) == 0){
		if(IsPlayerAdmin(playerid)){
			new tmp[256];
			new plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
			    SendClientMessage(playerid, COLOR_GRAY, "USO: /logarplayer [id]");
			    return 1;
			}
			plid = strval(tmp);
		    if(IsPlayerConnected(plid) == 0){
				SendClientMessage(playerid,COLOR_GRAY,"Jogador não conectado/ID inválido");
				return 1;
			}
			else {
				LogarPlayer(plid);
				SendClientMessage(plid, COLOR_WHITE, "Continue sua vida...");
				TrancarVeiculoPorProf(plid);
				EnviarMensagensGuardadas(plid);
				if(pStats[plid][ContinuarPos] == 1 && Presos[plid] == 0){
				    SendClientMessage(plid, COLOR_LIGHT_YELLOW, "Para continuar na posição de onde parou digite /continuar");
                    SendClientMessage(plid, COLOR_LIGHT_YELLOW, "Você tem 15 segundos para responder.");
					TimerContinuacaoPos[plid] = SetTimerEx("CancelarContinuacaoPos",15000,0,"d",plid);
				}
				if(pStats[plid][Divida] > 0){
				    SendClientMessage(plid, COLOR_GRAY, "A dívida de seu empréstimo continua!");
			    	TimerDivida[plid] = SetTimerEx("Cobrar",900000,false,"d",plid);
    			}
				SendClientMessage(playerid,COLOR_JUIZ,"Feito");
				return 1;
			}
		}
		else {
			SendClientMessage(playerid, COLOR_GRAY, "Você não é admin, portanto, não tem permissão para fazer isso.");
			return 1;
		}
	}
	if(strcmp(cmd, "/continuar", true) == 0) {
		if(pStats[playerid][ContinuarPos] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe pedido para continuar de onde parou!");
		SetPlayerPos(playerid,pStats[playerid][LastPosX],pStats[playerid][LastPosY],pStats[playerid][LastPosZ]);
		pStats[playerid][ContinuarPos] = 0;
		KillTimer(TimerContinuacaoPos[playerid]);
		SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "Feito");
		return 1;
	}
	if(strcmp(cmd, "/passardados", true) == 0 && IsPlayerAdmin(playerid)){
		new name1[256],name2[256];
		name1 = strtok(cmdtext,idx);
		name2 = strtok(cmdtext,idx);
		if(fexist(PlayerFile(name2)) && strlen(name2) > 0 && strlen(name1) > 0){
			PassarDados(name1,name2);
		}
		return SendClientMessage(playerid, COLOR_JUIZ, "Feito.");
	}
	if(strcmp(cmd, "/mudarconta", true) == 0) {
	    new tmp[256];
	    tmp = strtok(cmdtext,idx);
	    if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /mudarconta [nova conta]");
	    if(strlen(tmp) < 2 || strlen(tmp) > MAX_PLAYER_NAME) return SendClientMessage(playerid, COLOR_GRAY, "Nova conta com 2 até 30 caracteres.");
		if(Logado[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Esteja logado para usar esse comando.");
		if(!fexist(PlayerFile(PlayerName(playerid)))) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem conta aqui com esse nick...");
		for(new s = 0; s < strlen(tmp); s++){
			if(strfind(tmp," ",false,s) != -1 || strfind(tmp,"*",false,s) != -1 || strfind(tmp,"'",false,s) != -1 || strfind(tmp,"/",false,s) != -1 || strfind(tmp,"?",false,s) != -1 || strfind(tmp,">",false,s) != -1
			|| strfind(tmp,"<",false,s) != -1 || strfind(tmp,":",false,s) != -1 || strfind(tmp,"?",false,s) != -1 || strfind(tmp,"\"",false,s) != -1 || strfind(tmp,"|",false,s) != -1 || strfind(tmp,"!",false,s) != -1){
				SendClientMessage(playerid, COLOR_GRAY, "Sem caracteres especiais nem barra de espaço no novo nick (\" * < > \\ / ? | : ' !)");
				return 1;
			}
		}
		if(IsStringAName(tmp) || fexist(PlayerFile(tmp))) return SendClientMessage(playerid, COLOR_GRAY, "Nick já existente...");
		else{
        	fcopy(PlayerFile(PlayerName(playerid)),PlayerFile(tmp));
			new str[256];
			for(new p = 0; p < MAX_CASAS; p++){
			    set(str,PickupFile(p));
				if(fexist(str)){
			    	if(compare(pckStats[p][PickupDono],PlayerName(playerid))){
			    	    set(pckStats[p][PickupDono],tmp);
					}
					if(compare(pckStats[p][Chave],PlayerName(playerid))){
			    	    set(pckStats[p][Chave],tmp);
					}
				}
			}
			for(new v = 0; v < MAX_VEHICLES; v++){
			    set(str,VehicleFile(v));
				if(fexist(str)){
			    	if(compare(vStats[v][VDono],PlayerName(playerid))){
						set(vStats[v][VDono],tmp);
					}
					if(compare(vStats[v][VChave],PlayerName(playerid))){
						set(vStats[v][VChave],tmp);
					}
				}
			}
			for(new pr = 0; pr < MAX_PROPERTIES; pr++){
				set(str,PropertieFile(pr));
				if(fexist(str)){
			    	if(compare(propStats[pr][Dono1],PlayerName(playerid))){
			    	    set(propStats[pr][Dono1],tmp);
					}
					if(compare(propStats[pr][Dono2],PlayerName(playerid))){
			    	    set(propStats[pr][Dono2],tmp);
					}
					if(compare(propStats[pr][Trabalhador1],PlayerName(playerid))){
					    set(propStats[pr][Trabalhador1],tmp);
					}
					if(compare(propStats[pr][Trabalhador2],PlayerName(playerid))){
					    set(propStats[pr][Trabalhador2],tmp);
					}
					if(compare(propStats[pr][Trabalhador3],PlayerName(playerid))){
					    set(propStats[pr][Trabalhador3],tmp);
					}
					if(compare(propStats[pr][Trabalhador4],PlayerName(playerid))){
					    set(propStats[pr][Trabalhador4],tmp);
					}
					if(compare(propStats[pr][Trabalhador5],PlayerName(playerid))){
					    set(propStats[pr][Trabalhador5],tmp);
					}
					if(compare(propStats[pr][Trabalhador6],PlayerName(playerid))){
					    set(propStats[pr][Trabalhador6],tmp);
					}
					if(compare(propStats[pr][Trabalhador7],PlayerName(playerid))){
					    set(propStats[pr][Trabalhador7],tmp);
					}
					if(compare(propStats[pr][Socio1],PlayerName(playerid))){
					    set(propStats[pr][Socio1],tmp);
					}
					if(compare(propStats[pr][Socio2],PlayerName(playerid))){
					    set(propStats[pr][Socio2],tmp);
					}
					if(compare(propStats[pr][Socio3],PlayerName(playerid))){
					    set(propStats[pr][Socio3],tmp);
					}
				}
			}
			set(str,GangFile(pStats[playerid][GangueNome]));
			if(fexist(str)){
				if(compare(gStats[GetGangID(pStats[playerid][GangueNome])][GangDono],PlayerName(playerid))){
					set(gStats[GetGangID(pStats[playerid][GangueNome])][GangDono],tmp);
				}
				for(new m = 0; m < gStats[GetGangID(pStats[playerid][GangueNome])][GangMembros]; m++){
					if(compare(MembersGang[GetGangID(pStats[playerid][GangueNome])][m],PlayerName(playerid))){
					    set(MembersGang[GetGangID(pStats[playerid][GangueNome])][m],tmp);
					}
				}
			}
			format(str,sizeof(str),"%s mudou sua conta para %s",PlayerName(playerid),tmp);
			print(str);
			writelog(str);
			SendClientMessageAdmin(COLOR_WHITE,str);
			fremove(PlayerFile(PlayerName(playerid)));
			SendClientMessage(playerid,COLOR_JUIZ,"Conta modificada.");
			SetPlayerName(playerid,tmp);
			return 1;
		}
	}
	if(strcmp(cmd, "/mudarsenha", true) == 0) {
		if(!fexist(PlayerFile(PlayerName(playerid)))) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem conta aqui, use /registrar [senha]");
		if(!Logado[playerid])  return SendClientMessage(playerid, COLOR_GRAY, "Primeiro se logue no jogo /logar [senha]");
	    SendClientMessage(playerid, COLOR_AZULPLUS, "[INFO] OK digite a sua senha atual no chat!");
	    SendClientMessage(playerid, COLOR_GRAY, "[INFO] Não se preocupe ela não será revelada!");
	    confirmacaosenha[playerid] = 1;
	    return 1;
	}
    if(strcmp(cmd, "/ajuda", true) == 0) {
        SendClientMessage(playerid, COLOR_RED2,"Virtual Life RPG - Parte ajuda:");
    	SendClientMessage(playerid, COLOR_WHITE, "/comandos até /comandos15 : Comandos desse gamemode");
        SendClientMessage(playerid, COLOR_WHITE, "/registrar [senha] : Registrar-se");
        SendClientMessage(playerid, COLOR_WHITE, "/logar [senha] : Logar-se");
        SendClientMessage(playerid, COLOR_WHITE, "/aprender : Mostra uma breve explicação sobre o RPG.");
        SendClientMessage(playerid, COLOR_WHITE, "ATENÇÃO: profissões são por experiência, terá que ir no -sine- para mais info /level.");
        SendClientMessage(playerid, COLOR_WHITE, "/profissoes até /profissoes6 : para ver os leveis e as profissões do Virtual Life RpG.");
        SendClientMessage(playerid, COLOR_WHITE, "Ajuda com o celular? digite /celularinfo para mais informações.");
		SendClientMessage(playerid, COLOR_WHITE, "/creditos : Vê os creditos do RPG Mode | /virtualliferpg : Ver a história do gamemode.");
		SendClientMessage(playerid, COLOR_RED2,"Reload Virtual Life RpG mais que um RPG, UMA VIDA!");
		return 1;
	}
    if(strcmp(cmd, "/celularinfo", true) == 0) {
       	SendClientMessage(playerid, COLOR_GRAY,   "O comando /PM [id] foi desabilitado dando origem a um novo recurso,");
        SendClientMessage(playerid, COLOR_YELLOW, "o celular, nele você faz ligações e recebe-las para qualquer player com o custo de $1 o crédito");
        SendClientMessage(playerid, COLOR_YELLOW, "primeiramente terá que comprar 1 celular com o comando /celular no valor da inflação vezes o aparelho.");
        SendClientMessage(playerid, COLOR_GREEN,  "ATENÇÃO: Apenas os players que tiverem celular poderam receber mensagens e envia-las");
        SendClientMessage(playerid, COLOR_GREEN,  "ATENÇÃO: Para você ver o número de outro player terá que comprar um agenda com o comando:");
        SendClientMessage(playerid, COLOR_YELLOW, "/agenda no valor de $500, para saber o número de um outro player digite /numero [id/partedonick] assim você ");
        SendClientMessage(playerid, COLOR_YELLOW, "poderá enviar mensagens pelo comando /sms [númerodoplayer] [texto].");
        SendClientMessage(playerid, COLOR_WHITE,  "Coloque /celularinfo2 para mais info!");
        return 1;
	}
    if(strcmp(cmd, "/celularinfo2", true) == 0) {
        SendClientMessage(playerid, COLOR_VERDECLARO,   "ATENÇÃO: Para enviar mensagens você precisa de créditos vá em uma loja 24/7 e compre");
        SendClientMessage(playerid, COLOR_VERDECLARO,   "créditos pelo comando /recarga [creditos], para ver os creditos digite /cellcreditos, ESSE comando não precisa estar na 24/7");
        SendClientMessage(playerid, COLOR_VERDECLARO,   "Para ligar digite: /chamar [número/do/jogador], é um chat restrito!");
        SendClientMessage(playerid, COLOR_VERDECLARO,   "Você também pode ligar a COBRAR /chamar9090 [número/do/jogador]!");
        SendClientMessage(playerid, COLOR_VERDECLARO,   "para desligar digite /desligar");
        SendClientMessage(playerid, COLOR_VERDECLARO,   "Você também poderá receber/enviar mensagens de caixa postal");
        SendClientMessage(playerid, COLOR_VERDECLARO,   "Para ver as suas mensagens digite /vercaixapostal e para exclui-las digite /excluircaixapostal");
  		SendClientMessage(playerid, COLOR_YELLOW, 		"Para qualquer dúvida contate um ADMIN e pergunte-o sobre o sistema");
  		return 1;
    }
    if(strcmp(cmd, "/sistlevel", true) == 0) {
        SendClientMessage(playerid, COLOR_RED2,  "Virtual Life RPG - Sistema de level:");
        SendClientMessage(playerid, COLOR_WHITE, "Quando não souber onde é a agência de empregos use o GPS");
        SendClientMessage(playerid, COLOR_WHITE, "Basta digitar /locais e achar o ID, em seguida /GPS [id do local]");
        SendClientMessage(playerid, COLOR_WHITE, "/profissoes para ver os leveis necessários e os ExPoints equivalentes a 1 XL de cada profissão");
        SendClientMessage(playerid, COLOR_WHITE, "LEMBRETE: Você só receberá ExPoint se estiver no seu horário, digite /meuhorario para ver...");
        SendClientMessage(playerid, COLOR_RED2,  "Virtual Life RPG mais que um RPG, UMA VIDA!");
		return 1;
	}
	if(strcmp(cmd, "/level", true) == 0) {
        SendClientMessage(playerid, COLOR_RED2,  "Virtual Life RPG - Sistema de level:");
    	SendClientMessage(playerid, COLOR_WHITE, "O Sistema de Level, tem como proveito deixar o servidor sem admins e autônomo junto com o /votarkick.");
        SendClientMessage(playerid, COLOR_WHITE, "Ao nascer, ficará marcado um CheckPoint no seu radar, indicando a posição para onde deve ir atrás de emprego.");
        SendClientMessage(playerid, COLOR_WHITE, "Chegando lá, você encontrará profissões por sala. Logo ao entrar você se depará com um CP de profs até nivel 10. ");
        SendClientMessage(playerid, COLOR_WHITE, "Caso esteja disposto a ver outras profissões. Existe uma sala a direita da entrada, com profissões de nivel 20 até 40.");
        SendClientMessage(playerid, COLOR_WHITE, "Caso esteja disposto a ver as outras profissões, a esquerda da entrada existe uma escadaria.");
		SendClientMessage(playerid, COLOR_WHITE, "Aonde você encontrará as profissões de níveis superiores.");
		SendClientMessage(playerid, COLOR_WHITE, "Para ver seu level digite /meustatus | Para mais informações digite /sistlevel");
		SendClientMessage(playerid, COLOR_RED2,  "Virtual Life RPG mais que um RPG, UMA VIDA!");
		return 1;
	}
    if(strcmp(cmd, "/creditos", true) == 0) {
	    SendClientMessage(playerid, COLOR_COP_SWAT, "!*!*!*!*!*!*!*!*!*!*!*! Reload Virtual Life RPG !*!*!*!*!*!*!*!*!*!*!*!");
	    SendClientMessage(playerid, COLOR_JUIZ, "Edição/Scripting atual: Texugo, Rafael, Guilherme, osorkon");
	    SendClientMessage(playerid, COLOR_RED2, "Scripting inicial: Texugo, matraka, Allan");
	    SendClientMessage(playerid, COLOR_GREEN, "Origem do mode: SolidNuts, TheHitman, Luigui e DaMNeD");
	    SendClientMessage(playerid, COLOR_YELLOW, "Nossos codes foram feitos por nós próprios, se ocorreram divergência de idéias foi para melhorar o mode.");
		SendClientMessage(playerid, COLOR_WHITE, "Agradecimentos especiais: /agradecimentos");
		return 1;
	}
	if(!strcmp(cmd,"/agradecimentos",true)) {
	    SendClientMessage(playerid, COLOR_COP_SWAT, "Agradecimentos especiais:");
	    SendClientMessage(playerid, COLOR_YELLOW, " ");
	    SendClientMessage(playerid, COLOR_GREEN, "Agradecemos a nossa equipe, pois sem ela, esse gamemode não seria o mesmo.");
   	    SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "Agradecemos a equipe Brazucas'Server, MtS e Michael por algumas idéias que foram usadas no gamemode.");
		SendClientMessage(playerid, COLOR_JUIZ, "Agradecemos ao Rafelder pelo streamer de Map Icons.");
	    SendClientMessage(playerid, COLOR_WHITE, "Agradecemos ao clan .:GT:. / [I] por ter iniciado a história do RPG brasileiro com profissões.");
	    SendClientMessage(playerid, COLOR_WHITE, "Sem ele, nós teríamos que jogar DM, corrida ou ainda no estilo The Godfather.");
	    SendClientMessage(playerid, COLOR_YELLOW, "Agradecemos à equipe do SA:MP por nos trazer a possibilidade de jogar esse magnífico jogo online.");
	    SendClientMessage(playerid, COLOR_RED2, "E principalmente, à Rockstar Games e subsidiárias, por ter criado um jogo fantástico como o GTA San Andreas!");
	    return 1;
	}
	if(strcmp(cmd, "/virtualliferpg", true) == 0) {
	    SendClientMessage(playerid, COLOR_RED2,  "Reload Virtual Life RPG - História do gamemode:");
	    SendClientMessage(playerid, COLOR_WHITE, "Depois da saída do clan MPA, nosso amigo Texugo decidiu criar um gamemode, quando passou-se um tempo,");
		SendClientMessage(playerid, COLOR_WHITE, "Rafael, Osorkon e Doug também estavam querendo sair do clan, Texugo então os convidou para ajudar no gamemode dele,");
		SendClientMessage(playerid, COLOR_WHITE, "e ainda chamou o Guilherme, que pensou um pouco e resolveu aceitar também, assim foi criado o Reload Virtual Life RPG,");
		SendClientMessage(playerid, COLOR_WHITE, "o Reload vem de um gamemode antigo que Rafael e Guilherme estavam fazendo, como o Texugo colocou Virtual Life só");
		SendClientMessage(playerid, COLOR_WHITE, "acrescentamos \"Reload\", mas chamamos ele de \"Virtual Life\" como abreviação.");
		SendClientMessage(playerid, COLOR_WHITE, "Infelizmente Doug se retirou da equipe antes do gamemode lançar, mas mesmo assim continuamos em frente, exigindo muito");
		SendClientMessage(playerid, COLOR_WHITE, "de nós mesmos, recebemos algumas ajudas de amigos (Michael, MtS), e conseguimos criar esse grande gamemode de RPG,");
		SendClientMessage(playerid, COLOR_WHITE, "fizemos ele com objetivo de aumentar a diversão de muitos que estão cansado de poucos RPG's legais e originais,");
		SendClientMessage(playerid, COLOR_WHITE, "estamos tentando fazer o melhor possível, e você também pode colaborar, digite /colaboracoes e veja como!");
		return 1;
	}
	if(strcmp(cmd, "/colaboracoes", true) == 0) {
	    SendClientMessage(playerid, COLOR_RED2,  "Reload Virtual Life RPG - Como colaborar:");
	    SendClientMessage(playerid, COLOR_WHITE, "Respeite as regras (/regras1 e /regras2), ensine os outros jogadores como jogar e dê referência de locais para eles,");
		SendClientMessage(playerid, COLOR_WHITE, "Vá a nossa comunidade e dê idéias para o gamemode, dê sugestões sobre como melhorar sistemas, enfim tudo que se possa");
		SendClientMessage(playerid, COLOR_WHITE, "fazer para ajudar o mode e aos jogadores é tratado como uma colaboração, nossa administração agradece esses colaboradores,");
		SendClientMessage(playerid, COLOR_WHITE, "pois eles estão melhorando o servidor!");
		SendClientMessage(playerid, COLOR_WHITE, "Nossa comunidade: http://www.orkut.com/Community.aspx?cmm=45269704");
		return 1;
	}
	if(strcmp(cmd, "/aprender", true) == 0) {
	    SendClientMessage(playerid, COLOR_RED2,  "Reload Virtual Life RPG - Parte de aprendizado:");
	    SendClientMessage(playerid, COLOR_WHITE, "O Virtual Life RPG é um gamemode que representa a vida real.");
	    SendClientMessage(playerid, COLOR_WHITE, "Aqui você obterá um emprego, uma casa, carros, móveis, propriedades, tudo dependendo de sua condição financeira.");
	    SendClientMessage(playerid, COLOR_WHITE, "Seu objetivo aqui é ir evoluindo de classe social, e junto curtir os lazeres que o gamemode oferece.");
		SendClientMessage(playerid, COLOR_WHITE, "Se cometer crimes, terá que resolver as contas com a policia, mas você também pode tentar escapar da lei.");
		SendClientMessage(playerid, COLOR_WHITE, "Você precisará ter habilitações para dirigir: Terrestre, Náutica e Aérea, caso contrário poderá levar multa!");
		SendClientMessage(playerid, COLOR_WHITE, "Para usar os veículos do servidor eles precisam ter gasolina, se faltar, vá no posto abastecer ou chame um frentista.");
		SendClientMessage(playerid, COLOR_WHITE, "Aqui você pode realizar seus sonhos: obter carros modernos, ter uma casa grande, redecorada e com móveis, entre outros...");
		SendClientMessage(playerid, COLOR_RED2, "Reload Virtual Life RpG mais que um RPG, UMA VIDA!");
		return 1;
	}
	if(strcmp(cmd, "/proximotuto",true) == 0) {
		switch(ParteTutorial[playerid])
		{
		    case 0: SendClientMessage(playerid, COLOR_GRAY, "Você não está lendo o tutorial!");
		    case 2: Tutorial3(playerid);
		    case 3: Tutorial4(playerid);
		    case 4: Tutorial5(playerid);
		    case 5: Tutorial6(playerid);
		    case 6: Tutorial7(playerid);
		    case 7: Tutorial8(playerid);
		    case 8: Tutorial9(playerid);
		    case 9: Tutorial10(playerid);
		    case 10: Tutorial11(playerid);
		    case 11: Tutorial12(playerid);
		    case 12: Tutorial13(playerid);
			case 13: Tutorial14(playerid);
			case 14: Tutorial15(playerid);
			case 15: Tutorial16(playerid);
			case 16: Tutorial17(playerid);
			case 17: Tutorial18(playerid);
			case 18: Tutorial19(playerid);
			case 19: Tutorial20(playerid);
			case 20: Tutorial21(playerid);
			case 21: Tutorial22(playerid);
			case 22: Tutorial23(playerid);
			case 23: Tutorial24(playerid);
		}
		return 1;
	}
	if(strcmp(cmd, "/vertutorial",true) == 0) {
	    TogglePlayerControllable(playerid,0);
		TimerTuto[playerid] = SetTimerEx("Tutorial",3000,0,"d",playerid);
		SendClientMessage(playerid, COLOR_WHITE, "Aguarde...");
		return 1;
	}
	if(strcmp(cmd, "/comandos", true) == 0) {
		SendClientMessage(playerid, COLOR_JUIZ, 			"Comandos do Reload Virtual Life RpG - Parte I -");
		SendClientMessage(playerid, COLOR_RED2, 			"/profissoes até /profissoes6 : para ver os leveis e as profissões do Virtual Life RpG.");
        SendClientMessage(playerid, COLOR_TURQUESA, 		"/regras1 , /regras2 : Para ver as regras.");
		SendClientMessage(playerid, COLOR_COP_SWAT, 		"/190 [denuncia] : Faz uma denuncia à policia.");
		SendClientMessage(playerid, COLOR_EMERGENCIA, 		"/192 : Chama uma ambulância ao local");
		SendClientMessage(playerid, COLOR_GREEN,            "/comprarcarro : Comprar um veículo à venda na concecionaria.");
		SendClientMessage(playerid, COLOR_TRAFICANTE,       "/servico [taxi, taxiaereo, diskdroga, mecanico, frentista, diskarma] : Para chamar um dos serviços disponíveis.");
        SendClientMessage(playerid, COLOR_LIDER_DE_TRAFICO, "/meucarro : Aplicar uma trava em seu veículo, ele tem que ter o KIT de travas comprado na loja de customização.");
        SendClientMessage(playerid, COLOR_YELLOW,       	"/comandos2 ver a segunda lista de comandos");
		return 1;
	}
    if(strcmp(cmd, "/comandos2", true) == 0) {
        SendClientMessage(playerid, COLOR_JUIZ, 			"Comandos do Reload Virtual Life RpG - Parte II -");
		SendClientMessage(playerid, COLOR_SEGURANÇA, 		"/procurados : Vê a lista de procurados pela policia | /presos : Vê aa lista de presos.");
       	SendClientMessage(playerid, COLOR_ASSALTANTE,   	"/banco : Ver como funciona nosso sistema de Banco");
		SendClientMessage(playerid, COLOR_COP_MILITAR, 		"/abastecer [litros] : Abastecer (você deve estar no posto para usar este comando).");
        SendClientMessage(playerid, COLOR_WHITE, 			"/pagar [id] [quantidade] : Pagar corretor ou vendedor de carros.");
        SendClientMessage(playerid, COLOR_ADVOGADO, 		"/advogado: Solicitar um advogado | /defesa [id] [valor ex:500k] : para pagar advogado por defende-lo .");
		SendClientMessage(playerid, COLOR_COP_SWAT,         "/loteria: [1-20] [1-20] : Apostar na loteria.");
		SendClientMessage(playerid, COLOR_PALHA,         	"(/s)ussurrar [mensagem] : Sussurar, isso fará com que somente pessoas bem próximas a você vejam a mensagem.");
        SendClientMessage(playerid, COLOR_YELLOW,       	"/comandos3 ver a terceira lista de comandos");
        return 1;
    }
    if(strcmp(cmd, "/comandos3", true) == 0) {
        SendClientMessage(playerid, COLOR_JUIZ, 			"Comandos do Reload Virtual Life RpG - Parte III -");
        SendClientMessage(playerid, COLOR_GRAD1,   			"(/g)ritar [mensagem] : Para gritar, isso fará com que mais jogadores recebam suas mensagens.");
        SendClientMessage(playerid, COLOR_SEGURANÇA,		"/telepizza [local] : Pede ao pizzaboy uma pizza.");
        SendClientMessage(playerid, COLOR_RED2, 			"/veiculos : Ver os carros que podem ser comprados e os preços do Reload Virtual Life RpG.");
        SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS,"/pedirarma [arma/ou/nome parecido] : Pede uma arma ao vendedor de armas.");
        SendClientMessage(playerid, COLOR_PALHA,			"/acoes : Ver as ações do jogo!");
      	SendClientMessage(playerid, COLOR_WHITE,			"/votarkick [id] : Insatisfeito com um jogador?");
        SendClientMessage(playerid, COLOR_UNLOGGED,     	"/profissao : Ver os comandos de sua profissão.");
        SendClientMessage(playerid, COLOR_YELLOW,      	 	"/comandos4 ver a quarta lista de comandos");
        return 1;
	}
	if(strcmp(cmd, "/comandos4", true) == 0) {
	    SendClientMessage(playerid, COLOR_JUIZ, 			"Comandos do Reload Virtual Life RpG - Parte IV -");
        SendClientMessage(playerid, COLOR_DELEGADO,  		"/skintrabalho : Muda seu skin para o de trabalho.");
		SendClientMessage(playerid, COLOR_ADVOGADO,			"/armas : Ver os preços das armas do Reload Virtual Life RPG.");
        SendClientMessage(playerid, COLOR_JUIZ,				"/soltarpreso [id] : Você matou um Juiz/Delegado, ganhou a chave da cadeia pode libertar 1 preso!");
        SendClientMessage(playerid, COLOR_AZULPLUS,         "/portedearmas : Ver o porte de arma do servidor.");
        SendClientMessage(playerid, COLOR_VERDECLARO,       "/vdocumentos : Ver os documentos de um veículo, você tem que estar nele!");
        SendClientMessage(playerid, COLOR_GREEN, 			"/horas : Mostra o horário em SA | /data : Mostra a data em SA.");
        SendClientMessage(playerid, COLOR_INSTRUTOR,        "/carteiras : Ver o valor das habilitações.");
        SendClientMessage(playerid, COLOR_YELLOW,      	 	"/comandos5 ver a quinta lista de comandos");
        return 1;
    }
    if(strcmp(cmd, "/comandos5", true) == 0) {
     	SendClientMessage(playerid, COLOR_JUIZ, 			"Comandos do Reload Virtual Life RpG - Parte V -");
        SendClientMessage(playerid, COLOR_VERDE_AQUA,       "/novidades , /novidades2 , /rpglife até /rpglife11 : Para ver as novidades.");
        SendClientMessage(playerid, COLOR_GREEN,            "/meustatus : Para ver o seu status completo.");
		SendClientMessage(playerid, COLOR_RED2,             "/retirartxt : Remove o texto se bugar na tela!");
		SendClientMessage(playerid, COLOR_DELEGADO,         "/cheirar [gramas] : Para cheirar cocaína.");
		SendClientMessage(playerid, COLOR_EMERGENCIA,       "/fumar [cigarros] : Para fumar maconha.");
		SendClientMessage(playerid, COLOR_PEDREIRA,         "/injetar [injeções] : Para injetar heroína.");
        SendClientMessage(playerid, COLOR_CORRETOR,         "/meuveiculoid : Ver o ID de identificação do veículo, você tem que ser o dono dele.");
		SendClientMessage(playerid, COLOR_YELLOW,      	 	"/comandos6 ver a sexta lista de comandos.");
	    return 1;
    }
    if(strcmp(cmd, "/comandos6", true) == 0) {
     	SendClientMessage(playerid, COLOR_JUIZ, 			"Comandos do Reload Virtual Life RpG - Parte VI -");
		SendClientMessage(playerid, COLOR_RECEITA_FEDERAL,  "/pagardividas [ID/do/veículo] : Pagar as dívidas de um veículo, você tem que estar na Delegacia.");
		SendClientMessage(playerid, COLOR_VERDEESCURO,  	"/trocarposicao : Troca a posição de um veículo, você tem que ser o dono dele.");
		SendClientMessage(playerid, COLOR_LIDER_DE_TRAFICO, "/mudarsenha : Para mudar sua senha.");
		SendClientMessage(playerid, COLOR_MECANICO, 		"/pedirseguro : Para pedir um seguro de vida/veículo.");
		SendClientMessage(playerid, COLOR_PURPLE, 		    "/cancelarseguro : Para remover seu seguro de vida.");
        SendClientMessage(playerid, COLOR_AZULPLUS, 		"/pagarstrip [ID/da/striper] : Para pagar uma striper.");
        SendClientMessage(playerid, COLOR_TRANSPORTE_DE_VALORES, "/meuhorario : Ver o seu horário de trabalho!");
		SendClientMessage(playerid, COLOR_YELLOW,      	 	"/comandos7 ver a sétima lista de comandos.");
	    return 1;
    }
    if(strcmp(cmd, "/comandos7", true) == 0) {
        SendClientMessage(playerid, COLOR_JUIZ, 			"Comandos do Reload Virtual Life RpG - Parte VII -");
        SendClientMessage(playerid, COLOR_ROSACLARO,       	"/levarpesca : Para levar sua pesca, você tem que estar na cooperativa de pesca.");
        SendClientMessage(playerid, COLOR_WHITE,            "/iscas [quantia/de/iscas] : Comprar iscas (Você tem que estar na cooperativa de pesca)");
		SendClientMessage(playerid, COLOR_PESCADOR,         "/pescar : Joga a rede para pescar (Você tem que estar na área de pesca)");
		SendClientMessage(playerid, COLOR_COP_SWAT,         "/venderpesca : Vende suas pescas (Você tem que estar na cooperativa de pesca)");
		SendClientMessage(playerid, COLOR_TRAFICANTE,       "/minhasiscas : Ver a quantidade de iscas que você tem.");
		SendClientMessage(playerid, COLOR_CONTRABANDISTA, 	"/cancelarseguroimovel : Para remover seu seguro de imóvel.");
		SendClientMessage(playerid, COLOR_TRANSPORTE_DE_VALORES, "/removerseguroveiculo : Remover o seguro de um veículo, você tem que ser o dono dele!");
		SendClientMessage(playerid, COLOR_YELLOW,      	 	"/comandos8 ver a oitava lista de comandos.");
	    return 1;
    }
    if(strcmp(cmd, "/comandos8", true) == 0) {
    	SendClientMessage(playerid, COLOR_JUIZ, 			"Comandos do Reload Virtual Life RpG - Parte VIII -");
		SendClientMessage(playerid, COLOR_GREEN,            "/propriedades : Ver as propriedades do gamemode.");
		SendClientMessage(playerid, COLOR_MECANICO,         "/negocioscmds , /negocioscmds2 : Ver os comandos do sistema de negócios.");
		SendClientMessage(playerid, COLOR_UNLOGGED,         "/mandarmatar [id] [valor] : Colocar a cabeça de alguém em prêmio para os assassinos.");
		SendClientMessage(playerid, COLOR_SEGURANÇA,        "/contratarseguranca [id] [valor] : Contratar um segurança.");
		SendClientMessage(playerid, COLOR_GRAY,              "/demitirseguranca [id] : Demitir um segurança.");
		SendClientMessage(playerid, COLOR_BARMAN, 			"/apostarcavalo [cavalo] [quantia] : Apostar em um cavalo, você tem que estar na loteria de cavalos!");
		SendClientMessage(playerid, COLOR_WHITE,            "/interiores : Ver informações sobre os interiores.");
		SendClientMessage(playerid, COLOR_YELLOW,      	 	"/comandos9 ver a nona lista de comandos.");
	    return 1;
	}
	if(strcmp(cmd, "/comandos9", true) == 0) {
    	SendClientMessage(playerid, COLOR_JUIZ, 			"Comandos do Reload Virtual Life RpG - Parte IX -");
		SendClientMessage(playerid, COLOR_RED2,             "/agendatestes : Ver a agenda de testes da auto escola.");
		SendClientMessage(playerid, COLOR_INSTRUTOR,        "/agendarteste [id] : Agendar um teste de habilitação com um instrutor!");
		SendClientMessage(playerid, COLOR_CORRETOR_SEGUROS, "/admin [mensagem] : Enviar mensagem para os admins (Reclamações, Reportar BUG's, etc...)");
		SendClientMessage(playerid, COLOR_WHITE,            "/admins : Ver os admins do servidor.");
		SendClientMessage(playerid, COLOR_COP_SWAT, 		"/infocasa : Ver informações sobre sua casa.");
		SendClientMessage(playerid, COLOR_COP_NARCOTICOS,   "/entrar : Entrar por uma porta.");
		SendClientMessage(playerid, COLOR_MECANICO,         "/sair : Sair por uma porta.");
		SendClientMessage(playerid, COLOR_YELLOW,      	 	"/comandos10 ver a décima lista de comandos.");
		return 1;
	}
	if(strcmp(cmd, "/comandos10", true) == 0) {
    	SendClientMessage(playerid, COLOR_JUIZ, 			"Comandos do Reload Virtual Life RpG - Parte X -");
		SendClientMessage(playerid, COLOR_VERDEESCURO, 		"/GPS [ID/do/Local] : Para ligar o GPS.");
		SendClientMessage(playerid, COLOR_GREEN, 			"/desligargps : Para desligar o GPS.");
		SendClientMessage(playerid, COLOR_VERDECLARO, 		"/locais até /locais8 : Ver os locais de GPS.");
		SendClientMessage(playerid, COLOR_WHITE,	 		"/c [mensagem] : Enviar mensagem para as pessoas que estiverem no mesmo veículo que você.");
		SendClientMessage(playerid, COLOR_AGRICULTOR,     	"/entregardocumentos [ID/do/COP] : Mostra os documentos para o polícial.");
        SendClientMessage(playerid, COLOR_MOTORISTA_DE_ONIBUS, "/verdocumentos : Ver os documentos de um jogador (Você tem que estar com ele)");
        SendClientMessage(playerid, COLOR_PALHA,            "/devolverdocumentos : Devolver os documentos de um jogador.");
		SendClientMessage(playerid, COLOR_YELLOW,      	 	"/comandos11 ver a décima primeira lista de comandos.");
		return 1;
	}
	if(strcmp(cmd, "/comandos11", true) == 0) {
    	SendClientMessage(playerid, COLOR_JUIZ, 			"Comandos do Reload Virtual Life RpG - Parte XI -");
        SendClientMessage(playerid, COLOR_LIDER_DE_TRAFICO, "/slotarmas : Vê as armas e SLOTS disponíveis para compra de munições!");
		SendClientMessage(playerid, COLOR_ASSALTANTE,       "/sistemas : Ver os sistemas do gamemode.");
		SendClientMessage(playerid, COLOR_CORRETOR,         "/medemitir : Para pedir demissão de sua profissão.");
		SendClientMessage(playerid, COLOR_GREEN, 			"/guardarcell : Guardar seu celular em um veículo (Você tem que ser o DONO dele)");
		SendClientMessage(playerid, COLOR_LIDER_DE_TRAFICO, "/pegarcell : Pegar o celular guardado em um veículo.");
		SendClientMessage(playerid, COLOR_AZULPLUS,			"/vercaixapostal : Ver suas mensagens da Caixa Postal.");
        SendClientMessage(playerid, COLOR_COP_SWAT,			"/excluircaixapostal : Excluir mensagens da Caixa Postal.");
	 	SendClientMessage(playerid, COLOR_YELLOW,      	 	"/comandos12 ver a décima segunda lista de comandos.");
		return 1;
	}
	if(strcmp(cmd, "/comandos12", true) == 0) {
    	SendClientMessage(playerid, COLOR_JUIZ, 			"Comandos do Reload Virtual Life RpG - Parte XII -");
        SendClientMessage(playerid, COLOR_CONTRABANDISTA,   "/escrevercarta [nome do jogador] [texto] : Escrever carta para um jogador.");
		SendClientMessage(playerid, COLOR_PESCADOR,       	"/vercorrespondencia : Vê as cartas enviadas para você.");
		SendClientMessage(playerid, COLOR_COP_SWAT,         "/jogarcartasfora : Joga suas cartas fora.");
		SendClientMessage(playerid, COLOR_JORNALISTA,       "/mudarcaixapostal : Mudar sua mensagem de caixa postal.");
		SendClientMessage(playerid, COLOR_ORANGE,       	"/motorista : Solicitar um motorista particular.");
		SendClientMessage(playerid, COLOR_LIGHT_YELLOW,     "/skininfo [ID/da/skin] : Ver as informações sobre uma skin.");
		SendClientMessage(playerid, COLOR_WHITE,	       	"/comprarskin [ID/da/skin] : Comprar uma skin, você tem que estar na loja.");
        SendClientMessage(playerid, COLOR_CORRETOR,         "/experimentarskin [ID/da/skin] : Experimenta uma skin, você tem que estar na loja.");
	 	SendClientMessage(playerid, COLOR_YELLOW,      	 	"/comandos13 ver a décima terceira lista de comandos.");
		return 1;
	}
	if(strcmp(cmd, "/comandos13", true) == 0) {
	    SendClientMessage(playerid, COLOR_JUIZ, 			"Comandos do Reload Virtual Life RpG - Parte XIII -");
		SendClientMessage(playerid, COLOR_ROSACLARO,       	"/tomarsorvete : Para tomar sorvete, você tem que estar na sorveteria.");
		SendClientMessage(playerid, COLOR_VERDECLARO,      	"/comprarsorvete : Para comprar sorvete, você tem que estar na sorveteria.");
        SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, "/venderveiculo [ID/do/veículo] [preço] : Colocar seu veículo a venda!");
        SendClientMessage(playerid, COLOR_VERDEESCURO,      "/comprarveiculo [id] [ID/do/veículo] : Comprar um veículo a venda!");
        SendClientMessage(playerid, COLOR_PALHA,      		"/emprestarchave [id] : Emprestar sua chave do carro para outro jogador!");
        SendClientMessage(playerid, COLOR_LIGHT_YELLOW,     "/devolverchave [id] : Devolve todas as chaves que você emprestou do outro jogador!");
        SendClientMessage(playerid, COLOR_WHITE,      		"/dia : Ver todas as informações do dia.");
        SendClientMessage(playerid, COLOR_YELLOW,      	 	"/comandos14 ver a décima quarta lista de comandos.");
		return 1;
	}
	if(strcmp(cmd, "/comandos14", true) == 0) {
	    SendClientMessage(playerid, COLOR_JUIZ, 			"Comandos do Reload Virtual Life RpG - Parte XIV -");
	    SendClientMessage(playerid, COLOR_GRAY,   			"/comprarchavemestra : Para adquirir uma chave mestra, você tem que estar no Chaveiro.");
	    SendClientMessage(playerid, COLOR_CONTRABANDISTA,   "/galao [1-20] : Comprar um galão de combustível, você deve estar no posto.");
	    SendClientMessage(playerid, COLOR_RED2,   			"/colocar [1-20] : Para aplicar o combustível em um veículo, você deve estar nele.");
	    SendClientMessage(playerid, COLOR_WHITE,   			"/usarskin : Usar seu skin atual.");
	    SendClientMessage(playerid, COLOR_COP_SWAT,   		"/lazeres : Ver os lazeres do gamemode.");
	    SendClientMessage(playerid, COLOR_COP_RODOVIARIO,   "/vertutorial : Ver o tutorial de como jogar no Virtual Life RPG.");
	    SendClientMessage(playerid, COLOR_CORRETOR_SEGUROS, "/precoseguros : Ver os preços dos seguros disponíveis do servidor!");
		SendClientMessage(playerid, COLOR_YELLOW,           "/comandos15 ver a décima quinta lista de comandos.");
		return 1;
	}
	if(strcmp(cmd, "/comandos15", true) == 0) {
		SendClientMessage(playerid, COLOR_JUIZ, 			"Comandos do Reload Virtual Life RpG - Parte XV -");
        SendClientMessage(playerid, COLOR_PARAMEDICO,		"/tomarvacina : Tomar vacina conta a epidemia da malária, você tem que estar no Hospital.");
		SendClientMessage(playerid, COLOR_MOTORISTA_DE_ONIBUS, "/internar : Internar-se, curar as doenças e receber curativo, você tem que estar no Hospital.");
		SendClientMessage(playerid, COLOR_CONTRABANDISTA,   "/leis1 até /leis3 : Leis para a boa conduta na rua e no trânsito.");
		SendClientMessage(playerid, COLOR_PALHA,            "/policia1 e /policia2 : Para ver as Leis que a polícia deve seguir com você.");
		SendClientMessage(playerid, COLOR_ORANGE,           "/comer : Compre o Sanduíche Natural na 24/7 e quando estiver precisando de vida, coma-o");
		SendClientMessage(playerid, COLOR_SEGURANÇA,        "/rastrearcelular [número] : Rastrear um jogador via celular.");
		SendClientMessage(playerid, COLOR_GREEN,            "/desligarrastreador : Desligar seu rastreador via celular.");
		SendClientMessage(playerid, COLOR_YELLOW,           "/comandos16 ver a décima sexta lista de comandos.");
		return 1;
	}
	if(strcmp(cmd, "/comandos16", true) == 0) {
		SendClientMessage(playerid, COLOR_JUIZ, 			"Comandos do Reload Virtual Life RpG - Parte XVI -");
        SendClientMessage(playerid, COLOR_HIGIENE6,			"/colocarpasta : Colocar pasta de dentes na escova, você deve ter uma pasta e uma escova.");
		SendClientMessage(playerid, COLOR_HIGIENE5, 		"/escovardentes : Escovar os dentes, você deve estar no banheiro.");
		SendClientMessage(playerid, COLOR_HIGIENE4,   		"/salvar : Salvar seus dados.");
		SendClientMessage(playerid, COLOR_HIGIENE3,			"/massagemcardiaca : Viu alguém morrendo na rua? Rápido faça uma massagem nela e espere os paramedicos.");
		SendClientMessage(playerid, COLOR_HIGIENE2,         "/trocarvelocimetro [ 1 ou 2 ] 1 = Velocimetro em TextDraw. 2 = Velocimetro em GameText.");
		SendClientMessage(playerid, COLOR_YELLOW,           "Virtual Life RPG mais que um RPG, UMA VIDA!");
		return 1;
	}
	if(strcmp(cmd, "/precoseguros", true) == 0) {
	    SendClientMessage(playerid, COLOR_RED2,             "Virtual Life RPG - Preços dos seguros:");
	    SendClientMessage(playerid, COLOR_WHITE,            "Seguro de vida: $1000 para adquirir + $400 para a corretora semanalmente");
        SendClientMessage(playerid, COLOR_WHITE,            "Seguro de imóvel: $2000 para adquirir + $500 para a corretora semanalmente");
        SendClientMessage(playerid, COLOR_WHITE,            "Seguro de veículo: $3000 para adquirir apenas em um veículo");
        return 1;
	}
	if(strcmp(cmd, "/lazeres", true) == 0) {
		SendClientMessage(playerid, COLOR_JUIZ,             "Virtual Life RPG - Lazeres:");
		SendClientMessage(playerid, COLOR_WHITE,            "Derby : para mais informações digite /derbyinfo");
		SendClientMessage(playerid, COLOR_LIGHT_YELLOW,     "Polícia e Ladrão (PL) : para mais informações digite /plinfo");
		SendClientMessage(playerid, COLOR_YELLOW,           "Balada : para ir até lá procure em /locais e use o GPS.");
		SendClientMessage(playerid, COLOR_LIXEIRO,          "Capture The Cars (CTC) : para mais informações digite /ctcinfo.");
		return 1;
	}
	if(strcmp(cmd, "/ctcinfo", true) == 0) {
		SendClientMessage(playerid, COLOR_RED2,             "Capture The Cars (CTC):");
		SendClientMessage(playerid, COLOR_WHITE, 			"Capture The Cars é um evento onde você deve pegar os caminhões de guincho em sua base e");
		SendClientMessage(playerid, COLOR_WHITE, 			"capturar os veículos escondidos por Las Venturas e arredores próximos!");
		SendClientMessage(playerid, COLOR_WHITE, 			"Faça isso antes da sua equipe adversária, o jogo segue: Equipe azul VS Equipe laranja");
		SendClientMessage(playerid, COLOR_WHITE, 			"Para guinchar um veículo aperte CTRL");
		SendClientMessage(playerid, COLOR_WHITE,            "Comandos: /entrarctc e /sairctc");
		SendClientMessage(playerid, COLOR_WHITE,            "Os administradores iniciam e também podem finalizar o evento...");
		return 1;
	}
	if(strcmp(cmd, "/plinfo", true) == 0) {
		SendClientMessage(playerid, COLOR_RED2,             "Polícia e Ladrão (PL):");
		SendClientMessage(playerid, COLOR_WHITE,            "O evento tem como objetivo para os ladrões fugirem dos políciais por 10 minutos!");
		SendClientMessage(playerid, COLOR_WHITE,            "e o objetivo dos policiais capturarem esses ladrões até o tempo acabar...");
		SendClientMessage(playerid, COLOR_WHITE,            "Os policias também devem recarregar as armas (/abastecerarma) na base policial, quando um ladrão");
		SendClientMessage(playerid, COLOR_WHITE,            "for pego, ele poderá ser solto se outro chegar perto dele, para um policial capturar um ladrão terá que mata-lo");
        SendClientMessage(playerid, COLOR_WHITE,            "Ao falar uma mensagem no chat ela irá direto para sua equipe, ou seja, será um chat privado");
		SendClientMessage(playerid, COLOR_WHITE,            "Comandos: /entrarpl e /sairpl");
		SendClientMessage(playerid, COLOR_WHITE,            "Os administradores iniciam e também podem finalizar o evento...");
		return 1;
	}
	if(strcmp(cmd, "/sistemas", true) == 0) {
	    SendClientMessage(playerid, COLOR_RED2, 			"Virtual Life RPG - Sistemas:");
		SendClientMessage(playerid, COLOR_WHITE,            "/sisteletro - /sisthorario - /sisthigiene");
		SendClientMessage(playerid, COLOR_WHITE,			"/infocofre - /sistemadecasas - /sistchat");
        SendClientMessage(playerid, COLOR_WHITE,            "/lazeres - /sistskin - /sistlevel");
        SendClientMessage(playerid, COLOR_WHITE,            "/negocios - /sistgangues - /banco");
        SendClientMessage(playerid, COLOR_WHITE,            "/hotelinfo - /level - /sistentretenimento");
        SendClientMessage(playerid, COLOR_WHITE,            "/sistcarros");
		SendClientMessage(playerid, COLOR_RED2,             "Virtual Life RPG mais que um RPG, UMA VIDA!");
		return 1;
	}
	if(strcmp(cmd, "/sistentretenimento", true) == 0) {
		SendClientMessage(playerid, COLOR_RED2,             "Virtual Life RPG - Entretenimentos:");
		SendClientMessage(playerid, COLOR_WHITE,            "Quer aproveitar seu dia de folga? Está cansado de procurar um lugar pra ir?");
		SendClientMessage(playerid, COLOR_WHITE,            "Relaxe, aqui temos a solução, o Virtual Life RPG vem com entretenimentos, minigames");
		SendClientMessage(playerid, COLOR_WHITE,            "e lazeres onde você pode se divertir nos seus dias de folga... vide /lazeres");
		SendClientMessage(playerid, COLOR_WHITE,            "Alguns entretenimentos são feitos na área de entretenimentos, use o GPS para ir até lá...");
		SendClientMessage(playerid, COLOR_RED2,             "Virtual Life RPG mais que um RPG, UMA VIDA!");
		return 1;
	}
	if(strcmp(cmd, "/sistgangues", true) == 0) {
	    SendClientMessage(playerid, COLOR_GRAY,              "Virtual Life RPG - Gangues:");
	    SendClientMessage(playerid, COLOR_WHITE,            "O sistema de gangues do Virtual Life RPG faz com que você crie uma gangue, chame membros para ela,");
	    SendClientMessage(playerid, COLOR_WHITE,            "cada gangue tem sua pontuação, ao chamar alguém dependente da pontuação da gangue esse alguém");
	    SendClientMessage(playerid, COLOR_WHITE,            "terá que ter uma certa quantia de respeito, ao criar uma gangue veja /minhagangue as informaçoes de sua gangue!");
	    SendClientMessage(playerid, COLOR_WHITE,            "Para adquirir respeito, você poderá matar 5 e ganhar 1, ganhar 1 evento e ganhar 1 ou a cada 3 ExPoints ganhos...");
	    SendClientMessage(playerid, COLOR_WHITE,            "Digite \"!\" antes da mensagem para falar no chat privado com sua gangue");
	    SendClientMessage(playerid, COLOR_WHITE,            "Para ver os comandos relacionados à esse sistema digite /ganguecomandos");
		return 1;
	}
	if(strcmp(cmd, "/ganguecomandos", true) == 0) {
		SendClientMessage(playerid, COLOR_RED2,             "Virtual Life RPG - Comandos de gangue:");
		SendClientMessage(playerid, COLOR_WHITE,            "/criargangue [nome da gangue] [cor da gangue] [tipo da gangue] : Para criar uma gangue, requer 10 pontos de Respeito.");
		SendClientMessage(playerid, COLOR_WHITE,            "/ganguecor [id da cor] : Para ver a cor de um ID.");
		SendClientMessage(playerid, COLOR_WHITE,            "/minhagangue : Ver as informações de sua gangue.");
		SendClientMessage(playerid, COLOR_WHITE,            "/chamarparagangue [nome da gangue] [id] : Chamar alguém para sua gangue.");
		SendClientMessage(playerid, COLOR_WHITE,            "/expulsardagangue [nome da gangue] [id] : Expulsar alguém da sua gangue.");
		SendClientMessage(playerid, COLOR_WHITE,            "/removergangue [nome da gangue] : Remover uma gangue, você tem que ser o dono.");
        SendClientMessage(playerid, COLOR_WHITE,            "Digite \";\" antes da mensagem para falar no chat privado com sua gangue");
		return 1;
	}
	if(strcmp(cmd, "/sistchat", true) == 0) {
	    SendClientMessage(playerid, COLOR_RED2, 			"Virtual Life RPG - Chat:");
	    SendClientMessage(playerid, COLOR_WHITE,            "Agora as mensagens enviadas pelo chat só chegarão para jogadores que estiverem próximos a você!");
        SendClientMessage(playerid, COLOR_WHITE,            "Você poderá gritar também /gritar, CUIDADO: Se gritar demais poderá ter dor de garganta");
        SendClientMessage(playerid, COLOR_WHITE,            "e ficará um bom tempo sem poder gritar novamente!");
        SendClientMessage(playerid, COLOR_WHITE,            "(/g)ritar para gritar e (/s)ussurrar para sussurrar");
        SendClientMessage(playerid, COLOR_WHITE,            "A comunicação com a administração pode ser feita a qualquer hora, apenas use /admin [mensagem]");
        SendClientMessage(playerid, COLOR_RED2,             "Virtual Life RPG mais que um RPG, UMA VIDA!");
		return 1;
	}
	if(strcmp(cmd, "/interiores", true) == 0) {
    	SendClientMessage(playerid, COLOR_RED2, 			"Virtual Life RPG - Informações sobre os interiores:");
		SendClientMessage(playerid, COLOR_WHITE, 			"Interior de $5000: Tamanho = Pequeno, Designer = Pobre, possui apenas espaço para rádio.");
		SendClientMessage(playerid, COLOR_WHITE, 			"Interior de $10000: Tamanho = Pequeno, Designer = Médio, não possui espaço para nenhum eletrodoméstico.");
		SendClientMessage(playerid, COLOR_WHITE, 			"Interior de $20000: Tamanho = Médio, Designer = Entre pobre e médio, possui espaço para televisão e rádio.");
		SendClientMessage(playerid, COLOR_WHITE, 			"Interior de $40000: Tamanho = Médio, Designer = Médio, possui espaço para televisão e rádio e possui cozinha.");
		SendClientMessage(playerid, COLOR_WHITE, 			"Interior de $60000: Tamanho = Médio, Designer = Médio e bonito, possui espaço para televisão, rádio, fogão e geladeira e possui cozinha.");
		SendClientMessage(playerid, COLOR_WHITE, 			"Interior de $80000: Tamanho = Grande, Designer = Legal, possui espaço para fogão e televisão e possui cozinha.");
		SendClientMessage(playerid, COLOR_WHITE,      		"Interior de $100000: Tamanho = Grande, Designer = Médio e rico, possui espaço para televisão e rádio e possui cozinha.");
		SendClientMessage(playerid, COLOR_WHITE,         	"Interior de $200000: Tamanho = Grande, Designer = Show, possui espaço para fogão, geladeira, televisão e som e possui cozinha.");
		SendClientMessage(playerid, COLOR_RED2,        	 	"Virtual Life RPG mais que um RPG, UMA VIDA!");
		return 1;
	}
	if(strcmp(cmd, "/sistemadecasas", true) == 0) {
	    SendClientMessage(playerid, COLOR_RED2, 			"Sistema de Casas Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_WHITE,			"/alugarcasa [id] : Alugar a casa de um jogador.");
		SendClientMessage(playerid, COLOR_WHITE, 			"/comprarcasa [id] : Comprar a casa de um jogador.");
		SendClientMessage(playerid, COLOR_WHITE,         	"/minhacasa : Ver opções com sua casa.");
        SendClientMessage(playerid, COLOR_WHITE,			"/chamarparamorar [id] : Chamar um jogador para morar com você.");
		SendClientMessage(playerid, COLOR_WHITE, 			"/aceitarmoradia : Aceitar uma proposta de moradia.");
	    SendClientMessage(playerid, COLOR_WHITE, 			"/recusarmoradia : Recusar uma proposta de moradia.");
		SendClientMessage(playerid, COLOR_WHITE, 			"/cancelarmoradia : Cancelar uma moradia (Ir para sua casa atual)");
		SendClientMessage(playerid, COLOR_WHITE, 			"/cancelaraluguel : Quando alugar uma casa e não quiser mais ficar por lá, use e voltará para o seu lar.");
		SendClientMessage(playerid, COLOR_RED2,           	"Virtual Life RPG mais que um RPG, UMA VIDA!");
		return 1;
	}
	if(strcmp(cmd, "/sistcarros", true) == 0) {
	    SendClientMessage(playerid, COLOR_RED2, 			"Sistema de Carros Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_WHITE,			"Existe diferentes maneiras de comprar seu carro, na concecionária ou com um vendedor.");
		SendClientMessage(playerid, COLOR_WHITE, 			"Ao comprar seu carro, aconselhamos comprar o Kit de Alarme/Travas. /meucarro");
	    SendClientMessage(playerid, COLOR_WHITE, 			"na loja de customização, lá você também pode personalizar a placa do seu carro. /mudarplaca");
		SendClientMessage(playerid, COLOR_WHITE, 			"Para mudar a posição aonde seu carro é salvo digite: /trocarposica");
        SendClientMessage(playerid, COLOR_WHITE,           	"Todo carro tem chave, voce poderá emprestar sua chave para uma pessoa");
        SendClientMessage(playerid, COLOR_WHITE,           	"Mais lembre caso ela não lhe entregue, é bom chamar a polícia para apreende-las.");
        SendClientMessage(playerid, COLOR_WHITE,            "Para emprestar: /emprestarchave [ID]");
        SendClientMessage(playerid, COLOR_WHITE,            "Existe outros comandos para seu carro, com o tempo aprenderá, esses são os BÁSICOS.");
        SendClientMessage(playerid, COLOR_WHITE,            "Toda modificação salva: Tuning, Placa, Cor, Dano, Alarme, Chave e o Dono.");
		return 1;
	}
	if(strcmp(cmd, "/infocasa", true) == 0) {
   	    SendClientMessage(playerid, COLOR_RED2, 		 	 "Sistema de Casas Reload Virtual Life RpG");
   	    SendClientMessage(playerid, COLOR_WHITE,             "Agora você pode entrar na sua casa, fazer atividades que nunca pensou que faria no Multiplayer.");
   	    SendClientMessage(playerid, COLOR_WHITE,             "-/convidar [id] - Convida alguém para sua casa, ela poderá comer, assistirTv, ligar o rádio, cozinhar.");
   	    SendClientMessage(playerid, COLOR_WHITE,             "-/expulsar [id] - Desabilita a entrada de alguém na sua casa.");
   	    SendClientMessage(playerid, COLOR_WHITE,             "-/trancarcasa - Trancando sua casa ninguém entrará sem permissão.");
	    SendClientMessage(playerid, COLOR_WHITE,             "-/destrancarcasa - Destrancando sua casa, as pessoas habilitadas pelo /convidar poderão entrar.");
	    SendClientMessage(playerid, COLOR_WHITE,             "-/saircasa - Você sai da casa.");
	    SendClientMessage(playerid, COLOR_WHITE,             "Toda casa tem Cofre, lá você poderá guardar: Dinheiro, Armas, Drogas, para mais info: /infocofre.");
   	    SendClientMessage(playerid, COLOR_WHITE,             "OBS1: Ladrões poderão entrar na sua casa e roubar os eletrodomesticos, então previna-se. Para mais informações digite: /sisteletro.");
	    SendClientMessage(playerid, COLOR_WHITE,             "OBS2: Junto com isso você poderá assistir, ouvir, cozinhar, na sua casa. Para mais informações digite: /sisteletro.");
        return 1;
    }
    if(strcmp(cmd, "/sisthigiene", true) == 0) {
   	    SendClientMessage(playerid, COLOR_RED2, 		 	 "Sistema de Higiene Reload Virtual Life RpG");
   	    SendClientMessage(playerid, COLOR_WHITE,             "Agora o Virtual Life tem o sistema de Higiene que acompanha o tempo e o ritmo de seu trabalho.");
   	    SendClientMessage(playerid, COLOR_WHITE,             "É isso mesmo, agora você terá que tomar banhos e usar o vaso sanitário.");
   	    SendClientMessage(playerid, COLOR_WHITE,             "Aos jogadores que TEM casas com banheiros eles poderão tomar banho com o comando /tomarbanho e urinar /urinar.");
   	    SendClientMessage(playerid, COLOR_WHITE,             "Aos que NÃO TEM casa! Podem urinar nos banheiros da cidade, os banheiros estão");
   	    SendClientMessage(playerid, COLOR_WHITE,             "nas lojas que vendem sanduíches (BURGER SHOT).");
   	    SendClientMessage(playerid, COLOR_WHITE,             "Para tomar banho, basta ir na casa do Ryder ou do Sweet localizadas em Ganton, usem o GPS para chegar lá.");
        return 1;
    }
	if(strcmp(cmd, "/sisteletro", true) == 0) {
   	    SendClientMessage(playerid, COLOR_RED2, 		 	 "Sistema de Eletrodomésticos/Segurança Reload Virtual Life RpG");
   	    SendClientMessage(playerid, COLOR_WHITE,             "Na loja de utilidades 24/7 é possível que você adquira todos os eletrodomésticos");
   	    SendClientMessage(playerid, COLOR_WHITE,             "do mode, aqui vai uma breve explicação:");
   	    SendClientMessage(playerid, COLOR_WHITE,             "Ao comprar uma TV,Rádio,Geladeira,Fogão. Você necessita colocar o objeto então quando comprar vá para sua casa e digite:");
   	    SendClientMessage(playerid, COLOR_WHITE,             "-/colocartv, -/colocarradio, -/colocargeladeira, -/colocarfogao | /retirartv, /retirarradio, /retirargeladeira, /retirarfogao.");
	    SendClientMessage(playerid, COLOR_WHITE,             "Comandos TV: /ligartv [canal], /desligartv, /verprevisao. Num 2 e Num 8, passam e retornam o canal. ");
   	    SendClientMessage(playerid, COLOR_WHITE,             "Comandos Rádio: /radio (liga/desliga): São 7 estações diferentes para você se desfrutar.");
	    SendClientMessage(playerid, COLOR_WHITE,             "Comandos Geladeira: /guardarcomida [nome/da/comida] [quantidade], /retirarcomida [nome], /geladeira = ver os alimentos da geladeira da casa.");
	    SendClientMessage(playerid, COLOR_WHITE,             "Comandos Fogão: /cozinhar, /servir,");
        return 1;
    }
   	if(strcmp(cmd, "/infocofre", true) == 0) {
   	    SendClientMessage(playerid, COLOR_RED2, 		 	 "Virtual Life RPG - Sistema de cofre:");
   	    SendClientMessage(playerid, COLOR_WHITE,             "Toda casa vem equipada com um cofre, aonde você pode guardar: Armas, drogas, e dinheiro.");
   	    SendClientMessage(playerid, COLOR_WHITE,             "Para trocar a senha do cofre, vá até a loja de registros de cofres e digite: /registrarcofre [senha], não esqueça dessa senha.");
        SendClientMessage(playerid, COLOR_WHITE,             "Se esquecer, você terá que ir na loja de registros de cofres e digitar /minhasenhacofre.");
	    SendClientMessage(playerid, COLOR_WHITE,             "Ao registrar, o comando para abrir o cofre é /cofresenha [senha].");
   	    SendClientMessage(playerid, COLOR_WHITE,             "Atenção, nem tudo está protegido. Compre um sistema de alarme para sua casa.");
        SendClientMessage(playerid, COLOR_RED2, 		 	 "Virtual Life RPG mais que um RPG, UMA VIDA!");
		return 1;
    }
	if(strcmp(cmd, "/novidades", true) == 0) {
		SendClientMessage(playerid, COLOR_MECANICO,			"NovidadeS Reload Virtual Life RpG - Parte I -");
		SendClientMessage(playerid, COLOR_AZULPLUS,         "Nosso mode vem equipado de 40 profissões para saber como funciona basta digitar /level.");
		SendClientMessage(playerid, COLOR_AZULPLUS, 	    "Aqui no Virtual Life RPG para obter uma nova skin é diferente, veja em /sistskin");
		SendClientMessage(playerid, COLOR_AZULPLUS,         "Que tal apostar uma graninha e concorrer a $120.000? Vá até a loteria e se informe!");
		SendClientMessage(playerid, COLOR_AZULPLUS,         "Está querendo ver os veículos e os preços do servidor? /veículos e veja os veículos disponíveis.");
		SendClientMessage(playerid, COLOR_AZULPLUS, 	    "Está querendo fazer algo ilícito e precisa de armas? Veja nossas armas em /armas e /armas2.");
		SendClientMessage(playerid, COLOR_AZULPLUS,         "Logo em seguida digite /pedirarma [arma/ou/nomeparecido]");
		SendClientMessage(playerid, COLOR_COP_RODOVIARIO,   "/novidades 2 Para ver a lista das Reload Virtual Life RPG - Parte II");
		return 1;
	}
   	if(strcmp(cmd, "/novidades2", true) == 0) {
   		SendClientMessage(playerid, COLOR_MECANICO,			"NovidadeS Reload Virtual Life RpG - Parte II -");
   	    SendClientMessage(playerid, COLOR_AZULPLUS,         "Quer ver as ações disponíveis no jogo? /acoes");
		SendClientMessage(playerid, COLOR_AZULPLUS,         "Insatisfeito com algum jogador? Inicie uma votação /votarkick [id/do/jogador].");
		SendClientMessage(playerid, COLOR_AZULPLUS,         "Mate o Juiz/Delegado e ganhe a chave da cadeia /soltarpreso");
		SendClientMessage(playerid, COLOR_AZULPLUS,         "Seu carro está prestes a explodir? Chame um reboque /servico [mecanico]");
		SendClientMessage(playerid, COLOR_AZULPLUS,         "Quer ver seu porte de armas? /portedearmas");
		SendClientMessage(playerid, COLOR_AZULPLUS,         "Vá na locadora de Los Santos e veja os carros para locação!");
        SendClientMessage(playerid, COLOR_COP_RODOVIARIO,   "Digite /rpglife e veja o Reload Virtual Life RPG na íntegra.");
        return 1;
    }
   	if(strcmp(cmd, "/rpglife", true) == 0) {
   	    SendClientMessage(playerid, COLOR_RED2, 		 	"Aqui estão as NovidadeS - Parte I - do Reload Virtual Life RpG");
   	    SendClientMessage(playerid, COLOR_WHITE,            "Cansado de esperar dar gmx para aparecer seu carro? No Reload Virtual Life RpG");
   	    SendClientMessage(playerid, COLOR_WHITE,            "não precisa de gmx para aparecer.");
   	    SendClientMessage(playerid, COLOR_WHITE,            "Comprava 1 casa e não sabia se morava outra pessoa ali, agora no Virtual Life");
   	    SendClientMessage(playerid, COLOR_WHITE,            "Sua casa ganha um ícone com seu nome informando que ali já mora gente.");
	    SendClientMessage(playerid, COLOR_WHITE,            "Agora você tem seu carro! Comprando o carro do vendedor você pode ativar o alarme");
	    SendClientMessage(playerid, COLOR_WHITE,            "e quando sentir falta dele avise a polícia que ligará o radar e achará seu carro");
   	    SendClientMessage(playerid, COLOR_WHITE,            "aonde estiver");
        SendClientMessage(playerid, COLOR_RED2,    		    "Digite /rpglife2 e veja o Reload Virtual Life RPG na íntegra.");
        return 1;
    }
	if(strcmp(cmd, "/rpglife2", true) == 0) {
        SendClientMessage(playerid, COLOR_RED2, 			"Aqui estão as NovidadeS - Parte II - do Reload Virtual Life RpG");
	    SendClientMessage(playerid, COLOR_WHITE,            "Agora os carros não dão mais respawn, para reaver 1 carro chame um reboque.");
	    SendClientMessage(playerid, COLOR_WHITE,            "Celular com: /celular /sms /agenda /numero /chamar /atender /desligar /espera");
	    SendClientMessage(playerid, COLOR_WHITE,            "Agora todos os carros vem com gás! Ao iniciar o mode todos tem 100lts");
        SendClientMessage(playerid, COLOR_WHITE,            "Quando fechar o mode os litros deixados nos carros serão salvos!");
	    SendClientMessage(playerid, COLOR_WHITE,            "Sem grana para uma casa? Fique hospedado no Hotel /hotelinfo");
	    SendClientMessage(playerid, COLOR_WHITE,            "Todas as profissões vem com mais de 2 comandos! Exato até assassino e desempregado!");
	    SendClientMessage(playerid, COLOR_WHITE,            "Em toda San Andreas há radares fixos multando quem andar acima da velocidade.");
	    SendClientMessage(playerid, COLOR_RED2,   			"Digite /rpglife3 e veja o Reload Virtual Life RPG na íntegra.");
	    return 1;
	}
	if(strcmp(cmd, "/rpglife3", true) == 0) {
        SendClientMessage(playerid, COLOR_RED2, 	    	"Aqui estão as NovidadeS - Parte III - do Reload Virtual Life RpG");
	    SendClientMessage(playerid, COLOR_WHITE,            "Previsão do tempo altera o plantio se chover a colheita sai mais rápido.");
	    SendClientMessage(playerid, COLOR_WHITE,            "Tuning, você pode tunar seu veiculo e salvá-lo. Basta ser o dono.");
	    SendClientMessage(playerid, COLOR_WHITE,            "Vá a uma oficina aplique os componentes desejados! E pronto está salvo!");
	    SendClientMessage(playerid, COLOR_WHITE,            "Sistema de salvamento de armas! Assim que comprar uma arma com um vendedor");
	    SendClientMessage(playerid, COLOR_WHITE,            "ela ficará salva até as munições acabarem ou serem confiscadas quando você for preso e não ter porte!");
	    SendClientMessage(playerid, COLOR_WHITE,            "Está precisando de grana mas não tem nada no banco? Faça um empréstimo, vá até o banco, selecione");
	    SendClientMessage(playerid, COLOR_WHITE,            "a linha do menu 'Fazer Empréstimo', os JUROS vão aumentando então é bom pagar a dívida logo");
	    SendClientMessage(playerid, COLOR_RED2,    			"Digite /rpglife4 e veja o Reload Virtual Life RPG na íntegra.");
	    return 1;
	}
	if(strcmp(cmd, "/rpglife4", true) == 0) {
	    SendClientMessage(playerid, COLOR_RED2, 	    	"Aqui estão as NovidadeS - Parte IV - do Reload Virtual Life RpG");
	    SendClientMessage(playerid, COLOR_WHITE,            "Agora as suas doses de maconha/cocaina/heroina e seu teor alcóolico ficam salvos.");
	    SendClientMessage(playerid, COLOR_WHITE,            "Para remover seu teor alcóolico beba guaraná e para remover suas drogas faça um");
	    SendClientMessage(playerid, COLOR_WHITE,            "tratamento especial com um Paramédico");
	    SendClientMessage(playerid, COLOR_WHITE,            "Salvamento de cores! Agora quando você pintar um veículo as cores dele ficarão salvas");
	    SendClientMessage(playerid, COLOR_WHITE,            "mesmo ele sendo um veículo do servidor/governo!");
	    SendClientMessage(playerid, COLOR_WHITE,            "Comprou uma casa mas não gostou de ficar por lá?! Arranje um seguro de imóveis com um corretor de seguros.");
	    SendClientMessage(playerid, COLOR_WHITE,            "Se você possuir seguro poderá ganhar um reembolso de 50, 75 e até 100 por cento do valor pago.");
	    SendClientMessage(playerid, COLOR_RED2, 	 		"Digite /rpglife5 e veja o Reload Virtual Life RPG na íntegra.");
		return 1;
	}
	if(strcmp(cmd, "/rpglife5", true) == 0) {
	    SendClientMessage(playerid, COLOR_RED2, 	    	"Aqui estão as NovidadeS - Parte V - do Reload Virtual Life RpG");
	    SendClientMessage(playerid, COLOR_WHITE,            "Está com dinheiro e quer comprar um veículo mas não tem nenhum vendedor no jogo?");
	    SendClientMessage(playerid, COLOR_WHITE,            "Agora aqui possui carros à venda, não só os outros jogadores podem vender veículos pra você,");
	    SendClientMessage(playerid, COLOR_WHITE,            "como você também pode ir na concecionaria e lá terá veículos à venda com diversos modelos!");
		SendClientMessage(playerid, COLOR_WHITE,            "Agora você poderá colocar sua casa em aluguel /locarminhacasa [dias]");
		SendClientMessage(playerid, COLOR_WHITE,            "quando o jogador estiver conectado no servidor os dias irão sendo diminuidos");
		SendClientMessage(playerid, COLOR_WHITE,            "Agora seu trabalho tem um horário, /meuhorario");
		SendClientMessage(playerid, COLOR_WHITE,            "Caso não esteja no seu horário de trabalho você não receberá ExPoint!");
		SendClientMessage(playerid, COLOR_RED2, 	 		"Digite /rpglife6 e veja o Reload Virtual Life RPG na íntegra.");
		return 1;
	}
	if(strcmp(cmd, "/rpglife6", true) == 0) {
	    SendClientMessage(playerid, COLOR_RED2, 	    	"Aqui estão as NovidadeS - Parte VI - do Reload Virtual Life RpG");
	    SendClientMessage(playerid, COLOR_WHITE,            "Sua saúde está baixa? Uma recomendação para aumenta-la é o Restaurante...");
	    SendClientMessage(playerid, COLOR_WHITE,            "Nele você poderá comer, beber, e também haverá sobremesa!");
	    SendClientMessage(playerid, COLOR_WHITE,            "Aqui as casas do Sweet e do Ryder possuem interiores!");
		SendClientMessage(playerid, COLOR_WHITE,            "Procurando um lazer? Que tal ir ao nosso estadio de Stunt?");
		SendClientMessage(playerid, COLOR_WHITE,            "Ele fica aberto aos domingos, lá irá ter motos adequadas para stunt.");
        SendClientMessage(playerid, COLOR_WHITE,            "Não conhece algumas localizações do Virtual Life RPG? Problema resolvido, agora você apenas precisará usar o GPS,");
		SendClientMessage(playerid, COLOR_WHITE,            "basta escolher seu local em \"/locais\" e depois digitar /GPS [ID/do/local] , apenas siga o CP no radar e pronto");
		SendClientMessage(playerid, COLOR_RED2, 	 		"Digite /rpglife7 e veja o Reload Virtual Life RPG na íntegra.");
		return 1;
	}
	if(strcmp(cmd, "/rpglife7", true) == 0) {
	    SendClientMessage(playerid, COLOR_RED2, 	    	"Aqui estão as NovidadeS - Parte VII - do Reload Virtual Life RpG");
	    SendClientMessage(playerid, COLOR_WHITE,            "Aqui sua casa ganha um próprio interior!");
	    SendClientMessage(playerid, COLOR_WHITE,            "Você poderá colocar rádio, televisão, fogão e geladeira nela");
	    SendClientMessage(playerid, COLOR_WHITE,            "Ela também poderá ser assaltada, no caso compre alarme...");
	    SendClientMessage(playerid, COLOR_WHITE,            "Cada casa possui um cofre, onde pode se guardar dinheiro, armas e drogas!");
		SendClientMessage(playerid, COLOR_WHITE,            "Saibá mais em: /interiores , /sisteletro , /infocasa , /infocofre");
		SendClientMessage(playerid, COLOR_WHITE,            "Novo entretenimento: uma balada localizada no clube Alhambra, isso mesmo,");
		SendClientMessage(playerid, COLOR_WHITE,            "lá tem músicas, petiscos, tudo para você fazer um bom proveito quando não estiver trabalhando!");
		SendClientMessage(playerid, COLOR_RED2, 	 		"Digite /rpglife8 e veja o Reload Virtual Life RPG na íntegra.");
		return 1;
	}
	if(strcmp(cmd, "/rpglife8", true) == 0){
	    SendClientMessage(playerid, COLOR_RED2, 	    	"Aqui estão as NovidadeS - Parte VIII - do Reload Virtual Life RpG");
	    SendClientMessage(playerid, COLOR_WHITE,            "Nova forma de comunicação, telefone em casa, isso mesmo, é mais um eletrodoméstico, feito para comunicações");
		SendClientMessage(playerid, COLOR_WHITE,            "à aqueles que não tem celular, mas o telefone tem contato com o celular e o celular com o telefone");
		SendClientMessage(playerid, COLOR_WHITE,            "Uma diferença é que no celular, você paga os créditos, no telefone, a conta de telefone...");
		SendClientMessage(playerid, COLOR_WHITE,            "Mais um entretenimento para você curtir: Derby! Para mais informações digite /derbyinfo");
		SendClientMessage(playerid, COLOR_WHITE,            "Precisando de dinheiro? Aqui temos uma outra fórmula temporária para você ganhar algo!");
	    SendClientMessage(playerid, COLOR_WHITE,            "As Sub Missões, são empregos temporários, ao ser anunciado que há vagas disponíveis você terá que");
	    SendClientMessage(playerid, COLOR_WHITE,            "ir ao local e digitar /aceitaremprego , você não receberá ExPoint, somente dinheiro!");
		SendClientMessage(playerid, COLOR_RED2, 	 		"Digite /rpglife9 e veja o Reload Virtual Life RPG na íntegra.");
		return 1;
	}
	if(strcmp(cmd, "/rpglife9", true) == 0){
	    SendClientMessage(playerid, COLOR_RED2, 	    	"Aqui estão as NovidadeS - Parte IX - do Reload Virtual Life RpG");
        SendClientMessage(playerid, COLOR_WHITE,            "Agora para você verificar nossas profissões digite /profissoes");
	    SendClientMessage(playerid, COLOR_WHITE,            "Você poderá enviar cartas para aqueles que possuem casa, /escrevercarta [nome do jogador] [mensagem] , para ler suas cartas");
	    SendClientMessage(playerid, COLOR_WHITE,            "digite /vercorrespondencia , e depois /jogarcartasfora para joga-las fora, você também receberá cartas do Banco, da COEVL");
	    SendClientMessage(playerid, COLOR_WHITE,            "e da ECTVL informando sua conta de luz, suas informações bancárias, sua conta de telefone, etc...");
        SendClientMessage(playerid, COLOR_WHITE,            "Agora quando o jogador não atender o telefone/celular por algum motivo, você poderá enviar mensagens pela caixa postal,");
		SendClientMessage(playerid, COLOR_WHITE,            "basta esperar o BIP e digitar, para ver suas mensagens de caixa postal digite /vercaixapostal , para excluir suas");
		SendClientMessage(playerid, COLOR_WHITE,            "mensagens da caixa postal digite /excluircaixapostal e para mudar sua mensagem de caixa postal digite /mudarcaixapostal");
		SendClientMessage(playerid, COLOR_RED2, 	 		"Digite /rpglife10 e veja o Reload Virtual Life RPG na íntegra.");
        return 1;
	}
	if(strcmp(cmd, "/rpglife10", true) == 0){
	    SendClientMessage(playerid, COLOR_RED2, 	    	"Aqui estão as NovidadeS - Parte X - do Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_WHITE,            "Quando sua conta de luz acabar a sua casa terá a luz cortada, exato! Para recupera-la você deve");
	    SendClientMessage(playerid, COLOR_WHITE,            "ir até a COEVL (Companhia Elétrica Virtual Life) e pagar a última conta com /pagarluz , enquanto a luz");
	    SendClientMessage(playerid, COLOR_WHITE,            "estiver cortada você não poderá assistir Televisão, escutar Rádio e cozinhar na sua casa...");
	    SendClientMessage(playerid, COLOR_WHITE,            "Quando sua conta de telefone acabar, seu telefone cortará, e para recupera-lo você deverá ir até a ECTVL");
	    SendClientMessage(playerid, COLOR_WHITE,            "(Empresa de Contas Telefônicas Virtual Life) e pagar a última conta...");
		SendClientMessage(playerid, COLOR_WHITE,            "Agora ao comprar um veículo você ele terá um próprio ID de identificação, irá ser feito em sequencia, exemplo:");
		SendClientMessage(playerid, COLOR_WHITE,            "1º veículo comprado = 1, 2º veículo comprado = 2, 3º veículo comprado = 3, e assim por diante...");
		SendClientMessage(playerid, COLOR_RED2, 	 		"Digite /rpglife11 e veja o Reload Virtual Life RPG na íntegra.");
        return 1;
	}
	if(strcmp(cmd, "/rpglife11", true) == 0){
	    SendClientMessage(playerid, COLOR_RED2, 	    	"Aqui estão as NovidadeS - Parte XI - do Reload Virtual Life RpG");
	    SendClientMessage(playerid, COLOR_WHITE,            "Você terá um Virtual Card que sua empresa de trabalho poderá recarregar, o Virtual Card serve para você");
	    SendClientMessage(playerid, COLOR_WHITE,            "pegar um ônibus por conta dela, ao entrar no ônibus, se seus créditos no cartão forem maior que um");
	    SendClientMessage(playerid, COLOR_WHITE,            "você digitará /usarcard para usar ou /naousarcard para não usar!");
		SendClientMessage(playerid, COLOR_RED2, 	 		"Reload Virtual Life RPG mais que um RPG, UMA VIDA!");
        return 1;
	}

	if(strcmp(cmd, "/leis1", true) == 0) {
	    SendClientMessage(playerid, COLOR_RED2, "  LEIS TRÂNSITO - Virtual Life RpG PARTE I -");
        SendClientMessage(playerid, COLOR_JUIZ,	"  1º Proibido dirigir sem Carteira correspondente.");
        SendClientMessage(playerid, COLOR_JUIZ, "  2º Proibido dirigir em alta velocidade.");
        SendClientMessage(playerid, COLOR_JUIZ, "  3º Proibido ultrapassagens perigosos.");
        SendClientMessage(playerid, COLOR_JUIZ, "  4º Para o carro quando a polícia mandar.");
    	SendClientMessage(playerid, COLOR_JUIZ, "  5º Não destruir o patrimônio público.");
        SendClientMessage(playerid, COLOR_JUIZ, "  6º Respeitar os outros Motoristas.");
        SendClientMessage(playerid, COLOR_JUIZ, "  7º Andar no limite de velocidade. 120km/h.");
        SendClientMessage(playerid, COLOR_RED2, "  Veja as outras leis de trânsito: /leis2.");
		return 1;
	}

	if(strcmp(cmd, "/leis2", true) == 0) {
	    SendClientMessage(playerid, COLOR_RED2, "  LEIS TRÂNSITO - Virtual Life RpG PARTE II -");
        SendClientMessage(playerid, COLOR_JUIZ,	"  8º Proibido estacionar em rua/calçadas/lojas.");
        SendClientMessage(playerid, COLOR_JUIZ, "  9º Não dirigir em veículos que não seje seu. INCLUINDO OS DO SERVIDOR.");
        SendClientMessage(playerid, COLOR_JUIZ, "  10º Proibido ultrapassagens perigosos.");
        SendClientMessage(playerid, COLOR_JUIZ, "  11º Não ingerir nenhum intorpecente ou bebida alcoolica se for dirigir.");
		SendClientMessage(playerid, COLOR_JUIZ, "  12º Não pilotar o avião/helicoptero em baixa altitude.");
		SendClientMessage(playerid, COLOR_JUIZ, "  13º Pousar avião/helicoptero em locais proibidos. Local: Aeroporto.");
        SendClientMessage(playerid, COLOR_RED2, "  Veja as leis CIVIS digite: /leis3.");
		return 1;
	}

	if(strcmp(cmd, "/leis3", true) == 0) {
	    SendClientMessage(playerid, COLOR_RED2, "  LEIS CIVIL - Virtual Life RpG PARTE I -");
        SendClientMessage(playerid, COLOR_JUIZ,	"  1º Não destruir o patrimônio público.");
        SendClientMessage(playerid, COLOR_JUIZ, "  2º Não dirigir em veículos que não seje seu. INCLUINDO OS DO SERVIDOR.");
		SendClientMessage(playerid, COLOR_JUIZ, "  3º Portar drogas.");
        SendClientMessage(playerid, COLOR_JUIZ, "  4º Proibido andar portando armas. SEM TER O PORTE DE ARMAS.");
		SendClientMessage(playerid, COLOR_JUIZ, "  5º Rejeitar a solicitação de um Oficial da Polícia.");
		SendClientMessage(playerid, COLOR_JUIZ, "  6º Respeitar os Jogadores.");
		SendClientMessage(playerid, COLOR_JUIZ, "  7º Não andar a pé nas pistas, ande na calçada.");
		SendClientMessage(playerid, COLOR_JUIZ, "  8º Não agredir outro jogador.");
		SendClientMessage(playerid, COLOR_RED2, "  Essas são as LEIS CIVIS E DE TRÂNSITO do Virtual Life Rpg.");
		return 1;
	}

	if(strcmp(cmd, "/policia1", true) == 0) {
	    SendClientMessage(playerid, COLOR_RED2, 	"  LEIS DA POLÍCIA - Virtual Life RpG PARTE I -");
        SendClientMessage(playerid, COLOR_DELEGADO,	"  1º Abordar a pessoa com educação, sem exibir armas!");
        SendClientMessage(playerid, COLOR_DELEGADO, "  2º Pedir a documentação com educação.");
		SendClientMessage(playerid, COLOR_DELEGADO, "  3º Não ligar a sirene da viatura sem que nada esteje ocorrendo.");
        SendClientMessage(playerid, COLOR_DELEGADO, "  4º Proibido estacionar a viatura em calçadas, ruas, em frente a casas");
		SendClientMessage(playerid, COLOR_DELEGADO, "     se não for uma emergência.");
		SendClientMessage(playerid, COLOR_DELEGADO, "  6º O uso de armas somente se FOR necessário, quando ele atirar ou ameaçar sua integridade.");
		SendClientMessage(playerid, COLOR_RED2, 	"  Veja a 2ª parte das leis da polícia: /policia2.");
		return 1;
	}

	if(strcmp(cmd, "/policia2", true) == 0) {
	    SendClientMessage(playerid, COLOR_RED2, 	"  LEIS DA POLÍCIA - Virtual Life RpG PARTE 2 -");
        SendClientMessage(playerid, COLOR_DELEGADO,	"  7º Andar no meio da faixa com velocidade abaixo de 120 km/h.");
        SendClientMessage(playerid, COLOR_DELEGADO, "  8º Não dirigir embriagado nas viaturas.");
		SendClientMessage(playerid, COLOR_DELEGADO, "  9º IMPORTANTE! Apenas Delegado pode negar, você tem que obedecer ao outro OFICIAL.");
        SendClientMessage(playerid, COLOR_DELEGADO, "  	  Caso ele mande você parar e dar a documentação! Seja da Swat ou não. tem que obedecer!");
		SendClientMessage(playerid, COLOR_DELEGADO, "  10º Perseguir, multar, prender seguindo as regras dos comandos!");
		SendClientMessage(playerid, COLOR_RED2, 	"  Caso um oficial não respeite essas 10 regras, reporte, tire ss, ou peça a prisao dele por outro policial.");
		return 1;
	}

	if(strcmp(cmd, "/derbyinfo",true) == 0){
	    SendClientMessage(playerid, COLOR_RED2,                 "Derby:");
	    SendClientMessage(playerid, COLOR_WHITE,                "O derby é um evento onde você receberá um Blooding Blanger e terá que ir derrotanto seus oponentes...");
	    SendClientMessage(playerid, COLOR_WHITE,                "Ao sair do veículo, você será desclassificado, o último jogador que sair será o vencedor e ganhará um prêmio!");
	    SendClientMessage(playerid, COLOR_WHITE,                "Para entrar no Derby você terá que esperar o estádio organizar um e digitar /participar para se inscrever, logo em seguida");
	    SendClientMessage(playerid, COLOR_WHITE,                "você terá que ir até o estádio oficializar sua participação, se houver menos de 3 participantes o Derby será CANCELADO!");
	    SendClientMessage(playerid, COLOR_WHITE,                "O máximo de participantes é 10, ou seja, o número de veículos disponíveis... Faça bom proveito!");
		return 1;
	}
	if(strcmp(cmd,"/slotarmas",true) == 0){
		SendClientMessage(playerid, COLOR_RED2, 				"ARMAS & SLOTS:");
		SendClientMessage(playerid, COLOR_WHITE,                "Armas de SLOT 2: Desert Eagle, Pistol 9mm e Pistol 9mm com silenciador - $5 cada munição.");
		SendClientMessage(playerid, COLOR_WHITE,                "Armas de SLOT 3: Shotgun, Combat Shotgun e Sawnoff Shotgun - $40 cada munição");
		SendClientMessage(playerid, COLOR_WHITE,                "Armas de SLOT 4: MP5, Tec9 e Micro Uzi (Mac 10) - $10 cada munição");
		SendClientMessage(playerid, COLOR_WHITE,                "Armas de SLOT 5: AK47 e M4 - $30 cada munição");
		SendClientMessage(playerid, COLOR_WHITE,                "Armas de SLOT 6: Sniper Rifle e Country Rifle - $50 cada munição");
		SendClientMessage(playerid, COLOR_PALHA, 				"Decreto nº1980/2008 SLOTS de armas e preços - COP SWAT: Rafael. Los Santos/San Fierro-SA");
		return 1;
	}
    if(strcmp(cmd, "/armas", true) == 0) {
        SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS,	"Armas do Reload Virtual Life RpG - Parte I -");
        SendClientMessage(playerid, COLOR_MECANICO,				"Descrição: ID - Nome da Arma - Valor");
        SendClientMessage(playerid, COLOR_WHITE,				"1 - Soco Inglês - $500 | 2 - Taco de Golfe - $600 	  | 3 - Cacetete - $650");
        SendClientMessage(playerid, COLOR_WHITE,				"4 - Faca - $750 		| 5 - Taco de Baseball - $350 | 6 - Shovel - $400");
		SendClientMessage(playerid, COLOR_WHITE,				"7 - Taco de Sinuca - $300 | 8 - Katana - $800 | 9 - Motoserra - $1000");
		SendClientMessage(playerid, COLOR_WHITE,				"10 - Vibrador roxo - $100 | 11 - Vibrador branco grande - $100 | 12 - Vibrador branco médio - $100");
		SendClientMessage(playerid, COLOR_WHITE,				"13 - Vibrador prata pequeno - $100 | 14 - Flores - $100 | 15 - Bengala - $150 | 16 - Granada - $300");
        SendClientMessage(playerid, COLOR_WHITE,				"17 - Gas - $300 | - 18 ao 21 - armas indisponiveis - | 22 - Pistola - $600 | 23 - Pistola com Silenciador - $1000");
        SendClientMessage(playerid, COLOR_COP_RODOVIARIO,		"/armas2 - Lista II do Reload Virtual Life RpG");
        return 1;
    }
    if(strcmp(cmd, "/armas2", true) == 0) {
        SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS,	"Armas do Reload Virtual Life RpG - Parte II -");
        SendClientMessage(playerid, COLOR_MECANICO,				"Descrição: ID - Nome da Arma - Valor");
		SendClientMessage(playerid, COLOR_WHITE,				"24 - Desert Eagle - $3000 | 25 - Escopeta Calibre 12 - $1800 | 26 - Escopeta de Cano Serrado - $6000");
		SendClientMessage(playerid, COLOR_WHITE,				"27 - Escopeta de Combate - $7500 | 28 - Micro Uzi - $8000 | 29 - MP5 - $5500");
        SendClientMessage(playerid, COLOR_WHITE,				"30 - AK47 - $7500 | 31 - M4 - $9000 | 32 - Tec9 - $8000 | 33 - Country Rifle - 4000");
        SendClientMessage(playerid, COLOR_COP_RODOVIARIO,       "Fim da Lista das ARMAS do do Reload Virtual Life RpG");
        return 1;
	}
	if(strcmp(cmd,"/sistskin",true) == 0) {
		SendClientMessage(playerid, COLOR_RED2,                 "Virtual Life RPG - Sistema de skins:");
		SendClientMessage(playerid, COLOR_WHITE,                "Agora você comprará sua skin na loja, para saber a loja onde é vendida use /skininfo [ID/da/skin]");
		SendClientMessage(playerid, COLOR_WHITE,                "Cada skin tem seu próprio preço também, skins de trabalho não são vendidas, você pode usar a do seu digitando /skintrabalho");
		SendClientMessage(playerid, COLOR_WHITE,                "Aqui vão algumas estatísticas sobre as lojas:");
		SendClientMessage(playerid, COLOR_WHITE,                "Binco: Loja de skins casuais;");
		SendClientMessage(playerid, COLOR_WHITE,                "Sub Urban: Loja de skins de gangues, traficantes e pobres;");
		SendClientMessage(playerid, COLOR_WHITE,                "Pro Laps: Loja de skins esportivas;");
		SendClientMessage(playerid, COLOR_WHITE,                "Victim: Loja de skins diversas;");
		SendClientMessage(playerid, COLOR_WHITE,                "Didier Sachs: Loja de skins formais;");
		SendClientMessage(playerid, COLOR_RED2,                 "Virtual Life RPG mais que um RPG, UMA VIDA!");
		return 1;
	}
	if(strcmp(cmd,"/sisthorario",true) == 0) {
	    SendClientMessage(playerid, COLOR_RED2, 				"Sistema de horário do Virtual Life RPG:");
	    SendClientMessage(playerid, COLOR_WHITE, 				"Agora sua profissão tem um horário de trabalho, veja-o em /meuhorario.");
	    SendClientMessage(playerid, COLOR_WHITE, 				"Caso esteja fora de seu horário de trabalho, você não ganhará ExPoint quando trabalhar...");
	    SendClientMessage(playerid, COLOR_WHITE, 				"Mas caso esteja no seu horário, você ganhará normalmente.");
	    SendClientMessage(playerid, COLOR_WHITE, 				"Fizemos isso com o objetivo de que você aproveite mais os lazeres daqui!");
	    SendClientMessage(playerid, COLOR_RED2, 				"Reload Virtual Life RPG mais que um RPG, UMA VIDA!");
		return 1;
	}
	if(strcmp(cmd, "/banco", true) == 0) {
        SendClientMessage(playerid, COLOR_RED2, 				"Sistema de Banco do Reload Virtual Life RpG.");
        SendClientMessage(playerid, COLOR_WHITE, 				"Automático, ao entrar no banco com o comando /meubanco você entrará na fila e logo em seguida.");
        SendClientMessage(playerid, COLOR_WHITE, 				"Aparecerá um menu com a opção a ser escolhida. Digite o valor no chat esse será o valor.");
        SendClientMessage(playerid, COLOR_WHITE, 				"Depositado ou Sacado.");
		SendClientMessage(playerid, COLOR_WHITE, 				"Também no banco você pode fazer empréstimo com o gerente. Sendo disponível um valor X.");
        SendClientMessage(playerid, COLOR_WHITE, 				"O pagamento é obrigatório sendo depois de alguns dias a retomada de bens ou a retirada da conta sem aviso prévio");
        SendClientMessage(playerid, COLOR_RED2,  				"Os Bancos estão marcados no Mapa com um cifrão $, são 4 Bancos em Los Santos");
		return 1;
	}
	if(strcmp(cmd,"/negocios",true) == 0){
        SendClientMessage(playerid, COLOR_RED2, 			"Sistema de negócios do Virtual Life RpG:");
        SendClientMessage(playerid, COLOR_WHITE, 			"Nosso sistema de negócios é um sistema que faz com que você comece com uma propriedade");
        SendClientMessage(playerid, COLOR_WHITE,        	"com poucos lucros e a evolua contratando/demitindo funcionários, nomeando sócios");
        SendClientMessage(playerid, COLOR_WHITE,        	"investindo dinheiro nela, e até mesmo você pode trabalhar nela!");
        SendClientMessage(playerid, COLOR_WHITE,        	"Cada propriedade tem seu modo de ganhar lucro e prejuízo!");
		SendClientMessage(playerid, COLOR_WHITE,        	"O máximo de funcionários que você poderá contratar é 7.");
		SendClientMessage(playerid, COLOR_WHITE,            "Para comprar uma propriedade vá até a corretora de propriedades!");
        SendClientMessage(playerid, COLOR_WHITE,        	"Para ver as propriedades e informações sobre elas digite /propriedades");
        SendClientMessage(playerid, COLOR_WHITE,        	"Para ver os comandos de negócios digite /negocioscmds");
        return 1;
	}
	if(strcmp(cmd,"/negocioscmds",true) == 0){
	    SendClientMessage(playerid, COLOR_RED2, 			"Comandos de negócios do Reload Virtual Life RpG - Parte I");
	    SendClientMessage(playerid, COLOR_WHITE,        	"/propriedades : Vê as propriedades e as informações delas!");
	    SendClientMessage(playerid, COLOR_WHITE,        	"/propinfo [propriedade] : Ver as informações de uma propriedade (Dono, Funcionários, etc...)");
	    SendClientMessage(playerid, COLOR_WHITE,            "/anunciaremprego [id/do/jornalista] [id/da/propriedade] [salario] [profissao/a/oferecer] : Anuncia no Jornal uma Vaga de Emprego na empresa");
	    SendClientMessage(playerid, COLOR_WHITE,        	"/comprarpropriedadedodono [id] [propriedade] [valor] : Compra uma propriedade de alguém.");
        SendClientMessage(playerid, COLOR_WHITE,			"/pedirdemissao [propriedade] : Para pedir demissão de uma propriedade.");
        SendClientMessage(playerid, COLOR_WHITE,         	"/resultadoprop [propriedade] : Vê os resultados (Prejuízo e Lucro) das semanas retrasada e passada de uma propriedade.");
		SendClientMessage(playerid, COLOR_WHITE,            "/medesnomearsocio [propriedade] : Desnomear-se sócio de uma propriedade.");
		SendClientMessage(playerid, COLOR_WHITE,            "/investir [propriedade] [quantidade] : Investir dinheiro em sua propriedade.");
		SendClientMessage(playerid, COLOR_RED2,         	"/negocioscmds2 : Ver mais comandos do sistema de negócios");
	    return 1;
	}
	if(strcmp(cmd,"/negocioscmds2",true) == 0){
	    SendClientMessage(playerid, COLOR_RED2, 			"Comandos de negócios do Reload Virtual Life RpG - Parte I");
	    SendClientMessage(playerid, COLOR_WHITE,        	"/contratar [id] [propriedade] : Contratar um jogador.");
	    SendClientMessage(playerid, COLOR_WHITE,        	"/demitir [id] [propriedade] : Demitir um jogador.");
	    SendClientMessage(playerid, COLOR_WHITE,            "/nomearsocio [id] [propriedade] : Nomear um sócio na sua propriedade.");
	    SendClientMessage(playerid, COLOR_WHITE,        	"/desnomearsocio [id] [propriedade] : Desnomear um sócio da sua propriedade.");
        SendClientMessage(playerid, COLOR_WHITE,			"/aumento [id] [quantidade] [propriedade] : Dar aumento para um funcionário.");
        SendClientMessage(playerid, COLOR_WHITE,         	"/tiraraumento [id] [quantidade] [propriedade] : Tirar uma parte do aumento de um funcionário.");
		SendClientMessage(playerid, COLOR_WHITE,            "/venderpropriedade [propriedade] : Vender uma propriedade que pertence a você.");
		SendClientMessage(playerid, COLOR_RED2,         	"Esses são os comandos de negócios do Reload Virtual Life RpG.");
	    return 1;
	}
	if(strcmp(cmd,"/propriedades",true) == 0){
	    SendClientMessage(playerid, COLOR_RED2,         	"Propriedades do Reload Virtual Life RpG:");
	    SendClientMessage(playerid, COLOR_WHITE,        	"0 - Pizzaria (Custo: $90000) : Para ver as informações digite /proppizzaria");
	    SendClientMessage(playerid, COLOR_WHITE,        	"1 - Yellow's'Taxi (Custo: $120000) : Para ver as informações digite /proptaxi");
	    SendClientMessage(playerid, COLOR_WHITE,        	"2 - LuxLimosine (Custo: $140000) : Para ver as informações digite /proplimosine");
	    SendClientMessage(playerid, COLOR_WHITE,        	"3 - Corretora de seguros  (Custo: $180000) : Para ver as informações digite /propseguros");
		SendClientMessage(playerid, COLOR_WHITE,            "4 - SecurityLife (Custo: $110000) : Para ver as informações digite /propsecurity");
		SendClientMessage(playerid, COLOR_WHITE,            "5 - Ammu-Nation (Custo: $150000) : Para ver as informações digite /propweapon");
		SendClientMessage(playerid, COLOR_WHITE,            "6 - Boate de strip (Custo: $170000) : Para ver as informações digite /propboate");
		SendClientMessage(playerid, COLOR_WHITE,            "7 - Posto (Custo: $210000) : Para ver as informações digite /propgas");
		SendClientMessage(playerid, COLOR_RED2,         	"Para mais propriedades, escreve /propriedades2");
		return 1;
	}
	if(strcmp(cmd,"/propriedades2",true) == 0){
	    SendClientMessage(playerid, COLOR_RED2,         	"Propriedades do Reload Virtual Life RpG: Parte 2");
	    SendClientMessage(playerid, COLOR_WHITE,        	"8 - Bar (Custo: $80000) : Para ver as informações digite /propbar");
	    SendClientMessage(playerid, COLOR_WHITE,        	"9 - Pay'n'Spray (Custo: $200000) : Para ver as informações digite /propmecanico");
        SendClientMessage(playerid, COLOR_WHITE,        	"10 - Lixão (Custo: $75000) : Para ver as informações digite /proplixao");
        SendClientMessage(playerid, COLOR_WHITE,        	"11 - Fazenda (Custo: $160000) : Para ver as informações digite /propfazenda");
		SendClientMessage(playerid, COLOR_WHITE,            "12 - COEVL (Custo: $180000) : Para ver as informações digite /propluz");
        SendClientMessage(playerid, COLOR_WHITE,            "13 - ECTVL (Custo: $160000) : Para ver as informações digite /proptelefone");
        SendClientMessage(playerid, COLOR_WHITE,            "14 - Concecionária (Custo: $200000) : Para ver as informações digite /propcarros");
        SendClientMessage(playerid, COLOR_WHITE,            "15 - Corretora de imóveis (Custo: $200000) : Para ver as informações digite /propimoveis");
        SendClientMessage(playerid, COLOR_WHITE,            "16 - Cooperativa de pesca (Custo: $140000) : Para ver as informações digite /proppesca");
		return 1;
	}
	if(strcmp(cmd,"/proppizzaria",true) == 0){
	    SendClientMessage(playerid, COLOR_RED2,         	"Pizzaria:");
	    SendClientMessage(playerid, COLOR_WHITE,        	"A pizzaria é uma propriedade onde você contrata entregadores de pizza");
	    SendClientMessage(playerid, COLOR_WHITE,        	"LUCRO = As entregas de pizzas automáticas e não automáticas");
	    SendClientMessage(playerid, COLOR_WHITE,        	"PREJUÍZO = Sálario dos funcionários + os aumentos que você dar para eles");
		return 1;
	}
	if(strcmp(cmd,"/proptaxi",true) == 0){
	    SendClientMessage(playerid, COLOR_RED2,         	"Yellow's'Taxi:");
		SendClientMessage(playerid, COLOR_WHITE,        	"A Yellow's'Taxi é uma propriedade onde você contrata taxistas/mototaxistas/taxistas aéreos");
		SendClientMessage(playerid, COLOR_WHITE,        	"LUCRO = Passageiros dos taxistas que chegarem ao destino");
		SendClientMessage(playerid, COLOR_WHITE,        	"PREJUÍZO = Salário dos funcionários + os aumentos que você dar para eles + energia que os GPS gastam");
		return 1;
	}
	if(strcmp(cmd,"/proplimosine",true) == 0){
	    SendClientMessage(playerid, COLOR_RED2,         	"LuxLimosine:");
	    SendClientMessage(playerid, COLOR_WHITE,        	"A LuxLimosine é uma propriedade onde você contrata motoristas particulares");
		SendClientMessage(playerid, COLOR_WHITE,        	"LUCRO = Limosines entregues em perfeitos estados (sem amassos, gas completo, etc...)!");
		SendClientMessage(playerid, COLOR_WHITE,        	"PREJUÍZO = Salário dos funcionários + os aumentos que você dar para eles + gas/consertos/ das limosines");
		SendClientMessage(playerid, COLOR_WHITE,        	"O seu lucro é o que você gasta com o prejuízo portanto essa é uma propriedade que você precisa contratar ótimos motoristas!");
		SendClientMessage(playerid, COLOR_WHITE,        	"Não contrate motoristas que amassem as limosines, pois estes lhe aumentam o prejuízo!");
		return 1;
	}
	if(strcmp(cmd,"/propseguros",true) == 0){
	    SendClientMessage(playerid, COLOR_RED2,         	"Corretora de seguros:");
	    SendClientMessage(playerid, COLOR_WHITE,        	"A corretora de seguros é uma propriedade onde você contrata corretores de seguro");
	    SendClientMessage(playerid, COLOR_WHITE,        	"LUCRO = O dinheiro e as dívidas dos seguros vendidos");
	    SendClientMessage(playerid, COLOR_WHITE,        	"PREJUÍZO = Salário dos funcionários + os aumentos que você dar para eles + os gastos do seguros por ex:");
		SendClientMessage(playerid, COLOR_WHITE,        	"Seguro de vida = Metade do dinheiro do tratamento do outro jogador, afinal a outra metade é por conta do governo");
	    SendClientMessage(playerid, COLOR_WHITE,        	"Seguro de imóvel = Uma pequena dívida para a corretora pois o seu trabalho é governamental");
	    SendClientMessage(playerid, COLOR_WHITE,        	"Seguro de veículos = Uma pequena taxa para o conserto e a devolução do veículo ao dono");
		return 1;
	}
	if(strcmp(cmd,"/propsecurity",true) == 0){
	    SendClientMessage(playerid, COLOR_RED2,         	"SecurityLife:");
	    SendClientMessage(playerid, COLOR_WHITE,        	"A SecurityLife é uma propriedade onde você contrata seguranças/transportadores de valores");
	    SendClientMessage(playerid, COLOR_WHITE,        	"LUCRO = Os malotes transportados e dinheiro dos contratos dos seguranças.");
	    SendClientMessage(playerid, COLOR_WHITE,        	"PREJUÍZO = Salário dos funcionários + os aumentos que você dar para eles");
		return 1;
	}
	if(strcmp(cmd,"/propweapon",true) == 0){
	    SendClientMessage(playerid, COLOR_RED2,             "Ammu-Nation:");
	    SendClientMessage(playerid, COLOR_WHITE,        	"A Ammu-Nation é uma propriedade onde você contrata vendedores de armas");
	    SendClientMessage(playerid, COLOR_WHITE,        	"LUCRO = Venda de armas, coletes e camuflagens.");
	    SendClientMessage(playerid, COLOR_WHITE,        	"PREJUÍZO = Salário dos funcionários + os aumentos que você dar para eles");
		return 1;
	}
	if(strcmp(cmd,"/propboate",true) == 0){
	    SendClientMessage(playerid, COLOR_RED2,             "Boate de strip:");
	    SendClientMessage(playerid, COLOR_WHITE,        	"A Boate de strip é uma propriedade onde você contrata prostitutas");
	    SendClientMessage(playerid, COLOR_WHITE,        	"LUCRO = Strip-teases na boate, sexos na cama.");
	    SendClientMessage(playerid, COLOR_WHITE,        	"PREJUÍZO = Salário dos funcionários + os aumentos que você dar para eles");
		return 1;
	}
	if(strcmp(cmd,"/propgas",true) == 0){
	    SendClientMessage(playerid, COLOR_RED2,             "Posto:");
	    SendClientMessage(playerid, COLOR_WHITE,        	"O Posto é uma propriedade onde você contrata frentistas");
	    SendClientMessage(playerid, COLOR_WHITE,        	"LUCRO = Abastecimento/Venda de gasolina.");
	    SendClientMessage(playerid, COLOR_WHITE,        	"PREJUÍZO = Salário dos funcionários + os aumentos que você dar para eles");
		return 1;
	}
	if(strcmp(cmd,"/propbar",true) == 0){
	    SendClientMessage(playerid, COLOR_RED2,             "Bar:");
	    SendClientMessage(playerid, COLOR_WHITE,        	"O Bar é uma propriedade onde você contrata barmans");
	    SendClientMessage(playerid, COLOR_WHITE,        	"LUCRO = Venda de bebidas e lanches dos bares e barmans.");
	    SendClientMessage(playerid, COLOR_WHITE,        	"PREJUÍZO = Salário dos funcionários + os aumentos que você dar para eles");
		return 1;
	}
	if(strcmp(cmd,"/propmecanico",true) == 0){
	    SendClientMessage(playerid, COLOR_RED2,             "Pay'n'Spray:");
	    SendClientMessage(playerid, COLOR_WHITE,        	"A Pay'n'Spray é uma propriedade onde você contrata mecânicos");
	    SendClientMessage(playerid, COLOR_WHITE,        	"LUCRO = Consertos, pinturas e mudanças de placas da loja de customização e aplicados(as) por um mecânico");
	    SendClientMessage(playerid, COLOR_WHITE,        	"PREJUÍZO = Salário dos funcionários + os aumentos que você dar para eles");
		return 1;
	}
	if(strcmp(cmd,"/proplixao",true) == 0){
	    SendClientMessage(playerid, COLOR_RED2,         	"Lixão:");
	    SendClientMessage(playerid, COLOR_WHITE,        	"O Lixão é uma propriedade onde você contrata lixeiros");
	    SendClientMessage(playerid, COLOR_WHITE,        	"LUCRO = Depósito de lixos coletados");
	    SendClientMessage(playerid, COLOR_WHITE,        	"PREJUÍZO = Salário dos funcionários + os aumentos que você dar para eles");
		return 1;
	}
	if(strcmp(cmd,"/propfazenda",true) == 0){
	    SendClientMessage(playerid, COLOR_RED2,         	"Fazenda:");
	    SendClientMessage(playerid, COLOR_WHITE,        	"A Fazenda é uma propriedade onde você contrata agricultores");
	    SendClientMessage(playerid, COLOR_WHITE,        	"LUCRO = Vendas de leite e milho");
	    SendClientMessage(playerid, COLOR_WHITE,        	"PREJUÍZO = Salário dos funcionários + os aumentos que você dar para eles");
		return 1;
	}
    if(strcmp(cmd,"/propcarros",true) == 0){
    	SendClientMessage(playerid, COLOR_RED2,             "Concecionária:");
    	SendClientMessage(playerid, COLOR_WHITE,            "A Concecionária é uma propriedade onde você contrata vendedores de veículo!");
    	SendClientMessage(playerid, COLOR_WHITE,            "LUCRO = Carros vendidos na concecionária e por seus funcionários");
    	SendClientMessage(playerid, COLOR_WHITE,            "PREJUÍZO = Salário dos funcionários + pagamento de consertos dos veículos da concecionária + pagamento para empresas de carros semanal");
    	SendClientMessage(playerid, COLOR_WHITE,            "Para ver as empresas de carros existentes digite /empresascarros");
   	 	return 1;
	}
	if(strcmp(cmd,"/propimoveis",true) == 0){
    	SendClientMessage(playerid, COLOR_RED2,             "Corretora de imóveis:");
    	SendClientMessage(playerid, COLOR_WHITE,            "A COEVL é uma propriedade onde você contrata corretores de imóveis!");
    	SendClientMessage(playerid, COLOR_WHITE,            "LUCRO = Imóveis vendidos por seus funcionários e hospedagens de hotéis");
    	SendClientMessage(playerid, COLOR_WHITE,            "PREJUÍZO = Salário dos funcionários + pagamento para os hotéis semanal");
    	return 1;
	}
    if(strcmp(cmd,"/propluz",true) == 0){
    	SendClientMessage(playerid, COLOR_RED2,             "COEVL:");
    	SendClientMessage(playerid, COLOR_WHITE,            "A COEVL é uma propriedade onde você não precisa contratar ninguém!");
    	SendClientMessage(playerid, COLOR_WHITE,            "LUCRO = Contas de luz que os jogadores pagarem");
    	SendClientMessage(playerid, COLOR_WHITE,            "PREJUÍZO = Quedas de luz (pagamento aos utilizadores) + pagamento do conserto");
    	SendClientMessage(playerid, COLOR_WHITE,            "Se você for dono/sócio dessa propriedade poderá liberar a luz da casa dos jogadores basta digitar /liberarluz [id]");
    	return 1;
	}
	if(strcmp(cmd,"/proptelefone",true) == 0){
	    SendClientMessage(playerid, COLOR_RED2,             "ECTVL:");
	    SendClientMessage(playerid, COLOR_WHITE,            "A ECTVL é uma propriedade onde você não precisa contratar ninguém!");
	    SendClientMessage(playerid, COLOR_WHITE,            "LUCRO = Contas de telefone que os jogadores pagarem");
	    SendClientMessage(playerid, COLOR_WHITE,            "PREJUÍZO = Quedas de linha telefônica (pagamento aos utilizadores) + pagamento do conserto");
	    SendClientMessage(playerid, COLOR_WHITE,            "Se você for dono/sócio dessa propriedade poderá liberar o telefone da casa dos jogadores basta digitar /liberartelefone [id]");
   	 	return 1;
	}
	if(strcmp(cmd, "/proppesca", true) == 0) {
    	SendClientMessage(playerid, COLOR_RED2,             "Cooperativa de pesca:");
	    SendClientMessage(playerid, COLOR_WHITE,            "A Cooperativa de pesca é uma propriedade onde você contrata pescadores!");
	    SendClientMessage(playerid, COLOR_WHITE,            "LUCRO = Peixes pescados, prejuízos recebidos e iscas compradas por jogadores de outra profissão");
	    SendClientMessage(playerid, COLOR_WHITE,            "PREJUÍZO = Salário dos funcionários + compra de peixe dos jogadores de outra profissão");
   	 	return 1;
	}
	if(strcmp(cmd, "/empresascarros", true) == 0) {
    	SendClientMessage(playerid, COLOR_RED2,             "Numeração - Nome - (Preço mínimo até Preço máximo):");
    	SendClientMessage(playerid, COLOR_WHITE,            "1 - Life's'autos ($5000 até $7000)");
    	SendClientMessage(playerid, COLOR_WHITE,            "2 - Virtual Car & Cia ($3500 até $4000)");
    	SendClientMessage(playerid, COLOR_WHITE,            "3 - Your Life's' Car ($2000 até $3000");
    	return 1;
	}
	if(strcmp(cmd, "/jornalinfo", true) == 0) {
	    SendClientMessage(playerid, COLOR_RED2,             "Informações de jornal:");
	    SendClientMessage(playerid, COLOR_WHITE,            "/criarjornal [titulo do jornal] : Criar seu jornal");
		SendClientMessage(playerid, COLOR_WHITE,            "/escreverjornal [caderno] [linha] [texto] : Escrever no jornal.");
		SendClientMessage(playerid, COLOR_WHITE,            "/lerjornal [titulo do jornal] [caderno] : Ler um jornal.");
		SendClientMessage(playerid, COLOR_WHITE,            "/excluirjornal : Excluir seu jornal.");
		SendClientMessage(playerid, COLOR_RED2,             "Para ver os cadernos digite /cadernos");
		return 1;
	}
	if(strcmp(cmd, "/meuhorario", true) == 0) {
	    new string[256];
	    SendClientMessage(playerid, COLOR_RED2, "Seu horário:");
		if(HorarioTrabalho[Profissao[playerid]][2] != HorarioTrabalho[Profissao[playerid]][3]){
	    	format(string,sizeof(string),"Segunda Feira: Das %d às %d",HorarioTrabalho[Profissao[playerid]][2],HorarioTrabalho[Profissao[playerid]][3]);
		}
		else{
	    	format(string,sizeof(string),"Segunda Feira: Dia de folga");
		}
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    if(HorarioTrabalho[Profissao[playerid]][4] != HorarioTrabalho[Profissao[playerid]][5]){
	    	format(string,sizeof(string),"Terça Feira: Das %d às %d",HorarioTrabalho[Profissao[playerid]][4],HorarioTrabalho[Profissao[playerid]][5]);
		}
		else{
		    format(string,sizeof(string),"Terça Feira: Dia de folga");
		}
		SendClientMessage(playerid, COLOR_WHITE, string);
		if(HorarioTrabalho[Profissao[playerid]][6] != HorarioTrabalho[Profissao[playerid]][7]){
			format(string,sizeof(string),"Quarta Feira: Das %d às %d",HorarioTrabalho[Profissao[playerid]][6],HorarioTrabalho[Profissao[playerid]][7]);
		}
		else{
		    format(string,sizeof(string),"Quarta Feira: Dia de folga");
		}
		SendClientMessage(playerid, COLOR_WHITE, string);
		if(HorarioTrabalho[Profissao[playerid]][8] != HorarioTrabalho[Profissao[playerid]][9]){
 			format(string,sizeof(string),"Quinta Feira: Das %d às %d",HorarioTrabalho[Profissao[playerid]][8],HorarioTrabalho[Profissao[playerid]][9]);
		}
		else{
		    format(string,sizeof(string),"Quinta Feira: Dia de folga");
		}
		SendClientMessage(playerid, COLOR_WHITE, string);
        if(HorarioTrabalho[Profissao[playerid]][10] != HorarioTrabalho[Profissao[playerid]][11]){
	    	format(string,sizeof(string),"Sexta Feira: Das %d às %d",HorarioTrabalho[Profissao[playerid]][10],HorarioTrabalho[Profissao[playerid]][11]);
		}
		else{
            format(string,sizeof(string),"Sexta Feira: Dia de folga");
		}
		SendClientMessage(playerid, COLOR_WHITE, string);
		if(HorarioTrabalho[Profissao[playerid]][12] != HorarioTrabalho[Profissao[playerid]][13]){
	    	format(string,sizeof(string),"Sábado: Das %d às %d",HorarioTrabalho[Profissao[playerid]][12],HorarioTrabalho[Profissao[playerid]][13]);
		}
		else{
	    	format(string,sizeof(string),"Sábado: Dia de folga");
		}
		SendClientMessage(playerid, COLOR_WHITE, string);
		if(HorarioTrabalho[Profissao[playerid]][0] != HorarioTrabalho[Profissao[playerid]][1]){
	    	format(string,sizeof(string),"Domingo: Das %d às %d",HorarioTrabalho[Profissao[playerid]][0],HorarioTrabalho[Profissao[playerid]][1]);
		}
		else{
		    format(string,sizeof(string),"Domingo: Dia de folga");
		}
		SendClientMessage(playerid, COLOR_WHITE, string);
	    return 1;
	}
	if(strcmp(cmd, "/meuskin", true) == 0) {
	    SendClientMessage(playerid, COLOR_CONTRABANDISTA, 	"ATENÇÃO:");
	    SendClientMessage(playerid, COLOR_WHITE,            "Nosso sistema de skins mudou, para obter informações digite /sistskin , Obrigado!");
	    return 1;
	}
    if(strcmp(cmd, "/profs", true) == 0) {
    	SendClientMessage(playerid, COLOR_TAXISTA, "-------------------------------------- A T E N Ç Ã O --------------------------------------");
		SendClientMessage(playerid, COLOR_TAXISTA, "Não sabemos em qual Parte do Virtual Life RPG você viu esse comando.");
		SendClientMessage(playerid, COLOR_TAXISTA, "Então, é bom ler TODOS os comandos, sistemas e regras para entender melhor, pois");
		SendClientMessage(playerid, COLOR_TAXISTA, "esse RPG é diferente, e que tudo aqui é novo. Leia os comandos: /ajuda.");
		SendClientMessage(playerid, COLOR_TAXISTA, "OBS: Profissões por Level!");
		return 1;
	}
    if(strcmp(cmd, "/profissoes", true) == 0) {
        SendClientMessage(playerid, COLOR_UNLOGGED,			"Lista de profissões Virtual Life RpG - Parte I -");
        SendClientMessage(playerid, COLOR_DESEMPREGADO,		"[Level: 0] - Desempregado (Salário: $350) - XL = 5 ExPoints");
        SendClientMessage(playerid, COLOR_BARMAN, 			"[Level: 0] - Barman (Salário: $1500 + as bebidas que vende) - XL = 7 ExPoints");
        SendClientMessage(playerid, COLOR_PESCADOR, 		"[Level: 0] - Pescador (Salário: $1100 + o que ganha na pesca) - XL = 7 ExPoints");
	    SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, "[Level: 0] - Entregador de Pizza (Salário: $1300 + o que o vender) - XL = 7 ExPoints");
    	SendClientMessage(playerid, COLOR_UNLOGGED,     	"Para mais profissões, digite /profissoes2");
    	return 1;
    }
    if(strcmp(cmd, "/profissoes2", true) == 0) {
        SendClientMessage(playerid, COLOR_UNLOGGED,     	"Lista de profissões Virtual Life RpG - Parte II -");
	   	SendClientMessage(playerid, COLOR_MOTORISTA_DE_ONIBUS, "[Level: 10] - Motorista de Ônibus (Salário: $1500) - XL = 5 ExPoints");
        SendClientMessage(playerid, COLOR_TAXISTA, 			"[Level: 10] - Taxista (Salário: $1500) - XL = 7 ExPoints");
	    SendClientMessage(playerid, COLOR_MOTOTAXI, 		"[Level: 10] - Mototaxista (Salário: $1500) - XL = 7 ExPoints");
     	SendClientMessage(playerid, COLOR_PEDREIRA,   		"[Level: 10] - Carregador da Pedreira (Salário: $1500 + o que descarregar na obra.) - XL = 10 ExPoints");
     	SendClientMessage(playerid, COLOR_SEGURANÇA,		"[Level: 20] - Segurança (Salário: $2000 + o que o patrão pagar) - XL = 7 ExPoints");
	    SendClientMessage(playerid, COLOR_LIXEIRO,   		"[Level: 20] - Lixeiro (Salário: $1000 + o que coletar) - XL = 7 ExPoints");
        SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR,	"[Level: 20] - Motorista Particular (Salário: $2000 + o que o patrão pagar) - XL = 7 ExPoints");
        SendClientMessage(playerid, COLOR_ASSASSINO, 		"[Level: 20] - Assassino (Salário: $400 + ganha o que roubar da vítima) - XL = 10 ExPoints");
    	SendClientMessage(playerid, COLOR_PALHA,     		"Para mais profissões, digite /profissoes3");
    	return 1;
    }
    if(strcmp(cmd, "/profissoes3", true) == 0) {
		SendClientMessage(playerid, COLOR_UNLOGGED,  		"Lista de profissões Virtual Life RpG - Parte III -");
    	SendClientMessage(playerid, COLOR_JORNALISTA, 		"[Level: 20] - Jornalista (Salário: $1500) - XL = 10 ExPoints");
    	SendClientMessage(playerid, COLOR_TAXI_AEREO, 		"[Level: 20] - Aerotaxista (Salário: $2500) - XL = 7 ExPoints");
     	SendClientMessage(playerid, COLOR_AGRICULTOR,   	"[Level: 30] - Agricultor (Salário: $1200 + o que plantar) - XL = 10 ExPoints");
		SendClientMessage(playerid, COLOR_CAMINHONEIRO,		"[Level: 40] - Caminhoneiro (Salário: $800 + o frete pelas cargas) - XL = 10 ExPoints");
        SendClientMessage(playerid, COLOR_TRAFICANTE, 		"[Level: 40] - Traficante (Salário: $1200 + o que o vender) - XL = 5 ExPoints");
       	SendClientMessage(playerid, COLOR_ROSA, 	  		"[Level: 40] - Prostituta (Salário: $800 + transas e strips) - XL = 8 ExPoints");
     	SendClientMessage(playerid, COLOR_TRANSPORTE_DE_VALORES, "[Level: 40] - Transporte de Valores (Salário: $800 + o que depositar) - XL = 9 ExPoints");
    	SendClientMessage(playerid, COLOR_PALHA,     		"Para mais profissões, digite /profissoes4");
    	return 1;
    }
    if(strcmp(cmd, "/profissoes4", true) == 0) {
        SendClientMessage(playerid, COLOR_UNLOGGED,  	    "Lista de profissões Virtual Life RpG - Parte IV -");
     	SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS,"[Level: 50] - Vendedor de Armas (Salário: $1400 + os 10 por cento das armas que vender.) - XL = 7 ExPoints");
     	SendClientMessage(playerid, COLOR_MECANICO,         "[Level: 50] - Mecânico (Salário: $1000 + os consertos) - XL = 7 ExPoints");
     	SendClientMessage(playerid, COLOR_FRENTISTA, 		"[Level: 50] - Frentista (Salário: $1200 + gasolina) - XL = 6 ExPoints");
	    SendClientMessage(playerid, COLOR_COP_MILITAR,  	"[Level: 50] - Polícia Militar (Salário: $1400) - XL = 8 ExPoints");
     	SendClientMessage(playerid, COLOR_ASSALTANTE,   	"[Level: 60] - Assaltante (Salário: $600 + o que assaltar e roubar) - XL = 9 ExPoints");
     	SendClientMessage(playerid, COLOR_CONTRABANDISTA,   "[Level: 60] - Contrabandista (Salário: $800 + contrabando) - XL = 9 ExPoints");
		SendClientMessage(playerid, COLOR_COP_RODOVIARIO,   "[Level: 60] - Polícia Rodoviária (Salário: $1700) - XL = 9 ExPoints");
        SendClientMessage(playerid, COLOR_PARAMEDICO, 		"[Level: 60] - Paramédico (Salário: $1000 + mais pagamento do plantão) - XL = 9 ExPoints");
    	SendClientMessage(playerid, COLOR_PALHA,     		"Para mais profissões, digite /profissoes5");
    	return 1;
    }
    if(strcmp(cmd, "/profissoes5", true) == 0) {
        SendClientMessage(playerid, COLOR_UNLOGGED,  	    "Lista de profissões Virtual Life RpG - Parte V -");
        SendClientMessage(playerid, COLOR_INSTRUTOR, 		"[Level: 70] - Instrutor de direção (Salário: $850 + comissão) - XL = 6 ExPoints");
		SendClientMessage(playerid, COLOR_COP_NARCOTICOS,   "[Level: 70] - Polícia Narcóticos (Salário: $2000) - XL = 8 ExPoints");
     	SendClientMessage(playerid, COLOR_LOCADOR_DE_CARROS,"[Level: 70] - Locador de Carros (Salário: $1000 + os carros que locar) - XL = 5 ExPoints");
     	SendClientMessage(playerid, COLOR_RECEITA_FEDERAL,  "[Level: 70] - Receita Federal (Salário: $3000) - XL = 8 ExPoints");
       	SendClientMessage(playerid, COLOR_CORRETOR_SEGUROS,	"[Level: 80] - Corretor de Seguros (Salário: $1400 + o que vender) - XL = 7 ExPoints");
       	SendClientMessage(playerid, COLOR_LIDER_DE_TRAFICO, "[Level: 90] - Líder de Tráfico (Salário: $2000 + o que vender) - XL = 7 ExPoints");
		SendClientMessage(playerid, COLOR_COP_SWAT,  		"[Level: 90] - Polícia SWAT (Salário: $2000) - XL = 9 ExPoints");
    	SendClientMessage(playerid, COLOR_ADVOGADO,   		"[Level: 90] - Advogado (Salário: $1000 + honorarios) - XL = 6 ExPoints");
    	SendClientMessage(playerid, COLOR_PALHA,     		"Para mais profissões, digite /profissoes6");
    	return 1;
    }
    if(strcmp(cmd, "/profissoes6", true) == 0) {
        SendClientMessage(playerid, COLOR_UNLOGGED,  	    "Lista de profissões Virtual Life RpG - Parte VI -");
       	SendClientMessage(playerid, COLOR_EXERCITO, 	    "[Level: 110] - Exercito (Salário: $4000) - XL = 10 ExPoints");
        SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS,"[Level: 120] - Vendedor de Carros (Salário: $350 + comissão) - XL = 9 ExPoints");
		SendClientMessage(playerid, COLOR_CORRETOR, 		"[Level: 120] - Corretor de Imóveis (Salário: $350 + comissão) - XL = 6 ExPoints");
		SendClientMessage(playerid, COLOR_JUIZ,   			"[Level: 130] - Juiz (Salário: $4000) - XL = 10 ExPoints");
     	SendClientMessage(playerid, COLOR_DELEGADO,   		"[Level: 160] - Delegado (Salário: $4500) - XL = 10 ExPoints");
       	SendClientMessage(playerid, COLOR_PALHA, 	    	"Essas são as profissões do Reload Virtual Life RpG.");
	   	return 1;
    }
    if(strcmp(cmd, "/cadernos", true) == 0){
	    SendClientMessage(playerid, COLOR_RED2, 			"Virtual Life RPG - Cadernos:");
	    SendClientMessage(playerid, COLOR_WHITE,			"- Esportes");
	    SendClientMessage(playerid, COLOR_WHITE, 			"- Homicidios");
	    SendClientMessage(playerid, COLOR_WHITE, 			"- Mercadorias");
	    SendClientMessage(playerid, COLOR_WHITE, 			"- Empresas");
	    SendClientMessage(playerid, COLOR_WHITE, 			"- Outros");
	    return 1;
	}
    if(strcmp(cmd, "/locais", true)==0){
		SendClientMessage(playerid, COLOR_RED2,  			"Locais de GPS Parte I:");
		SendClientMessage(playerid, COLOR_WHITE, 			"1 - Delegacia");
        SendClientMessage(playerid, COLOR_WHITE, 			"2 - Sorveteria");
        SendClientMessage(playerid, COLOR_WHITE, 			"3 - Clube Alhambra");
		SendClientMessage(playerid, COLOR_WHITE,            "4 - Posto");
        SendClientMessage(playerid, COLOR_WHITE,            "5 - Banco");
        SendClientMessage(playerid, COLOR_WHITE,            "6 - Ammu-Nation");
        SendClientMessage(playerid, COLOR_WHITE,            "7 - Hospital");
		SendClientMessage(playerid, COLOR_RED2, 			"/locais2 para ver mais locais");
		return 1;
	}
	if(strcmp(cmd, "/locais2", true)==0){
		SendClientMessage(playerid, COLOR_RED2,  			"Locais de GPS Parte II:");
		SendClientMessage(playerid, COLOR_WHITE, 			"8 - Posto");
        SendClientMessage(playerid, COLOR_WHITE, 			"9 - Hotel");
        SendClientMessage(playerid, COLOR_WHITE, 			"10 - Banco");
		SendClientMessage(playerid, COLOR_WHITE,            "11 - Skate Park");
        SendClientMessage(playerid, COLOR_WHITE,            "12 - Agencia de empregos");
        SendClientMessage(playerid, COLOR_WHITE,            "13 - Hotel");
        SendClientMessage(playerid, COLOR_WHITE,            "14 - Aeroporto");
		SendClientMessage(playerid, COLOR_RED2, 			"/locais3 para ver mais locais");
		return 1;
	}
	if(strcmp(cmd, "/locais3", true)==0){
		SendClientMessage(playerid, COLOR_RED2,  			"Locais de GPS Parte III:");
		SendClientMessage(playerid, COLOR_WHITE, 			"15 - Pay'n'Spray");
        SendClientMessage(playerid, COLOR_WHITE, 			"16 - Ammu-Nation");
        SendClientMessage(playerid, COLOR_WHITE, 			"17 - Aeroporto");
		SendClientMessage(playerid, COLOR_WHITE,            "18 - Beco do Desmanche");
        SendClientMessage(playerid, COLOR_WHITE,            "19 - Lixão/Ferro-Velho");
        SendClientMessage(playerid, COLOR_WHITE,            "20 - Auto-Escola");
        SendClientMessage(playerid, COLOR_WHITE,            "21 - Balada");
		SendClientMessage(playerid, COLOR_RED2, 			"/locais4 para ver mais locais");
		return 1;
	}
	if(strcmp(cmd, "/locais4", true)==0){
		SendClientMessage(playerid, COLOR_RED2,  			"Locais de GPS Parte IV:");
		SendClientMessage(playerid, COLOR_WHITE, 			"22 - COEVL");
        SendClientMessage(playerid, COLOR_WHITE, 			"23 - Pizzaria");
        SendClientMessage(playerid, COLOR_WHITE, 			"24 - Loteria");
		SendClientMessage(playerid, COLOR_WHITE,            "25 - Loja de utilidades/eletrodomésticos");
        SendClientMessage(playerid, COLOR_WHITE,            "26 - Aposta de cavalos");
        SendClientMessage(playerid, COLOR_WHITE,            "27 - Clube de strip-tease/Boate");
        SendClientMessage(playerid, COLOR_WHITE,            "28 - Estádio de Los Santos");
		SendClientMessage(playerid, COLOR_RED2, 			"/locais5 para ver mais locais");
		return 1;
	}
	if(strcmp(cmd, "/locais5", true)==0){
		SendClientMessage(playerid, COLOR_RED2,  			"Locais de GPS Parte V:");
		SendClientMessage(playerid, COLOR_WHITE, 			"29 - Compra de propriedades");
        SendClientMessage(playerid, COLOR_WHITE, 			"30 - Bar");
        SendClientMessage(playerid, COLOR_WHITE, 			"31 - Restaurante");
		SendClientMessage(playerid, COLOR_WHITE,            "32 - Revendedora de veículos/Concecionária");
        SendClientMessage(playerid, COLOR_WHITE,            "33 - Banheiro público");
        SendClientMessage(playerid, COLOR_WHITE,            "34 - Cooperativa de pesca");
        SendClientMessage(playerid, COLOR_WHITE,            "35 - Loja de registro de cofres");
		SendClientMessage(playerid, COLOR_RED2, 			"/locais6 para ver mais locais");
		return 1;
	}
	if(strcmp(cmd, "/locais6", true)==0){
		SendClientMessage(playerid, COLOR_RED2,  			"Locais de GPS Parte VI:");
		SendClientMessage(playerid, COLOR_WHITE, 			"36 - Loja de munição");
		SendClientMessage(playerid, COLOR_WHITE,            "37 - Locadora de veículos");
		SendClientMessage(playerid, COLOR_WHITE,            "38 - Praia");
		SendClientMessage(playerid, COLOR_WHITE,			"39 - Morro");
		SendClientMessage(playerid, COLOR_WHITE,			"40 - Casa do Ryder");
		SendClientMessage(playerid, COLOR_WHITE,			"41 - Casa do Sweet");
		SendClientMessage(playerid, COLOR_WHITE,			"42 - ECTVL");
		SendClientMessage(playerid, COLOR_RED2, 			"/locais7 para ver mais locais");
		return 1;
	}
	if(strcmp(cmd, "/locais7", true)==0){
		SendClientMessage(playerid, COLOR_RED2,  			"Locais de GPS Parte VII:");
		SendClientMessage(playerid, COLOR_WHITE, 			"43 - Chaveiro");
		SendClientMessage(playerid, COLOR_WHITE,            "44 - Pizzaria");
		SendClientMessage(playerid, COLOR_WHITE,            "45 - Binco");
		SendClientMessage(playerid, COLOR_WHITE,			"46 - Sub Urban");
		SendClientMessage(playerid, COLOR_WHITE,			"47 - Victim");
		SendClientMessage(playerid, COLOR_WHITE,			"48 - Didier Sachs");
		SendClientMessage(playerid, COLOR_WHITE,			"49 - Pro Laps");
		SendClientMessage(playerid, COLOR_RED2, 			"/locais8 para ver mais locais");
		return 1;
	}
	if(strcmp(cmd, "/locais8", true)==0){
		SendClientMessage(playerid, COLOR_RED2,  			"Locais de GPS Parte VIII:");
		SendClientMessage(playerid, COLOR_WHITE, 			"50 - Area de entretenimentos");
		SendClientMessage(playerid, COLOR_WHITE,            "51 - Loja de customização");
		SendClientMessage(playerid, COLOR_WHITE,            "52 - Loja de modificações/Transfeder");
		SendClientMessage(playerid, COLOR_WHITE,            "53 - Banheiro público");
		SendClientMessage(playerid, COLOR_RED2, 			"Esses são os locais de GPS do gamemode.");
		return 1;
	}
	if(strcmp(cmd, "/regras1", true) == 0) {
	    SendClientMessage(playerid, COLOR_RED2, "  REGRAS - Reload Virtual Life RpG para Jogadores e Administradores. PARTE I -");
        SendClientMessage(playerid, COLOR_JUIZ,	"  1º Não é permitido o uso de cheats, trapaças, para jogadores INCLUSIVE ADMINS.");
        SendClientMessage(playerid, COLOR_JUIZ, "  2º Nenhum jogador pode se apossar de algum veículo sem ter pago pelo mesmo.");
        SendClientMessage(playerid, COLOR_JUIZ, "  3º É necessária habilitação para dirigir, e a compra de carros é possível somente");
        SendClientMessage(playerid, COLOR_JUIZ, "  se o jogador tiver uma casa.");
    	SendClientMessage(playerid, COLOR_JUIZ, "  4º Nenhum jogador pode possuir mais de 4 veículos, afim de não pesar o mode.");
        SendClientMessage(playerid, COLOR_JUIZ, "  5º Valores de casas: $5000, $10000, $20000, $40000, $60000, $80000, $100000 e $200000.");
        SendClientMessage(playerid, COLOR_JUIZ, "  6º Valores dos carros: vide tabela padrão.");
        SendClientMessage(playerid, COLOR_RED2, "  Veja mais regras em /regras2.");
		return 1;
	}
	if(strcmp(cmd, "/regras2", true) == 0) {
        SendClientMessage(playerid, COLOR_RED2, "  REGRAS - Reload Virtual Life RpG para Jogadores e Administradores. PARTE II -");
        SendClientMessage(playerid, COLOR_JUIZ, "  7º Deve-se respeitar a lógica do RPG, não é permitido um numéro desequilibrado de profissões.");
        SendClientMessage(playerid, COLOR_JUIZ, "  8º A não obediência destas regras dispostas implicará desde advertência à exclusão permanente do servidor. ");
        SendClientMessage(playerid, COLOR_JUIZ, "  9º Skin para: Policiais, Advogados, Delegado e Juiz sao predeterminadas, alterações somente para: Cop 280 à 285.Demais: 147,164,166,37. ");
		SendClientMessage(playerid, COLOR_JUIZ, "  10º Nenhum jogador poderá setar a casa de outro no ar, isso poderá acarretar na perca do emprego e até mesmo em banimento do servidor.");
		SendClientMessage(playerid, COLOR_WHITE,  "  A finalidade das regras são afim de garantir organização, e claro, diversão no mode Reload Virtual Life RpG.");
		return 1;
	}
	if(strcmp(cmd, "/acoes", true) == 0) {
	    SendClientMessage(playerid, COLOR_RED2,  "Ações do Reload Virtual Life RPG:");
	    SendClientMessage(playerid, COLOR_WHITE, "/render | /bebado | /cover | /crack |");
        SendClientMessage(playerid, COLOR_WHITE, "/plantarbomba  | /beijar | /gunarrest | /dancar [1-3]");
        SendClientMessage(playerid, COLOR_WHITE, "/sentar | /sentaredeitar | /relaxar | /sentarmesa | ");
        SendClientMessage(playerid, COLOR_WHITE, "/fu  | /punheta | /esconder-se | /aparecer | /mijar | /falar.");
        SendClientMessage(playerid, COLOR_WHITE, "/vomitar | /fumar2 | /pararanimacoes | /fingirdemorto /gangwalk.");
		return 1;
	}
	if(strcmp(cmd, "/hotelinfo", true) == 0) {
	    SendClientMessage(playerid, COLOR_RED2, "Virtual Life RPG - Hotel:");
    	SendClientMessage(playerid, COLOR_WHITE, "O hotel serve como moradia temporária. Para ficar hospedado digite /hotel");
        SendClientMessage(playerid, COLOR_WHITE, "O custo da hospedagem é $1500 dolares, poderá ficar hospedado até ter");
        SendClientMessage(playerid, COLOR_WHITE, "condições financeiras para poder comprar primeiramente 1 casa e logo em seguida 1 carro");
		SendClientMessage(playerid, COLOR_WHITE, "OBS: Quando estiver em um hotel pagará $200 dólares semanalmente como despeja.");
        return 1;
    }
    if(strcmp(cmd, "/dicaspublicar", true) == 0) {
        SendClientMessage(playerid, COLOR_RED2, "Virtual Life RPG - Dicas para publicar:");
        SendClientMessage(playerid, COLOR_WHITE, "CORES: '~w~ blabla' no qual o 'blabla' sairá em branco!");
        SendClientMessage(playerid, COLOR_WHITE, "Cores existentes: ~y~ Amarelo , ~b~ Azul , ~g~ Verde , ~p~ Roxo , ~l~ Preto , ~w~ Branco , ~r~ Vermelho");
		SendClientMessage(playerid, COLOR_WHITE, "CLAREAR: use ~h~ para clarear a cor, Exemplo: '~h~~b~ blabla' no qual o 'blabla' sairá em azul claro!");
		return 1;
	}
    if(strcmp(cmd, "/veiculos", true) == 0) {
		SendClientMessage(playerid, COLOR_VERDECLARO, 	"Veículos do Reload Virtual Life RpG -  escolha um estilo de carro");
		SendClientMessage(playerid, COLOR_ORANGE, 		"/sedans     -    /aereos");
		SendClientMessage(playerid, COLOR_YELLOW, 		"/4portas    -    /barcos");
		SendClientMessage(playerid, COLOR_PURPLE, 		"/muscle     -    /lowriders");
		SendClientMessage(playerid, COLOR_INSTRUTOR, 	"/esportivos -    /recreacionais");
		SendClientMessage(playerid, COLOR_AZULPLUS, 	"/corrida    -    /motos");
		SendClientMessage(playerid, COLOR_GREEN, 		"/pesados");
		return 1;
	}
    if(strcmp(cmd, "/sedans", true) == 0) {
		SendClientMessage(playerid, COLOR_VERDECLARO, 	"Sedans do Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_VERDECLARO, 	"ID   -  Nome do Carro  -  Preço");
		SendClientMessage(playerid, COLOR_ORANGE, 		"/587 - Euros 75000");
		SendClientMessage(playerid, COLOR_ORANGE, 		"/602 - Alpha 55000");
		SendClientMessage(playerid, COLOR_ORANGE,       "/562 - Elegy 50000");
		SendClientMessage(playerid, COLOR_ORANGE,       "/565 - Flash 45000");
		SendClientMessage(playerid, COLOR_ORANGE, 		"/517 - Majestic 35000");
		SendClientMessage(playerid, COLOR_ORANGE, 		"/496 - Blista Compact 35000");
		SendClientMessage(playerid, COLOR_ORANGE, 		"/439 - Stallion 29000");
		SendClientMessage(playerid, COLOR_ORANGE, 		"/410 - Manana 4000");
		return 1;
	}
    if(strcmp(cmd, "/aereos", true) == 0) {
		SendClientMessage(playerid, COLOR_VERDECLARO, 	"Aéreos do Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_VERDECLARO, 	"ID   -  Nome do Carro  -  Preço");
		SendClientMessage(playerid, COLOR_ORANGE, 		"/519 - Shamal 1545000");
		SendClientMessage(playerid, COLOR_ORANGE, 		"/487 - Maverick 845000");
		SendClientMessage(playerid, COLOR_ORANGE, 		"/593 - Dodo 845000");
		return 1;
	}
    if(strcmp(cmd, "/4portas", true) == 0) {
		SendClientMessage(playerid, COLOR_VERDECLARO, 	"4 Portas do Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_VERDECLARO, 	"ID   -  Nome do Carro  -  Preço");
		SendClientMessage(playerid, COLOR_YELLOW, 		"/409 - Stretch 80000");
		SendClientMessage(playerid, COLOR_YELLOW, 		"/445 - Admiral 35000");
		SendClientMessage(playerid, COLOR_YELLOW, 		"/405 - Sentinel 35000");
		return 1;
	}
    if(strcmp(cmd, "/barcos", true) == 0) {
		SendClientMessage(playerid, COLOR_VERDECLARO, 	"Barcos do Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_VERDECLARO, 	"ID   -  Nome do Barco  -  Preço");
		SendClientMessage(playerid, COLOR_YELLOW, 		"/493 - Jetmax 608000");
		SendClientMessage(playerid, COLOR_YELLOW, 		"/453 - Reefer 180000");
		SendClientMessage(playerid, COLOR_YELLOW, 		"/473 - Dinghy 50000");
		return 1;
	}
    if(strcmp(cmd, "/muscle", true) == 0) {
		SendClientMessage(playerid, COLOR_VERDECLARO, 	"Muscles do Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_VERDECLARO, 	"ID   -  Nome do Carro  -  Preço");
		SendClientMessage(playerid, COLOR_PURPLE, 		"/402 - Buffalo 95000");
		SendClientMessage(playerid, COLOR_PURPLE, 		"/603 - Phoenix 75000");
		SendClientMessage(playerid, COLOR_PURPLE, 		"/475 - Sabre 19000");
		return 1;
	}
	if(strcmp(cmd, "/esportivos", true) == 0) {
		SendClientMessage(playerid, COLOR_VERDECLARO, 	"Esportivos do Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_VERDECLARO, 	"ID   -  Nome do Carro  -  Preço");
		SendClientMessage(playerid, COLOR_INSTRUTOR, 	"/560 - Sultan  105000");
		SendClientMessage(playerid, COLOR_INSTRUTOR, 	"/559 - Jester  85000");
		SendClientMessage(playerid, COLOR_INSTRUTOR, 	"/529 - Banshee 50000");
		return 1;
	}
	if(strcmp(cmd, "/corrida", true) == 0) {
		SendClientMessage(playerid, COLOR_VERDECLARO, 	"Carros Esportivos e de Corrrida do Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_VERDECLARO, 	"ID   -  Nome do Carro  -  Preço");
		SendClientMessage(playerid, COLOR_AZULPLUS, 	"/411 - Infernus 450000");
		SendClientMessage(playerid, COLOR_AZULPLUS, 	"/451 - Turismo 350000");
		SendClientMessage(playerid, COLOR_AZULPLUS, 	"/541 - Bullet 300000");
		SendClientMessage(playerid, COLOR_AZULPLUS, 	"/415 - Cheetah 255000");
		SendClientMessage(playerid, COLOR_AZULPLUS, 	"/480 - Comet 160000");
		SendClientMessage(playerid, COLOR_AZULPLUS, 	"/434 - Hotknife 120000");
		return 1;
	}
   	if(strcmp(cmd, "/recreacionais", true) == 0) {
		SendClientMessage(playerid, COLOR_VERDECLARO, 	"Veículos Recreacionais do Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_VERDECLARO, 	"ID   -  Nome do Carro  -  Preço");
		SendClientMessage(playerid, COLOR_AZULPLUS, 	"/444 - Monster 115000");
		SendClientMessage(playerid, COLOR_AZULPLUS, 	"/424 - BF Injection 15000");
		SendClientMessage(playerid, COLOR_AZULPLUS, 	"/471 - Quad 9000");
		return 1;
	}
	if(strcmp(cmd, "/pesados", true) == 0) {
		SendClientMessage(playerid, COLOR_VERDECLARO, 	"Veículos Pesados do Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_VERDECLARO, 	"ID   -  Nome do Carro  -  Preço");
		SendClientMessage(playerid, COLOR_GREEN, 		"/444 - Monster 115000");
		SendClientMessage(playerid, COLOR_GREEN, 		"/515 - RoadTrain 67000");
		SendClientMessage(playerid, COLOR_GREEN, 		"/400 - Landstalker 30000");
		return 1;
	}
	if(strcmp(cmd, "/lowriders", true) == 0) {
		SendClientMessage(playerid, COLOR_VERDECLARO, 	"Low Riders do Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_VERDECLARO, 	"ID   -  Nome do Carro  -  Preço");
		SendClientMessage(playerid, COLOR_WHITE, 		"/535 - Slamvan 25000");
		SendClientMessage(playerid, COLOR_WHITE, 		"/536 - Blade 20000");
		SendClientMessage(playerid, COLOR_WHITE, 		"/534 - Remington 20000");
		return 1;
	}
	if(strcmp(cmd, "/motos", true) == 0) {
		SendClientMessage(playerid, COLOR_VERDECLARO, 	"Motos do Reload Virtual Life RpG");
		SendClientMessage(playerid, COLOR_VERDECLARO, 	"ID   -  Nome do Carro  -  Preço");
		SendClientMessage(playerid, COLOR_WHITE, 		"/522 - NRG500  60000");
		SendClientMessage(playerid, COLOR_WHITE, 		"/521 - FCR-900 35000");
		SendClientMessage(playerid, COLOR_WHITE, 		"/461 - PCJ-600 10000");
		SendClientMessage(playerid, COLOR_WHITE, 		"/463 - Freeway 15000 ");
		SendClientMessage(playerid, COLOR_WHITE, 		"/468 - Sanchez 10000 ");
		SendClientMessage(playerid, COLOR_WHITE, 		"/462 - Faggio 2000");
		return 1;
	}
	if(strcmp(cmd, "/carteiras", true) == 0) {
	    SendClientMessage(playerid, COLOR_WHITE,       "Habilitações:");
	    SendClientMessage(playerid, COLOR_INSTRUTOR,   "Terrestre - Sem teste: $1200 | Com teste: $800");
	    SendClientMessage(playerid, COLOR_INSTRUTOR,   "Naútica - Sem teste: $1600 | Com teste: $1200");
	    SendClientMessage(playerid, COLOR_INSTRUTOR,   "Aérea - Sem teste: $2400 | Com teste: $2000");
	    SendClientMessage(playerid, COLOR_WHITE,       "Reload Virtual Life RpG mais que um RPG, UMA VIDA!");
	    return 1;
	}

//MOTORISTA DE ÔNIBUS
	if(strcmp(cmd,"/desativarterminais",true)==0){
	    if(Profissao[playerid] != MOTORISTA_DE_ONIBUS && !IsPlayerAdmin(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão!");
		    return 1;
		}
		if(TerminaisAtivados[playerid] == 0)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Seus terminais não estão ativados, para ativar use \"/terminais\"");
			return 1;
		}
		TerminaisAtivados[playerid] = 0;
		PassouTerminais[playerid] = 0;
		DisablePlayerRaceCheckpoint(playerid);
		SendClientMessage(playerid, COLOR_MOTORISTA_DE_ONIBUS, "Terminais desativados!");
		return 1;
	}
	if(strcmp(cmd,"/terminais",true)==0){
		if(Profissao[playerid] != MOTORISTA_DE_ONIBUS && !IsPlayerAdmin(playerid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão!");
		    return 1;
		}
		if(TerminaisAtivados[playerid] == 1)
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Seus terminais já estão ativados, siga o CheckPoint no radar!");
			return 1;
		}
		SendClientMessageToAll(COLOR_MOTORISTA_DE_ONIBUS, " ");
		SendClientMessageToAll(COLOR_MOTORISTA_DE_ONIBUS, "[BUS]O Onibus da Companhia de Transportes Públicos entrou em circulação.");
		new rand = random(sizeof TerminaisBusao);
		TerminaisAtivados[playerid] = 1;
		PassouTerminais[playerid] = 0;
		SetPlayerRaceCheckpoint(playerid,1,TerminaisBusao[rand][0],TerminaisBusao[rand][1],TerminaisBusao[rand][2],0.0,0.0,0.0,4.0);
		SendClientMessage(playerid, COLOR_MOTORISTA_DE_ONIBUS, "Siga o CheckPoint para ir até o próximo terminal!");
		return 1;
	}
//LIXEIRO
	if(strcmp(cmd,"/coletarlixo",true)==0){
	    if(Profissao[playerid] == LIXEIRO || IsPlayerAdmin(playerid)){
	        if(MissaoLixeiro[playerid] == 1){
				SendClientMessage(playerid,COLOR_GRAY,"Você já está na missão de coleção de lixo!");
				return 1;
			}
			else {
				SendClientMessage(playerid,COLOR_LIXEIRO,"A sua missão agora é:");
				SendClientMessage(playerid,COLOR_LIXEIRO,"Colete os resíduos de 10 lixeiras e em seguida,");
				SendClientMessage(playerid,COLOR_LIXEIRO,"transporte o caminhão até o lixão e deposite o lixo lá");
				SendClientMessage(playerid,COLOR_LIXEIRO,"com o comando /lixao.");
				EntregadePizza[playerid] = 0;
				MissaoLixeiro[playerid] = 1;
    			ColocandoDrogas[playerid] = 0;
		 		DrogasNoCaminhao[playerid] = 0;
				PegandoDrogas[playerid] = 0;
				new randtrash = random(37);
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid,LixeirasCheckpoints[randtrash][0],LixeirasCheckpoints[randtrash][1],LixeirasCheckpoints[randtrash][2],3.0);
				return 1;
			}
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Apenas lixeiros podem utilizar esse comando.");
			return 1;
		}
	}
	if(strcmp(cmd,"/pararcoletalixo",true)==0){
	    if(MissaoLixeiro[playerid] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Você não está na missão de coleção de lixo!");
			return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_LIXEIRO, "Missão cancelada!");
		    MissaoLixeiro[playerid] = 0;
		    DisablePlayerCheckpoint(playerid);
		    return 1;
		}
	}
	if(strcmp(cmd,"/lixao",true)==0){
	    new string[256];
	    if(Profissao[playerid] == LIXEIRO || IsPlayerAdmin(playerid)){
	        if(MissaoLixeiro[playerid] == 0){
				SendClientMessage(playerid,COLOR_GRAY,"Você não está na missão de coleta de lixo!");
				return 1;
			} else {
			    if(LixoColetado[playerid] < 10){
			        SendClientMessage(playerid,COLOR_GRAY,"Você não tem lixo suficiente para descarregar.");
			        return 1;
				} else {
					if(AreaLixao[playerid] == 0){
					    SendClientMessage(playerid,COLOR_GRAY,"Você não está em um lixão!");
					    return 1;
					} else {
						if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 408){
						    SendClientMessage(playerid,COLOR_GRAY,"Você não está em um caminhão Trashmaster!");
						    return 1;
						} else {
						    DisablePlayerCheckpoint(playerid);
						    SendClientMessage(playerid,COLOR_LIXEIRO,"Missão cumprida!");
						    AddPlayerMoney(playerid,20*LixoColetado[playerid], 3);
						    format(string,sizeof(string),"Você recebeu $%d",20*LixoColetado[playerid]);
						    SendClientMessage(playerid, COLOR_LIXEIRO, string);
						    AcrescentarExPoints(playerid,1);
						    MissaoLixeiro[playerid] = 0;
						    LixoColetado[playerid] = 0;
						    if(JogadorContratado(playerid,10)) AcrescentarLucro(10,200);
						    return 1;
						}
					}
				}
			}
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Apenas lixeiros podem utilizar esse comando.");
		    return 1;
		}
	}
//Celular
	if(strcmp(cmd, "/guardarcell", true) == 0){
	    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo...");
     	if(pStats[playerid][PhoneNumb]==0){
	       	SendClientMessage(playerid,COLOR_GRAY,"Você não tem celular!");
	       	return 1;
		}
		if(EmLigacao[playerid] == 1){
	    	SendClientMessage(playerid,COLOR_GRAY,"Termine sua ligação para poder desligar o celular...");
			return 1;
		}
		if(pStats[playerid][GCell] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Seu celular já está guardado em um veículo...");
		    return 1;
		}
		if(!strcmp(vStats[GetPlayerVehicleID(playerid)][VDono],PlayerName(playerid),true)){
		    pStats[playerid][GCell] = 1;
		    pStats[playerid][VCell] = GetPlayerVehicleID(playerid);
			SendClientMessage(playerid, COLOR_YELLOW, "Celular guardado e desligado...");
			return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é o DONO desse veículo...");
		    return 1;
		}
	}
	if(strcmp(cmd, "/pegarcell", true) == 0){
	    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo...");
     	if(pStats[playerid][PhoneNumb]==0){
	       	SendClientMessage(playerid,COLOR_GRAY,"Você não tem celular!");
	       	return 1;
		}
		if(pStats[playerid][GCell] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Seu celular não está guardado em um veículo...");
		    return 1;
		}
		if(GetPlayerVehicleID(playerid) != pStats[playerid][VCell]){
		    SendClientMessage(playerid, COLOR_GRAY, "Não foi nesse veículo que você guardou seu celular...");
		    return 1;
		}
		if(!strcmp(vStats[GetPlayerVehicleID(playerid)][VDono],PlayerName(playerid),true)){
		    pStats[playerid][GCell] = 0;
		    pStats[playerid][VCell] = 0;
			SendClientMessage(playerid, COLOR_YELLOW, "Seu celular está novamente com você!");
			return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é o DONO desse veículo...");
		    return 1;
		}
	}
	if(strcmp(cmd, "/escrevercarta",true) == 0){
	    new tmp[256];
	    new carta[256];
	    new msg[256];
		new achou = 0;
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /escrevercarta [nome do jogador] [texto]");
		if(!fexist(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não existe!");
		for(new i = 0; i < MAX_CASAS; i++){
			if(strcmp(pckStats[i][PickupDono],tmp,true,strlen(tmp)) == 0 && strlen(tmp) == strlen(pckStats[i][PickupDono])){
				strmid(carta,cmdtext,16+strlen(tmp),strlen(cmdtext));
				if(!strlen(carta)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /escrevercarta [nome do jogador] [texto]");
				EnviarCarta(playerid,tmp,carta);
				achou = 1;
				format(msg,sizeof(msg),"Carta enviada para %s: %s",tmp,carta);
				SendClientMessage(playerid, COLOR_WHITE, msg);
				break;
			}
		}
		if(achou == 0) return SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não possui casa!");
		return 1;
	}
	if(strcmp(cmd, "/vercorrespondencia", true) == 0) {
		if(NaCasa[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma casa!");
		    return 1;
		}
		if(strcmp(pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid),true)){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está na sua casa!");
		    return 1;
		}
	    SendClientMessage(playerid, COLOR_JUIZ, "|==========| Correspondências |==========|");
	    MostrarCorrespondencia(playerid);
		return 1;
	}
	if(strcmp(cmd, "/jogarcartasfora",true) == 0){
	    if(NaCasa[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma casa!");
		    return 1;
		}
		if(strcmp(pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid),true)){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está na sua casa!");
		    return 1;
		}
	    ExcluirCorrespondencia(playerid);
		return 1;
	}
	if(strcmp(cmd, "/mudarcaixapostal", true) == 0){
		if(!Logado[playerid]) return SendClientMessage(playerid, COLOR_GRAY, "Antes de tudo, se logue no jogo!");
		new tmp[256];
		strmid(tmp,cmdtext,18,strlen(cmdtext));
	    if(strlen(tmp) <= 0) return SendClientMessage(playerid, COLOR_GRAY, "USO: /mudarcaixapostal [mensagem]");
        new msg[256];
		format(msg,sizeof(msg),"%s mudou sua caixa postal para:",PlayerName(playerid));
		writelog(msg);
		writelog(tmp);
		print(msg);
		print(tmp);
		set(pStats[playerid][MSGBIP],tmp);
		SendClientMessage(playerid, COLOR_JUIZ, "[Secretária Eletrônica] Sua mensagem de caixa postal foi mudada para:");
		SendClientMessage(playerid, COLOR_WHITE, tmp);
		return 1;
	}
	if(!strcmp(cmd, "/vercaixapostal",true)){
	    if(pStats[playerid][PhoneNumb]==0){
	        SendClientMessage(playerid,COLOR_GRAY,"Você não tem celular!");
	        return 1;
		}
		if(pStats[playerid][GCell] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Seu celular está guardado e desativado!");
		    return 1;
		}
	    SendClientMessage(playerid, COLOR_RED2, "*_*_*_* CAIXA POSTAL *_*_*_*");
		MostrarCaixaPostal(playerid);
		return 1;
	}
	if(!strcmp(cmd, "/excluircaixapostal",true)){
	    if(pStats[playerid][PhoneNumb]==0){
	        SendClientMessage(playerid,COLOR_GRAY,"Você não tem celular!");
	        return 1;
		}
		if(pStats[playerid][GCell] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Seu celular está guardado e desativado!");
		    return 1;
		}
		ExcluirCaixaPostal(playerid);
		return 1;
	}
	if(strcmp(cmd, "/ligar", true) == 0) {
		new tmp[256],string[256];
		new cellowner[256];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_GRAY, "USO: /ligar [número]");
			return 1;
		}
		if(NaCasa[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
		    return 1;
		}
		if(pckStats[PickupEntradaCasa[playerid]][Telefone] == 0 || pckStats[PickupEntradaCasa[playerid]][TelefoneNumb] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem telefone!");
			return 1;
		}
		if(EmLigacao[playerid] == 1){
		    SendClientMessage(playerid,COLOR_GRAY,"Você já está em uma ligação!");
			return 1;
		}
		if(CelularBloqueado[playerid] == 1){
   			SendClientMessage(playerid, COLOR_GRAY, "Você não está com seu celular.");
			return 1;
		}
		new search,string_text[256],getpck;
		for(new i = 0; i < MAX_CASAS; i++){
	    	set(string_text,PickupFile(i));
	    	if(fexist(string_text)){
    			if(pckStats[i][TelefoneNumb] == strval(tmp)){
					search = 1;
					getpck = i;
					break;
				}
			}
		}
		if(strval(tmp) <= LastPN && !search){
		   	SendClientMessage(playerid,COLOR_GRAY,"Número inexistente.");
		   	return 1;
		}
		if(strval(tmp) < 300000){
		    set(cellowner,CelularesNum[strval(tmp)-1000]);
			if(!IsStringAName(cellowner)){
		    	format(RecebedorMensagem[playerid],MAX_STRING,cellowner);
		    	SendClientMessage(playerid,COLOR_YELLOW,"Chamando...");
		    	TempoCaixaMensagem[playerid][0] = SetTimerEx("CaixaMensagem",10000,0,"d",playerid);
		    	return 1;
			}
			new calledid = IDName(cellowner);
			if((pStats[calledid][GCell] == 1 || pStats[calledid][CofreCell]) && strval(tmp) < 300000){
		    	SendClientMessage(playerid, COLOR_GRAY, "O celular do outro jogador está desligado...");
		    	return 1;
			}
			if(EmLigacao[calledid] == 1 && strval(tmp) < 300000){
			    SendClientMessage(playerid,COLOR_GRAY,"O jogador já está em uma ligação!");
			    return 1;
			}
			extensao[calledid] = celular_extension;
		    format(RecebedorMensagem[playerid],MAX_STRING,cellowner);
			SendClientMessage(calledid,COLOR_JUIZ,"Seu celular está tocando! Para atende-lo, digite /atender. Caso contrário, digite /recusarchamada.");
			format(string,256,"Originador da chamada: %s",PlayerName(playerid));
			SendClientMessage(calledid,COLOR_GRAY,string);
			TocandoBIP[calledid]=SetTimerEx("BipDoTelefone",1000,0,"d",calledid);
			Chamando[playerid]=1;
			Chamando[calledid]=1;
			CalledID[playerid]=calledid;
			CalledID[calledid]=playerid;
			CobrancaCall[playerid]=1;
			CobrancaCall[calledid]=0;
		}
		else{
		    set(cellowner,pckStats[getpck][PickupDono]);
			if(!IsStringAName(cellowner)){
		    	format(RecebedorMensagem[playerid],MAX_STRING,cellowner);
		    	SendClientMessage(playerid,COLOR_YELLOW,"Chamando...");
		    	TempoCaixaMensagem[playerid][0] = SetTimerEx("CaixaMensagem",10000,0,"d",playerid);
		    	return 1;
			}
			new presult;
		    for(new p = 0; p < MAX_CASAS; p++){
		        if(strval(tmp) == pckStats[p][TelefoneNumb]){
		            presult = p;
		            break;
				}
			}
			if(presult == PickupEntradaCasa[playerid]){
			    SendClientMessage(playerid, COLOR_GRAY, "Tentando ligar para a casa que você está? Impossível aqui!");
			    return 1;
			}
			if(TellUsing[presult] == 1 || TelefoneTocando[presult] == 1){
			    SendClientMessage(playerid, COLOR_GRAY, "O telefone dessa casa está ocupado!");
			    return 1;
			}
            TelefoneTocando[presult] = 1;
			PickupCaller[presult] = playerid;
			format(RecebedorMensagem[playerid],MAX_STRING,pckStats[PickupEntradaCasa[playerid]][PickupDono]);
		    for(new i = 0; i < SLOTS2; i++){
		        if(NaCasa[i] == 1 && PickupEntradaCasa[i] == presult){
		            SendClientMessage(i, COLOR_JUIZ, "Telefone tocando... Para atender digite /atendertelefone");
					TocandoBIP[i]=SetTimerEx("BipDoTelefone",1000,0,"d",i);
				}
			}
		}
		extensao[playerid] = telefone_extension;
		Atendente[PickupEntradaCasa[playerid]] = playerid;
		TempoCaixaMensagem[playerid][0] = SetTimerEx("CaixaMensagem",20000,0,"d",playerid);
		SendClientMessage(playerid,COLOR_YELLOW,"Chamando...");
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
		return 1;
	}
	if(strcmp(cmd, "/atendertelefone", true) == 0){
	    if(NaCasa[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma casa!");
	    if(TelefoneTocando[PickupEntradaCasa[playerid]] == 0) return SendClientMessage(playerid, COLOR_GRAY, "O telefone não está tocando!");
        extensao[playerid] = telefone_extension;
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
		SendClientMessage(PickupCaller[PickupEntradaCasa[playerid]],COLOR_WHITE,"Quem você chamava aceitou sua ligação! Pode conversar!");
		SendClientMessage(playerid, COLOR_WHITE, "Telefone atendido!");
		KillTimer(TocandoBIP[playerid]);
		Chamando[playerid]=0;
		Chamando[PickupCaller[PickupEntradaCasa[playerid]]]=0;
		EmLigacao[playerid]=1;
		EmLigacao[PickupCaller[PickupEntradaCasa[playerid]]]=1;
		KillTimer(TempoCaixaMensagem[playerid][0]);
		KillTimer(TempoCaixaMensagem[PickupCaller[PickupEntradaCasa[playerid]]][0]);
		TelefoneTocando[PickupEntradaCasa[playerid]] = 0;
		TellUsing[PickupEntradaCasa[playerid]] = 1;
		extensao[playerid] = telefone_extension;
		PickupCaller[PickupEntradaCasa[playerid]] = PickupCaller[PickupEntradaCasa[playerid]];
		Atendente[PickupEntradaCasa[playerid]] = playerid;
		switch(extensao[PickupCaller[PickupEntradaCasa[playerid]]]){
			case telefone_extension:
			{
				TellUsing[PickupEntradaCasa[PickupCaller[PickupEntradaCasa[playerid]]]] = 1;
				PickupCaller[PickupEntradaCasa[PickupCaller[PickupEntradaCasa[playerid]]]] = playerid;
				SendClientMessage(playerid, COLOR_YELLOW, "Extensão usada pelo outro jogador: Telefone");
			}
			case celular_extension:
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "Extensão usada pelo outro jogador: Celular");
			}
			default:
			{
			    TellUsing[PickupEntradaCasa[PickupCaller[PickupEntradaCasa[playerid]]]] = 1;
				PickupCaller[PickupEntradaCasa[PickupCaller[PickupEntradaCasa[playerid]]]] = playerid;
				SendClientMessage(playerid, COLOR_GRAY, "FATAL ERROR: A extensão do outro jogador não foi identificada!");
			}
		}
		TogglePlayerControllable(playerid,false);
		return 1;
	}
	if(strcmp(cmd, "/desligartelefone", true) == 0){
	    if(NaCasa[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma casa!");
	    if(TellUsing[PickupEntradaCasa[playerid]] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está atendendo nenhum telefone!");
		if(Atendente[PickupEntradaCasa[playerid]] != playerid) return SendClientMessage(playerid, COLOR_GRAY, "Não foi você que atendeu a chamada!");
		EmLigacao[playerid]=0;
		EmLigacao[PickupCaller[PickupEntradaCasa[playerid]]]=0;
		KillTimer(TempoCaixaMensagem[playerid][0]);
		KillTimer(TempoCaixaMensagem[PickupCaller[PickupEntradaCasa[playerid]]][0]);
		TelefoneTocando[PickupEntradaCasa[playerid]] = 0;
		extensao[playerid] = none_extension;
		TellUsing[PickupEntradaCasa[playerid]] = 0;
		TellUsing[PickupEntradaCasa[PickupCaller[PickupEntradaCasa[playerid]]]] = 0;
		TogglePlayerControllable(playerid,true);
		TogglePlayerControllable(PickupCaller[PickupEntradaCasa[playerid]],true);
		SendClientMessage(playerid, COLOR_WHITE, "Telefone desligado!");
		SendClientMessage(PickupCaller[PickupEntradaCasa[playerid]], COLOR_WHITE, "O outro jogador desligou o telefone!");
		if(extensao[PickupCaller[PickupEntradaCasa[playerid]]] == telefone_extension) Atendente[PickupEntradaCasa[PickupCaller[PickupEntradaCasa[playerid]]]] = INVALID_PLAYER_ID;
		PickupCaller[PickupEntradaCasa[playerid]] = INVALID_PLAYER_ID;
		Atendente[PickupEntradaCasa[playerid]] = INVALID_PLAYER_ID;
		return 1;
	}
	if(!strcmp(cmd, "/chamar",true)){
	    new tmp[256],cellowner[256],string[256];
	    tmp = strtok(cmdtext,idx);
	    if(pStats[playerid][PhoneNumb]==0){
	        SendClientMessage(playerid,COLOR_GRAY,"Você não tem celular!");
	        return 1;
		}
		if(!strlen(tmp)){
		    SendClientMessage(playerid,COLOR_GRAY,"Uso correto: /chamar [número]");
		    return 1;
		}
		if(pStats[playerid][GCell] == 1 || pStats[playerid][CofreCell] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Seu celular está guardado e desativado!");
		    return 1;
		}
		if(CellCredits[playerid] == 0){
		    SendClientMessage(playerid,COLOR_GRAY,"Você não tem créditos suficientes para originar uma chamada. Mínimo: 2");
		    return 1;
		}
		if(EmLigacao[playerid] == 1){
		    SendClientMessage(playerid,COLOR_GRAY,"Você já está em uma ligação!");
			return 1;
		}
		if(strval(tmp) == pStats[playerid][PhoneNumb]){
		    SendClientMessage(playerid, COLOR_GRAY, "Não pode ligar para você mesmo!");
		    return 1;
		}
		if(CelularBloqueado[playerid] == 1){
   			SendClientMessage(playerid, COLOR_GRAY, "Você não está com seu celular.");
			return 1;
		}
		new search,string_text[256],getpck;
		for(new i = 0; i < MAX_CASAS; i++){
	    	set(string_text,PickupFile(i));
	    	if(fexist(string_text)){
    			if(pckStats[i][TelefoneNumb] == strval(tmp)){
					search = 1;
					getpck = i;
					break;
				}
			}
		}
		if(strval(tmp) <= LastPN && !search){
		   	SendClientMessage(playerid,COLOR_GRAY,"Número inexistente.");
		   	return 1;
		}
		if(strval(tmp) < 300000){
			set(cellowner,CelularesNum[strval(tmp)-1000]);
			if(!IsStringAName(cellowner)){
		    	format(RecebedorMensagem[playerid],MAX_STRING,cellowner);
		    	SendClientMessage(playerid,COLOR_YELLOW,"Chamando...");
		    	TempoCaixaMensagem[playerid][0] = SetTimerEx("CaixaMensagem",10000,0,"d",playerid);
		    	return 1;
			}
			new calledid = IDName(cellowner);
			if((pStats[calledid][GCell] == 1 || pStats[calledid][CofreCell] == 1) && strval(tmp) < 300000){
		    	SendClientMessage(playerid, COLOR_GRAY, "O celular do outro jogador está desligado...");
		    	return 1;
			}
			if(EmLigacao[calledid] == 1){
			    SendClientMessage(playerid,COLOR_GRAY,"O jogador já está em uma ligação!");
			    return 1;
			}
			extensao[calledid] = celular_extension;
		    format(RecebedorMensagem[playerid],MAX_STRING,cellowner);
			SendClientMessage(calledid,COLOR_JUIZ,"Seu celular está tocando! Para atende-lo, digite /atender. Caso contrário, digite /recusarchamada.");
			format(string,sizeof(string),"Originador da chamada: %s",PlayerName(playerid));
			SendClientMessage(calledid,COLOR_GRAY,string);
			Chamando[playerid]=1;
			Chamando[calledid]=1;
			CalledID[playerid]=calledid;
			CalledID[calledid]=playerid;
			CobrancaCall[playerid]=1;
			CobrancaCall[calledid]=0;
		}
		else{
		    set(cellowner,pckStats[getpck][PickupDono]);
			if(!IsStringAName(cellowner)){
		    	format(RecebedorMensagem[playerid],MAX_STRING,cellowner);
		    	SendClientMessage(playerid,COLOR_YELLOW,"Chamando...");
		    	TempoCaixaMensagem[playerid][0] = SetTimerEx("CaixaMensagem",10000,0,"d",playerid);
		    	return 1;
			}
			new presult;
		    for(new p = 0; p < MAX_CASAS; p++){
		        if(strval(tmp) == pckStats[p][TelefoneNumb]){
		            presult = p;
		            break;
				}
			}
			if(presult == PickupEntradaCasa[playerid]){
			    SendClientMessage(playerid, COLOR_GRAY, "Tentando ligar para a casa que você está? Impossível aqui!");
			    return 1;
			}
			if(TellUsing[presult] == 1 || TelefoneTocando[presult] == 1){
			    SendClientMessage(playerid, COLOR_GRAY, "O telefone dessa casa está ocupado!");
			    return 1;
			}
            TelefoneTocando[presult] = 1;
			PickupCaller[presult] = playerid;
			format(RecebedorMensagem[playerid],MAX_STRING,pckStats[PickupEntradaCasa[playerid]][PickupDono]);
		    for(new i = 0; i < SLOTS2; i++){
		        if(NaCasa[i] == 1 && PickupEntradaCasa[i] == presult){
		            SendClientMessage(i, COLOR_JUIZ, "Telefone tocando... Para atender digite /atendertelefone");
				}
			}
		}
		extensao[playerid] = celular_extension;
		TempoCaixaMensagem[playerid][0] = SetTimerEx("CaixaMensagem",20000,0,"d",playerid);
		SendClientMessage(playerid,COLOR_YELLOW,"Chamando...");
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
		return 1;
	}
	if(!strcmp(cmd, "/chamar9090",true)){
	    new tmp[256],cellowner[256],str[256];
	    tmp = strtok(cmdtext,idx);
	    if(pStats[playerid][PhoneNumb]==0){
	        SendClientMessage(playerid,COLOR_GRAY,"Você não tem celular!");
	        return 1;
		}
		if(!strlen(tmp)){
		    SendClientMessage(playerid,COLOR_GRAY,"Uso correto: /chamar [número]");
		    return 1;
		}
		if(pStats[playerid][GCell] == 1 || pStats[playerid][CofreCell] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Seu celular está guardado e desativado!");
		    return 1;
		}
		if(CellCredits[playerid] == 0){
		    SendClientMessage(playerid,COLOR_GRAY,"Você não tem créditos suficientes para originar uma chamada. Mínimo: 2");
		    return 1;
		}
		if(EmLigacao[playerid] == 1){
		    SendClientMessage(playerid,COLOR_GRAY,"Você já está em uma ligação!");
			return 1;
		}
		if(strval(tmp) == pStats[playerid][PhoneNumb]){
		    SendClientMessage(playerid, COLOR_GRAY, "Não pode ligar para você mesmo!");
		    return 1;
		}
		if(CelularBloqueado[playerid] == 1){
   			SendClientMessage(playerid, COLOR_GRAY, "Você não está com seu celular.");
			return 1;
		}
		new search,string_text[256],getpck;
		for(new i = 0; i < MAX_CASAS; i++){
		    set(string_text,PickupFile(i));
	    	if(fexist(string_text)){
    			if(pckStats[i][TelefoneNumb] == strval(tmp)){
					search = 1;
					getpck = i;
					break;
				}
			}
		}
		if(strval(tmp) <= LastPN && !search){
		   	SendClientMessage(playerid,COLOR_GRAY,"Número inexistente.");
		   	return 1;
		}
		if(strval(tmp) < 300000){
			set(cellowner,CelularesNum[strval(tmp)-1000]);
			if(!IsStringAName(cellowner)){
		    	format(RecebedorMensagem[playerid],MAX_STRING,cellowner);
		    	SendClientMessage(playerid,COLOR_YELLOW,"Chamando...");
		    	TempoCaixaMensagem[playerid][0] = SetTimerEx("CaixaMensagem",10000,0,"d",playerid);
		    	return 1;
			}
			new calledid = IDName(cellowner);
			if((pStats[calledid][GCell] == 1 || pStats[calledid][CofreCell] == 1) && strval(tmp) < 300000){
		    	SendClientMessage(playerid, COLOR_GRAY, "O celular do outro jogador está desligado...");
		    	return 1;
			}
			if(EmLigacao[calledid] == 1){
			    SendClientMessage(playerid,COLOR_GRAY,"O jogador já está em uma ligação!");
			    return 1;
			}
			extensao[playerid] = celular_extension;
			TempoCaixaMensagem[playerid][0] = SetTimerEx("CaixaMensagem",30000,0,"d",playerid);
			SendClientMessage(playerid,COLOR_JUIZ,"Chamando...");
			SendClientMessage(calledid,COLOR_JUIZ,"Seu celular está recebendo uma Ligação à cobrar! Para atendê-la, digite /atendercobrar. Caso contrário, digite /recusarchamada.");
			format(str,256,"Originador da chamada: %s",PlayerName(playerid));
			SendClientMessage(calledid,COLOR_GRAY,str);
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
			Chamando[playerid]=1;
			Chamando[calledid]=1;
			CalledID[playerid]=calledid;
			CalledID[calledid]=playerid;
			CobrancaCall[playerid]=1;
			CobrancaCall[calledid]=0;
		}
		else{
		    set(cellowner,pckStats[getpck][PickupDono]);
			if(!IsStringAName(cellowner)){
		    	format(RecebedorMensagem[playerid],MAX_STRING,cellowner);
		    	SendClientMessage(playerid,COLOR_YELLOW,"Chamando...");
		    	TempoCaixaMensagem[playerid][0] = SetTimerEx("CaixaMensagem",10000,0,"d",playerid);
		    	return 1;
			}
			new presult;
		    for(new p = 0; p < MAX_CASAS; p++){
		        if(strval(tmp) == pckStats[p][TelefoneNumb]){
		            presult = p;
		            break;
				}
			}
			if(presult == PickupEntradaCasa[playerid]){
			    SendClientMessage(playerid, COLOR_GRAY, "Tentando ligar para a casa que você está? Impossível aqui!");
			    return 1;
			}
			if(TellUsing[presult] == 1 || TelefoneTocando[presult] == 1){
			    SendClientMessage(playerid, COLOR_GRAY, "O telefone dessa casa está ocupado!");
			    return 1;
			}
            TelefoneTocando[presult] = 1;
			PickupCaller[presult] = playerid;
			format(RecebedorMensagem[playerid],MAX_STRING,pckStats[PickupEntradaCasa[playerid]][PickupDono]);
		    for(new i = 0; i < SLOTS2; i++){
		        if(NaCasa[i] == 1 && PickupEntradaCasa[i] == presult){
		            SendClientMessage(i, COLOR_JUIZ, "Telefone tocando... Para atender digite /atendertelefone");
				}
			}
		}
		extensao[playerid] = celular_extension;
		TempoCaixaMensagem[playerid][0] = SetTimerEx("CaixaMensagem",20000,0,"d",playerid);
		SendClientMessage(playerid,COLOR_JUIZ,"Chamando...");
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
		return 1;
	}
	if(!strcmp(cmd,"/atendercobrar",true)){
	    if(Chamando[playerid]==0){
	        SendClientMessage(playerid,COLOR_GRAY,"Ninguém está lhe chamando!");
	        return 1;
		}
		extensao[playerid] = celular_extension;
		SendClientMessage(playerid,COLOR_GRAY,"Pronto!");
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
		SendClientMessage(CalledID[playerid],COLOR_GRAY,"Quem você chamava aceitou sua ligação! Pode conversar!");
		Chamando[playerid]=0;
		Chamando[CalledID[playerid]]=0;
		EmLigacao[playerid]=1;
		EmLigacao[CalledID[playerid]]=1;
		KillTimer(TempoCaixaMensagem[playerid][0]);
		KillTimer(TempoCaixaMensagem[CalledID[playerid]][0]);
		if(CobrancaCall[playerid] == 0){
			CellTimer[playerid]=SetTimerEx("AvancoLigacao",60000,false,"dd",CalledID[playerid],playerid);
		} else {
		    CellTimer[CalledID[playerid]]=SetTimerEx("AvancoLigacao",60000,false,"dd",playerid,CalledID[playerid]);
		}
		return 1;
	}
	if(!strcmp(cmd,"/atender",true)){
	    if(Chamando[playerid]==0){
	        SendClientMessage(playerid,COLOR_GRAY,"Ninguém está lhe chamando!");
	        return 1;
		}
		extensao[playerid] = celular_extension;
		SendClientMessage(playerid,COLOR_GRAY,"Pronto!");
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
		SendClientMessage(playerid, COLOR_WHITE, "Telefone atendido!");
		SendClientMessage(CalledID[playerid],COLOR_GRAY,"Quem você chamava aceitou sua ligação! Pode conversar!");
		KillTimer(TocandoBIP[playerid]);
		Chamando[playerid]=0;
		Chamando[CalledID[playerid]]=0;
		EmLigacao[playerid]=1;
		EmLigacao[CalledID[playerid]]=1;
		KillTimer(TempoCaixaMensagem[playerid][0]);
		KillTimer(TempoCaixaMensagem[CalledID[playerid]][0]);
        switch(extensao[CalledID[playerid]]){
			case telefone_extension:
			{
				TellUsing[PickupEntradaCasa[extensao[CalledID[playerid]]]] = 1;
				PickupCaller[PickupEntradaCasa[extensao[CalledID[playerid]]]] = playerid;
				SendClientMessage(playerid, COLOR_JUIZ, "Extensão usada pelo outro jogador: Telefone");
			}
			case celular_extension:
			{
			    SendClientMessage(playerid, COLOR_JUIZ, "Extensão usada pelo outro jogador: Celular");
			}
			default:
			{
			    TellUsing[PickupEntradaCasa[extensao[CalledID[playerid]]]] = 1;
				PickupCaller[PickupEntradaCasa[extensao[CalledID[playerid]]]] = playerid;
				SendClientMessage(playerid, COLOR_GRAY, "FATAL ERROR: A extensão do outro jogador não foi identificada!");
			}
		}
		if(CobrancaCall[playerid] == 0){
			CellTimer[CalledID[playerid]]=SetTimerEx("AvancoLigacao",60000,false,"dd",CalledID[playerid],playerid);
		} else {
		    CellTimer[playerid]=SetTimerEx("AvancoLigacao",60000,false,"dd",playerid,CalledID[playerid]);
		}
		return 1;
	}
	if(!strcmp(cmd,"/recusarchamada",true)){
	    if(Chamando[playerid]==0){
	        SendClientMessage(playerid,COLOR_GRAY,"Ninguém está lhe chamando!");
			return 1;
		}
		extensao[playerid] = none_extension;
		SendClientMessage(playerid,COLOR_JUIZ,"Chamada cancelada!");
		SendClientMessage(CalledID[playerid],COLOR_GRAY,"Seu pedido de ligação foi recusado!");
		SetPlayerSpecialAction(CalledID[playerid],SPECIAL_ACTION_STOPUSECELLPHONE);
		Chamando[playerid]=0;
		Chamando[CalledID[playerid]]=0;
		KillTimer(TempoCaixaMensagem[playerid][0]);
		KillTimer(TempoCaixaMensagem[CalledID[playerid]][0]);
		return 1;
	}
	if(!strcmp(cmd,"/desligar",true)){
	    if(EmLigacao[playerid] == 0){
	        SendClientMessage(playerid,COLOR_GRAY,"Você não está em uma ligação!");
	        return 1;
		}
		if(CobrancaCall[playerid] == 0){
		    KillTimer(CellTimer[CalledID[playerid]]);
		}
		if(CobrancaCall[playerid] == 1){
		    KillTimer(CellTimer[playerid]);
		}
		extensao[playerid] = none_extension;
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		SetPlayerSpecialAction(CalledID[playerid],SPECIAL_ACTION_STOPUSECELLPHONE);
		SendClientMessage(playerid,COLOR_GRAY,"Chamada desligada!");
		SendClientMessage(CalledID[playerid],COLOR_GRAY,"Chamada desligada");
		if(extensao[PickupCaller[PickupEntradaCasa[playerid]]] == telefone_extension) Atendente[PickupEntradaCasa[PickupCaller[PickupEntradaCasa[playerid]]]] = INVALID_PLAYER_ID;
		EmLigacao[playerid]=0;
		EmLigacao[CalledID[playerid]]=0;
		KillTimer(TempoCaixaMensagem[playerid][0]);
		KillTimer(TempoCaixaMensagem[CalledID[playerid]][0]);
		return 1;
	}
	if(strcmp(cmd, "/sms", true) == 0){
	 	new tmp[256],tmp2[256],cellowner[256];
	 	new string[256];
		tmp = strtok(cmdtext, idx);
		if(pStats[playerid][PhoneNumb] == 0){
			SendClientMessage(playerid, COLOR_YELLOW, "Você não tem celular!");
			return 1;
		}
		if(!strlen(tmp)){
			SendClientMessage(playerid,COLOR_GRAY,"Uso: /sms [número-celular] [texto]");
			return 1;
		}
		strmid(tmp2,cmdtext,10,256);
		if(!strlen(tmp2)){
		    SendClientMessage(playerid,COLOR_GRAY,"Uso: /sms [número-celular] [texto]");
		    return 1;
		}
		if(strval(tmp) < LastPN){
		    SendClientMessage(playerid,COLOR_YELLOW,"Número de celular inexistente");
		    return 1;
		}
		if(pStats[playerid][GCell] == 1 || pStats[playerid][CofreCell] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Seu celular está guardado e desativado!");
		    return 1;
		}
		set(cellowner,CelularesNum[strval(tmp)-1000]);
		if(!IsStringAName(cellowner)){
		    SendClientMessage(playerid,COLOR_GRAY,"O proprietário desse celular não está conectado!");
		    return 1;
		}
		if(CellCredits[playerid] == 0){
		    SendClientMessage(playerid,COLOR_GRAY,"Você não tem créditos o suficiente para mandar um SMS.");
		    return 1;
		}
		new calledid = IDName(cellowner);
		if((pStats[calledid][GCell] == 1 || pStats[calledid][CofreCell] == 1) && strval(tmp) < 300000){
		   	SendClientMessage(playerid, COLOR_GRAY, "O celular do outro jogador está desligado...");
		   	return 1;
		}
		CellCredits[playerid]--;
		SendClientMessage(calledid,COLOR_JUIZ,"Nova mensagem de texto recebida!");
		format(string, sizeof(string), "De: %s (%d). Conteúdo: %s", PlayerName(playerid), pStats[playerid][PhoneNumb],tmp2);
		SendClientMessage(calledid,COLOR_WHITE,string);
		SendClientMessage(playerid, COLOR_WHITE, "Mensagem Enviada");
		format(string, sizeof(string), "Agora lhe sobraram %d créditos.", CellCredits[playerid]);
		SendClientMessage(playerid, COLOR_JUIZ, string);
		format(string,sizeof(string), "SMS de %s para %s: %s",PlayerName(playerid),PlayerName(calledid),tmp2);
		writelog(string);
		return 1;
	}
    if(strcmp(cmd, "/recarga", true) == 0) {
		new tmp[256];
		new creditos;
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_WHITE, "Uso: /recarga [quantidade]");
			return 1;
		}
	    creditos = strval(tmp);
	    if(creditos > GetPlayerMoney(playerid)){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não tem todo esse dinheiro.");
			return 1;
		}
		if(pStats[playerid][PhoneNumb] == 0){
		    SendClientMessage(playerid,COLOR_GRAY,"Você não tem celular!");
		    return 1;
		}
		if(pStats[playerid][GCell] == 1 || pStats[playerid][CofreCell] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Seu celular está guardado e desativado!");
		    return 1;
		}
	    if(AreaCreditos[playerid] == 1){
	        if(creditos + CellCredits[playerid] < 100){
	            CellCredits[playerid] = creditos+CellCredits[playerid];
	            pStats[playerid][CreditosCell] = CellCredits[playerid];
			    format(tmp, sizeof(tmp), "Seu celular foi recarregado. Um total de %d créditos foi colocado.", creditos);
				SendClientMessage(playerid, COLOR_JUIZ, tmp);
				AddPlayerMoney(playerid, - creditos, -1);
				return 1;
			}
			if(creditos + pStats[playerid][CreditosCell] > 99){
			    new quantia;
			    quantia = 100 - CellCredits[playerid];
			    CellCredits[playerid] = 100;
			    pStats[playerid][CreditosCell] = 100;
				format(tmp, sizeof(tmp),"Seu celular foi recarregado por completo. Um total de %d créditos foi colocado.", quantia);
				SendClientMessage(playerid, COLOR_GREEN, tmp);
				AddPlayerMoney(playerid, - quantia, -1);
				return 1;
			}
			return 1;
		}
		else{
			SendClientMessage(playerid, COLOR_YELLOW, "Todas as lojas 24/7 tem a função de /recarga pra o celular");
			return 1;
		}
	}

	if(strcmp(cmd, "/cellcreditos", true) == 0) {
 		new string[256];
		if(pStats[playerid][PhoneNumb] == 0){
		    SendClientMessage(playerid,COLOR_GRAY,"Você não tem celular!");
		    return 1;
		}
		if(pStats[playerid][GCell] == 1 || pStats[playerid][CofreCell] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Seu celular está guardado e desativado!");
		    return 1;
		}
		else{
		    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
			SetTimerEx("AcaoEspecial",6000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
			format(string, sizeof(string), "[Virtual Telefonia]: Você tem %d créditos.", pStats[playerid][CreditosCell], playerid);
			SendClientMessage(playerid, COLOR_JUIZ, string);
			SetTimerEx("AcaoEspecial",6000,0,"dxs",playerid,COLOR_COP_SWAT,string);
			return 1;
		}
	}

	if (strcmp(cmd, "/numero", true) == 0){
	    new tmp[256],encontrado;
	    new string[256];
		if (pStats[playerid][Agenda] == 1)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAD1, "USO: /numero [nome]");
				return 1;
			}
			for(new i = 1000; i < LastPN; i++){
				if(compare(CelularesNum[i-1000],tmp)){
					encontrado=1;
					format(string,256,"Nome:%s, Número:%s",tmp,i);
					SendClientMessage(playerid,COLOR_JUIZ,string);
					return 1;
				}
			}
			if(!encontrado){
			    SendClientMessage(playerid,COLOR_GRAY,"Não foi encontrado nenhum registro para seus critérios de pesquisa.");
			    return 1;
			}
		} else {
			SendClientMessage(playerid, COLOR_GRAD1, "Você não tem uma agenda telefônica!");
			return 1;
		}
	}
	if (strcmp(cmd, "/agenda", true) == 0){
		if(AreaCreditos[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está na loja de utilidades 1,99");
		    return 1;
		}
        if(GetPlayerMoney(playerid) < 500){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para pagar. CUSTO: $500");
			return 1;
		}
		if(pStats[playerid][Agenda] == 1){
			SendClientMessage(playerid, COLOR_WHITE, "Você já tem agenda telefônica.");
			return 1;
		}
		new string[256];
   		AddPlayerMoney(playerid,-500,-1);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		pStats[playerid][Agenda] = 1;
		format(string, sizeof(string), "Agenda Telefônica comprada, agora você poderá ver números telefônicos.");
		SendClientMessage(playerid, COLOR_JUIZ, string);
		SendClientMessage(playerid, COLOR_WHITE, "AVISO: Coloque /numero <nome>.");
		return 1;
	}
	if(strcmp(cmd, "/rastrearcelular", true)==0){
	    new tmp[256],cellowner[256],plid;
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /rastrearcelular [número]");
		if(pStats[playerid][PhoneNumb] == 0){
		    SendClientMessage(playerid,COLOR_GRAY,"Você não tem celular!");
		    return 1;
		}
		if(pStats[playerid][GCell] == 1 || pStats[playerid][CofreCell] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Seu celular está guardado e desativado!");
		    return 1;
		}
		cellowner = CelularesNum[strval(tmp)-1000];
		if(!IsStringAName(cellowner)){
			SendClientMessage(playerid, COLOR_GRAY, "O proprietário desse celular não se encontra no momento!");
			return 1;
		}
		plid = IDName(cellowner);
		if((pStats[plid][GCell] == 1 || pStats[plid][CofreCell] == 1)){
 			SendClientMessage(playerid, COLOR_GRAY, "O celular do outro jogador está desligado...");
		   	return 1;
		}
		if(Rastreando[playerid] == 1){
			SendClientMessage(playerid, COLOR_GRAY, "Você já está rastreando um jogador!");
			return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_LIXEIRO, "Pedido de rastreamento feito, aguarde a confirmação...");
			new msg[256];
			format(msg,sizeof(msg),"%s está pedindo para ativar o rastreador em sua posição!",PlayerName(playerid));
			SendClientMessage(plid, COLOR_LIXEIRO, msg);
			SendClientMessage(plid, COLOR_WHITE, "Para confirmar o pedido digite /confirmar , caso contrário /naoconfirmar");
			PedidoRastreador2[plid] = 1;
			JogadorRastreamento[plid] = playerid;
			return 1;
		}
	}
	if(strcmp(cmd, "/confirmar", true) == 0){
		if(PedidoRastreador2[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Ninguém solicitou ativar o rastreador em sua posição!");
		    return 1;
		}
		if(!IsPlayerConnected(JogadorRastreamento[playerid])){
		    PedidoRastreador2[playerid] = 0;
			SendClientMessage(playerid, COLOR_GRAY, "O jogador desconectou-se, rastreamento cancelado!");
			return 1;
		}
		TempoRastreamento[JogadorRastreamento[playerid]] = SetTimerEx("RastreandoJogador2",1000,0,"dd",JogadorRastreamento[playerid],playerid);
		SendClientMessage(playerid, COLOR_LIXEIRO, "Confirmado! Agora o jogador terá contato com você pelo celular!");
		SendClientMessage(JogadorRastreamento[playerid], COLOR_LIXEIRO, "O jogador confirmou seu pedido para rastrea-lo, você terá contato com ele pelo celular!");
		PedidoRastreador2[playerid] = 0;
		RastreandoJogador[JogadorRastreamento[playerid]] = 1;
		return 1;
	}
	if(strcmp(cmd, "/naoconfirmar", true) == 0){
	    if(PedidoRastreador2[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Ninguém solicitou ativar o rastreador em sua posição!");
		    return 1;
		}
		PedidoRastreador2[playerid] = 0;
		SendClientMessage(playerid, COLOR_LIXEIRO, "Autorização não confirmada!");
		SendClientMessage(JogadorRastreamento[playerid], COLOR_LIXEIRO, "O jogador não confirmou seu pedido para rastrea-lo!");
		return 1;
	}
	if(strcmp(cmd, "/desligarrastreador",true) == 0){
	    if(RastreandoJogador[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está rastreando ninguém!");
		DesligarRastreador(playerid);
		return 1;
	}
    if(strcmp(cmd, "/roubarcelular", true)==0){
        if(Profissao[playerid] != ASSALTANTE) return SendClientMessage(playerid, COLOR_GRAY, "Você não é Assaltante!");
        new tmp[256];
		new plid;
		tmp = strtok(cmdtext,idx);
		plid = strval(tmp);
		if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_GRAY, "USO: /roubarcelular [id]");
			return 1;
		}
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador está desconectado!");
		    return 1;
		}
		if(GetDistanceBetweenPlayers(playerid,plid) > 4){
		    SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto...");
		    return 1;
		}
		if(IsPlayerInAnyVehicle(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "O jogador tem que estar fora do veículo!");
		    return 1;
		}
		if(pStats[playerid][PhoneNumb] != 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você já tem celular!");
		    return 1;
		}
		if(pStats[plid][PhoneNumb] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não tem celular!");
		    return 1;
		}
		if(pStats[plid][GCell] == 1 || pStats[plid][CofreCell] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "O celular desse jogador está guardado!");
		    return 1;
		}
		else{
        	for(new p=1000; p<LastPN; p++){
        	    if(compare(PlayerName(plid),CelularesNum[p-1000])){
					new string[256];
					format(string,sizeof(string),"Celular roubado, seu novo número = %d",p);
					SendClientMessage(playerid, COLOR_ASSALTANTE, string);
					set(CelularesNum[p-1000],PlayerName(playerid));
					format(string,sizeof(string),"%s ROUBOU SEU CELULAR!!! Avise a policia com /190");
					SendClientMessage(plid, COLOR_GRAY, string);
					pStats[plid][PhoneNumb] = 0;
					pStats[playerid][PhoneNumb] = p;
				}
			}
			AcrescentarExPoints(playerid,1);
			return 1;
		}
	}
	if(strcmp(cmd, "/votarkick", true) == 0){
	    new tmp[256];
	    new string[256];
		tmp = strtok(cmdtext, idx);
	 	if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_GRAD1, "USO: /votarkick [id do jogador/Parte do nome]");
			return 1;
		}
		if(IsStringAName(tmp)){
			giveplayerid = IDName(tmp);
		}
		else
		{
			giveplayerid = strval(tmp);
		}
		if(IsPlayerAdmin(giveplayerid)){
			SendClientMessage(playerid, COLOR_GRAD1, "Administradores não podem ser tirados do jogo");
			return 1;
		}
		if (IsPlayerConnected(giveplayerid) == 1){
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			VoteKick[giveplayerid] = 1;
			KickVote[giveplayerid] = 1;
			format(string, sizeof(string), "[VOTEKICK] %s comecou uma votacao para tirar %s do jogo, coloque /votar %d pra votar [VOTEKICK]",sendername, giveplayer,giveplayerid);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			SendClientMessageToAll(COLOR_ASSALTANTE, string);
			SetTimer("VoteKickTimer", 20000, 1);
		}
		else
		{
				format(string, sizeof(string), "%d não e um jogador ativo.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/votar", true) == 0){
	    new string[256];
	    new tmp[256];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_GRAD1, "USO: /votar [ID/Nome do jogador]");
			return 1;
		}
		if(IsStringAName(tmp)){
			giveplayerid = IDName(tmp);
		}
		else
		{
			giveplayerid = strval(tmp);
		}
		if (VoteKick[giveplayerid] == 0){
			SendClientMessage(playerid, COLOR_GRAD1, "Não há voto em progresso para esse jogador");
			return 1;
		}
		if (LastVote[playerid] == giveplayerid){
			SendClientMessage(playerid, COLOR_GRAY, "Você pode votar somente para 1 jogador");
			return 1;
		}
		if (IsPlayerConnected(giveplayerid))
		{
			KickVote[giveplayerid]++;
			LastVote[playerid] = giveplayerid;
			SendClientMessage(playerid, COLOR_GREEN, "Seu voto foi processado, obrigado por votar!");
		}
		else
		{
			format(string, sizeof(string), "%d não e um jogador ativo.", giveplayerid);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return 1;
	}

//COMANDOS PARA TODOS JOGADORES

	if(strcmp(cmd,"/salvardados",true) == 0){
	    if(IsPlayerConnected(playerid) && Logado[playerid]==1)
	    {
	        if(!NoPL[playerid] && CarregouArmas[playerid] == 1) SaveWeapons(playerid);
	        SavePlayer(playerid);
	        SendClientMessage(playerid, COLOR_JUIZ, "Dados salvos...");
	        return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Você deve estar logado para usar esse comando...");
		    return 1;
		}
	}
	if(strcmp(cmd,"/veranuncio",true) == 0 && IsPlayerAdmin(playerid)){
	    EnviarAnuncio(playerid);
	    return 1;
	}
    if(strcmp(cmd,"/mandarmatar",true) == 0){
        new tmp[256];
		new plid,valor;
		tmp = strtok(cmdtext,idx);
		plid = strval(tmp);
		if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_GRAY, "USO: /mandarmatar [id] [valor]");
			return 1;
		}
		tmp = strtok(cmdtext,idx);
		valor = strval(tmp);
		if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_GRAY, "USO: /mandarmatar [id] [valor]");
			return 1;
		}
		if(!IsPlayerConnected(plid)){
			SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
			return 1;
		}
		if(GetPlayerMoney(playerid) < valor){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não possui esse dinheiro!");
		    return 1;
		}
		if(Profissao[playerid] == ASSASSINO){
		    SendClientMessage(playerid, COLOR_GRAY, "Você é assassino! Não pode colocar a cabeça de alguém em prêmio.");
		    return 1;
		}
		if(plid == playerid){
		    SendClientMessage(playerid, COLOR_GRAY, "WHAT?! Está querendo se matar?");
		    return 1;
		}
		if(Profissao[plid] == ASSASSINO){
		    SendClientMessage(playerid, COLOR_GRAY, "Está querendo mexer com os assassinos? Se quiser matar um, chame outro via celular.");
		    return 1;
		}
		else{
		    pStats[plid][ValorCabeca] += valor;
		    SendClientMessage(playerid, COLOR_GREEN, "Prêmio colocado! Se a polícia descobrir que você ofereceu essa grana,");
		    SendClientMessage(playerid, COLOR_GREEN, "você irá ser preso... CUIDADO!!");
		    for(new i=0; i<SLOTS2; i++){
				if(Profissao[i] == ASSASSINO || IsPlayerAdmin(i)){
		    		new str[256];
		    		format(str,sizeof(str),"Um indivíduo está oferecendo $%d pela cabeça de %s",valor,PlayerName(plid));
					SendClientMessage(i, COLOR_ASSASSINO, str);
					format(str,sizeof(str),"Agora a cabeça de %s está valendo $%d",PlayerName(plid),pStats[plid][ValorCabeca]);
					SendClientMessage(i, COLOR_ASSASSINO, str);
		        }
			}
			new rand = random(5);
			if(rand == 0 || rand == 1 || rand == 2){
			    SendClientMessage(playerid, COLOR_GREEN, "Sorte sua... A polícia nem chegou à saber que você colocou esse prêmio!");
			}
			else{
			    SendClientMessage(playerid, COLOR_GRAY, "Você acabar de se dar mal... Os cops descobriram o seu prêmio! Agora você está em cana...");
				new str[256];
				format(str,sizeof(str),"[CENTRAL] Todas as unidades. [Crime: Suposta Tentativa de Homicídio] [Possível Suspeito: %s] [Possível Vítima: %s].",PlayerName(playerid), PlayerName(plid));
				SendClientMessageToAll(COLOR_WHITE, str);
				format(str,sizeof(str),"[CENTRAL] [Valor Oferecido para a execução: $%d] Vá atrás do mesmo antes que isso ocorra!, câmbio desligo",pStats[plid][ValorCabeca]);
				SendClientMessageToAll(COLOR_WHITE, str);
			}
			new rand2 = random(5);
			if(rand2 == 0 || rand2 == 1 || rand2 == 2){
			}
			else{
				new str[256];
				format(str,sizeof(str),"New Paper's Life: EXTRA EXTRA, alguém está querendo matar %s! Não sabemos se a polícia já sabe.",PlayerName(plid));
				SendClientMessageToAll(COLOR_WHITE, str);
			}
			return 1;
		}
	}
	if(strcmp(cmd, "/desativarcheckpoint", true) == 0){
		if(CPAtivado[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Seu CheckPoint não está ativado!");
		    return 1;
		}
		CPAtivado[playerid] = 0;
	    DisablePlayerRaceCheckpoint(playerid);
	    SendClientMessage(playerid, COLOR_WHITE, "CheckPoint desativado...");
	    return 1;
	}
	if(strcmp(cmd, "/motorista", true) == 0){
		new string[256];
		if(!IsHaveProf(MOTORISTA_PARTICULAR)){
		    SendClientMessage(playerid, COLOR_GRAY, "LuxLimosine: Não há nenhum motorista ativo no momento para solicitarmos...");
			return 1;
		}
		for(new i = 0; i < SLOTS2; i ++){
			if(Profissao[i] == MOTORISTA_PARTICULAR || IsPlayerAdmin(i)){
			    format(string,sizeof(string),"LuxLimosine: %s está solicitando um motorista particular!",PlayerName(playerid));
				SendClientMessage(i, COLOR_MOTORISTA_PARTICULAR, string);
			}
		}
		SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "LuxLimosine: Obrigado por prestar nossos serviços senhor, os motoristas foram informados!");
		format(string,sizeof(string),"[INFO] %s solicitou um motorista particular...",PlayerName(playerid));
		writelog(string);
		return 1;
	}
	if(strcmp(cmd, "/taxi", true)==0 || strcmp(cmd, "/taxiaereo", true)==0 || strcmp(cmd, "/mecanico", true)==0 || strcmp(cmd, "/diskdroga", true)==0 || strcmp(cmd, "/frentista", true)==0 || strcmp(cmd,"/diskdroga",true)==0){
	    SendClientMessage(playerid, COLOR_PESCADOR, "Esse comando foi desabilitado agora está todo embotido em um só:");
	    SendClientMessage(playerid, COLOR_PESCADOR, "Para chamar um taxi, taxiaereo, mecanico, frentista, diskdroga. Basta utilizar:");
	    SendClientMessage(playerid, COLOR_PESCADOR, "/servico [taxi, taxiaereo, mecanico, diskdroga, frentista, diskarma]");
	    return 1;
	}
	if(strcmp(cmd, "/servico", true)==0){
		if(CelularBloqueado[playerid] == 1){
   			SendClientMessage(playerid, COLOR_GRAY, "Você não está com seu celular.");
			return 1;
		}
	    new string[256];
	    new tmp[256];
	    new Float:X,Float:Y,Float:Z;
	    tmp = strtok(cmdtext, idx);
		GetPlayerPos(playerid,X,Y,Z);
		if(compare(tmp,"taxi")){
     		if(IsHaveProf(TAXISTA) || IsHaveProf(MOTOTAXI)){
     		    SendClientMessage(playerid, COLOR_TAXISTA, "Os taxistas foram informados.");
     	    	for(new i=0; i<SLOTS2; i++){
			    	if(Profissao[i] == TAXISTA || Profissao[i] == MOTOTAXI){
						GetPlayerName(playerid,name,sizeof(name));
						format(string,sizeof(string),"%s chamou um taxi",name);
						SendClientMessage(i, COLOR_TAXISTA, string);
						SendClientMessage(i, COLOR_TAXISTA, "Foi marcado um CheckPoint em seu radar, siga-o para ir até o jogador!");
						SendClientMessage(i, COLOR_WHITE,   "Para desativa-lo digite /desativarcheckpoint");
						SetPlayerRaceCheckpoint(i,1,X,Y,Z,0.0,0.0,0.0,2.0);
						CPAtivado[i] = 1;
						format(string,sizeof(string),"[INFO] %s pediu um taxi.",PlayerName(playerid));
						writelog(string);
			        }
				}
			} else {
			   	SendClientMessage(playerid, COLOR_DESEMPREGADO, "A Companhia de Taxi não encontrou nenhum Taxista ou Mototaxista. Por favor tente mais tarde.");
				return 1;
			}
 		} else if(compare(tmp,"taxiaereo")){
			if(IsHaveProf(TAXI_AEREO)){
			    SendClientMessage(playerid, COLOR_TAXI_AEREO, "Os pilotos já foram informados.");
    			for(new i=0; i<SLOTS2; i++){
					if(Profissao[i] == TAXI_AEREO){
						GetPlayerName(playerid,name,sizeof(name));
						format(string,sizeof(string),"%s chamou um taxi aéreo",name);
						SendClientMessage(i, COLOR_TAXI_AEREO, string);
						SendClientMessage(i, COLOR_TAXI_AEREO, "Foi marcado um CheckPoint em seu radar, siga-o para ir até o jogador!");
						SendClientMessage(i, COLOR_WHITE,      "Para desativa-lo digite /desativarcheckpoint");
						SetPlayerRaceCheckpoint(i,1,X,Y,Z,0.0,0.0,0.0,2.0);
						CPAtivado[i] = 1;
						format(string,sizeof(string),"[INFO] %s pediu um taxi aéreo.",PlayerName(playerid));
						writelog(string);
			        }
		   		}
			} else {
		    	SendClientMessage(playerid, COLOR_DESEMPREGADO, "A Empresa Aérea não encontrou nenhum Piloto. Por favor tente mais tarde.");
				return 1;
			}
		} else if(compare(tmp,"diskdroga")){
			if(!IsHaveProf(TRAFICANTE) && !IsHaveProf(LIDER_DE_TRAFICO)){
				SendClientMessage(playerid, COLOR_DESEMPREGADO, "[MORRO] Maluco num tem ninguém aqui pra te entrega droga agora...");
				return 1;
			}
			SendClientMessage(playerid, COLOR_TRAFICANTE, "[MORRO] A droga tá chegando ai, vai preparando pra se chapa!");
			format(string,sizeof(string),"%s está pedindo uma droga... Vá até ele e entregue!",PlayerName(playerid));
			for(new i=0; i<SLOTS2; i++){
			    if(Profissao[i] == TRAFICANTE || Profissao[i] == LIDER_DE_TRAFICO){
					SendClientMessage(i, COLOR_TRAFICANTE, string);
				}
			}
			format(string,sizeof(string),"[INFO] %s pediu uma droga.");
			writelog(string);
        } else if(compare(tmp,"mecanico")){
			if(!IsHaveProf(MECANICO)){
				SendClientMessage(playerid, COLOR_DESEMPREGADO, "[OFICINA] Sinto muito, não há nenhum mecânico disponível no momento!");
				return 1;
			}
			SendClientMessage(playerid, COLOR_MECANICO, "Reboque/Mecânico chamado.");
			format(string,sizeof(string),"%s está chamando um mecânico, rápido vá até ele...",PlayerName(playerid));
			for(new i=0; i<SLOTS2; i++){
			    if(Profissao[i] == MECANICO){
					SendClientMessage(i, COLOR_MECANICO, string);
				}
			}
			format(string,sizeof(string),"[INFO] %s chamou um mecanico.");
			writelog(string);
        } else if(compare(tmp,"frentista")){
			if(!IsHaveProf(FRENTISTA)){
				SendClientMessage(playerid, COLOR_DESEMPREGADO, "[POSTO] Lamento, não temos nenhum frentista trabalhando no momento!");
				return 1;
			}
			SendClientMessage(playerid, COLOR_FRENTISTA, "Frentista chamado.");
			format(string,sizeof(string),"%s está chamando um frentista, rápido vá até ele",PlayerName(playerid));
			for(new i=0; i<SLOTS2; i++){
			    if(Profissao[i] == FRENTISTA){
					SendClientMessage(i, COLOR_FRENTISTA, string);
				}
			}
			format(string,sizeof(string),"[INFO] %s chamou um frentista.");
			writelog(string);
        } else if(compare(tmp,"diskarma")){
			if(!IsHaveProf(VENDEDOR_DE_ARMAS)){
				SendClientMessage(playerid, COLOR_DESEMPREGADO, "[AMMU-NATION] Sinto muito não há vendedor de armas disponível no momento.");
				return 1;
			}
			SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS, "Vendedor de armas chamado.");
			format(string,sizeof(string),"%s está pedindo uma arma, rápido vá até ele",PlayerName(playerid));
			for(new i=0; i<SLOTS2; i++){
			    if(Profissao[i] == VENDEDOR_DE_ARMAS){
					SendClientMessage(i, COLOR_VENDEDOR_DE_ARMAS, string);
				}
			}
			format(string,sizeof(string),"[INFO] %s chamou um vendedor de armas.");
			writelog(string);
		} else {
		    SendClientMessage(playerid, COLOR_RED2,"USO CORRETO: /servico [taxi, taxiaereo, diskdroga, mecanico, frentista, diskarma]");
			return 1;
		}
	}
	if(strcmp(cmd, "/190", true)==0){
		new tmp[256];
		new string[256];
	    strmid(tmp, cmdtext, 4, strlen(cmdtext));
		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_GRAY, "/190 [denuncia]");
			return 1;
		}
		if(CelularBloqueado[playerid] == 1){
   			SendClientMessage(playerid, COLOR_GRAY, "Você não está com seu celular.");
			return 1;
		}
 		else{
		    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
			SetTimerEx("AcaoEspecial",6000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
			SendClientMessage(playerid,COLOR_COP_SWAT,"Os policiais foram informados.");
		    for(new i=0; i<SLOTS2; i++){
		        if(IsPlayerAdmin(i) == 1 || Profissao[i] == EXERCITO || Profissao[i] == COP_MILITAR || Profissao[i] == DELEGADO || Profissao[i] == COP_RODOVIARIO || Profissao[i] == COP_SWAT){
					format(string, sizeof(string), "%s fez uma denuncia: %s", PlayerName(playerid), tmp);
					SendClientMessage(i, COLOR_COP_SWAT, string);
					writelog(string);
		        }
			}
            return 1;
		}
 	}
 	if (strcmp(cmd, "/c", true)==0){
 	    new tmp[256];
 	    strmid(tmp,cmdtext, 2, strlen(cmdtext));
 	    if(!strlen(tmp)){
 	        SendClientMessage(playerid, COLOR_GRAY, "USO: /c [mensagem]");
 	        return 1;
		}
		if(!IsPlayerInAnyVehicle(playerid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
		    return 1;
		}
		else{
		    new veh = GetPlayerVehicleID(playerid);
		    new string[256];
		    for(new i=0; i<SLOTS2; i++){
				if(IsPlayerInVehicle(i,veh)){
					format(string,sizeof(string),"[VEICULO] %s",tmp);
					SendPlayerMessageToPlayer(i,playerid,string);
				}
			}
			return 1;
		}
	}
	if (strcmp(cmd, "/adminmsg", true)==0){
	    if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não faz parte da administração do servidor, não pode utilizar esse comando!");
	    new tmp[256];
	    tmp = strtok(cmdtext, idx);
		new plid = strval(tmp);
		if(strlen(tmp) <= 0) return SendClientMessage(playerid, COLOR_GRAY, "USO: /adminmsg [id] [mensagem]");
		if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador desconectado...");
		new message[256];
		if(plid < 10) strmid(message,cmdtext,11,strlen(cmdtext));
		else if(plid > 10 && plid < 100) strmid(message,cmdtext,12,strlen(cmdtext));
		else strmid(message,cmdtext,13,strlen(cmdtext));
        if(strlen(message) <= 0) return SendClientMessage(playerid, COLOR_GRAY, "USO: /adminmsg [id] [mensagem]");
		new s[256];
		format(s,sizeof(s),"Admin { %s } : %s",PlayerName(playerid),message);
		SendClientMessage(plid, COLOR_RED2, s);
		SendClientMessage(playerid, COLOR_RED2, s);
		return 1;
	}
 	if (strcmp(cmd, "/admin", true)==0){
		new tmp[256];
		new string[256];
	    strmid(tmp, cmdtext, 6, strlen(cmdtext));
		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_GRAY, "USO: /admin [mensagem]");
			return 1;
		}
		else{
			format(string, sizeof(string), "%s: %s", PlayerName(playerid), tmp);
			SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, string);
		    for(new i=0; i<SLOTS2; i++){
		        if(IsPlayerAdmin(i)){
					format(string, sizeof(string), "%s: %s", PlayerName(playerid), tmp);
					SendClientMessage(i, COLOR_ENTREGADOR_PIZZA, string);
		        }
			}
            return 1;
		}
 	}
 	if (strcmp(cmd, "/admins", true)==0){
 	    SendClientMessage(playerid, COLOR_GREEN, "|=======| ADMINS |=======|");
 	    if(QtAdmins() == 0) return SendClientMessage(playerid, COLOR_GRAY, "Nenhum admin conectado no momento!");
 	    new string[256];
 	    for(new i=0; i<SLOTS2; i++){
 	        if(IsPlayerAdmin(i)){
 	            format(string,sizeof(string),"ID: %d | Nome: %s",i,PlayerName(i));
 	            SendClientMessage(playerid, COLOR_WHITE, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/192", true)==0){
		if(CelularBloqueado[playerid] == 1){
   			SendClientMessage(playerid, COLOR_GRAY, "Você não está com seu celular.");
			return 1;
		}
		new string[256];
	    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
		SetTimerEx("AcaoEspecial",6000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		SendClientMessage(playerid,COLOR_COP_SWAT,"Os paramedicos já foram informados.");
		for(new i=0; i<SLOTS2; i++){
			if(Profissao[i] == PARAMEDICO || IsPlayerAdmin(i)){
				GetPlayerName(playerid,name,sizeof(name));
				format(string,sizeof(string),"%s precisa de uma AMBULÂNCIA, CORRA ATÉ ELE...",name);
				SendClientMessage(i, COLOR_EMERGENCIA, string);
				format(string,sizeof(string),"[INFO] %s pediu uma ambulância.",PlayerName(playerid));
				writelog(string);
			}
   		}
		return 1;
	}
	if(strcmp(cmd, "/escondercarro", true) == 0) {
	    if(IsPlayerInAnyVehicle(playerid)){
			if(Profissao[playerid] == ASSALTANTE && AreaEsconderijo[playerid] == 1){
			    if(!strcmp(vStats[GetPlayerVehicleID(playerid)][VDono],PlayerName(playerid),true)) return SendClientMessage(playerid, COLOR_GRAY, "Você não pode esconder seus próprios carros!");
			    new Float:X,Float:Y,Float:Z,Float:ang;
				if(vStats[GetPlayerVehicleID(playerid)][VEscondido] == 1){
				    SendClientMessage(playerid, COLOR_GRAY, "Esse veículo já está escondido!");
				    return 1;
				}
				if(strcmp(vStats[GetPlayerVehicleID(playerid)][VDono], "Servidor", false) && strcmp(vStats[GetPlayerVehicleID(playerid)][VDono], PlayerName(playerid), false)){
					vStats[GetPlayerVehicleID(playerid)][VEscondido] = 1;
			    	GetVehiclePos(GetPlayerVehicleID(playerid),X,Y,Z);
			    	GetVehicleZAngle(GetPlayerVehicleID(playerid),ang);
			    	SaveCarPos(GetPlayerVehicleID(playerid),X,Y,Z,ang);
			    	SendClientMessage(playerid, COLOR_WHITE, "Carro escondido!");
			    	new str[256];
			    	format(str,sizeof(str),"%s escondeu um carro que pertence a %s",PlayerName(playerid),vStats[GetPlayerVehicleID(playerid)][VDono]);
					print(str);
					writelog(str);
			    	return 1;
				}
				else{
					SendClientMessage(playerid, COLOR_GRAY, "Você não pode esconder um carro seu ou do governo/servidor.");
				}
			}
			else{
			    SendClientMessage(playerid, COLOR_GRAY, "Você não é Assaltante, ou não está em um esconderijo!");
			    return 1;
			}
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
			return 1;
		}
	}
	if(strcmp(cmd, "/trocarposicao", true) == 0) {
	    if(IsPlayerInAnyVehicle(playerid)){
			if(!strcmp(vStats[GetPlayerVehicleID(playerid)][VDono],PlayerName(playerid),true)){
			    new Float:X,Float:Y,Float:Z,Float:ang;
				vStats[GetPlayerVehicleID(playerid)][VEscondido] = 0;
			    GetVehiclePos(GetPlayerVehicleID(playerid),X,Y,Z);
			    GetVehicleZAngle(GetPlayerVehicleID(playerid),ang);
			    SaveCarPos(GetPlayerVehicleID(playerid),X,Y,Z,ang);
			    SendClientMessage(playerid, COLOR_WHITE, "Posição salva!");
			    return 1;
			}
			else{
			    SendClientMessage(playerid, COLOR_GRAY, "Você não é o dono do veículo!");
			    return 1;
			}
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
			return 1;
		}
	}
	if(strcmp(cmdtext, "/presos", true)==0){
		new string[256], QtImprise;
	    SendClientMessage(playerid, COLOR_RED2, "Lista de presos");
	    for(new i=0; i<SLOTS2; i++){
	        if(Presos[i] == 1){
				format(string, sizeof(string), "Nome: %s - ID: %d", PlayerName(i), i);
				SendClientMessage(playerid, COLOR_WHITE, string);
				QtImprise++;
			}
		}
		if(QtImprise <= 0){
		    SendClientMessage(playerid,COLOR_GRAY,"Não há nenhum preso no momento.");
		    return 1;
		} else {
			format(string,sizeof(string),"Total de presos: %d",QtImprise);
			SendClientMessage(playerid,COLOR_PALHA,string);
			return 1;
		}
	}

	if (strcmp(cmdtext, "/procurados", true)==0){
		new string[256];
	    SendClientMessage(playerid, COLOR_RED2, "Lista de procurados");
	    for(new i=0; i<SLOTS2; i++){
	        if(pStats[i][Wanted] > 0){
				format(string, sizeof(string), "Nome: %s - Nível de procurado: %d", PlayerName(i), GetPlayerWantedLevel(i));
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gritar", true)==0 || strcmp(cmd,"/g",true)==0){
		new tmp[256];
		if(!strcmp(cmd,"/gritar",true)) strmid(tmp,cmdtext,7,strlen(cmdtext));
		else strmid(tmp,cmdtext,2,strlen(cmdtext));
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /gritar [mensagem] ,ou quer apenas abrir a boca?");
		if(Gritos[playerid] >= 5) return SendClientMessage(playerid, COLOR_GRAY, "Você está com dor de garganta de tanto gritar, espere um tempo para poder usar esse comando novamente!");
        if(Mudo[playerid] == 1 || Presos[playerid] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você não pode gritar porque está mudo, ou preso!");
		new str[256];
		format(str,sizeof(str),"(( ** %s GRITA: %s ** ))",PlayerName(playerid),ClearCapsLock(tmp));
		print(str);
		for(new i=0;i<SLOTS2;i++){
		    if(GetPlayerInterior(playerid) == GetPlayerInterior(i)){
				SendClientMessage(i, COLOR_GRITAR, str);
			}
		}
		Gritos[playerid]++;
		if(Gritos[playerid] >= 5) SendClientMessage(playerid, COLOR_GRAY, "Você foi surpreendido por uma terrível dor de garganta de tanto gritar!");
		return 1;
	}
	if(strcmp(cmd, "/sussurrar", true)==0 || strcmp(cmd,"/s",true)==0){
		new tmp[256];
		if(!strcmp(cmd,"/sussurrar",true)) strmid(tmp,cmdtext,10,strlen(cmdtext));
		else strmid(tmp,cmdtext,2,strlen(cmdtext));
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /sussurrar [mensagem] ,ou quer apenas abrir a boca?");
        if(Mudo[playerid] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você não pode sussurrar porque está mudo!");
		new str[256];
		format(str,sizeof(str),"%s sussurra: %s",PlayerName(playerid),tmp);
		for(new i = 0; i < SLOTS2; i++){
		    if(GetDistanceBetweenPlayers(playerid,i) < 10) SendClientMessage(i, GetPlayerColor(playerid), str);
		}
		return 1;
	}
    if(strcmp(cmd, "/data", true) == 0) {
		new Ptmess[256];
        format(Ptmess, sizeof(Ptmess), "Hoje é %s! dia %d de %s de %d", DiaName[ValorDia], DiaJogo, MesesNomes[MesJogo], AnoJogo);
        SendClientMessage(playerid, COLOR_GREEN, Ptmess);
        return 1;
	}
	if(strcmp(cmd, "/dia", true) == 0) {
		new string[256];
		format(string,sizeof(string),"~y~%s ~n~~g~Dia: ~w~%s/%s/%s ~n~~g~Hora: ~w~%s:%s", DiaNameGT[ValorDia], ApplyZero(DiaJogo), ApplyZero(MesJogo), ApplyZero(AnoJogo), ApplyZero(HoraJogo), ApplyZero(MinutoJogo));
		GameTextForPlayer(playerid,string,8000,3);
 		return 1;
  	}
	if(strcmp(cmd, "/horas", true) == 0) {
		new Ptmess[256];
		format(Ptmess, sizeof(Ptmess), "Agora são %s:%s",ApplyZero(HoraJogo), ApplyZero(MinutoJogo));
    	SendClientMessage(playerid,COLOR_GREEN,Ptmess);
 		return 1;
  	}

//FUNÇÕES BANCO
	if(strcmp(cmd, "/transferir", true) == 0) {
		new string[256];
	    new tmp[256];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_GRAY, "Uso: /transferir [ID/Nome do jogador] [quantidade]");
			return 1;
		}
		if(IsStringAName(tmp)){
			giveplayerid = IDName(tmp);
		}
		else{
			giveplayerid = strval(tmp);
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_GRAY, "Uso: /transferir [ID/Nome do jogador] [quantidade]");
			return 1;
		}
		if(GetDistanceBetweenPlayers(playerid,giveplayerid) > 30){
		    SendClientMessage(playerid, COLOR_GRAY, "Fique mais próximo do jogador para transferir o dinheiro!");
		    return 1;
		}
 		moneys = strval(tmp);
		if (IsPlayerConnected(giveplayerid)) {
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			playermoney = GetPlayerMoney(playerid);
			if (moneys > 0 && playermoney >= moneys) {
				AddPlayerMoney(playerid, (0 - moneys),-1);
				AddPlayerMoney(giveplayerid, moneys, 1);
				format(string, sizeof(string), "Você enviou a %s (id: %d) a importância de $%d.", giveplayer,giveplayerid, moneys);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "Você recebeu $%d de %s (id: %d).", moneys, sendername, playerid);
				SendClientMessage(giveplayerid, COLOR_YELLOW, string);
				printf("%s acaba de transferir $%d para %s",sendername,moneys,giveplayer);
			}
			else {
				SendClientMessage(playerid, COLOR_YELLOW, "Valor inválido.");
			}
		}
		else {
			format(string, sizeof(string), "%d não está online.", giveplayerid);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		return 1;
	}

    if(strcmp(cmd, "/meubanco", true) == 0) {
        if(AreaBanco[playerid] == 1){
            new caixa = random(2);
            SetPlayerPos(playerid,Caixas[caixa][0],Caixas[caixa][1],Caixas[caixa][2]);
            SetPlayerFacingAngle(playerid, 270);
	   		ShowMenuForPlayer(BancoOpc,playerid);
	   		TogglePlayerControllable(playerid,0);
	   		return 1;
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está no Banco.");
		    return 1;
		}
	}

	if(strcmp(cmd, "/saldocell", true) == 0) {
		new string[256];
	    if(GetPlayerMoney(playerid) < 5){
            SendClientMessage(playerid, COLOR_YELLOW, "Custo: $5");
			return 1;
		}
	    if(pStats[playerid][PhoneNumb]==0){
	        SendClientMessage(playerid,COLOR_GRAY,"Você não tem celular!");
	        return 1;
		}
		else{
		    AddPlayerMoney(playerid, 0 - 5, -1);
		    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
			SetTimerEx("AcaoEspecial",6000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
			format(string, sizeof(string), "Mensagem de Virtual Bankline: Você tem $%d em sua conta.", pStats[playerid][Banco], playerid);
			SendClientMessage(playerid, COLOR_GREEN, string);
			SetTimerEx("AcaoEspecial",6000,0,"dxs",playerid,COLOR_COP_SWAT,string);
			return 1;
		}
	}
	if(strcmp(cmd, "/ativartxt", true) == 0 && IsPlayerAdmin(playerid)) {
	    new textid = strval(strtok(cmdtext,idx));
	    if(textid <= 0 && textid >= 8) return SendClientMessage(playerid, COLOR_GRAY, "ID inválido!");
	    if(textid == 1) return GameTextForPlayer(playerid, "~b~Virtual ~r~L~w~i~r~f~w~e ~y~R~b~P~g~G",20000,1);
	    if(textid == 2) return GameTextForPlayer(playerid, "~b~Virtual ~r~L~w~i~r~f~w~e ~y~R~b~P~g~G",20000,0);
	    if(textid == 3) return GameTextForPlayer(playerid, "~b~Virtual ~r~L~w~i~r~f~w~e ~y~R~b~P~g~G",20000,3);
	    if(textid == 4) return GameTextForPlayer(playerid, "~b~Virtual ~r~L~w~i~r~f~w~e ~y~R~b~P~g~G",20000,4);
	    if(textid == 5) return GameTextForPlayer(playerid, "~b~Virtual ~r~L~w~i~r~f~w~e ~y~R~b~P~g~G",20000,5);
		if(textid == 6) return GameTextForPlayer(playerid, "~b~Virtual ~r~L~w~i~r~f~w~e ~y~R~b~P~g~G",20000,6);
		if(textid == 7) return TextDrawShowForPlayer(playerid, Bemvindo);
	}
	if(strcmp(cmd, "/retirartxt", true) == 0) {
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
		    	SendClientMessage(playerid, COLOR_GRAY, "Saiá do veículo para usar este comando!");
		    	return 1;
		    }
			else{
			    TextDrawHideForPlayer(playerid,TextHora[playerid]);
		    	TextDrawHideForPlayer(playerid,Bemvindo);
		    	TextDrawHideForPlayer(playerid,Bemvindo2);
		    	TextDrawHideForPlayer(playerid,Bemvindo3);
		    	TextDrawHideForPlayer(playerid,Bemvindo4);
		    	TextDrawHideForPlayer(playerid,tdStrip);
		    	TextDrawHideForPlayer(playerid,tdDesmanche);
		    	TextDrawHideForPlayer(playerid,tdLixao);
		    	TextDrawHideForPlayer(playerid,tdPizzaria);
		    	TextDrawHideForPlayer(playerid,tdColheita);
		    	TextDrawHideForPlayer(playerid,tdPlant);
		    	TextDrawHideForPlayer(playerid,tdLeite);
		    	TextDrawHideForPlayer(playerid,tdBanco);
		    	TextDrawHideForPlayer(playerid,Posto);
		    	TextDrawHideForPlayer(playerid,tdForte);
		    	TextDrawHideForPlayer(playerid,Hospital);
		    	TextDrawHideForPlayer(playerid,tdPesca);
		    	TextDrawHideForPlayer(playerid,tdCoopPesca);
		    	TextDrawHideForPlayer(playerid,tdHotel);
		    	TextDrawHideForPlayer(playerid,tdPdCarga);
		    	TextDrawHideForPlayer(playerid,tdConstrucao);
		    	TextDrawHideForPlayer(playerid,td247);
		    	TextDrawHideForPlayer(playerid,tdAreaCarga);
		    	TextDrawHideForPlayer(playerid,tdStrip);
		    	TextDrawHideForPlayer(playerid,tdSorveteria);
		    	TextDrawHideForPlayer(playerid,tdLocadora);
		    	TextDrawHideForPlayer(playerid,tdBar);
		    	TextDrawHideForPlayer(playerid,tdLoteria);
		    	TextDrawHideForPlayer(playerid,tdBalada);
		    	TextDrawHideForPlayer(playerid,tdCOEVL);
		    	TextDrawHideForPlayer(playerid,tdMorro);
		    	SendClientMessage(playerid, COLOR_TRANSPORTE_DE_VALORES, "Textos retirados!");
		    	return 1;
			}
	}

	if(strcmp(cmd, "/idmodelo", true) == 0) {
	    new id;
	    new modelo;
	    new msg[256];
	    id = GetPlayerVehicleID(playerid);
		modelo = GetVehicleModel(id);
	    format(msg, sizeof(msg), "O ID de seu veículo é %d", modelo);
		SendClientMessage(playerid, COLOR_GREEN, msg);
		return 1;
	}
	if(strcmp(cmd, "/apostarcavalo", true) == 0){
	    new tmp[256];
	    new cavaloid;
	    new valor;
	    tmp = strtok(cmdtext,idx);
	    cavaloid = strval(tmp);
	    if(!strlen(tmp)){
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /apostarcavalo [cavalo] [quantia]");
	        return 1;
		}
		tmp = strtok(cmdtext,idx);
		valor = strval(tmp);
		if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_GRAY, "USO: /apostarcavalo [cavalo] [quantia:de $300 até $10.000]");
			return 1;
		}
		if(ComecouCLoteria == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "A corrida já começou, espere para votar na próxima!");
		    return 1;
		}
		if(AreaLCavalos[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está na loteria de cavalos!");
		    return 1;
		}
		if(cavaloid < 1 || cavaloid > 8){
		    SendClientMessage(playerid, COLOR_GRAY, "Aposte em um cavalo de 1 à 8.");
		    return 1;
		}
		if(valor < 300 || valor > 10000){
		    SendClientMessage(playerid, COLOR_GRAY, "Quantia de $300 até $10.000.");
		    return 1;
		}
		if(GetPlayerMoney(playerid) < valor){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro para comprar o TICKET, custo: $300");
		    return 1;
		}
		if(CPlayerDentro[playerid] == true){
		    SendClientMessage(playerid, COLOR_GRAY, "Você já comprou um TICKET, agora espere o sorteio!");
		    return 1;
		}
		else{
		    new string[256];
		    format(string,sizeof(string),"Você apostou $%d no cavalo %d. Boa sorte!",valor,cavaloid);
		    SendClientMessage(playerid, COLOR_BARMAN, string);
		    format(string,sizeof(string),"[CORRIDA CAVALOS] %s acabou de apostar nos cavalos, tente você também. APOSTE.");
		    SendClientMessageToAll(COLOR_GRAY, string);
		    AddPlayerMoney(playerid,-valor,-1);
		    ValorApostado[playerid] = valor;
		    CavaloApostado[playerid] = cavaloid;
		    CPlayerDentro[playerid] = true;
		    TemJogador = 1;
		    return 1;
		}
	}

	if(strcmp(cmd, "/loteria", true) == 0) {
	    new no1[256], no2[256];
		no1 = strtok(cmdtext, idx);
		no2 = strtok(cmdtext, idx);
 		if(!strlen(no1) || !strlen(no2)){
			return SendClientMessage(playerid, COLOR_GREEN, "USE: /loteria [0-20] [0-20]");
		}
		if(strval(no1) < 0 || strval(no1) > 20){
			return SendClientMessage(playerid, COLOR_GREEN, "USE: /loteria [0-20] [0-20]");
		}
		if(strval(no2) < 0 || strval(no2) > 20){
			return SendClientMessage(playerid, COLOR_GREEN, "USE: /loteria [0-20] [0-20]");
		}
		if(strval(no1) == strval(no2)){
			return SendClientMessage(playerid, COLOR_GREEN, "USE: /loteria [0-20] [0-20] - Números DIFERENTES!!!");
		}
		if(PlayerDentro[playerid] == true){
		    SendClientMessage(playerid, COLOR_GRAY, "Você já tem um bilhete!");
		    return 1;
		}
		if(AreaLoteria[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está na loteria!");
		    return 1;
		}
		if(GetPlayerMoney(playerid) >= 500){
		    AddPlayerMoney(playerid,-500,-1);
		    PlayerDentro[playerid]=true;
		    Aposta[playerid][0]=strval(no1);
		    Aposta[playerid][1]=strval(no2);
		    new string[256];
		    format(string, sizeof(string), "Obrigado por apostar. Seus números da loteria são: %d, %d ! Espere o Resultado.", strval(no1), strval(no2));
            return SendClientMessage(playerid, COLOR_ORANGE, string);
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "O TICKET custa $500 dólares");
  		    return 1;
		}
	}
	if(strcmp(cmd, "/galao", true) == 0) {
	    new tmp[256];
		new qt,string[256],valorpago;
		tmp = strtok(cmdtext,idx);
		qt = strval(tmp);
		if(!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /galao [1-20]");
		    return 1;
		}
		if(qt < 1){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /galao [1-20]");
		    return 1;
		}
		if(!AreaPosto[playerid]){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está no posto!");
		    return 1;
		}
		if(qt + pStats[playerid][Galao] >= 20){
            new sobra = 20 - pStats[playerid][Galao];
            valorpago = sobra*PrecoGas;
            if(GetPlayerMoney(playerid) < valorpago){
				format(string,sizeof(string),"Você não possui dinheiro, Custo: $%d",valorpago);
				SendClientMessage(playerid, COLOR_GRAY, string);
			    return 1;
			}
            AddPlayerMoney(playerid, -valorpago, -1);
            format(string,sizeof(string),"Você completou seu galão colocando %d litros por $%d",sobra,valorpago);
			SendClientMessage(playerid, COLOR_WHITE, string);
			pStats[playerid][Galao] = 20;
			return 1;
		}
		else{
			valorpago = qt*PrecoGas;
			if(GetPlayerMoney(playerid) < valorpago){
				format(string,sizeof(string),"Você não possui dinheiro, Custo: $%d",valorpago);
				SendClientMessage(playerid, COLOR_GRAY, string);
			    return 1;
			}
			AddPlayerMoney(playerid,-valorpago,-1);
			pStats[playerid][Galao] += qt;
			format(string,sizeof(string),"Galão enchido com %d litros, agora você possui nele %d litros",qt,pStats[playerid][Galao]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(playerid, COLOR_WHITE, "Para colocar o combustível em um veículo, entre nele e digite /colocar [1-20]");
			return 1;
		}
	}
	if(strcmp(cmd, "/colocar",true) == 0) {
		new tmp[256];
		new qt,string[256];
		tmp = strtok(cmdtext,idx);
		qt = strval(tmp);
		if(!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /colocar [1-20]");
		    return 1;
		}
		if(qt < 1){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /colocar [1-20]");
		    return 1;
		}
		if(!IsPlayerInAnyVehicle(playerid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhum veículo!");
		    return 1;
		}
		if(vStats[GetPlayerVehicleID(playerid)][gasolina] == -1){
			SendClientMessage(playerid,COLOR_GRAY,"Você não pode abastecer esse veículo!");
			return 1;
		}
		if(qt > pStats[playerid][Galao]){
			format(string,sizeof(string),"Você não tem tudo isso no seu galão, você possui apenas %d litros nele",pStats[playerid][Galao]);
			SendClientMessage(playerid, COLOR_GRAY, string);
			return 1;
		}
		if(vStats[GetPlayerVehicleID(playerid)][gasolina] + qt >= 100){
		    new sobra = 100 - vStats[GetPlayerVehicleID(playerid)][gasolina];
		    vStats[GetPlayerVehicleID(playerid)][gasolina] = 100;
		    pStats[playerid][Galao] -= sobra;
		    format(string,sizeof(string), "O tanque do veículo ficou completo e sobraram %d litros em seu galão!",pStats[playerid][Galao]);
			SendClientMessage(playerid, COLOR_JUIZ, string);
			return 1;
		}
		else{
			vStats[GetPlayerVehicleID(playerid)][gasolina] += qt;
			pStats[playerid][Galao] -= qt;
			format(string,sizeof(string),"O tanque do veículo ficou com %d litros de combustível",vStats[GetPlayerVehicleID(playerid)][gasolina]);
            SendClientMessage(playerid, COLOR_JUIZ, string);
			return 1;
		}
	}
    if(strcmp(cmd, "/abastecer", true) == 0) {
		new tmp[256];
		new quantidade;
		new string[256];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_GRAY, "Uso: /abastecer [litros]");
			return 1;
		}
	    quantidade = strval(tmp);
	    if(quantidade <= 0 || GetPlayerMoney(playerid) < PrecoGas*quantidade){
		    format(string, sizeof(string), "[POSTO] Você não tem dinheiro para comprar essa quantidade de litros. 1 litro: %d", PrecoGas);
			SendClientMessage(playerid, COLOR_GRAY, string);
			return 1;
		}
		if(!IsPlayerInAnyVehicle(playerid)){
		    SendClientMessage(playerid,COLOR_GRAY,"Você não está em nenhum veículo!");
		    return 1;
		}
		if(vStats[GetPlayerVehicleID(playerid)][gasolina] == -1){
			SendClientMessage(playerid,COLOR_GRAY,"Você não pode abastecer esse veículo!");
			return 1;
		}
		if(IsPlayerInBoat(playerid)){
		    if(AreaCoopPesca[playerid] == 0){
		        SendClientMessage(playerid, COLOR_GRAY, "Você não está na Cooperativa de pesca para abastecer esse veículo naval!");
		        return 1;
			}
		}
		else if(IsPlayerInVehicleAir(playerid)){
		    if(AreaAero[playerid] == 0){
		        SendClientMessage(playerid, COLOR_GRAY, "Você não está no Aeroporto para abastecer esse veículo aéreo!");
		        return 1;
			}
		}
		else if(IsPlayerInTruck(playerid)){
		    if(AreaPosto[playerid] == 0 && AreaCarga[playerid] == 0){
		        SendClientMessage(playerid, COLOR_GRAY, "Você não está em um Posto ou Área de Carga para abastecer esse veículo terrestre!");
				return 1;
		    }
		}
		else{
			if(AreaPosto[playerid] == 0){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um Posto para abastecer esse veículo terrestre!");
				return 1;
			}
		}
		new currentgas = vStats[GetPlayerVehicleID(playerid)][gasolina];
		if(quantidade + currentgas < 100){
		    new valorpago = quantidade*PrecoGas;
   			SetTimerEx("AplicarGasosa",quantidade*150,0,"ddd",playerid,GetPlayerVehicleID(playerid),quantidade+currentgas);
		    TogglePlayerControllable(playerid,0);
		    SendClientMessage(playerid,COLOR_RED2,"Abastecendo...");
		    format(string, sizeof(string), "Espere o abastecimento completar. Serão colocados %d litros.", quantidade);
			SendClientMessage(playerid, COLOR_WHITE, string);
			AddPlayerMoney(playerid, - valorpago, -1);
			format(string,256,"No total, seu tanque terá %d litros de combustível.",quantidade+currentgas);
			SendClientMessage(playerid,COLOR_WHITE,string);
			AcrescentarLucro(7,quantidade*2);
			return 1;
		}
		else if(quantidade + currentgas > 99){
		    new quantia;
		    new valorpago = quantidade*PrecoGas;
		    quantia = 100 - currentgas;
			SetTimerEx("AplicarGasosa",quantia*150,0,"ddd",playerid,GetPlayerVehicleID(playerid),100);
			TogglePlayerControllable(playerid,0);
		    SendClientMessage(playerid,COLOR_RED2,"Abastecendo...");
			format(string, sizeof(string), "Espere o abastecimento completar. Seu tanque será enchido com %d litros.", quantia);
			SendClientMessage(playerid, COLOR_WHITE, string);
			AddPlayerMoney(playerid, - valorpago, -1);
			AcrescentarLucro(7,quantia*2);
			return 1;
		}
	}
	if(strcmp(cmd,"/vendergalao",true)==0){
	    new tmp[256],plid,amount;
		tmp=strtok(cmdtext,idx);
	    if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /vendergalao] [id] [1-20]");
	    plid=strval(tmp);
	    if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
	    tmp=strtok(cmdtext,idx);
	    if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /vendergalao] [id] [1-20]");
	    amount=strval(tmp);
		if(amount<1 || amount>20) return SendClientMessage(playerid, COLOR_GRAY, "USO: /vendergalao [id] [1-20]");
		new playeramount = pStats[plid][Galao],string[256];
		if(playeramount+amount <= 20){
			if(GetPlayerMoney(plid) < amount*PrecoGas){
				format(string,sizeof(string),"O jogador não tem dinheiro! CUSTO: $%d,00 dólares",amount*PrecoGas);
				SendClientMessage(playerid, COLOR_GRAY, string);
				return 1;
			}
		    pStats[plid][Galao]+=amount;
		    format(string,sizeof(string),"O Frentista %s lhe vendeu um galão de combustível com %d litros por $%d,00 dólares",PlayerName(playerid),amount,amount*PrecoGas);
		    SendClientMessage(plid, COLOR_FRENTISTA, string);
			format(string,sizeof(string),"Feito, você vendeu um galão à %s com %d litros de combustível e foi pago com $%d,00 dólares.",PlayerName(plid),amount,amount*PrecoGas);
			SendClientMessage(playerid, COLOR_FRENTISTA, string);
			AddPlayerMoney(plid, -amount*PrecoGas, -1);
			AddPlayerMoney(playerid, amount*PrecoGas, 3);
			return 1;
		}
		else{
			new total = 20 - playeramount;
			if(GetPlayerMoney(plid) < total*PrecoGas){
				format(string,sizeof(string),"O jogador não tem dinheiro! CUSTO: $%d,00 dólares",total*PrecoGas);
				SendClientMessage(playerid, COLOR_GRAY, string);
				return 1;
			}
			pStats[plid][Galao]=20;
			format(string,sizeof(string),"O Frentista %s completou seu galão de combustível colocando %d litros por $%d,00 dólares",PlayerName(playerid),total,total*PrecoGas);
			SendClientMessage(plid,COLOR_FRENTISTA,string);
			format(string,sizeof(string),"Você completou o galão de %s colocando %d litros de combustível por $%d,00 dólares",PlayerName(plid),total,total*PrecoGas);
			SendClientMessage(playerid,COLOR_FRENTISTA,string);
			AddPlayerMoney(plid, -total*PrecoGas, -1);
			AddPlayerMoney(playerid, total*PrecoGas, 3);
			return 1;
		}
	}
	if(strcmp(cmd,"/colocargas",true)==0){
	    if(Profissao[playerid] == FRENTISTA || IsPlayerAdmin(playerid)){
			new tmp[256],plid,quantidade,string[256],distancia;
			tmp = strtok(cmdtext,idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid,COLOR_GRAY,"Sintaxe incorreta. USO: /colocargas [id] [quantia]");
			    return 1;
			}
			plid = strval(tmp);
			tmp = strtok(cmdtext,idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid,COLOR_GRAY,"Sintaxe incorreta. USO: /colocargas [id] [quantia]");
			    return 1;
			}
			quantidade = strval(tmp);
			if(!IsPlayerInAnyVehicle(plid)){
			    SendClientMessage(playerid,COLOR_GRAY,"O jogador não está em um veículo!");
			    return 1;
			}
			if(vStats[GetPlayerVehicleID(plid)][gasolina] == -1){
			    SendClientMessage(playerid,COLOR_GRAY,"Este veículo não pode ser abastecido!");
			    return 1;
			}
			if(quantidade < 1 || quantidade > 100){
			    SendClientMessage(playerid,COLOR_GRAY,"Somente de 1 à 100");
			    return 1;
			}
			distancia = GetDistanceBetweenPlayers(playerid, plid);
		 	if(distancia > 15){
			    SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto!");
				return 1;
			}
			new currentgas = vStats[GetPlayerVehicleID(plid)][gasolina];
			if(quantidade + currentgas < 100){
			    vStats[GetPlayerVehicleID(plid)][gasolina] = quantidade+currentgas;
			    format(string, sizeof(string), "Seu carro foi abastecido e um total de %d litros foi colocado.", quantidade);
				SendClientMessage(plid, COLOR_FRENTISTA, string);
				AddPlayerMoney(plid,- quantidade,-1);
				AddPlayerMoney(playerid,quantidade,3);
				SendClientMessage(playerid,COLOR_FRENTISTA,"Missão cumprida!");
				format(string,sizeof(string),"**** %s acabou de abastecer %d litros de combustível de um veículo! ****",PlayerName(playerid),quantidade);
				SendClientMessageAdmin(COLOR_FRENTISTA, string);
				if(JogadorContratado(playerid,7)) AcrescentarLucro(7,quantidade*2);
				if(CarroAbastecido[GetPlayerVehicleID(plid)] == 0){
					CarroAbastecido[GetPlayerVehicleID(plid)]=1;
					SetTimerEx("ZerarCarroAbastecido",130000,false,"d",GetPlayerVehicleID(plid));
					AcrescentarExPoints(playerid,1);
				}
				TogglePlayerControllable(plid,1);
				return 1;
			}
			if(quantidade + currentgas > 99){
			    new quantia;
			    quantia = 100 - currentgas;
			    vStats[GetPlayerVehicleID(plid)][gasolina] = 100;
				format(string, sizeof(string), "O tanque de seu carro está cheio, foram colocados %d litros.", quantia);
				SendClientMessage(plid, COLOR_FRENTISTA, string);
				SendClientMessage(playerid,COLOR_FRENTISTA,"Missão cumprida!");
				AddPlayerMoney(plid, - quantia,-1);
				AddPlayerMoney(playerid,quantia,3);
				format(string,sizeof(string),"**** %s acabou de abastecer %d litros de combustível de um veículo! ****",PlayerName(playerid),quantia);
				SendClientMessageAdmin(COLOR_FRENTISTA, string);
				if(JogadorContratado(playerid,7)) AcrescentarLucro(7,quantidade*2);
				if(CarroAbastecido[GetPlayerVehicleID(plid)] == 0){
					CarroAbastecido[GetPlayerVehicleID(plid)]=1;
					SetTimerEx("ZerarCarroAbastecido",130000,false,"d",GetPlayerVehicleID(plid));
					AcrescentarExPoints(playerid,1);
				}
				return 1;
			}
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Vou te dar um conselho, você nem deveria estar mexendo nesse comando...");
			return 1;
		}
	}

	if(strcmp(cmd, "/transarcama", true) == 0) {
		if(Profissao[playerid] == PROSTITUTA || IsPlayerAdmin(playerid)){
			new tmp[256];
    	    new plid;
	        tmp = strtok(cmdtext, idx);
	        plid = strval(tmp);
			if(!strlen(tmp)){
		    	SendClientMessage(playerid, COLOR_GRAY,"/transarcama [plid]");
				return 1;
			}
			if(AreaStrip[playerid] == 0){
				SendClientMessage(playerid, COLOR_GRAY,"Você não está na boate.");
				return 1;
			}
		   	if(!IsPlayerConnected(plid)){
	       		SendClientMessage(playerid,COLOR_GRAY,"Jogador não conectado/logado");
				return 1;
			}
			if(GetPlayerMoney(plid) < 300){
	        	SendClientMessage(playerid, COLOR_GRAY, "Ele não tem dinheiro para pagar!");
				return 1;
			}
		    if(GetDistanceBetweenPlayers(playerid,plid) > 20){
		       	SendClientMessage(playerid,COLOR_GRAY,"Você está muito longe, chegue mais perto!");
				return 1;
			}
			if(Profissao[plid] == PROSTITUTA){
				SendClientMessage(playerid, COLOR_GRAY, "Você não pode transar com si mesma.");
				return 1;
			}
			else {
				SendClientMessage(plid, COLOR_ROSA, "A prostituta está lhe oferecendo uma transa numa cama bem confortável!");
				SendClientMessage(plid, COLOR_ROSA, "Se quiser transar com a prostituta basta digitar /aceitotransar se não /naotransar.");
				Transacama[plid] = 1;
				Prostitutacama[plid] = playerid;
				SendClientMessage(playerid, COLOR_ROSA, "A proposta foi enviada! Aguarde...");
				return 1;
			}
		}
	}

	if(strcmp(cmd, "/aceitotransar", true) == 0){
		if(GetPlayerMoney(playerid) < 300){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para transar com a prostituta");
			return 1;
		}
	    if(Transacama[playerid] == 1){
	        SendClientMessage(playerid, COLOR_ROSA, "Você aceitou a prosposta da prostituta!");
			AddPlayerMoney(playerid,-300,-1);
			AddPlayerMoney(Prostitutacama[playerid],300,3);
			SetPlayerPos(Prostitutacama[playerid], 2206.5156,-1071.4319,1051.0058);
	        SetPlayerPos(playerid, 2205.2402,-1076.3251,1050.4844);
	        SetPlayerInterior(playerid,1);
	        SetPlayerInterior(Prostitutacama[playerid],1);
	        SendClientMessage(playerid, COLOR_ROSA2, "Para -meter- digite /meter");
	        SendClientMessage(playerid, COLOR_ROSA2, "Para sair basta entrar no CheckPoint que está próximo a porta!");
			SendClientMessage(Prostitutacama[playerid], COLOR_ROSA2, "Assim que o sexo acabar, você pode sair pela porte, não tenta fugir ou será demitido(a)");
		    SetPlayerCheckpoint(playerid,2211.9827,-1076.0026,1050.4844,3.0);
	   	    SetPlayerCheckpoint(Prostitutacama[playerid],2211.9827,-1076.0026,1050.4844,3.0);
	   	    if(JogadorContratado(Prostitutacama[playerid],6)) AcrescentarLucro(6,200);
	        CheckpointStatus[playerid] = NACAMA;
	        CheckpointStatus[Prostitutacama[playerid]] = NACAMA;
	        AcrescentarExPoints(Prostitutacama[playerid],1);
 	        SetTimerEx("Prostituir",1000,0,"d",Prostitutacama[playerid]);
			return 1;
		}
		if(Transacama[playerid] == 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não fechou acordo com a prostituta!");
	        return 1;
	    }
	}

	if(strcmp(cmd, "/naotransar", true) == 0){
	    if(Transacama[playerid] == 1){
	        Transacama[playerid] = 0;
	        SendClientMessage(playerid, COLOR_GREEN, "Você não aceitou a proposta!");
	        return 1;
	    }
		if(Transacama[playerid] == 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não fechou acordo com a prostituta!");
	        return 1;
	    }
	}

	if(strcmp(cmd, "/mudarposicao", true) == 0){
		if(Profissao[playerid] == PROSTITUTA || IsPlayerAdmin(playerid)){
			new tmp[256];
		  	tmp = strtok(cmdtext, idx);
	    	new animacao;
			if(!strlen(tmp)) {
				SendClientMessage(playerid,COLOR_ROSA,"/mudarposicao [1-4]");
				return 1;
			}
			animacao = strval(tmp);
			if(animacao < 1 || animacao > 4) {
				SendClientMessage(playerid,COLOR_ROSA,"/mudarposicao [1-4]");
				return 1;
			}
			if(animacao == 1) {
				ApplyAnimation(playerid,"benchpress","gym_bp_up_B",4.1,0,1,1,1,1);
 			} else if(animacao == 2) {
				ApplyAnimation(playerid,"MD_END","END_SC1_SMO",4.1,0,1,1,1,1);
			} else if(animacao == 3) {
				ApplyAnimation(playerid,"FINALE","FIN_Land_Car",4.1,0,1,1,1,1);
			} else if(animacao == 4) {
				ApplyAnimation(playerid,"FINALE","FIN_Land_Die",4.1,0,1,1,1,1);
			}
			SendClientMessage(playerid, COLOR_WHITE, "Posição mudada!");
			return 1;
		}
		return 0;
	}

	if(strcmp(cmd, "/meter", true) == 0){
		if(GetDistanceBetweenPlayers(playerid,Prostitutacama[playerid]) > 5){
		    SendClientMessage(playerid,COLOR_GRAY,"Você está muito longe, chegue mais perto!");
			return 1;
		}
		if(Metendo[playerid] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Você já está metendo!");
		    return 1;
		}
		if(Transacama[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está na cama com uma prostituta.");
		    return 1;
		}
		new plid = Prostitutacama[playerid];
		Metendo[playerid] = 1;
		ApplyAnimation(playerid,"WAYFARER","WF_Back",4.1,0,1,1,1,1);
		ApplyAnimation(playerid,"WAYFARER","WF_Back",4.1,0,1,1,1,1);
		SendClientMessage(playerid, COLOR_ROSA,"Para transar não mexe a câmera e fique apertando -W- respectivamente.");
		SendClientMessage(plid,     COLOR_ROSA,"Seu cliente começou a meter, lá vem a dor, prepare-se...");
		SetTimerEx("JaEra",42000,0,"dd",playerid,plid);
		if(pStats[playerid][Camisinha] == 0){
		    SendClientMessage(playerid, COLOR_ROSA,"Você não está usando camisinha poderá pegar uma doença, rese para que essa puta não passe para você!");
			SemCamisa[playerid] = SetTimerEx("SemCamisinha",10000,0,"d",playerid);
		}
		return 1;
	}

	if(strcmp(cmd,"/pagarstrip",true) == 0){
		new tmp[256];
		new plid,pickupmoney;
		tmp = strtok(cmdtext,idx);
		plid = strval(tmp);
		if(!strlen(tmp)){
		SendClientMessage(playerid, COLOR_GRAY, "USO: /pagarstrip [ID/da/striper]");
		return 1;
		}
		if(plid == playerid){
		SendClientMessage(playerid, COLOR_GRAY, "Você não pode pagar você mesmo!");
		return 1;
		}
		if(AreaStrip[playerid] == 0 || AreaStrip[plid] == 0){
		SendClientMessage(playerid, COLOR_GRAY, "Você e o jogador selecionado devem estar na boate!");
		return 1;
		}
		if(FazendoStrip[playerid] == 1){
		SendClientMessage(playerid, COLOR_GRAY, "Sinto muito você está fazendo strip-tease no momento!");
		return 1;
		}
		if(Profissao[plid] != PROSTITUTA){
		SendClientMessage(playerid, COLOR_GRAY, "Ei, esse jogador não é Prostituta!");
		return 1;
		}
		if(FazendoStrip[plid] == 0){
		SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está fazendo strip!");
		return 1;
		}
		if(GetDistanceBetweenPlayers(playerid,plid) > 10){
		SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto!");
		return 1;
		}
		if(GetPlayerMoney(playerid) < 50){
		SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro!");
		return 1;
		}
		else{
			TogglePlayerControllable(playerid,0);
			AddPlayerMoney(plid,50,3);
			AddPlayerMoney(playerid,-50,-1);
			SendClientMessage(playerid, COLOR_ROSA, "Você pagou $50 para a striper!");
			new str[256];
			format(str,sizeof(str),"O jogador %s lhe pagou $50 pelo strip-tease!",PlayerName(playerid));
			SendClientMessage(plid, COLOR_ROSA, str);
			KillTimer(TimerStrip[plid]);
			FST[plid] = 1;
			ApplyAnimation(playerid,"STRIP","PLY_CASH",4.1,0,1,1,1,1);
			ApplyAnimation(plid,"STRIP","STR_A2B",4.1,0,1,1,1,1);
			TimerStrip[plid] = SetTimerEx("FazendoStripTease",4500,false,"d",plid);
			new Float:X,Float:Y,Float:Z;
			GetPlayerPos(plid,X,Y,Z);
			if(JogadorContratado(plid,6)) AcrescentarLucro(6,200);
			pickupmoney = CreatePickup(1212,1,X+0.1,Y,Z-0.3);
			SetTimerEx("DestruirPickupGrana",1300,false,"dd",playerid,pickupmoney);
			return 1;
		}
	}
	if(strcmp(cmd,"/fazerstrip",true) == 0){
   		if(Profissao[playerid] == PROSTITUTA){
	  		if(AreaStrip[playerid] == 1){
	  			ApplyAnimation(playerid,"STRIP","STR_Loop_A",4.1,0,1,1,1,1);
	  			FazendoStrip[playerid] = 1;
	  			TogglePlayerControllable(playerid,0);
	  			SendClientMessage(playerid, COLOR_ROSA, "O strip começou!");
	  			SendClientMessage(playerid, COLOR_ROSA, "Digite as teclas:");
	  			SendClientMessage(playerid, COLOR_ROSA, "NumLock 4, NumLock 6, SHIFT, ENTER");
	  			SendClientMessage(playerid, COLOR_ROSA, "Para parar de fazer strip-tease digite /pararstrip");
	  			TimerStrip[playerid] = SetTimerEx("FazendoStripTease",100,false,"d",playerid);
	  			return 1;
  			}
  			else{
				SendClientMessage(playerid, COLOR_GRAY, "Você não está na boate.");
				return 1;
				}
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "Você não é Prostituta!");
			return 1;
			}
	}
    if(strcmp(cmd,"/pararstrip",true) == 0){
	   if(FazendoStrip[playerid] == 0){
	   		SendClientMessage(playerid, COLOR_GRAY, "Você não está fazendo strip!");
			return 1;
	   }
	   else{
		   ClearAnimations(playerid);
		   FazendoStrip[playerid] = 0;
		   KillTimer(TimerStrip[playerid]);
		   FST[playerid] = 0;
		   TogglePlayerControllable(playerid,1);
		   SendClientMessage(playerid, COLOR_ROSA, "O strip-tease acabou!");
		   return 1;
	   }
	}
	if(strcmp(cmd, "/strip-tease", true) == 0) {
		if(Profissao[playerid] == PROSTITUTA || IsPlayerAdmin(playerid)){
			new tmp[256];
    	    new plid;
	        tmp = strtok(cmdtext, idx);
	        plid = strval(tmp);
			if(!strlen(tmp)){
		    	SendClientMessage(playerid, COLOR_GRAY,"/strip-tease [id]");
				return 1;
			}
			if(AreaStrip[playerid] == 0){
				SendClientMessage(playerid, COLOR_GRAY,"Você não está na boate.");
				return 1;
			}
		   	if(!IsPlayerConnected(plid)){
	       		SendClientMessage(playerid,COLOR_GRAY,"Jogador não conectado/logado");
				return 1;
			}
			if(GetPlayerMoney(plid) < 200){
	        	SendClientMessage(playerid, COLOR_GRAY, "Ele não tem dinheiro para pagar!");
				return 1;
			}
		    if(GetDistanceBetweenPlayers(playerid,plid) > 20){
		       	SendClientMessage(playerid,COLOR_GRAY,"Você está muito longe, chegue mais perto!");
				return 1;
			}
			if(plid == playerid){
				SendClientMessage(playerid, COLOR_GRAY, "Você não pode fazer strip-tease para si mesma.");
				return 1;
			}
			else {
				SendClientMessage(plid, COLOR_ROSA, "A prostituta está lhe oferecendo um strip tease na boate.");
				SendClientMessage(plid, COLOR_ROSA, "Se quiser assistir basta digitar /aceitostrip se não /recusarstrip.");
				Strip2[plid] = 1;
				Prostitutacama2[plid] = playerid;
				SendClientMessage(playerid, COLOR_ROSA, "A proposta foi enviada! Aguarde.");
				return 1;
			}
		}
	}

	if(strcmp(cmd, "/aceitostrip", true) == 0){
		if(Strip2[playerid] == 1){
			Strip2[playerid] = 0;
			SendClientMessage(playerid, COLOR_ROSA,"O show vai começar");
	        SetPlayerPos(Prostitutacama2[playerid], 1208.7369,-6.3787,1001.3281);
	        SetPlayerPos(playerid, 1204.4965,-6.4623,1000.9219);
	        SetPlayerInterior(playerid,2);
	        SetPlayerInterior(Prostitutacama2[playerid],2);
	        TogglePlayerControllable(Prostitutacama2[playerid],0);
	        ApplyAnimation(playerid,"LAPDAN1","LAPDAN_P",4.1,0,1,1,1,1);
	        AddPlayerMoney(Prostitutacama2[playerid], 200, 3);
			AddPlayerMoney(playerid, -200, -1);
			if(JogadorContratado(Prostitutacama2[playerid],6)) AcrescentarLucro(6,300);
			SendClientMessage(playerid, COLOR_ROSA2,"Você pagou para a prostituta $200 pelo strip!");
			AcrescentarExPoints(Prostitutacama2[playerid],1);
	        SetTimerEx("Strip",2000,0,"d",Prostitutacama2[playerid]);
			return 1;
		}
		if(Strip2[playerid] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Você não fechou acordo com a prostituta!");
	   		return 1;
		}
	}

	if(strcmp(cmd, "/recusarstrip", true) == 0){
	    if(Strip2[playerid] == 1){
	        Strip2[playerid] = 0;
	        SendClientMessage(playerid, COLOR_GREEN, "Você não aceitou a proposta!");
	        return 1;
	    }
		if(Strip2[playerid] == 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não fechou acordo com a prostituta!");
	        return 1;
	    }
	}

	if(strcmp(cmd, "/trancarcasa", true) == 0) {
	    if(NaCasa[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
		    return 1;
		}
		if(strcmp(pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid),true) == 0 && strcmp(pckStats[PickupEntradaCasa[playerid]][Chave],PlayerName(playerid),true) == 0){
		    pckStats[PickupEntradaCasa[playerid]][Trancada] = 1;
		    SendClientMessage(playerid, COLOR_GREEN, "Casa trancada!");
		    return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está com a chave da casa, ou não é o dono dela!");
		    return 1;
		}
	}

	if(strcmp(cmd, "/destrancarcasa", true) == 0) {
	    if(GetPickup[playerid] == -1) return SendClientMessage(playerid, COLOR_GRAY, "EI, você não está em nenhuma casa, se estiver saiá e entre novamente nela!");
		if(GetPickup[playerid] >= 0 && GetPickup[playerid] < sizeof(Pickups)) return SendClientMessage(playerid, COLOR_GRAY, "Isto não é nenhuma casa!");
		if(strcmp(pckStats[GetPickup[playerid]][PickupDono],PlayerName(playerid),true) == 0 && strcmp(pckStats[GetPickup[playerid]][Chave],PlayerName(playerid),true) == 0){
		    pckStats[GetPickup[playerid]][Trancada] = 0;
		    SendClientMessage(playerid, COLOR_GREEN, "Casa aberta!");
		    return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está com a chave da casa, ou não é o dono dela!");
		    return 1;
		}
	}
	if(strcmp(cmd, "/tocarcampainha", true) == 0) {
	    if(GetPickup[playerid] == -1) return SendClientMessage(playerid, COLOR_GRAY, "EI, você não está em nenhuma casa, se estiver saiá e entre novamente nela!");
		if(GetPickup[playerid] >= 0 && GetPickup[playerid] < sizeof(Pickups)) return SendClientMessage(playerid, COLOR_GRAY, "Isto não é nenhuma casa!");
		for(new i = 0; i < SLOTS2; i++){
		    if(NaCasa[i] == 1 && PickupEntradaCasa[i] == GetPickup[playerid]){
		        SendClientMessage(i, COLOR_AZULPLUS, "* DING DONG");
		        PlayerPlaySound(i,1057,0.0,0.0,0.0);
			}
		}
		SendClientMessage(playerid, COLOR_AZULPLUS, "* DING DONG");
		PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		return 1;
	}
	if(strcmp(cmd, "/liberartelefone", true) == 0) {
	    if(!DonoDaPropriedade(playerid,13) && !SocioDaPropriedade(playerid,13)) return SendClientMessage(playerid, COLOR_GRAY, "Você não é dono nem sócio da ECTVL.");
	    new tmp[256], string[256];
	    tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /liberartelefone [id]");
		if(pStats[strval(tmp)][Casa] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não tem casa!");
		if(pckStats[GetPickupCasa(strval(tmp))][SemTelefone] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Senhor, o telefone desse jogador não está cortado!");
		format(string,sizeof(string),"[NOTICIAS] Suborno ou Negociação! o dono/sócio da ECTVL Sr. %s liberou o telefone da casa de %s cujo a conta era de $%d",PlayerName(playerid),PlayerName(strval(tmp)),pckStats[GetPickupCasa(strval(tmp))][ContaTelefone]);
		SendClientMessageToAll(COLOR_WHITE, string);
		pckStats[GetPickupCasa(strval(tmp))][ContaTelefone] = 0;
		pckStats[GetPickupCasa(strval(tmp))][SemTelefone] = 0;
		return 1;
	}
	if(strcmp(cmd, "/liberarluz", true) == 0) {
	    if(!DonoDaPropriedade(playerid,12) && !SocioDaPropriedade(playerid,12)) return SendClientMessage(playerid, COLOR_GRAY, "Você não é dono nem sócio da COEVL.");
	    new tmp[256], string[256];
	    tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /liberarluz [id]");
		if(pStats[strval(tmp)][Casa] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não tem casa!");
		if(pckStats[GetPickupCasa(strval(tmp))][SemLuz] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Senhor, a luz desse jogador não está cortada!");
		format(string,sizeof(string),"[NOTICIAS] Suborno ou Negociação! o dono/sócio da COEVL Sr. %s liberou a luz da casa de %s cujo a conta era de $%d",PlayerName(playerid),PlayerName(strval(tmp)),pckStats[GetPickupCasa(strval(tmp))][SemLuz]);
		SendClientMessageToAll(COLOR_WHITE, string);
		pckStats[GetPickupCasa(strval(tmp))][ContaLuz] = 0;
		pckStats[GetPickupCasa(strval(tmp))][SemLuz] = 0;
		return 1;
	}
	if(strcmp(cmd, "/pagartelefone", true) == 0) {
	    new string[256];
		new tmp[256];
	    format(tmp,256,"%d",playerid);
		if(pStats[playerid][Casa] == 0) {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem casa!");
		    return 1;
		}
		if(AreaECTVL[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está na ECTVL (Empresa de Contas Telefônicas Virtual Life)");
		    return 1;
		}
		if(pckStats[GetPickupCasa(strval(tmp))][SemTelefone] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Senhor, seu telefone não está cortado!");
		    return 1;
		}
		if(GetPlayerMoney(playerid) < pckStats[GetPickupCasa(strval(tmp))][ContaTelefone]){
		    SendClientMessage(playerid, COLOR_GRAY, "O senhor não tem dinheiro, sendo assim eu não posso fazer nada, sinto muito!");
			format(string,sizeof(string),"CUSTO: $%d",pckStats[GetPickupCasa(strval(tmp))][ContaTelefone]);
			SendClientMessage(playerid, COLOR_GRAY, string);
			return 1;
		}
		AddPlayerMoney(playerid,-pckStats[GetPickupCasa(strval(tmp))][ContaTelefone], -1);
		AcrescentarLucro(13,pckStats[GetPickupCasa(strval(tmp))][ContaTelefone]/2);
		format(string,sizeof(string),"OK senhor, seu telefone foi liberado novamente pelo custo de $%d",pckStats[GetPickupCasa(strval(tmp))][ContaTelefone]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		pckStats[GetPickupCasa(strval(tmp))][ContaTelefone];
		pckStats[GetPickupCasa(strval(tmp))][SemTelefone] = 0;
		return 1;
	}
	if(strcmp(cmd, "/pagarluz", true) == 0) {
		new string[256];
		new tmp[256];
	    format(tmp,256,"%d",playerid);
		if(pStats[playerid][Casa] == 0) {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem casa!");
		    return 1;
		}
		if(AreaCOEVL[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está na COEVL (Companhia Elétrica Virtual Life)");
		    return 1;
		}
		if(pckStats[GetPickupCasa(strval(tmp))][SemLuz] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Senhor, sua luz não está cortada!");
		    return 1;
		}
		if(GetPlayerMoney(playerid) < pckStats[GetPickupCasa(strval(tmp))][ContaLuz] ){
		    SendClientMessage(playerid, COLOR_GRAY, "O senhor não tem dinheiro, sendo assim eu não posso fazer nada, sinto muito!");
			format(string,sizeof(string),"CUSTO: $%d",pckStats[GetPickupCasa(strval(tmp))][ContaLuz] );
			SendClientMessage(playerid, COLOR_GRAY, string);
			return 1;
		}
		AddPlayerMoney(playerid,-pckStats[GetPickupCasa(strval(tmp))][ContaLuz] ,-1);
		AcrescentarLucro(12,pckStats[GetPickupCasa(strval(tmp))][ContaLuz] /2);
		format(string,sizeof(string),"OK senhor, sua luz foi liberada novamente pelo custo de $%d",pckStats[GetPickupCasa(strval(tmp))][ContaLuz] );
		SendClientMessage(playerid, COLOR_WHITE, string);
		pckStats[GetPickupCasa(strval(tmp))][ContaLuz] = 0;
		pckStats[GetPickupCasa(strval(tmp))][SemLuz] = 0;
		return 1;
	}
	if(strcmp(cmd, "/minhapickup", true) == 0 && IsPlayerAdmin(playerid)) {
		new msg[256];
		format(msg,sizeof(msg),"Sua pickup: %d",GetPickup[playerid]);
		SendClientMessage(playerid, COLOR_WHITE, msg);
		return 1;
	}
	if(strcmp(cmd, "/entrar", true) == 0) {
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você deve estar fora de um veículo para entrar em uma porta...");
		new pickupid = GetPickup2[playerid];
		if(pickupid == 22){
	    	AreaCofre[playerid] = 1;
			SetPlayerPos(playerid,1490.9890,1305.4993,1093.2964);
			SetPlayerInterior(playerid,3);
			SendClientMessage(playerid, COLOR_RED2, "Virtual Life RPG - Loja de registro de cofres:");
			SendClientMessage(playerid, COLOR_RED2, "Aqui é onde ficam todos os registros de cofres do jogo!");
			SendClientMessage(playerid, COLOR_WHITE, "Comandos disponíveis:");
			SendClientMessage(playerid, COLOR_WHITE, "/registrarcofre [senha] : Registrar uma senha para o seu cofre!");
			SendClientMessage(playerid, COLOR_WHITE, "/minhasenhacofre : Ver a senha do seu cofre...");
			SendClientMessage(playerid, COLOR_WHITE, "/cofreinfo : Ver o que está guardado em seu cofre!");
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~loja de registro de cofres",3000,3);
		}
		else if(pickupid == 49){
		    InDidierSachs[playerid] = 1;
		    SetPlayerPos(playerid,204.3330,-166.6950,1000.5234);
		    SetPlayerInterior(playerid,14);
		    SendClientMessage(playerid, COLOR_WHITE, "Didier Sachs: para adquirir uma nova skin digite /comprarskin [ID/da/skin]");
		    SendClientMessage(playerid, COLOR_WHITE, "Didier Sachs: para experimentar uma skin digite /experimentarskin [ID/da/skin]");
		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~didier sachs",3000,3);
		}
		else if(pickupid == 50){
		    InProLaps[playerid] = 1;
		    SetPlayerPos(playerid,207.0562,-138.3951,1003.5078);
		    SetPlayerInterior(playerid,3);
		    SendClientMessage(playerid, COLOR_WHITE, "Pro Laps: para adquirir uma nova skin digite /comprarskin [ID/da/skin]");
            SendClientMessage(playerid, COLOR_WHITE, "Pro Laps: para experimentar uma skin digite /experimentarskin [ID/da/skin]");
            GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~pro laps",3000,3);
		}
		else if(pickupid == 51){
		    InVictim[playerid] = 1;
		    SetPlayerPos(playerid,226.2940,-7.4315,1002.2109);
		    SetPlayerInterior(playerid,5);
		    SendClientMessage(playerid, COLOR_WHITE, "Victim: para adquirir uma nova skin digite /comprarskin [ID/da/skin]");
		    SendClientMessage(playerid, COLOR_WHITE, "Victim: para experimentar uma skin digite /experimentarskin [ID/da/skin]");
		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~victim",3000,3);
		}
		else if(pickupid == 52){
		    InBinco[playerid] = 1;
		    SetPlayerPos(playerid,207.7106,-109.3912,1005.1328);
		    SetPlayerInterior(playerid,15);
		    SendClientMessage(playerid, COLOR_WHITE, "Binco: para adquirir uma nova skin digite /comprarskin [ID/da/skin]");
		    SendClientMessage(playerid, COLOR_WHITE, "Binco: para experimentar uma skin digite /experimentarskin [ID/da/skin]");
		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~binco",3000,3);
		}
		else if(pickupid == 53){
		    InSubUrban[playerid] = 1;
		    SetPlayerPos(playerid,203.7780,-48.4924,1001.8047);
		    SetPlayerInterior(playerid,1);
		    SendClientMessage(playerid, COLOR_WHITE, "Sub Urban: para adquirir uma nova skin digite /comprarskin [ID/da/skin]");
		    SendClientMessage(playerid, COLOR_WHITE, "Sub Urban: para experimentar uma skin digite /experimentarskin [ID/da/skin]");
		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~sub urban",3000,3);
		}
		else if(pickupid == 54){
		    SetPlayerPos(playerid,502.0535,-69.5163,998.7578);
		    SetPlayerInterior(playerid,11);
		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~bar",3000,3);
		}
		else if(pickupid == 55){
		    SetPlayerPos(playerid,1204.9303,-11.9801,1000.9219);
		    SetPlayerInterior(playerid,2);
		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~boate",3000,3);
		}
		else if(pickupid == 56){
		    SetPlayerPos(playerid,493.3910,-22.4116,1000.6797);
		    SetPlayerInterior(playerid,17);
		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~balada",3000,3);
		}
		else if(pickupid == 57){
		    SetPlayerPos(playerid,296.9226,-111.0700,1001.5156);
		    PickupAmmuSelect[playerid] = 1;
		    SetPlayerInterior(playerid,6);
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid,289.6063,-109.7727,1001.5156,3.5);
		    CheckpointStatus[playerid] = ARMAS;
		    SendClientMessage(playerid, COLOR_RED2, "|================| Bem vindo à Ammu Nation |================|");
		    SendClientMessage(playerid, COLOR_WHITE, "Ammu Nation: para adquirir armas entre no checkpoint...");
		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~ammu nation",3000,3);
		}
		else if(pickupid == 58){
		    SetPlayerPos(playerid,296.9226,-111.0700,1001.5156);
		    PickupAmmuSelect[playerid] = 2;
		    SetPlayerInterior(playerid,6);
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid,289.6063,-109.7727,1001.5156,3.5);
		    CheckpointStatus[playerid] = ARMAS;
		    SendClientMessage(playerid, COLOR_RED2, "|================| Bem vindo à Ammu Nation |================|");
		    SendClientMessage(playerid, COLOR_WHITE, "Ammu Nation: para adquirir armas entre no checkpoint...");
            GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~ammu nation",3000,3);
		}
		else if(pickupid == 59){
		    SetPlayerPos(playerid,246.7840,63.9002,1003.6406);
		    SetPlayerInterior(playerid,6);
		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~delegacia",3000,3);
		}
		else if(pickupid == 60){
		    SetPlayerPos(playerid,832.8324,7.4180,1004.1797);
		    SetPlayerInterior(playerid,3);
		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~loteria de cavalos",3000,3);
		}
		else if(pickupid == 61){
		    SetPlayerPos(playerid,-31.0222,-89.7937,1003.5469);
		    SetPlayerInterior(playerid,18);
		    PickupUtilidadesSelect[playerid] = 1;
		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~loja de utilidades 24/7",3000,3);
		}
		else if(pickupid == 62){
		    SetPlayerPos(playerid,-31.0222,-89.7937,1003.5469);
		    SetPlayerInterior(playerid,18);
		    PickupUtilidadesSelect[playerid] = 2;
		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~loja de utilidades 24/7",3000,3);
		}
		else if(pickupid == 63){
		    SetPlayerPos(playerid,-31.0222,-89.7937,1003.5469);
		    SetPlayerInterior(playerid,18);
		    PickupUtilidadesSelect[playerid] = 3;
		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~loja de utilidades 24/7",3000,3);
		}
		else if(pickupid == 64){
		    SetPlayerPos(playerid,-31.0222,-89.7937,1003.5469);
		    SetPlayerInterior(playerid,18);
		    PickupUtilidadesSelect[playerid] = 4;
		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~loja de utilidades 24/7",3000,3);
		}
		else if(pickupid == 65){
		    SetPlayerPos(playerid,-31.0222,-89.7937,1003.5469);
		    SetPlayerInterior(playerid,18);
		    PickupUtilidadesSelect[playerid] = 5;
		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~loja de utilidades 24/7",3000,3);
		}
		else if(pickupid == 66){
		    SetPlayerPos(playerid,363.4130,-74.5787,1001.5078);
		    SetPlayerInterior(playerid,10);
		    PickupBurgerShotSelect[playerid] = 1;
		    SetPlayerCheckpoint(playerid,376.3405,-67.4712,1001.5078,2.0);
		    CheckpointStatus[playerid] = BURGERS;
		    SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "Bem vindo à Burger Shot!");
		    SendClientMessage(playerid, COLOR_GREEN2, "Se quiser comer algo, vá até o CheckPoint (marca vermelha) no radar");
		    SendClientMessage(playerid, COLOR_GREEN2, "Se quiser usar o banheiro, ele fica na porta à esquerda...");
		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~burger shot",3000,3);
		}
		else if(pickupid == 80){
		    SetPlayerPos(playerid,363.4130,-74.5787,1001.5078);
		    SetPlayerInterior(playerid,10);
		    PickupBurgerShotSelect[playerid] = 2;
		    SetPlayerCheckpoint(playerid,376.3405,-67.4712,1001.5078,2.0);
		    CheckpointStatus[playerid] = BURGERS;
		    SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "Bem vindo à Burger Shot!");
		    SendClientMessage(playerid, COLOR_GREEN2, "Se quiser comer algo, vá até o CheckPoint (marca vermelha) no radar");
		    SendClientMessage(playerid, COLOR_GREEN2, "Se quiser usar o banheiro, ele fica na porta à esquerda...");
		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~burger shot",3000,3);
		}
		else if(pickupid == 47){
		    if(ValorDia != 0){
				if(RecebeuMSG[playerid] == 0){
					new string[256];
		        	format(string,sizeof(string),"O estádio fica aberto apenas dias de domingo, hoje é %s",DiaName[ValorDia]);
    	 			SendClientMessage(playerid, COLOR_RED2, string);
				}
			 	RecebeuMSG[playerid] = 1;
				SetTimerEx("ZerarRecebeuMSG",5000,0,"d",playerid);
				return 1;
			}
		    SetPlayerPos(playerid,-1465.4435,1560.3199,1052.7500);
	    	SetPlayerInterior(playerid,14);
	    	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~estadio de stunt",3000,3);
		}
		else if(pickupid == 33){
		    SetPlayerPos(playerid,315.6061,-127.8440,1004.0625);
		    SetPlayerInterior(playerid,7);
		    DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid,308.4588,-142.7652,1004.0625,1.5);
			CheckpointStatus[playerid] = LOJA_MUNICOES;
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~loja de municoes",3000,3);
		}
		else if(pickupid == 37){
		    SetPlayerPos(playerid,2528.1272,-1679.1464,1015.4986);
		    SetPlayerInterior(playerid,1);
		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~casa do Sweet",3000,3);
		}
		else if(pickupid == 35){
		    SetPlayerPos(playerid,2447.8704,-1704.4509,1013.5078);
		    SetPlayerInterior(playerid,2);
		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~casa do Ryder",3000,3);
		}
		else if(pickupid == 45){
		    SetPlayerPos(playerid,278.7329,-1613.8917,97.4182);
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid,272.3840,-1613.9673,97.4182,2.0);
		    CheckpointStatus[playerid] = CORRETORA_PROPRIEDADES;
		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~corretora de propriedades",3000,3);
		}
		else if(pickupid == 42){
		    SetPlayerPos(playerid,-2161.7053,642.8295,1052.3750);
		    SetPlayerInterior(playerid,1);
			TextDrawShowForPlayer(playerid,tdLoteria);
			AreaLoteria[playerid] = 1;
			SendClientMessage(playerid, COLOR_RED2, "|================| Bem vindo à Loteria |================|");
			SendClientMessage(playerid, COLOR_WHITE, "/loteria [1-20] [1-20] : Para comprar um bilhete de aposta!");
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~loteria",3000,3);
		}
		else if(pickupid == 39){
			SetPlayerPos(playerid,245.3983,112.6224,1003.2188);
			SetPlayerInterior(playerid,10);
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~tribunal",3000,3);
		}
		else if(pickupid == 43){
		    SetPlayerInterior(playerid,3);
		    SetPlayerFacingAngle(playerid,90);
		    SetPlayerPos(playerid,387.9047,171.1747,1008.3828);
		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~agencia de empregos",3000,3);
		}
		else if(pickupid == 24){
		    if(HoraJogo < 7 || HoraJogo > 20){
   				if(RecebeuMSG[playerid] == 1) SendClientMessage(playerid, COLOR_GRAY, "Banco fechado, abrimos das 07:00 até às 21:00");
				RecebeuMSG[playerid] = 1;
				SetTimerEx("ZerarRecebeuMSG",5000,0,"d",playerid);
				return 1;
			}
			SetPlayerVirtualWorld(playerid,1);
	    	SetPlayerInterior(playerid,0);
	    	SetPlayerFacingAngle(playerid,260.9407);
	    	SetPlayerPos(playerid,2306.1553,-13.2539,26.7422);
	    	pickupbancoselecionada[playerid] = 1;
	    	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~banco",3000,3);
		}
		else if(pickupid == 25){
		    if(HoraJogo < 10 || HoraJogo > 23){
	    		if(RecebeuMSG[playerid] == 1) SendClientMessage(playerid, COLOR_GRAY, "Banco fechado, abrimos das 10:00 até às 00:00");
            	RecebeuMSG[playerid] = 1;
				SetTimerEx("ZerarRecebeuMSG",5000,0,"d",playerid);
		 		return 1;
			}
			SetPlayerVirtualWorld(playerid,2);
	    	SetPlayerInterior(playerid,0);
	    	SetPlayerFacingAngle(playerid,260.9407);
	    	SetPlayerPos(playerid,2306.1553,-13.2539,26.7422);
	    	pickupbancoselecionada[playerid] = 2;
	    	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~banco",3000,3);
		}
    	else if(pickupid == 26){
    	    if(HoraJogo < 8 || HoraJogo > 18){
			    if(RecebeuMSG[playerid] == 1) SendClientMessage(playerid, COLOR_GRAY, "Banco fechado, abrimos das 08:00 até às 19:00");
    	        RecebeuMSG[playerid] = 1;
				SetTimerEx("ZerarRecebeuMSG",5000,0,"d",playerid);
				return 1;
			}
			SetPlayerVirtualWorld(playerid,3);
		    SetPlayerInterior(playerid,0);
		    SetPlayerFacingAngle(playerid,260.9407);
		    SetPlayerPos(playerid,2306.1553,-13.2539,26.7422);
		    pickupbancoselecionada[playerid] = 3;
		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~banco",3000,3);
		}
    	else if(pickupid == 27){
        	if(HoraJogo > 19){
			    if(RecebeuMSG[playerid] == 1) SendClientMessage(playerid, COLOR_GRAY, "Banco fechado, abrimos das 00:00 até às 20:00");
        	    RecebeuMSG[playerid] = 1;
				SetTimerEx("ZerarRecebeuMSG",5000,0,"d",playerid);
				return 1;
			}
			SetPlayerVirtualWorld(playerid,4);
	    	SetPlayerInterior(playerid,0);
	    	SetPlayerFacingAngle(playerid,260.9407);
	    	SetPlayerPos(playerid,2306.1553,-13.2539,26.7422);
	    	pickupbancoselecionada[playerid] = 4;
	    	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~banco",3000,3);
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma porta de entrada!");
		}
		return 1;
	}
	if(strcmp(cmd, "/sair", true) == 0) {
		new pickupid = GetPickup2[playerid];
	   	if(pickupid == 23){
 	   		AreaCofre[playerid] = 0;
		    SetPlayerPos(playerid,1845.6234,-1866.1049,13.5752);
		    SetPlayerInterior(playerid,0);
		}
		else if(pickupid == 67){
	    	InDidierSachs[playerid] = 0;
	    	SetPlayerPos(playerid,452.4577,-1479.4701,30.8395);
			SetPlayerInterior(playerid,0);
		}
		else if(pickupid == 68){
		    SetPlayerPos(playerid,497.9007,-1358.6243,16.5186);
		    InProLaps[playerid] = 0;
		    SetPlayerInterior(playerid,0);
		}
		else if(pickupid == 69){
		    SetPlayerPos(playerid,458.6580,-1500.4800,31.0444);
		    InVictim[playerid] = 0;
		    SetPlayerInterior(playerid,0);
		}
		else if(pickupid == 70){
		    SetPlayerPos(playerid,2245.2300,-1663.8357,15.4766);
		    InBinco[playerid] = 0;
		    SetPlayerInterior(playerid,0);
		}
		else if(pickupid == 71){
		    SetPlayerPos(playerid,2111.6140,-1212.7043,23.9647);
		    InSubUrban[playerid] = 0;
		    SetPlayerInterior(playerid,0);
		}
		else if(pickupid == 72){
		    SetPlayerPos(playerid,2308.3047,-1644.2471,14.8270);
		    SetPlayerInterior(playerid,0);
		}
		else if(pickupid == 73){
		    SetPlayerPos(playerid,2421.2444,-1222.3062,25.3649);
		    SetPlayerInterior(playerid,0);
		}
		else if(pickupid == 74){
		    SetPlayerPos(playerid,1833.9900,-1681.7484,13.4503);
		    SetPlayerInterior(playerid,0);
		}
		else if(pickupid == 75){
			if(PickupAmmuSelect[playerid] == 1){
			    SetPlayerPos(playerid,1365.3528,-1279.0581,13.5469);
			}
			else{
			    SetPlayerPos(playerid,2400.6978,-1979.9229,13.5469);
			}
			DisablePlayerCheckpoint(playerid);
			CheckpointStatus[playerid] = NONE;
			PickupAmmuSelect[playerid] = 0;
		    SetPlayerInterior(playerid,0);
		}
		else if(pickupid == 76){
		    SetPlayerPos(playerid,1553.1730,-1675.0323,16.1953);
		    SetPlayerInterior(playerid,0);
		}
		else if(pickupid == 78){
		    if(PickupUtilidadesSelect[playerid] == 1) SetPlayerPos(playerid,1315.4430,-900.6385,39.5781);
			else if(PickupUtilidadesSelect[playerid] == 2) SetPlayerPos(playerid,1929.8149,-1776.3326,13.5469);
            else if(PickupUtilidadesSelect[playerid] == 3) SetPlayerPos(playerid,999.4342,-920.1180,42.1797);
            else if(PickupUtilidadesSelect[playerid] == 4) SetPlayerPos(playerid,1352.4203,-1758.5322,13.5078);
            else if(PickupUtilidadesSelect[playerid] == 5) SetPlayerPos(playerid,1832.4796,-1842.6014,13.5781);
			PickupUtilidadesSelect[playerid] = 0;
			SetPlayerInterior(playerid,0);
		}
		else if(pickupid == 77){
		    SetPlayerPos(playerid,1631.3468,-1168.5192,24.0781);
            SetPlayerInterior(playerid,0);
		}
		else if(pickupid == 79){
		    if(PickupBurgerShotSelect[playerid] == 1) SetPlayerPos(playerid,811.6748,-1616.1306,13.5469);
			else if(PickupBurgerShotSelect[playerid] == 2) SetPlayerPos(playerid,1199.1923,-918.6677,43.1197);
			PickupBurgerShotSelect[playerid] = 0;
			SetPlayerInterior(playerid,0);
			DisablePlayerCheckpoint(playerid);
			CheckpointStatus[playerid] = NONE;
			SendClientMessage(playerid, COLOR_GREEN2, "A Burger Shot lhe agradece pela visita!");
		}
		else if(pickupid == 48){
		    SetPlayerPos(playerid,2694.3291,-1702.7571,11.3968);
		    SetPlayerInterior(playerid,0);
		}
		else if(pickupid == 34){
    	    SetPlayerPos(playerid,1990.7200,-1994.6937,13.5469);
		    SetPlayerInterior(playerid,0);
		}
		else if(pickupid == 38){
		    SetPlayerPos(playerid,2514.6113,-1674.0127,13.6615);
		    SetPlayerInterior(playerid,0);
		}
		else if(pickupid == 36){
		    SetPlayerPos(playerid,2460.3733,-1687.6772,13.5333);
		    SetPlayerInterior(playerid,0);
		}
		else if(pickupid == 46){
	    	DisablePlayerCheckpoint(playerid);
		    CheckpointStatus[playerid] = NONE;
		    SetPlayerPos(playerid,2867.4526,-1406.6439,11.0222);
		}
		else if(pickupid == 41){
	    	SetPlayerPos(playerid,1737.6434,-1588.6013,13.5431);
	    	SetPlayerInterior(playerid,0);
			TextDrawHideForPlayer(playerid,tdLoteria);
		    AreaLoteria[playerid] = 0;
		}
		else if(pickupid == 40){
			SetPlayerPos(playerid,245.9066,66.4157,1003.6406);
			SetPlayerInterior(playerid,6);
		}
		else if(pickupid == 44){
			SetPlayerInterior(playerid,0);
			SetPlayerFacingAngle(playerid,168.6);
			SetPlayerPos(playerid,1310.0126,-1370.7745,13.5797);
		}
		else if(pickupid == 28){
			if(pickupbancoselecionada[playerid] == 1){
			    SetPlayerVirtualWorld(playerid,0);
				SetPlayerInterior(playerid,0);
			    SetPlayerFacingAngle(playerid,260.9407);
			    SetPlayerPos(playerid,1770.7097,-1658.8129,14.4207);
			    pickupbancoselecionada[playerid] = 0;
	 		}
	   		else if(pickupbancoselecionada[playerid] == 2){
	   		    SetPlayerVirtualWorld(playerid,0);
				SetPlayerInterior(playerid,0);
			    SetPlayerFacingAngle(playerid,260.9407);
			    SetPlayerPos(playerid,1385.2159,-1017.0630,26.5754);
			    pickupbancoselecionada[playerid] = 0;
	   		}
			else if(pickupbancoselecionada[playerid] == 3){
			    SetPlayerVirtualWorld(playerid,0);
				SetPlayerInterior(playerid,0);
			    SetPlayerFacingAngle(playerid,260.9407);
			    SetPlayerPos(playerid,419.8152,-1430.3162,32.3457);
			    pickupbancoselecionada[playerid] = 0;
	    	}
	   		else if(pickupbancoselecionada[playerid] == 4){
	   		    SetPlayerVirtualWorld(playerid,0);
				SetPlayerInterior(playerid,0);
	    		SetPlayerFacingAngle(playerid,260.9407);
	    		SetPlayerPos(playerid,2867.9150,-1436.2626,10.9672);
	   			pickupbancoselecionada[playerid] = 0;
	    	}
		}
	    else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma porta de saída!");
		}
		return 1;
	}
	if(strcmp(cmd, "/entrarcasa", true) == 0) {
        new pickupid = GetPickup[playerid];
	    if(!compare(pckStats[pickupid][PickupDono],"NONE")){
			if(pckStats[pickupid][Trancada] == 1){
		    	SendClientMessage(playerid, COLOR_GRAY, "Essa casa está trancada... Se você for o dono dela e possuir a chave pode destranca-la com /destrancarcasa");
		    	SendClientMessage(playerid, COLOR_GRAY, "Caso contrário, VÁ EMBORA!!");
				return 1;
			}
			if(IsStringAName(pckStats[pickupid][PickupDono]) ||
			((pStats[playerid][LocouCasa] == 1 && compare(pStats[playerid][DonoCasaAlugada],pckStats[pickupid][PickupDono])
			|| MoradorConvidado(playerid,pickupid)))) {
			    new ID = IDName(pckStats[pickupid][PickupDono]);
				if((strcmp(pckStats[pickupid][PickupDono],PlayerName(playerid),true) == 0) || (IsConvidado(playerid,ID)) || ((pStats[playerid][LocouCasa] == 1 && compare(pStats[playerid][DonoCasaAlugada],pckStats[pickupid][PickupDono])) || MoradorConvidado(playerid,pickupid))){
        	        NaCasa[playerid] = 1;
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(playerid,X,Y,Z);
					PickupEntradaCasa[playerid] = pickupid;
					EntradaCasa[playerid][0] = X;
					EntradaCasa[playerid][1] = Y;
					EntradaCasa[playerid][2] = Z;
					SetPlayerVirtualWorld(playerid,pickupid);
					RadioJogadorLigado(playerid);
					SendClientMessage(playerid, COLOR_WHITE, "Para sair da casa digite /saircasa");
					SetPlayerPos(playerid,PosCasas[pckStats[pickupid][Int]][hX],PosCasas[pckStats[pickupid][Int]][hY],PosCasas[pckStats[pickupid][Int]][hZ]);
					SetPlayerInterior(playerid,IntCasas[pckStats[pickupid][Int]]);
					return 1;
				}
				else{
				    SendClientMessage(playerid, COLOR_GRAY, "Você não pode entrar aqui pois não foi convidado e não é o proprietario dessa casa!");
					SendClientMessage(playerid, COLOR_WHITE, "Para tocar a campainha digite /tocarcampainha");
					return 1;
				}
			}
			else{
  				SendClientMessage(playerid, COLOR_GRAY, "Você não pode entrar aqui pois não foi convidado e não é o proprietario dessa casa!");
        	    SendClientMessage(playerid, COLOR_WHITE, "Para tocar a campainha digite /tocarcampainha");
				return 1;
			}
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Esteja em frente a uma casa para usar esse comando.");
			return 1;
		}
	}
	if(strcmp(cmd, "/saircasa", true) == 0) {
		if(NaCasa[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
		    return 1;
		}
		if(EmLigacao[playerid] == 1 && extensao[playerid] == telefone_extension){
		    SendClientMessage(playerid, COLOR_GRAY, "Você está no telefone, não pode sair da casa!");
		    return 1;
		}
		else{
		    DesligarJogadorRadio(playerid);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerInterior(playerid,0);
		    SetPlayerPos(playerid,EntradaCasa[playerid][0]+0.7,EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
			NaCasa[playerid] = 0;
			PickupEntradaCasa[playerid] = 0;
			return 1;
		}
	}

	if(strcmp(cmd, "/convidar", true) == 0) {
	    new tmp[256];
	    new plid;
	    tmp = strtok(cmdtext,idx);
	    plid = strval(tmp);
	    if(!strlen(tmp)){
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /convidar [id]");
	        return 1;
		}
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		    return 1;
		}
		if(IsConvidado(plid,playerid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Ele já é seu convidado!");
		    return 1;
		}
		else{
		    new string[256];
		    format(string,sizeof(string),"%s lhe convidou para entrar na casa dele!",PlayerName(playerid));
		    SendClientMessage(plid, COLOR_GREEN, string);
		    SendClientMessage(plid, COLOR_WHITE, "Para aceitar o convite digite /aceitarconvite , senão digite /recusarconvite");
		    SendClientMessage(playerid, COLOR_GREEN, "Espere o jogador aceitar o convite!");
			Convidando[plid] = playerid;
			return 1;
		}
	}
	if(strcmp(cmd, "/aceitarconvite", true) == 0) {
		new t = 0;
		if(Convidando[playerid] == -1) return SendClientMessage(playerid, COLOR_GRAY, "Você não recebeu nenhum convite!");
		SendClientMessage(Convidando[playerid], COLOR_GREEN, "O convite foi aceito!");
		SendClientMessage(playerid, COLOR_WHITE, "Convite aceito!");
		for(new i = 0; i < QtConvidados[Convidando[playerid]]; i++){
		    if(Convidado[Convidando[playerid]][i] == INVALID_PLAYER_ID && t == 0){
		        t = 1;
		        Convidado[Convidando[playerid]][i] = playerid;
		        break;
			}
		}
		if(t == 0){
        	Convidado[Convidando[playerid]][QtConvidados[playerid]] = playerid;
			QtConvidados[Convidando[playerid]]++;
		}
		Convidando[playerid] = -1;
		return 1;
	}
	if(strcmp(cmd, "/recusarconvite", true) == 0) {
		if(Convidando[playerid] == -1) return SendClientMessage(playerid, COLOR_GRAY, "Você não recebeu nenhum convite!");
		SendClientMessage(Convidando[playerid], COLOR_GREEN, "O convite foi recusado!");
		SendClientMessage(playerid, COLOR_WHITE, "Convite recusado!");
		Convidando[playerid] = -1;
		return 1;
	}
	if(strcmp(cmd, "/expulsar", true) == 0) {
	    new tmp[256];
	    new plid;
	    tmp = strtok(cmdtext,idx);
	    plid = strval(tmp);
	    if(!strlen(tmp)){
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /expulsar [id]");
	        return 1;
		}
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		    return 1;
		}
		if(!IsConvidado(plid,playerid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Ele não é seu convidado!");
		    return 1;
		}
		else{
		    if(NaCasa[plid] == 1){
				if(strcmp(pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid),true) == 0 && strlen(PlayerName(playerid)) == strlen(pckStats[PickupEntradaCasa[playerid]][PickupDono])){
				    DesligarJogadorRadio(plid);
		    		SetPlayerVirtualWorld(plid,0);
		    		SetPlayerInterior(plid,0);
		    		SetPlayerPos(plid,EntradaCasa[plid][0]+0.7,EntradaCasa[plid][1],EntradaCasa[plid][2]);
					NaCasa[plid] = 0;
				}
			}
		    new string[256];
		    format(string,sizeof(string),"%s lhe expulsou da casa dele!",PlayerName(playerid));
		    SendClientMessage(plid, COLOR_GREEN, string);
		    SendClientMessage(playerid, COLOR_GREEN, "Jogador expulso!");
			for(new i = 0; i < QtConvidados[playerid]; i++){
			    if(Convidado[playerid][i] == plid) Convidado[playerid][i] = INVALID_PLAYER_ID;
			}
			return 1;
		}
	}
	if(strcmp(cmd,"/cofreinfo",true) == 0) {
	    if(pStats[playerid][Casa] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Primeiro de tudo: VOCÊ NÃO TEM CASA!!!");
        if(AreaCofre[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na loja de registros de cofres!");
		SendClientMessage(playerid, COLOR_RED2, "Informações sobre seu cofre:");
		new string[256];
		format(string,sizeof(string),"Dinheiro guardado: $%d",pckStats[GetPickupCasa(playerid)][DinheiroCofre]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string,sizeof(string),"Slot 0: Arma %d com %d munições | Slot 1: Arma %d com %d munições",pckStats[GetPickupCasa(playerid)][ArmasCofre][0],pckStats[GetPickupCasa(playerid)][ArmasAmmoCofre][0],pckStats[GetPickupCasa(playerid)][ArmasCofre][1],pckStats[GetPickupCasa(playerid)][ArmasAmmoCofre][1]);
 		SendClientMessage(playerid, COLOR_WHITE, string);
 		format(string,sizeof(string),"Slot 2: Arma %d com %d munições | Slot 3: Arma %d com %d munições",pckStats[GetPickupCasa(playerid)][ArmasCofre][2],pckStats[GetPickupCasa(playerid)][ArmasAmmoCofre][2],pckStats[GetPickupCasa(playerid)][ArmasCofre][3],pckStats[GetPickupCasa(playerid)][ArmasAmmoCofre][3]);
 		SendClientMessage(playerid, COLOR_WHITE, string);
 		format(string,sizeof(string),"Slot 4: Arma %d com %d munições | Slot 5: Arma %d com %d munições",pckStats[GetPickupCasa(playerid)][ArmasCofre][4],pckStats[GetPickupCasa(playerid)][ArmasAmmoCofre][4],pckStats[GetPickupCasa(playerid)][ArmasCofre][5],pckStats[GetPickupCasa(playerid)][ArmasAmmoCofre][5]);
 		SendClientMessage(playerid, COLOR_WHITE, string);
 		format(string,sizeof(string),"Slot 6: Arma %d com %d munições | Slot 7: Arma %d com %d munições",pckStats[GetPickupCasa(playerid)][ArmasCofre][6],pckStats[GetPickupCasa(playerid)][ArmasAmmoCofre][6],pckStats[GetPickupCasa(playerid)][ArmasCofre][7],pckStats[GetPickupCasa(playerid)][ArmasAmmoCofre][7]);
 		SendClientMessage(playerid, COLOR_WHITE, string);
 		format(string,sizeof(string),"Slot 8: Arma %d com %d munições | Slot 9: Arma %d com %d munições",pckStats[GetPickupCasa(playerid)][ArmasCofre][8],pckStats[GetPickupCasa(playerid)][ArmasAmmoCofre][8],pckStats[GetPickupCasa(playerid)][ArmasCofre][9],pckStats[GetPickupCasa(playerid)][ArmasAmmoCofre][9]);
 		SendClientMessage(playerid, COLOR_WHITE, string);
 		format(string,sizeof(string),"Slot 10: Arma %d com %d munições | Slot 11: Arma %d com %d munições",pckStats[GetPickupCasa(playerid)][ArmasCofre][10],pckStats[GetPickupCasa(playerid)][ArmasAmmoCofre][10],pckStats[GetPickupCasa(playerid)][ArmasCofre][11],pckStats[GetPickupCasa(playerid)][ArmasAmmoCofre][11]);
 		SendClientMessage(playerid, COLOR_WHITE, string);
 		format(string,sizeof(string),"Slot 12: Arma %d com %d munições",pckStats[GetPickupCasa(playerid)][ArmasCofre][12],pckStats[GetPickupCasa(playerid)][ArmasAmmoCofre][12]);
 		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string,sizeof(string),"Maconha: %d | Cocaína: %d | Heroína: %d",pckStats[GetPickupCasa(playerid)][MaconhaCofre],pckStats[GetPickupCasa(playerid)][CocainaCofre],pckStats[GetPickupCasa(playerid)][HeroinaCofre]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string,sizeof(string),"Essas são suas informações de cofre Senhor %s.",PlayerName(playerid));
		SendClientMessage(playerid, COLOR_RED2, string);
		return 1;
	}
	if(strcmp(cmd,"/minhasenhacofre",true) == 0) {
	    if(pStats[playerid][Casa] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Primeiro de tudo: VOCÊ NÃO TEM CASA!!!");
        if(AreaCofre[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na loja de registros de cofres!");
		new string[256];
		format(string,sizeof(string),"A senha do seu cofre é: %s",pckStats[GetPickupCasa(playerid)][SenhaCofre]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	if(strcmp(cmd,"/registrarcofre",true) == 0) {
		if(pStats[playerid][Casa] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Primeiro de tudo: VOCÊ NÃO TEM CASA!!!");
	    if(AreaCofre[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na loja de registros de cofres!");
	    new tmp[256];
	    new string[256];
	    tmp = strtok(cmdtext,idx);
	    if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /registrarcofre [senha]");
		set(pckStats[GetPickupCasa(playerid)][SenhaCofre],tmp);
		format(string,sizeof(string),"OK... Você trocou a senha do seu cofre para %s",tmp);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		return 1;
	}

	if(strcmp(cmd,"/cofresenha",true) == 0) {
	    new tmp[256];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /cofresenha [senha]");
		if(NaCasa[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Esteja em uma casa para usar esse comando!");
		if(CorrectPassword[playerid][PickupEntradaCasa[playerid]] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você já acessou a senha desse cofre.");
		if(strcmp(tmp,pckStats[PickupEntradaCasa[playerid]][SenhaCofre],true) == 0) {
		    CorrectPassword[playerid][PickupEntradaCasa[playerid]] = 1;
		    SendClientMessage(playerid, COLOR_GREEN, "Senha do cofre aceita, digite /cofre para ver as opções com ele!");
			return 1;
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "SENHA RECUSADA, essa não é a senha certa, portanto não podemos aceitar...");
			return 1;
		}
	}
	if(strcmp(cmd,"/cofre",true) == 0) {
	    if(CorrectPassword[playerid][PickupEntradaCasa[playerid]] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "USE: /cofresenha [senha] para acessar a senha e ter acesso ao cofre...");
			return 1;
		}
		if(NaCasa[playerid] == 1){
			ShowMenuForPlayer(cofremenu,playerid);
			TogglePlayerControllable(playerid,0);
			return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
		    return 1;
		}
	}
	if(strcmp(cmd,"/radio",true)==0){
	    if(IsPlayerConnected(playerid)){
	        if(NaCasa[playerid] == 0){
				SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
				return 1;
			}
			if(pckStats[PickupEntradaCasa[playerid]][Radio] == 0){
				SendClientMessage(playerid, COLOR_GRAY, "Essa casa não possui rádio!");
				return 1;
			}
			if(pckStats[PickupEntradaCasa[playerid]][SemLuz] == 1){
				SendClientMessage(playerid, COLOR_GRAY, "Essa casa está sem luz...");
				return 1;
			}
	        if(sombalada[PickupEntradaCasa[playerid]] == 0){
				SendClientMessage(playerid, COLOR_COP_SWAT, "Sintonizando...");
				RadioLigado(playerid);
				SendClientMessage(playerid, COLOR_WHITE, "Pressione 'Shift / Barra de espaço' , para mudar a frequencia!");
				SendClientMessage(playerid, COLOR_WHITE, "Para dançar digite /dancar [1-3]");
				SendClientMessage(playerid, COLOR_WHITE, "Para desligar o radio digite /radio");
				return 1;
			} else {
				SendClientMessage(playerid, COLOR_COP_SWAT, "Desligando rádio...");
				DesligarRadio(playerid);
			 	return 1;
			}
		}
	}
	if(strcmp(cmd,"/verprevisao",true) == 0) {
		if(TVligada[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está assistindo Televisão!");
		new str[256];
	    format(str,sizeof(str),"New Paper's Life: informando a previsão do tempo: %s",WeatherName[weatherprevisao]);
		SendClientMessage(playerid, COLOR_GREEN, str);
		return 1;
	}
	if(strcmp(cmd,"/ligartv",true) == 0) {
	    new tmp[256];
	    new canal;
	    tmp = strtok(cmdtext,idx);
	    canal = strval(tmp);
	    if(!strlen(tmp)){
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /ligartv [canal]");
	        return 1;
		}
		if(NaCasa[playerid] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
			return 1;
		}
		if(pckStats[PickupEntradaCasa[playerid]][TV] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Essa casa não possui TV!");
			return 1;
		}
		if(pckStats[PickupEntradaCasa[playerid]][SemLuz] == 1){
			SendClientMessage(playerid, COLOR_GRAY, "Essa casa está sem luz...");
			return 1;
		}
		if(!IsPlayerConnected(canal)){
		    SendClientMessage(playerid, COLOR_GRAY, "Canal inválido no momento!");
		    return 1;
		}
		if(TVligada[playerid] == 1){
			SendClientMessage(playerid, COLOR_GRAY, "Você já está assistindo TV...");
			return 1;
		}
		if(canal == playerid){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não pode se assistir!");
		    return 1;
		}
		else{
		    new Float:x,Float:y,Float:z;
		    GetPlayerPos(playerid,x,y,z);
			AntPos[playerid][0] = x;
			AntPos[playerid][1] = y;
			AntPos[playerid][2] = z;
			AntInt[playerid] 	= GetPlayerInterior(playerid);
		    SendClientMessage(playerid, COLOR_WHITE, "Digite /verprevisao para ver a previsão do tempo pela TV.");
			SendClientMessage(playerid, COLOR_WHITE, "Para mudar o canal pressione: Num Lock 4 / Num Lock 6");
			SendClientMessage(playerid, COLOR_WHITE, "Quando terminar de assistir, digite /desligartv");
			SetPlayerInterior(playerid,GetPlayerInterior(canal));
			TogglePlayerSpectating(playerid,1);
			if(IsPlayerInAnyVehicle(canal)) PlayerSpectateVehicle(playerid,GetPlayerVehicleID(canal));
			else PlayerSpectatePlayer(playerid,canal);
	        PlayerSpec[playerid] = canal;
			Spectator[canal] = playerid;
			TVligada[playerid] = 1;
			new string[256];
			format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Canal: ~w~%d", canal);
			GameTextForPlayer(playerid,string,5000,3);
			return 1;
		}
	}
	if(strcmp(cmd,"/desligartv",true) == 0) {
	    if(TVligada[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está assistindo TV...");
	    DesligarTV(playerid);
	    return 1;
	}
    if(strcmp(cmd, "/outros", true) == 0) {
        if(AreaCreditos[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na 24/7!");
        ShowMenuForPlayer(Outros,playerid);
		TogglePlayerControllable(playerid,0);
		return 1;
	}
    if(strcmp(cmd, "/comer", true) == 0) {
        if(pStats[playerid][Sanduiche] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhum sanduíche consigo!");
        pStats[playerid][Sanduiche] = 0;
        AddPlayerHealth(playerid, 5);
      	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
      	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
        SendClientMessage(playerid, COLOR_PARAMEDICO, "Hun... 5 pontinhos de HP. Chame um Vendedor de Pizza, para comer mais.");
        return 1;
	}
	if(strcmp(cmd, "/eletrodomesticos", true) == 0) {
		if(AreaCreditos[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na 24/7!");
		Eletrodomesticos = CreateMenu("Eletrodomesticos",2,30.0,140.0,220.0,0.0);
		if(IsValidMenu(Eletrodomesticos)){
		    new string[256];
		    new string2[256];
		    new string3[256];
		    new string4[256];
			new string5[256];
		    SetMenuColumnHeader(Eletrodomesticos,0,"Item");
		    SetMenuColumnHeader(Eletrodomesticos,1,"Preo");
	  	    AddMenuItem(Eletrodomesticos,0,"Televisao");
	  	    format(string,sizeof(string),"$%d",ValorTV);
	  	    AddMenuItem(Eletrodomesticos,1,string);
	  	    AddMenuItem(Eletrodomesticos,0,"Radio");
	  	    format(string2,sizeof(string2),"$%d",ValorRadio);
	  	    AddMenuItem(Eletrodomesticos,1,string2);
	  	    AddMenuItem(Eletrodomesticos,0,"Geladeira");
	  	    format(string3,sizeof(string3),"$%d",ValorGeladeira);
	  	    AddMenuItem(Eletrodomesticos,1,string3);
	  	    AddMenuItem(Eletrodomesticos,0,"Fogao");
	     	format(string4,sizeof(string4),"$%d",ValorFogao);
	        AddMenuItem(Eletrodomesticos,1,string4);
	     	AddMenuItem(Eletrodomesticos,0,"Telefone");
	     	format(string5,sizeof(string5),"$%d",ValorTelefone);
	  	    AddMenuItem(Eletrodomesticos,1,string5);
	  	    AddMenuItem(Eletrodomesticos,0,"Alarme simples");
	  	    AddMenuItem(Eletrodomesticos,1,"$1300");
	  	    AddMenuItem(Eletrodomesticos,0,"Alarme avanado");
	  	    AddMenuItem(Eletrodomesticos,1,"$2200");
		}
		ShowMenuForPlayer(Eletrodomesticos,playerid);
		TogglePlayerControllable(playerid,0);
		return 1;
	}

	if(strcmp(cmd, "/alimentacao", true) == 0) {
		if(AreaCreditos[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na 24/7!");
		ComidaLoja = CreateMenu("Comidas & Bebidas",2,30.0,140.0,220.0,0.0);
		if(IsValidMenu(ComidaLoja)){
		    new string[256];
		    SetMenuColumnHeader(ComidaLoja,0,"Item");
		    SetMenuColumnHeader(ComidaLoja,1,"Preo");
	  	    AddMenuItem(ComidaLoja,0,"Frango");
			format(string,sizeof(string),"$%d",ValorFrango);
	  	    AddMenuItem(ComidaLoja,1,string);
	  	    AddMenuItem(ComidaLoja,0,"Peixe");
	  	   	format(string,sizeof(string),"$%d",ValorPeixe);
	  	    AddMenuItem(ComidaLoja,1,string);
	  	    AddMenuItem(ComidaLoja,0,"Pizza");
	  	 	format(string,sizeof(string),"$%d",ValorPizza);
	  	    AddMenuItem(ComidaLoja,1,string);
	  	    AddMenuItem(ComidaLoja,0,"Salada");
	  		format(string,sizeof(string),"$%d",ValorSalada);
	  	    AddMenuItem(ComidaLoja,1,string);
	  	    AddMenuItem(ComidaLoja,0,"Refrigerante");
	  	    format(string,sizeof(string),"$%d",ValorRefrigerante);
	  	    AddMenuItem(ComidaLoja,1,string);
	   	    AddMenuItem(ComidaLoja,0,"Suco");
	   	    format(string,sizeof(string),"$%d",ValorSuco);
	  	    AddMenuItem(ComidaLoja,1,string);
	  	    AddMenuItem(ComidaLoja,0,"Carne");
	  	    format(string,sizeof(string),"$%d",ValorCarne);
	  	    AddMenuItem(ComidaLoja,1,string);
	  	    AddMenuItem(ComidaLoja,0,"Strogonoff");
	  	    format(string,sizeof(string),"$%d",ValorStrogonoff);
	  	    AddMenuItem(ComidaLoja,1,string);
	  	    AddMenuItem(ComidaLoja,0,"Camarao");
	  	    format(string,sizeof(string),"$%d",ValorCamarao);
	  	    AddMenuItem(ComidaLoja,1,string);
	  	    AddMenuItem(ComidaLoja,0,"Linguia");
	  	    format(string,sizeof(string),"$%d",ValorLinguica);
	  	    AddMenuItem(ComidaLoja,1,string);
		}
		ShowMenuForPlayer(ComidaLoja,playerid);
		TogglePlayerControllable(playerid,0);
		return 1;
	}
	if(strcmp(cmd, "/colocartv", true) == 0) {
	    ColocarTV(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/colocarradio", true) == 0) {
	    ColocarRadio(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/colocargeladeira", true) == 0) {
	    ColocarGeladeira(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/colocarfogao", true) == 0) {
	    ColocarFogao(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/colocartelefone", true) == 0) {
	    ColocarTelefone(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/instalaralarmebasico", true) == 0) {
	    InstalarAlarmeBasico(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/instalaralarmeavancado", true) == 0) {
	    InstalarAlarmeAvancado(playerid);
	    return 1;
	}
    if(strcmp(cmd, "/retirartv", true) == 0) {
	    RetirarTV(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/retirarradio", true) == 0) {
	    RetirarRadio(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/retirargeladeira", true) == 0) {
	    RetirarGeladeira(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/retirarfogao", true) == 0) {
	    RetirarFogao(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/retirartelefone", true) == 0) {
	    RetirarTelefone(playerid);
	    return 1;
	}
	if(strcmp(cmd, "/servir", true) == 0) {
	    new tmp[256];
	    new string[256];
	    new id;
		tmp = strtok(cmdtext,idx);
		id = strval(tmp);
		if(!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /servir [id] [refeição]");
		    return 1;
		}
		if(GetDistanceBetweenPlayers(playerid,id) > 7){
		    SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto!");
		    return 1;
		}
		if(!IsPlayerConnected(id)){
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado!");
		    return 1;
		}
		new Float:life;
		GetPlayerHealth(id,life);
		tmp = strtok(cmdtext,idx);
		if(strcmp(tmp,"frango",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("frango")){
		    if(Frangos[playerid] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui frango!");
			Frangos[playerid]--;
			SetPlayerHealth(id,life+20);
			ApplyAnimation(id, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			SendClientMessage(playerid, COLOR_CORRETOR, "Frango servido!");
			format(string,sizeof(string),"O Mestre Cuca %s lhe serviu um delicioso Frango Xadrez.",PlayerName(playerid));
			SendClientMessage(id, COLOR_CORRETOR, string);
			return 1;
		}
		else if(strcmp(tmp,"peixe",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("peixe")){
		    if(Peixes[playerid] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui peixe!");
			Peixes[playerid]--;
			SetPlayerHealth(id,life+40);
			ApplyAnimation(id, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			SendClientMessage(playerid, COLOR_CORRETOR, "Peixe servido!");
			format(string,sizeof(string),"O Mestre cuca %s lhe serviu um - Peixe à Delícia. -",PlayerName(playerid));
			SendClientMessage(id, COLOR_CORRETOR, string);
			return 1;
		}
		else if(strcmp(tmp,"pizza",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("pizza")){
		    if(Pizzas[playerid] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui pizza!");
			Pizzas[playerid]--;
			SetPlayerHealth(id,life+45);
			ApplyAnimation(id, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			SendClientMessage(playerid, COLOR_CORRETOR, "Pizza servida!");
			format(string,sizeof(string),"O Mestre Cuca %s lhe serviu uma Pizza de Mussarela.",PlayerName(playerid));
			SendClientMessage(id, COLOR_CORRETOR, string);
			return 1;
		}
		else if(strcmp(tmp,"carne",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("carne")){
		    if(Carnes[playerid] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui carne!");
			Carnes[playerid]--;
			SetPlayerHealth(id,life+50);
			ApplyAnimation(id, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			SendClientMessage(playerid, COLOR_CORRETOR, "Carne servida!");
			format(string,sizeof(string),"O Mestre Cuca %s lhe serviu uma Carne ao Molho de Madeira.",PlayerName(playerid));
			SendClientMessage(id, COLOR_CORRETOR, string);
			return 1;
		}
		else if(strcmp(tmp,"strogonoff",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("strogonoff")){
		    if(Strogonoffes[playerid] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui strogonoff!");
			Strogonoffes[playerid]--;
			SetPlayerHealth(id,life+58);
			ApplyAnimation(id, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			SendClientMessage(playerid, COLOR_CORRETOR, "Strogonoff servido!");
			format(string,sizeof(string),"O Mestre Cuca %s lhe serviu um magnífico Strogonoff!",PlayerName(playerid));
			SendClientMessage(id, COLOR_CORRETOR, string);
			return 1;
		}
		else if(strcmp(tmp,"camarao",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("camarao")){
		    if(Camaroes[playerid] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui camarão!");
			Camaroes[playerid]--;
			SetPlayerHealth(id,life+65);
			ApplyAnimation(id, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			SendClientMessage(playerid, COLOR_CORRETOR, "Camarão servido!");
			format(string,sizeof(string),"O Mestre Cuca %s lhe serviu um prato com Camarões ao Alho e Óleo!",PlayerName(playerid));
			SendClientMessage(id, COLOR_CORRETOR, string);
			return 1;
		}
		else if(strcmp(tmp,"linguica",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("linguica")){
		    if(Linguicas[playerid] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui linguiça!");
			Linguicas[playerid]--;
			SetPlayerHealth(id,life+30);
			ApplyAnimation(id, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			SendClientMessage(playerid, COLOR_CORRETOR, "Linguiça servida!");
			format(string,sizeof(string),"O Mestre Cuca %s lhe serviu um prato com as -Linguiças Tá Dentro-",PlayerName(playerid));
			SendClientMessage(id, COLOR_CORRETOR, string);
			return 1;
		}
		else if(strcmp(tmp,"salada",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("salada")) {
		    if(pStats[playerid][Salada] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui salada!");
		    pStats[playerid][Salada] -= 1;
			SetPlayerHealth(id,life+70); // Porque salada faz bem :P
			ApplyAnimation(id, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			SendClientMessage(playerid, COLOR_CORRETOR, "Salada servida!");
			format(string,sizeof(string),"O Mestre Cuca %s lhe serviu um prato especial com: Cenoura, Alface, Brocolis -Light Life-",PlayerName(playerid));
			SendClientMessage(id, COLOR_CORRETOR, string);
			return 1;
		}
		else if(strcmp(tmp,"refrigerante",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("refrigerante")) {
		    if(pStats[playerid][Refrigerante] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui refrigerante!");
		    pStats[playerid][Refrigerante] -= 1;
			SetPlayerHealth(id,life+10);
			ApplyAnimation(id, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			SendClientMessage(playerid, COLOR_CORRETOR, "Refrigerante servido!");
			format(string,sizeof(string),"O jogador %s lhe serviu um refrigerante!",PlayerName(playerid));
			SendClientMessage(id, COLOR_CORRETOR, string);
			return 1;
		}
		else if(strcmp(tmp,"suco",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("suco")) {
		    if(pStats[playerid][Suco] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui suco!");
		    pStats[playerid][Suco] -= 1;
			SetPlayerHealth(id,life+40);
			ApplyAnimation(id, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			SendClientMessage(playerid, COLOR_CORRETOR, "Suco servido!");
			format(string,sizeof(string),"%s lhe serviu um Suco.",PlayerName(playerid));
			SendClientMessage(id, COLOR_CORRETOR, string);
			return 1;
		}
		else if(strcmp(tmp,"sorvete",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("sorvete")) {
		    new sabor[256];
		    sabor = strtok(cmdtext,idx);
			if(strcmp(sabor,"napolitano",true,strlen(sabor)) == 0 && strlen(sabor) == strlen("napolitano")) {
				if(pStats[playerid][SorveteNapolitano] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem sorvete napolitano!");
				pStats[playerid][SorveteNapolitano] -= 1;
    			SetPlayerHealth(id,life+5);
				ApplyAnimation(id, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
				SendClientMessage(playerid, COLOR_CORRETOR, "Sorvete servido!");
				format(string,sizeof(string),"%s lhe serviu um Sorvete Napolitano!",PlayerName(playerid));
				SendClientMessage(id, COLOR_CORRETOR, string);
				return 1;
			}
			else if(strcmp(sabor,"chocolate",true,strlen(sabor)) == 0 && strlen(sabor) == strlen("chocolate")) {
				if(pStats[playerid][SorveteChocolate] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem sorvete de chocolate!");
				pStats[playerid][SorveteChocolate] -= 1;
    			SetPlayerHealth(id,life+5);
				ApplyAnimation(id, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
				SendClientMessage(playerid, COLOR_CORRETOR, "Sorvete servido!");
				format(string,sizeof(string),"%s lhe serviu um Sorvete Chocolate!",PlayerName(playerid));
				SendClientMessage(id, COLOR_CORRETOR, string);
				return 1;
			}
			else if(strcmp(sabor,"flocos",true,strlen(sabor)) == 0 && strlen(sabor) == strlen("flocos")) {
				if(pStats[playerid][SorveteFlocos] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem sorvete de flocos!");
				pStats[playerid][SorveteFlocos] -= 1;
    			SetPlayerHealth(id,life+5);
				ApplyAnimation(id, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
				SendClientMessage(playerid, COLOR_CORRETOR, "Sorvete servido!");
				format(string,sizeof(string),"%s lhe serviu um Sorvete de Flocos!",PlayerName(playerid));
				SendClientMessage(id, COLOR_CORRETOR, string);
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_GRAY, "USO: /servir [id] sorvete [sabor: napolitano, chocolate ou flocos]");
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /servir [id] [refeição: frango,peixe,pizza,salada,refrigerante,carne,strogonoff,camarao,linguica ou suco]");
		    return 1;
		}
	}

	if(strcmp(cmd, "/cozinhar", true) == 0) {
	    new tmp[256];
	    if(NaCasa[playerid] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
		    return 1;
		}
		if(AlimentoCozinhando[playerid] != 0) return SendClientMessage(playerid, COLOR_GRAY, "Você já está cozinhando!");
 		if(pckStats[PickupEntradaCasa[playerid]][Fogao] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Essa casa não possui Fogão!");
			return 1;
		}
		if(pckStats[PickupEntradaCasa[playerid]][SemLuz] == 1){
			SendClientMessage(playerid, COLOR_GRAY, "Essa casa está sem luz...");
			return 1;
		}
		tmp = strtok(cmdtext,idx);
		if(strcmp(tmp,"frango",true,strlen(tmp)) == 0 && (strlen(tmp) == strlen("Frango"))) {
		    if(pStats[playerid][Culinaria] < 10) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem pontos de culinária suficiente para cozinhar um frango! Pontos necessários = 10");
		    if(pStats[playerid][Frango] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Sem frango...");
			SendClientMessage(playerid, COLOR_WHITE, "Cozinhando frango... Aguarde isso deve demorar uns 30 minutos");
			AlimentoCozinhando[playerid] = 1;
			TogglePlayerControllable(playerid,0);
			TempoCozinhando[playerid] = SetTimerEx("Cozinhando",35000,0,"d",playerid);
			return 1;
		}
		else if(strcmp(tmp,"peixe",true,strlen(tmp)) == 0 && (strlen(tmp) == strlen("Peixe"))) {
		    if(pStats[playerid][Culinaria] < 30) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem pontos de culinária suficiente para cozinhar um peixe! Pontos necessários = 30");
		    if(pStats[playerid][Peixe] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Sem peixe...");
		    SendClientMessage(playerid, COLOR_WHITE, "Cozinhando peixe... Aguarde isso deve demorar uns 45 minutos");
            AlimentoCozinhando[playerid] = 2;
            TogglePlayerControllable(playerid,0);
			TempoCozinhando[playerid] = SetTimerEx("Cozinhando",50000,0,"d",playerid);
			return 1;
		}
		else if(strcmp(tmp,"pizza",true,strlen(tmp)) == 0 && (strlen(tmp) == strlen("Pizza"))) {
		    if(pStats[playerid][Pizza] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Sem pizza...");
		    SendClientMessage(playerid, COLOR_WHITE, "Fazendo pizza... Isso deve demorar uma hora no mínimo");
            AlimentoCozinhando[playerid] = 3;
            TogglePlayerControllable(playerid,0);
			TempoCozinhando[playerid] = SetTimerEx("Cozinhando",60000,0,"d",playerid);
			return 1;
		}
		else if(strcmp(tmp,"carne",true,strlen(tmp)) == 0 && (strlen(tmp) == strlen("carne"))) {
		    if(pStats[playerid][Carne] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Sem carne...");
		    SendClientMessage(playerid, COLOR_WHITE, "Cozinhando carne... Aguarde isso deve demorar uns 25 minutos");
            AlimentoCozinhando[playerid] = 4;
            TogglePlayerControllable(playerid,0);
			TempoCozinhando[playerid] = SetTimerEx("Cozinhando",25000,0,"d",playerid);
			return 1;
		}
		else if(strcmp(tmp,"strogonoff",true,strlen(tmp)) == 0 && (strlen(tmp) == strlen("strogonoff"))) {
		    if(pStats[playerid][Culinaria] < 50) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem pontos de culinária suficiente para fazer um strogonoff! Pontos necessários = 50");
		    if(pStats[playerid][Strogonoff] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Sem strogonoff...");
			SendClientMessage(playerid, COLOR_WHITE, "Fazendo strogonoff... Aguarde isso deve demorar uns 45 minutos");
            AlimentoCozinhando[playerid] = 5;
            TogglePlayerControllable(playerid,0);
			TempoCozinhando[playerid] = SetTimerEx("Cozinhando",45000,0,"d",playerid);
			return 1;
		}
		else if(strcmp(tmp,"camarao",true,strlen(tmp)) == 0 && (strlen(tmp) == strlen("camarao"))) {
		    if(pStats[playerid][Culinaria] < 60) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem pontos de culinária suficiente para fazer um camarão! Pontos necessários = 60");
		    if(pStats[playerid][Camarao] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Sem camarão...");
			SendClientMessage(playerid, COLOR_WHITE, "Cozinhando camarão... Aguarde isso deve demorar uns 50 minutos");
            AlimentoCozinhando[playerid] = 6;
            TogglePlayerControllable(playerid,0);
			TempoCozinhando[playerid] = SetTimerEx("Cozinhando",50000,0,"d",playerid);
			return 1;
		}
		else if(strcmp(tmp,"linguica",true,strlen(tmp)) == 0 && (strlen(tmp) == strlen("linguica"))) {
		    if(pStats[playerid][Linguica] <= 0) return SendClientMessage(playerid, COLOR_GRAY, "Sem linguiça...");
			SendClientMessage(playerid, COLOR_WHITE, "Cozinhando linguiça... Aguarde isso deve demorar uns 30 minutos");
            AlimentoCozinhando[playerid] = 7;
            TogglePlayerControllable(playerid,0);
			TempoCozinhando[playerid] = SetTimerEx("Cozinhando",30000,0,"d",playerid);
			return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /cozinhar [frango, peixe, pizza, carne, strogonoff, camarao ou linguica]");
		    return 1;
		}
	}

	if(strcmp(cmd, "/guardarcomida", true) == 0) {
	    new string[256];
	    new tmp[256];
	    new quant;
	    if(NaCasa[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
		    return 1;
		}
 		if(pckStats[PickupEntradaCasa[playerid]][Geladeira] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Essa casa não possui Geladeira!");
			return 1;
		}
	    tmp = strtok(cmdtext, idx);
	    if((strcmp("frango", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("frango"))){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "/guardarcomida frango [quantidade]");
				return 1;
			}
			quant = strval(tmp);
		    if(quant >= pStats[playerid][Frango]){
				SendClientMessage(playerid, COLOR_GRAY, "Você não tem essa quantidade de frango na sacola.");
				return 1;
			}
			pckStats[PickupEntradaCasa[playerid]][FrangoGeladeira] += quant;
			pStats[playerid][Frango] -= quant;
			format(string, sizeof(string), "Foram guardadas %d bandeja(s) de frango na geladeira.", quant);
			SendClientMessage(playerid, COLOR_GREEN, string);
		    return 1;
		}
		else if((strcmp("salada", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("salada"))){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "/guardarcomida salada [quantidade]");
				return 1;
			}
			quant = strval(tmp);
		    if(quant > pStats[playerid][Salada]){
				SendClientMessage(playerid, COLOR_GRAY, "Você não tem essa quantidade de salada na sacola.");
				return 1;
			}
			pckStats[PickupEntradaCasa[playerid]][SaladaGeladeira] += quant;
			pStats[playerid][Salada] -= quant;
			format(string, sizeof(string), "Foram guardadas %d bandeja(s) de saladas na geladeira.", quant);
			SendClientMessage(playerid, COLOR_GREEN, string);
		    return 1;
		}
		else if((strcmp("peixe", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("peixe"))){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "/guardarcomida peixe [quantidade]");
				return 1;
			}
			quant = strval(tmp);
		    if(quant > pStats[playerid][Peixe]){
				SendClientMessage(playerid, COLOR_GRAY, "Você não tem essa quantidade de peixe na sacola.");
				return 1;
			}
			pckStats[PickupEntradaCasa[playerid]][PeixeGeladeira] += quant;
			pStats[playerid][Peixe] -= quant;
			format(string, sizeof(string), "Foram guardadas %d bandeja(s) de peixes na geladeira.", quant);
			SendClientMessage(playerid, COLOR_GREEN, string);
		    return 1;
		}
		else if((strcmp("pizza", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("pizza"))){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "/guardarcomida pizza [quantidade]");
				return 1;
			}
			quant = strval(tmp);
		    if(quant > pStats[playerid][Pizza]){
				SendClientMessage(playerid, COLOR_GRAY, "Você não tem essa quantidade de pizzas na sacola.");
				return 1;
			}
			pckStats[PickupEntradaCasa[playerid]][PizzaGeladeira] += quant;
			pStats[playerid][Pizza] -= quant;
			format(string, sizeof(string), "Foram guardadas %d caixa(s) de pizzas na geladeira.", quant);
			SendClientMessage(playerid, COLOR_GREEN, string);
		    return 1;
		}
		else if((strcmp("refrigerante", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("refrigerante"))){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "/guardarcomida refrigerante [latas]");
				return 1;
			}
			quant = strval(tmp);
		    if(quant > pStats[playerid][Refrigerante]){
				SendClientMessage(playerid, COLOR_GRAY, "Você não tem essa quantidade de latas na sacola.");
				return 1;
			}
			pckStats[PickupEntradaCasa[playerid]][RefriGeladeira] += quant;
			pStats[playerid][Refrigerante] -= quant;
			format(string, sizeof(string), "Foram guardadas %d lata(s) de refrigerantes na geladeira.", quant);
			SendClientMessage(playerid, COLOR_GREEN, string);
		    return 1;
		}
		else if((strcmp("suco", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("suco"))){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "/guardarcomida suco [garrafas]");
				return 1;
			}
			quant = strval(tmp);
		    if(quant > pStats[playerid][Suco]){
				SendClientMessage(playerid, COLOR_GRAY, "Você não tem essa quantidade de garrafas na sacola.");
				return 1;
			}
			pckStats[PickupEntradaCasa[playerid]][SucoGeladeira] += quant;
			pStats[playerid][Suco] -= quant;
			format(string, sizeof(string), "Foram guardadas %d garrafa(s) de suco na geladeira.", quant);
			SendClientMessage(playerid, COLOR_GREEN, string);
			return 1;
		}
		else if((strcmp("carne", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("carne"))){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "/guardarcomida carne [quantidade]");
				return 1;
			}
			quant = strval(tmp);
		    if(quant > pStats[playerid][Carne]){
				SendClientMessage(playerid, COLOR_GRAY, "Você não tem essa quantidade de carne na sacola.");
				return 1;
			}
			pckStats[PickupEntradaCasa[playerid]][CarneGeladeira] += quant;
			pStats[playerid][Carne] -= quant;
			format(string, sizeof(string), "Foram guardadas %d carne(s) na geladeira.", quant);
			SendClientMessage(playerid, COLOR_GREEN, string);
			return 1;
		}
		else if((strcmp("strogonoff", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("strogonoff"))){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "/guardarcomida strogonoff [quantidade]");
				return 1;
			}
			quant = strval(tmp);
		    if(quant > pStats[playerid][Strogonoff]){
				SendClientMessage(playerid, COLOR_GRAY, "Você não tem essa quantidade de strogonoff na sacola.");
				return 1;
			}
			pckStats[PickupEntradaCasa[playerid]][StrogonoffGeladeira] += quant;
			pStats[playerid][Strogonoff] -= quant;
			format(string, sizeof(string), "Foram guardados %d strogonoff(es) na geladeira.", quant);
			SendClientMessage(playerid, COLOR_GREEN, string);
			return 1;
		}
		else if((strcmp("camarao", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("camarao"))){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "/guardarcomida camarao [quantidade]");
				return 1;
			}
			quant = strval(tmp);
		    if(quant > pStats[playerid][Camarao]){
				SendClientMessage(playerid, COLOR_GRAY, "Você não tem essa quantidade de camarão na sacola.");
				return 1;
			}
			pckStats[PickupEntradaCasa[playerid]][CamaraoGeladeira] += quant;
			pStats[playerid][Camarao] -= quant;
			format(string, sizeof(string), "Foram guardados %d camarão(oes) na geladeira.", quant);
			SendClientMessage(playerid, COLOR_GREEN, string);
			return 1;
		}
		else if((strcmp("linguica", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("linguica"))){
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "/guardarcomida linguiça [quantidade]");
				return 1;
			}
			quant = strval(tmp);
		    if(quant > pStats[playerid][Linguica]){
				SendClientMessage(playerid, COLOR_GRAY, "Você não tem essa quantidade de linguiça na sacola.");
				return 1;
			}
			pckStats[PickupEntradaCasa[playerid]][LinguicaGeladeira] += quant;
			pStats[playerid][Linguica] -= quant;
			format(string, sizeof(string), "Foram guardadas %d linguiça(s) na geladeira.", quant);
			SendClientMessage(playerid, COLOR_GREEN, string);
			return 1;
		}
		else {
	    	SendClientMessage(playerid, COLOR_GRAY,"USO: /guardarcomida [frango,peixe,salada,pizza,refrigerante,suco,carne,strogonoff,camarao,linguica] [quantidade]");
			return 1;
		}
	}
	if(strcmp(cmd, "/retirarcomida", true) == 0) {
	    new tmp[256];
	    if(NaCasa[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
		    return 1;
		}
 		if(pckStats[PickupEntradaCasa[playerid]][Geladeira] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Essa casa não possui Geladeira!");
			return 1;
		}
		tmp = strtok(cmdtext,idx);
		if(strcmp(tmp,"frango",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("frango")){
		    if(pckStats[PickupEntradaCasa[playerid]][FrangoGeladeira] <= 0){
		    	SendClientMessage(playerid, COLOR_GRAY, "Você não tem frango, verifique seus mantimentos em /geladeira.");
                return 1;
			}
			pStats[playerid][Frango]++;
			pckStats[PickupEntradaCasa[playerid]][FrangoGeladeira]--;
			SendClientMessage(playerid, COLOR_GREEN, "Você retirou um frango da geladeira!");
			return 1;
		}
		if(strcmp(tmp,"peixe",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("peixe")) {
		    if(pckStats[PickupEntradaCasa[playerid]][PeixeGeladeira] <= 0){
		    	SendClientMessage(playerid, COLOR_GRAY, "Você não tem peixe, verifique seus mantimentos em /geladeira.");
                return 1;
			}
			pStats[playerid][Peixe]++;
			pckStats[PickupEntradaCasa[playerid]][PeixeGeladeira]--;
			SendClientMessage(playerid, COLOR_GREEN, "Você retirou um peixe da geladeira!");
			return 1;
		}
		if(strcmp(tmp,"salada",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("salada")) {
		    if(pckStats[PickupEntradaCasa[playerid]][SaladaGeladeira] <= 0){
		    	SendClientMessage(playerid, COLOR_GRAY, "Você não tem salada, verifique seus mantimentos em /geladeira.");
                return 1;
			}
			pStats[playerid][Salada]++;
			pckStats[PickupEntradaCasa[playerid]][SaladaGeladeira]--;
			SendClientMessage(playerid, COLOR_GREEN, "Você retirou uma salada da geladeira!");
			return 1;
		}
		if(strcmp(tmp,"pizza",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("pizza")) {
		    if(pckStats[PickupEntradaCasa[playerid]][PizzaGeladeira] <= 0){
		    	SendClientMessage(playerid, COLOR_GRAY, "Você não tem pizza, verifique seus mantimentos em /geladeira.");
                return 1;
			}
			pStats[playerid][Pizza]++;
			pckStats[PickupEntradaCasa[playerid]][PizzaGeladeira]--;
			SendClientMessage(playerid, COLOR_GREEN, "Você retirou uma pizza da geladeira!");
			return 1;
		}
		if(strcmp(tmp,"refrigerante",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("refrigerante")) {
		    if(pckStats[PickupEntradaCasa[playerid]][RefriGeladeira] <= 0){
		    	SendClientMessage(playerid, COLOR_GRAY, "Você não tem refrigerante, verifique seus mantimentos em /geladeira.");
		    	return 1;
			}
			pStats[playerid][Refrigerante]++;
			pckStats[PickupEntradaCasa[playerid]][RefriGeladeira]--;
			SendClientMessage(playerid, COLOR_GREEN, "Você retirou um refrigerante da geladeira!");
			return 1;
		}
		if(strcmp(tmp,"suco",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("suco")) {
		    if(pckStats[PickupEntradaCasa[playerid]][SucoGeladeira] <= 0){
		    	SendClientMessage(playerid, COLOR_GRAY, "Você não tem suco, verifique seus mantimentos em /geladeira.");
		    	return 1;
			}
			pStats[playerid][Suco]++;
			pckStats[PickupEntradaCasa[playerid]][SucoGeladeira]--;
			SendClientMessage(playerid, COLOR_GREEN, "Você retirou um suco da geladeira!");
			return 1;
		}
		if(strcmp(tmp,"carne",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("carne")) {
		    if(pckStats[PickupEntradaCasa[playerid]][CarneGeladeira] <= 0){
		    	SendClientMessage(playerid, COLOR_GRAY, "Você não tem carne, verifique seus mantimentos em /geladeira.");
		    	return 1;
			}
			pStats[playerid][Carne]++;
			pckStats[PickupEntradaCasa[playerid]][CarneGeladeira]--;
			SendClientMessage(playerid, COLOR_GREEN, "Você retirou uma carne da geladeira!");
			return 1;
		}
		if(strcmp(tmp,"strogonoff",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("strogonoff")) {
		    if(pckStats[PickupEntradaCasa[playerid]][StrogonoffGeladeira] <= 0){
		    	SendClientMessage(playerid, COLOR_GRAY, "Você não tem strogonoff, verifique seus mantimentos em /geladeira.");
		    	return 1;
			}
			pStats[playerid][Strogonoff]++;
			pckStats[PickupEntradaCasa[playerid]][StrogonoffGeladeira]--;
			SendClientMessage(playerid, COLOR_GREEN, "Você retirou um strogonoff da geladeira!");
			return 1;
		}
		if(strcmp(tmp,"camarao",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("camarao")) {
		    if(pckStats[PickupEntradaCasa[playerid]][CamaraoGeladeira] <= 0){
		    	SendClientMessage(playerid, COLOR_GRAY, "Você não tem camarão, verifique seus mantimentos em /geladeira.");
		    	return 1;
			}
			pStats[playerid][Camarao]++;
			pckStats[PickupEntradaCasa[playerid]][CamaraoGeladeira]--;
			SendClientMessage(playerid, COLOR_GREEN, "Você retirou um camarão da geladeira!");
			return 1;
		}
		if(strcmp(tmp,"linguica",true,strlen(tmp)) == 0 && strlen(tmp) == strlen("linguica")) {
		    if(pckStats[PickupEntradaCasa[playerid]][LinguicaGeladeira] <= 0){
		    	SendClientMessage(playerid, COLOR_GRAY, "Você não tem linguiça, verifique seus mantimentos em /geladeira.");
		    	return 1;
			}
			pStats[playerid][Linguica]++;
			pckStats[PickupEntradaCasa[playerid]][LinguicaGeladeira]--;
			SendClientMessage(playerid, COLOR_GREEN, "Você retirou uma linguiça da geladeira!");
			return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "/retirarcomida [refeição: frango, peixe, salada, pizza, refrigerante, suco, carne, strogonoff, camarao ou linguica]");
			return 1;
		}
	}

	if(strcmp(cmd, "/geladeira", true) == 0) {
	    new string[256];
	    if(NaCasa[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
		    return 1;
		}
		if(pckStats[PickupEntradaCasa[playerid]][Geladeira] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Essa casa não possui Geladeira!");
			return 1;
		}
		SendClientMessage(playerid, COLOR_WHITE, "|---| Geladeira |---|");
		SendClientMessage(playerid, COLOR_RED2, "   ");
		if(pckStats[PickupEntradaCasa[playerid]][FrangoGeladeira] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Falta Frango.");
		}
		else {
	  		format(string, sizeof(string), "Bandejas de Frango: %d", pckStats[PickupEntradaCasa[playerid]][FrangoGeladeira]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		if(pckStats[PickupEntradaCasa[playerid]][PeixeGeladeira] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Falta Peixe.");
		}
		else {
			format(string, sizeof(string), "Bandejas de Peixe: %d", pckStats[PickupEntradaCasa[playerid]][PeixeGeladeira]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		if(pckStats[PickupEntradaCasa[playerid]][SaladaGeladeira] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Falta Salada.");
		}
		else {
			format(string, sizeof(string), "Bandejas de Salada: %d", pckStats[PickupEntradaCasa[playerid]][SaladaGeladeira]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		if(pckStats[PickupEntradaCasa[playerid]][PizzaGeladeira] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Falta Pizza.");
		}
		else {
			format(string, sizeof(string), "Caixas de Pizza: %d", pckStats[PickupEntradaCasa[playerid]][PizzaGeladeira]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		if(pckStats[PickupEntradaCasa[playerid]][RefriGeladeira] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Falta Refrigerante.");
		}
		else {
			format(string, sizeof(string), "Latas de Refrigeranteo: %d", pckStats[PickupEntradaCasa[playerid]][RefriGeladeira]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		if(pckStats[PickupEntradaCasa[playerid]][SucoGeladeira] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Falta Suco.");
		}
		else {
			format(string, sizeof(string), "Garrafas de Suco: %d", pckStats[PickupEntradaCasa[playerid]][SucoGeladeira]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		if(pckStats[PickupEntradaCasa[playerid]][CarneGeladeira] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Falta Carne.");
		}
		else {
			format(string, sizeof(string), "Bandejas de Carne: %d", pckStats[PickupEntradaCasa[playerid]][CarneGeladeira]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		if(pckStats[PickupEntradaCasa[playerid]][StrogonoffGeladeira] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Falta Strogonoff.");
		}
		else {
			format(string, sizeof(string), "Potes de Strogonoff: %d", pckStats[PickupEntradaCasa[playerid]][StrogonoffGeladeira]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		if(pckStats[PickupEntradaCasa[playerid]][CamaraoGeladeira] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Falta Camarão.");
		}
		else {
			format(string, sizeof(string), "Bandejas de Camarão: %d", pckStats[PickupEntradaCasa[playerid]][CamaraoGeladeira]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		if(pckStats[PickupEntradaCasa[playerid]][LinguicaGeladeira] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Falta Linguiça.");
		}
		else {
			format(string, sizeof(string), "Bandejas de Linguiça: %d", pckStats[PickupEntradaCasa[playerid]][LinguicaGeladeira]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/roubartv", true) == 0) {
	    if(Profissao[playerid] != ASSALTANTE) return SendClientMessage(playerid, COLOR_GRAY, "Você não é Assaltante.");
		if(NaCasa[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
		new string[256];
		if(pStats[playerid][PTV] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você já tem uma TV, venda ela pra alguém. /colocartv. Cobre por fora.");
		if(pckStats[PickupEntradaCasa[playerid]][TV] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem TV!!");
		pStats[playerid][PTV] = 1;
		pckStats[PickupEntradaCasa[playerid]][TV] = 0;
		new alarme = pckStats[PickupEntradaCasa[playerid]][Alarme];
		if(alarme == 0) return SendClientMessage(playerid, COLOR_GREEN, "Roubo concluído, agora você pode colocar essa TV em sua casa ou vendela para alguém.");
		if(alarme == 1){
		    if(Camuflado[playerid] == 1){
				format(string,sizeof(string),"[CENTRAL] Viaturas. [Crime: Assalto a Residência] [Local: Casa de: %s] [Suspeito: Desconhecido Camuflado].",pckStats[PickupEntradaCasa[playerid]][PickupDono]);
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(playerid, COLOR_GRAY, "Você foi pego pelo alarme, a policia foi avisada, FUJA ENQUANTO HÁ TEMPO!!!!");
				SetPlayerVirtualWorld(playerid,0);
		    	SetPlayerInterior(playerid,0);
		    	SetPlayerPos(playerid,EntradaCasa[playerid][0]+0.7,EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
				NaCasa[playerid] = 0;
				return 1;
			} else if(Camuflado[playerid] == 0){
				format(string,sizeof(string),"[CENTRAL] Viaturas. [Crime: Assalto a Residência (TV)] [Local: Casa de %s] [Suspeito: O Alarme Simples não identificou].",pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid));
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(playerid, COLOR_GRAY, "Você foi pego pelo alarme, a policia foi avisada, FUJA ENQUANTO HÁ TEMPO!!!!");
				SetPlayerVirtualWorld(playerid,0);
		    	SetPlayerInterior(playerid,0);
		    	SetPlayerPos(playerid,EntradaCasa[playerid][0]+0.7,EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
				NaCasa[playerid] = 0;
				return 1;
			}
		}
		if(alarme == 2){
		    if(Camuflado[playerid] == 1){
				format(string,sizeof(string),"[CENTRAL] Viaturas. [Crime: Assalto a Residência (TV)] [Casa de: %s] [Suspeito: Desconhecido Camuflado].",pckStats[PickupEntradaCasa[playerid]][PickupDono]);
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(playerid, COLOR_GRAY, "Você foi pego pelo alarme, a policia foi avisada, FUJA ENQUANTO HÁ TEMPO!!!!");
				SetPlayerVirtualWorld(playerid,0);
		    	SetPlayerInterior(playerid,0);
		    	SetPlayerPos(playerid,EntradaCasa[playerid][0]+0.7,EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
				NaCasa[playerid] = 0;
				return 1;
			} else if(Camuflado[playerid] == 0){
				format(string,sizeof(string),"[CENTRAL] Viaturas. [Crime: Assalto a Residência (TV)] [Casa de: %s] [Suspeito: %s].",pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid));
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(playerid, COLOR_GRAY, "Você foi pego pelo alarme, a policia foi avisada, FUJA ENQUANTO HÁ TEMPO!!!!");
				SetPlayerVirtualWorld(playerid,0);
		    	SetPlayerInterior(playerid,0);
		    	SetPlayerPos(playerid,EntradaCasa[playerid][0]+0.7,EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
				NaCasa[playerid] = 0;
				return 1;
			}
		}
	}
	if(strcmp(cmd, "/roubarradio", true) == 0) {
	    if(Profissao[playerid] != ASSALTANTE) return SendClientMessage(playerid, COLOR_GRAY, "Você não é Assaltante.");
		if(NaCasa[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
		new string[256];
		if(pStats[playerid][PRadio] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você já tem um rádio, venda ele pra alguém. /colocarradio. Cobre por fora.");
		if(pckStats[PickupEntradaCasa[playerid]][Radio] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem rádio!!");
		pStats[playerid][PRadio] = 1;
		pckStats[PickupEntradaCasa[playerid]][Radio] = 0;
		new alarme = pckStats[PickupEntradaCasa[playerid]][Alarme];
		if(alarme == 0) return SendClientMessage(playerid, COLOR_GREEN, "Roubo concluído, agora você pode colocar essa TV em sua casa ou vendela para alguém.");
		if(alarme == 1){
		    if(Camuflado[playerid] == 1){
				format(string,sizeof(string),"[CENTRAL] Viaturas. [Crime: Assalto a Residência (Radio)] [Casa de: %s] [Suspeito: Desconhecido Camuflado].",pckStats[PickupEntradaCasa[playerid]][PickupDono]);
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(playerid, COLOR_GRAY, "Você foi pego pelo alarme, a policia foi avisada, FUJA ENQUANTO HÁ TEMPO!!!!");
				SetPlayerVirtualWorld(playerid,0);
		    	SetPlayerInterior(playerid,0);
		    	SetPlayerPos(playerid,EntradaCasa[playerid][0]+0.7,EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
				NaCasa[playerid] = 0;
				return 1;
			} else if(Camuflado[playerid] == 0){
				format(string,sizeof(string),"[CENTRAL] Viaturas. [Crime: Assalto a Residência (Radio)] [Casa de: %s] [Suspeito: O Alarme Simples não identificou].",pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid));
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(playerid, COLOR_GRAY, "Você foi pego pelo alarme, a policia foi avisada, FUJA ENQUANTO HÁ TEMPO!!!!");
				SetPlayerVirtualWorld(playerid,0);
		    	SetPlayerInterior(playerid,0);
		    	SetPlayerPos(playerid,EntradaCasa[playerid][0]+0.7,EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
				NaCasa[playerid] = 0;
				return 1;
			}
		}
		if(alarme == 2){
		    if(Camuflado[playerid] == 1){
				format(string,sizeof(string),"[CENTRAL] Viaturas. [Crime: Assalto a Residência (Radio)] [Casa de: %s] [Suspeito: Desconhecido Camuflado].",pckStats[PickupEntradaCasa[playerid]][PickupDono]);
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(playerid, COLOR_GRAY, "Você foi pego pelo alarme, a policia foi avisada, FUJA ENQUANTO HÁ TEMPO!!!!");
				SetPlayerVirtualWorld(playerid,0);
		    	SetPlayerInterior(playerid,0);
		    	SetPlayerPos(playerid,EntradaCasa[playerid][0]+0.7,EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
				NaCasa[playerid] = 0;
				return 1;
			} else if(Camuflado[playerid] == 0){
				format(string,sizeof(string),"[CENTRAL] Viaturas. [Crime: Assalto a Residência (Radio)] [Casa de: %s] [Suspeito: Alarme Avançado identificou: %s.",pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid));
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(playerid, COLOR_GRAY, "Você foi pego pelo alarme, a policia foi avisada, FUJA ENQUANTO HÁ TEMPO!!!!");
				SetPlayerVirtualWorld(playerid,0);
		    	SetPlayerInterior(playerid,0);
		    	SetPlayerPos(playerid,EntradaCasa[playerid][0]+0.7,EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
				NaCasa[playerid] = 0;
				return 1;
			}
		}
	}
	if(strcmp(cmd, "/roubarfogao", true) == 0) {
	    if(Profissao[playerid] != ASSALTANTE) return SendClientMessage(playerid, COLOR_GRAY, "Você não é Assaltante.");
		if(NaCasa[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
		new string[256];
		if(pStats[playerid][PFogao] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você já tem um fogão, venda ele pra alguém. /colocartv. Cobre por fora.");
		if(pckStats[PickupEntradaCasa[playerid]][Fogao] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem fogão!!");
		pStats[playerid][PFogao] = 1;
		pckStats[PickupEntradaCasa[playerid]][Fogao] = 0;
		new alarme = pckStats[PickupEntradaCasa[playerid]][Alarme];
		if(alarme == 0) return SendClientMessage(playerid, COLOR_GREEN, "Roubo concluído, agora você pode colocar essa TV em sua casa ou vendela para alguém.");
		if(alarme == 1){
		    if(Camuflado[playerid] == 1){
				format(string,sizeof(string),"[CENTRAL] Viaturas. [Crime: Assalto a Residência (Fogao)] [Casa de: %s] [Suspeito: Desconhecido Camuflado].",pckStats[PickupEntradaCasa[playerid]][PickupDono]);
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(playerid, COLOR_GRAY, "Você foi pego pelo alarme, a policia foi avisada, FUJA ENQUANTO HÁ TEMPO!!!!");
				SetPlayerVirtualWorld(playerid,0);
		    	SetPlayerInterior(playerid,0);
		    	SetPlayerPos(playerid,EntradaCasa[playerid][0]+0.7,EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
				NaCasa[playerid] = 0;
				return 1;
			} else if(Camuflado[playerid] == 0){
				format(string,sizeof(string),"[CENTRAL] Viaturas. [Crime: Assalto a Residência (Radio)] [Casa de: %s] [Suspeito: O Alarme Simples não identificou].",pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid));
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(playerid, COLOR_GRAY, "Você foi pego pelo alarme, a policia foi avisada, FUJA ENQUANTO HÁ TEMPO!!!!");
				SetPlayerVirtualWorld(playerid,0);
		    	SetPlayerInterior(playerid,0);
		    	SetPlayerPos(playerid,EntradaCasa[playerid][0]+0.7,EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
				NaCasa[playerid] = 0;
				return 1;
			}
		}
		if(alarme == 2){
		    if(Camuflado[playerid] == 1){
				format(string,sizeof(string),"[CENTRAL] Viaturas. [Crime: Assalto a Residência (Fogao)] [Casa de: %s] [Suspeito: Desconhecido Camuflado].",pckStats[PickupEntradaCasa[playerid]][PickupDono]);
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(playerid, COLOR_GRAY, "Você foi pego pelo alarme, a policia foi avisada, FUJA ENQUANTO HÁ TEMPO!!!!");
				SetPlayerVirtualWorld(playerid,0);
		    	SetPlayerInterior(playerid,0);
		    	SetPlayerPos(playerid,EntradaCasa[playerid][0]+0.7,EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
				NaCasa[playerid] = 0;
				return 1;
			} else if(Camuflado[playerid] == 0){
				format(string,sizeof(string),"[CENTRAL] Viaturas. [Crime: Assalto a Residência (Fogao)] [Casa de: %s] [Suspeito: Alarme Avançado identificou: %s.",pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid));
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(playerid, COLOR_GRAY, "Você foi pego pelo alarme, a policia foi avisada, FUJA ENQUANTO HÁ TEMPO!!!!");
				SetPlayerVirtualWorld(playerid,0);
		    	SetPlayerInterior(playerid,0);
		    	SetPlayerPos(playerid,EntradaCasa[playerid][0]+0.7,EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
				NaCasa[playerid] = 0;
				return 1;
			}
		}
	}
	if(strcmp(cmd, "/roubargeladeira", true) == 0) {
	    if(Profissao[playerid] != ASSALTANTE) return SendClientMessage(playerid, COLOR_GRAY, "Você não é Assaltante.");
		if(NaCasa[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
		new string[256];
		if(pStats[playerid][PGeladeira] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você já tem uma geladeira, venda ela pra alguém. /colocartv. Cobre por fora.");
		if(pckStats[PickupEntradaCasa[playerid]][Geladeira] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem geladeira!!");
		pStats[playerid][PGeladeira] = 1;
		pckStats[PickupEntradaCasa[playerid]][Geladeira] = 0;
		new alarme = pckStats[PickupEntradaCasa[playerid]][Alarme];
		if(alarme == 0) return SendClientMessage(playerid, COLOR_GREEN, "Roubo concluído, agora você pode colocar essa TV em sua casa ou vendela para alguém.");
		if(alarme == 1){
		    if(Camuflado[playerid] == 1){
				format(string,sizeof(string),"[CENTRAL] Viaturas. [Crime: Assalto a Residência (Geladeira)] [Casa de: %s] [Suspeito: Desconhecido Camuflado].",pckStats[PickupEntradaCasa[playerid]][PickupDono]);
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(playerid, COLOR_GRAY, "Você foi pego pelo alarme, a policia foi avisada, FUJA ENQUANTO HÁ TEMPO!!!!");
				SetPlayerVirtualWorld(playerid,0);
		    	SetPlayerInterior(playerid,0);
		    	SetPlayerPos(playerid,EntradaCasa[playerid][0]+0.7,EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
				NaCasa[playerid] = 0;
				return 1;
			} else if(Camuflado[playerid] == 0){
				format(string,sizeof(string),"[CENTRAL] Viaturas. [Crime: Assalto a Residência (Geladeira)] [Casa de: %s] [Suspeito: O Alarme Simples não identificou].",pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid));
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(playerid, COLOR_GRAY, "Você foi pego pelo alarme, a policia foi avisada, FUJA ENQUANTO HÁ TEMPO!!!!");
				SetPlayerVirtualWorld(playerid,0);
		    	SetPlayerInterior(playerid,0);
		    	SetPlayerPos(playerid,EntradaCasa[playerid][0]+0.7,EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
				NaCasa[playerid] = 0;
				return 1;
			}
		}
		if(alarme == 2){
		    if(Camuflado[playerid] == 1){
				format(string,sizeof(string),"[CENTRAL] Viaturas. [Crime: Assalto a Residência (Geladeira)] [Casa de: %s] [Suspeito: Desconhecido Camuflado].",pckStats[PickupEntradaCasa[playerid]][PickupDono]);
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(playerid, COLOR_GRAY, "Você foi pego pelo alarme, a policia foi avisada, FUJA ENQUANTO HÁ TEMPO!!!!");
				SetPlayerVirtualWorld(playerid,0);
		    	SetPlayerInterior(playerid,0);
		    	SetPlayerPos(playerid,EntradaCasa[playerid][0]+0.7,EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
				NaCasa[playerid] = 0;
				return 1;
			} else if(Camuflado[playerid] == 0){
				format(string,sizeof(string),"[CENTRAL] Viaturas. [Crime: Assalto a Residência (Geladeira)] [Casa de: %s] [Suspeito: Alarme Avançado identificou: %s].",pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid));
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(playerid, COLOR_GRAY, "Você foi pego pelo alarme, a policia foi avisada, FUJA ENQUANTO HÁ TEMPO!!!!");
				SetPlayerVirtualWorld(playerid,0);
		    	SetPlayerInterior(playerid,0);
		    	SetPlayerPos(playerid,EntradaCasa[playerid][0]+0.7,EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
				NaCasa[playerid] = 0;
				return 1;
			}
		}
	}
	if(strcmp(cmd, "/roubarcasa", true) == 0) {
	    if(Profissao[playerid] != ASSALTANTE) return SendClientMessage(playerid, COLOR_GRAY, "Você não é Assaltante.");
		if(GetPickup[playerid] == -1) return SendClientMessage(playerid, COLOR_GRAY, "EI, você não está numa pickup de casa, se estiver saiá e entre novamente nela!");
		if(GetPickup[playerid] >= 0 && GetPickup[playerid] < sizeof(Pickups)) return SendClientMessage(playerid, COLOR_GRAY, "Essa não é a pickup de uma casa!");
		if(strcmp(pckStats[GetPickup[playerid]][Chave],PlayerName(playerid),true) == 0) {
		    NaCasa[playerid] = 1;
			new Float:X,Float:Y,Float:Z,string[256];
			GetPlayerPos(playerid,X,Y,Z);
			PickupEntradaCasa[playerid] = GetPickup[playerid];
			EntradaCasa[playerid][0] = X;
			EntradaCasa[playerid][1] = Y;
			EntradaCasa[playerid][2] = Z;
			SetPlayerVirtualWorld(playerid,GetPickup[playerid]);
			SendClientMessage(playerid, COLOR_WHITE, "Para sair da casa digite /saircasa");
			SetPlayerPos(playerid,PosCasas[pckStats[GetPickup[playerid]][Int]][hX],PosCasas[pckStats[GetPickup[playerid]][Int]][hY],PosCasas[pckStats[GetPickup[playerid]][Int]][hZ]);
			SetPlayerInterior(playerid,IntCasas[pckStats[GetPickup[playerid]][Int]]);
			new alarme = pckStats[PickupEntradaCasa[playerid]][Alarme];
			if(alarme == 0) return SendClientMessage(playerid, COLOR_GREEN, "Roubo concluído, agora você pode colocar essa TV em sua casa ou vendela para alguém.");
			if(alarme == 1){
				if(Camuflado[playerid] == 1){
					format(string,sizeof(string),"[CENTRAL] Viaturas. [Crime: Arrombamento a Residência] [Casa de: %s] [Suspeito: Homem emcapuzado].",pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid));
					SendClientMessageToAll(COLOR_COP_SWAT, string);
					SendClientMessage(playerid, COLOR_GRAY, "Você foi pego pelo alarme, a policia foi avisada, FUJA ENQUANTO HÁ TEMPO!!!!");
					SetPlayerVirtualWorld(playerid,0);
		    		SetPlayerInterior(playerid,0);
		    		SetPlayerPos(playerid,EntradaCasa[playerid][0]+0.7,EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
					NaCasa[playerid] = 0;
					return 1;
				} else if(Camuflado[playerid] == 0){
					format(string,sizeof(string),"[CENTRAL] Viaturas. [Crime: Arrombamento a Residência] [Casa de: %s] [Suspeito: Desconhecido].",pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid));
					SendClientMessageToAll(COLOR_COP_SWAT, string);
					SendClientMessage(playerid, COLOR_GRAY, "Você foi pego pelo alarme, a policia foi avisada, FUJA ENQUANTO HÁ TEMPO!!!!");
					SetPlayerVirtualWorld(playerid,0);
		    		SetPlayerInterior(playerid,0);
		    		SetPlayerPos(playerid,EntradaCasa[playerid][0]+0.7,EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
					NaCasa[playerid] = 0;
					return 1;
				}
			}
			if(alarme == 2){
				if(Camuflado[playerid] == 1){
					format(string,sizeof(string),"[CENTRAL] Viaturas. [Crime: Arrombamento a Residência] [Casa de: %s] [Suspeito: Homem emcapuzado].",pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid));
					SendClientMessageToAll(COLOR_COP_SWAT, string);
					SendClientMessage(playerid, COLOR_GRAY, "Você foi pego pelo alarme, a policia foi avisada, FUJA ENQUANTO HÁ TEMPO!!!!");
					SetPlayerVirtualWorld(playerid,0);
		    		SetPlayerInterior(playerid,0);
		    		SetPlayerPos(playerid,EntradaCasa[playerid][0]+0.7,EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
					NaCasa[playerid] = 0;
					return 1;
				} else if(Camuflado[playerid] == 0){
					format(string,sizeof(string),"[CENTRAL] Viaturas. [Crime: Arrombamento a Residência] [Casa de: %s] [Suspeito: %s].",pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid));
					SendClientMessageToAll(COLOR_COP_SWAT, string);
					SendClientMessage(playerid, COLOR_GRAY, "Você foi pego pelo alarme, a policia foi avisada, FUJA ENQUANTO HÁ TEMPO!!!!");
					SetPlayerVirtualWorld(playerid,0);
		    		SetPlayerInterior(playerid,0);
		    		SetPlayerPos(playerid,EntradaCasa[playerid][0]+0.7,EntradaCasa[playerid][1],EntradaCasa[playerid][2]);
					NaCasa[playerid] = 0;
					return 1;
				}
			}
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está com a chave da casa!");
		    return 1;
		}
	}
	if(strcmp(cmd, "/porcasaavenda", true) == 0) {
	    if(Profissao[playerid] != CORRETOR && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não é Corretor de imóveis!");
		new valor;
		valor = strval(strtok(cmdtext,idx));
		if(pStats[playerid][VendendoCasas] >= 3) return SendClientMessage(playerid, COLOR_GRAY, "Você só pode colocar 3 casas à venda no máximo!");
        if(valor == 5000 || valor == 10000 || valor == 20000 || valor == 40000 || valor == 60000 || valor == 80000 || valor == 100000 || valor == 200000){
            new Float:x,Float:y,Float:z;
			new pickupcasa = LastCasa;
			LastCasa++;
			GetPlayerPos(playerid,x,y,z);
			CreatePickup(1273,1,x,y,z);
			new File:pckfile = fopen(PickupFile(pickupcasa),io_write);
			fclose(pckfile);
			set(pckStats[pickupcasa][CorretorVenda],PlayerName(playerid));
			pckStats[pickupcasa][Vendendo] = 1;
			pckStats[pickupcasa][VendendoValor] = valor;
			pckStats[pickupcasa][pX] = x;
			pckStats[pickupcasa][pY] = y;
			pckStats[pickupcasa][pZ] = z;
			pStats[playerid][VendendoCasas]++;
			SendClientMessage(playerid, COLOR_GREEN, "Casa colocada a venda, aguarde um comprador...");
			return 1;
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "USO: /porcasaavenda [valor: $5000,$10000,$20000,$40000,$60000,$80000,$100000 ou $200000]");
			return 1;
		}
	}
	if(strcmp(cmd, "/tirarcasaavenda", true) == 0) {
	    if(Profissao[playerid] != CORRETOR && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não é Corretor de imóveis!");
		new pickupcasa = GetPickup[playerid];
		if(pckStats[pickupcasa][Vendendo] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Você deve estar em uma casa a venda!");
			return 1;
		}
		if(!compare(PlayerName(playerid),pckStats[pickupcasa][CorretorVenda]) && !IsPlayerAdmin(playerid)){
			SendClientMessage(playerid, COLOR_GRAY, "Não foi você quem colocou essa casa a venda, então você não pode tira-la!");
			return 1;
		}
  		DestroyPickup(pickupcasa);
  		set(pckStats[pickupcasa][CorretorVenda],"NONE");
  		pckStats[pickupcasa][Vendendo] = 0;
  		pckStats[pickupcasa][VendendoValor] = 0;
  		pckStats[pickupcasa][pX] = INVALID_POS_X;
  		pckStats[pickupcasa][pY] = INVALID_POS_Y;
  		pckStats[pickupcasa][pZ] = INVALID_POS_Z;
  		pStats[playerid][VendendoCasas]--;
		SendClientMessage(playerid, COLOR_GREEN, "Casa retirada de venda...");
		return 1;
	}
	if(strcmp(cmd, "/comprarcasaavenda", true) == 0){
	    new pickupcasa = GetPickup[playerid];
		if(pckStats[GetPickup[playerid]][Trancada] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Você deve estar em uma casa a venda!");
			return 1;
		}
		if(GetPlayerMoney(playerid) < pckStats[GetPickup[playerid]][VendendoValor]){
		    new string[256];
		    format(string,sizeof(string),"Você não tem dinheiro. Custo: $%d,00 dólares",pckStats[GetPickup[playerid]][VendendoValor]);
			SendClientMessage(playerid, COLOR_GRAY, string);
			return 1;
		}
		new string[256];
		format(string,sizeof(string),"O jogador %s comprou uma casa sua a venda pelo valor de $%d, você recebeu 10 por cento do valor!",PlayerName(playerid),pckStats[GetPickup[playerid]][VendendoValor]);
		if(!IsStringAName(pckStats[GetPickup[playerid]][CorretorVenda])){
		    SetValue(PlayerFile(pckStats[GetPickup[playerid]][CorretorVenda]),"BancoTrabalho",ReturnValueStr(strval(GetValue(PlayerFile(pckStats[GetPickup[playerid]][CorretorVenda]),"BancoTrabalho")) + pckStats[GetPickup[playerid]][CorretorVenda]/10));
		    SetValue(PlayerFile(pckStats[GetPickup[playerid]][CorretorVenda]),"VendendoCasas",ReturnValueStr(strval(GetValue(PlayerFile(pckStats[GetPickup[playerid]][CorretorVenda]),"VendendoCasas")) - 1));
			GuardarMensagem(pckStats[GetPickup[playerid]][CorretorVenda],string);
			GuardarMensagem(pckStats[GetPickup[playerid]][CorretorVenda],"O dinheiro foi depositado em sua conta bancária!");
		}
		else{
			new id = IDName(pckStats[GetPickup[playerid]][CorretorVenda]);
			pStats[id][BancoTrabalho] += pckStats[GetPickup[playerid]][VendendoValor]/10;
			pStats[id][VendendoCasas]--;
			SendClientMessage(id, COLOR_WHITE, string);
			SendClientMessage(id, COLOR_WHITE, "O dinheiro foi depositado em sua conta bancária!");
			if(Profissao[playerid] != CORRETOR) AcrescentarExPoints(id,1);
		}
		if(pStats[playerid][Casa] == 1) VenderCasa(playerid);
		pStats[playerid][Casa] = 1;
		RemovePlayerForHotel(playerid);
		pStats[playerid][ValorCasa] = pckStats[pickupcasa][VendendoValor];
		new Float:x,Float:y,Float:z,Float:ang;
		GetPlayerPos(playerid,x,y,z);
		GetPlayerFacingAngle(playerid,ang);
		AddPlayerMoney(playerid,-pckStats[pickupcasa][VendendoValor],-1);
		DestroyPickup(pickupcasa);
		CreatePickup(1272,1,x,y,z);
		pickupcasa = LastCasa;
  		LastCasa++;
		pStats[playerid][SpawnPosX] = x;
		pStats[playerid][SpawnPosY] = y;
		pStats[playerid][SpawnPosZ] = z;
		pStats[playerid][SpawnPosAng] = ang;
		SendClientMessage(playerid, COLOR_WHITE, "Casa adquirida!");
		pStats[playerid][PickupCasa] = pickupcasa;
  		format(string,sizeof(string),"VL%d",pickupcasa);
  		pckStats[pickupcasa][pX] = x;
		pckStats[pickupcasa][pY] = y;
		pckStats[pickupcasa][pZ] = z;
  		pckStats[pickupcasa][Vendendo] = 0;
  		pckStats[pickupcasa][VendendoValor] = 0;
  		pckStats[pickupcasa][CorretorVenda] = 0;
  		pckStats[pickupcasa][Trancada] = 0;
  		pckStats[pickupcasa][ContaLuz] = 0;
  		pckStats[pickupcasa][TV] = 0;
  		pckStats[pickupcasa][Radio] = 0;
  		pckStats[pickupcasa][Geladeira] = 0;
  		pckStats[pickupcasa][Fogao] = 0;
  		pckStats[pickupcasa][MaconhaCofre] = 0;
  		pckStats[pickupcasa][HeroinaCofre] = 0;
  		pckStats[pickupcasa][CocainaCofre] = 0;
  		pckStats[pickupcasa][DinheiroCofre] = 0;
		set(pckStats[pickupcasa][PickupDono],PlayerName(playerid));
		set(pckStats[pickupcasa][Chave],PlayerName(playerid));
		set(pckStats[pickupcasa][SenhaCofre],string);
		switch(pckStats[pickupcasa][VendendoValor])
		{
			case 5000: pckStats[pickupcasa][Int] = 0;
			case 10000: pckStats[pickupcasa][Int] = 1;
    		case 20000: pckStats[pickupcasa][Int] = 2;
    		case 40000: pckStats[pickupcasa][Int] = 3;
 			case 60000: pckStats[pickupcasa][Int] = 4;
    		case 80000: pckStats[pickupcasa][Int] = 5;
    		case 100000: pckStats[pickupcasa][Int] = 6;
    		case 200000: pckStats[pickupcasa][Int] = 7;
		   	default: pckStats[pickupcasa][Int] = 0;
		}
		format(string,sizeof(string),"A senha do seu cofre no momento é VL%d mas você pode troca-la com /registrarcofre [senha]",pickupcasa);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "%f %f %f // %s | vendedor=%s \r\n", x, y, z, PlayerName(playerid), PlayerName(envconvite[playerid]));
       	new File:temp;
       	temp = fopen("Utilidades/virtualliferpg.cas", io_append);
  		fwrite(temp, string);
		fclose(temp);
		return 1;
	}
	if(strcmp(cmd, "/casa", true) == 0) {
	    if(Profissao[playerid] == CORRETOR || IsPlayerAdmin(playerid)){
			new plid,valor;
			new string[256];
			new tmp[256];
			new distancia;
			tmp = strtok(cmdtext, idx);
			if(IsStringAName(tmp)){
				plid = IDName(tmp);
			}
			else{
				plid = strval(tmp);
			}
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_RED2, "/casa [ID/Nome do comprador] [valor]");
				return 1;
			}
			tmp = strtok(cmdtext,idx);
			valor = strval(tmp);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_RED2, "/casa [ID/Nome do comprador] [valor]");
				return 1;
			}
			if(GetPlayerMoney(plid) < valor){
			    SendClientMessage(playerid, COLOR_RED2, "Esse jogador não possui dinheiro!");
			    return 1;
			}
			distancia = GetDistanceBetweenPlayers(playerid, plid);
		 	if(distancia > 30){
			    SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto.");
				return 1;
			}
			if(GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não pode vender casas em um interior!");
			if(valor == 5000 || valor == 10000 || valor == 20000 || valor == 40000 || valor == 60000 || valor == 80000 || valor == 100000 || valor == 200000){
    			if(fexist(PlayerFile(PlayerName(plid)))) {
	                if(IsPlayerConnected(plid) && Logado[plid] == 1){
			            invitestatus[plid] = INVITE_CASA;
						envconvite[plid] = playerid;
						new Float:X,Float:Y,Float:Z,Float:ang;
						GetPlayerPos(playerid,X,Y,Z);
						GetPlayerFacingAngle(playerid,ang);
						iX[plid] = X;
						iY[plid] = Y;
						iZ[plid] = Z;
						iang[plid] = ang;
						ivalorcasa[plid] = valor;
						SendClientMessage(playerid, COLOR_GREEN, "Ótimo! Agora espere o outro jogador aceitar a casa.");
						format(string,sizeof(string),"O Corretor %s está lhe oferecendo uma casa por $%d",PlayerName(playerid), valor);
						SendClientMessage(plid, COLOR_CORRETOR, string);
						SendClientMessage(plid, COLOR_CORRETOR, "Para aceitar digite: /aceitar e para recusar digite: /recusar");
				    	SetTimerEx("Cancelar",60000,0,"d",plid);
						return 1;
					} else {
		   				SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado");
						return 1;
					}
				}
			} else {
		   		SendClientMessage(playerid, COLOR_RED2, "/casa [id] [valor]. OBS: Valores dos imóveis: $5.000, $10.000, $20.000, $40.000, $60.000, $80.000, $100.000 e $200.000");
				return 1;
			}
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Corretor de Imoveis");
			return 1;
		}
	}

	if(strcmp(cmd, "/hotel", true) == 0) {
    	new tmp[256];
		if(AreaHotel[playerid] == 1){
		    if(HotelLastP >= MAX_HOTEL_PLAYERS){
		        SendClientMessage(playerid, COLOR_GRAY, "Limite de jogadores em hotéis excedido pelo gamemode...");
		        return 1;
			}
			if(GetPlayerMoney(playerid) < 1500){
       			SendClientMessage(playerid, COLOR_GRAY, "Você não tem com você $1500 para pagar.");
				return 1;
			} else {
				if(fexist(PlayerFile(PlayerName(playerid)))) {
	    			new Float:X, Float:Y, Float:Z, Float:ang;
	    			format(tmp,sizeof(tmp),"%s",PlayerName(playerid));
	    			GetPlayerPos(playerid, X, Y, Z);
	    			GetPlayerFacingAngle(playerid,ang);
	    			pStats[playerid][SpawnPosX] = X;
	    			pStats[playerid][SpawnPosY] = Y;
	    			pStats[playerid][SpawnPosZ] = Z;
	    			pStats[playerid][SpawnPosAng] = ang;
					pStats[playerid][Hotel] = 1;
					ApplyPlayerInHotel(playerid);
	    			AddPlayerMoney(playerid,-1500,-1);
	    			AcrescentarLucro(15,1500);
	    			SendClientMessage(playerid, COLOR_GREEN, "Agora você está hospedado aqui. Obrigado por escolher este Hotel.");
		           	SendClientMessage(playerid, COLOR_GREEN, "Você ficará hospedado até ter um emprego e condições de comprar sua casa.");
					return 1;
        		}
			}
		} else {
    		SendClientMessage(playerid, COLOR_GRAY, "Ei... Você não está em um Hotel.");
       		SendClientMessage(playerid, COLOR_WHITE, "Procure um taxista e peça para lhe levar a 1");
       		SendClientMessage(playerid, COLOR_WHITE, "Se tiver uma casa verde no radar HÁ VAGAS!");
    		return 1;
       	}
    }

	if(strcmp(cmd, "/pagar", true) == 0) {
		new string[256];
	    new tmp[256];
	    new plid;
	    new pagamento;
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_GRAY, "/pagar [id] [quantidade]");
			return 1;
		}
		plid = strval(tmp);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_GRAY, "/pagar [id] [quantidade]");
			return 1;
		}
 		pagamento = strval(tmp);
        if(Profissao[plid] == VENDEDOR_DE_CARROS || Profissao[plid] == CORRETOR){
 			if(pagamento > GetPlayerMoney(plid) || pagamento <= 0){
				SendClientMessage(playerid, COLOR_GRAY, "Você não tem esse dinheiro! Ou não está querendo pagar de forma justa.");
				return 1;
			}
 			if(IsPlayerConnected(plid)){
 			    new lucros;
				lucros = pagamento + pagamento/10;
 			    AddPlayerMoney(plid, lucros, 1);
 			    AddPlayerMoney(playerid, 0-pagamento, -1);
 			    if(JogadorContratado(plid,14)) AcrescentarLucro(14,Porcentagem(pagamento,60));
 			    if(JogadorContratado(plid,15)) AcrescentarLucro(15,Porcentagem(pagamento,60));
    	        SendClientMessage(playerid, COLOR_GREEN, "Pagamento feito.");
				format(string, sizeof(string), "Você vendeu por %d e lucrou %d com a venda", pagamento, pagamento/10);
				SendClientMessage(playerid, COLOR_GREEN, string);
				return 1;
			}
			else{
				SendClientMessage(playerid, COLOR_GRAY, "O jogador não está conectado!");
				return 1;
			}
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "Você está tentando pagar alguem que não é coretor e nem vendedor!");
			return 1;
		}
	}

	if(strcmp(cmd,"/minhaslatas",true)==0){
		if(Profissao[playerid] == DESEMPREGADO || Profissao[playerid] == LIXEIRO || IsPlayerAdmin(playerid)){
			new string[256];
		    format(string,sizeof(string),"Você possui %d latas!",pStats[playerid][Latas]);
		    SendClientMessage(playerid, COLOR_WHITE, string);
		    return 1;
	    } else {
		    SendClientMessage(playerid, COLOR_RED2, "Você não é desempregado portanto não possui latinhas");
		    return 1;
		}
	}

	if(strcmp(cmd, "/venderlatas",true)==0){
		if(Profissao[playerid] == DESEMPREGADO || Profissao[playerid] == LIXEIRO || IsPlayerAdmin(playerid)){
			if(AreaLixao[playerid] == 1){
		 		AddPlayerMoney(playerid,pStats[playerid][Latas]*10, 3);
				new string[256];
			    format(string,sizeof(string),"Você vendeu %d latinhas e recebeu $%d por isso.",pStats[playerid][Latas],pStats[playerid][Latas]*10);
				SendClientMessage(playerid, COLOR_DESEMPREGADO, string);
				pStats[playerid][Latas] = 0;
				DisablePlayerCheckpoint(playerid);
				EntregandoLatas[playerid] = 0;
				CheckpointStatus[playerid] = NONE;
				return 1;
			} else {
			 	SendClientMessage(playerid, COLOR_RED2, "Você não está na área de reciclagem do lixão");
			 	return 1;
			 }
		 } else {
			 SendClientMessage(playerid, COLOR_RED2, "Você não tem permissão");
			 return 1;
		 }
    }
	if(strcmp(cmd,"/pararcoleta",true)==0){
		if(Profissao[playerid] == DESEMPREGADO || Profissao[playerid] == LIXEIRO || IsPlayerAdmin(playerid)){
			if(CatarLatinha[playerid] == 1){
				DisablePlayerCheckpoint(playerid);
		        CatarLatinha[playerid] = 0;
		        SendClientMessage(playerid, COLOR_DESEMPREGADO, "Você parou de coletar latinhas.");
		        new string[256];
		        format(string,sizeof(string),"Você possui %d latinhas",pStats[playerid][Latas]);
		        SendClientMessage(playerid, COLOR_AZUL,string);
		        Missao[playerid] = 0;
		        return 1;
			 }else{
				SendClientMessage(playerid, COLOR_RED2, "Você não está coletando latinhas.");
		    	return 1;
		   	}
	   	} else {
		    SendClientMessage(playerid, COLOR_RED2, "Você não tem permissão.");
		    return 1;
		}
	}
	if(strcmp(cmd,"/pegarlata",true)==0){
	    if(Profissao[playerid] == DESEMPREGADO || Profissao[playerid] == LIXEIRO || IsPlayerAdmin(playerid)){
	        if(CatarLatinha[playerid] == 1){
				SendClientMessage(playerid,COLOR_RED2,"Você já está coletando latinhas!");
				return 1;
			}
			else {
			    if(pStats[playerid][Latas] == 0) pStats[playerid][LatasNecessarias] = 30;
                CatarLatinha[playerid] = 1;
                DisablePlayerCheckpoint(playerid);
				SendClientMessage(playerid,COLOR_DESEMPREGADO,"Agora você terá que coletar latinhas e levar para a reciclagem.");
				new latinhas = random(37);
				CheckpointStatus[playerid] = CATANDOLATAS;
				SetPlayerCheckpoint(playerid,Latinhas[latinhas][0],Latinhas[latinhas][1],Latinhas[latinhas][2],3.0);
				Missao[playerid] = 1;
				return 1;
			}
		} else {
		    SendClientMessage(playerid,COLOR_RED2,"Você possui um emprego! Pegar lata é coisa de vagabundo...");
			return 1;
		}
	}
//Entretenimentos
	if(strcmp(cmd, "/fazercorrida", true) == 0 && IsPlayerAdmin(playerid)){
        SetPlayerNextRace1CP(playerid);
        return 1;
	}
	if(strcmp(cmd, "/fazerderby", true) == 0){
		if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão!");
	    new tmp[256];
	    new mins,string[256];
	    tmp = strtok(cmdtext,idx);
	 	mins = strval(tmp);
		if(mins <= 2 || mins >= 8) return SendClientMessage(playerid, COLOR_GRAY, "USE: /fazerderby [3-7]");
		if(DerbyAvisado == 1) return  SendClientMessage(playerid, COLOR_GRAY, "Já há um Derby em andamento!");
		SendClientMessageToAll(COLOR_WHITE, " ");
		SendClientMessageToAll(COLOR_WHITE, "[ESTÁDIO] Está achando sua vida monótona?");
		SendClientMessageToAll(COLOR_WHITE, "[ESTÁDIO] Chegou a sua hora de competir no nosso estádio!!!");
		SendClientMessageToAll(COLOR_WHITE, "[ESTÁDIO] Que tal um CRASH/DERBY ? Venha já para o nosso estádio");
		SendClientMessageToAll(COLOR_WHITE, "[ESTÁDIO] Está interessado? /participar.");
		format(string,sizeof(string), 		"[ESTÁDIO] As inscrições acabarão daqui à %d horas",mins);
		SendClientMessageToAll(COLOR_WHITE, string);
		SendClientMessageToAll(COLOR_WHITE, " ");
		SendClientMessage(playerid, COLOR_JUIZ, "Derby feito!");
		format(string,sizeof(string),"%s iniciou um derby daqui a %d minutos.",PlayerName(playerid),mins);
		print(string);
		writelog(string);
		DMinutosRestantes = mins;
		SetTimer("ContandoDerby",60000,0);
		DerbyAvisado = 1;
		return 1;
	}
	if(strcmp(cmd,"/abastecerarma",true) == 0){
	    if(NoPL[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está no evento!");
	    if(Equipe[playerid] != 2) return SendClientMessage(playerid, COLOR_GRAY, "Você não é da equipe policial!");
		if(AreaCopPL[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na base policial!");
		TogglePlayerControllable(playerid,0);
		SendClientMessage(playerid, COLOR_WHITE, "Abastecendo sua arma...");
		SetTimerEx("AbastecerArma",5000,0,"d",playerid);
	    return 1;
	}
	if(strcmp(cmd,"/equipectc",true) == 0){
	    if(!AgoraEstouNoCC[playerid]) return SendClientMessage(playerid, COLOR_GRAY, "Você não está liberado para escolher uma equipe!");
	    new tmp[256];
	    tmp = strtok(cmdtext,idx);
	    if(compare(tmp,"azul")){
	        AgoraEstouNoCC[playerid] = 0;
			SetPlayerCCGroup(playerid,1);
 			return 1;
		}
		else if(compare(tmp,"laranja")){
            AgoraEstouNoCC[playerid] = 0;
			SetPlayerCCGroup(playerid,2);
		 	return 1;
		}
		else return SendClientMessage(playerid, COLOR_GRAY, "USO: /equipecc [azul/laranja]");
	}
	if(strcmp(cmd,"/equipe",true) == 0){
	    if(!EscolhendoEquipe[playerid]) return SendClientMessage(playerid, COLOR_GRAY, "Você não está liberado para escolher uma equipe!");
	    new tmp[256];
	    tmp = strtok(cmdtext,idx);
	    if(compare(tmp,"ladroes")){
	        EscolhendoEquipe[playerid] = 0;
 			SetLadraoPL(playerid);
 			return 1;
		}
		else if(compare(tmp,"policiais")){
            EscolhendoEquipe[playerid] = 0;
		 	SetPolicialPL(playerid);
		 	return 1;
		}
		else return SendClientMessage(playerid, COLOR_GRAY, "USO: /equipe [ladroes/policiais]");
	}
	if(strcmp(cmd, "/iniciarctc", true) == 0 && IsPlayerAdmin(playerid)) return FimInscCC();
	if(strcmp(cmd, "/fimctc", true) == 0 && IsPlayerAdmin(playerid)) return FimCC();
	if(strcmp(cmd,"/sairctc",true) == 0){
        if(EstouNoCC[playerid] == 1){
            EstouNoCC[playerid] = 0;
            GangZoneHideForPlayer(playerid, EquipeAzul);
			GangZoneHideForPlayer(playerid, EquipeLaranja);
			SetPlayerColor(playerid, ProfColors[Profissao[playerid]]);
			EquipeCC[playerid] = 0;
			SetPlayerPos(playerid,1019.2133,-1134.7303,23.8281);
			return 1;
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "Você não está no Capture The Cars!");
			return 1;
		}
	}
	if(strcmp(cmd,"/setarequipectc",true) == 0 && IsPlayerAdmin(playerid)){
	    new plid = strval(strtok(cmdtext,idx));
	    if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado!");
	    new tmp[256];
	    tmp = strtok(cmdtext,idx);
	    if(compare(tmp,"azul")){
	        AgoraEstouNoCC[plid] = 0;
			SetPlayerCCGroup(plid,1);
 			return 1;
		}
		else if(compare(tmp,"laranja")){
            AgoraEstouNoCC[plid] = 0;
			SetPlayerCCGroup(plid,2);
		 	return 1;
		}
		else return SendClientMessage(playerid, COLOR_GRAY, "USO: /equipectc [azul/laranja]");
	}
	if(strcmp(cmd,"/entrarctc",true) == 0){
		if(!Logado[playerid]) return SendClientMessage(playerid, COLOR_GRAY, "Você não está logado!");
		if(CCAberto == 1) return SendClientMessage(playerid, COLOR_GRAY, "O evento já iniciou!");
		if(!AreaEntretenimentos[playerid]) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na área de entretenimentos!");
		if(EstouNoCC[playerid] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você já está no Capture The Cars!");
		EstouNoCC[playerid] = 1;
		new string[256];
		format(string,sizeof(string),"[CAPTURE THE CARS] %s entrou para o evento.",PlayerName(playerid));
		SendClientMessageToAll(COLOR_LIXEIRO, string);
		SendClientMessage(playerid, COLOR_WHITE, "OK, feito, espere o evento iniciar para escolher a equipe!");
		return 1;
	}
	if(strcmp(cmd,"/entrarpl",true) == 0){
		if(!Logado[playerid]) return SendClientMessage(playerid, COLOR_GRAY, "Você não está logado!");
		if(PLIniciou == 1) return SendClientMessage(playerid, COLOR_GRAY, "O evento já iniciou!");
		if(!AreaEntretenimentos[playerid]) return SendClientMessage(playerid, COLOR_GRAY, "Você não está na área de entretenimentos!");
		if(NoPL[playerid] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você já está no Polícia e Ladrão!");
		NoPL[playerid] = 1;
		new string[256];
		format(string,sizeof(string),"[POLÍCIA E LADRÃO] %s entrou para o evento.",PlayerName(playerid));
		SendClientMessageToAll(COLOR_LIGHT_YELLOW, string);
		SendClientMessage(playerid, COLOR_WHITE, "OK, feito, espere o evento iniciar para escolher a equipe!");
		return 1;
	}
	if(strcmp(cmd,"/iniciarpl",true) == 0){
	    if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Apenas admins podem iniciar o evento!");
		if(PLIniciou == 1) return SendClientMessage(playerid, COLOR_GRAY, "O evento já está iniciado!");
		if(!Logado[playerid]) return SendClientMessage(playerid, COLOR_GRAY, "Você não está logado!");
		PLIniciou = 1;
		QtCapturados = 0;
		SendClientMessageToAll(COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] Evento iniciado! Digitem \"/equipe [ladroes/policiais]\" para entrarem em uma equipe!");
		for(new i = 0; i < SLOTS2; i++){
	    	if(IsPlayerConnected(i) && NoPL[i] == 1){
				EscolhendoEquipe[i] = 1;
			}
		}
		CtPL = MinutosPL;
		TimerPL = SetTimer("EndPL",60000,0);
		return 1;
	}
	if(strcmp(cmd,"/fimpl",true) == 0){
        if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Apenas admins podem finalizar o evento!");
        if(PLIniciou == 0) return SendClientMessage(playerid, COLOR_GRAY, "O evento não está iniciado!");
		if(!Logado[playerid]) return SendClientMessage(playerid, COLOR_GRAY, "Você não está logado!");
        PLIniciou = 0;
        QtCapturados = 0;
		for(new i = 0; i < SLOTS2; i++){
			if(IsPlayerConnected(i) && NoPL[i] == 1) RetirarPL(i);
		}
		return 1;
	}
	if(strcmp(cmd,"/sairpl",true) == 0){
		RetirarPL(playerid);
		return 1;
	}

	if(strcmp(cmd,"/capturecars",true) == 0){
        if(!IsPlayerAdmin(playerid)){
			SendClientMessage(playerid, COLOR_GRAY, "Apenas admins podem Iniciar o Evento.");
			return 1;
		}
		if(CaptureCAberto == 1){
			SendClientMessage(playerid, COLOR_GRAY, "O evento já está iniciado.");
			return 1;
		}
		if(ValorDia != 0){
			SendClientMessage(playerid, COLOR_GRAY, "Você só pode iniciar o evento no Domingo.");
			return 1;
		}
		CaptureCAberto = 1;
		SendClientMessageToAll(COLOR_ROSA," ");
		SendClientMessageToAll(COLOR_ROSA,"|==================| [CTC] Capture The Cars |==================|");
		SendClientMessageToAll(COLOR_TRAFICANTE, "[CTC] As inscrições para o CC foram abertas, para se inscrever");
		SendClientMessageToAll(COLOR_TRAFICANTE, "digite: /inscrevercc. Você tem 2 minutos.");
		SendClientMessageToAll(COLOR_ROSA," ");
  		SetTimer("FimInscCC",120000,0);
		return 1;
	}

	if(strcmp(cmd,"/inscrevercc",true) == 0){
		if(pStats[playerid][HistoriaFeita] == 0) {
   			SendClientMessage(playerid, COLOR_GRAY, "Termine a história para participar do CTC!");
   			return 1;
	 	}
		if(CaptureCAberto == 0){
			SendClientMessage(playerid, COLOR_GRAY, "O evento está fechado.");
			return 1;
		}
		if(EstouNoCC[playerid] == 1){
			SendClientMessage(playerid, COLOR_GRAY, "Você já está no Evento.");
			return 1;
		}
		if(CCAberto == 1){
			SendClientMessage(playerid, COLOR_GRAY, "O Evento já começou.");
			return 1;
		}
		EstouNoCC[playerid] = 1;
		SendClientMessage(playerid, COLOR_GREEN, "[CTC] Você está inscrito no evento. Você será teletransportado para o local.");
		return 1;
	}

//Sistema de Gangues
	if(strcmp(cmd, "/conquistarterritorio", true) == 0){
		if(pStats[playerid][Gangue] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma gangue!");
		if(!compare(gStats[GetGangID(pStats[playerid][GangueNome])][GangDono],PlayerName(playerid))) return SendClientMessage(playerid, COLOR_GRAY, "Você não comanda sua gangue!");
	    if(GetPlayerZone(playerid) == -1) return SendClientMessage(playerid, COLOR_GRAY, "Você deve estar em um território para poder usar esse comando!");
		if(pStats[playerid][ConquistouTerritorio] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você já conquistou esse território com esse comando, agora vai ter que batalhar!");
		if(compare(GangControlZone[GetPlayerZone(playerid)],"NONE")){
		    pStats[playerid][ConquistouTerritorio] = 1;
        	SetZoneForGang(GetPlayerZone(playerid),pStats[playerid][GangueNome]);
			SendClientMessage(playerid, COLOR_AZUL2, "Território adquirido!");
			return 1;
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "Esse território já possui dono, VAZA DAQUI!");
			return 1;
		}
	}
	if(strcmp(cmd, "/criargangue",true) == 0){
	    if(pStats[playerid][Gangue] == 1){
			SendClientMessage(playerid, COLOR_GRAY, "Você já está numa gangue!");
			return 1;
		}
		if(pStats[playerid][Respeito] < 10){
			SendClientMessage(playerid, COLOR_GRAY, "Você não tem respeito suficiente para criar uma gangue, mínimo: 10");
			return 1;
		}
		if(LastGNG >= MAX_GANGUES){
			SendClientMessage(playerid, COLOR_GRAY, "O gamemode excedeu o limite de gangues...");
			return 1;
		}
		new gangname[256],gangcolor,gangtype[256],gangfile[256],msg[256],bool:searched=false;
		gangname = strtok(cmdtext,idx);
		if(!strlen(gangname)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /criargangue [nome da gangue] [cor da gangue] [tipo de gangue: assalto, trafico ou assassinato]");
			return 1;
		}
		for(new s = 0; s < strlen(gangname); s++){
			if(strfind(gangname," ",false,s) != -1 || strfind(gangname,"*",false,s) != -1 || strfind(gangname,"'",false,s) != -1 || strfind(gangname,"/",false,s) != -1 || strfind(gangname,"?",false,s) != -1 || strfind(gangname,">",false,s) != -1
			|| strfind(gangname,"<",false,s) != -1 || strfind(gangname,":",false,s) != -1 || strfind(gangname,"?",false,s) != -1 || strfind(gangname,"\"",false,s) != -1 || strfind(gangname,"|",false,s) != -1 || strfind(gangname,"!",false,s) != -1){
				SendClientMessage(playerid, COLOR_GRAY, "Sem caracteres especiais nem barra de espaço no nome da gangue (\" * < > \\ / ? | : ' !)");
				return 1;
			}
		}
		set(gangfile,GangFile(gangname));
		if(fexist(gangfile)) return SendClientMessage(playerid, COLOR_GRAY, "Essa gangue já existe!");
		gangcolor = strval(strtok(cmdtext,idx));
		if(gangcolor < 1 || gangcolor > sizeof(GangColors)){
		    format(msg,sizeof(msg),"Cores de gang de 1 até %d",sizeof(GangColors));
			SendClientMessage(playerid, COLOR_GRAY, msg);
			return 1;
		}
		gangtype = strtok(cmdtext,idx);
		if(compare(gangtype,"assalto")){
		    for(new gng = 0; gng < LastGNG; gng++){
		        if(compare(Gangues[gng],"NONE")){
		            set(Gangues[gng],gangname);
		            searched=true;
		            break;
				}
		    }
			if(!searched){
		    	set(Gangues[LastGNG],gangname);
				LastGNG++;
			}
			new File:gngfile = fopen(gangfile,io_write);
			fclose(gngfile);
			gStats[GetGangID(gangname)][GangMembros] = 1;
			gStats[GetGangID(gangname)][GangPontos] = 0;
			gStats[GetGangID(gangname)][GangColor] = GangColors[gangcolor];
			pStats[playerid][Gangue] = 1;
			set(pStats[playerid][GangueNome],gangname);
			set(gStats[GetGangID(gangname)][GangDono],PlayerName(playerid));
		    gStats[GetGangID(gangname)][GangType] = 1;
			format(msg,sizeof(msg),"[NOTICIAS] Uma nova gangue de assalto chegou para dar medo aos bancos da cidade, nome da gangue: %s",gangname);
			SendClientMessageToAll(COLOR_WHITE, msg);
			SendClientMessage(playerid, COLOR_LIXEIRO, "Gangue criada!");
			return 1;
		}
		else if(compare(gangtype,"trafico")){
		    for(new gng = 0; gng < LastGNG; gng++){
		        if(compare(Gangues[gng],"NONE")){
		            set(Gangues[gng],gangname);
		            searched=true;
		            break;
				}
		    }
			if(!searched){
		    	set(Gangues[LastGNG],gangname);
				LastGNG++;
			}
			new File:gngfile = fopen(gangfile,io_write);
			fclose(gngfile);
			gStats[GetGangID(gangname)][GangMembros] = 1;
			gStats[GetGangID(gangname)][GangPontos] = 0;
			gStats[GetGangID(gangname)][GangColor] = GangColors[gangcolor];
			pStats[playerid][Gangue] = 1;
			set(pStats[playerid][GangueNome],gangname);
			set(gStats[GetGangID(gangname)][GangDono],PlayerName(playerid));
		    gStats[GetGangID(gangname)][GangType] = 2;
			format(msg,sizeof(msg),"[NOTICIAS] Uma nova gangue de tráfico chegou para combater os narcóticos, nome da gangue: %s",gangname);
			SendClientMessageToAll(COLOR_WHITE, msg);
			SendClientMessage(playerid, COLOR_LIXEIRO, "Gangue criada!");
			return 1;
		}
		else if(compare(gangtype,"assassinato")){
		    for(new gng = 0; gng < LastGNG; gng++){
		        if(compare(Gangues[gng],"NONE")){
		            set(Gangues[gng],gangname);
		            searched=true;
		            break;
				}
		    }
			if(!searched){
		    	set(Gangues[LastGNG],gangname);
				LastGNG++;
			}
			new File:gngfile = fopen(gangfile,io_write);
			fclose(gngfile);
			gStats[GetGangID(gangname)][GangMembros] = 1;
			gStats[GetGangID(gangname)][GangPontos] = 0;
			gStats[GetGangID(gangname)][GangColor] = GangColors[gangcolor];
			pStats[playerid][Gangue] = 1;
			set(pStats[playerid][GangueNome],gangname);
			set(gStats[GetGangID(gangname)][GangDono],PlayerName(playerid));
		    gStats[GetGangID(gangname)][GangType] = 3;
			format(msg,sizeof(msg),"[NOTICIAS] Uma nova gangue de assassinato chegou para aterrorizar a cidade, nome da gangue: %s",gangname);
			SendClientMessageToAll(COLOR_WHITE, msg);
			SendClientMessage(playerid, COLOR_LIXEIRO, "Gangue criada!");
			return 1;
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "USO: /criargangue [nome da gangue] [cor da gangue] [tipo de gangue: assalto, trafico ou assassinato]");
			return 1;
		}
	}
	if(strcmp(cmd,"/setarrespeito",true) == 0 && IsPlayerAdmin(playerid)){
		new plid = strval(strtok(cmdtext,idx));
		if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado!");
		new respect = strval(strtok(cmdtext,idx));
		pStats[plid][Respeito] = respect;
		SendClientMessage(playerid, COLOR_JUIZ, "Feito");
		return 1;
	}
	if(strcmp(cmd,"/minhagangue",true) == 0){
		if(pStats[playerid][Gangue] == 1){
			new msg[256];
			format(msg,sizeof(msg),"Sua gangue: %s",pStats[playerid][GangueNome]);
			SendClientMessage(playerid, gStats[GetGangID(pStats[playerid][GangueNome])][GangColor], msg);
			format(msg,sizeof(msg),"Líder da gangue: %s",gStats[GetGangID(pStats[playerid][GangueNome])][GangDono]);
			SendClientMessage(playerid, gStats[GetGangID(pStats[playerid][GangueNome])][GangColor], msg);
			format(msg,sizeof(msg),"Pontuação da gangue: %d ponto(s)",gStats[GetGangID(pStats[playerid][GangueNome])][GangPontos]);
			SendClientMessage(playerid, gStats[GetGangID(pStats[playerid][GangueNome])][GangColor], msg);
			format(msg,sizeof(msg),"Respeito necessário para entrar na gangue: %d ponto(s)",Porcentagem(gStats[GetGangID(pStats[playerid][GangueNome])][GangPontos],25));
			SendClientMessage(playerid, gStats[GetGangID(pStats[playerid][GangueNome])][GangColor], msg);
            format(msg,sizeof(msg),"Total de membros da gangue: %d",QtGangMembers(pStats[playerid][GangueNome]));
			SendClientMessage(playerid, gStats[GetGangID(pStats[playerid][GangueNome])][GangColor], msg);
			return 1;
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma gangue!");
			return 1;
		}
	}
	if(strcmp(cmd,"/definirskin", true) == 0){
		new tmp[256],string[256];
		tmp = strtok(cmdtext,idx);
		new slot = strval(tmp),skin;
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /definirskin [slot: 1 até 3] [id da skin]");
		tmp = strtok(cmdtext,idx);
		skin = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /definirskin [slot: 1 até 3] [id da skin]");
		if(slot < 1 || slot > 3) return SendClientMessage(playerid, COLOR_GRAY, "Slot de 1 à 3");
        if(!compare(gStats[GetGangID(pStats[playerid][GangueNome])][GangDono],PlayerName(playerid))) return SendClientMessage(playerid, COLOR_GRAY, "Você não é o dono da gangue!");
		if(!IsValidSkin(skin)) return SendClientMessage(playerid, COLOR_GRAY, "Skin inválida!");
		gStats[GetGangID(pStats[playerid][GangueNome])][SkinSlot][slot] = skin;
		format(string,256,"Você definiu a skin %d para o slot %d de sua gangue!",skin,slot);
		SendClientMessage(playerid, gStats[GetGangID(pStats[playerid][GangueNome])][GangColor], string);
		return 1;
	}
	if(strcmp(cmd,"/usarskingangue", true) == 0){
	    new slot = strval(strtok(cmdtext,idx)),str[256];
	    if(!IsPlayerInGangTerritory(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você deve estar no território de sua gangue para usar esse comando!");
	    if(slot < 1 || slot > 3) return SendClientMessage(playerid, COLOR_GRAY, "USO: /usarskingangue [slot: 1 à 3]");
	    format(str,sizeof(str),"SkinSlot%d",slot);
	    SendClientMessage(playerid, gStats[GetGangID(pStats[playerid][GangueNome])][GangColor], "Skin da sua gangue adquirida!");
	    SetPlayerSkin(playerid,gStats[GetGangID(pStats[playerid][GangueNome])][SkinSlot][slot]);
	    pStats[playerid][Skin] = gStats[GetGangID(pStats[playerid][GangueNome])][SkinSlot][slot];
		return 1;
	}
	if(strcmp(cmd,"/chamarparagangue",true) == 0){
	    new tmp[256],plid,gangname[256];
		gangname = strtok(cmdtext,idx);
		if(!strlen(gangname)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /chamarparagangue [nome da gangue] [id]");
		    return 1;
		}
		if(gStats[GetGangID(pStats[playerid][GangueNome])][GangMembros] >= MAX_GANGUE_PLAYERS){
			SendClientMessage(playerid, COLOR_GRAY, "Limite de membros por gangue excedido pelo gamemode.");
            return 1;
		}
		tmp = strtok(cmdtext,idx);
	    if(!strlen(tmp)){
	    	SendClientMessage(playerid, COLOR_GRAY, "USO: /chamarparagangue [nome da gangue] [id]");
		    return 1;
		}
		plid = strval(tmp);
		if(!IsPlayerConnected(plid)){
            SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado!");
		    return 1;
		}
		if(pStats[plid][Gangue] == 1){
			SendClientMessage(playerid, COLOR_GRAY, "Esse jogador já está em uma gangue!");
			return 1;
		}
		new gangfile[256],msg[256];
		set(gangfile,GangFile(gangname));
		if(!fexist(gangfile)) return SendClientMessage(playerid, COLOR_GRAY, "Gangue inexistente!");
		if(!compare(gStats[GetGangID(pStats[playerid][GangueNome])][GangDono],PlayerName(playerid))) return SendClientMessage(playerid, COLOR_GRAY, "Você não é o dono da gangue!");
		if(gStats[GetGangID(pStats[playerid][GangueNome])][GangMembros] - (5 + gStats[GetGangID(pStats[playerid][GangueNome])][GangPontos]) > 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não pode chamar mais membros para sua gangue, ganhe mais pontos para isso!");
		if(pStats[plid][Respeito] < Porcentagem(gStats[GetGangID(pStats[playerid][GangueNome])][GangPontos],25)){
			format(msg,sizeof(msg),"Esse jogador não tem Respeito o suficiente para entrar na sua gangue, mínimo: %d",Porcentagem(gStats[GetGangID(pStats[playerid][GangueNome])][GangPontos],25));
			SendClientMessage(playerid, COLOR_GRAY, msg);
			return 1;
		}
		format(GangInviteFile[plid],MAX_STRING,gangfile);
		format(GangInviteNome[plid],MAX_STRING,gangname);
		GangInviteID[plid] = playerid;
		GangInvite[plid] = 1;
		format(msg,sizeof(msg),"%s está lhe chamando para a gangue \"%s\"",PlayerName(playerid),gangname);
		SendClientMessage(plid, COLOR_LIXEIRO, msg);
		SendClientMessage(plid, COLOR_LIXEIRO, "Para aceitar digite /aceitargangue caso contrário /recusargangue");
		SendClientMessage(playerid, COLOR_LIXEIRO, "Membro chamado, aguarde resposta!");
		return 1;
	}
	if(strcmp(cmd,"/aceitargangue",true) == 0){
	    if(GangInvite[playerid] == 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe enviado nenhum convite para fazer parte de uma gangue!");
	        return 1;
	    }
	    new bool:searched=false;
	    for(new gng = 0; gng < gStats[GetGangID(GangInviteNome[playerid])][GangMembros]; gng++){
	        if(compare(MembersGang[GetGangID(GangInviteNome[playerid])][gng],"NONE")){
	            set(MembersGang[GetGangID(GangInviteNome[playerid])][gng],PlayerName(playerid));
	            searched=true;
	            break;
	        }
		}
	    if(!searched){
        	set(MembersGang[GetGangID(GangInviteNome[playerid])][gStats[GetGangID(GangInviteNome[playerid])][GangMembros]],PlayerName(playerid));
        	gStats[GetGangID(GangInviteNome[playerid])][GangMembros]++;
		}
		pStats[playerid][Gangue] = 1;
	    set(pStats[playerid][GangueNome],GangInviteNome[playerid]);
		SendClientMessage(playerid, COLOR_LIXEIRO, "Você aceitou entrar na gangue, agora você é um gangster!");
		SendClientMessage(GangInviteID[playerid], COLOR_LIXEIRO, "O jogador aceitou fazer parte de sua gangue!");
		GangInvite[playerid] = 0;
		return 1;
	}
	if(strcmp(cmd,"/recusargangue",true) == 0){
	    if(GangInvite[playerid] == 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe enviado nenhum convite para fazer parte de uma gangue!");
	        return 1;
	    }
	    GangInvite[playerid] = 0;
	    SendClientMessage(playerid, COLOR_LIXEIRO, "Convite de gangue recusado!");
        SendClientMessage(GangInviteID[playerid], COLOR_LIXEIRO, "O jogador recusou fazer parte de sua gangue!");
		return 1;
	}
	if(strcmp(cmd,"/expulsardagangue",true) == 0){
		new tmp[256],plid,gangname[256],gangfile[256];
        gangname = strtok(cmdtext,idx);
		if(!strlen(gangname)){
			SendClientMessage(playerid, COLOR_GRAY, "USO: /expulsardagangue [nome da gangue] [id]");
			return 1;
		}
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_GRAY, "USO: /expulsardagangue [nome da gangue] [id]");
			return 1;
		}
		plid = strval(tmp);
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
			return 1;
		}
		if(pStats[plid][Gangue] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está em uma gangue!");
		    return 1;
		}
		set(gangfile,GangFile(gangname));
		if(!fexist(gangfile)){
		    SendClientMessage(playerid, COLOR_GRAY, "Gangue inexistente!");
		    return 1;
		}
		if(!compare(gStats[GetGangID(gangname)][GangDono],PlayerName(playerid))){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é o dono dessa gangue!");
		    return 1;
		}
		new bool:searched=false;
		for(new g = 0; g < gStats[GetGangID(gangname)][GangMembros]; g++){
			if(compare(MembersGang[GetGangID(gangname)][g],PlayerName(plid))){
			    set(MembersGang[GetGangID(gangname)][g],"NONE");
			    pStats[plid][Gangue] = 0;
			    searched=true;
			    break;
			}
		}
		if(!searched){
			SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está na sua gangue!");
			return 1;
		}
	}
	if(strcmp(cmd,"/ganguecor",true) == 0){
		new gangcolor = strval(strtok(cmdtext,idx)),msg[256];
		if(gangcolor < 1 || gangcolor > sizeof(GangColors)){
		    format(msg,sizeof(msg),"Cores de gang de 1 até %d",sizeof(GangColors));
			SendClientMessage(playerid, COLOR_GRAY, msg);
			return 1;
		}
		format(msg,sizeof(msg),"Essa é a cor de gangue Nº%d",gangcolor);
		return SendClientMessage(playerid,GangColors[gangcolor],msg);
	}
	if(strcmp(cmd,"/removergangue",true) == 0){
		new gangname[256], gangfile[256];
		gangname = strtok(cmdtext,idx);
		if(!strlen(gangname)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /removergangue [nome da gangue]");
		set(gangfile,GangFile(gangname));
		if(!fexist(gangfile)) return SendClientMessage(playerid, COLOR_GRAY, "Essa gangue não existe!");
		if(!compare(gStats[GetGangID(gangname)][GangDono],PlayerName(playerid))){
			SendClientMessage(playerid, COLOR_GRAY, "Você não comanda essa gangue!");
			return 1;
		}
		else{
		    new str[256];
			for(new z = 0; z < sizeof(zones); z++){
				if(compare(GangControlZone[z],pStats[playerid][GangueNome])){
				    set(GangControlZone[z],"NONE");
				    CreateGangZonesForAll();
				}
			}
			for(new g = 0; g < gStats[GetGangID(gangname)][GangMembros]; g++){
				if(!compare(MembersGang[GetGangID(gangname)][g],"NONE") && fexist(MembersGang[GetGangID(gangname)][g])){
					SetValue(MembersGang[GetGangID(gangname)][g],"Gangue","0");
				}
			}
			set(Gangues[GetGangID(gangname)],"NONE");
			pStats[playerid][ConquistouTerritorio] = 0;
			pStats[playerid][Gangue] = 0;
			fremove(gangfile);
			format(str,sizeof(str),"[NOTICIAS] %s desiste de ser um líder gangster e resolve acabar com a gangue %s",PlayerName(playerid),gangname);
			SendClientMessageToAll(COLOR_WHITE,str);
			SendClientMessageToAll(COLOR_WHITE,"[NOTICIAS] \"Esse é um grande passo para a civilização!\" afirma o Delegado.");
			return 1;
		}
	}

//Negócios
	if(strcmp(cmd,"/resultadoprop",true) == 0){
        new tmp[256];
	    new propriedade;
	    tmp = strtok(cmdtext,idx);
	    propriedade = strval(tmp);
		if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_GRAY, "USO: /resultadoprop [propriedade]");
			return 1;
		}
		if(propriedade < 0 || propriedade > MAX_PROPERTIE_ID){
		    SendClientMessage(playerid, COLOR_GRAY, "Propriedade inválida!");
		    return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_RED2, NomesPropriedades[propriedade]);
			new string[256];
			if(propStats[propriedade][SemanaRetrasada] > 0){
				format(string,sizeof(string),"Semana retrasada: Lucro de $%d",propStats[propriedade][SemanaRetrasada]);
			}
			else{
			    format(string,sizeof(string),"Semana retrasada: Prejuízo de $%d",propStats[propriedade][SemanaRetrasada]);
			}
			SendClientMessage(playerid, COLOR_WHITE, string);
			if(propStats[propriedade][SemanaPassada] > 0){
				format(string,sizeof(string),"Semana passada: Lucro de $%d",propStats[propriedade][SemanaPassada]);
			}
			else{
			    format(string,sizeof(string),"Semana passada: Prejuízo de $%d",propStats[propriedade][SemanaPassada]);
			}
			SendClientMessage(playerid, COLOR_WHITE, string);
			return 1;
		}
	}

    if(strcmp(cmd,"/propinfo",true) == 0){
	    new tmp[256];
	    new propriedade;
	    tmp = strtok(cmdtext,idx);
	    propriedade = strval(tmp);
		if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_GRAY, "USO: /propinfo [propriedade]");
			return 1;
		}
		if(propriedade < 0 || propriedade > MAX_PROPERTIE_ID){
		    SendClientMessage(playerid, COLOR_GRAY, "Propriedade inválida!");
		    return 1;
		}
		else{
			new string[256];
			SendClientMessage(playerid, COLOR_RED2, NomesPropriedades[propriedade]);
			if(QtDonos(propriedade) == 0) format(string,sizeof(string),"Dono da propriedade: Nenhum");
			if(QtDonos(propriedade) == 1) format(string,sizeof(string),"Dono da propriedade: %s",propStats[propriedade][Dono1]);
			if(QtDonos(propriedade) == 2) format(string,sizeof(string),"Donos da propriedade: %s e %s",propStats[propriedade][Dono1],propStats[propriedade][Dono2]);
			SendClientMessage(playerid, COLOR_WHITE, string);
            if(QtSocios(propriedade) == 0) format(string,sizeof(string),"Sócios da propriedade: Nenhum");
			if(QtSocios(propriedade) == 1) format(string,sizeof(string),"Sócios da propriedade: %s",propStats[propriedade][Socio1]);
            if(QtSocios(propriedade) == 2) format(string,sizeof(string),"Sócios da propriedade: %s e %s",propStats[propriedade][Socio1],propStats[propriedade][Socio2]);
            if(QtSocios(propriedade) == 3) format(string,sizeof(string),"Sócios da propriedade: %s, %s e %s",propStats[propriedade][Socio1],propStats[propriedade][Socio2],propStats[propriedade][Socio3]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string,sizeof(string),"Funcionário 1: %s",propStats[propriedade][Trabalhador1]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string,sizeof(string),"Funcionário 2: %s",propStats[propriedade][Trabalhador2]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string,sizeof(string),"Funcionário 3: %s",propStats[propriedade][Trabalhador3]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string,sizeof(string),"Funcionário 4: %s",propStats[propriedade][Trabalhador4]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string,sizeof(string),"Funcionário 5: %s",propStats[propriedade][Trabalhador5]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string,sizeof(string),"Funcionário 6: %s",propStats[propriedade][Trabalhador6]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string,sizeof(string),"Funcionário 7: %s",propStats[propriedade][Trabalhador7]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return 1;
		}
	}
	if(strcmp(cmd,"/comprarpropriedadedodono",true) == 0){
	    new tmp[256];
	    new plid,prop,valor;
	    tmp = strtok(cmdtext,idx);
	    plid = strval(tmp);
	    if(!strlen(tmp)){
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /comprarpropriedadedodono [id] [propriedade] [valor]");
	        return 1;
		}
		tmp = strtok(cmdtext,idx);
	    prop = strval(tmp);
	    if(!strlen(tmp)){
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /comprarpropriedadedodono [id] [propriedade] [valor]");
	        return 1;
		}
		tmp = strtok(cmdtext,idx);
	    valor = strval(tmp);
	    if(!strlen(tmp)){
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /comprarpropriedadedodono [id] [propriedade] [valor]");
	        return 1;
		}
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		    return 1;
		}
		if(GetPlayerMoney(playerid) < valor){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não possui esse dinheiro!");
		    return 1;
		}
		if(Negocio[plid] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador já está fazendo negócio, espere ele terminar para fazer essa oferta!");
		    return 1;
		}
		if(prop < 0 || prop > MAX_PROPERTIE_ID){
		    SendClientMessage(playerid, COLOR_GRAY, "Propriedade inválida! Use /propriedades para ver as propriedades disponíveis.");
			return 1;
		}
		if(!DonoDaPropriedade(plid,prop)){
		    SendClientMessage(playerid, COLOR_GRAY, "Ele não é o dono da propriedade!");
		    return 1;
		}
		if(plid == playerid){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não pode comprar uma propriedade sua!");
		    return 1;
		}
		else{
		    new string[256];
		    format(string,sizeof(string),"%s está lhe oferecendo $%d pela propriedade %s",PlayerName(playerid),valor,NomesPropriedades[prop]);
			SendClientMessage(plid, COLOR_GREEN, string);
			SendClientMessage(plid, COLOR_GREEN, "Para aceitar digite /aceitarnegocio e para recusar digite /recusarnegocio");
			SendClientMessage(playerid, COLOR_GREEN, "Oferta de negócio feita! Agora veja se o outro jogador aceita.");
            Negocio[plid] = 1;
			Negociador[plid] = playerid;
			PropriedadeEscolhida[playerid] = prop;
			ValorOferecido[plid] = valor;
			NegocianteName[plid] = PlayerName(playerid);
			return 1;
		}
	}
    if(strcmp(cmd,"/aceitarnegocio",true) == 0){
		if(Negocio[playerid] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Não foi oferecida nenhuma proposta de negócio à você!");
			return 1;
		}
		if(!IsStringAName(NegocianteName[playerid])){
		    SendClientMessage(playerid, COLOR_GRAY, "Não era com ele que você decidiu fazer negócio!");
		    SendClientMessage(playerid, COLOR_GRAY, "O outro jogador deve ter saído do servidor.");
			Negocio[playerid] = 0;
			PropriedadeEscolhida[Negociador[playerid]] = -1;
			ValorOferecido[playerid] = 0;
			Negociador[playerid] = 0;
			return 1;
		}
		else{
		    new string[256];
		    format(string,sizeof(string),"A propriedade %s agora tem um novo dono (%s)",NomesPropriedades[PropriedadeEscolhida[Negociador[playerid]]],PlayerName(Negociador[playerid]));
			SendClientMessageToAll(COLOR_WHITE, string);
			SendClientMessage(Negociador[playerid], COLOR_GREEN, "A oferta de negócio foi aceita! Agora você tem uma nova propriedade.");
			format(string,sizeof(string),"Oferta aceita! Agora a propriedade %s tem novo dono!",NomesPropriedades[PropriedadeEscolhida[Negociador[playerid]]]);
			SendClientMessage(playerid, COLOR_GREEN, string);
			AddPlayerMoney(playerid,ValorOferecido[playerid],4);
			AddPlayerMoney(Negociador[playerid],-ValorOferecido[playerid],-1);
           	format(string,sizeof(string),"[PROPRIEDADES VENDA] A empresa %s não pertence mais a %s, ela foi comprada por %s pelo valor de $%d.",PropriedadeEscolhida[Negociador[playerid]], PlayerName(playerid), PlayerName(Negociador[playerid]),ValorOferecido[playerid]);
			SendClientMessageToAll(COLOR_TRANSPORTE_DE_VALORES, string);
			SendClientMessageToAll(COLOR_TRANSPORTE_DE_VALORES, "o qual promete contratar muitos funcionários e investir capital em Los Santos.");
			new str[256];
			set(str,PropertieFile(PropriedadeEscolhida[Negociador[playerid]]));
            if(!fexist(str)) { new File:propfile = fopen(str,io_write); fclose(propfile); }
            new p=PropriedadeEscolhida[Negociador[playerid]];
			set(propStats[p][Dono1],PlayerName(Negociador[playerid]));
			set(propStats[p][Dono2],"NONE");
			set(propStats[p][Trabalhador1],"NONE");
			set(propStats[p][Trabalhador2],"NONE");
			set(propStats[p][Trabalhador3],"NONE");
			set(propStats[p][Trabalhador4],"NONE");
			set(propStats[p][Trabalhador5],"NONE");
			set(propStats[p][Trabalhador6],"NONE");
			set(propStats[p][Trabalhador7],"NONE");
			set(propStats[p][Socio1],"NONE");
			set(propStats[p][Socio2],"NONE");
			set(propStats[p][Socio3],"NONE");
			propStats[p][Lucro] = 0;
			propStats[p][Prejuizo] = 0;
			propStats[p][Investimento] = 0;
            Negocio[playerid] = 0;
			PropriedadeEscolhida[Negociador[playerid]] = -1;
			ValorOferecido[playerid] = 0;
			Negociador[playerid] = 0;
			return 1;
		}
	}
	if(strcmp(cmd,"/recusarnegocio",true) == 0){
	    if(Negocio[playerid] == 0){
    		SendClientMessage(playerid, COLOR_GRAY, "Não foi oferecida nenhuma proposta de negócio à você!");
			return 1;
		}
		if(!IsStringAName(NegocianteName[playerid])){
		    SendClientMessage(playerid, COLOR_GRAY, "Não era com ele que você decidiu fazer negócio!");
		    SendClientMessage(playerid, COLOR_GRAY, "O outro jogador deve ter saído do servidor.");
			Negocio[playerid] = 0;
			PropriedadeEscolhida[Negociador[playerid]] = -1;
			ValorOferecido[playerid] = 0;
			Negociador[playerid] = 0;
			return 1;
		}
		else{
		    SendClientMessage(Negociador[playerid], COLOR_GRAY, "A proposta foi recusada!");
		    SendClientMessage(playerid, COLOR_GREEN, "Você recusou a oferta!");
		    Negocio[playerid] = 0;
			PropriedadeEscolhida[Negociador[playerid]] = -1;
			ValorOferecido[playerid] = 0;
			Negociador[playerid] = 0;
			return 1;
		}
	}
	if(strcmp(cmd,"/medesnomearsocio",true) == 0){
		new tmp[256];
		new propriedade;
		tmp = strtok(cmdtext,idx);
		propriedade = strval(tmp);
		if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_GRAY, "USO: /medesnomearsocio [propriedade]");
			return 1;
		}
		if(propriedade < 0 || propriedade > MAX_PROPERTIE_ID){
		    SendClientMessage(playerid, COLOR_GRAY, "Propriedade inválida! Use /propriedades para ver as propriedades disponíveis.");
			return 1;
		}
		if(!SocioDaPropriedade(playerid,propriedade)){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é sócio dessa propriedade!");
		    return 1;
		}
		DesnomearSocio(playerid,propriedade);
		new string[256];
		format(string,sizeof(string),"[PROPRIEDADES] \"NÃO AGUENTO MAIS\" foi o que disse %s antes de se desnomear para sócio da %s",PlayerName(playerid),NomesPropriedades[propriedade]);
		SendClientMessageToAll(COLOR_WHITE, string);
		SendClientMessageToAll(COLOR_WHITE, "O chefe nem procurou saber o porque, simplesmente mandou-o fazer as malas!");
		return 1;
	}
	if(strcmp(cmd,"/pedirdemissao",true) == 0){
	    new propriedade;
	    new tmp[256];
		tmp = strtok(cmdtext,idx);
	    propriedade = strval(tmp);
	    if(!strlen(tmp)){
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /pedirdemissao [propriedade]");
	        return 1;
		}
		if(propriedade < 0 || propriedade > MAX_PROPERTIE_ID){
		    SendClientMessage(playerid, COLOR_GRAY, "Propriedade inválida! Use /propriedades para ver as propriedades disponíveis.");
			return 1;
		}
		if(!IsPlayerConnected(playerid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		    return 1;
		}
		if(!JogadorContratado(playerid,propriedade)){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não é contratado da empresa.");
		    return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_RED2, "DEMITIDO!!!");
			new string[256];
			format(string,sizeof(string),"[PROPRIEDADES] %s Pediu demissão da %s, o chefe nem hesitou. ESTÁ DEMITIDO!",PlayerName(playerid), NomesPropriedades[propriedade]);
			SendClientMessageToAll(COLOR_RED2, string);
			DemitirJogador(playerid,propriedade);
			return 1;
		}
	}
	if(strcmp(cmd,"/contratar",true) == 0){
	    new tmp[256];
	    new plid,propriedade;
	    tmp = strtok(cmdtext,idx);
	    plid = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /contratar [id] [propriedade]");
        tmp = strtok(cmdtext,idx);
	    propriedade = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /contratar [id] [propriedade]");
		Contratar(playerid,plid,propriedade);
		return 1;
	}
	if(strcmp(cmd,"/demitir",true) == 0){
	    new tmp[256];
	    new plid,propriedade;
	    tmp = strtok(cmdtext,idx);
	    plid = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /demitir [id] [propriedade]");
        tmp = strtok(cmdtext,idx);
	    propriedade = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /demitir [id] [propriedade]");
		Demitir(playerid,plid,propriedade);
		return 1;
	}
	if(strcmp(cmd,"/aumento",true) == 0){
	    new tmp[256];
	    new plid,propriedade,quantidade;
	    tmp = strtok(cmdtext,idx);
	    plid = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /aumento [id] [quantidade] [propriedade]");
        tmp = strtok(cmdtext,idx);
	    quantidade = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /aumento [id] [quantidade] [propriedade]");
        tmp = strtok(cmdtext,idx);
	    propriedade = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /aumento [id] [quantidade] [propriedade]");
		TirarAumento(playerid,plid,quantidade,propriedade);
		return 1;
	}
	if(strcmp(cmd,"/tiraraumento",true) == 0){
	    new tmp[256];
	    new plid,propriedade,quantidade;
	    tmp = strtok(cmdtext,idx);
	    plid = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /tiraraumento [id] [quantidade] [propriedade]");
        tmp = strtok(cmdtext,idx);
	    quantidade = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /tiraraumento [id] [quantidade] [propriedade]");
		tmp = strtok(cmdtext,idx);
	    propriedade = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /tiraraumento [id] [quantidade] [propriedade]");
		DarAumento(playerid,plid,quantidade,propriedade);
		return 1;
	}
	if(strcmp(cmd,"/investir",true) == 0){
	    new tmp[256];
	    new propriedade,quantidade;
        tmp = strtok(cmdtext,idx);
	    propriedade = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /investir [propriedade] [quantidade]");
		tmp = strtok(cmdtext,idx);
	    quantidade = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /investir [propriedade] [quantidade]");
		Investir(playerid,propriedade,quantidade);
		return 1;
	}
	if(strcmp(cmd,"/venderpropriedade",true) == 0){
	    new tmp[256];
	    new propriedade;
        tmp = strtok(cmdtext,idx);
	    propriedade = strval(tmp);
	    if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /venderpropriedade [propriedade]");
	    VenderPropriedade(playerid,propriedade);
	    return 1;
	}
	if(strcmp(cmd,"/nomearsocio",true) == 0){
	    new tmp[256];
	    new plid,propriedade;
	    tmp = strtok(cmdtext,idx);
	    plid = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /nomearsocio [id] [propriedade]");
        tmp = strtok(cmdtext,idx);
	    propriedade = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /nomearsocio [id] [propriedade]");
		NomearSocio2(playerid,plid,propriedade);
		return 1;
	}
	if(strcmp(cmd,"/desnomearsocio",true) == 0){
	    new tmp[256];
	    new plid,propriedade;
	    tmp = strtok(cmdtext,idx);
	    plid = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /desnomearsocio [id] [propriedade]");
        tmp = strtok(cmdtext,idx);
	    propriedade = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /desnomearsocio [id] [propriedade]");
		DesnomearSocio2(playerid,plid,propriedade);
		return 1;
	}
//Silenciar
    if(strcmp(cmd,"/podefalar",true)==0)
	{
	if(IsPlayerAdmin(playerid))
	{
	new tmp[256];
	new plid;
	tmp = strtok(cmdtext,idx);
	plid = strval(tmp);
	if(!strlen(tmp)){
	SendClientMessage(playerid, COLOR_GRAY, "Uso: /podefalar [id].");
	return 1;
	}
	if(IsPlayerConnected(plid)){
	new Name[30];
	GetPlayerName(plid,Name,30);
	Mudo[plid] = 0;
	new string[256];
	format(string,sizeof(string),"%s agora pode falar novamente.",Name);
	SendClientMessageToAll(COLOR_WHITE, string);
	return 1;
	}
	else{
		SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado.");
		return 1;
		}
	}
	else{
		SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão.");
		return 1;
		}
	}

	if(strcmp(cmd,"/silenciar",true)==0)
	{
	if(IsPlayerAdmin(playerid))
	{
	new tmp[256];
	new plid;
	tmp = strtok(cmdtext,idx);
	plid = strval(tmp);
	if(!strlen(tmp)){
	SendClientMessage(playerid, COLOR_GRAY, "Uso: /silenciar [id].");
	return 1;
	}
	if(IsPlayerConnected(plid)){
	new Name[30];
	GetPlayerName(plid,Name,30);
	Mudo[plid] = 1;
	new string[256];
	format(string,sizeof(string),"%s foi silenciado",Name);
	SendClientMessageToAll(COLOR_WHITE, string);
	return 1;
	}
	else{
		SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado.");
		return 1;
		}
	}
	else{
		SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão.");
		return 1;
		}
	}
	if(strcmp(cmd,"/silenciartodos",true)==0)
	{
	if(IsPlayerAdmin(playerid))
	{
		for(new i=0;i<SLOTS2;i++){
			if(i != playerid){
				Mudo[i] = 1;
				GameTextForAll("~r~todos foram silenciados",3000,1);
			}
  		}
	}
	else{
		SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão.");
		return 1;
		}
	}
	if(strcmp(cmd,"/todospodemfalar",true)==0)
	{
	if(IsPlayerAdmin(playerid))
	{
		for(new i=0;i<SLOTS2;i++){
			Mudo[i] = 0;
			GameTextForAll("~g~agora todos podem falar ~n~novamente",3000,1);
		}
	}
	else{
		SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão.");
		return 1;
		}
	}
//Status
	if(strcmp(cmd, "/bankstats", true) == 0) {
	    if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão!");
		new plid = strval(strtok(cmdtext,idx));
		new string[256];
		if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador desconectado.");
		format(string,sizeof(string),"Informações bancárias de %s",PlayerName(plid));
		SendClientMessage(playerid, COLOR_JUIZ, string);
		format(string,sizeof(string),"Saldo: $%d,00 dólares",pStats[plid][Banco]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string,sizeof(string),"Aplicação: $%d,00 dólares",pStats[plid][PInvestimento]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	if(strcmp(cmd, "/meustatus", true) == 0) {
		new string[256], string2[256];
		format(string,sizeof(string),"|--------------------------------------| Status de %s || ID: %d |--------------------------------------|",PlayerName(playerid),playerid);
		SendClientMessage(playerid, COLOR_RED2, string);
		format(string,sizeof(string),"|---| Profissão: %s || Experience Points: %d || Level: %d || ExPoints para conseguir um Level: %d |---| ",ProfExtName[Profissao[playerid]],pStats[playerid][ExPoints],pStats[playerid][XL],ProfExp[Profissao[playerid]]);
		SendClientMessage(playerid, COLOR_LIGHT_YELLOW, string);
		format(string,sizeof(string),"|---| Skin atual: %d || Skin de trabalho %d || Iscas para pescar: %d || Número de celular: %d || Seguro de vida: %s |---|",pStats[playerid][Skin],ProfSkin[Profissao[playerid]],pStats[playerid][Iscas],pStats[playerid][PhoneNumb],SimNao[pStats[playerid][Seguro]]);
		SendClientMessage(playerid, COLOR_LIGHT_YELLOW, string);
		format(string,sizeof(string),"|---| Respeito: %d || Empréstimo bancário: $%d,00 || Dívidas à pagar: $%d,00 || Teor alcóolico: %d mg |---|",pStats[playerid][Respeito],pStats[playerid][Emprestimo],pStats[playerid][Divida],Bebida[playerid]);
		SendClientMessage(playerid, COLOR_LIGHT_YELLOW, string);
		format(string,sizeof(string),"|---| Heroína: %d injeções || Maconha: %d cigarro(s) || Cocaína: %d grama(s) |---|",QtHeroina[playerid],QtMaconha[playerid],QtCocaina[playerid]);
		SendClientMessage(playerid, COLOR_LIGHT_YELLOW, string);
		format(string,sizeof(string),"|---| Pontos de culinária: %d || Pontos de higiene: %d || Quantidade de chaves mestras: %d |---|",pStats[playerid][Culinaria],pStats[playerid][Higiene],pStats[playerid][ChaveMestra]);
		SendClientMessage(playerid, COLOR_LIGHT_YELLOW, string);
		format(string,sizeof(string),"|---| Imóvel: %s || Valor de imóvel: $%d,00 || Seguro de imóvel: %s || Veículos em seu nome: %d |---|",SimNao[pStats[playerid][Casa]],pStats[playerid][ValorCasa],SimNao[pStats[playerid][SeguroCasa]],GetQtVehicles(playerid));
		SendClientMessage(playerid, COLOR_LIGHT_YELLOW, string);
		if(pStats[playerid][Porte] == 0){
		    format(string,sizeof(string), "|---| Porte de armas CAT1: Não || Porte de armas CAT2: Não");
		}
		if(pStats[playerid][Porte] == 1){
		    format(string,sizeof(string), "|---| Porte de armas CAT1: Sim || Porte de armas CAT2: Não");
		}
		if(pStats[playerid][Porte] == 2){
		    format(string,sizeof(string), "|---| Porte de armas CAT1: Sim || Porte de armas CAT2: Sim");
		}
		format(string2,sizeof(string2), " || Passaporte: %s |---|",SimNao[pStats[playerid][Passaporte]]);
		strcat(string,string2);
		SendClientMessage(playerid, COLOR_LIGHT_YELLOW, string);
		if(pStats[playerid][HabTerrestre] == 0 && pStats[playerid][HabAerea] == 0 && pStats[playerid][HabNautica] == 0){
			SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "|---| Você não possui nenhuma habilitação para dirigir |---|");
		}
		else if(pStats[playerid][HabTerrestre] == 1 && pStats[playerid][HabAerea] == 0 && pStats[playerid][HabNautica] == 0){
			SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "|---| Você só possui a Habilitação Terrestre |---|");
		}
		else if(pStats[playerid][HabTerrestre] == 0 && pStats[playerid][HabAerea] == 1 && pStats[playerid][HabNautica] == 0){
			SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "|---| Você só possui a Habilitação Aérea |---|");
		}
		else if(pStats[playerid][HabTerrestre] == 0 && pStats[playerid][HabAerea] == 0 && pStats[playerid][HabNautica] == 1){
			SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "|---| Você só possui a Habilitação Naútica |---|");
		}
		else if(pStats[playerid][HabTerrestre] == 1 && pStats[playerid][HabAerea] == 1 && pStats[playerid][HabNautica] == 0){
			SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "|---| Você possui as Habilitações Terrestre e Aérea |---|");
		}
		else if(pStats[playerid][HabTerrestre] == 0 && pStats[playerid][HabAerea] == 1 && pStats[playerid][HabNautica] == 1){
			SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "|---| Você possui as Habilitações Náutica e Aérea |---|");
		}
		else if(pStats[playerid][HabTerrestre] == 1 && pStats[playerid][HabAerea] == 0 && pStats[playerid][HabNautica] == 1){
			SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "|---| Você possui as Habilitações Náutica e Terrestre |---|");
		}
		else if(pStats[playerid][HabTerrestre] == 1 && pStats[playerid][HabAerea] == 1 && pStats[playerid][HabNautica] == 1){
			SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "|---| Você possui todas as Habilitações |---|");
		}
		return 1;
    }
	if(strcmp(cmd, "/entregardocumentos", true) == 0) {
		new string[256];
	    new tmp[256];
	    new plid;
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_GRAY, "/entregardocumentos [ID/do/COP]");
			return 1;
		}
		plid = strval(tmp);
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador desconectado!");
		    return 1;
		}
		if(GetDistanceBetweenPlayers(playerid,plid) > 15){
		    SendClientMessage(playerid, COLOR_GRAY, "Fique mais próximo do jogador!");
		    return 1;
		}
		if(EntregouDocs[playerid] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Seus documentos não estão com você!");
		    return 1;
		}
		if(ComDocs[plid] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse policial já está checando os documentos de outro jogador, AGUARDE...");
			return 1;
		}
		EntregouDocs[playerid] = 1;
		ComDocs[plid] = 1;
		ReceiveDocs[playerid] = plid;
		GiveDocs[plid] = playerid;
		format(string,sizeof(string),"Documentos entregados para %s",PlayerName(plid));
		SendClientMessage(playerid, COLOR_JUIZ, string);
		format(string,sizeof(string),"%s lhe entregou seus documentos, para ve-los digite /verdocumentos",PlayerName(playerid));
		SendClientMessage(plid, COLOR_JUIZ, string);
		return 1;
	}
	if(strcmp(cmd, "/verdocumentos", true) == 0) {
		new string[256];
	   	new hab[5];
    	new prof;
	   	if(ComDocs[playerid] == 1){
   			if(IsPlayerConnected(GiveDocs[playerid])){
				if(!fexist(PlayerFile(PlayerName(GiveDocs[playerid])))){
				    SendClientMessage(playerid, COLOR_GRAY, "Sinto muito, um ERRO FATAL ocorreu!");
					format(string,sizeof(string),"%s não conseguiu ver os documentos de %s, MOTIVO: Arquivo não encontrado!",PlayerName(playerid),PlayerName(GiveDocs[playerid]));
					writelog(string);
					print(string);
					return 1;
				}

		    	hab[0] = pStats[GiveDocs[playerid]][HabTerrestre];
		    	hab[1] = pStats[GiveDocs[playerid]][HabNautica];
		    	hab[2] = pStats[GiveDocs[playerid]][HabAerea];
	           	hab[3] = pStats[GiveDocs[playerid]][Porte];
	           	hab[4] = pStats[GiveDocs[playerid]][Passaporte];
	           	prof = pStats[GiveDocs[playerid]][Prof];
				format(string, sizeof(string), "Identidade de: %s", PlayerName(GiveDocs[playerid]));
				SendClientMessage(playerid, COLOR_JUIZ, string);
				format(string, sizeof(string), "Skin :: %d", pStats[GiveDocs[playerid]][Skin]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Profissão de %s :: %s", PlayerName(GiveDocs[playerid]), ProfExtName[prof]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				if(hab[0] == 0){
				    SendClientMessage(playerid, COLOR_YELLOW, "Habilitação de Carros e Motos: NÃO");
				}
				if(hab[0] == 1){
				    SendClientMessage(playerid, COLOR_WHITE, "Habilitação de Carros e Motos: SIM");
				}
				if(hab[1] == 0){
   					SendClientMessage(playerid, COLOR_YELLOW, "Habilitação Náutica: NÃO");
				}
				if(hab[1] == 1){
				    SendClientMessage(playerid, COLOR_WHITE, "Habilitação Náutica: SIM");
				}
				if(hab[2] == 0){
			    	SendClientMessage(playerid, COLOR_YELLOW, "Habilitação Aérea: NÃO");
				}
				if(hab[2] == 1){
				    SendClientMessage(playerid, COLOR_WHITE, "Habilitação Aérea: SIM");
				}
   				if(hab[3] == 0){
				    SendClientMessage(playerid, COLOR_YELLOW, "Porte de armas CAT1: NÃO");
			    	SendClientMessage(playerid, COLOR_YELLOW, "Porte de armas CAT2: NÃO");
				}
				if(hab[3] == 1){
				    SendClientMessage(playerid, COLOR_WHITE,  "Porte de armas CAT1: SIM");
			   	 	SendClientMessage(playerid, COLOR_YELLOW, "Porte de armas CAT2: NÃO");
				}
				if(hab[3] == 2){
			    	SendClientMessage(playerid, COLOR_WHITE, "Porte de armas CAT1: SIM");
			    	SendClientMessage(playerid, COLOR_WHITE, "Porte de armas CAT2: SIM");
				}
				if(hab[4] == 0){
				    SendClientMessage(playerid, COLOR_YELLOW, "Passaporte: NÃO");
				}
				if(hab[4] == 1){
				    SendClientMessage(playerid, COLOR_WHITE, "Passaporte: SIM");
				}
				return 1;
			}
			else{
				SendClientMessage(playerid, COLOR_GRAY, "O jogador que lhe mostrou os documentos está desconectado!");
			}
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está com nenhum documento nas mãos!");
		}
		return 1;
	}
	if(strcmp(cmd, "/devolverdocumentos", true) == 0){
	    new string[256];
		if(ComDocs[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está com nenhum documento nas mãos!");
			return 1;
		}
		if(GetDistanceBetweenPlayers(playerid,GiveDocs[playerid]) > 10){
		    SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto do jogador para poder devolver os documentos!");
		    return 1;
		}
		format(string,sizeof(string),"Documentos devolvidos para %s",PlayerName(GiveDocs[playerid]));
		SendClientMessage(playerid, COLOR_JUIZ, string);
		format(string,sizeof(string),"%s lhe devolveu seus documentos!",PlayerName(playerid));
		SendClientMessage(GiveDocs[playerid], COLOR_JUIZ, string);
		EntregouDocs[GiveDocs[playerid]] = 0;
		ComDocs[playerid] = 0;
		GiveDocs[playerid] = -1;
		ReceiveDocs[playerid] = -1;
		return 1;
	}
    if(strcmp(cmd, "/plantarmilho", true) == 0) {
	    if(Profissao[playerid] == AGRICULTOR || IsPlayerAdmin(playerid)){
	        if(AreaFazenda[playerid] == 0){
	            SendClientMessage(playerid, COLOR_GRAY, "Você não está na FAZENDA.");
				return 1;
			}
			new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
			if(modelo != 532){
	            SendClientMessage(playerid, COLOR_GRAY, "Você não está em um Combine para plantar.");
				return 1;
			}
			if(FazendaInProgress[playerid] == 1){
			    SendClientMessage(playerid, COLOR_GRAY, "A colheita ainda não está pronta... AGUARDE.");
				return 1;
			}
			SendClientMessage(playerid, COLOR_AGRICULTOR, "Espere a colheita e o ensacamento para poder ir vender.");
		   	FazendaInProgress[playerid] = 1;
		   	if(weatherprevisao == 8 || weatherprevisao == 16){
		   	    SetTimerEx("Fazenda",30000,0,"d",playerid);
		   	    SendClientMessage(playerid, COLOR_AGRICULTOR, "Sorte sua, agora estamos em época de chuva, sua colheita irá sair mais rápido!");
			} else {
			  	SetTimerEx("Fazenda",60000,0,"d",playerid);
            }
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Você não tem permissão!");
			return 1;
		}
	}

	if(strcmp(cmd,"/vendermilho",true) == 0) {
	    if(Profissao[playerid] == AGRICULTOR || IsPlayerAdmin(playerid)){
		    if(AreaCoopFazenda[playerid] == 0){
		        SendClientMessage(playerid, COLOR_GRAY, "Você não está na Fazenda.");
				return 1;
			} else {
			    if(QtMilho[playerid] == 0){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem milho para vender.");
					return 1;
				} else {
				    new quantia,sacas;
				    quantia = minrand(60,150);
				    sacas = minrand(2,8);
				    new amount = floatround((quantia * sacas));
					new msg[256];
					format(msg, sizeof(msg),"Você vendeu %d sacas (100 Kg) de milho por $%d cada e faturou $%d com a venda.",sacas,quantia,amount);
					SendClientMessage(playerid,COLOR_AGRICULTOR,msg);
					AddPlayerMoney(playerid,amount,3);
					QtMilho[playerid] = 0;
					AcrescentarExPoints(playerid,1);
					if(JogadorContratado(playerid,11)) AcrescentarLucro(11,amount*2);
					return 1;
				}
			}
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Você não tem permissão para isso!");
			return 1;
		}
	}

	if(strcmp(cmd, "/tirarleite", true) == 0) {
	    if(Profissao[playerid] == AGRICULTOR || IsPlayerAdmin(playerid)){
	        if(Leite[playerid] == 0){
	            SendClientMessage(playerid, COLOR_GRAY, "Você não está no CURRAL.");
				return 1;
			} else {
			    if(LeiteInProgress[playerid] == 1){
				    SendClientMessage(playerid, COLOR_GRAY, "Você tá tirando o leite da vaca. Aguarde");
					return 1;
				} else {
					SendClientMessage(playerid, COLOR_AGRICULTOR, "Cê tá tirando o leite pera um pedaço aí.");
					SendClientMessage(playerid, COLOR_AGRICULTOR, "Cê já sai de baixo da vaca. Calminha sô!");
                    ApplyAnimation(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 1, 0, 0, 0);
					LeiteInProgress[playerid] = 1;
					SetTimerEx("LeiteA",36000,0,"d",playerid);
					return 1;
				}
            }
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Você não tem permissão!");
			return 1;
		}
	}

	if(strcmp(cmd,"/venderleite",true) == 0) {
	    if(Profissao[playerid] == AGRICULTOR || IsPlayerAdmin(playerid)){
		    if(AreaCoopFazenda[playerid] == 0){
		        SendClientMessage(playerid, COLOR_GRAY, "Você não está na Venda do Milho/Leite");
				return 1;
			} else {
			    if(QtLeite[playerid] == 0){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem leite para vender!");
					return 1;
				} else {
					new msg[256];
					new quantia;
					quantia = QtLeite[playerid]*200;
					format(msg, sizeof(msg),"Você vendeu %d engradados (%d Lts) de leite por $200 cada e faturou $%d com a venda.",QtLeite[playerid],QtLeite[playerid]*60,quantia);
					SendClientMessage(playerid,COLOR_AGRICULTOR,msg);
					AddPlayerMoney(playerid,quantia,3);
					QtLeite[playerid] = 0;
					AcrescentarExPoints(playerid,1);
					if(JogadorContratado(playerid,11)) AcrescentarLucro(11,quantia/2);
					return 1;
				}
			}
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Você não tem permissão para isso!");
			return 1;
		}
	}

   	if(strcmp(cmd, "/habaerea", true) == 0) {
	    if(Profissao[playerid] == INSTRUTOR || IsPlayerAdmin(playerid)){
		    new tmp[256];
		    new plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/habaero [id].");
				return 1;
			}
	        plid = strval(tmp);
			if(IsPlayerConnected(plid)){
			    pStats[plid][HabAerea] = 1;
			    SendClientMessage(playerid, COLOR_GREEN, "Habilitação de direção aerea concedida.");
			    SendClientMessage(plid, COLOR_GREEN, "Você recebeu a habilitação de direção aerea.");
			    AcrescentarExPoints(playerid,1);
				return 1;
			}
			else{
			    SendClientMessage(playerid, COLOR_GRAY, "ID inválido");
				return 1;
			}
		} else {
            SendClientMessage(playerid, COLOR_GRAY, "Você não está autorizado a executar este comando.");
			return 1;
		}
	}
	if(strcmp(cmd, "/agendarteste", true) == 0) {
		new tmp[256];
		new plid;
		tmp = strtok(cmdtext,idx);
		plid = strval(tmp);
		if(!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /agendarteste [id]");
		    return 1;
		}
		if(Profissao[plid] != INSTRUTOR){
		    SendClientMessage(playerid, COLOR_GRAY, "Você só pode agendar teste com um instrutor!");
		    return 1;
		}
		if(NaAgenda[playerid] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Você já agendou um teste!");
		    return 1;
		}
		if(AgendaTestes >= 7){
		    SendClientMessage(playerid, COLOR_GRAY, "A agenda está lotada! Espere o instrutor terminar o teste para apaga-la!");
		    return 1;
		}
		else{
			NaAgenda[playerid] = 1;
			Agendado[playerid] = AgendaTestes;
			AgendaTestes++;
			SendClientMessage(playerid, COLOR_GREEN, "Agendado... Digite /agendatestes para ver que está agendado!");
			new string[256];
			format(string,sizeof(string),"%s acabou de agendar um teste!",PlayerName(playerid));
			SendClientMessage(plid, COLOR_GREEN, string);
			return 1;
		}
	}
	if(strcmp(cmd, "/agendatestes", true) == 0){
	    if(AgendaTestes == 1){
			return SendClientMessage(playerid, COLOR_GRAY, "A agenda de testes está vazia!");
		}
		else{
		    SendClientMessage(playerid, COLOR_YELLOW, "Agenda de testes da auto-escola:");
	    	new string[256];
	    	for(new i=0; i<AgendaTestes; i++){
				for(new p=0; p<SLOTS2; p++){
					if(Agendado[p] == i && NaAgenda[p] == 1){
					    format(string,sizeof(string),"%d - %s",i,PlayerName(p));
					    SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/apagaragenda", true) == 0) {
	    if(AgendaTestes == 1){
			return SendClientMessage(playerid, COLOR_GRAY, "A agenda de testes está vazia!");
		}
		else{
		    AgendaTestes = 1;
			for(new p=0; p<SLOTS2; p++){
				NaAgenda[p] = 0;
				Agendado[p] = 0;
			}
			new string[256];
			format(string,sizeof(string),"%s apagou a agenda de testes da auto escola!",PlayerName(playerid));
			SendClientMessageToAll(COLOR_WHITE, string);
		}
		return 1;
	}

	if(strcmp(cmd, "/testeterrestre", true) == 0) {
	    if(Profissao[playerid] == INSTRUTOR || IsPlayerAdmin(playerid)){
			new tmp[256];
			new plid;
			new string[256];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/testeterrestre [id].");
				return 1;
			}
    	    plid = strval(tmp);
			if(IsPlayerConnected(plid)){
			    if(pStats[plid][HabTerrestre] != 1){
			        if(NoTeste[plid] == 0){
			            if(InstrutorOcupado[playerid] == 0){
						    if(GetDistanceBetweenPlayers(playerid,plid) > 20){
						       	SendClientMessage(playerid,COLOR_GRAY,"[AUTO ESCOLA] Para oferecer seus serviços é preciso que você esteje perto.");
								return 1;
							}
 							format(string, sizeof(string), "[AUTO ESCOLA] %s está lhe oferecendo o teste para habilitação terrestre. Custo: $800.", PlayerName(playerid));
	 						SendClientMessage(plid, COLOR_INSTRUTOR, string);
	 						SendClientMessage(plid, COLOR_INSTRUTOR, "[AUTO ESCOLA] Caso queira realizar o teste digite: /aceitar ou então /recusar para recusar.");
							SendClientMessage(playerid, COLOR_WHITE, "[AUTO ESCOLA] A proposta foi enviada. Aguarde resposta.");
							invitestatus[plid] = INVITE_HABTERRESTRE;
							envconvite[plid] = playerid;
							SetTimerEx("Cancelar",60000,0,"d",plid);
							return 1;
						} else {
						    SendClientMessage(playerid, COLOR_GRAY, "Você já está realizando um teste!");
						    return 1;
						}
					} else {
					    SendClientMessage(playerid, COLOR_GRAY, "Esse aprendiz já está realizando o teste.");
					    return 1;
					}
				} else {
				    SendClientMessage(playerid, COLOR_GRAY, "O Jogador já tem carteira.");
				    return 1;
				}
			} else {
			    SendClientMessage(playerid, COLOR_GRAY, "Jogador não logado.");
			    return 1;
			}
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão.");
		    return 1;
		}
	}

	if(strcmp(cmd,"/concordo",true) == 0){
	    new string[256];
		if(LiAsLeis[playerid] == 1){
        	KillTimer(TempoLeisTransito[playerid]);
            LiAsLeis[playerid] = 0;
			format(string, sizeof(string), "[AUTO-ESCOLA] %s concordou com as leis de trânsito. O Teste proseguirá...", PlayerName(playerid));
			SendClientMessage(InstrutorNovo[playerid], COLOR_RED2, string);
			SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Você concordou com as Leis de Los Santos, o teste proseguirá...");
			SetTimerEx("AvancoDirecao",6000,0,"dd",InstrutorNovo[playerid],playerid);
			return 1;
		}
	}

	if(strcmp(cmd,"/discordo",true) == 0){
	    new string[256];
		if(LiAsLeis[playerid] == 1){
	     	KillTimer(TempoLeisTransito[playerid]);
			NoTeste[playerid] = 0;
			InstrutorOcupado[InstrutorNovo[playerid]] = 0;
			LiAsLeis[playerid] = 0;
			format(string, sizeof(string), "[AUTO-ESCOLA] %s disconcordou das leis de trânsito. O teste dele foi cancelado!", PlayerName(playerid));
			SendClientMessage(InstrutorNovo[playerid], COLOR_RED2, string);
			SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Você disconcordou das Leis de Los Santos. Seu teste foi cancelado!");
			return 1;
		}
	}

	if(strcmp(cmd, "/habnautica", true) == 0) {
		if(Profissao[playerid] == INSTRUTOR || IsPlayerAdmin(playerid)){
			new tmp[256];
			new plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_GRAY, "/habnautica [id].");
			return 1;
			}
    	    plid = strval(tmp);
			if(IsPlayerConnected(plid)){
			    pStats[plid][HabNautica] = 1;
			    SendClientMessage(playerid, COLOR_GREEN, "Habilitação de direção náutica concedida.");
			    SendClientMessage(plid, COLOR_GREEN, "Você recebeu a habilitação de direção náutica.");
			    AcrescentarExPoints(playerid,1);
				return 1;
			}
			else{
			    SendClientMessage(playerid, COLOR_GRAY, "ID inválido");
				return 1;
			}
		} else {
            SendClientMessage(playerid, COLOR_GRAY, "Você não está autorizado a executar este comando.");
			return 1;
		}
	}

	if(strcmp(cmd, "/artaxi", true) == 0 && IsPlayerConnected(playerid)) {
        if(Profissao[playerid] == TAXI_AEREO){
			new tmp[256];
	    	new plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/artaxi [id]");
				return 1;
			}
        	plid = strval(tmp);
          	if((GetPlayerVehicleID(playerid) ==1 && GetPlayerVehicleID(plid) ==1 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)||(GetPlayerVehicleID(playerid) ==2 && GetPlayerVehicleID(plid) ==2 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)){
	            SendClientMessage(playerid, COLOR_TAXI_AEREO, "A viagem aérea começou a ser tarifada");
            	SendClientMessage(plid, COLOR_TAXI_AEREO, "A viagem aérea começou a ser tarifada");
                Taximetro[plid][0] = 1;
                Taximetro[plid][1] = playerid;
                AcrescentarExPoints(playerid,1);
				return 1;
			} else {
			    SendClientMessage(playerid, COLOR_GRAY, " Ei...você nao está pilotando um helicóptero de taxiaéreo.");
			    SendClientMessage(playerid, COLOR_GRAY, " Os helicópteros encontram-se ao lado da prefeitura.");
             	RemovePlayerFromVehicle(playerid);
				return 1;
			}
		} else {
			SendClientMessage(playerid, COLOR_GRAY, "Você não é piloto de taxi aéreo.");
			return 1;
		}
    }


	if(strcmp(cmd, "/passaporte", true) == 0) {
	    if(Profissao[playerid] == JUIZ || IsPlayerAdmin(playerid)){
		    new tmp[256];
		    new plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/passaporte[id]");
				return 1;
			}
	        plid = strval(tmp);
			if(IsPlayerConnected(plid)){
			    pStats[plid][Passaporte] = 1;
			   	SendClientMessage(playerid, COLOR_JUIZ, "Passaporte nacional concedido.");
			   	SendClientMessage(plid, COLOR_GREEN, "O Juiz lhe concedeu passaporte, agora você tem");
               	SendClientMessage(plid, COLOR_GREEN, "livre circulação alem dos limites de Los Santos.");
               	AcrescentarExPoints(playerid,1);
			   	return 1;
			} else {
			    SendClientMessage(playerid, COLOR_GRAY, "ID inválido");
				return 1;
			}
		} else {
			SendClientMessage(playerid, COLOR_GRAY, "Você não está autorizado a conceder porte de armas.");
			return 1;
		}
	}

	if (strcmp(cmd, "/ordem", true)==0){
		if(Profissao[playerid] == DELEGADO || IsPlayerAdmin(playerid)){
			new tmp[256];
			new string[256];
		    strmid(tmp, cmdtext, 8, strlen(cmdtext));
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/ordem [ qual ordem aos oficiais? ]");
				return 1;
			}
		    SendClientMessage(playerid, COLOR_DELEGADO, "Você enviou uma ordem aos policiais de Los Santos.");
		    for(new i=0; i<SLOTS2; i++){
		       if(Profissao[i] == COP_MILITAR || Profissao[i] == COP_RODOVIARIO ||Profissao[i] == JUIZ || Profissao[i] == COP_SWAT){
					format(string, sizeof(string), "O Delegado %s ordenou aos policiais: %s ", PlayerName(playerid), tmp);
					SendClientMessage(i, COLOR_COP_RODOVIARIO, string);
		        }
			}
			return 1;
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, " Ei... Você não é Delegado, sua profissão é outra");
    	}
	}

	if(strcmp(cmd, "/porte1", true) == 0) {
	    if(Profissao[playerid] == DELEGADO || IsPlayerAdmin(playerid)){
		    new tmp[256];
		    new plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/porte1 [id]");
				return 1;
			}
			if(pStats[plid][Porte] == 0){
		        plid = strval(tmp);
				if(IsPlayerConnected(plid)){
				    pStats[plid][Porte] = 1;
				    SendClientMessage(playerid, COLOR_DELEGADO, "Porte de armas CAT 1, Concedido.");
				    format(tmp,sizeof(tmp),"Você recebeu o Porte de Armas Categoria 1 ( leves ),pelo Delegado Sr. %s",PlayerName(playerid));
				    SendClientMessage(plid,COLOR_GREEN,tmp);
	                SendClientMessage(plid, COLOR_GREEN, "Digite /portedearmas e veja quais armas você pode usar.");
	                AcrescentarExPoints(playerid,1);
					return 1;
				} else {
				    SendClientMessage(playerid, COLOR_GRAY, "ID inválido");
					return 1;
				}
			} else {
	            SendClientMessage(playerid, COLOR_GRAY, "O Jogador já tem o Porte de Armas.");
				return 1;
			}
		} else {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não está autorizado a conceder porte de armas.");
			return 1;
		}
	}

	if(strcmp(cmd, "/porte2", true) == 0) {
	    if(Profissao[playerid] == DELEGADO || IsPlayerAdmin(playerid)){
		    new tmp[256];
		    new plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/porte2 [id]");
				return 1;
			}
			plid = strval(tmp);
			if(pStats[plid][Porte] == 1){
				if(IsPlayerConnected(plid)){
				    pStats[plid][Porte] = 2;
				    SendClientMessage(playerid, COLOR_DELEGADO, "Porte de armas CAT 2, Concedido.");
				    format(tmp,sizeof(tmp),"Você recebeu o Porte de Armas Categoria 2 ( pesadas ),pelo Delegado Sr. %s",PlayerName(playerid));
				    SendClientMessage(plid,COLOR_GREEN,tmp);
	                SendClientMessage(plid, COLOR_GREEN, "Digite /portedearmas e veja quais armas você pode usar.");
	                AcrescentarExPoints(playerid,1);
					return 1;
				} else {
				    SendClientMessage(playerid, COLOR_GRAY, "ID inválido");
					return 1;
				}
			} else {
	            SendClientMessage(playerid, COLOR_GRAY, "Ele já tem o Porte 2, ou não tem nenhum porte.");
				return 1;
			}
		} else {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não está autorizado a conceder porte de armas.");
			return 1;
		}
	}
	if(strcmp(cmd, "/removerporte1", true) == 0) {
	    if(Profissao[playerid] == DELEGADO || IsPlayerAdmin(playerid)){
		    new tmp[256];
		    new plid;
		    new string[256];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/removerporte1 [id]");
				return 1;
			}
			if(pStats[plid][Porte] == 1){
		        plid = strval(tmp);
				if(IsPlayerConnected(plid)){
				    pStats[plid][Porte] = 0;
				    SendClientMessage(playerid, COLOR_DELEGADO, "Porte de armas CAT 1, REMOVIDO");
					format(string, sizeof(string), "O Delegado Sr. %s cancelou o Porte de Armas Categoria 1 de %s.", PlayerName(playerid), PlayerName(plid));
					SendClientMessageToAll(COLOR_JUIZ, string);
					SendClientMessage(plid, COLOR_GREEN, "O Delegado removeu seu Porte de Categoria 1");
					return 1;
				} else {
				    SendClientMessage(playerid, COLOR_GRAY, "ID inválido");
					return 1;
				}
			} else {
	            SendClientMessage(playerid, COLOR_GRAY, "O Jogador não tem Porte de Armas Categoria 1.");
				return 1;
			}
		} else {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não está autorizado a conceder porte de armas.");
			return 1;
		}
	}

	if(strcmp(cmd, "/removerporte2", true) == 0) {
	    if(Profissao[playerid] == DELEGADO || IsPlayerAdmin(playerid)){
		    new tmp[256];
		    new plid;
		    new string[256];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/removerporte2 [id]");
				return 1;
			}
			if(pStats[plid][Porte] == 2){
		        plid = strval(tmp);
				if(IsPlayerConnected(plid)){
				    pStats[plid][Porte] = 0;
				    SendClientMessage(playerid, COLOR_DELEGADO, "Porte de armas CAT 2, REMOVIDO");
					format(string, sizeof(string), "O Delegado Sr. %s cancelou o Porte de Armas Categoria 2 de %s.", PlayerName(playerid), PlayerName(plid));
					SendClientMessageToAll(COLOR_JUIZ, string);
					SendClientMessage(plid, COLOR_GREEN, "O Delegado removeu seu Porte de Categoria 2");
					return 1;
				} else {
				    SendClientMessage(playerid, COLOR_GRAY, "ID inválido");
					return 1;
				}
			} else {
	            SendClientMessage(playerid, COLOR_GRAY, "O Jogador não tem Porte de Armas Categoria 2.");
				return 1;
			}
		} else {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não está autorizado a conceder porte de armas.");
			return 1;
		}
	}
 	if(strcmp(cmd, "/portedearmas", true) == 0) {
	    SendClientMessage(playerid, COLOR_GREEN, "Lista de armas permitidas em Los Santos-SA. São duas categorias armas leves e armas pesadas");
	    SendClientMessage(playerid, COLOR_GREEN, "qualquer cidadão de Los Santos que usar armas sem porte será preso, e aguardará o julgamento.");
	    SendClientMessage(playerid, COLOR_PALHA, "CAT1:armas leves: Pistola Colt 45 c/ ou sem silenciador,Country shotgun(de cano longo).");
	    SendClientMessage(playerid, COLOR_PALHA, "Desert eagle, Rifle.");
		SendClientMessage(playerid, COLOR_PALHA, "CAT2: AK47 Assault Rifle,M4 Assault Rifle,MP5,Combat Knife,SPAZ-12 Shotgun ");
    	SendClientMessage(playerid, COLOR_PALHA, "Decreto nº1925/2008 armas permitidas - DELEGADO: Texugo. Los Santos-SA");
		return 1;
	}
	if(strcmp(cmd,"/criarjornal",true)==0){
	    if(Profissao[playerid] != JORNALISTA && !IsPlayerAdmin(playerid)){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não é Jornalista!");
	        return 1;
		}
		if(LastJN >= MAX_JORNAIS){
			SendClientMessage(playerid, COLOR_GRAY, "O gamemode excedeu o limite de jornais...");
			return 1;
		}
		new tmp[256];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /criarjornal [título do jornal]");
			return 1;
		}
		if(pStats[playerid][Jornal] == 1){
	        SendClientMessage(playerid, COLOR_GRAY, "Você já tem um jornal!");
			return 1;
		}
		CriarJornal(playerid,tmp);
		return 1;
	}
	if(strcmp(cmd,"/escreverjornal",true)==0){
	    if(pStats[playerid][Jornal] == 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não tem jornal!");
			return 1;
		}
	    new tmp[256],linha,texto[256],titulo[256],caderno[256],c,jfile[256];
	    format(titulo,sizeof(titulo),pStats[playerid][TituloJornal]);
		caderno = strtok(cmdtext,idx);
		if(!compare(caderno,"Esportes") && !compare(caderno,"Homicidios") && !compare(caderno,"Mercadorias") && !compare(caderno,"Empresas") && !compare(caderno,"Outros")){
			SendClientMessage(playerid, COLOR_GRAY, "Caderno inválido, veja todos em \"/cadernos\"");
			SendClientMessage(playerid, COLOR_GRAY, "OBS: Não esqueça de digitar todas as letras maiúsculas e minúsculas corretamente!");
			return 1;
		}
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /escreverjornal [caderno] [linha] [texto]");
		    return 1;
		}
		linha = strval(tmp);
		if(linha <= 0 || linha >= 4){
		    SendClientMessage(playerid, COLOR_GRAY, "Linha de 1 à 3");
		    return 1;
		}
		if(compare(caderno,"Esportes")){
			strmid(texto,cmdtext,27,strlen(cmdtext));
			c=1;
		}
        else if(compare(caderno,"Homicidios")){
			strmid(texto,cmdtext,29,strlen(cmdtext));
			c=2;
		}
        else if(compare(caderno,"Mercadorias")){
			strmid(texto,cmdtext,30,strlen(cmdtext));
			c=3;
		}
        else if(compare(caderno,"Empresas")){
			strmid(texto,cmdtext,27,strlen(cmdtext));
			c=4;
		}
        else if(compare(caderno,"Outros")){
			strmid(texto,cmdtext,25,strlen(cmdtext));
			c=5;
		}
		if(strlen(texto) <= 0){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /escreverjornal [caderno] [linha] [texto]");
		    return 1;
		}
		if(strfind(texto,";",true) != -1){
 			SendClientMessage(playerid, COLOR_GRAY, "No texto não deve conter nenhum \";\"");
		    return 1;
		}
		set(jfile,JornalFile(titulo));
		if(!fexist(jfile)) return SendClientMessage(playerid, COLOR_GRAY, "Um erro foi encontrado...");
		if(c == 1){
			SendClientMessage(playerid, COLOR_WHITE, "Texto escrito no caderno de Esportes:");
   			if(linha == 1) 		set(jStats[GetJornalID(titulo)][CEsporte1],texto);
			else if(linha == 2) set(jStats[GetJornalID(titulo)][CEsporte2],texto);
			else if(linha == 3) set(jStats[GetJornalID(titulo)][CEsporte3],texto);
		}
		else if(c == 2){
		    SendClientMessage(playerid, COLOR_WHITE, "Texto escrito no caderno de Homicidios:");
		    if(linha == 1) 		set(jStats[GetJornalID(titulo)][CHomicidios1],texto);
			else if(linha == 2) set(jStats[GetJornalID(titulo)][CHomicidios2],texto);
			else if(linha == 3) set(jStats[GetJornalID(titulo)][CHomicidios3],texto);

		}
		else if(c == 3){
		    SendClientMessage(playerid, COLOR_WHITE, "Texto escrito no caderno de Mercadorias:");
		    if(linha == 1) 		set(jStats[GetJornalID(titulo)][CMercadorias1],texto);
			else if(linha == 2) set(jStats[GetJornalID(titulo)][CMercadorias2],texto);
			else if(linha == 3) set(jStats[GetJornalID(titulo)][CMercadorias3],texto);
		}
		else if(c == 4){
		    SendClientMessage(playerid, COLOR_WHITE, "Texto escrito no caderno de Empresas:");
		    if(linha == 1) 		set(jStats[GetJornalID(titulo)][CEmpresas1],texto);
			else if(linha == 2) set(jStats[GetJornalID(titulo)][CEmpresas2],texto);
			else if(linha == 3) set(jStats[GetJornalID(titulo)][CEmpresas3],texto);
		}
		else if(c == 5){
		    SendClientMessage(playerid, COLOR_WHITE, "Texto escrito no caderno de outras informações:");
            if(linha == 1) 		set(jStats[GetJornalID(titulo)][COutros1],texto);
			else if(linha == 2) set(jStats[GetJornalID(titulo)][COutros2],texto);
			else if(linha == 3) set(jStats[GetJornalID(titulo)][COutros3],texto);
		}
		SendClientMessage(playerid, COLOR_JUIZ, texto);
		return 1;
	}
	if(strcmp(cmd,"/lerjornal",true)==0){
		new tmp[256],titulo[256],caderno[256],str[256],string[256];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /lerjornal [titulo do jornal] [caderno]");
		    return 1;
		}
		set(titulo,tmp);
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /lerjornal [titulo do jornal] [caderno]");
			format(string,sizeof(string),"|==================| %s's Paper's - %s: |==================|",titulo,caderno);
			SendClientMessage(playerid, COLOR_ROSA, string);
			SendClientMessage(playerid, COLOR_YELLOW,"ºººººººººº Cadernos:");
	   		SendClientMessage(playerid, COLOR_WHITE, "ºººººººººº Esportes");
           	SendClientMessage(playerid, COLOR_RED2, "ºººººººººº Homicidios");
           	SendClientMessage(playerid, COLOR_CONTRABANDISTA, "ºººººººººº Mercadorias");
           	SendClientMessage(playerid, COLOR_GREEN, "ºººººººººº Empresas");
			SendClientMessage(playerid, COLOR_WHITE, "ºººººººººº Outros");
		    return 1;
		}
		set(caderno,tmp);
		set(str,JornalFile(titulo));
		if(!fexist(str)){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jornal não existe!");
		    return 1;
		}
		format(string,sizeof(string),"|==================| %s's Paper's - %s: |==================|",titulo,caderno);
		SendClientMessage(playerid, COLOR_ROSA, string);
		if(compare(caderno,"Esportes")){
		    if(!compare(jStats[GetJornalID(titulo)][CEsporte1],"NONE")) 		SendClientMessage(playerid, COLOR_WHITE, jStats[GetJornalID(titulo)][CEsporte1]);
			if(!compare(jStats[GetJornalID(titulo)][CEsporte2],"NONE")) 		SendClientMessage(playerid, COLOR_WHITE, jStats[GetJornalID(titulo)][CEsporte2]);
			if(!compare(jStats[GetJornalID(titulo)][CEsporte3],"NONE")) 		SendClientMessage(playerid, COLOR_WHITE, jStats[GetJornalID(titulo)][CEsporte3]);
		}
        else if(compare(caderno,"Homicidios")){
            if(!compare(jStats[GetJornalID(titulo)][CHomicidios1],"NONE")) 		SendClientMessage(playerid, COLOR_WHITE, jStats[GetJornalID(titulo)][CHomicidios1]);
			if(!compare(jStats[GetJornalID(titulo)][CHomicidios2],"NONE")) 		SendClientMessage(playerid, COLOR_WHITE, jStats[GetJornalID(titulo)][CHomicidios2]);
			if(!compare(jStats[GetJornalID(titulo)][CHomicidios3],"NONE"))  	SendClientMessage(playerid, COLOR_WHITE, jStats[GetJornalID(titulo)][CHomicidios3]);
		}
        else if(compare(caderno,"Mercadorias")){
            if(!compare(jStats[GetJornalID(titulo)][CMercadorias1],"NONE")) 	SendClientMessage(playerid, COLOR_CONTRABANDISTA, jStats[GetJornalID(titulo)][CMercadorias1]);
			if(!compare(jStats[GetJornalID(titulo)][CMercadorias2],"NONE"))		SendClientMessage(playerid, COLOR_CONTRABANDISTA, jStats[GetJornalID(titulo)][CMercadorias2]);
			if(!compare(jStats[GetJornalID(titulo)][CMercadorias3],"NONE"))		SendClientMessage(playerid, COLOR_CONTRABANDISTA, jStats[GetJornalID(titulo)][CMercadorias3]);
		}
        else if(compare(caderno,"Empresas")){
            if(!compare(jStats[GetJornalID(titulo)][CEmpresas1],"NONE")) 		SendClientMessage(playerid, COLOR_GREEN, jStats[GetJornalID(titulo)][CEmpresas1]);
			if(!compare(jStats[GetJornalID(titulo)][CEmpresas2],"NONE")) 		SendClientMessage(playerid, COLOR_GREEN, jStats[GetJornalID(titulo)][CEmpresas2]);
			if(!compare(jStats[GetJornalID(titulo)][CEmpresas3],"NONE")) 		SendClientMessage(playerid, COLOR_GREEN, jStats[GetJornalID(titulo)][CEmpresas3]);
		}
        else if(compare(caderno,"Outros")){
            if(!compare(jStats[GetJornalID(titulo)][COutros1],"NONE")) 			SendClientMessage(playerid, COLOR_WHITE, jStats[GetJornalID(titulo)][COutros1]);
			if(!compare(jStats[GetJornalID(titulo)][COutros2],"NONE")) 			SendClientMessage(playerid, COLOR_WHITE, jStats[GetJornalID(titulo)][COutros2]);
			if(!compare(jStats[GetJornalID(titulo)][COutros3],"NONE")) 			SendClientMessage(playerid, COLOR_WHITE, jStats[GetJornalID(titulo)][COutros3]);
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Caderno inexistente, veja todos em \"/cadernos\"");
		    return 1;
		}
		return 1;
	}
	if(strcmp(cmd,"/excluirjornal",true)==0){
	    ExcluirJornal(playerid);
	    return 1;
	}
	if(strcmp(cmd,"/ativarcamera",true)==0){
	    if(!IsPlayerInAnyVehicle(playerid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em um veículo de reportagem!");
		    return 1;
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 488){
		    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em um helicóptero de reportagem!");
		    return 1;
		}
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
		    SendClientMessage(playerid, COLOR_GRAY, "Para ativar a câmera você deve estar como passageiro e não como motorista...");
		    return 1;
		}
		if(CameraAtiva[playerid] == 1){
			SendClientMessage(playerid, COLOR_GRAY, "Sua camera está ativada...");
		    return 1;
		}
		CameraAtiva[playerid] = 1;
		Zoom[playerid] = 1;
		TempoFilmando[playerid] = SetTimerEx("Filmando",100,1,"d",playerid);
		TempoFilmando2[playerid] = SetTimerEx("Filmando2",120000,1,"d",playerid);
		TogglePlayerControllable(playerid,0);
		SendClientMessage(playerid, COLOR_JUIZ, "Camera ativada...");
		return 1;
	}
	if(strcmp(cmd,"/desativarcamera",true)==0){
		if(!CameraAtiva[playerid]) return SendClientMessage(playerid, COLOR_GRAY, "Sua camera nao esta ativada...");
		CameraAtiva[playerid] = 0;
		KillTimer(TempoFilmando[playerid]);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid,1);
		SendClientMessage(playerid, COLOR_JUIZ, "Camera desativada...");
		return 1;
	}
    if(strcmp(cmd,"/publicar",true)==0){
	    if(Profissao[playerid] == JORNALISTA || IsPlayerAdmin(playerid)){
	    	new tmp[256];
	    	new msg[256];
	    	strmid(tmp,cmdtext,9,strlen(cmdtext));
	    	if(!strlen(tmp)) {
	        	SendClientMessage(playerid,COLOR_GRAY,"/publicar [texto]");
				return 1;
			}
			if(!IsPlayerInAnyVehicle(playerid)){
			    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em um veículo de reportagem!");
			    return 1;
			}
			if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 488){
			    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em um helicóptero de reportagem!");
			    return 1;
			}
			if(JaAnunciou[playerid] == 1){
			    format(msg,sizeof(msg),"Anúncio publicado por %s",PlayerName(playerid));
			    SendClientMessageToAll(COLOR_YELLOW,msg);
			    GameTextForAll(tmp,5000,0);
			    return 1;
			} else {
			    format(msg,sizeof(msg),"Anúncio publicado por %s",PlayerName(playerid));
			    SendClientMessageToAll(COLOR_JORNALISTA,msg);
			    GameTextForAll(tmp,5000,0);
			    AcrescentarExPoints(playerid,1);
			    JaAnunciou[playerid] = 1;
			    SetTimerEx("Anunciou",300000,0,"d",playerid);
				return 1;
			}
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Você não tem permissão!");
			return 1;
		}
	}

	if(strcmp(cmd,"/noticia",true)==0){
	    if(Profissao[playerid] == JORNALISTA || IsPlayerAdmin(playerid)){
	    	new tmp[256];
	    	new msg[256];
	    	strmid(tmp,cmdtext,9,strlen(cmdtext));
	    	if(!strlen(tmp)) {
	        	SendClientMessage(playerid,COLOR_GRAY,"/noticia [texto]");
				return 1;
			}
			if(!IsPlayerInAnyVehicle(playerid)){
			    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em um veículo de reportagem!");
			    return 1;
			}
			if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 582 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 488){
			    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em um veículo/helicóptero de reportagem!");
			    return 1;
			}
			if(JaAnunciou[playerid] == 1){
			    format(msg,sizeof(msg),"Extra Extra! Notícias de San Andreas, %s informa:",PlayerName(playerid));
			    SendClientMessageToAll(COLOR_YELLOW,msg);
			    SendClientMessageToAll(COLOR_ROSA,tmp);
			    return 1;
			} else {
                format(msg,sizeof(msg),"Extra Extra! Notícias de San Andreas, %s informa:",PlayerName(playerid));
			    SendClientMessageToAll(COLOR_YELLOW,msg);
			    SendClientMessageToAll(COLOR_ROSA,tmp);
			    AcrescentarExPoints(playerid,1);
			    JaAnunciou[playerid] = 1;
			    SetTimerEx("Anunciou",300000,0,"d",playerid);
				return 1;
			}
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Você não tem permissão!");
			return 1;
		}
	}

	if(strcmp(cmd,"/propaganda",true)==0){
	    if(Profissao[playerid] == JORNALISTA || IsPlayerAdmin(playerid)){
	    	new tmp[256];
	    	strmid(tmp,cmdtext,12,strlen(cmdtext));
	    	if(!strlen(tmp)) {
	        	SendClientMessage(playerid,COLOR_GRAY,"/propaganda [texto]");
				return 1;
            }
			if(!IsPlayerInAnyVehicle(playerid)){
			    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em um veículo de reportagem!");
			    return 1;
			}
			if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 582 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 488){
			    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em um veículo/helicóptero de reportagem!");
			    return 1;
			}
			if(JaAnunciou[playerid] == 1){
			    SendClientMessageToAll(COLOR_YELLOW,"--Propagandas Jornal San News--");
			    SendClientMessageToAll(COLOR_ROSA,tmp);
			    return 1;
			} else {
			    SendClientMessageToAll(COLOR_YELLOW,"--Propagandas Jornal San News--");
			    SendClientMessageToAll(COLOR_ROSA,tmp);
			    AcrescentarExPoints(playerid,1);
			    JaAnunciou[playerid] = 1;
			    SetTimerEx("Anunciou",300000,0,"d",playerid);
				return 1;
			}
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Você não tem permissão!");
			return 1;
		}
	}
	if(strcmp(cmd,"/entrevistar", true) == 0){
	    if(Profissao[playerid] != JORNALISTA && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não é Jornalista!");
		new tmp[ 256 ] , plid, string[ 256 ];
		tmp=strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /entrevistar [id]");
		plid=strval(tmp);
		if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distance;
		GetPlayerPos(playerid,x,y,z);
		GetPlayerPos(plid,x2,y2,z2);
		distance=(x - x2 * x - x2 + y - y2 * y - y2 + z - z2 * z - z2);
		if(distance > 7) return SendClientMessage(playerid, COLOR_GRAY, "Fique mais próximo do jogador para entrevista-lo...");
		SendClientMessage(playerid, COLOR_JORNALISTA, "Aguarde o outro jogador ver se aceita dar entrevista...");
		format(string,256,"O jornalista %s está querendo lhe entrevistar, para aceitar dar entrevista digite /darentrevista, caso contrário /naodarentrevista",PlayerName(playerid));
		SendClientMessage(plid, COLOR_WHITE, string);
		Entrevista[plid][0]=1;
		Entrevista[plid][4]=playerid;
		return 1;
	}
	if(strcmp(cmd, "/darentrevista", true) == 0){
		if(Entrevista[playerid][0]==0) return SendClientMessage(playerid, COLOR_GRAY, "Nenhum jornalista está querendo lhe entrevistar!");
		new id=Entrevista[playerid][4],Float:x,Float:y,Float:z;
		AcrescentarExPoints(id,1);
		Entrevista[playerid][0]=0;
	    Entrevista[id][1]=1;
		Entrevista[playerid][2]=1;
		Entrevista[id][3]=playerid;
		Entrevista[playerid][4]=id;
		new string[256];
		format(string,sizeof(string),"[TV] Telespectadores, %s está dando uma entrevista ao-vivo na TV, ligue sua TV para assistir na íntegra.",PlayerName(playerid));
		SendClientMessageToAll(COLOR_JORNALISTA, string);
		SendClientMessage(id, COLOR_JORNALISTA, "O jogador aceitou dar entrevista...");
		SendClientMessage(playerid, COLOR_WHITE, "A entrevista começou...");
		TogglePlayerControllable(playerid,0);
		TogglePlayerControllable(id,0);
		GetPlayerPos(playerid,x,y,z);
		GetXYInFrontOfPlayer(playerid,x,y,0.7);
		CamEntrevista[playerid][0]=x;
		CamEntrevista[playerid][1]=y;
		CamEntrevista[playerid][2]=z+0.5;
		GetPlayerPos(playerid,x,y,z);
		CamEntrevista[playerid][3]=x;
		CamEntrevista[playerid][4]=y;
		CamEntrevista[playerid][5]=z+0.5;
		SetPlayerCameraPos(playerid,CamEntrevista[playerid][0],CamEntrevista[playerid][1],CamEntrevista[playerid][2]);
		SetPlayerCameraLookAt(playerid,CamEntrevista[playerid][3],CamEntrevista[playerid][4],CamEntrevista[playerid][5]);
		SetPlayerCameraPos(id,CamEntrevista[playerid][0],CamEntrevista[playerid][1],CamEntrevista[playerid][2]);
		SetPlayerCameraLookAt(id,CamEntrevista[playerid][3],CamEntrevista[playerid][4],CamEntrevista[playerid][5]);
		return 1;
	}
	if(strcmp(cmd,"/naodarentrevista", true) == 0){
	    if(Entrevista[playerid][0]==0) return SendClientMessage(playerid, COLOR_GRAY, "Nenhum jornalista está querendo lhe entrevistar!");
	    new id=Entrevista[playerid][4];
	    Entrevista[playerid][0]=0;
	    SendClientMessage(playerid, COLOR_WHITE, "Entrevista recusada...");
	    SendClientMessage(id, COLOR_GRAY, "O jogador se recusou a dar entrevista...");
	    return 1;
	}
	if(strcmp(cmd,"/terminarentrevista", true) == 0){
	    if(Entrevista[playerid][1] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está entrevistando ninguém...");
	    new id=Entrevista[playerid][3];
	    Entrevista[id][0]=0;
	    Entrevista[playerid][1]=0;
	    Entrevista[id][2]=0;
	    TogglePlayerControllable(playerid,1);
		TogglePlayerControllable(id,1);
		SetCameraBehindPlayer(playerid);
		SetCameraBehindPlayer(id);
		SendClientMessageSpectators(playerid, COLOR_JUIZ, "A entrevista acaba por aqui, obrigado queridos telespectadores...");
		SendClientMessageSpectators(id, COLOR_WHITE, "A entrevista acaba por aqui, obrigado queridos telespectadores...");
		SendClientMessage(playerid, COLOR_JORNALISTA, "Fim da entrevista...");
		SendClientMessage(id, COLOR_WHITE, "A entrevista acabou, a Empresa de Jornalismo Virtual Life lhe agradece...");
		return 1;
	}
	if(strcmp(cmd,"/anunciaremprego", true) == 0){
	    new tmp[256];
	    new plid;
	    new propriedade;
	    new salario;
	    new profissao;
     	tmp = strtok(cmdtext,idx);
     	plid = strval(tmp);
		if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_GRAY, "USO: /anunciaremprego [id/do/jornalista] [id/da/propriedade] [salario] [profissao/a/oferecer]");
			return 1;
		}
		tmp = strtok(cmdtext,idx);
		propriedade = strval(tmp);
		if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_GRAY, "USO: /anunciaremprego [id/do/jornalista] [id/da/propriedade] [salario] [profissao/a/oferecer]");
			return 1;
		}
		tmp = strtok(cmdtext,idx);
		salario = strval(tmp);
		if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_GRAY, "USO: /anunciaremprego [id/do/jornalista] [id/da/propriedade] [salario] [profissao/a/oferecer]");
			return 1;
		}
		tmp = strtok(cmdtext,idx);
		profissao = strval(tmp);
		if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_GRAY, "USO: /anunciaremprego [id/do/jornalista] [id/da/propriedade] [salario] [profissao/a/oferecer]");
			return 1;
		}
		if(Profissao[plid] != JORNALISTA){
			SendClientMessage(playerid, COLOR_GRAY, "Ele não é Jornalista.");
			return 1;
		}
		if(propriedade < 0 || propriedade > MAX_PROPERTIE_ID){
		    SendClientMessage(playerid, COLOR_GRAY, "Propriedade inválida! Use /propriedades para ver as propriedades disponíveis.");
			return 1;
		}
		if(!DonoDaPropriedade(playerid,propriedade)){
			SendClientMessage(playerid, COLOR_GRAY, "Você não é o dono dessa propriedade!");
			return 1;
		}
		if(PropriedadeLotada(propriedade)){
		    SendClientMessage(playerid, COLOR_GRAY, "Você já contratou o máximo de funcionários para essa propriedade!");
			return 1;
		}
		if(GetPlayerMoney(playerid) < 250){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro o suficiente, o anuncio custa $250.");
			return 1;
		}
		else{
		    new string[256];
    		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
			SetTimerEx("AcaoEspecial",6000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
			SetPlayerSpecialAction(plid,SPECIAL_ACTION_USECELLPHONE);
			SetTimerEx("AcaoEspecial",6000,0,"dd",plid,SPECIAL_ACTION_STOPUSECELLPHONE);
			SendClientMessage(playerid, COLOR_YELLOW, "Anuncio mandado para todos jornalistas.");
       		format(string,sizeof(string),"O Dono da empresa %s está pedindo o anuncio do emprego %s no valor de %d.",PlayerName(playerid),ProfExtName[profissao], salario);
			SendClientMessage(plid, COLOR_JORNALISTA, string);
			SendClientMessage(plid, COLOR_JORNALISTA, "Para aceitar o anuncio digite /aceitaranuncio e para recusar digite /recusaranuncio.");
			JornalistaAvisado[plid] = 1;
			iemprego[0] = propriedade;
			iemprego[1] = salario;
			iemprego[2] = profissao;
			Proposteiro[plid] = playerid;
			return 1;
		}
	}
	if(strcmp(cmd,"/aceitaranuncio",true)==0){
	    if(Profissao[playerid] == JORNALISTA || IsPlayerAdmin(playerid)){
			if(JornalistaAvisado[playerid] == 1){
			    new msg[256];
			    SendClientMessageToAll(COLOR_WHITE, "  ");
			    format(msg,sizeof(msg),"New Paper's Life: %s contrata %s com o salário inicial de $%d. Quem estiver interessado procure o Jornalista, ele irá lhe guia.",NomesPropriedades[iemprego[0]],ProfExtName[iemprego[2]],iemprego[1]);
			    SendClientMessageToAll(COLOR_YELLOW,msg);
			    SendClientMessageToAll(COLOR_WHITE, "  ");
			    AddPlayerMoney(Proposteiro[playerid],-300,-1);
			    AddPlayerMoney(playerid,300,3);
			    JornalistaAvisado[playerid] = 0;
			    return 1;
			} else {
			    SendClientMessage(playerid, COLOR_GRAY, "Não foi solicitado nenhum anúncio de emprego");
				return 1;
			}
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Jornalista.");
			return 1;
		}
	}
	if(strcmp(cmd,"/recusaranuncio",true)==0){
	    if(Profissao[playerid] == JORNALISTA || IsPlayerAdmin(playerid)){
			if(JornalistaAvisado[playerid] == 1){
			    SendClientMessage(playerid, COLOR_JORNALISTA, "Anúncio de empregos recusado.");
				JornalistaAvisado[playerid] = 0;
				return 1;
			} else {
			    SendClientMessage(playerid, COLOR_GRAY, "Não foi solicitado nenhum anúncio de emprego");
				return 1;
			}
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Jornalista.");
			return 1;
		}
	}

	if(strcmp(cmd, "/defesa", true) == 0) {
		new string[256];
	    new tmp[256];
	    new plid;
	    new pagamento;
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_GRAY, "/defesa [id] [ quantia ex:5000 ]");
			return 1;
		}
		plid = strval(tmp);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_GRAY, "/defesa [id] [ quantia ex:5000 ]");
			return 1;
		}
 		pagamento = strval(tmp);
        if(Profissao[plid] == ADVOGADO){
 			if(pagamento > GetPlayerMoney(plid) || pagamento <= 0){
				SendClientMessage(playerid, COLOR_GRAY, "Você não tem esse dinheiro! Verifique se tem no banco esta quantia");
				return 1;
			}
 			if(IsPlayerConnected(plid)){
 			    AddPlayerMoney(plid, pagamento/3, 3);
 			    AddPlayerMoney(playerid, 0-pagamento, -1);
    	        SendClientMessage(playerid, COLOR_GREEN, "Pagamento feito.");
				format(string, sizeof(string), "Você defendeu o réu e cobrou pela causa $%d  e recebeu $%d pelos seus honorários", pagamento, pagamento/3);
				SendClientMessage(plid, COLOR_GREEN, string);
				AcrescentarExPoints(playerid,1);
				return 1;
			}
			else{
				SendClientMessage(playerid, COLOR_GRAY, "O jogador não está conectado!");
				return 1;
			}
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, " Ei... Ele não é advogado");
		    return 1;
		}
	}

	if(strcmp(cmd, "/advogado", true)==0){
 		SendClientMessage(playerid, COLOR_ADVOGADO, "Um dos advogados de Los Santos, ira lhe defender no Tribunal.");
   		for(new i=0; i<SLOTS2; i++){
     		if(IsPlayerConnected(i) && Profissao[i] == ADVOGADO || IsPlayerAdmin(i)){
     		    new string[256];
				format(string, sizeof(string), "[ESCRITORIO] %s solicita um advogado, por favor atenda-o.", PlayerName(playerid));
				SendClientMessage(i, COLOR_ADVOGADO, string);
				return 1;
			}
			return 1;
		}
	}

	if(strcmp(cmd, "/processo", true)==0){
		if(Profissao[playerid] == ADVOGADO || IsPlayerAdmin(playerid)){
		    if(!IsHaveProf(JUIZ)) return SendClientMessage(playerid, COLOR_GRAY, "Nenhum juiz conectado no servidor...");
			new tmp[256];
			new string[256];
		    strmid(tmp, cmdtext, 10, strlen(cmdtext));
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/processo [ nome do reu e descrição da causa ]");
				return 1;
			}
			SendClientMessage(playerid, COLOR_ADVOGADO, "Você fez a defesa do seu cliente e o processo está em andamento, aguarde a sentença do juiz");
			format(string, sizeof(string), "[TRIBUNAL] Excelentissímo. O Dr.%s entrou com um petição em defesa do réu %s ", PlayerName(playerid), tmp);
			SendClientMessageToAll(COLOR_JUIZ, string);
			AcrescentarExPoints(playerid,1);
			return 1;
		} else {
			SendClientMessage(playerid, COLOR_GRAY, " Ei...você não é advogado,sua profissao é outra");
			return 1;
		}
	}

	if(strcmp(cmd, "/definirpreco", true) == 0) {
		new tmp[256],selectedcar,value,carname[40],string[256];
		tmp = strtok(cmdtext,idx);
		if(strcmp("Infernus",tmp,true) == 0){
			selectedcar = 0;
			carname = "Infernus";
		}
		else if(strcmp("Turismo",tmp,true) == 0){
		    selectedcar = 1;
			carname = "Turismo";
		}
		else if(strcmp("Sultan",tmp,true) == 0){
		    selectedcar = 2;
			carname = "Sultan";
		}
		else if(strcmp("Sabre",tmp,true) == 0){
			selectedcar = 3;
			carname = "Sabre";
		}
		else if(strcmp("Phoenix",tmp,true) == 0){
            selectedcar = 4;
			carname = "Phoenix";
		}
		else if(strcmp("Cheetah",tmp,true) == 0){
		    selectedcar = 5;
			carname = "Cheetah";
		}
		else if(strcmp("FCR-900",tmp,true) == 0){
		    selectedcar = 6;
			carname = "FCR-900";
		}
		else if(strcmp("NRG-500",tmp,true) == 0){
		    selectedcar = 7;
			carname = "NRG-500";
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "USO: /definirpreco [carro] [preco]");
			SendClientMessage(playerid, COLOR_GRAY, "CARROS: Infernus, Turismo, Sultan, Sabre, Phoenix, Cheetah, FCR-900, NRG-500");
			return 1;
		}
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /definirpreco [carro] [preco]");
			SendClientMessage(playerid, COLOR_GRAY, "CARROS: Infernus, Turismo, Sultan, Sabre, Phoenix, Cheetah, FCR-900, NRG-500");
			return 1;
		}
		value = strval(tmp);
		if(value < 500 || value > 5000){
		    SendClientMessage(playerid, COLOR_GRAY, "Valor de $500,00 até $5000,00 dólares");
		    return 1;
		}
		CarPrice[selectedcar] = value;
		format(string,sizeof(string),"Você definiu o preço do veículo %s para $%d,00 dólares",carname,value);
		SendClientMessage(playerid, COLOR_LOCADOR_DE_CARROS, string);
		return 1;
	}
	if(strcmp(cmd, "/alugueis", true) == 0) {
	    new string[256];
	    SendClientMessage(playerid, COLOR_RED2, "Preço dos veículos para alugar:");
	    format(string,sizeof(string),"Infernus: $%d,00 dólares",CarPrice[0]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    format(string,sizeof(string),"Turismo: $%d,00 dólares",CarPrice[1]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    format(string,sizeof(string),"Sultan: $%d,00 dólares",CarPrice[2]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    format(string,sizeof(string),"Sabre: $%d,00 dólares",CarPrice[3]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    format(string,sizeof(string),"Phoenix: $%d,00 dólares",CarPrice[4]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    format(string,sizeof(string),"Cheetah: $%d,00 dólares",CarPrice[5]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    format(string,sizeof(string),"FCR-900: $%d,00 dólares",CarPrice[6]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    format(string,sizeof(string),"NRG-500: $%d,00 dólares",CarPrice[7]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    return 1;
	}
    if(strcmp(cmd, "/alugarcarro", true) == 0) {
      	if(Profissao[playerid] == LOCADOR_DE_CARROS || IsPlayerAdmin(playerid)){
	        new tmp[256];
    	    new plid,car,msg[256];
	        tmp = strtok(cmdtext, idx);
	        plid = strval(tmp);

			if(!strlen(tmp)){
		    	SendClientMessage(playerid, COLOR_GRAY,"USO: /alugarcarro [id]");
				return 1;
			}
			if(Profissao[plid] == LOCADOR_DE_CARROS){
		    	SendClientMessage(playerid, COLOR_GRAY,"Você é vendedor não pode alugar para você!");
				return 1;
			}
			if(JogadorNoCarro[plid] != 1){
				SendClientMessage(playerid,COLOR_GRAY, "Ele não está no carro, peça para ele entra no carro a se alugado!");
				return 1;
			}
	  		if(TempoAlugar[plid] > 0 && CarroAlugado[plid] == 1){
				SendClientMessage(playerid,COLOR_GRAY, "Ele já está com um carro alugado!");
				return 1;
			}
			if(!IsPlayerConnected(plid)){
	        	SendClientMessage(playerid,COLOR_GRAY,"Jogador não conectado/logado");
				return 1;
			}
			if(GetDistanceBetweenPlayers(playerid,plid) > 20){
			    SendClientMessage(playerid,COLOR_GRAY,"Você está muito longe, chegue mais perto!");
				return 1;
			}
			car = GetPlayerVehicleID(plid);
			if(GetPlayerMoney(plid) < AluguelPreco(car)){
			    format(msg,sizeof(msg),"O jogador não tem dinheiro, Custo: $%d,00 dólares",AluguelPreco(car));
			    SendClientMessage(playerid, COLOR_GRAY, msg);
			    return 1;
			}
			else {
				SendClientMessage(plid, COLOR_GREEN, "Alguem está lhe oferecendo o carro que você está,");
				SendClientMessage(plid, COLOR_GREEN, "se quiser alugá-lo, digite: '/alugar' se não: '/naoalugar'");
                format(msg,sizeof(msg),"Valor do aluguel: $%d,00 dólares",AluguelPreco(car));
                SendClientMessage(plid, COLOR_WHITE, msg);
				OferecerCarro[plid] = 1;
				SendClientMessage(playerid, COLOR_LOCADOR_DE_CARROS, "Espere o jogador digitar /alugar para concretizar a oferta.");
				AluguelFornecedor[plid] = playerid;
				AluguelCarro[plid] = car;
				return 1;
			}
		}
	}
	if(strcmp(cmd, "/alugar", true) == 0){
	    if(OferecerCarro[playerid] == 1){
	        new string[256];
	        CarroAlugado[playerid] = 1;
	        OferecerCarro[playerid] = 0;
	        TempoAlugar[playerid] = 1;
	        TogglePlayerControllable(playerid, 1);
	        SendClientMessage(playerid, COLOR_GREEN, "Você alugou o carro, corra porque o tempo está passando!");
	        format(string, sizeof(string), "O Jogador %s aceitou sua oferta e com isso você recebeu $1000 pela locação.",PlayerName(playerid));
	        SendClientMessageCarros(COLOR_LOCADOR_DE_CARROS, string);
	        AddPlayerMoney(playerid, -AluguelPreco(AluguelCarro[playerid]), -1);
	        AddPlayerMoney(AluguelFornecedor[playerid], AluguelPreco(AluguelCarro[playerid]), 3);
	        AluguelFornecedorName[playerid] = PlayerName(AluguelFornecedor[playerid]);
	        AluguelTempo[playerid] = SetTimerEx("TempoAlugando",300000,0,"d",playerid);
	        AcrescentarExPoints(playerid,1);
	        AluguelCarro[playerid] = -1;
	        return 1;
		}
		if(OferecerCarro[playerid] == 0){
	        SendClientMessage(playerid, COLOR_GREEN, "Ninguém está lhe oferencendo um carro nesse momento!!");
	        return 1;
	    }
	}
	if(strcmp(cmd, "/naoalugar", true) == 0){
	    if(OferecerCarro[playerid] == 1){
	        OferecerCarro[playerid] = 0;
	        AluguelCarro[playerid] = -1;
	        SendClientMessage(playerid, COLOR_GREEN, "Pronto! Você não alugou o carro!");
			RemovePlayerFromVehicle(playerid);
	        TogglePlayerControllable(playerid, 1);
	        return 1;
	    }
		if(OferecerCarro[playerid] == 0){
	        SendClientMessage(playerid, COLOR_GREEN, "Ninguém está lhe oferencendo um carro nesse momento!!");
	        return 1;
	    }
	}
	if(strcmp(cmd, "/continuaraluguel", true) == 0){
		if(AluguelContinuar[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Nenhuma proposta para continuar o aluguel foi oferecida a você...");
			return 1;
		}
		TogglePlayerControllable(playerid, 1);
	    AddPlayerMoney(playerid, -AluguelPreco(AluguelCarro[playerid]), -1);
	    AluguelTempo[playerid] = SetTimerEx("TempoAlugando",300000,0,"d",playerid);
	    SendClientMessage(playerid,COLOR_LOCADOR_DE_CARROS,"Mais 5 minutos contados no relógio, começando a partir de agora!");
		if(IsStringAName(AluguelFornecedorName[playerid])){
		    new id = IDName(AluguelFornecedorName[playerid]),msg[256];
		    format(msg,sizeof(msg),"O jogador %s continuou com o aluguel por mais 5 minutos e você recebeu mais $%d,00 dólares!",PlayerName(playerid),AluguelPreco(AluguelCarro[playerid]));
			SendClientMessage(id,COLOR_LOCADOR_DE_CARROS,msg);
			AddPlayerMoney(id,AluguelPreco(AluguelCarro[playerid]),3);
			AcrescentarExPoints(id,1);
		}
		return 1;
	}
	if(strcmp(cmd, "/naocontinuaraluguel", true) == 0){
	    if(AluguelContinuar[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Nenhuma proposta para continuar o aluguel foi oferecida a você...");
			return 1;
		}
	    if(IsPlayerInVehicle(playerid,AluguelCarro[playerid])) RemovePlayerFromVehicle(playerid);
	    SetVehicleToRespawn(AluguelCarro[playerid]);
	    TempoAlugar[playerid] = 0;
		CarroAlugado[playerid] = 0;
    	OferecerCarro[playerid] = 0;
    	AluguelCarro[playerid] = -1;
    	TogglePlayerControllable(playerid, 1);
		SendClientMessage(playerid,COLOR_LOCADOR_DE_CARROS,"OK, você não continuou com o aluguel do veículo...");
		return 1;
	}
	if(strcmp(cmd, "/saircarro", true) == 0){
	    if(JogadorNoCarro[playerid] == 1){
	        SendClientMessage(playerid, COLOR_GREEN, "Saiu do carro de aluguel/à venda!");
			RemovePlayerFromVehicle(playerid);
	        TogglePlayerControllable(playerid, 1);
	        return 1;
	    }
		if(JogadorNoCarro[playerid] == 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Não está no carro de aluguel/à venda!!");
	        return 1;
	    }
	}

	if(strcmp(cmd, "/transportar", true) == 0) {
		if(Profissao[playerid] == TRANSPORTE_DE_VALORES || IsPlayerAdmin(playerid)){
			if(AreaForte[playerid] == 1){
				new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
				if(modelo == 428){
				   if(Carga[playerid] == 0){
						TogglePlayerControllable(playerid,0);
						GameTextForPlayer(playerid, "~w~Colocando ~n~a ~n~~g~Grana ...",10000,0);
				    	SendClientMessage(playerid,COLOR_TRANSPORTE_DE_VALORES, "Aguarde......");
				    	SetTimerEx("EnchendoCarroForte",10000,0,"d",playerid);
						return 1;
					} else {
				       	SendClientMessage(playerid,COLOR_GRAY,"Carro Forte Carregado");
						return 1;
					}
				} else {
				    SendClientMessage(playerid,COLOR_GRAY,"Você não está em um CARRO FORTE");
					return 1;
				}
			} else {
	            SendClientMessage(playerid, COLOR_GRAY, "Você não está na área de carga");
				return 1;
			}
	    } else {
	        SendClientMessage(playerid,COLOR_GRAY,"Você não tem permissão!");
	    	return 1;
	    }
	}
	if(strcmp(cmd,"/pegargrana",true) == 0){
	    if(Profissao[playerid] == TRANSPORTE_DE_VALORES || IsPlayerAdmin(playerid)){
	    	if(Carga[playerid] == 1){
				new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
				if(modelo == 428){
				    if(PegarGrana[playerid] == 0){
				        SendClientMessage(playerid, COLOR_TRANSPORTE_DE_VALORES, "Você pegou a grana, ao sair do veículo terá 30 segundos para depositar a grana no banco e voltar ao veículo.");
						PegarGrana[playerid] = 1;
						return 1;
					} else {
				        SendClientMessage(playerid,COLOR_GRAY,"Você já pegou a grana.");
						return 1;
					}
				} else {
				    SendClientMessage(playerid,COLOR_GRAY,"Você não está em um CARRO FORTE");
					return 1;
				}
	   	   	} else {
	            SendClientMessage(playerid, COLOR_GRAY, "Seu CARRO FORTE não está carregado.");
				return 1;
			}
	    } else {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão.");
			return 1;
		}
	}
	if(strcmp(cmd,"/depositargrana",true) == 0){
	    new msg[256];
	    if(Profissao[playerid] == TRANSPORTE_DE_VALORES || IsPlayerAdmin(playerid)){
	        if(AreaBanco[playerid] == 1){
	            if(Carga[playerid] == 0){
	                SendClientMessage(playerid,COLOR_GRAY,"Seu veículo não tem grana!");
					return 1;
				}
				if(PegarGrana[playerid] == 0){
	                SendClientMessage(playerid,COLOR_GRAY,"Você não pegou o malote de grana.");
					return 1;
				} else {
				    Carga[playerid] = 0;
				    new grana,porc;
				    new string[256];
				    KillTimer(EntregandoGrana[playerid]);
				    porc = minrand(240,600);
                    grana = minrand(10000,200000);
				    Carga[playerid] = 0;
				    PegarGrana[playerid] = 0;
					format(string, sizeof(string), "Você depositou $%d com sucesso", grana);
					SendClientMessage(playerid,COLOR_COP_MILITAR, string);
					AddPlayerMoney(playerid, porc, 3);
    			    AcrescentarExPoints(playerid,1);
    			    if(JogadorContratado(playerid,4)) AcrescentarLucro(4,porc/3);
					return 1;
				}
			} else {
				SendClientMessage(playerid,COLOR_GRAY,"Você não está em nenhum BANCO");
				return 1;
			}
		} else {
	        SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão para isso!");
	        format(msg,sizeof(msg),"%s usou o comando /depositargrana sem ser transportador.",PlayerName(playerid));
	        writelog(msg);
			return 1;
		}
	}

	if(strcmp(cmd, "/escolta", true) == 0) {
	    if(Profissao[playerid] == TRANSPORTE_DE_VALORES || IsPlayerAdmin(playerid)){
	   		if(Carga[playerid] == 1){
	       	    new string[256];
				new valor = minrand(15000,100000);
	       	    SetTimerEx("AcaoEspecial",1,0,"dd",playerid,SPECIAL_ACTION_USECELLPHONE);
            	SetTimerEx("AcaoEspecial",6000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
				SendClientMessage(playerid, COLOR_TRANSPORTE_DE_VALORES, "Escolta solicitada!");
				format(string,sizeof(string),"[CENTRAL] Oficiais, Transportador de Valores %s pendido escolta na entrada de Los Santos. [Carga avaliada em: $%s]", PlayerName(playerid),valor);
				SendClientMessageToAll(COLOR_COP_SWAT,string);
				return 1;
			}
		}
	}

	if(strcmp(cmd, "/reforco", true) == 0) {
	    if(Profissao[playerid] == COP_MILITAR || Profissao[playerid] == EXERCITO || Profissao[playerid] == COP_RODOVIARIO || Profissao[playerid] == COP_SWAT || Profissao[playerid] == COP_NARCOTICOS || Profissao[playerid] == DELEGADO || IsPlayerAdmin(playerid)){
            new string[256];
            SetTimerEx("AcaoEspecial",1,0,"dd",playerid,SPECIAL_ACTION_USECELLPHONE);
	        SetTimerEx("AcaoEspecial",6000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
			SendClientMessage(playerid, COLOR_COP_SWAT, "[CENTRAL] Positivo oficial, reforço solicitado. Aguarde.");
			format(string,sizeof(string),"[CENTRAL] Todas as unidades, Oficial solicitando reforço, todas as unidades rápido [Oficial: %s].",PlayerName(playerid));
			SendClientMessagePolicia(COLOR_COP_SWAT, string);
			ApplyAnimation(playerid,"PED", "phone_out", 4.0, 0, 0, 0, 0, 0);
			new rand = random(5);
			if(rand == 3){
			    SendClientMessageToAll(COLOR_ROSA,"New Paper's Life:");
			    SendClientMessageToAll(COLOR_COP_SWAT,"[JORNAL] Um Soldado da Polícia de Los Santos está precisando de reforços. Curiosos já estão no local.");
			}
			return 1;
		}
	}
	if(strcmp(cmd, "/confiscarcelular", true) == 0) {
	    if(Profissao[playerid] == COP_MILITAR || Profissao[playerid] == EXERCITO || Profissao[playerid] == COP_RODOVIARIO || Profissao[playerid] == COP_SWAT || Profissao[playerid] == COP_NARCOTICOS || Profissao[playerid] == DELEGADO || IsPlayerAdmin(playerid)){
	        new tmp[256];
	        new plid;
	        tmp = strtok(cmdtext,idx);
	        plid = strval(tmp);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAY, "USO: /confiscarcelular [id]");
				return 1;
			}
			if(!IsPlayerConnected(plid)){
			    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está conectado!");
			    return 1;
			}
			if(GetDistanceBetweenPlayers(playerid,plid) > 7){
			    SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto!");
			    return 1;
			}
			if(pStats[plid][PhoneNumb] == 0){
		    	SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não tem celular!");
		    	return 1;
			}
			if(pStats[plid][GCell] == 1){
		    	SendClientMessage(playerid, COLOR_GRAY, "O celular desse jogador está guardado, peça para ele pega-lo!");
		    	return 1;
			}
			else{
        		for(new p=1000; p<LastPN; p++){
        		    if(strcmp(PlayerName(plid),CelularesNum[p-1000],true) == 0){
						new string[256];
						set(CelularesNum[p-1000],"NONE");
						format(string, sizeof(string), "[CENTRAL COP] O Oficial da Políca Sr %s rendeu %s e confiscou seu CELULAR.",PlayerName(playerid),PlayerName(plid));
						SendClientMessageToAll(COLOR_JUIZ, string);
						format(string, sizeof(string), "Senhor Juiz averigue e tome par do processo e verifique se %s roubou algum celular.",PlayerName(plid));
						SendClientMessageToAll(COLOR_JUIZ, string);
						pStats[plid][PhoneNumb] = 0;
					}
				}
				return 1;
			}
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não faz parte do departamento de policia!");
		    return 1;
		}
	}
	if(strcmp(cmd, "/rastrear", true) == 0) {
	    if(Profissao[playerid] != COP_SWAT && Profissao[playerid] != EXERCITO && Profissao[playerid] != DELEGADO && !IsPlayerAdmin(playerid)){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não trabalha no departamento policial!");
	        return 1;
		}
	    new tmp[256], plid;
	    tmp = strtok(cmdtext,idx);
	    plid = strval(tmp);
	    if(!strlen(tmp)){
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /rastrear [id]");
	        return 1;
		}
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador desconectado!");
		    return 1;
		}
		if(!Logado[plid]){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador tem que estar logado!");
		    return 1;
		}
		if(!fexist(PlayerFile(PlayerName(plid)))){
		    SendClientMessage(playerid, COLOR_GRAY, "UM ERRO OCORREU!!!");
		    return 1;
		}
		if(Rastreado[plid] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Um oficial já está rastreando os veículos desse jogador!");
		    return 1;
		}
		if(pStats[plid][LastVeh] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não possui nenhum veículo!");
		    return 1;
		}
		if(Rastreando[playerid] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Você já está rastreando um veículo!");
		    return 1;
		}
		new veh = -1;
		for(new v = 0; v < pStats[plid][LastVeh]; v++){
			if(GetVehicles[plid][v] != -1 && JaDestruido[GetVehicles[plid][v]] == 0){
   				veh = GetVehicles[plid][v];
				break;
			}
		}
		if(veh == -1){
	    	SendClientMessage(playerid, COLOR_GRAY, "Nenhum veículo encontrado, todos parecem estar vendidos ou destruídos!");
	    	return 1;
		}
		new Float:X,Float:Y,Float:Z,string[256];
		GetVehiclePos(veh,X,Y,Z);
		SetPlayerCheckpoint(playerid,X,Y,Z,3.0);
		CheckpointStatus[playerid] = RASTREAMENTO;
		Rastreador[playerid] = plid;
		Rastreando[playerid] = 1;
		VeiculoRastreando[playerid] = 1;
		Rastreado[plid] = 1;
		Rastreador2[plid] = playerid;
		format(string,sizeof(string),"%s está rastreando seus veículos",PlayerName(playerid));
		SendClientMessage(plid, COLOR_COP_SWAT, string);
		SendClientMessage(playerid, COLOR_COP_SWAT, "Rastreador ativado no veículo de ID 1, para alterar pressione:");
		SendClientMessage(playerid, COLOR_PALHA, "Num Lock 4: Veículo de ID anterior.");
		SendClientMessage(playerid, COLOR_PALHA, "Num Lock 6: Veículo de ID inferior.");
		return 1;
	}
	if(strcmp(cmd, "/desativarrastreador", true) == 0) {
	    if(!Rastreando[playerid]){
	        SendClientMessage(playerid, COLOR_GRAY, "Seu rastreador está desativado!");
	        return 1;
		}
		DesativarRastreador(playerid);
		return 1;
	}
	if(strcmp(cmd, "/algemar", true) == 0) {
	    if(Profissao[playerid] != COP_MILITAR && Profissao[playerid] != COP_RODOVIARIO && Profissao[playerid] != COP_SWAT && Profissao[playerid] != EXERCITO && Profissao[playerid] != COP_NARCOTICOS && Profissao[playerid] != DELEGADO) return SendClientMessage(playerid, COLOR_GRAY, "Você não trabalha no departamento de polícia.");
	    if(Algemou[playerid]==1) return SendClientMessage(playerid, COLOR_GRAY, "Você já algemou alguém...");
	    new tmp[256],plid,string[256];
	    tmp=strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /algemar [id]");
		plid=strval(tmp);
		if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
		if(PodeAlgemar[playerid][plid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem autorização para algemar esse jogador...");
		new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez;
		GetPlayerPos(playerid,x,y,z);
		GetPlayerPos(plid,x2,y2,z2);
		distancex = x - x2;
		distancey = y - y2;
		distancez = z - z2;
		if(floatround(distancex) < 2 && floatround(distancex) > -2 && floatround(distancey) < 2 && floatround(distancey) > -2 && floatround(distancez) < 2 && floatround(distancez) > -2){
		    TogglePlayerControllable(plid,0);
		    Algemado[plid]=1;
			Algemou[playerid]=1;
			AlgemaInfo[plid][0]=playerid;
		    AlgemaInfo[playerid][1]=plid;
		    SendClientMessage(playerid, COLOR_COP_SWAT, "Jogador algemado...");
		    SendClientMessage(playerid, COLOR_JUIZ, "Comandos: /chutar /levantar /empurrar /levar /largar /pornocarro /tirardocarro");
		    format(string,256,"Você foi algemado pelo oficial Sr. %s",PlayerName(playerid));
		    SendClientMessage(plid, COLOR_GRAY, string);
		    return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto do jogador para algema-lo");
		    return 1;
		}
	}
	if(strcmp(cmd, "/chutar", true) == 0) {
	    if(Profissao[playerid] == ASSASSINO){
	        if(Amarrou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não amarrou ninguém...");
	        new plid=AmarradoInfo[playerid][1];
	        if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
	        new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez,Float:getdistance,Float:newx,Float:newy;
	        GetPlayerPos(playerid,x,y,z);
	        GetXYInFrontOfPlayer(playerid,x,y,0.3);
			GetPlayerPos(plid,x2,y2,z2);
			distancex=x-x2;
			distancey=y-y2;
			distancez=z-z2;
			getdistance=(distancex*distancex+distancey*distancey+distancez*distancez);
			if(getdistance<3){
			    GetXYInFrontOfPlayer(playerid,newx,newy,0.4);
				SetPlayerPos(plid,newx,newy,z+0.2);
				new Float:h;
			    GetPlayerHealth(plid,h);
				if(h > 5) SetPlayerHealth(plid,h-3);
				else SetPlayerHealth(plid,3);
				GameTextForPlayer(playerid,"~w~toma...",2000,4);
				GameTextForPlayer(playerid,"~r~] uii doeu ]",2000,4);
		    	ApplyAnimation(playerid,"FIGHT_D","FightD_1",4.1,0,1,1,1,1);
		    	ApplyAnimation(plid,"FIGHT_C","HitC_3",4.1,0,1,1,1,1);
		    	return 1;
			} else {
			    SendClientMessage(playerid, COLOR_GRAY, "O jogador deve estar na sua frente...");
			    return 1;
			}
		} else {
        	if(Algemou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não algemou ninguém...");
	        new plid=AlgemaInfo[playerid][1];
	        if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
	        new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez,Float:getdistance,Float:newx,Float:newy;
	        GetPlayerPos(playerid,x,y,z);
	        GetXYInFrontOfPlayer(playerid,x,y,0.3);
			GetPlayerPos(plid,x2,y2,z2);
			distancex=x-x2;
			distancey=y-y2;
			distancez=z-z2;
			getdistance=(distancex*distancex+distancey*distancey+distancez*distancez);
			if(getdistance<3){
			    GetXYInFrontOfPlayer(playerid,newx,newy,0.4);
				SetPlayerPos(plid,newx,newy,z+0.2);
				new Float:h;
			    GetPlayerHealth(plid,h);
				if(h > 5) SetPlayerHealth(plid,h-3);
				else SetPlayerHealth(plid,3);
				GameTextForPlayer(playerid,"~w~toma...",2000,4);
				GameTextForPlayer(playerid,"~r~] uii doeu ]",2000,4);
		    	ApplyAnimation(playerid,"FIGHT_D","FightD_1",4.1,0,1,1,1,1);
		    	ApplyAnimation(plid,"FIGHT_C","HitC_3",4.1,0,1,1,1,1);
		    	return 1;
			} else{
			    SendClientMessage(playerid, COLOR_GRAY, "O jogador deve estar na sua frente...");
			    return 1;
			}
		}
	}
	if(strcmp(cmd, "/levantar", true) == 0) {
	    if(Profissao[playerid] == ASSASSINO){
	        if(Amarrou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não amarrou ninguém...");
	        new plid=AmarradoInfo[playerid][1];
	        if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
	        new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez,Float:getdistance;
	        GetPlayerPos(playerid,x,y,z);
	        GetXYInFrontOfPlayer(playerid,x,y,0.3);
			GetPlayerPos(plid,x2,y2,z2);
			distancex=x-x2;
			distancey=y-y2;
			distancez=z-z2;
			getdistance=(distancex*distancex+distancey*distancey+distancez*distancez);
			if(getdistance<3){
				TogglePlayerControllable(plid,1);
				ClearAnimations(plid);
				TogglePlayerControllable(plid,0);
			    SendClientMessage(playerid, COLOR_ASSASSINO, "Jogador levantado...");
			    SendClientMessage(plid, COLOR_ASSASSINO, "O sequestrador te levantou...");
		    	return 1;
			} else {
			    SendClientMessage(playerid, COLOR_GRAY, "O jogador deve estar na sua frente...");
			    return 1;
			}
		} else {
        	if(Algemou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não algemou ninguém...");
	        new plid=AlgemaInfo[playerid][1];
	        if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
	        new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez,Float:getdistance;
	        GetPlayerPos(playerid,x,y,z);
	        GetXYInFrontOfPlayer(playerid,x,y,0.3);
			GetPlayerPos(plid,x2,y2,z2);
			distancex=x-x2;
			distancey=y-y2;
			distancez=z-z2;
			getdistance=(distancex*distancex+distancey*distancey+distancez*distancez);
			if(getdistance<3){
				TogglePlayerControllable(plid,1);
				ClearAnimations(plid);
				TogglePlayerControllable(plid,0);
			    SendClientMessage(playerid, COLOR_COP_SWAT, "Jogador levantado...");
			    SendClientMessage(plid, COLOR_COP_SWAT, "O policial te levantou...");
		    	return 1;
			} else{
			    SendClientMessage(playerid, COLOR_GRAY, "O jogador deve estar na sua frente...");
			    return 1;
			}
		}
	}
	if(strcmp(cmd, "/empurrar", true) == 0) {
		if(Profissao[playerid] == ASSASSINO){
	        if(Amarrou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não amarrou ninguém...");
	        new plid=AmarradoInfo[playerid][1];
	        if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
	        new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez,Float:getdistance,Float:newx,Float:newy;
	        GetPlayerPos(playerid,x,y,z);
	        GetXYInFrontOfPlayer(playerid,x,y,0.3);
			GetPlayerPos(plid,x2,y2,z2);
			distancex=x-x2;
			distancey=y-y2;
			distancez=z-z2;
			getdistance=(distancex*distancex+distancey*distancey+distancez*distancez);
			if(getdistance<3){
			    GetXYInFrontOfPlayer(playerid,newx,newy,0.7);
				SetPlayerPos(plid,newx,newy,z);
				SendClientMessage(playerid, COLOR_ASSASSINO, "Empurrado...");
				SendClientMessage(plid, COLOR_ASSASSINO, "O sequestrador te empurrou!");
				ApplyAnimation(playerid,"CHOPPA","CHOPPA_Pushes",4.1,0,1,1,1,1);
		    	return 1;
			}
			else{
			    SendClientMessage(playerid, COLOR_GRAY, "O jogador deve estar na sua frente...");
			    return 1;
			}
		} else {
        	if(Algemou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não algemou ninguém...");
       		new plid=AlgemaInfo[playerid][1];
	    	if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
	    	new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez,Float:getdistance,Float:newx,Float:newy;
	        GetPlayerPos(playerid,x,y,z);
	        GetXYInFrontOfPlayer(playerid,x,y,0.3);
			GetPlayerPos(plid,x2,y2,z2);
			distancex=x-x2;
			distancey=y-y2;
			distancez=z-z2;
			getdistance=(distancex*distancex+distancey*distancey+distancez*distancez);
			if(getdistance<3){
			    GetXYInFrontOfPlayer(playerid,newx,newy,0.7);
				SetPlayerPos(plid,newx,newy,z);
				SendClientMessage(playerid, COLOR_JUIZ, "Empurrado...");
				SendClientMessage(plid, COLOR_JUIZ, "O policial lhe empurrou");
				ApplyAnimation(playerid,"CHOPPA","CHOPPA_Pushes",4.1,0,1,1,1,1);
		    	return 1;
			}
			else{
			    SendClientMessage(playerid, COLOR_GRAY, "O jogador deve estar na sua frente...");
			    return 1;
			}
		}
	}
	if(strcmp(cmd, "/levar", true) == 0) {
		if(Profissao[playerid] == ASSASSINO){
	        if(Amarrou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não amarrou ninguém...");
			new plid=AmarradoInfo[playerid][1];
			if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
	        new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez,Float:getdistance;
	        GetPlayerPos(playerid,x,y,z);
	        GetXYInFrontOfPlayer(playerid,x,y,0.3);
			GetPlayerPos(plid,x2,y2,z2);
			distancex=x-x2;
			distancey=y-y2;
			distancez=z-z2;
			getdistance=(distancex*distancex+distancey*distancey+distancez*distancez);
			if(getdistance<3){
			    SendClientMessage(playerid, COLOR_JUIZ, "OK... Leve esse jogador próximo à um veículo policial para coloca-lo nele...");
			    SendClientMessage(playerid, COLOR_COP_SWAT, "/largar para largar o jogador...");
				LevandoJogador[playerid] = 1;
			    TimerLevando[playerid]=SetTimerEx("LevarJogador",300,1,"dd",playerid,plid);
		    	return 1;
			}
			else{
			    SendClientMessage(playerid, COLOR_GRAY, "O jogador deve estar na sua frente...");
			    return 1;
			}
		} else {
			if(Algemou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não algemou ninguém...");
			new plid=AlgemaInfo[playerid][1];
			if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
	        new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez,Float:getdistance;
	        GetPlayerPos(playerid,x,y,z);
	        GetXYInFrontOfPlayer(playerid,x,y,0.3);
			GetPlayerPos(plid,x2,y2,z2);
			distancex=x-x2;
			distancey=y-y2;
			distancez=z-z2;
			getdistance=(distancex*distancex+distancey*distancey+distancez*distancez);
			if(getdistance<3){
			    SendClientMessage(playerid, COLOR_JUIZ, "OK... Leve esse jogador próximo à um veículo policial para coloca-lo nele...");
			    SendClientMessage(playerid, COLOR_COP_SWAT, "/largar para largar o jogador...");
				LevandoJogador[playerid] = 1;
			    TimerLevando[playerid]=SetTimerEx("LevarJogador",300,1,"dd",playerid,plid);
		    	return 1;
			}
			else{
			    SendClientMessage(playerid, COLOR_GRAY, "O jogador deve estar na sua frente...");
			    return 1;
			}
		}
	}
	if(strcmp(cmd, "/largar", true) == 0) {
		if(Profissao[playerid] == ASSASSINO){
	        if(Amarrou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não amarrou ninguém...");
			new plid=AmarradoInfo[playerid][1];
			if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
			if(LevandoJogador[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está levando nenhum jogador...");
			LevandoJogador[playerid] = 0;
			KillTimer(TimerLevando[playerid]);
			SendClientMessage(playerid, COLOR_COP_SWAT, "Feito...");
			return 1;
		} else {
	    	if(Algemou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não algemou ninguém...");
			new plid=AlgemaInfo[playerid][1];
			if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
			if(LevandoJogador[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está levando nenhum jogador...");
			LevandoJogador[playerid] = 0;
			KillTimer(TimerLevando[playerid]);
			SendClientMessage(playerid, COLOR_COP_SWAT, "Feito...");
			return 1;
		}
	}
	if(strcmp(cmd, "/pornocarro", true) == 0) {
		if(Profissao[playerid] == ASSASSINO){
	        if(Amarrou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não amarrou ninguém...");
			new plid=AmarradoInfo[playerid][1];
			if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
			if(LevandoJogador[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está levando nenhum jogador...");
			if(GetDistancePlayerToCar(plid,5)==0 || GetCopCars[plid]==INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_GRAY, "Esse jogador deve estar próximo à um veículo.");
			new rand=random(2)+2;
			PutPlayerInVehicle(plid,GetPlayerCars[plid],rand);
			GetPlayerCars[plid]=INVALID_VEHICLE_ID;
			KillTimer(TimerLevando[playerid]);
			SendClientMessage(playerid, COLOR_GRAY, "Ele foi colocado no carro, leve-o para o cativeiro, siga o CheckPoint no radar...");
			SendClientMessage(plid, COLOR_GRAY, "Você foi colocado no veículo, acho que ele está te levando para o Cativeiro.");
			//SetPlayerCheckpoint(playerid, X,Y,Z,4.0);
			return 1;
		} else {
        	if(Algemou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não algemou ninguém...");
			new plid=AlgemaInfo[playerid][1];
			if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
			if(LevandoJogador[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está levando nenhum jogador...");
			if(GetDistanceToCopCars(plid,5)==0 || GetCopCars[plid]==INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_GRAY, "Esse jogador deve estar próximo à um veículo policial...");
			new rand=random(2)+2;
			PutPlayerInVehicle(plid,GetCopCars[plid],rand);
			GetCopCars[plid]=INVALID_VEHICLE_ID;
			LevandoJogador[playerid]=0;
			KillTimer(TimerLevando[playerid]);
			SendClientMessage(playerid, COLOR_COP_SWAT, "Jogador colocado no veículo, leve-o para a Delegacia, siga o CheckPoint no radar...");
			SendClientMessage(plid, COLOR_GRAY, "Você foi colocado no veículo policial...");
			SetPlayerRaceCheckpoint(playerid,1,1535.4200,-1666.4794,13.3828,0.0,0.0,0.0,4.0);
			EntregandoPrisioneiro[playerid]=1;
			return 1;
		}
	}
	if(strcmp(cmd, "/tirardocarro", true) == 0) {
		if(Profissao[playerid] == ASSASSINO){
	        if(Amarrou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não amarrou ninguém...");
			new plid=AmarradoInfo[playerid][1];
			if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
	        if(!IsPlayerInAnyVehicle(plid)) return SendClientMessage(playerid, COLOR_GRAY, "O jogador não está em um veículo...");
			SendClientMessage(playerid, COLOR_GRAY, "O jogador foi tirado do carro!");
			SendClientMessage(plid, COLOR_GRAY, "Você foi tirado do veículo.");
			RemovePlayerFromVehicle(plid);
			return 1;
		} else {
        	if(Algemou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não algemou ninguém...");
			new plid=AlgemaInfo[playerid][1];
			if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
	        if(!IsPlayerInAnyVehicle(plid)) return SendClientMessage(playerid, COLOR_GRAY, "O jogador não está em um veículo...");
			SendClientMessage(playerid, COLOR_COP_SWAT, "Jogador tirado do veículo, leve-o para a Delegacia, siga o CheckPoint no radar...");
			SendClientMessage(plid, COLOR_GRAY, "Você foi tirado do veículo policial...");
			RemovePlayerFromVehicle(plid);
			return 1;
		}
	}
	if(strcmp(cmd, "/desalgemar", true) == 0) {
		if(Algemou[playerid]==0) return SendClientMessage(playerid, COLOR_GRAY, "Você não algemou ninguém...");
		new tmp[256],plid,string[256];
		tmp=strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /desalgemar [id]");
		plid=strval(tmp);
		if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
		if(AlgemaInfo[playerid][1] != plid || AlgemaInfo[plid][0] != playerid) return SendClientMessage(playerid, COLOR_GRAY, "Você não algemou esse jogador...");
        new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez;
		GetPlayerPos(playerid,x,y,z);
		GetPlayerPos(plid,x2,y2,z2);
		distancex = x - x2;
		distancey = y - y2;
		distancez = z - z2;
		if(floatround(distancex) < 2 && floatround(distancex) > -2 && floatround(distancey) < 2 && floatround(distancey) > -2 && floatround(distancez) < 2 && floatround(distancez) > -2){
		    TogglePlayerControllable(plid,1);
		    Algemado[plid]=0;
			Algemou[playerid]=0;
			LevandoJogador[playerid]=0;
			GetCopCars[plid]=INVALID_VEHICLE_ID;
			AlgemaInfo[plid][0]=-1;
		    AlgemaInfo[playerid][1]=-1;
		    SendClientMessage(playerid, COLOR_COP_SWAT, "Algemas removidas do jogador");
		    format(string,256,"O oficial Sr. %s removeu suas algemas, está livre...",PlayerName(playerid));
		    SendClientMessage(plid, COLOR_COP_SWAT, string);
		    return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto do jogador para desalgema-lo");
		    return 1;
		}
	}
	if(strcmp(cmd, "/desamarrar", true) == 0) {
		new tmp[256],plid,string[256];
		tmp=strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /desamarrar [id]");
		plid=strval(tmp);
		if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
        new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez;
		GetPlayerPos(playerid,x,y,z);
		GetPlayerPos(plid,x2,y2,z2);
		distancex = x - x2;
		distancey = y - y2;
		distancez = z - z2;
		if(floatround(distancex) < 2 && floatround(distancex) > -2 && floatround(distancey) < 2 && floatround(distancey) > -2 && floatround(distancez) < 2 && floatround(distancez) > -2){
			Sequestro[plid] = 0;
			Cativeiro[plid] = 0;
			CelularBloqueado[plid] = 0;
			TogglePlayerControllable(plid,1);
		    Amarrado[plid]=0;
			Amarrou[playerid]=0;
			AmarradoInfo[plid][0]=-1;
		    AmarradoInfo[playerid][1]=-1;
		    SendClientMessage(playerid, COLOR_GRAY, "Desamarrado e libertado.");
		    format(string,256,"%s te desamarrou, aconselho CORRER!!!",PlayerName(playerid));
		    SendClientMessage(plid, COLOR_GRAY, string);
		    return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto do jogador para desamarra-lo");
		    return 1;
		}
	}

	if(strcmp(cmd, "/prender", true) == 0) {
	    if(Profissao[playerid] == COP_MILITAR || Profissao[playerid] == EXERCITO || Profissao[playerid] == COP_RODOVIARIO || Profissao[playerid] == COP_SWAT || Profissao[playerid] == COP_NARCOTICOS || Profissao[playerid] == DELEGADO || IsPlayerAdmin(playerid)){
	    	new tmp[256];
	    	new plid;
	    	new distancia;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/prender [id]");
				return 1;
			}
        	plid = strval(tmp);
			if(IsPlayerConnected(plid) && Logado[plid] == 1){
	    		distancia = GetDistanceBetweenPlayers(playerid, plid);
			    if(distancia > 15){
			        SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto!");
					return 1;
				}
				if(GetPlayerState(plid) == PLAYER_STATE_DRIVER){
				    SendClientMessage(playerid, COLOR_GRAY, "Ele não pode estar dirigindo.");
				    return 1;
				} else {
					if(fexist(PlayerFile(PlayerName(plid)))){
						Prisioneiro[playerid] = plid;
						TogglePlayerControllable(playerid,0);
						ShowMenuForPlayer(MotivosPrisao,playerid);
 						return 1;
					}
					else{
						printf("ERRO: Não foi realizada a prisão de %s",PlayerName(plid));
						printf("O arquivo do jogador não foi encontrado");
						return 0;
					}
				}
			}
			else{
    	        SendClientMessage(playerid, COLOR_GRAY, "Jogador não está conectado/logado");
				return 1;
			}
		} else {
			SendClientMessage(playerid, COLOR_GRAY, "Você não faz parte do departamento de policia!");
			return 1;
		}
	}

	if(strcmp(cmd, "/confiscarchaves", true) == 0) {
	    if(Profissao[playerid] == COP_MILITAR || Profissao[playerid] == EXERCITO || Profissao[playerid] == COP_RODOVIARIO || Profissao[playerid] == COP_SWAT || Profissao[playerid] == COP_NARCOTICOS || Profissao[playerid] == DELEGADO || IsPlayerAdmin(playerid)){
			new tmp[256];
			new plid;
			new qtchave;
			tmp = strtok(cmdtext,idx);
			plid = strval(tmp);
			if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /confiscarchaves [id]");
			if(GetDistanceBetweenPlayers(playerid,plid) > 5) return SendClientMessage(playerid, COLOR_GRAY, "Fique mais próximo do jogador!");
			for(new i=0; i<MAX_CASAS; i++){
			    if(compare(pckStats[i][Chave],PlayerName(playerid)) == 0 && compare(pckStats[i][PickupDono],PlayerName(playerid))){
					qtchave++;
					set(pckStats[i][Chave],pckStats[i][PickupDono]);
				}
			}
			new string[256];
			format(string,sizeof(string),"Quantidade de chaves roubadas encontradas com esse jogador: %d",qtchave);
			SendClientMessage(playerid, COLOR_COP_SWAT, string);
			SendClientMessage(playerid, COLOR_COP_SWAT, "Chaves devolvidas aos donos...");
			SendClientMessage(plid, COLOR_COP_SWAT, "Suas chaves roubadas foram confiscadas por um policial!");
			return 1;
		}
		else return SendClientMessage(playerid, COLOR_GRAY, "Você não faz parte do departamento de policia!");
	}

	if(strcmp(cmd, "/entregar", true) == 0) {
	    if(SeEntregando[playerid] == 1){
	        new string[256];
 			KillTimer(TempoPreso[playerid]);
			format(string,sizeof(string),"Você se entregou ao oficial Sr: %s, ele vai ler seus Direitos",PlayerName(PolicialApreendendo[playerid]));
            SendClientMessage(playerid, COLOR_COP_SWAT, string);
		    SeEntregando[playerid] = 0;
            SetTimerEx("PrendendoJogador",5000,0,"dd",PolicialApreendendo[playerid],playerid);
            return 1;
        } else {
            SendClientMessage(playerid, COLOR_GRAY, "Não há nenhum mandato contra você");
			return 1;
		}
	}

	if(strcmp(cmd, "/naoentregar", true) == 0) {
	    if(SeEntregando[playerid] == 1){
	        new string[256];
	        KillTimer(TempoPreso[playerid]);
	        Motivo[playerid] = 9;
	        pStats[playerid][MotivoPrisao] = 9;
	        pStats[playerid][Wanted]++;
	        if(pStats[playerid][Wanted] > 6) pStats[playerid][Wanted] = 6;
	        SetPlayerWantedLevel(playerid,pStats[playerid][Wanted]);
			SendClientMessage(playerid, COLOR_COP_SWAT, "Você não se entregou e seu nome foi automaticamente colocado na lista de procurados com base na Lei Estadual Nº5473/2.");
	        format(string, sizeof(string), "O Suspeito %s foi colocado na lista de procurados pelo oficial: %s",PlayerName(playerid),PlayerName(PolicialApreendendo[playerid]));
			SendClientMessageToAll(COLOR_COP_SWAT,string);
			SeEntregando[playerid] = 0;
			return 1;
        } else {
            SendClientMessage(playerid, COLOR_GRAY, "Não há nenhum mandato contra você");
			return 1;
		}
	}
	if(strcmp(cmd, "/fiscalizarveiculo", true) == 0) {
	    if(Profissao[playerid] != COP_MILITAR && Profissao[playerid] != COP_RODOVIARIO && Profissao[playerid] != COP_SWAT && Profissao[playerid] != EXERCITO && Profissao[playerid] != DELEGADO) return SendClientMessage(playerid, COLOR_GRAY, "Você não trabalha para o departamento de polícia!");
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
		if(compare(vStats[GetPlayerVehicleID(playerid)][VDono],"Servidor")) return SendClientMessage(playerid, COLOR_GRAY, "Carros pertencidos ao servidor não podem ser fiscalizados!");
		SendClientMessage(playerid, COLOR_COP_SWAT, "Para fiscalizar o veículo leve-o ao departamento de polícia!");
		SendClientMessage(playerid, COLOR_COP_SWAT, "Siga o CheckPoint em seu radar...");
		new rand = random(5);
		DisablePlayerCheckpoint(playerid);
		SetPlayerCheckpoint(playerid,DelegaciaPos[rand][0],DelegaciaPos[rand][1],DelegaciaPos[rand][2],2.0);
		CheckpointStatus[playerid] = ENTREGANDO_DELEGACIA;
		CarroEntrega[playerid] = GetPlayerVehicleID(playerid);
		return 1;
	}
	if(strcmp(cmd, "/fiscalizararmas", true) == 0) {
        if(Profissao[playerid] != COP_MILITAR && Profissao[playerid] != COP_RODOVIARIO && Profissao[playerid] != COP_SWAT && Profissao[playerid] != EXERCITO && Profissao[playerid] != DELEGADO) return SendClientMessage(playerid, COLOR_GRAY, "Você não trabalha para o departamento de polícia!");
		new tmp[256];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /fiscalizararmas [id]");
		if(IsPlayerConnected(strval(tmp))){
		    if(GetDistanceBetweenPlayers(playerid,strval(tmp)) < 7){
				SendClientMessage(playerid, COLOR_COP_SWAT, "Foi mandado um pedido de autorização para a fiscalização de armas sem porte...");
				SendClientMessage(strval(tmp), COLOR_COP_SWAT, "Para permitir a fiscalização de suas armas sem porte digite /entregararmas, caso contrário digite /naoentregararmas");
				FiscalArmas[strval(tmp)] = playerid;
				FiscalizandoArmas[strval(tmp)] = 1;
				return 1;
			}
			else{
			    SendClientMessage(playerid, COLOR_GRAY, "Fique mais próximo do jogador!");
			    return 1;
			}
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado!");
		    return 1;
		}
	}
	if(strcmp(cmd, "/entregararmas", true) == 0) {
		if(FiscalizandoArmas[playerid] == 1)
		{
		    ConfiscarArmas(playerid);
		    SendPlayerMessageToPlayer(FiscalArmas[playerid], playerid, "OK, OK... Você venceu! Eu entregarei-lhe as armas!");
		    SendPlayerMessageToPlayer(playerid, playerid, "OK, OK... Você venceu! Eu entregarei-lhe as armas!");
			FiscalizandoArmas[playerid] = 0;
			SendClientMessage(playerid, COLOR_COP_SWAT, "As suas armas sem porte foram fiscalizadas!");
			SendClientMessage(FiscalArmas[playerid], COLOR_COP_SWAT, "Trabalho feito! Você recebeu $50 dólares do Departamento!");
			AddPlayerMoney(FiscalArmas[playerid], 50, 3);
			new r = random(3);
			if(r == 1){
				new string[256];
				SendClientMessageToAll(COLOR_WHITE, "New Paper's Life - ÚLTIMAS NOTÍCIAS:");
				format(string,sizeof(string),"O Oficial Sr. %s fiscalizou as armas de %s! Juiz tome par do processo e esclareça os fatos",PlayerName(playerid),PlayerName(FiscalArmas[playerid]));
				SendClientMessageToAll(COP_SWAT,string);
			}
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Nenhum policial está tentando fiscalizar suas armas!");
		    return 1;
		}
	}
	if(strcmp(cmd, "/naoentregararmas", true) == 0) {
	    if(FiscalizandoArmas[playerid] == 1)
		{
		    SendPlayerMessageToPlayer(FiscalArmas[playerid], playerid, "O QUE? Quer minhas armas? Sai fora, vai comprar, isso custou grana pow!");
		    SendPlayerMessageToPlayer(playerid, playerid, "O QUE? Quer minhas armas? Sai fora, vai comprar, isso custou grana pow!");
			FiscalizandoArmas[playerid] = 0;
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAY, "Nenhum policial está tentando fiscalizar suas armas!");
		    return 1;
		}
	}
    if(strcmp(cmd, "/revistar", true) == 0) {
        if(Profissao[playerid] == COP_MILITAR || Profissao[playerid] == COP_RODOVIARIO || Profissao[playerid] == COP_SWAT || Profissao[playerid] == EXERCITO || Profissao[playerid] == DELEGADO || Profissao[playerid] == COP_NARCOTICOS){
            new tmp[256];
           	new plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/revistar [id]");
				return 1;
			}
 			plid = strval(tmp);
   			if(!IsPlayerConnected(plid)){
 				SendClientMessage(playerid, COLOR_GRAY, "Este jogador não está conectado.");
				return 1;
			}
		    if(GetDistanceBetweenPlayers(playerid, plid) > 20){
		        SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe!");
				return 1;
			}
			if(Revistando[playerid] == 1 || Revistado[plid] == 1){
		        SendClientMessage(playerid, COLOR_GRAY, "Você já está revistando, ou o jogador está sendo revistado.");
				return 1;
			}
			if(plid == playerid){
		        SendClientMessage(playerid, COLOR_GRAY, "Você que se auto revistar?");
				return 1;
			}
			SendClientMessage(playerid,COLOR_COP_SWAT,"[CENTRAL] O Suspeito recebeu a mensagem pedindo que encosta na parede para ser revistado.");
   			new string[256];
   			SendClientMessage(plid, COLOR_GREEN, " ");
		    format(string,sizeof(string),"[OFICIAL] Senhor %s peço que encoste na parede e deixe eu realizar a revista em seu corpo.",PlayerName(plid));
            SendClientMessage(plid, COLOR_COP_SWAT, string);
            SendClientMessage(plid, COLOR_COP_SWAT,"[OFICIAL] Compreenda minha solicitação digitando: /autorizar, /naoautorizar");
			Revistando[playerid] = 1;
			Revistado[plid] = 1;
			AindaNaoAceitou[plid] = 1;
			SetTimerEx("NaoAceitou",30000,0,"dd",playerid,plid);
		    OficialSolicitou[plid] = playerid;
		    return 1;
		}
	}
    if(strcmp(cmd, "/autorizar", true) == 0) {
   		if(!IsPlayerConnected(OficialSolicitou[playerid])){
 			SendClientMessage(playerid, COLOR_GRAY, "O policial não está mais online.");
 			return 1;
		}
	    if(GetDistanceBetweenPlayers(playerid, OficialSolicitou[playerid]) > 20){
	        SendClientMessage(playerid, COLOR_GRAY, "Você está muito distante do policial.");
			return 1;
		}
		if(Revistando[OficialSolicitou[playerid]] != 1 || Revistado[playerid] != 1){
	        SendClientMessage(playerid, COLOR_GRAY, "Você já está revistando, ou o jogador está sendo revistado.");
			return 1;
		}
		AindaNaoAceitou[playerid] = 0;
		SendClientMessage(playerid, COLOR_COP_SWAT, "[OFICIAL] Obrigado, mãos para o alto.");
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
		SendClientMessage(playerid, COLOR_COP_SWAT, "[OFICIAL] Encontrei:");
		SendClientMessage(OficialSolicitou[playerid], COLOR_COP_SWAT, "[OFICIAL] Ele tem:");
		new string[256];
		if(Heroina[playerid] > 0){
			format(string,sizeof(string), "[OFICIAL] %d injeções de heroína.", Heroina[playerid]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string,sizeof(string), "[OFICIAL] %d injeções de heroína.", Heroina[playerid]);
			SendClientMessage(OficialSolicitou[playerid], COLOR_WHITE, string);
		}
		if(Cocaina[playerid] > 0){
			format(string,sizeof(string), "[OFICIAL] %d gramas de pó de Cocaína.", Cocaina[playerid]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string,sizeof(string), "[OFICIAL] %d gramas de pó de Cocaína.", Cocaina[playerid]);
			SendClientMessage(OficialSolicitou[playerid], COLOR_WHITE, string);
		}
		if(Maconha[playerid] > 0){
			format(string,sizeof(string), "[OFICIAL] %d papelotes de maconha.", Maconha[playerid]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string,sizeof(string), "[OFICIAL] %d papelotes de maconha", Maconha[playerid]);
			SendClientMessage(OficialSolicitou[playerid], COLOR_WHITE, string);
		}
		if((Maconha[playerid] == 0) && (Cocaina[playerid] == 0) && (Heroina[playerid] ==0)){
			SendClientMessage(playerid, COLOR_COP_SWAT, "[OFICIAL] Momento irei checar se há armas.");
			SendClientMessage(OficialSolicitou[playerid], COLOR_COP_SWAT, "[OFICIAL] Sem Drogas, checando armas...");
		}
		SetTimerEx("VerArmas",5000,0,"dd",OficialSolicitou[playerid],playerid);
		return 1;
	}

	if(strcmp(cmd, "/naoautorizar", true) == 0) {
   		if(!IsPlayerConnected(OficialSolicitou[playerid])){
 			SendClientMessage(playerid, COLOR_GRAY, "O policial não está mais online.");
 			return 1;
		}
	    if(GetDistanceBetweenPlayers(playerid, OficialSolicitou[playerid]) > 20){
	        SendClientMessage(playerid, COLOR_GRAY, "Você está muito distante do policial.");
			return 1;
		}
		if(Revistando[OficialSolicitou[playerid]] != 1 || Revistado[playerid] != 1){
	        SendClientMessage(playerid, COLOR_GRAY, "Você já está revistando, ou o jogador está sendo revistado.");
			return 1;
		}
		if(AindaNaoAceitou[playerid] == 1){
			Revistando[OficialSolicitou[playerid]] = 0;
			Revistado[playerid] = 0;
			AindaNaoAceitou[playerid] = 0;
		    SendClientMessage(OficialSolicitou[playerid], COLOR_COP_SWAT,"[OFICIAL] A revista não foi concluída o jogador não aceitou.");
		    SendClientMessage(OficialSolicitou[playerid], COLOR_COP_SWAT,"[OFICIAL] Ele pode ser um suspeito verifique");
		    SendClientMessage(playerid, COLOR_COP_SWAT,"Você não aceitou a revista.");
			return 1;
		}
	}
    if(strcmp(cmd, "/apreenderveiculo", true) == 0) {
        if(Profissao[playerid] == COP_MILITAR || Profissao[playerid] == COP_RODOVIARIO || Profissao[playerid] == COP_SWAT || Profissao[playerid] == EXERCITO || Profissao[playerid] == DELEGADO || Profissao[playerid] == COP_NARCOTICOS){
            new tmp[256];
	    	new plid;
	    	new string[256];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/apreenderveiculo [id/do/dono]");
				return 1;
			}
 			plid = strval(tmp);
   			if(!IsPlayerConnected(plid)){
 				SendClientMessage(playerid, COLOR_GRAY, "Este jogador não está conectado.");
				return 1;
			}
		    if(GetDistanceBetweenPlayers(playerid,plid) > 20){
		       	SendClientMessage(playerid,COLOR_GRAY,"Você está muito longe, chegue mais perto!");
				return 1;
			}
			if(!IsPlayerInAnyVehicle(plid)){
				SendClientMessage(playerid, COLOR_GRAY, "Ele não se encontra em um veículo.");
				return 1;
			}
			if(!IsStringAName(vStats[GetPlayerVehicleID(plid)][VDono])){
			    SendClientMessage(playerid, COLOR_GRAY, "O dono do veículo tem que estar conectado!");
			    return 1;
			}
			if(vStats[GetPlayerVehicleID(plid)][Dividas] <= 0){
				SendClientMessage(playerid, COLOR_GRAY, "Este veículo não tem multas!");
				return 1;
			}
			if(vStats[GetPlayerVehicleID(plid)][AlertadoMulta] == DiaJogo){
				SendClientMessage(playerid, COLOR_GRAY, "Este veículo foi alertado hoje da multa, ele tem 1 dia para efetuar o pagamento.");
				return 1;
			}
			else if(vStats[GetPlayerVehicleID(plid)][AlertadoMulta] == 0){
			    SendClientMessage(plid, COLOR_COP_SWAT, "[OFICIAL] Você foi alertado que deve pagar suas multas, o próximo aviso");
			    SendClientMessage(plid, COLOR_COP_SWAT, "[OFICIAL] será a apreensão do veículo e do motorista. Passar bem!");
			    SendClientMessage(playerid, COLOR_COP_SWAT, "[CENTRAL] Lembrete afixado, o jogador não poderá mais ser pego nesse veículo.");
			    vStats[GetPlayerVehicleID(plid)][AlertadoMulta] = DiaJogo;
			    SendClientMessage(plid, COLOR_RED2, "Seu veículo está pindurado, aconselho pagar as multas.");
			    return 1;
			}
			else if((vStats[GetPlayerVehicleID(plid)][AlertadoMulta] != DiaJogo) && (vStats[GetPlayerVehicleID(plid)][AlertadoMulta] != 0)){
			    SendClientMessage(plid, COLOR_COP_SWAT, "[OFICIAL] Pedimos o pagamento das multas, o pagamento não foi efetuado, você deve 24 horas para pagar.");
			    SendClientMessage(plid, COLOR_COP_SWAT, "[OFICIAL] e não pagou, por isso estamos apreendendo seu veículo saia do mesmo e ponha as mãos para cima.");
			   	new donovehicle[256];
			   	set(donovehicle,vStats[GetPlayerVehicleID(plid)][VDono]);
				if(IsStringAName(donovehicle)){
					format(string,sizeof(string),"[CENTRAL COP] Seu veículo de ID: %s está apreendido na delegacia, aconselhamos que retire-o daqui imediatamente.",GetPlayerVehicleKeyID(playerid,GetPlayerVehicleID(playerid)));
					SendClientMessage(IDName(donovehicle), COLOR_COP_SWAT, string);
				}
				new valorm = random(5);
				format(string, sizeof(string), "[CENTRAL] As Dívidas do seu carro agora estão avalidas em $%d.", vStats[GetPlayerVehicleID(plid)][Dividas] * valorm);
				SendClientMessage(plid, COLOR_ASSALTANTE, string);
				vStats[GetPlayerVehicleID(plid)][Dividas] *= valorm;
				vStats[GetPlayerVehicleID(plid)][Confiscado] = 1;
			    SendClientMessage(playerid, COLOR_COP_SWAT, "[OFICIAL] Bom trabalho oficial, agora apreenda o suspeito e logo em seguida leve o veículo para a delegacia.");
			    SendClientMessage(playerid, COLOR_COP_SWAT, "[OFICIAL] para que possamos tomar as medidas cabíveis para oficializar a prisão do veículo e do motorista.");
				vehiculozao[playerid] = GetPlayerVehicleID(plid);
				RemovePlayerFromVehicle(plid);
				Motivo[plid] = 8;
			    format(string, sizeof(string), "[POLICIA] O Oficial Sr: %s está prendendo %s por %d horas por estar em um veículo com as multas atrasadas.", PlayerName(playerid), PlayerName(plid),TempoPrisao[8]);
				SendClientMessageToAll(COLOR_COP_SWAT, string);
            	SetTimerEx("PrendendoJogador",8000,0,"dd",playerid,plid);
            	SetTimerEx("LevarVeiculo",25000,0,"d",playerid);
            	return 1;
			}
		}
	}

    if(strcmp(cmd, "/liberarveiculo", true) == 0) {
        if(Profissao[playerid] == COP_MILITAR || Profissao[playerid] == COP_RODOVIARIO || Profissao[playerid] == COP_SWAT || Profissao[playerid] == EXERCITO || Profissao[playerid] == DELEGADO || Profissao[playerid] == COP_NARCOTICOS){
			new plid,str[256];
			plid = strval(strtok(cmdtext,idx));
			format(str,sizeof(str),"%d",plid);
			if(!strlen(str)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /liberarveiculo [id/do/dono]");
			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em um veículo!");
			if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado!");
			if(strcmp(PlayerName(plid),vStats[GetPlayerVehicleID(playerid)][VDono],true)) return SendClientMessage(playerid, COLOR_GRAY, "Ele não é o dono do veículo!");
			for(new i = 0; i < SLOTS2; i++){
			    DestrancarVeiculo(i,GetPlayerVehicleID(playerid));
			}
			SendClientMessage(playerid, COLOR_COP_SWAT, "[DELEGACIA] Devolução executada...");
			SendClientMessage(plid, COLOR_COP_SWAT, "[DELEGACIA] Tome seu carro devolta, espero que tenha servido de lição, o senhor deve cuidar melhor dele!");
			SendClientMessage(plid, COLOR_COP_SWAT, "Agora você terá que trocar a posição dele (/trocarposicao) e se possível colocar travas pois foram desativadas!");
			return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não faz parte do departamento de polícia!");
		    return 1;
		}
	}

	if(strcmp(cmd, "/desarmardrogas", true) == 0) {
		if(Profissao[playerid] == COP_NARCOTICOS || IsPlayerAdmin(playerid)){
  			if(!IsPlayerInAnyVehicle(playerid)){
			  SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em um veículo!");
			  return 1;
			}
		  	if(DrogasPlantadas[GetPlayerVehicleID(playerid)] <= 0){
		  		SendClientMessage(playerid, COLOR_GRAY, "Não há drogas plantadas nesse veículo!");
		  		return 1;
		  	}
		  	else{
			  	TogglePlayerControllable(playerid,0);
			  	DesarmandoAsDrogas[playerid] = 1;
		 	 	TempoDesarme[playerid] = SetTimerEx("DesarmandoDrogas",60000,false,"d",playerid);
		 	 	SendClientMessage(playerid, COLOR_COP_SWAT, "Desarmando as drogas, isso pode demorar um pouco...");
			  	return 1;
		  	}
	  	}
	  	else{
		  	SendClientMessage(playerid, COLOR_GRAY, "Você não é Narcótico!");
		  	return 1;
	  	}
	}
    if(strcmp(cmd, "/vexame", true) == 0) {
       if(Profissao[playerid] == COP_NARCOTICOS || IsPlayerAdmin(playerid)){
		  if(!IsPlayerInAnyVehicle(playerid)){
		  SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em um veículo!");
		  return 1;
		  }
		  else{
			  if(DrogasPlantadas[GetPlayerVehicleID(playerid)] > 0){
			  new msg[256];
			  format(msg,sizeof(msg),"Foram encontradas %d droga(s) plantada(s) nesse veículo!",DrogasPlantadas[GetPlayerVehicleID(playerid)]);
			  SendClientMessage(playerid, COLOR_COP_SWAT, msg);
			  SendClientMessage(playerid, COLOR_COP_SWAT, "Use: /desplantardrogas para desplanta-las.");
			  return 1;
			  }
			  else{
				  SendClientMessage(playerid, COLOR_GRAY, "Não há nenhuma droga nesse veiculo!");
				  return 1;
				  }
			  }
		  }
		  else{
			  SendClientMessage(playerid, COLOR_GRAY, "Você não é Narcótico!");
			  return 1;
		  }
	}
	if(strcmp(cmd, "/exame", true) == 0) {
	    if(Profissao[playerid] == COP_NARCOTICOS || Profissao[playerid] == COP_SWAT || Profissao[playerid] == EXERCITO || IsPlayerAdmin(playerid)){
	        new tmp[256];
	        new msg[256];
	        new plid;
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp)) {
	            SendClientMessage(playerid,COLOR_GRAY,"/exame [id]");
				return 1;
			}
			plid = strval(tmp);
			if(IsPlayerConnected(plid) && Logado[playerid] == 1){
			    if(GetDistanceBetweenPlayers(playerid,plid) > 20){
			        SendClientMessage(playerid,COLOR_GRAY,"Você está muito longe, chegue mais perto!");
					return 1;
				} else {
				    SendClientMessage(playerid,COLOR_COP_SWAT,"Resultados do exame anti-dopping:");
				    format(msg, sizeof(msg), "Heroina : %d doses injetadas",QtHeroina[plid]);
				    SendClientMessage(playerid,COLOR_COP_NARCOTICOS,msg);
				    format(msg, sizeof(msg), "Maconha : %d doses fumadas",QtMaconha[plid]);
				    SendClientMessage(playerid,COLOR_COP_NARCOTICOS,msg);
				    format(msg, sizeof(msg), "Cocaína : %d doses cheiradas",QtCocaina[plid]);
				    SendClientMessage(playerid,COLOR_COP_NARCOTICOS,msg);
				    SendClientMessage(playerid,COLOR_COP_SWAT,"Exame anti-dopping concluído!");
					return 1;
				}
			}
			else {
			    SendClientMessage(playerid,COLOR_GRAY,"Jogador não conectado/logado");
				return 1;
			}
		} else {
			SendClientMessage(playerid,COLOR_GRAY,"Você não tem permissão para isso!");
			return 1;
		}
	}

	if(strcmp(cmd, "/fianca", true) == 0) {
	  	if(Profissao[playerid] == ADVOGADO){
		    new tmp[256];
		    new plid;
		    new quant;
		    new string[256];
		    tmp = strtok(cmdtext,idx);
		    plid = strval(tmp);
	    	if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAY, "/fianca [id] [quantia]");
		    	return 1;
		    }
		    tmp = strtok(cmdtext,idx);
			quant = strval(tmp);
	   		if(!strlen(tmp)){
			   SendClientMessage(playerid, COLOR_GRAY, "/fianca [id] [quantia]");
			   return 1;
	   		}
	   		if(Presos[plid] == 0){
			   SendClientMessage(playerid, COLOR_GRAY, "O Jogador não está preso.");
			   return 1;
	   		}
   			if(IsPlayerConnected(plid)){
	   			if(plid != playerid){
					format(string,sizeof(string),"O advogado %s está lhe cobrando %d para lhe tirar da prisão para aceitar faça /aceitar para recusar faça /recusar",PlayerName(playerid),quant);
				    SendClientMessage(plid,COLOR_ADVOGADO,string);
				    SendClientMessage(playerid, COLOR_ADVOGADO, "Proposta enviada");
				    envconvite[plid] = playerid;
				    dinheirofianca[plid] = quant;
				    invitestatus[plid] = INVITE_FIANCA;
				    SetTimerEx("Cancelar",60000,0,"d",plid);
				    return 1;
				} else {
					SendClientMessage(playerid, COLOR_ADVOGADO, "Você não pode se próprio fazer uma oferta");
				    return 1;
		   		}
	   		} else {
		    	SendClientMessage(playerid, COLOR_ADVOGADO,"Jogador não conectado/logado");
		    	return 1;
			}
		} else {
			SendClientMessage(playerid, COLOR_ADVOGADO, "Você não tem permissao");
		   	return 1;
		}
    }

	if(strcmp(cmd,"/tribunal",true) == 0) {
		if(Profissao[playerid] == JUIZ || IsPlayerAdmin(playerid)){
			new tmp[256];
			new plid,plid2,tempo;
			tmp = strtok(cmdtext,idx);
			plid = strval(tmp);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_RED2, "/tribunal [id 1] [id 2] [daqui a quanto tempo]");
				return 1;
			}
			tmp = strtok(cmdtext,idx);
			plid2 = strval(tmp);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_RED2, "/tribunal [id 1] [id 2] [daqui a quanto tempo]");
				return 1;
			}
			tmp = strtok(cmdtext,idx);
			tempo = strval(tmp);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_RED2, "/tribunal [id 1] [id 2] [daqui a quanto tempo]");
				return 1;
			}
			if(GetDistanceBetweenPlayers(playerid,plid) > 15 || GetDistanceBetweenPlayers(playerid,plid2) > 15){
                SendClientMessage(playerid, COLOR_GRAY, "Você está longe de um dos jogadores indicados!");
				SendClientMessage(playerid, COLOR_GRAY, "Fique próximo dos dois jogadores.");
			    return 1;
			}
			if(IsPlayerConnected(plid)){
				if(IsPlayerConnected(plid2)){
					if(Tribunal[plid] == 0){
						if(Tribunal[plid2] == 0){
							if(tempo > 0 && tempo  < 4){
							    if(plid != plid2){
									Tribunal[plid] = 1;
									Tribunal[plid2] = 1;
									new msg[256];
									format(msg,sizeof(msg),"O Tribunal entre %s e %s começará daqui a %d minuto(s).",PlayerName(plid),PlayerName(plid2),tempo);
									SendClientMessageToAll(COLOR_JUIZ,msg);
									SendClientMessageToAll(COLOR_WHITE,"Arrumem um advogado...");
									SetTimerEx("InicioTribunal",60000*tempo,false,"ddd",plid,plid2,playerid);
									SetTimerEx("InicioTribunal2",58000*tempo,false,"ddd",plid,plid2,playerid);
									AcrescentarExPoints(playerid,1);
									return 1;
								} else {
									SendClientMessage(playerid, COLOR_RED2, "Jogadores diferentes.");
									return 1;
								}
							} else {
								SendClientMessage(playerid, COLOR_RED2, "O tempo deve ser no mínimo de 1 minuto e máximo de 3 minutos");
								return 1;
							}
						} else {
							SendClientMessage(playerid, COLOR_RED2, "Já existe um inquérito do Jogador 2. O Tribunal dele iniciará no tempo que o Sr. determinou.");
							return 1;
						}
					} else {
						SendClientMessage(playerid, COLOR_RED2, "Já existe um inquérito do Jogador 1. O Tribunal dele iniciará no tempo que o Sr. determinou.");
						return 1;
					}
				} else {
					SendClientMessage(playerid, COLOR_RED2, "Jogador 2 não conectado/logado.");
					return 1;
				}
			} else {
				SendClientMessage(playerid, COLOR_RED2, "Jogador 1 não conectado/logado.");
				return 1;
			}
		} else {
			SendClientMessage(playerid, COLOR_RED2, "Você não tem permissão.");
			return 1;
		}
	}
	if(strcmp(cmd,"/fimtribunal",true) == 0) {
		if(Profissao[playerid] == JUIZ || IsPlayerAdmin(playerid)){
		    new plid, plid2, tmp[256];
		    new string[256];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/fimtribunal [id 1] [id 2]");
				return 1;
			}
        	plid = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/fimtribunal [id 1] [id 2]");
				return 1;
			}
        	plid2 = strval(tmp);
			if(IsPlayerConnected(plid)){
				if(IsPlayerConnected(plid2)){
 		 			if(Tribunal[plid] == 1){
 		 	   			if(Tribunal[plid2] == 1){
 		 	   			    if(plid != plid2){
								Tribunal[plid] = 0;
								Tribunal[plid2] = 0;
								declaracoesabertas[plid] = 0;
								declaracoesabertas[plid2] = 0;
								Audiencia[playerid] = 0;
								SetPlayerPos(plid,1546.5948,-1675.9949,13.5626);
								SetPlayerPos(plid2,1545.5948,-1675.9949,13.5626);
								SetPlayerPos(playerid,1547.5948,-1675.9949,13.5626);
								TogglePlayerControllable(plid,1);
								TogglePlayerControllable(plid2,1);
								SetPlayerInterior(playerid,0);
								SetPlayerInterior(plid,0);
								SetPlayerInterior(plid2,0);
							    format(string,sizeof(string),"O Sr.Juiz %s encerrou o caso entre %s e %s.",PlayerName(playerid), PlayerName(plid), PlayerName(plid2));
							    SendClientMessageToAll(COLOR_JUIZ, string);
							    return 1;
							} else {
								SendClientMessage(playerid, COLOR_RED2, "Jogadores diferentes.");
								return 1;
							}
					  	} else {
			   				SendClientMessage(playerid, COLOR_RED2, "O Jogador 2 não está no Tribunal.");
							return 1;
			   			}
			   		} else {
			   			SendClientMessage(playerid, COLOR_RED2, "O Jogador 1 não está no Tribunal.");
						return 1;
			   		}
				} else {
					SendClientMessage(playerid, COLOR_RED2, "Jogador 2 não conectado/logado.");
					return 1;
				}
			} else {
				SendClientMessage(playerid, COLOR_RED2, "Jogador 1 não conectado/logado.");
				return 1;
			}
		} else {
			SendClientMessage(playerid, COLOR_RED2, "Você não tem permissão.");
			return 1;
		}
	}
	if(strcmp(cmd,"/culpado",true) == 0) {
		if(Profissao[playerid] == JUIZ || IsPlayerAdmin(playerid)){
		   	new tmp[256];
		   	new plid;
		   	tmp = strtok(cmdtext,idx);
	   		if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAY, "/culpado [id]");
			    return 1;
			}
		    plid = strval(tmp);
		    if(IsPlayerConnected(plid)){
	   			if(declaracoesabertas[plid] == 1){
		   			new string[256];
				    format(string,sizeof(string),"O Sr. Juiz %s declarou o jogador %s CULPADO!",PlayerName(playerid),PlayerName(plid));
				    SendClientMessageToAll(COLOR_JUIZ,string);
				    SendClientMessageToAll(COLOR_JUIZ, "Sr. Juiz, declare o Tribunal encerrado. E logo em seguida der a pena ao reú.");
		   			return 1;
	   			} else {
		   			SendClientMessage(playerid, COLOR_GRAY, "Este jogador não está aberto para declarações.");
		   			return 1;
		   		}
	   		} else {
		   		SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
				return 1;
			}
		} else{
			SendClientMessage(playerid, COLOR_GRAY, "Você nem devia estar mexendo neste comando!");
			return 1;
		}
    }

  	if(strcmp(cmd, "/soltar", true) == 0) {
	    if(Profissao[playerid] == JUIZ || Profissao[playerid] == DELEGADO || IsPlayerAdmin(playerid)){
		    new tmp[256];
		    new plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/soltar [id]");
				return 1;
			}
	        plid = strval(tmp);
			if(IsPlayerConnected(plid) && Logado[playerid] == 1){
				if(Presos[plid] == 0){
				    SendClientMessage(playerid,COLOR_GRAY,"O jogador não está preso!");
					return 1;
				} else {
                    if(fexist(PlayerFile(PlayerName(plid)))){
                    pStats[plid][Preso] = 0;
				    Presos[plid] = 0;
				    CelularBloqueado[plid] = 0;
				    SetSpawnInfo(plid,0,pStats[plid][Skin],1546.5948,-1675.9949,13.5626,0,0,0,0,0,0,0);
				    SpawnPlayer(plid);
				    SendClientMessage(plid,COLOR_COP_SWAT,"Você foi solto, mas se cometer mais crimes, pagará novamente.");
	   				PrisaoTimer[plid][1]=0;
	   				KillTimer(PrisaoTimer[plid][0]);
				    format(tmp,sizeof(tmp),"Você foi solto por %s",PlayerName(playerid));
				    SendClientMessage(plid,COLOR_COP_SWAT,tmp);
				    GameTextForPlayer(plid, "~r~ Libertado!", 5000,0);
				    Contrabando[plid] = 0;
					Receita[plid] = 0;
					SetPlayerWantedLevel(plid, 0);
					pStats[plid][Wanted] = 0;
					SetPlayerInterior(plid,0);
					return 1;
					}
					else{
						printf("Bug encontrado ao soltar %s",PlayerName(plid));
						printf("O arquivo do jogador não foi encontrado");
						return 0;
					}
				}
			}
			else{
	            SendClientMessage(playerid, COLOR_GRAY, "Jogador não está conectado/logado");
				return 1;
			}
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Juiz/Delegado");
			return 1;
		}
	}

	if(strcmp(cmd, "/tomarsorvete", true) == 0) {
	    if(AreaSorveteria[playerid] == 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não está na sorveteria!");
	        return 1;
		}
	   	if(TomandoSorvete[playerid] == 1){
            SendClientMessage(playerid, COLOR_GRAY, "Ei... Você já está tomando sorvete! Tome esse ai primeiro para poder tomar outro.");
	   		return 1;
	   	} else {
	   	    ShowMenuForPlayer(Sorvetes,playerid);
	   	    TogglePlayerControllable(playerid,0);
	   	    return 1;
		}
	}

    if(strcmp(cmd, "/comprarsorvete", true) == 0) {
	    if(AreaSorveteria[playerid] == 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não está na sorveteria!");
	        return 1;
		}
	   	else {
	   	    ShowMenuForPlayer(Sorvetes2,playerid);
	   	    TogglePlayerControllable(playerid,0);
	   	    return 1;
		}
	}
	if(strcmp(cmd, "/cone", true) == 0) {
 		if(Profissao[playerid] == COP_RODOVIARIO || Profissao[playerid] == COP_SWAT || IsPlayerAdmin(playerid)){
 		    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
 		        SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar fora do carro");
 		        return 1;
 		    }
          	new Float:X, Float:Y, Float:Z;
            GetPlayerPos(playerid,X, Y, Z);
			CreateObject(1238,X, Y, Z-0.7, 0, 0, 0);
            SendClientMessage(playerid, COLOR_GREEN, "Você adicionou um cone neste local.");
			return 1;
		}
		else{
			SendClientMessage(playerid, COLOR_GREEN, "Você não é Policial Rodoviario");
            return 1;
		}
	}
	if(strcmp(cmd, "/pagardividas", true) == 0) {
	    new tmp[256], str[256], string[256], vehid;
	    tmp = strtok(cmdtext,idx);
	    vehid = strval(tmp);
	    if(!strlen(tmp)){
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /pagardividas [ID/do/veículo]");
	        return 1;
		}
		if(AreaDelegacia[playerid] == 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não está na Delegacia!");
			return 1;
		}
		if(pStats[playerid][LastVeh] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhum veículo, como poderá pagar uma multa?");
		    return 1;
		}
		if(vehid == 0 || vehid >= pStats[playerid][LastVeh]){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /pagardividas [ID/do/veículo]");
			format(string,sizeof(string),"ID de 1 até %d",pStats[playerid][LastVeh]);
			SendClientMessage(playerid, COLOR_GRAY, string);
			return 1;
		}
		if(GetVehicles[playerid][vehid] == -1){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem mais um veículo desse ID...");
		    return 1;
		}
		if(vStats[GetVehicles[playerid][vehid]][Dividas] <= 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não possui multa para pagar!");
		    return 1;
		}
		if(GetPlayerMoney(playerid) < vStats[GetVehicles[playerid][vehid]][Dividas]){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro!");
		    format(str,sizeof(str),"A multa desse veículo é de $%d",vStats[GetVehicles[playerid][vehid]][Dividas]);
		    SendClientMessage(playerid, COLOR_GRAY, str);
			return 1;
		}
		else{
		    ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,0,1);
		    AddPlayerMoney(playerid,-vStats[GetVehicles[playerid][vehid]][Dividas],-1);
			format(str,sizeof(str),"[DELEGACIA] Você pagou sua multa de $%d. Tome cuidado, estamos de olho!",vStats[GetVehicles[playerid][vehid]][Dividas]);
			SendClientMessage(playerid, COLOR_GREEN, str);
			vStats[GetVehicles[playerid][vehid]][Dividas] = 0;
			if(vStats[GetVehicles[playerid][vehid]][Confiscado] == 1){
			    SendClientMessage(playerid, COLOR_COP_MILITAR, "[DELEGACIA] Seu veículo está liberado pode ir pega-lo na garagem da delegacia.");
			    SendClientMessage(playerid, COLOR_COP_MILITAR, "[DELEGACIA] Peça para algum policial abrir o portão e liberar o veículo.");
			    SendClientMessage(playerid, COLOR_COP_MILITAR, "[DELEGACIA] Fale isso pra ele, peça para ele liberar o veículo.");
			    vStats[GetVehicles[playerid][vehid]][Confiscado] = 0;
			    vStats[GetVehicles[playerid][vehid]][AlertadoMulta] = 0;
			}
			return 1;
		}
	}

	if(strcmp(cmd, "/multar", true) == 0) {
	    if(Profissao[playerid] == RECEITA_FEDERAL || Profissao[playerid] == COP_MILITAR || Profissao[playerid] == EXERCITO || Profissao[playerid] == COP_RODOVIARIO || Profissao[playerid] == COP_SWAT || Profissao[playerid] == DELEGADO || IsPlayerAdmin(playerid)){
			new tmp[256];
	    	new plid;
	    	new quant;
	    	new string[256];
	    	new distancia;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/multar [id] [quantidade]");
				return 1;
			}
        	plid = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/multar [id] [quantidade]");
				return 1;
			}
        	quant = strval(tmp);
 			if(quant > 1000 || quant <= 0){
				SendClientMessage(playerid, COLOR_GRAY, "Você não está querendo multar de forma justa.");
				return 1;
			}
			distancia = GetDistanceBetweenPlayers(playerid, plid);
		 	if(distancia > 15){
			    SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto!");
				return 1;
			}
			if(Profissao[plid] == COP_MILITAR || Profissao[plid] == RECEITA_FEDERAL || Profissao[plid] == COP_RODOVIARIO || Profissao[plid] == COP_SWAT){
				SendClientMessage(playerid, COLOR_GRAY, "Você não pode multar um policial/receita federal.");
				return 1;
			}
			if(JaMultou[playerid] == 1){
			    SendClientMessage(playerid, COLOR_GRAY, "Você só pode multar alguém de 1 em 1 minuto!");
				return 1;
			}
			if(IsPlayerConnected(plid)){
			    if(IsPlayerInAnyVehicle(plid)){
				    if(compare(vStats[GetPlayerVehicleID(plid)][VDono],"Servidor")){
				        SendClientMessage(playerid, COLOR_JUIZ, "Esse veículo pertence ao governo, verifique se é um veículo apropriado para o trabalho desse jogador!");
						SendClientMessage(playerid, COLOR_JUIZ, "Se não for, prenda-o por roubo de automóvel");
						return 1;
					} else {
						format(string, sizeof(string), "[CENTRAL COP] O Soldado %s lhe deu uma multa de $%d.", PlayerName(playerid), quant);
						SendClientMessage(plid, COLOR_COP_MILITAR, string);
						SendClientMessage(plid, COLOR_COP_MILITAR, "Para efeutar o pagamento você deve ir até a Delegacia.");
						SendClientMessage(playerid, COLOR_GREEN, "Multa dada.");
						vStats[GetPlayerVehicleID(plid)][Dividas] += quant;
						AddPlayerMoney(playerid,50,3);
					}
					format(string,sizeof(string), "O oficial %s multou %s em $%d,00 dólares",PlayerName(playerid),PlayerName(plid),quant);
					JaMultou[playerid] = 1;
					writelog(string);
					print(string);
					SetTimerEx("ZerarMultou",60000,0,"d",playerid);
					SendClientMessageAdmin(COLOR_LIGHT_YELLOW, string);
					if(JogadorMultado[plid]==0){
					    JogadorMultado[plid]=1;
					    SetTimerEx("ZerarJogadorMultado",130000,false,"d",plid);
						AcrescentarExPoints(playerid,1);
					}
				} else {
				    SendClientMessage(playerid, COLOR_GRAY, "Ele tem que estar em um veículo!");
					return 1;
				}
			} else {
			   	SendClientMessage(playerid, COLOR_GRAY, "O jogador não está conectado!");
				return 1;
			}
		} else {
			SendClientMessage(playerid, COLOR_GRAY, "Você não faz parte do departamento de policia!");
			return 1;
		}
	}

	if (strcmp(cmd, "/procurar", true)==0){
	    if(Profissao[playerid] == COP_MILITAR || Profissao[playerid] == EXERCITO  || Profissao[playerid] == COP_RODOVIARIO || Profissao[playerid] == COP_SWAT || Profissao[playerid] == COP_NARCOTICOS || Profissao[playerid] == DELEGADO || IsPlayerAdmin(playerid)){
		    new tmp[256];
		    new string[256];
		    new plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/procurar [id]");
				return 1;
			}
	        plid = strval(tmp);
			if(IsPlayerConnected(plid) && Logado[playerid] == 1){
			    Motivo[plid] = 9;
				pStats[plid][MotivoPrisao] = 9;
                format(string, sizeof(string), "[CENTRAL COP] O Suspeito %s foi colocado na lista de procurados pelo Oficial Sr %s",PlayerName(plid),PlayerName(playerid));
				SendClientMessageToAll(COLOR_COP_MILITAR,string);
				format(string, sizeof(string), "Você está sendo perseguido pela policia, Você foi colocado na lista pelo Oficial Sr %s", PlayerName(playerid));
				SendClientMessage(plid, COLOR_GREEN, string);
				SendClientMessageToAll(COLOR_COP_MILITAR, "Devido a ser colocado na lista, o motivo registrado foi de fuga de prisão, a pena é de 10 minutos se ele for pego!");
				SendClientMessageToAll(COLOR_COP_MILITAR, "Ao menos que ofereça rendição, nesse caso a pena será equivalente com a do crime que cometeu!");
				SetPlayerWantedLevel(plid,GetPlayerWantedLevel(plid)+1);
				pStats[plid][Wanted] += 1;
				if(pStats[plid][Wanted] > 6) pStats[plid][Wanted] = 6;
				return 1;
			} else {
	            SendClientMessage(playerid, COLOR_GRAY, "Comando desconhecido pelo mode.");
				return 1;
			}
		} else {
			SendClientMessage(playerid, COLOR_GRAY, "Você não faz parte do departamento de policia!");
			return 1;
		}
	}

	if (strcmp(cmd, "/desprocurar", true)==0){
	    if(Profissao[playerid] == COP_MILITAR || Profissao[playerid] == EXERCITO  || Profissao[playerid] == COP_RODOVIARIO || Profissao[playerid] == COP_SWAT || Profissao[playerid] == COP_NARCOTICOS || Profissao[playerid] == DELEGADO || IsPlayerAdmin(playerid)){
		    new tmp[256];
		    new plid;
		    new string[256];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/desprocurar [id]");
				return 1;
			}
	        plid = strval(tmp);
			if(IsPlayerConnected(plid) && Logado[plid] == 1){
			 	format(string, sizeof(string), "[CENTRAL COP] O Ex-Suspeito %s foi removido da lista de procurados pelo Oficial Sr %s",PlayerName(plid),PlayerName(playerid));
				SendClientMessageToAll(COLOR_COP_MILITAR,string);
				SendClientMessage(plid, COLOR_GREEN, "Você foi retirado da lista de procurados");
				SetPlayerWantedLevel(plid,0);
				pStats[plid][Wanted] = 0;
				return 1;
			}
			else{
	            SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado");
				return 1;
			}
		} else {
			SendClientMessage(playerid, COLOR_GRAY, "Você não faz parte do departamento de policia!");
			return 1;
		}
	}

    if(strcmp(cmd, "/assaltar", true) == 0) {
	    if(Profissao[playerid] == ASSALTANTE || IsPlayerAdmin(playerid)){
        	if(AreaBanco[playerid] == 1){
				if(TempoAssalto[playerid] == 0){
					SendClientMessage(playerid, COLOR_ASSALTANTE, "Assaltando...");
					SendClientMessage(playerid, COLOR_ASSALTANTE, "Quanto mais tempo ficar mais roubará, a polícia pode ser alertada.");
					TempoAssalto[playerid] = 1;
				    GameTextForPlayer(playerid, "~r~ Roubando...", 5000,0);
					BancoRoubando[playerid] = 1;
 					SetTimerEx("AssaltandoBanco",10000,0,"d",playerid);
 					return 1;
				} else {
					SendClientMessage(playerid,COLOR_GRAY,"Você já assaltou espere a poeira baixar para assaltar novamente!");
					return 1;
				}
			} else {
			    SendClientMessage(playerid,COLOR_GRAY,"Você não está na área de um banco!");
			    return 1;
			}
		} else {
	    	SendClientMessage(playerid, COLOR_GRAY, "Você não é Assaltante!");
			return 1;
		}
	}

	if(strcmp(cmd, "/roubar", true)==0){
	    if(Profissao[playerid] == ASSALTANTE || IsPlayerAdmin(playerid)){
	        new tmp[256], plid, distancia, string[256], rand;
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
		    	SendClientMessage(playerid, COLOR_GRAY,"/roubar [id]");
				return 1;
			}
			plid = strval(tmp);
			if(Profissao[plid] == ASSALTANTE){
		    	SendClientMessage(playerid, COLOR_GRAY,"Você não pode se auto-assaltar ou assaltar um Assaltante!");
				return 1;
			}
		   	if(RouboMao[playerid] == 1){
		    	SendClientMessage(playerid, COLOR_GRAY,"Calma. Espere a poeira baixar para realizar outro assalto.");
				return 1;
			}
			if(!IsPlayerConnected(plid)){
		    	SendClientMessage(playerid, COLOR_GRAY,"O Jogador não está conectado.");
				return 1;
			}
			distancia = GetDistanceBetweenPlayers(playerid, plid);
			if(distancia > 15){
		    	SendClientMessage(playerid, COLOR_GRAY,"Para realizar o roubo você tem que estar mais próximo.");
				return 1;
			}
			new grana = GetPlayerMoney(plid);
			if(grana < 40){
		    	SendClientMessage(playerid, COLOR_GRAY,"Não vale a pena assaltar ele. Está praticamente sem grana.");
				return 1;
			}
			rand = random(2);
			if(rand == 0){
			    if(Camuflado[playerid] == 1){
					format(string, sizeof(string), "Alguém tentou lhe assaltar, mas não obteve sucesso.");
				    SendClientMessage(plid, COLOR_RED2, string);
					format(string, sizeof(string), "O seu roubo contra %s falhou.",PlayerName(plid));
				    SendClientMessage(playerid, COLOR_GRAY, string);
				    RouboMao[playerid] = 1;
					SetTimerEx("RouboMao",240000,false,"d",playerid);
   					return 1;
   				} else {
					format(string, sizeof(string), "O Assaltante %s tentou lhe assaltar, mas não obteve sucesso.",PlayerName(playerid));
				    SendClientMessage(plid, COLOR_RED2, string);
					format(string, sizeof(string), "O seu roubo contra %s falhou.",PlayerName(plid));
				    SendClientMessage(playerid, COLOR_GRAY, string);
				    RouboMao[playerid] = 1;
					SetTimerEx("RouboMao",240000,false,"d",playerid);
				}
			} else {
				if(Camuflado[playerid] == 1){
					new roubo = random(grana);
					format(string, sizeof(string), "Alguém lhe roubou, ele estava de capuz! Conseguiu roubar: $%d dólares de você.",PlayerName(playerid), roubo);
					SendClientMessage(plid, COLOR_RED2, string);
		            AddPlayerMoney(plid,-roubo,-1);
					format(string, sizeof(string), "Você conseguiu roubar $%d dólares de %s",roubo,PlayerName(plid));
				    SendClientMessage(playerid, COLOR_ASSALTANTE, string);
		           	AddPlayerMoney(playerid, roubo, 3);
		           	RouboMao[playerid] = 1;
		           	SetTimerEx("RouboMao",300000,false,"d",playerid);
	           		AcrescentarExPoints(playerid,1);
					new sorte = random(4);
					if(sorte == 4){
						SendClientMessageToAll(COLOR_JORNALISTA, "[JORNAL] Informantes da polícia, acabam de nos informar que alguém foi assaltado. [Pricipal suspeito: Desconhecido]");
						format(string, sizeof(string), "[CENTRAL] [Crime: Roubo].  Criminoso: %s - Vítima %s - Testemunha: Desconhecido.",PlayerName(playerid),PlayerName(plid));
						SendClientMessageToAll(COLOR_COP_SWAT, string);
					}
				} else {
					new roubo = random(grana);
					format(string, sizeof(string), "Alguém lhe roubou, ele estava de capuz! Conseguiu roubar: $%d dólares de você.",PlayerName(playerid), roubo);
					SendClientMessage(plid, COLOR_RED2, string);
		            AddPlayerMoney(plid,-roubo,-1);
					format(string, sizeof(string), "Você conseguiu roubar $%d dólares de %s",roubo,PlayerName(plid));
				    SendClientMessage(playerid, COLOR_ASSALTANTE, string);
		           	AddPlayerMoney(playerid, roubo, 3);
		           	RouboMao[playerid] = 1;
		           	SetTimerEx("RouboMao",300000,false,"d",playerid);
	           		AcrescentarExPoints(playerid,1);
					new sorte = random(4);
					if(sorte == 4){
						format(string,sizeof(string),"[JORNAL] Informantes da polícia, acabam de nos informar que alguém foi assaltado. [Pricipal suspeito: %s]",PlayerName(playerid));
						SendClientMessageToAll(COLOR_JORNALISTA, string);
						format(string, sizeof(string), "[CENTRAL] [Crime: Roubo].  Criminoso: %s - Vítima %s - Testemunha: Desconhecido.",PlayerName(playerid),PlayerName(plid));
						SendClientMessageToAll(COLOR_COP_SWAT, string);
					}
				}
			}
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Assaltante.");
			return 1;
		}
	}
	if(strcmp(cmd, "/bafometro", true) == 0) {
	    if(Profissao[playerid] == COP_MILITAR || Profissao[playerid] == EXERCITO || Profissao[playerid] == COP_RODOVIARIO || Profissao[playerid] == COP_SWAT || IsPlayerAdmin(playerid)){
		    new tmp[256];
		    new string[256];
      		new plid;
			new distancia;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/bafometro [id]");
				return 1;
			}
         	plid = strval(tmp);
			if(IsPlayerConnected(plid) && Logado[playerid] == 1){
	    		distancia = GetDistanceBetweenPlayers(playerid, plid);
			    if(distancia > 15){
			        SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto!");
					return 1;
				}
				format(string, sizeof(string), "O Bafômetro mostrou: %d MG de alcool no sangue do suspeito.", Bebida[plid]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(plid, COLOR_GRAY, string);
				if(Bebida[plid] > 3){
					SendClientMessage(playerid, COLOR_COP_SWAT, "Suspeito Com quantidade de alcool acima do permitido.");
					return 1;
				} else if(Bebida[plid] < 3){
					SendClientMessage(playerid, COLOR_COP_SWAT, "Suspeito Com quantidade de alcool permitada pela lei.");
					return 1;
				}
			} else {
	            SendClientMessage(playerid, COLOR_GRAY, "Jogador não está conectado/logado");
				return 1;
			}
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não faz parte do departamento de policia!");
			return 1;
		}
	}
    if(strcmp(cmd, "/camuflar", true) == 0) {
		if(Profissao[playerid] == VENDEDOR_DE_ARMAS || IsPlayerAdmin(playerid)){
			new tmp[256];
			new plid,tempo,custo,string[256];
			tmp = strtok(cmdtext,idx);
			plid = strval(tmp);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAY, "USO: /camuflar [id/do/jogador] [minutos]");
				return 1;
			}
			tmp = strtok(cmdtext,idx);
			tempo = strval(tmp);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAY, "USO: /camuflar [id/do/jogador] [minutos]");
				return 1;
			}
			if(!IsPlayerConnected(plid)){
				SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado");
				return 1;
			}
			if(tempo > 10){
				SendClientMessage(playerid, COLOR_GRAY, "Tempo máximo de 10 minutos!");
				return 1;
			}
			if(tempo < 1){
				SendClientMessage(playerid, COLOR_GRAY, "Tempo mínimo de 1 minuto!");
				return 1;
			}
			custo = tempo*50;
			if(GetPlayerMoney(plid) < custo){
				SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não possui dinheiro!");
				return 1;
			}
			if(plid == playerid){
				SendClientMessage(playerid, COLOR_GRAY, "Você não pode se auto-camuflar!");
				return 1;
			}
			if(Camuflado[plid] == 1){
			    SendClientMessage(playerid, COLOR_GRAY, "Ei, esse jogador já está camuflado!");
			    return 1;
			}
			else{
				Camuflado[plid] = 1;
				SetPlayerColor(plid,0xFFFFFF00);
				format(string,sizeof(string),"%s te camuflou por %d minutos! A camuflagem custou $%d",PlayerName(playerid),tempo,custo);
				SendClientMessage(plid, COLOR_VENDEDOR_DE_ARMAS, string);
				format(string,sizeof(string),"Camuflagem aplicada! Ela custou $%d mas você ficou com 50 por cento! Resultado: você ficou com $%d",custo,custo/2);
				SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS, string);
				AddPlayerMoney(plid,-custo,-1);
				AddPlayerMoney(playerid,custo/2,3);
				if(JogadorContratado(playerid,5)) AcrescentarLucro(5,custo/2);
				AcrescentarExPoints(playerid,1);
				SetTimerEx("FimCamuflagem",tempo*60000,0,"d",plid);
				for(new i; i<SLOTS2; i++){
		    		ShowPlayerNameTagForPlayer(plid,i,0);
				}
				return 1;
			}
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "Você não é Vendedor de Armas!");
			return 1;
			}
	}
	if(strcmp(cmd, "/venderarma", true) == 0) {
        if(Profissao[playerid] == VENDEDOR_DE_ARMAS || IsPlayerAdmin(playerid)){
            new string[256];
			new tmp[256];
			new plid, weaponid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAY, "/venderarma [id] [id/da/arma]");
				return 1;
			}
		    plid = strval(tmp);
    	    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/venderarma [id] [id/da/arma]");
				return 1;
			}
			if(plid == playerid){
				SendClientMessage(playerid, COLOR_GRAY, "Você não pode vender armas para você!");
				return 1;
			}
			weaponid= strval(tmp);
			if(weaponid< 1 || weaponid > 16 && weaponid< 22 || weaponid > 33){
			    SendClientMessage(playerid, COLOR_GRAY, "0-46 são os ids de armas.");
				return 1;
			}
		    if(GetDistanceBetweenPlayers(playerid,plid) > 20){
		       	SendClientMessage(playerid,COLOR_GRAY,"Você está muito longe, chegue mais perto!");
				return 1;
			}
			if(!IsPlayerConnected(plid)){
		       	SendClientMessage(playerid,COLOR_GRAY,"Ele não está presente.");
				return 1;
			}
   			if(GetPlayerMoney(plid) < valorarma[weaponid]){
		       	SendClientMessage(playerid,COLOR_GRAY,"Ele não tem dinheiro para pagar a arma.");
				return 1;
			}
   			if(VendendoArmas[playerid] == 1){
		       	SendClientMessage(playerid,COLOR_GRAY,"Você já está com uma negociação, espere o resultado.");
				return 1;
			}
       		format(string,sizeof(string),"[AMMU] Você ofereceu a arma %s por $%d a %s, aguarde resposta.",weaponname[weaponid], valorarma[weaponid], PlayerName(plid));
      		SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS , string);
	 		format(string,sizeof(string),"O Vendedor de Armas %s está lhe oferencendo uma %s por $%d",PlayerName(playerid),weaponname[weaponid], valorarma[weaponid]);
      		SendClientMessage(plid, COLOR_GREEN , string);
       		SendClientMessage(plid, COLOR_GREEN, "Para aceitar a arma digite: /aceitararma ou /recusararma.");
	 		Armas[plid] = weaponid;
	 		VendendoArmas[playerid] = 1;
   			SetTimerEx("CancelarArma",45000,0,"dd",playerid,plid);
   			VendedorVirou[plid] = playerid;
   			return 1;
	   	}
	}

	if(strcmp(cmd, "/aceitararma", true) == 0) {
   		if(Armas[playerid] == 0){
	       	SendClientMessage(playerid,COLOR_GRAY, "Não foi oferecida nenhuma arma a você.");
			return 1;
		}
   		if(GetPlayerMoney(playerid) < valorarma[Armas[playerid]]){
	       	SendClientMessage(playerid,COLOR_GRAY,"Você não tem dinheiro para pagar a arma.");
			return 1;
		}
		new venda;
		new string[256];
		GivePlayerWeapon(playerid, Armas[playerid], armamuni[Armas[playerid]]);
		format(string, sizeof(string), "[VENDEDOR] Você comprou a arma: %s pelo valor de $%d",weaponname[Armas[playerid]], valorarma[Armas[playerid]] );
       	SendClientMessage(playerid, COLOR_JUIZ, string);
      	venda = valorarma[Armas[playerid]]/18;
      	AddPlayerMoney(VendedorVirou[playerid], venda, 3);
       	AddPlayerMoney(playerid, 0-valorarma[Armas[playerid]], -1);
	 	format(string,sizeof(string),"[AMMU] Arma vendida. Você recebeu $%d pela venda dela.",venda);
      	SendClientMessage(VendedorVirou[playerid], COLOR_GREEN , string);
      	AcrescentarExPoints(VendedorVirou[playerid] ,1);
      	Armas[playerid] = 0;
 		VendendoArmas[VendedorVirou[playerid]] = 0;
      	if(JogadorContratado(playerid,5)){
      	    new propertielucro = valorarma[Armas[playerid]]-venda;
	 		AcrescentarLucro(5,propertielucro);
		}
		return 1;
	}

	if(strcmp(cmd, "/recusararma", true) == 0) {
   		if(Armas[playerid] != 0){
	       	SendClientMessage(playerid,COLOR_GRAY, "Não foi oferecida nenhuma arma a você.");
			return 1;
		}
		new string[256];
		SendClientMessage(playerid, COLOR_JUIZ, "[VENDEDOR] Você recusou a arma, quando quiser, disponha.");
	 	format(string,sizeof(string),"[AMMU] Arma recusada. %s recusou a oferta da arma.",PlayerName(playerid));
      	SendClientMessage(VendedorVirou[playerid], COLOR_GREEN , string);
      	Armas[playerid] = 0;
 		VendendoArmas[VendedorVirou[playerid]] = 0;
	}

	if(strcmp(cmd,"/colete",true) == 0) {
  		if(Profissao[playerid] == VENDEDOR_DE_ARMAS || IsPlayerAdmin(playerid)){
		   new tmp[256];
		   new plid;
		   tmp = strtok(cmdtext,idx);
		   plid = strval(tmp);
		   if(!strlen(tmp)){
		   		SendClientMessage(playerid, COLOR_GRAY, "/colete [id]");
		   		return 1;
		   }
		   if(Profissao[plid] == VENDEDOR_DE_ARMAS){
				SendClientMessage(playerid, COLOR_GRAY, "Você não pode vender armas para você!");
				return 1;
	       }
	       if(GetPlayerMoney(plid) < 200){
	            SendClientMessage(playerid, COLOR_GRAY, "O jogador não tem dinheiro!");
	            return 1;
		   }
		   if(IsPlayerConnected(plid)){
		   		SetPlayerArmour(plid,100);
		   		SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS, "Colete vendido");
		   		SendClientMessage(plid, COLOR_VENDEDOR_DE_ARMAS, "Você recebeu um colete");
		   		AddPlayerMoney(plid,-200,-1);
		   		if(JogadorContratado(playerid,5)){
		   		    AddPlayerMoney(playerid,100,3);
		   		    AcrescentarLucro(5,100);
		   		    SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS, "Você recebeu $100 e o resto ficou com a sua propriedade!");
				}
				else{
				    AddPlayerMoney(playerid,200,3);
				    SendClientMessage(playerid, COLOR_VENDEDOR_DE_ARMAS, "Você recebeu $200 pela venda.");
				}
      	   		return 1;
		   }
		   else{
			   SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado");
			   return 1;
			   }
		   }
		   else{
			   SendClientMessage(playerid, COLOR_GRAY, "Você não é vendedor de armas!");
			   return 1;
		   }
	}

//Assassino
	if(strcmp(cmd, "/premios", true) == 0) {
		if(Profissao[playerid] == ASSASSINO || IsPlayerAdmin(playerid)){
			new string[256];
			new qt = 0;
			for(new i = 0; i < SLOTS2; i++){
				if(pStats[i][ValorCabeca] > 0 && IsPlayerConnected(i)) {
				    format(string,sizeof(string),"ID: %d | Nome: %s | Valor da cabeça: %%d,00 dólares",i,PlayerName(i),pStats[i][ValorCabeca]);
					SendClientMessage(playerid, COLOR_ASSASSINO, string);
					qt++;
				}
			}
			if(qt == 0){
				SendClientMessage(playerid, COLOR_GRAY, "Ninguém com a cabeça premiada conectado nesse instante!");
			}
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "Você não é Assassino!");
		}
		return 1;
	}
	if(strcmp(cmd, "/sequestrar", true) == 0) {
	    if(Profissao[playerid] == ASSASSINO || IsPlayerAdmin(playerid)){
			new tmp[256];
			new plid;
	    	new distancia;
			tmp = strtok(cmdtext, idx);
			plid = strval(tmp);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/sequestrar [id]");
				return 1;
	        }
         	if(Sequestro[plid] == 1) {
				SendClientMessage(playerid, COLOR_GRAY, "Esta Pessoa já está Sequestrada!");
				return 1;
			}
			if(Cativeiro[plid] == 1) {
				SendClientMessage(playerid, COLOR_GRAY, "Esta Pessoa já está no Cativeiro!");
				return 1;
			}
			if(plid == playerid){
				SendClientMessage(playerid, COLOR_GRAY, "Você não pode se auto-sequestrar!");
				return 1;
			}
			distancia = GetDistanceBetweenPlayers(playerid, plid);
			if(distancia > 10) {
   				SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto!");
				return 1;
			}
	        if(IsPlayerConnected(plid) && Logado[playerid] == 1) {
				new Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:distancex,Float:distancey,Float:distancez;
				GetPlayerPos(playerid,x,y,z);
				GetPlayerPos(plid,x2,y2,z2);
				distancex = x - x2;
				distancey = y - y2;
				distancez = z - z2;
				if(floatround(distancex) < 2 && floatround(distancex) > -2 && floatround(distancey) < 2 && floatround(distancey) > -2 && floatround(distancez) < 2 && floatround(distancez) > -2){
		    		TogglePlayerControllable(plid,0);
		    		SendClientMessage(playerid, COLOR_GRAY, "Individuo sequestrado, tome cuidado com a polícia.");
		    		SendClientMessage(playerid, COLOR_ASSALTANTE, "Comandos: /chutar /empurrar /levar /largar /pornoveiculo /desamarrar");
					SendClientMessage(plid,COLOR_GRAY, "Rápido alguém te amarrou por trás. Pegue seu celular ligue rápido para a policia /190, pode ser um sequestrador!!");
					SetTimerEx("LigandoPolicia",7000,0,"d",plid);
					SetTimerEx("LevandoProCativeiro",10000,0,"dd",playerid,plid);
					Sequestrador[plid] = playerid;
					Sequestro[plid] = 1;
		    		Amarrado[plid]=1;
					Amarrou[playerid]=1;
					AmarradoInfo[plid][0]=playerid;
		    		AmarradoInfo[playerid][1]=plid;
				} else {
			    	SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto para imobilizá-lo");
			    	return 1;
				}
			} else{
    	        SendClientMessage(playerid, COLOR_GRAY, "Jogador não está conectado/logado");
				return 1;
			}
		}
	}

    if(strcmp(cmd, "/resgate", true) == 0 && Cativeiro[playerid] == 1) {
	  if(Cativeiro[playerid] == 1){
		Sequestro[playerid] = 0;
		Cativeiro[playerid] = 0;
		LogarPlayer(playerid);
		SendClientMessage(playerid, COLOR_GREEN, "Você pagou o resgate no valor de $5000 e foi solto.");
		pStats[playerid][Banco] -= 5000;
		AddPlayerMoney(Sequestrador[playerid], 5000, 3);
		SendClientMessage(Sequestrador[playerid], COLOR_GRAY, "Você recebeu a fuga no valor de $5000!");
		return 1;
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "Você não está sequestrado!");
			return 1;
			}
	}

	if(strcmp(cmd, "/fugir", true) == 0) {
      if(Sequestro[playerid] == 1){
		Sequestro[playerid] = 0;
		SendClientMessage(playerid, COLOR_GREEN, "Você pagou a fuga no valor de $1500 e conseguiu fugir.");
		pStats[playerid][Banco] -= 1500;
		AddPlayerMoney(Sequestrador[playerid], 1500, 3);
		SendClientMessage(Sequestrador[playerid], COLOR_GRAY, "Você recebeu a fuga no valor de $1500!");
		return 1;
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "Você não está sequestrado!");
			return 1;
			}
	}

	if(strcmp(cmd, "/radar", true) == 0) {
	    if(Profissao[playerid] == COP_RODOVIARIO || Profissao[playerid] == EXERCITO || Profissao[playerid] == COP_SWAT || IsPlayerAdmin(playerid) == 1){
		    new tmp[256];
		    new plid;
			new distancia, velocidade, desconto, exesso;
		    distancia = GetDistanceBetweenPlayers(playerid, plid);
            velocidade = Velo[plid];
            exesso = velocidade - 120;
 			desconto = exesso*30;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/radar [id]"); return 1;
			}
	        plid = strval(tmp);
			if(IsPlayerConnected(plid) && Logado[playerid] == 1){
				if(distancia > 50){
			        SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto!"); return 1;
				}
				if(distancia <= 50){
				    if(velocidade < 120){
				        new string[MAX_STRING];
						format(string, sizeof(string), "O RADAR mostra: %d KpH de velocidade no carro de %s!", velocidade, PlayerName(plid));
						SendClientMessage(playerid, COLOR_YELLOW, string); return 1;
					}
					if(velocidade > 120){
					    pStats[plid][Banco] -= desconto;
					    new string2[MAX_STRING];
					    format(string2, MAX_STRING, "O RADAR mostrou que %s estava a %d KpH e foi dada a multa de $%d para esta pessoa!", PlayerName(plid), velocidade, desconto);
						SendClientMessage(playerid, COLOR_GRAY, string2);
	        			new string[MAX_STRING];
					    format(string, sizeof(string), "Você passou no radar de um policial rodoviário a %d KpH, e levou uma multa de $%d por estar acima da velocidade permitida!", velocidade, desconto);
						SendClientMessage(plid, COLOR_GRAY, string); return 1;
					} return 1;
				} return 1;
			}
			else{
	            SendClientMessage(playerid, COLOR_GRAY, "Jogador no est conectado/logado"); return 1;
			}
		}
		if(Profissao[playerid] != COP_MILITAR || Profissao[playerid] != COP_RODOVIARIO || Profissao[playerid] != COP_SWAT){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não  policial"); return 1;
		} return 1;
	}

	if (strcmp(cmd, "/pedirarma", true)==0){
		new tmp[256];
		new string[256];
	    strmid(tmp, cmdtext, 10, strlen(cmdtext));
		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_GRAY, "/pedirarma [arma]");
			return 1;
		}
		if(pStats[playerid][PhoneNumb] == 0){
			SendClientMessage(playerid, COLOR_YELLOW, "Você não tem celular!");
			return 1;
		}
		else{
		    for(new i=0; i<SLOTS2; i++){
		        if(Profissao[i] == VENDEDOR_DE_ARMAS){
	    			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
					SetTimerEx("AcaoEspecial",6000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		           	SendClientMessage(playerid,COLOR_VENDEDOR_DE_ARMAS,"A mensagem foi enviada para o vendedor de armas.");
					format(string, sizeof(string), "%s pediu a arma: %s", PlayerName(playerid), tmp);
					SendClientMessageVendedor(COLOR_JUIZ, string);
				    SendClientMessage(playerid, COLOR_COP_SWAT, "Pedido de arma enviado!");
		        }
			}
            return 1;
		}
 	}

	if(strcmp(cmd, "/medemitir", true) == 0) {
	    if(Profissao[playerid] == DESEMPREGADO) return SendClientMessage(playerid, COLOR_GRAY, "Tá querendo se demitir de desempregado?");
		PedindoDemissao[playerid] = 1;
		if(pStats[playerid][NM] == 0){
			SendClientMessage(playerid, COLOR_WHITE, "Atenção!!! Se pedir demissão terá que trabalhar como desempregado!");
			SendClientMessage(playerid, COLOR_WHITE, "Tem certeza que quer se demitir?");
			SendClientMessage(playerid, COLOR_WHITE, "/sim | /nao");
		} else {
			SendClientMessage(playerid, COLOR_WHITE, "Tem certeza que quer se demitir?");
			SendClientMessage(playerid, COLOR_WHITE, "/sim | /nao");
			return 1;
		}
	}
	if(strcmp(cmd, "/sim", true) == 0) {
		if(PedindoDemissao[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Use /medemitir primeiro!");
		PedindoDemissao[playerid] = 0;
		pStats[playerid][Prof] = 1;
		Profissao[playerid] = 1;
		LogarPlayer(playerid);
		TrancarVeiculoPorProf(playerid);
		new string[256];
		format(string,sizeof(string),"[INFO] O jogador %s pediu demissão de sua profissão!",PlayerName(playerid));
		SendClientMessageToAll(COLOR_COP_SWAT, string);
		writelog(string);
		LogarPlayer(playerid);
		SetPlayerPos(playerid,ProfPos[1][0],ProfPos[1][1],ProfPos[1][2]);
		GameTextForPlayer(playerid,"~r~DEMITIDO!",4000,4);
		return 1;
	}
	if(strcmp(cmd,"/nao",true) == 0) {
	    if(PedindoDemissao[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Use /medemitir primeiro!");
	    SendClientMessage(playerid, COLOR_WHITE, "Pedido de demissão recusado!");
	    PedindoDemissao[playerid] = 0;
	    return 1;
	}
    if(strcmp(cmd, "/demitindoazarados", true) == 0){
		if(IsPlayerAdmin(playerid)){
			new tmp[256];
			new plid;
			tmp = strtok(cmdtext,idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAY, "USO: /demitindoazarados [id/do/jogador]");
				return 1;
			}
			plid = strval(tmp);
			if(!IsPlayerConnected(plid)){
				SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado");
				return 1;
			}
			if(Profissao[plid] == DESEMPREGADO){
				SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não possui uma profissão!");
				return 1;
			}
			else{
			    pStats[plid][Prof] = 1;
				Profissao[plid] = 1;
				LogarPlayer(plid);
				TrancarVeiculoPorProf(plid);
				SendClientMessage(playerid, COLOR_WHITE, "Jogador demitido!");
				SendClientMessage(plid, COLOR_GRAY, "Você foi demitido de sua profissão!");
				new string[256];
				format(string,sizeof(string),"[INFO] O jogador %s foi DEMITIDO de sua profissão.",PlayerName(plid));
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				writelog(string);
				LogarPlayer(plid);
				SetPlayerPos(plid,ProfPos[1][0],ProfPos[1][1],ProfPos[1][2]);
				GameTextForPlayer(plid,"~r~DEMITIDO!",4000,4);
				return 1;
			}
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão!");
			return 1;
		}
	}
	if(strcmp(cmd, "/desbanir", true) == 0) {
		if(IsPlayerAdmin(playerid)){
			new pname[256];
			pname = strtok(cmdtext,idx);
			if(!strlen(pname)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /desbanir [nome]");
			if(!fexist(PlayerFile(pname))) return SendClientMessage(playerid, COLOR_GRAY, "Conta inexistente!");
			if(strval(GetValue(pname,"Banido")) == 0) return SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está Banido!");
			SetValue(PlayerFile(pname),"Banido","0");
			SendClientMessage(playerid, COLOR_JUIZ, "Desbanido...");
			return 1;
		}
	}
	if(strcmp(cmd, "/banir", true) == 0) {
		if(IsPlayerAdmin(playerid)){
			new plid = strval(strtok(cmdtext,idx));
			if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador desconectado!");
            new motivo[256];
            new string[256];
			motivo = strtok(cmdtext,idx);
			if(!strlen(motivo)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /banir [id] [motivo]");
            new Hora,Minuto,Segundo,Ano,Mes,Dia;
            gettime(Hora,Minuto,Segundo);
			getdate(Ano,Mes,Dia);
			format(string,sizeof(string),"[%s/%s/%s - %s:%s:%s] %s banido por %s | Motivo: %s",ApplyZero(Dia),ApplyZero(Mes),ApplyZero(Ano),ApplyZero(Hora),ApplyZero(Minuto),ApplyZero(Segundo),PlayerName(plid),PlayerName(playerid),motivo);
            writebanlog(string);
            format(string,sizeof(string),"O administrador %s BANIU %s! MOTIVO: %s",PlayerName(playerid),PlayerName(plid),motivo);
			writelog(string);
			print(string);
			SendClientMessageToAll(COLOR_WHITE, string);
            Banir(plid,motivo);
			return 1;
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão!");
		}
	}
    if(strcmp(cmd,"/dinheiro",true)==0)
	{
		if(IsPlayerAdmin(playerid))
		{
			new tmp[256];
			new plid,quantidade;
			tmp = strtok(cmdtext,idx);
			plid = strval(tmp);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAY, "USO: /dinheiro [id] [quantidade]");
				return 1;
			}
			tmp = strtok(cmdtext,idx);
			quantidade = strval(tmp);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAY, "USO: /dinheiro [id] [quantidade]");
				return 1;
			}
			if(IsPlayerConnected(plid)){
				AddPlayerMoney(plid, quantidade, 11);
				new string[256];
				format(string, sizeof(string),"O administrador %s lhe entregou R$%d.",PlayerName(playerid), quantidade);
				SendClientMessage(plid, COLOR_WHITE, string);
				format(string, sizeof(string),"Você entregou $%d,00 dólares para %s",quantidade,PlayerName(plid));
				SendClientMessage(playerid, COLOR_LIXEIRO, string);
				return 1;
			}
			else{
				SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado.");
				return 1;
			}
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão.");
			return 1;
		}
	}
	if(strcmp(cmd, "/acrescentarexpoints", true) == 0 && IsPlayerAdmin(playerid)) {
	    new plid = strval(strtok(cmdtext,idx)), arg = strval(strtok(cmdtext,idx)), string[256];
	    if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
	    if(arg <= 0) return SendClientMessage(playerid, COLOR_GRAY, "USO: /acrescentarexpoints [id] [expoints]");
		format(string,sizeof(string),"Você entregou %d ExPoint's para o jogador %s",arg,PlayerName(plid));
		SendClientMessage(playerid, COLOR_AZUL2, string);
		format(string,sizeof(string),"Você recebeu %d ExPoint's do administrador %s",arg,PlayerName(playerid));
		SendClientMessage(plid, COLOR_AZUL2, string);
		AcrescentarExPoints(plid,arg);
		return 1;
	}
	if(strcmp(cmd, "/diminuirexpoints", true) == 0 && IsPlayerAdmin(playerid)) {
	    new plid = strval(strtok(cmdtext,idx)), arg = strval(strtok(cmdtext,idx)), string[256];
	    if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
	    if(arg <= 0) return SendClientMessage(playerid, COLOR_GRAY, "USO: /diminuirexpoints [id] [expoints]");
		format(string,sizeof(string),"Você diminui %d ExPoint's do jogador %s",arg,PlayerName(plid));
		SendClientMessage(playerid, COLOR_AZUL2, string);
		format(string,sizeof(string),"Você perdeu %d ExPoint's pelo administrador %s",arg,PlayerName(playerid));
		SendClientMessage(plid, COLOR_AZUL2, string);
		DiminuirExPoints(plid,arg);
		return 1;
	}
	if(strcmp(cmd, "/setlevel", true) == 0 && IsPlayerAdmin(playerid)) {
	    new plid = strval(strtok(cmdtext,idx)), arg = strval(strtok(cmdtext,idx)), string[256];
	    if(!IsPlayerConnected(plid)) return SendClientMessage(playerid, COLOR_GRAY, "Jogador nao conectado/logado.");
	    if(arg <= 0) return SendClientMessage(playerid, COLOR_GRAY, "USO: /setlevel [id] [level]");
		format(string,sizeof(string),"Você setou o Level de %s para %d",PlayerName(plid),arg);
		SendClientMessage(playerid, COLOR_AZUL2, string);
		format(string,sizeof(string),"Seu Level foi setado para %d pelo administrador %s",arg,PlayerName(playerid));
		SendClientMessage(plid, COLOR_AZUL2, string);
		pStats[plid][XL] = arg;
		return 1;
	}
	if(strcmp(cmd, "/empregandosortudos", true) == 0 && IsPlayerConnected(playerid)) {
		if(IsPlayerAdmin(playerid) == 1) {
		    new tmp[256];
	    	new plid;
		    new prof;
		    new string[256];
			plid = playerid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/empregandosortudos [prof]");
				return 1;
			}
	        prof = strval(tmp);
	        if(IsPlayerConnected(plid)){
	        if(IsPlayerInAnyVehicle(plid)) RemovePlayerFromVehicle(playerid);
        	if(prof > 0 && prof < 41 ){
        	        DisablePlayerCheckpoint(playerid);
        	        pStats[plid][Prof] = prof;
					format(string, sizeof(string), "Você mudou a profissão de %s para %s." , PlayerName(plid), ProfExtName[prof]);
					SendClientMessage(playerid, COLOR_GREEN, string);
					SendClientMessage(plid, COLOR_GREEN, "Para ver os comandos da sua profissão digite /profissao.");
        	     	SendClientMessage(plid, COLOR_ROSA,  "Para saber as regras digite /regras1 e /regras2");
					Profissao[plid] = prof;
					TrancarVeiculoPorProf(plid);
					LogarPlayer(plid);
					SetPlayerPos(plid,ProfPos[prof][0],ProfPos[prof][1],ProfPos[prof][2]);
					format(string,sizeof(string),"~w~%s",ProfGT[prof]);
					GameTextForPlayer(plid,string,3000,3);
					SetPlayerInterior(plid,0);
				    return 1;
					} else {
				    SendClientMessage(playerid, COLOR_GRAY, "Essa não é uma profissão válida!");
					return 1;
				}
			} else {
			    SendClientMessage(playerid, COLOR_GRAY, "Jogador não está conectado/logado");
				return 1;
			}
		} else {
			SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão para isso!");
			return 1;
		}
	}

	if(strcmp(cmd, "/pt", true)==0){
		new tmp[256];
		new string[256];
	    strmid(tmp, cmdtext, 3, strlen(cmdtext));
		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_GRAY, "/pt [texto]");
			return 1;
		}
		for(new i=0; i<SLOTS2; i++){
			new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
			new modelo2 = GetVehicleModel(GetPlayerVehicleID(i));
			if(IsPlayerConnected(i)){
				if(Profissao[i] == Profissao[playerid]){
					if(Profissao[playerid] == COP_MILITAR || Profissao[playerid] == EXERCITO || Profissao[playerid] == COP_RODOVIARIO || Profissao[playerid] == COP_SWAT || Profissao[playerid] == COP_NARCOTICOS || Profissao[playerid] == DELEGADO || IsPlayerAdmin(playerid)){
						if(modelo == 596 || modelo == 497 || modelo == 597 || modelo == 598 || modelo == 599 || modelo == 523 || modelo == 490 || modelo == 427){
							if(modelo2 == 596 || modelo2 == 497 || modelo2 == 597 || modelo2 == 598 || modelo2 == 599 || modelo2 == 523 || modelo2 == 490 || modelo2 == 427){
								format(string, sizeof(string), "[RADIO COP] %s: %s,câmbio", PlayerName(playerid), tmp);
								SendClientMessage(i, COLOR_COP_RODOVIARIO, string);
							}
						} else {
					    	SendClientMessage(playerid, COLOR_GRAD1, "Você não pode enviar mensagem sem estar num carro com radio da sua profissao.");
					    	return 1;
					    }
					}
					if(Profissao[playerid] == TAXISTA || Profissao[playerid] == MOTOTAXI || Profissao[playerid] == TAXI_AEREO){
						if(modelo == 586 || modelo == 420 || modelo ==  487){
							if(modelo2 == 586 || modelo2 == 420 || modelo2 ==  487){
								format(string, sizeof(string), "[RADIO TAXI] %s: %s,câmbio", PlayerName(playerid), tmp);
								SendClientMessage(i, COLOR_TAXISTA, string);
							}
						} else {
						    SendClientMessage(playerid, COLOR_GRAD1, "Você não pode enviar mensagem sem estar num carro com radio da sua profissao.");
						    return 1;
						}
					}
					if(Profissao[playerid] == MOTORISTA_DE_ONIBUS){
					    if(modelo == 431){
					    	if(modelo2 == 431){
								format(string, sizeof(string), "[RADIO BUS] %s: %s,câmbio", PlayerName(playerid), tmp);
								SendClientMessage(i, COLOR_MOTORISTA_DE_ONIBUS, string);
							}
						} else {
						    SendClientMessage(playerid, COLOR_GRAD1, "Você não pode enviar mensagem sem estar num carro com radio da sua profissao.");
						    return 1;
						}
					}
					if(Profissao[playerid] == CAMINHONEIRO){
						if(modelo == 428 || modelo == 406 || modelo == 515){
							if(modelo2 == 428 || modelo2 == 406 || modelo2 == 515){
								format(string, sizeof(string), "[RADIO CAMINHAO] %s: %s,câmbio", PlayerName(playerid), tmp);
								SendClientMessage(i, COLOR_CAMINHONEIRO, string);
							}
						} else {
						    SendClientMessage(playerid, COLOR_GRAD1, "Você não pode enviar mensagem sem estar num carro com radio da sua profissao.");
						    return 1;
						}
					}
					if(Profissao[playerid] == PESCADOR){
					    if(modelo == 453){
					    	if(modelo2 == 453){
								format(string, sizeof(string), "[RADIO CAMINHAO] %s: %s,câmbio", PlayerName(playerid), tmp);
								SendClientMessage(i, COLOR_PESCADOR, string);
							}
						} else {
						    SendClientMessage(playerid, COLOR_GRAD1, "Você não pode enviar mensagem sem estar num carro com radio da sua profissao.");
						    return 1;
						}
					}
					if(Profissao[playerid] == ENTREGADOR_PIZZA){
					   	if(modelo == 448){
					   		if(modelo2 == 448){
								format(string, sizeof(string), "[RADIO PIZZA] %s: %s,câmbio", PlayerName(playerid), tmp);
								SendClientMessage(i, COLOR_ENTREGADOR_PIZZA, string);
							}
						} else {
						    SendClientMessage(playerid, COLOR_GRAD1, "Você não pode enviar mensagem sem estar num carro com radio da sua profissao.");
						    return 1;
						}
					}
					if(Profissao[playerid] == JORNALISTA){
					    if(modelo == 488 || modelo == 582){
					    	if(modelo2 == 488 || modelo2 == 582){
								format(string, sizeof(string), "[RADIO JORNAL] %s: %s,câmbio", PlayerName(playerid), tmp);
								SendClientMessage(i, COLOR_JORNALISTA, string);
							}
						} else {
						    SendClientMessage(playerid, COLOR_GRAD1, "Você não pode enviar mensagem sem estar num carro com radio da sua profissao.");
						    return 1;
						}
					}
					if(Profissao[playerid] == PARAMEDICO){
					   	if(modelo == 416){
					   		if(modelo2 == 416){
								format(string, sizeof(string), "[RADIO AMBULANCIA] %s: %s,câmbio", PlayerName(playerid), tmp);
								SendClientMessage(i, COLOR_PARAMEDICO, string);
							}
						} else {
						    SendClientMessage(playerid, COLOR_GRAD1, "Você não pode enviar mensagem sem estar num carro com radio da sua profissao.");
						    return 1;
						}
					}
					if(Profissao[playerid] == LIXEIRO){
					   	if(modelo == 408){
					   		if(modelo2 == 408){
								format(string, sizeof(string), "[RADIO LIMPEZA] %s: %s,câmbio", PlayerName(playerid), tmp);
								SendClientMessage(i, COLOR_LIXEIRO, string);
							}
						} else {
						    SendClientMessage(playerid, COLOR_GRAD1, "Você não pode enviar mensagem sem estar num carro com radio da sua profissao.");
						    return 1;
						}
					}
					if(Profissao[playerid] == TRANSPORTE_DE_VALORES){
						if(modelo == 428){
							if(modelo2 == 428){
								format(string, sizeof(string), "[RADIO FORTE] %s: %s,câmbio", PlayerName(playerid), tmp);
								SendClientMessage(i, COLOR_TRANSPORTE_DE_VALORES, string);
							}
						} else {
						    SendClientMessage(playerid, COLOR_GRAD1, "Você não pode enviar mensagem sem estar num carro com radio da sua profissao.");
						    return 1;
						}
					}
					if(Profissao[playerid] == PEDREIRA){
					   	if(modelo == 406){
					   		if(modelo2 == 406){
								format(string, sizeof(string), "[RADIO PEDRA] %s: %s,câmbio", PlayerName(playerid), tmp);
								SendClientMessage(i, COLOR_PEDREIRA, string);
							}
						} else {
						    SendClientMessage(playerid, COLOR_GRAD1, "Você não pode enviar mensagem sem estar num carro com radio da sua profissao.");
						    return 1;
						}
					}
					if(Profissao[playerid] == MECANICO){
					   	if(modelo == 552){
					   		if(modelo2 == 552){
								format(string, sizeof(string), "[RADIO OLEO] %s: %s,câmbio", PlayerName(playerid), tmp);
								SendClientMessage(i, COLOR_MECANICO, string);
							}
						} else {
						    SendClientMessage(playerid, COLOR_GRAD1, "Você não pode enviar mensagem sem estar num carro com radio da sua profissao.");
						    return 1;
						}
					}
				}
			}
			return 1;
		}
	}

	if (strcmp(cmdtext, "/instrucoes", true)==0){
	    if(Profissao[playerid] == BARMAN) {
	        SendClientMessage(playerid, COLOR_GREEN, "|---------------------------------| Instruções |--------------------------------------|");
	        SendClientMessage(playerid, COLOR_WHITE, "Você deve vender bebidas com o consentimento do jogador");
	        SendClientMessage(playerid, COLOR_WHITE, "O servidor proíbe a venda de mais de 3 bebidas para 1 único jogador,");
	        SendClientMessage(playerid, COLOR_WHITE, "no prazo de 20 minutos, sendo automaticamente kickado.");
	        SendClientMessage(playerid, COLOR_WHITE, "Você também dar a bebida por teor dependendo do que o cliente pedir.");
  	    }
		else if(Profissao[playerid] == ASSASSINO) {
      	    SendClientMessage(playerid, COLOR_GREEN, "|---------------------------------| Instruções |--------------------------------------|");
			SendClientMessage(playerid, COLOR_WHITE, "Sua profissão tem as habilidades de sequestrar e fazer carreira matando");
			SendClientMessage(playerid, COLOR_WHITE, "Sendo simples, sequestrar e esperar o sequestro ou o resgate,");
			SendClientMessage(playerid, COLOR_WHITE, "tomando cuidado com os policiais e jogadores que você tentou assassinar");
			SendClientMessage(playerid, COLOR_WHITE, "Existe 1 recurso que esconde você do mapa: /esconder-se");
   			SendClientMessage(playerid, COLOR_WHITE, "Com isso você pode se esconder, Fica ao seu critério.");
	    }
	    else if(Profissao[playerid] == VENDEDOR_DE_CARROS) {
	        SendClientMessage(playerid, COLOR_GREEN, "|---------------------------------| Instruções |--------------------------------------|");
            SendClientMessage(playerid, COLOR_WHITE, "A venda de carros é computada pelo computador e é vista por todos");
            SendClientMessage(playerid, COLOR_WHITE, "Caso seja visto algum abuso, haverá Kick ou até mesmo BAN de NICK!");
            SendClientMessage(playerid, COLOR_WHITE, "Os ids dos carros e preços está nessa tabela: /veiculos.");
        }
  		else if(Profissao[playerid] == CORRETOR) {
  		    SendClientMessage(playerid, COLOR_GREEN, "|---------------------------------| Instruções |--------------------------------------|");
            SendClientMessage(playerid, COLOR_WHITE, "Vende Casas, o servidor computa todas as casas");
            SendClientMessage(playerid, COLOR_WHITE, "Caso haja abuso poderá resultar em KICK ou BAN de NICK!");
            SendClientMessage(playerid, COLOR_WHITE, "Os preços das casas estão em /regras1 Lima- 5ª!");
        }
		else if(Profissao[playerid] == PESCADOR) {
		    SendClientMessage(playerid, COLOR_GREEN, "|---------------------------------| Instruções |--------------------------------------|");
       	 	SendClientMessage(playerid, COLOR_WHITE, "Descendo o rio você chegará na área de Pesca, a venda da pesca é");
			SendClientMessage(playerid, COLOR_WHITE, "No local aonde você spawna");
		}
	    else if(Profissao[playerid] == INSTRUTOR) {
      	    SendClientMessage(playerid, COLOR_GREEN, "|---------------------------------| Instruções |--------------------------------------|");
	        SendClientMessage(playerid, COLOR_WHITE, "Existe 2 carros com 1 vaga na meio para fazer a baliza pegue outro carro e peça");
			SendClientMessage(playerid, COLOR_WHITE, "para que o jogador coloque-o entre os carros, caso ele bata será adicionado $100");
            SendClientMessage(playerid, COLOR_WHITE, "no pagamento da carteira, feito isso peça que ele pegue outro carro e lhe leve até");
            SendClientMessage(playerid, COLOR_WHITE, "a casa do CJ, não precisa respeitar os sinais, e pode desrespeitar um pouco as faixas");
            SendClientMessage(playerid, COLOR_WHITE, "caso ele bata adicione mais $100 a cada batida na carteira");
            SendClientMessage(playerid, COLOR_WHITE, "Obs: O percurso é ida e volta, você pode orienta-lo");
            SendClientMessage(playerid, COLOR_WHITE, "para ver os preços das carteiras digite /carteiras");
            SendClientMessage(playerid, COLOR_WHITE, "Ao inicio do teste destranque o(s) veículo(s) da auto escola (/destrancarveiculoauto)");
            SendClientMessage(playerid, COLOR_WHITE, "Depois não esqueça de tranca-lo(s) novamente (/trancarveiculoauto)");
        }
        else if(Profissao[playerid] == COP_MILITAR) {
      	    SendClientMessage(playerid, COLOR_GREEN, "|---------------------------------| Instruções |--------------------------------------|");
	        SendClientMessage(playerid, COLOR_WHITE, "É proibido multar sem causa, resulta em Kick, alguns casos Ban!");
			SendClientMessage(playerid, COLOR_WHITE, "É proibido procurar sem causa.");
			SendClientMessage(playerid, COLOR_WHITE, "O reforco é solicitado caso você veja que está complicado pegar o miliante");
			SendClientMessage(playerid, COLOR_WHITE, "Para ver a carteira é necessário que o jogador esteja em 1 carro, caso o jogador esteja em");
			SendClientMessage(playerid, COLOR_WHITE, "um veiculo de outro jogador mais sem a chave original, prenda-o por roubo.");
			SendClientMessage(playerid, COLOR_WHITE, "É PROIBIDO prender assassino, caso ele mate algum jogador, é necessário mata-lo, não prender!");
			SendClientMessage(playerid, COLOR_WHITE, "Se o jogador estiver em um veículo público não apropriado para o seu trabalho, prenda-o por ROUBO de automóvel!");
			SendClientMessage(playerid, COLOR_WHITE, "A fiscalização de celular é feita quando houver roubos!");
     	}
        else if(Profissao[playerid] == COP_RODOVIARIO) {
      	    SendClientMessage(playerid, COLOR_GREEN, "|---------------------------------| Instruções |--------------------------------------|");
	        SendClientMessage(playerid, COLOR_WHITE, "É proibido multar sem causa, resulta em Kick, alguns casos Ban!");
			SendClientMessage(playerid, COLOR_WHITE, "É proibido procurar sem causa.");
			SendClientMessage(playerid, COLOR_WHITE, "O reforco é solicitado caso você veja que está complicado pegar o miliante");
			SendClientMessage(playerid, COLOR_WHITE, "Para ver a carteira é necessário que o jogador esteja em 1 carro, caso o jogador esteja em");
			SendClientMessage(playerid, COLOR_WHITE, "um veiculo de outro jogador mais sem a chave original, prenda-o por roubo.");
			SendClientMessage(playerid, COLOR_WHITE, "É PROIBIDO prender assassino, caso ele mate algum jogador, é necessário mata-lo, não prender!");
			SendClientMessage(playerid, COLOR_WHITE, "Se o jogador estiver em um veículo público não apropriado para o seu trabalho, prenda-o por roubo de automóvel!");
			SendClientMessage(playerid, COLOR_WHITE, "Para fazer 1 Blitz digite /cone e criará 1 cone");
			SendClientMessage(playerid, COLOR_WHITE, "A fiscalização de celular é feita quando houver roubos!");
		}
      	else if(Profissao[playerid] == COP_SWAT) {
      	    SendClientMessage(playerid, COLOR_GREEN, "|---------------------------------| Instruções |--------------------------------------|");
	        SendClientMessage(playerid, COLOR_WHITE, "É proibido multar sem causa, resulta em Kick, alguns casos Ban!");
			SendClientMessage(playerid, COLOR_WHITE, "É proibido procurar sem causa.");
			SendClientMessage(playerid, COLOR_WHITE, "O reforco é solicitado caso você veja que está complicado pegar o miliante");
			SendClientMessage(playerid, COLOR_WHITE, "Para ver a carteira é necessário que o jogador esteja em 1 carro, caso o jogador esteja em");
			SendClientMessage(playerid, COLOR_WHITE, "um veiculo de outro jogador mais sem a chave original, prenda-o por roubo.");
			SendClientMessage(playerid, COLOR_WHITE, "É PROIBIDO prender assassino, caso ele mate algum jogador, é necessário mata-lo, não prender!");
			SendClientMessage(playerid, COLOR_WHITE, "Se o jogador estiver em um veículo público não apropriado para o seu trabalho, prenda-o por roubo de automóvel!");
			SendClientMessage(playerid, COLOR_WHITE, "Para fazer 1 Blitz digite /cone e criará 1 cone");
			SendClientMessage(playerid, COLOR_WHITE, "A fiscalização de celular é feita quando houver roubos!");
      	}
      	else if(Profissao[playerid] == EXERCITO) {
      	    SendClientMessage(playerid, COLOR_GREEN, "|---------------------------------| Instruções |--------------------------------------|");
	        SendClientMessage(playerid, COLOR_WHITE, "É proibido multar sem causa, resulta em Kick, alguns casos Ban!");
			SendClientMessage(playerid, COLOR_WHITE, "É proibido procurar sem causa.");
			SendClientMessage(playerid, COLOR_WHITE, "O reforco é solicitado caso você veja que está complicado pegar o miliante");
			SendClientMessage(playerid, COLOR_WHITE, "Para ver a carteira é necessário que o jogador esteja em 1 carro, caso o jogador esteja em");
			SendClientMessage(playerid, COLOR_WHITE, "um veiculo de outro jogador mais sem a chave original, prenda-o por roubo.");
			SendClientMessage(playerid, COLOR_WHITE, "É PROIBIDO prender assassino, caso ele mate algum jogador, é necessário mata-lo, não prender!");
			SendClientMessage(playerid, COLOR_WHITE, "Se o jogador estiver em um veículo público não apropriado para o seu trabalho, prenda-o por roubo de automóvel!");
			SendClientMessage(playerid, COLOR_WHITE, "Para fazer 1 Blitz digite /cone e criará 1 cone");
			SendClientMessage(playerid, COLOR_WHITE, "A fiscalização de celular é feita quando houver roubos!");
      	}
      	else if(Profissao[playerid] == DELEGADO) {
      	    SendClientMessage(playerid, COLOR_GREEN, "|---------------------------------| Instruções |--------------------------------------|");
	        SendClientMessage(playerid, COLOR_WHITE, "É proibido multar sem causa, resulta em Kick, alguns casos Ban!");
			SendClientMessage(playerid, COLOR_WHITE, "É proibido procurar sem causa.");
			SendClientMessage(playerid, COLOR_WHITE, "O reforco é solicitado caso você veja que está complicado pegar o miliante");
			SendClientMessage(playerid, COLOR_WHITE, "Para ver a carteira é necessário que o jogador esteja em 1 carro, caso o jogador esteja em");
			SendClientMessage(playerid, COLOR_WHITE, "um veiculo de outro jogador mais sem a chave original, prenda-o por roubo.");
			SendClientMessage(playerid, COLOR_WHITE, "É PROIBIDO prender assassino, caso ele mate algum jogador, é necessário mata-lo, não prender!");
			SendClientMessage(playerid, COLOR_WHITE, "Se o jogador estiver em um veículo público não apropriado para o seu trabalho, prenda-o por roubo de automóvel!");
			SendClientMessage(playerid, COLOR_WHITE, "Para fazer 1 Blitz digite /cone e criará 1 cone");
			SendClientMessage(playerid, COLOR_WHITE, "A fiscalização de celular é feita quando houver roubos!");
      	}
      	else if(Profissao[playerid] == COP_NARCOTICOS) {
      	    SendClientMessage(playerid, COLOR_GREEN, "|---------------------------------| Instruções |--------------------------------------|");
	        SendClientMessage(playerid, COLOR_WHITE, "Sempre no calo do traficante, podendo checar as áreas e informar aos outros policiais");
			SendClientMessage(playerid, COLOR_WHITE, "É proibido procurar sem causa, prender sem causa, a prisão só pode ser concluída caso veja algum");
			SendClientMessage(playerid, COLOR_WHITE, "traficante vendendo drogas, reforco é solicitado caso você veja que está complicado pegar o miliante");
			SendClientMessage(playerid, COLOR_WHITE, "Quando alguém for pego no exame anti-dopping, leve esse para um Paramédico para fazer o tratamento e tirar as drogas");
			SendClientMessage(playerid, COLOR_WHITE, "do sangue desse jogador, depois prenda esse jogador...");
			SendClientMessage(playerid, COLOR_WHITE, "Blitz, carteiras, não faz parte do seu departamento!");
    	}
       	else if(Profissao[playerid] == RECEITA_FEDERAL) {
      	    SendClientMessage(playerid, COLOR_GREEN, "|---------------------------------| Instruções |--------------------------------------|");
	        SendClientMessage(playerid, COLOR_WHITE, "Você tem agentes infiltrados e consegue ver o que o Beco quer.");
			SendClientMessage(playerid, COLOR_WHITE, "Sendo o objetivo inviabilizar o desmanche dos carros nas oficinas podendo convocar a policia");
			SendClientMessage(playerid, COLOR_WHITE, "Existe vários tipos de contrabandos você pode checar se o jogador está contrabandeando algo.");
			SendClientMessage(playerid, COLOR_WHITE, "a prisão acaba sendo imediata.");
			SendClientMessage(playerid, COLOR_WHITE, "Cheque os veículos com o comando /vdocumentos, caso tenha encaminhoe até um oficial.");
		}
		else if(Profissao[playerid] ==  FRENTISTA){
		    SendClientMessage(playerid, COLOR_GREEN, "|---------------------------------| Instruções |--------------------------------------|");
	        SendClientMessage(playerid, COLOR_WHITE, "Vende gás para as pessoas que estão sem gasolina, caso o servidor registre algum abuso");
			SendClientMessage(playerid, COLOR_WHITE, "Resultará em Kick!");
		}
        else if(Profissao[playerid] ==  MECANICO){
            SendClientMessage(playerid, COLOR_GREEN, "|---------------------------------| Instruções |--------------------------------------|");
			SendClientMessage(playerid, COLOR_WHITE, "Reboca os carros, pinta, desamassa. Caso seja reparado algum abuso haverá Kick ou até mesmo Ban!");
	    }
	    else{
			SendClientMessage(playerid, COLOR_GREEN, "Profissão sem instruções");
		}
		return 1;
	}
	if(strcmp(cmdtext, "/profissao", true)==0){
		if(Profissao[playerid] == DESEMPREGADO) {
			SendClientMessage(playerid, COLOR_RED2, "Desempregado - Comandos:");
            SendClientMessage(playerid, COLOR_WHITE, "/pegarlata : Começa a fazer um circuito pegando latas. A cada 40 latas = 1XP");
            SendClientMessage(playerid, COLOR_WHITE, "/minhaslatas : Verifica quantas latas você possui!");
        	SendClientMessage(playerid, COLOR_WHITE, "/pararcoleta : Para de coletar latinhas!");
        	SendClientMessage(playerid, COLOR_WHITE, "/venderlatas : Vende suas latas!");
        	SendClientMessage(playerid, COLOR_RED2, "Você receberá 1 ExPoint a cada 30 latas coletadas.");
        	SendClientMessage(playerid, COLOR_RED2, "Essa profissão não costuma trazer muito futuro aos jogadores, sugerimos que você escolha outra na agência!");
        	SendClientMessage(playerid, COLOR_RED2, "Se não sabe onde é, digite /GPS 12");
		}
		else if(Profissao[playerid] == BARMAN) {
			SendClientMessage(playerid, COLOR_RED2, "Barman - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/cerveja [id] [teor] : Vender cerveja, pode ser detectado  no  sangue da pessoa.");
			SendClientMessage(playerid, COLOR_WHITE, "/whisky [id] [teor] : Vender whisky, pode detectar no sangue da pessoa.");
			SendClientMessage(playerid, COLOR_WHITE, "/pinga [id] [teor] : Vender pinga, pode ser detectado no sangue da pessoa.");
			SendClientMessage(playerid, COLOR_WHITE, "/guarana [id] [copos] : Vender guaraná, não é detectado no sangue da pessoa.");
			SendClientMessage(playerid, COLOR_WHITE, "/entregarbebidas : Entregar bebidas para um local.");
			SendClientMessage(playerid, COLOR_RED2, "Cuidado! Se a polícia pegar o seu cliente dirigindo bêbado, ele vai preso! Avise-o.");
			SendClientMessage(playerid, COLOR_RED2, "Locais de entregas de bebidas: Restaurante, Bar, Balada e Boate, para ver os que precisam abastecer digite /abastecimentos");
			SendClientMessage(playerid, COLOR_WHITE, "/instrucoes = para ver as instrucoes da sua profissão");
		}
		else if(Profissao[playerid] == ASSASSINO) {
			SendClientMessage(playerid, COLOR_RED2, "Assassino - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/sequestrar [id] : Sequestra uma pessoa para ganhar $$!");
            SendClientMessage(playerid, COLOR_WHITE, "/mandarmatar [id] : Comando que outro jogador poderá pedir para algum assassino mandar matar alguém.");
            SendClientMessage(playerid, COLOR_WHITE, "/premios : Ver os jogadores com a cabeça premiada.");
			SendClientMessage(playerid, COLOR_WHITE, "/instrucoes = para ver as instrucoes da sua profissão");
			SendClientMessage(playerid, COLOR_RED2, "Você também poderá matar jogadores com a cabeça premiada para poder ganhar $$ e XL.");
		}
		else if(Profissao[playerid] == VENDEDOR_DE_CARROS) {
			SendClientMessage(playerid, COLOR_RED2,  "Vendedor de Veículos - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/setcar [modelo] [ID/Nome do comprador] [cor1] [cor2] : Vende um carro (esteja com ele na posição de spawn).");
			SendClientMessage(playerid, COLOR_WHITE, "/trocardono [id] : Troca o dono do veículo");
			SendClientMessage(playerid, COLOR_WHITE, "/instrucoes = para ver as instrucoes da sua profissão");
			SendClientMessage(playerid, COLOR_RED2, "OBS: Não é mais preciso o ângulo ao setar carros!");
			SendClientMessage(playerid, COLOR_RED2, "REQUERIMENTO: Não venda veículos para si mesmo, caso contrário será demitido na hora!");
			SendClientMessage(playerid, COLOR_RED2, "Se quiser um veículo peça para um Administrador ou compre na concecionária ou a outro Vendedor de Carros.");
		}
		else if(Profissao[playerid] == CORRETOR) {
			SendClientMessage(playerid, COLOR_RED2, "Corretor de Imóveis - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/casa [ID/Nome do comprador] : Seta a casa para alguém (esteja na posiçao exterior à casa).");
			SendClientMessage(playerid, COLOR_WHITE, "/porcasaavenda [valor] : Botar uma casa a venda e aguardar compradores.");
			SendClientMessage(playerid, COLOR_WHITE, "/tirarcasaavenda : Tirar uma casa de venda, você deve estar nela.");
			SendClientMessage(playerid, COLOR_WHITE, "/comprarcasaavenda : Esse é o comando que os jogadores digitam pra comprar uma casa a venda.");
			SendClientMessage(playerid, COLOR_WHITE, "/instrucoes = para ver as instrucoes da sua profissão");
			SendClientMessage(playerid, COLOR_RED2, "REQUERIMENTO: Não venda imóveis para si mesmo, caso contrário será demitido na hora!");
			SendClientMessage(playerid, COLOR_RED2, "O limite de casas a venda que você pode colocar é 3, portanto selecione bem");
			SendClientMessage(playerid, COLOR_RED2, "Se quiser um imóvel peça para um Administrador ou compre de outro Corretor de Imóveis");
		}
		else if(Profissao[playerid] == SEGURANÇA) {
			SendClientMessage(playerid, COLOR_RED2, "Segurança - Comandos:");
 	    	SendClientMessage(playerid, COLOR_WHITE, "/contratarseguranca [id] [valor] : Esse é o comando que os jogadores usam para lhe contratar.");
 	    	SendClientMessage(playerid, COLOR_WHITE, "/demitirseguranca [id] : Esse é o comando que os jogadores usam para lhe demitir.");
 	    	SendClientMessage(playerid, COLOR_WHITE, "Quando algum jogador lhe oferecer proposta de contrato, não esqueça de digitar /aceitar ou /recusar");
 	    	SendClientMessage(playerid, COLOR_WHITE, "Sem comandos especiais, procure um jornalista e anuncie seus serviços.");
		}
		else if(Profissao[playerid] == MOTORISTA_PARTICULAR) {
		    SendClientMessage(playerid, COLOR_RED2, "Motorista Particular - Comandos:");
	    	SendClientMessage(playerid, COLOR_WHITE, "/lavarlimosine : Leva a limosine para a lavagem.");
			SendClientMessage(playerid, COLOR_WHITE, "/revisarlimosine : Faz revisão da limosine.");
		}
		else if(Profissao[playerid] == MOTORISTA_DE_ONIBUS) {
		    SendClientMessage(playerid, COLOR_RED2, "Motorista de ônibus - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/pt [texto] : Manda uma mensagem para todos que estao no veiculo da profissao.");
			SendClientMessage(playerid, COLOR_WHITE, "/terminais : Ativar o CheckPoint dos terminais, você irá até eles buscando passageiros!");
			SendClientMessage(playerid, COLOR_WHITE, "/desativarterminais : Desativar o CheckPoint dos terminais...");
			SendClientMessage(playerid, COLOR_WHITE, "Terminais: Bar, Sorveteria, Restaurante, Balada, Corretora de propriedades, Loteria, Aeroporto, Hospital,");
			SendClientMessage(playerid, COLOR_WHITE, "Posto, Banco, Loja de registro de cofres, Loja de utilidades 24/7 e Pizzaria");
			SendClientMessage(playerid, COLOR_WHITE, "Dirigindo seu ônibus e indo para os terminais você conseguirá ganhar ExPoint.");
			SendClientMessage(playerid, COLOR_WHITE, "Tarifa automática, ao entrar o passageiro pagará.");
		}
		else if(Profissao[playerid] == CAMINHONEIRO) {
		    SendClientMessage(playerid, COLOR_RED2, "Caminhoneiro - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/pt [texto] : Manda uma mensagem para todos que estao no veiculo da profissao.");
			SendClientMessage(playerid, COLOR_WHITE, "/carga [id] : Mostra a algum policial a documentação da carga.");
			SendClientMessage(playerid, COLOR_WHITE, "/carregar: Para carregar o caminhão, antes de seguir viagem");
            SendClientMessage(playerid, COLOR_WHITE, "-Carregamento em Geral: Carrega o caminhão com destino certo");
            SendClientMessage(playerid, COLOR_WHITE, "-Combustível: É necessário deixar a carga em algum posto");
            SendClientMessage(playerid, COLOR_WHITE, "-Drogas: É mais rentável porém pode acontecer imprevistos");
            SendClientMessage(playerid, COLOR_WHITE, "-Roupas: É necessário deixar a carga em alguma loja de roupas BINCO");
		}
		else if(Profissao[playerid] == PESCADOR) {
		    SendClientMessage(playerid, COLOR_RED2, "Pescador - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/pt [texto] : Manda uma mensagem para todos que estao no veiculo da profissao.");
			SendClientMessage(playerid, COLOR_WHITE, "/iscas [quantia/de/iscas] : Para pegar iscas (Você deve estar em uma cooperativa de pesca).");
	    	SendClientMessage(playerid, COLOR_WHITE, "/pescar : Joga a rede para pescar, você deve estar na área de pesca.");
        	SendClientMessage(playerid, COLOR_WHITE, "/venderpesca : Vende seu pescado em uma cooperativa, você deve estar em uma.");
			SendClientMessage(playerid, COLOR_WHITE, "/instrucoes : para ver as instrucoes da sua profissão");
			SendClientMessage(playerid, COLOR_WHITE, "/minhasiscas : Ver sua quantidade de iscas.");
			SendClientMessage(playerid, COLOR_RED2, "Agora que você é pescador não precisará pagar as suas iscas!");
		}
		else if(Profissao[playerid] == ENTREGADOR_PIZZA) {
		    SendClientMessage(playerid, COLOR_RED2, "Entregador de Pizza - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/pt [texto] : Manda uma mensagem para todos que estao no veiculo da profissao.");
			SendClientMessage(playerid, COLOR_WHITE, "/pegarpizza : Para entregar as pizzas é necessário ter pizzas na moto.");
	    	SendClientMessage(playerid, COLOR_WHITE, "/pizza : Para vender uma pizza à um cliente");
	    	SendClientMessage(playerid, COLOR_WHITE, "/entregarpizza : Começa a entrega de pizzas automática.");
	    	SendClientMessage(playerid, COLOR_WHITE, "/pararentrega : Parar a entrega de pizzas automática.");
	    	SendClientMessage(playerid, COLOR_WHITE, "/verpizzas : Ver a quantidade de pizzas que a moto tem.");
   	    	SendClientMessage(playerid, COLOR_RED2, "Para pedir uma pizza, os clientes podem digitar /telepizza.");
   	    	SendClientMessage(playerid, COLOR_RED2, "Você receberá 1 ExPoint a cada 5 entregas de pizzas automáticas.");
		}
		else if(Profissao[playerid] == TAXISTA) {
			SendClientMessage(playerid, COLOR_RED2, "Taxista - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/pt [texto] : Manda uma mensagem para todos que estao no veiculo da profissao.");
			SendClientMessage(playerid, COLOR_WHITE, "/ttaxi [id] : Começa a rodar o taxímetro (o passageiro tem que estar no seu carro).");
			SendClientMessage(playerid, COLOR_WHITE, "/GPS [ID/do/Local] : Para ligar o GPS.");
			SendClientMessage(playerid, COLOR_WHITE, "/desligargps : Para desligar o GPS.");
			SendClientMessage(playerid, COLOR_WHITE, "/locais e /locais2: Ver os locais de GPS.");
			SendClientMessage(playerid, COLOR_WHITE, "/trancartaxi : Trancar um taxi.");
			SendClientMessage(playerid, COLOR_WHITE, "/destrancartaxi : Destrancar um taxi.");
			SendClientMessage(playerid, COLOR_WHITE, "Os passageiros entram em contato a cooperativa de taxi pelo comando /servico [taxi]");
		}
		else if(Profissao[playerid] == MOTOTAXI) {
			SendClientMessage(playerid, COLOR_RED2,  "Mototaxista - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/pt [texto] : Manda uma mensagem para todos que estao no veiculo da profissao.");
			SendClientMessage(playerid, COLOR_WHITE, "/mtaxi [id] : Começa a cobrança da viagem.");
            SendClientMessage(playerid, COLOR_WHITE, "/GPS [ID/do/Local] : Para ligar o GPS.");
			SendClientMessage(playerid, COLOR_WHITE, "/desligargps : Para desligar o GPS.");
			SendClientMessage(playerid, COLOR_WHITE, "/locais e /locais2: Ver os locais de GPS.");
			SendClientMessage(playerid, COLOR_WHITE, "/trancarmototaxi : Trancar uma mototaxi.");
			SendClientMessage(playerid, COLOR_WHITE, "/destrancarmototaxi : Destrancar uma mototaxi.");
            SendClientMessage(playerid, COLOR_WHITE, "As motos de taxi estão na Central dos Taxistas");
		}
	 	else if(Profissao[playerid] == TAXI_AEREO) {
			SendClientMessage(playerid, COLOR_RED2,  "Taxista aéreo - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/pt [texto] : Manda uma mensagem para todos que estao no veiculo da profissao.");
			SendClientMessage(playerid, COLOR_WHITE, "/artaxi [id] : A viagem começara a ser tarifada para o passsageiro.");
            SendClientMessage(playerid, COLOR_WHITE, "/GPS [ID/do/Local] : Para ligar o GPS.");
			SendClientMessage(playerid, COLOR_WHITE, "/desligargps : Para desligar o GPS.");
			SendClientMessage(playerid, COLOR_WHITE, "/locais e /locais2: Ver os locais de GPS.");
			SendClientMessage(playerid, COLOR_WHITE, "/trancartaxiaereo : Trancar um taxi aereo.");
			SendClientMessage(playerid, COLOR_WHITE, "/destrancartaxiaereo : Destrancar um taxi aereo.");
			SendClientMessage(playerid, COLOR_WHITE, "Os passageiros entram em contato a cooperativa de taxi aereo pelo comando /servico [taxiaereo]");
            SendClientMessage(playerid, COLOR_WHITE, "Só existe 1 helicoptero para os taxistas aereos e está localizado na Central dos Taxistas");
		}
		else if(Profissao[playerid] == INSTRUTOR) {
			SendClientMessage(playerid, COLOR_RED2, "Instrutor de Direção - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/pt [texto] : Manda uma mensagem para todas as pessoas que têm a mesma profissão que você");
			SendClientMessage(playerid, COLOR_WHITE, "/testeterrestre [id] : Inicia o Teste Terrestre para Habilitar uma pessoa a dirigir veículos terrestres (carros e motos).");
			SendClientMessage(playerid, COLOR_WHITE, "/habaerea [id] : Habilita uma pessoa a dirigir veículos aereos (aviões e helicopteros).");
			SendClientMessage(playerid, COLOR_WHITE, "/habnautica [id] : Habilita uma pessoa a dirigir veículos nauticos (barcos).");
			SendClientMessage(playerid, COLOR_WHITE, "/carteiras : Ver o valor das carteiras | /trancarveiculoauto | /destrancarveiculoauto : Trancar/Destrancar um veículo da auto escola.");
			SendClientMessage(playerid, COLOR_WHITE, "/agendarteste [id] : Esse é o comando que os jogadores usam para agendar um teste com você.");
			SendClientMessage(playerid, COLOR_WHITE, "/agendatestes : Ver a agenda de testes da auto escola.");
			SendClientMessage(playerid, COLOR_WHITE, "/apagaragenda : Apagar a agenda de testes da auto escola.");
			SendClientMessage(playerid, COLOR_WHITE, "/instrucoes = para ver as instrucoes da sua profissão");
		}
		else if(Profissao[playerid] == TRAFICANTE) {
			SendClientMessage(playerid, COLOR_RED2, "Traficante - Comandos:");
 			SendClientMessage(playerid, COLOR_WHITE, "/pt [texto] : Manda uma mensagem para todas as pessoas que têm a mesma profissão que você.");
			SendClientMessage(playerid, COLOR_WHITE, "/pegardroga : Cria o CP do local aonde você pega as drogas para vender.");
			SendClientMessage(playerid, COLOR_WHITE, "/maconha [id] [teor] : Vender maconha, pode ser detectado  no  sangue da pessoa.");
			SendClientMessage(playerid, COLOR_WHITE, "/cocaina [id] [teor] : Vender cocaina, pode detectar no sangue da pessoa.");
			SendClientMessage(playerid, COLOR_WHITE, "/heroina [id] [teor] : Vender heroína, pode ser detectado no sangue da pessoa.");
			SendClientMessage(playerid, COLOR_WHITE, "/meubolso : Mostra a quantidade de papelotes de cada droga.");
			SendClientMessage(playerid, COLOR_RED2, "Cuidado! Se a organização NARCÓTICOS te pegar em flagrante vendendo drogas, você será preso!");
		}
		else if(Profissao[playerid] == LIDER_DE_TRAFICO) {
			SendClientMessage(playerid, COLOR_RED2, "Líder de Tráfico - Comandos:");
 			SendClientMessage(playerid, COLOR_WHITE, "/pt [texto] : Manda uma mensagem para todas as pessoas que têm a mesma profissão que você.");
			SendClientMessage(playerid, COLOR_WHITE, "/pegardroga : Cria o CP do local aonde você pega as drogas para vender.");
			SendClientMessage(playerid, COLOR_WHITE, "/maconha [id] [teor] : Vender maconha, pode ser detectado  no  sangue da pessoa.");
			SendClientMessage(playerid, COLOR_WHITE, "/cocaina [id] [teor] : Vender cocaina, pode detectar no sangue da pessoa.");
			SendClientMessage(playerid, COLOR_WHITE, "/heroina [id] [teor] : Vender heroína, pode ser detectado no sangue da pessoa.");
			SendClientMessage(playerid, COLOR_WHITE, "/meubolso : Mostra a quantidade de papelotes de cada droga.");
			SendClientMessage(playerid, COLOR_WHITE, "/plantardrogas : Plantar drogas em um veículo.");
			SendClientMessage(playerid, COLOR_WHITE, "/pararplantacao : Para parar sua plantação de drogas em um veículo.");
			SendClientMessage(playerid, COLOR_RED2, "Cuidado! Se a organização NARCÓTICOS te pegar em flagrante vendendo/plantando drogas, você será preso!");
		}
		else if(Profissao[playerid] == JORNALISTA) {
		    SendClientMessage(playerid, COLOR_RED2, "Jornalista - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/pt [texto] : Manda uma mensagem para todos que estao no veiculo da profissao.");
			SendClientMessage(playerid, COLOR_WHITE, "/noticia [texto] : Publicar uma noticia. Ex:empregos(informado pelo ADM), e o que acontence em de San Andreas");
	    	SendClientMessage(playerid, COLOR_WHITE, "/propaganda [texto] : Publica uma propaganda de alguma pessoa ou serviço");
	    	SendClientMessage(playerid, COLOR_WHITE, "/publicar [texto] : Publicar um anúncio na tela!");
            SendClientMessage(playerid, COLOR_WHITE, "/anunciaremprego [id/do/jornalista] [id/da/propriedade] [salario] [profissao/a/oferecer] : Comando usado pelo Dono da empresa para anunciar empregos");
            SendClientMessage(playerid, COLOR_WHITE, "/jornalinfo : Ver as informações de jornal.");
            SendClientMessage(playerid, COLOR_RED2, "/profissao2 para ver mais comandos da sua profissão.");
		}
		else if(Profissao[playerid] == CORRETOR_SEGUROS) {
		    SendClientMessage(playerid, COLOR_RED2, "Corretor de seguros - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/pt [texto] : Manda uma mensagem para todas as pessoas que têm a mesma profissão que você.");
	    	SendClientMessage(playerid, COLOR_WHITE, "/segurovida [id] : Vende seguro de vida para um jogador");
	    	SendClientMessage(playerid, COLOR_WHITE, "/seguroveiculo : Assegurar um veículo, o dono tem que estar conectado para enviar a oferta.");
            SendClientMessage(playerid, COLOR_WHITE, "/seguroimovel [id] : Oferece um seguro de imóvel para um jogador!");
            SendClientMessage(playerid, COLOR_WHITE, "/precoseguros : Ver os preços dos seguros.");
    	 	SendClientMessage(playerid, COLOR_RED2, "Você agora possui todo o controle dos seguros de Los Santos!");
		}
		else if(Profissao[playerid] == PARAMEDICO) {
		    SendClientMessage(playerid, COLOR_RED2, "Paramédico - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/pt [texto] : Manda uma mensagem para todos que estao no veiculo da profissao.");
			SendClientMessage(playerid, COLOR_WHITE, "/kitmedico : Pega o Kit para poder fazer o curativo/tratamento.");
	    	SendClientMessage(playerid, COLOR_WHITE, "/curativo [id] : Faz o tratamento necessário ao paciente.");
	    	SendClientMessage(playerid, COLOR_WHITE, "/tratamentodrogas [id] : Faz um tratamento para remover as drogas do paciente.");
	    	SendClientMessage(playerid, COLOR_WHITE, "/tratardoenca [id] : Realiza um tratamento para curar as doenças de um jogador.");
			SendClientMessage(playerid, COLOR_WHITE, "/trataraids [id] : Faz a aplicação da Injeção de cura para a Aids.");
			SendClientMessage(playerid, COLOR_RED2,  "/profissao2 para ver mais comandos de sua profissão.");
		}
		else if(Profissao[playerid] == ADVOGADO) {
			SendClientMessage(playerid, COLOR_RED2, "Advogado - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/pt [texto] : Manda uma mensagem para todas as pessoas que têm a mesma profissão que você.");
            SendClientMessage(playerid, COLOR_WHITE, "/advogado : este é comando utilizado pelos seus clientes para entrar em contato com você.");
            SendClientMessage(playerid, COLOR_WHITE, "/defesa : recebe pela defesa judicial, seus honorários serão 40 por cento do valor da causa [informe seu cliente].");
            SendClientMessage(playerid, COLOR_WHITE, "/processo : entrar com a petição e faz a defesa de seu cliente, feito isto aguarde o senteça do juiz.");
            SendClientMessage(playerid, COLOR_WHITE, "/fianca [id] [quantia] : oferece uma quantia para o preso caso ele queira sair da prisão.");
		}
		else if(Profissao[playerid] == COP_MILITAR) {
			SendClientMessage(playerid, COLOR_RED2,  "Policial Militar - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/pt [texto] : Manda uma mensagem para todos que estao no veiculo da profissao.");
			SendClientMessage(playerid, COLOR_WHITE, "/prender [id] : Prende uma pessoa na cadeia para aguardar julgamento.");
			SendClientMessage(playerid, COLOR_WHITE, "/portedearmas para ver porte de armas");
            SendClientMessage(playerid, COLOR_WHITE, "/bafometro [id] : Vê o nível de alcool no sangue de alguem.");
            SendClientMessage(playerid, COLOR_WHITE, "/multar [id] [quantia] : Multar uma pessoa.");
			SendClientMessage(playerid, COLOR_WHITE, "/procurar [id] : Coloca o ID na lista de procurados da policia.");
			SendClientMessage(playerid, COLOR_RED2,  "/profissao2 ver mais comandos de sua profissão.");
		}
		else if(Profissao[playerid] == COP_RODOVIARIO) {
			SendClientMessage(playerid, COLOR_RED2,  "Policial Rodoviário - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/pt [texto] : Manda uma mensagem para todos que estao no veiculo da profissao.");
			SendClientMessage(playerid, COLOR_WHITE, "/prender [id] : Prende uma pessoa na cadeia para aguardar julgamento.");
			SendClientMessage(playerid, COLOR_WHITE, "/portedearmas para ver porte de armas");
            SendClientMessage(playerid, COLOR_WHITE, "/bafometro [id] : Vê o nível de alcool no sangue de alguem.");
            SendClientMessage(playerid, COLOR_WHITE, "/multar [id] [quantia] : Multar uma pessoa.");
			SendClientMessage(playerid, COLOR_WHITE, "/procurar [id] : Coloca o ID na lista de procurados da policia.");
			SendClientMessage(playerid, COLOR_RED2,  "/profissao2 para ver mais comandos de sua profissão.");
		}
		else if(Profissao[playerid] == COP_SWAT) {
			SendClientMessage(playerid, COLOR_RED2, "Policial Elite/SWAT - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/pt [texto] : Manda uma mensagem para todos que estao no veiculo da profissao.");
			SendClientMessage(playerid, COLOR_WHITE, "/prender [id] : Prende uma pessoa na cadeia para aguardar julgamento.");
			SendClientMessage(playerid, COLOR_WHITE, "/portedearmas para ver porte de armas | /rastrear [id] : Rastrear os veículo de um jogador.");
            SendClientMessage(playerid, COLOR_WHITE, "/bafometro [id] : Vê o nível de alcool no sangue de alguem.");
            SendClientMessage(playerid, COLOR_WHITE, "/multar [id] [quantia] : Multar uma pessoa.");
			SendClientMessage(playerid, COLOR_WHITE, "/procurar [id] : Coloca o ID na lista de procurados da policia.");
			SendClientMessage(playerid, COLOR_WHITE, "/confiscarcelular [id] : Confiscar um celular roubado.");
			SendClientMessage(playerid, COLOR_WHITE, "/apreenderveiculo [id/do/jogador] : Checa se a placa está com multas, e ja apreende.");
			SendClientMessage(playerid, COLOR_RED2,  "/profissao2 para ver mais comandos de sua profissão.");
		}
		else if(Profissao[playerid] == EXERCITO) {
			SendClientMessage(playerid, COLOR_RED2, "EXERCITO - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/pt [texto] : Manda uma mensagem para todos que estao no veiculo da profissao.");
			SendClientMessage(playerid, COLOR_WHITE, "/prender [id] : Prende uma pessoa na cadeia para aguardar julgamento.");
			SendClientMessage(playerid, COLOR_WHITE, "/portedearmas para ver porte de armas | /rastrear [id] : Rastrear os veículo de um jogador.");
            SendClientMessage(playerid, COLOR_WHITE, "/bafometro [id] : Vê o nível de alcool no sangue de alguem.");
            SendClientMessage(playerid, COLOR_WHITE, "/multar [id] [quantia] : Multar uma pessoa.");
			SendClientMessage(playerid, COLOR_WHITE, "/procurar [id] : Coloca o ID na lista de procurados da policia.");
			SendClientMessage(playerid, COLOR_WHITE, "/confiscarcelular [id] : Confiscar um celular roubado.");
			SendClientMessage(playerid, COLOR_WHITE, "/apreenderveiculo [id/do/jogador] : Checa se a placa está com multas, e ja apreende.");
			SendClientMessage(playerid, COLOR_RED2,  "/profissao2 para ver mais comandos de sua profissão.");
		}
		else if(Profissao[playerid] == COP_NARCOTICOS) {
  	        SendClientMessage(playerid, COLOR_RED2, "Narcóticos - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/pt [texto] : Manda uma mensagem para todos que estao no veiculo da profissao.");
  			SendClientMessage(playerid, COLOR_WHITE, "/exame [id] : Ver se o indíviduo tem droga no corpo.");
		    SendClientMessage(playerid, COLOR_WHITE, "/vexame : Faz exame em um veículo.");
        	SendClientMessage(playerid, COLOR_WHITE, "/prender [id] : Prende uma pessoa na cadeia até o término do julgamento");
	        SendClientMessage(playerid, COLOR_WHITE, "/procurar [id] : Coloca o ID na lista de procurados da policia.");
			SendClientMessage(playerid, COLOR_WHITE, "/desprocurar [id] : Retira o ID da lista de procurados da policia.");
            SendClientMessage(playerid, COLOR_WHITE, "/desarmardrogas : Desarma as drogas plantadas em um veículo.");
			SendClientMessage(playerid, COLOR_WHITE, "/apreenderveiculo [id/do/jogador] : Checa se a placa está com multas, e ja apreende.");
			SendClientMessage(playerid, COLOR_RED2,  "/profissao2 para ver mais comandos de sua profissão.");
		}
		else if(Profissao[playerid] == JUIZ) {
		    SendClientMessage(playerid, COLOR_RED2, "Juíz - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/pt [texto] : Manda uma mensagem para todas as pessoas que têm a mesma profissão que você.");
			SendClientMessage(playerid, COLOR_WHITE, "/prender [id] : Prende uma pessoa na cadeia até o término do julgamento.");
			SendClientMessage(playerid, COLOR_WHITE, "/soltar [id] : Após seu veredicto, você usa este comando para determinar a soltura do réu..");
			SendClientMessage(playerid, COLOR_WHITE, "/tribunal [id1] [id2] : Inicia um Tribunal entre 2 jogadores a caso de morte, insultos. Previsto pena. ou Indenização.");
            SendClientMessage(playerid, COLOR_WHITE, "/culpado [id] : Declara um jogador CULPADO.");
			SendClientMessage(playerid, COLOR_WHITE, "/fimtribunal : Declara o fim do tribunal, dado com aceitação das partes.");
		}
		else if(Profissao[playerid] == DELEGADO) {
		    SendClientMessage(playerid, COLOR_RED2, "Delegado - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/pt [texto] : Manda uma mensagem para todos que estao no veiculo da profissao.");
			SendClientMessage(playerid, COLOR_WHITE, "/prender [id] : Prende uma pessoa na cadeia para aguardar julgamento.");
			SendClientMessage(playerid, COLOR_WHITE, "/soltar [id] : Você usa este comando para tirar da cadeia o criminoso.");
            SendClientMessage(playerid, COLOR_WHITE, "/multar [id] [quantia] : Multar uma pessoa.");
			SendClientMessage(playerid, COLOR_WHITE, "/procurar [id] : Coloca o ID na lista de procurados da policia.");
			SendClientMessage(playerid, COLOR_WHITE, "/ordem : Para ordenar outros oficiais a comprirem uma missão.");
            SendClientMessage(playerid, COLOR_WHITE, "/rastrear [id] : Rastrear os veículo de um jogador.");
			SendClientMessage(playerid, COLOR_WHITE, "/apreenderveiculo [id/do/jogador] : Checa se a placa está com multas, e ja apreende.");
			SendClientMessage(playerid, COLOR_RED2,  "/profissao2 para ver mais comandos de sua profissão.");
		}
	    else if(Profissao[playerid] == LIXEIRO) {
  	        SendClientMessage(playerid, COLOR_RED2, "Lixeiro - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/pt [texto] : Manda uma mensagem para todos que estao no veiculo da profissao.");
			SendClientMessage(playerid, COLOR_WHITE, "/coletarlixo : Iniciar missão de coleção de lixo.");
        	SendClientMessage(playerid, COLOR_WHITE, "/lixao : Deposita o lixo coletado com \"/coletarlixo\" no Lixão.");
        	SendClientMessage(playerid, COLOR_WHITE, "/pararcoletalixo : Cancelar a missão de coleção de lixo.");
            SendClientMessage(playerid, COLOR_WHITE, "/pegarlata : Começa a fazer um circuito pegando latas.");
            SendClientMessage(playerid, COLOR_WHITE, "/minhaslatas : Verifica quantas latas você possui!");
        	SendClientMessage(playerid, COLOR_WHITE, "/pararcoleta : Para de coletar latinhas!");
        	SendClientMessage(playerid, COLOR_WHITE, "/venderlatas : Vende suas latas!");
		}
		else if(Profissao[playerid] == TRANSPORTE_DE_VALORES) {
 	        SendClientMessage(playerid, COLOR_RED2, "Transportador de Valores - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/pt [texto] : Manda uma mensagem para todos que estao no veiculo da profissao.");
			SendClientMessage(playerid, COLOR_WHITE, "/transportar : Transporta a grana do Banco Central 24/7 de LV para outro banco.");
			SendClientMessage(playerid, COLOR_WHITE, "/pegargrana : Ao entrar no veículo você pode pegar o MALOTE, e ao sair terá 20 segundos para depositar a grana.");
			SendClientMessage(playerid, COLOR_WHITE, "Obs: Caso não entregue a grana poderá sofrer punição.");
        	SendClientMessage(playerid, COLOR_WHITE, "/depositargrana : Deposita a grana em qualquer banco estando no mesmo.");
           	SendClientMessage(playerid, COLOR_WHITE, "/escolta : Pede ajuda a polícia para escoltar o dinheiro.");
		}
		else if(Profissao[playerid] == CONTRABANDISTA) {
 	        SendClientMessage(playerid, COLOR_RED2, "Contrabandista - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/contrabando : Inicia um contrabando. Veja os contrabandos do gamemode:");
			SendClientMessage(playerid, COLOR_WHITE, "-Pacote: Contrabando no navio em San Fierro perto da boate do Jizzys");
			SendClientMessage(playerid, COLOR_WHITE, "-Carro: Contrabando de carros, o traficante do morro pede, os triads checam e dispacham o carro");
			SendClientMessage(playerid, COLOR_WHITE, "-Armas: Contrabando de armas ilegais.");
			SendClientMessage(playerid, COLOR_WHITE, "-Drogas: Contrabando de drogas, o traficante do morro lhe informa onde você pode conseguir grana transportando drogas.");
			SendClientMessage(playerid, COLOR_WHITE, "/cancelarcontrabando : Cancela o contrabando!");
		 	SendClientMessage(playerid, COLOR_RED2, "Atenção! Se a Receita Federal te pegar fazendo contrabando você será preso");
		 	SendClientMessage(playerid, COLOR_RED2, "e a mercadoria será apreendida!");
		}
		else if(Profissao[playerid] == RECEITA_FEDERAL) {
 	        SendClientMessage(playerid, COLOR_RED2, "Receita Federal - Comandos:");
 			SendClientMessage(playerid, COLOR_WHITE, "/multar [id] [quantia] : Multar um jogador.");
 			SendClientMessage(playerid, COLOR_WHITE, "/apreendercontrabando [id] : Apreende o contrabando pode ser de: Mercadorias, Drogas, Carros ou Armas.");
 			SendClientMessage(playerid, COLOR_WHITE, ": Mercadorias, Drogas, Carros ou Armas.");
 			SendClientMessage(playerid, COLOR_WHITE, "/instrucoes : para ver as instrucoes da sua profissão");
 			SendClientMessage(playerid, COLOR_WHITE, "Veja os jogadores que estão atrasando para pagar as multas e tome provisões drásticas com eles!");
 			SendClientMessage(playerid, COLOR_RED2, "OBS: Para verificar a multa de um veículo use: /vdocumentos");
		}
		else if(Profissao[playerid] == AGRICULTOR) {
 	        SendClientMessage(playerid, COLOR_RED2, "Agricultor - Comandos:");
  			SendClientMessage(playerid, COLOR_WHITE, "/plantarmilho : Planta o milho no campo.");
          	SendClientMessage(playerid, COLOR_WHITE, "/vendermilho : Vende o milho colhido na FAZENDA.");
          	SendClientMessage(playerid, COLOR_WHITE, "/tirarleite : Tira leite das vacas.");
          	SendClientMessage(playerid, COLOR_WHITE, "/venderleite : Vende o leite das vacas na FAZENDA.");
		}
		else if(Profissao[playerid] == ASSALTANTE) {
 	        SendClientMessage(playerid, COLOR_RED2, "Assaltante - Comandos:");
  			SendClientMessage(playerid, COLOR_WHITE, "/assaltar : Chegue em um banco, digite, depois fuja.");
  			SendClientMessage(playerid, COLOR_WHITE, "/roubar [id] : Para assaltar um jogador.");
  			SendClientMessage(playerid, COLOR_WHITE, "/desmanche : Vende o carro para o desmanche");
  			SendClientMessage(playerid, COLOR_WHITE, "/veiculosdesmanche : mostra o veículo que o beco quer!");
  			SendClientMessage(playerid, COLOR_WHITE, "/roubarcelular [id] : Roubar o celular de um jogador.");
			SendClientMessage(playerid, COLOR_RED2,  "/profissao2 para ver mais comandos de sua profissão.");
		}
		else if(Profissao[playerid] == FRENTISTA) {
 	        SendClientMessage(playerid, COLOR_RED2, "Frentista - Comandos:");
 			SendClientMessage(playerid, COLOR_WHITE, "/colocargas [id] [quantia] : Coloca gasolina no carro de um jogador, sujeito a cobrança.");
 			SendClientMessage(playerid, COLOR_WHITE, "/vendergalao [id] [1-20] : Vende um galão de combustível para um jogador.");
 			SendClientMessage(playerid, COLOR_WHITE, "/instrucoes : para ver as instrucoes da sua profissão");
		}
		else if(Profissao[playerid] == LOCADOR_DE_CARROS) {
 	        SendClientMessage(playerid, COLOR_RED2, "Locador de carros - Comandos:");
  			SendClientMessage(playerid, COLOR_WHITE, "/alugarcarro [id] : Quando um pessoa pedir um carro ofereça os disponíveis na");
            SendClientMessage(playerid, COLOR_WHITE, "locadora quando a pessoa entrar no carro digite e ele pensará.");
            SendClientMessage(playerid, COLOR_WHITE, "Você também poderá abastecer e reparar os carros de alugueis, entre neles e veja se eles necessitam de algo");
			SendClientMessage(playerid, COLOR_WHITE, "/definirpreco [carro] [preco] : Definir um novo preço de aluguel para um dos carros...");
			SendClientMessage(playerid, COLOR_RED2, "CARROS: Infernus, Turismo, Sultan, Sabre, Phoenix, Cheetah, FCR-900, NRG-500");
			SendClientMessage(playerid, COLOR_RED2, "Se você alugar um carro para o outro jogador ele não precisa te pedir denovo para renovar o prazo");
			SendClientMessage(playerid, COLOR_RED2, "Ele simplesmente digitará /continuaraluguel e ganhará mais 5 minutos, você também ganhará o dinheiro e ExPoint!");
		}
		else if(Profissao[playerid] == PEDREIRA) {
 	        SendClientMessage(playerid, COLOR_RED2, "Carregador da Pedreira - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/pt [texto] : Manda uma mensagem para todos que estao no veiculo da profissao.");
			SendClientMessage(playerid, COLOR_WHITE, "/carregarcaminhao : Carrega o caminhão na Pedreira!");
        	SendClientMessage(playerid, COLOR_WHITE, "O Descarregamento é feito quando você entra no CheckPoint de uma das obras.");
		}
		else if(Profissao[playerid] == VENDEDOR_DE_ARMAS) {
 	        SendClientMessage(playerid, COLOR_RED2, "Vendedor de Armas  - Comandos:");
  			SendClientMessage(playerid, COLOR_WHITE, "/venderarma [id] [id/da/arma] : Vende alguma arma para o jogador.");
        	SendClientMessage(playerid, COLOR_WHITE, "/camuflar [id/do/jogador] [minutos] : Camuflar um jogador.");
        	SendClientMessage(playerid, COLOR_WHITE, "/armas : Ver os ID's e os valores das armas");
        	SendClientMessage(playerid, COLOR_WHITE, "/colete [id] : Vende colete para alguém");
		}
		else if(Profissao[playerid] == MECANICO) {
		    SendClientMessage(playerid, COLOR_RED2, "Mecânico - Comandos:");
			SendClientMessage(playerid, COLOR_WHITE, "/pt [texto] : Manda uma mensagem para todos que estao no veiculo da profissao.");
			SendClientMessage(playerid, COLOR_WHITE, "/consertar : Conserta o carro em que você estiver dirigindo.");
		    SendClientMessage(playerid, COLOR_WHITE, "/pintarcarro : Pinta o carro com cores diferentes!");
		    SendClientMessage(playerid, COLOR_WHITE, "/placa [nome] : Mudar a placa de um veículo!");
		    SendClientMessage(playerid, COLOR_WHITE, "Atenção: Como os carros não dão RESPAWN, você tem que fazer o reboque deles.");
		    SendClientMessage(playerid, COLOR_WHITE, "Você pode alternar em não cobrar ou cobrar. Se cobrar será pago $50. Para rebocar basta");
		    SendClientMessage(playerid, COLOR_WHITE, "chegar com o Reboque na frente do veículo e apertar CTRL, automaticamente o carro será guinchado.");
		    SendClientMessage(playerid, COLOR_WHITE, "/instrucoes : para ver as instrucoes da sua profissão");
		    SendClientMessage(playerid, COLOR_RED2, "AVISO: Enquanto haver mecânico no jogo, a loja de customização não ficará em funcionamento!");
		}
		else if(Profissao[playerid] == PROSTITUTA) {
 	        SendClientMessage(playerid, COLOR_RED2, "Prostituta - Comandos:");
  			SendClientMessage(playerid, COLOR_WHITE, "/strip-tease [id] : Oferece um strip-tease na boate!");
        	SendClientMessage(playerid, COLOR_WHITE, "/transarcama [id] : Oferece uma transa na cama de um hotel.");
        	SendClientMessage(playerid, COLOR_WHITE, "/mudarposicao [1-4] : Troca a posição na hora do sexo!");
        	SendClientMessage(playerid, COLOR_WHITE, "/fazerstrip : Começa a fazer strip-tease na boate!");
        	SendClientMessage(playerid, COLOR_WHITE, "/pararstrip : Parar de fazer strip-tease na boate!");
        	SendClientMessage(playerid, COLOR_WHITE, "/pagarstrip [ID/da/striper] : Esse é o comando que os jogadores usam para pagar o strip-tease!");
		}
    	return 1;
	}

	if(strcmp(cmd,"/profissao2",true) == 0) {
		if(Profissao[playerid] == COP_RODOVIARIO){
			SendClientMessage(playerid, COLOR_RED2,  "Policial Rodoviário - Comandos Parte II:");
			SendClientMessage(playerid, COLOR_WHITE, "/confiscarcelular [id] : Confiscar um celular roubado.");
			SendClientMessage(playerid, COLOR_WHITE, "/desprocurar [id] : Retira o ID da lista de procurados da policia.");
			SendClientMessage(playerid, COLOR_WHITE, "/cone : cria um cone para a blitz policial.");
    	    SendClientMessage(playerid, COLOR_WHITE, "Quando for abordar um jogador peça para ele digitar /render.");
			SendClientMessage(playerid, COLOR_WHITE, "/confiscarchaves [id] : Confisca as chaves de algum assaltante que roubou a chave do outro.");
			SendClientMessage(playerid, COLOR_WHITE, "/reforco : pede reforço ao corpo policial de Los Santos.");
			SendClientMessage(playerid, COLOR_RED2,  "/profissao3 ver mais comandos de sua profissão.");
		}
		else if(Profissao[playerid] == COP_MILITAR){
			SendClientMessage(playerid, COLOR_RED2, "Policial Militar - Comandos Parte II:");
			SendClientMessage(playerid, COLOR_WHITE, "/confiscarcelular [id] : Confiscar um celular roubado.");
			SendClientMessage(playerid, COLOR_WHITE, "/desprocurar [id] : Retira o ID da lista de procurados da policia.");
		    SendClientMessage(playerid, COLOR_WHITE, "Quando for abordar um jogador peça para ele digitar /render.");
	    	SendClientMessage(playerid, COLOR_WHITE, "/confiscarchaves [id] : Confisca as chaves de algum assaltante que roubou a chave do outro.");
	    	SendClientMessage(playerid, COLOR_WHITE, "/reforco : pede reforço ao corpo policial de Los Santos.");
			SendClientMessage(playerid, COLOR_WHITE, "/liberarveiculo [id/do/dono] : Liberar um veículo.");
			SendClientMessage(playerid, COLOR_RED2,  "/profissao3 ver mais comandos de sua profissão.");
		}
		else if(Profissao[playerid] == COP_NARCOTICOS) {
	   		SendClientMessage(playerid, COLOR_RED2, "Narcoticos - Comandos Parte II:");
	   		SendClientMessage(playerid, COLOR_WHITE, "Quando for abordar um jogador peça para ele digitar /render.");
	    	SendClientMessage(playerid, COLOR_WHITE, "/confiscarchaves [id] : Confisca as chaves de algum assaltante que roubou a chave do outro.");
	    	SendClientMessage(playerid, COLOR_WHITE, "/reforco : pede reforço a todos os cops | /liberarveiculo [id/do/dono] : Liberar um veículo");
	    	SendClientMessage(playerid, COLOR_WHITE, "/instrucoes : para ver as instrucoes da sua profissão.");
			SendClientMessage(playerid, COLOR_WHITE, "/revistar [id] : Revista se o Jogador anda portando Drogas ou Armas.");
	    	SendClientMessage(playerid, COLOR_RED2, "Quando ver um Líder de Tráfico plantando drogas em um veículo, tire ele do veículo e a plantação será cancelada.");
		}
		else if(Profissao[playerid] == COP_SWAT) {
			SendClientMessage(playerid, COLOR_RED2,  "Policial Elite/SWAT - Comandos Parte II:");
			SendClientMessage(playerid, COLOR_WHITE, "/confiscarcelular [id] : Confiscar um celular roubado.");
			SendClientMessage(playerid, COLOR_WHITE, "/desprocurar [id] : Retira o ID da lista de procurados da policia.");
			SendClientMessage(playerid, COLOR_WHITE, "/cone : cria um cone para a blitz policial.");
		    SendClientMessage(playerid, COLOR_WHITE, "Quando for abordar um jogador peça para ele digitar /render.");
		    SendClientMessage(playerid, COLOR_WHITE, "/confiscarchaves [id] : Confisca as chaves de algum assaltante que roubou a chave do outro.");
		    SendClientMessage(playerid, COLOR_WHITE, "/reforco : pede reforço ao corpo policial de Los Santos.");
			SendClientMessage(playerid, COLOR_RED2,  "/profissao3 ver mais comandos de sua profissão.");
		}
		else if(Profissao[playerid] == EXERCITO) {
			SendClientMessage(playerid, COLOR_RED2,  "Policial Elite/SWAT - Comandos Parte II:");
			SendClientMessage(playerid, COLOR_WHITE, "/confiscarcelular [id] : Confiscar um celular roubado.");
			SendClientMessage(playerid, COLOR_WHITE, "/desprocurar [id] : Retira o ID da lista de procurados da policia.");
			SendClientMessage(playerid, COLOR_WHITE, "/cone : cria um cone para a blitz policial.");
			SendClientMessage(playerid, COLOR_WHITE, "Quando for abordar um jogador peça para ele digitar /render.");
			SendClientMessage(playerid, COLOR_WHITE, "/confiscarchaves [id] : Confisca as chaves de algum assaltante que roubou a chave do outro.");
			SendClientMessage(playerid, COLOR_WHITE, "/reforco : pede reforço ao corpo policial de Los Santos.");
			SendClientMessage(playerid, COLOR_RED2,  "/profissao3 ver mais comandos de sua profissão.");
		}
		else if(Profissao[playerid] == DELEGADO) {
			SendClientMessage(playerid, COLOR_RED2,  "Delegado - Comandos Parte II:");
	    	SendClientMessage(playerid, COLOR_WHITE, "/porte1 : Concede porte de armas na categoria 1 armas leves.para policia militar e civis confiáveis.");
	    	SendClientMessage(playerid, COLOR_WHITE, "/porte2 : Concede porte de armas na categoria 2 armas pesadas,somente Swat e Cop rodoviário.");
	    	SendClientMessage(playerid, COLOR_WHITE, "/liberarveiculo [id/do/dono] : Liberar um veículo.");
			SendClientMessage(playerid, COLOR_WHITE, "/carga [id] : Comandos usado para que o Caminhoneiro mostre o tipo de carga que ele leva.");
			SendClientMessage(playerid, COLOR_WHITE, "/confiscarchaves [id] : Confisca as chaves de algum assaltante que roubou a chave do outro.");
			SendClientMessage(playerid, COLOR_WHITE, "/reforco : pede reforço a todos os cops");
			SendClientMessage(playerid, COLOR_RED2,  "/profissao3 ver mais comandos de sua profissão.");
		}
		else if(Profissao[playerid] == ASSALTANTE) {
			SendClientMessage(playerid, COLOR_RED2,  "Assaltante - Comandos Parte II:");
			SendClientMessage(playerid, COLOR_WHITE, "/roubarcasa : Iniciar o roubo de uma casa (Você tem que ter a chave)");
			SendClientMessage(playerid, COLOR_WHITE, "/roubartv : Roubar a televisão de uma casa | /roubarradio : Roubar o rádio de uma casa");
			SendClientMessage(playerid, COLOR_WHITE, "/roubarfogao : Roubar o fogão de uma casa | /roubargeladeira : Roubar a geladeira de uma casa");
			SendClientMessage(playerid, COLOR_WHITE, "/cofresenha [senha] : Comando para tentar abrir o cofre de uma casa.");
			SendClientMessage(playerid, COLOR_WHITE, "/escondercarro : Esconder um carro, você tem que estar em um esconderijo.");
			SendClientMessage(playerid, COLOR_WHITE, "Procure esconderijos em Los Santos, ao entrar em um esse será identificado para você...");
			SendClientMessage(playerid, COLOR_WHITE, "Para roubar Carros-Fortes, basta entrar nele quanto estiver carregado de $$.");
		}
		else if(Profissao[playerid] == PARAMEDICO){
		    SendClientMessage(playerid, COLOR_RED2,  "Paramédico - Comandos Parte II:");
			SendClientMessage(playerid, COLOR_WHITE, "/vendermedicamento [id] [caixas] : Caso o jogador esteje com alguma doenças de pele ou fazendo tratamento de AIDS, venda o número de caixas solicitado pelo médico ou pelo paciente.");
			SendClientMessage(playerid, COLOR_WHITE, "/pegarremedios : Pega 3 caixas de remédios para vender aos jogadores doentes. Cada caixa vem 3 comprimidos.");
			SendClientMessage(playerid, COLOR_WHITE, "/192: telefone de emergencia, para chamar uma ambulancia.");
			SendClientMessage(playerid, COLOR_WHITE, "/salvar [id] : Salvar um jogador quando ele estiver inconsciente.");
    	    SendClientMessage(playerid, COLOR_RED2,  "Para fazer curativos e tratamentos você tem que ter um kit médico.");
		}
		else if(Profissao[playerid] == JORNALISTA){
			SendClientMessage(playerid, COLOR_RED2, "Jornalista - Comandos Parte II:");
			SendClientMessage(playerid, COLOR_WHITE, "/entrevistar [id] : Pedir para entrevistar um jogador, ele deve aceitar com /darentrevista");
			SendClientMessage(playerid, COLOR_WHITE, "/terminarentrevista : Finalizar sua entrevista.");
			SendClientMessage(playerid, COLOR_WHITE, "/ativarcamera : Ativar a câmera de filmagem (você deve estar como passageiro no helicóptero de reportagem)");
			SendClientMessage(playerid, COLOR_WHITE, "/desativarcamera : Desativar a câmera de filmagem.");
			SendClientMessage(playerid, COLOR_RED2, "Os jogadores poderão ver a visão da câmera e as entrevistas pela Televisão");
   			SendClientMessage(playerid, COLOR_RED2, "Veja dicas de publicações no \"/publicar\" em /dicaspublicar");
			SendClientMessage(playerid, COLOR_RED2, "REQUERIMENTOS: Não anuncie bobagens, evite erros de escrita, não abrevie palavras, por exemplo: trocando \"que\" por \"q\"");
			SendClientMessage(playerid, COLOR_RED2, "se não respeitar essas regras, você será demitido!");
		}
		return 1;
	}

	if(strcmp(cmd,"/profissao3",true) == 0) {
		if(Profissao[playerid] == COP_RODOVIARIO){
			SendClientMessage(playerid, COLOR_RED2,  "Policial Rodoviário - Comandos Parte III:");
			SendClientMessage(playerid, COLOR_WHITE, "/confiscarcelular [id] : Confiscar um celular roubado.");
			SendClientMessage(playerid, COLOR_WHITE, "/apreenderveiculo [id/do/jogador] : Checa se a placa está com multas, e ja apreende.");
			SendClientMessage(playerid, COLOR_WHITE, "/revistar [id] : Revista se o Jogador anda portando Drogas ou Armas.");
			SendClientMessage(playerid, COLOR_WHITE, "/liberarveiculo [id/do/dono] : Liberar um veículo.");
			SendClientMessage(playerid, COLOR_WHITE, "/carga [id] : Comandos usado para que o Caminhoneiro mostre o tipo de carga que ele leva.");
			SendClientMessage(playerid, COLOR_WHITE, "/fiscalizarveiculo : Fiscalizar um veículo, você deve estar nele.");
			SendClientMessage(playerid, COLOR_WHITE, "/fiscalizararmas [id] : Fiscalizar as armas de um jogador.");
			SendClientMessage(playerid, COLOR_WHITE, "/instrucoes : para ver as instrucoes da sua profissão.");
		}
		else if(Profissao[playerid] == COP_MILITAR){
			SendClientMessage(playerid, COLOR_RED2,  "Policial Militar - Comandos Parte III:");
			SendClientMessage(playerid, COLOR_WHITE, "/confiscarcelular [id] : Confiscar um celular roubado.");
			SendClientMessage(playerid, COLOR_WHITE, "/apreenderveiculo [id/do/jogador] : Checa se a placa está com multas, e ja apreende.");
			SendClientMessage(playerid, COLOR_WHITE, "/revistar [id] : Revista se o Jogador anda portando Drogas ou Armas.");
			SendClientMessage(playerid, COLOR_WHITE, "/liberarveiculo [id/do/dono] : Liberar um veículo.");
			SendClientMessage(playerid, COLOR_WHITE, "/carga [id] : Comandos usado para que o Caminhoneiro mostre o tipo de carga que ele leva.");
			SendClientMessage(playerid, COLOR_WHITE, "/fiscalizarveiculo : Fiscalizar um veículo, você deve estar nele.");
			SendClientMessage(playerid, COLOR_WHITE, "/fiscalizararmas [id] : Fiscalizar as armas de um jogador.");
			SendClientMessage(playerid, COLOR_WHITE, "/instrucoes : para ver as instrucoes da sua profissão.");
		}
		else if(Profissao[playerid] == COP_SWAT) {
			SendClientMessage(playerid, COLOR_RED2,  "Policial Swat - Comandos Parte III:");
			SendClientMessage(playerid, COLOR_WHITE, "/apreenderveiculo [id/do/jogador] : Checa se a placa está com multas, e ja apreende.");
			SendClientMessage(playerid, COLOR_WHITE, "/revistar [id] : Revista se o Jogador anda portando Drogas ou Armas.");
			SendClientMessage(playerid, COLOR_WHITE, "/liberarveiculo [id/do/dono] : Liberar um veículo.");
			SendClientMessage(playerid, COLOR_WHITE, "/carga [id] : Comandos usado para que o Caminhoneiro mostre o tipo de carga que ele leva.");
			SendClientMessage(playerid, COLOR_WHITE, "/fiscalizarveiculo : Fiscalizar um veículo, você deve estar nele.");
			SendClientMessage(playerid, COLOR_WHITE, "/fiscalizararmas [id] : Fiscalizar as armas de um jogador.");
			SendClientMessage(playerid, COLOR_WHITE, "/instrucoes : para ver as instrucoes da sua profissão.");
		}
		else if(Profissao[playerid] == EXERCITO) {
			SendClientMessage(playerid, COLOR_RED2,  "EXÉRCITO - Comandos Parte III:");
			SendClientMessage(playerid, COLOR_WHITE, "/apreenderveiculo [id/do/jogador] : Checa se a placa está com multas, e ja apreende.");
			SendClientMessage(playerid, COLOR_WHITE, "/revistar [id] : Revista se o jogador anda portando Drogas ou Armas.");
			SendClientMessage(playerid, COLOR_WHITE, "/liberarveiculo [id/do/dono] : Liberar um veículo.");
			SendClientMessage(playerid, COLOR_WHITE, "/carga [id] : Comandos usado para que o Caminhoneiro mostre o tipo de carga que ele leva.");
			SendClientMessage(playerid, COLOR_WHITE, "/fiscalizarveiculo : Fiscalizar um veículo, você deve estar nele.");
			SendClientMessage(playerid, COLOR_WHITE, "/fiscalizararmas [id] : Fiscalizar as armas de um jogador.");
			SendClientMessage(playerid, COLOR_WHITE, "/instrucoes : para ver as instrucoes da sua profissão.");
		}
		else if(Profissao[playerid] == DELEGADO) {
			SendClientMessage(playerid, COLOR_RED2,  "Delegado - Comandos Parte III:");
			SendClientMessage(playerid, COLOR_WHITE, "/removerporte1 [id] : Remover o porte de armas CAT 1 de alguém.");
			SendClientMessage(playerid, COLOR_WHITE, "/removerporte2 [id] : Remover o porte de armas CAT 2 de alguém.");
			SendClientMessage(playerid, COLOR_WHITE, "/apreenderveiculo [id/do/jogador] : Checa se a placa está com multas, e ja apreende.");
			SendClientMessage(playerid, COLOR_WHITE, "/revistar [id] : Revista se o Jogador anda portando Drogas ou Armas.");
			SendClientMessage(playerid, COLOR_WHITE, "/fiscalizarveiculo : Fiscalizar um veículo, você deve estar nele.");
			SendClientMessage(playerid, COLOR_WHITE, "/fiscalizararmas [id] : Fiscalizar as armas de um jogador.");
			SendClientMessage(playerid, COLOR_WHITE, "/instrucoes : para ver as instrucoes da sua profissão.");
		}
		return 1;
	}
	if(strcmp(cmd,"/consertar",true)==0){
	    if(Profissao[playerid] == MECANICO || IsPlayerAdmin(playerid)){
	        if(IsPlayerInAnyVehicle(playerid)){
	            new vehid = GetPlayerVehicleID(playerid);
	            if(strcmp(vStats[vehid][VDono], "Servidor", false) && strcmp(vStats[vehid][VDono], PlayerName(playerid), false)){
					new Float:X,Float:Y,Float:Z,Float:ang;
					GetVehiclePos(vehid,X,Y,Z);
					GetVehicleZAngle(vehid,ang);
					SetVehicleHealth(vehid,1000);
					SetVehicleToRespawn(vehid);
					SetTimerEx("ColocarNoVeiculoMot",200,0,"dd",playerid,vehid);
					SetTimerEx("SetarPosicaoDoVeiculo",300,0,"dffff",vehid,X,Y,Z,ang);
					if(VeiculoConsertado[vehid] == 0){
						AcrescentarExPoints(playerid,1);
						if(JogadorContratado(playerid,9)) AcrescentarLucro(9,100);
						VeiculoConsertado[vehid]=1;
						SetTimerEx("ZerarCarroConsertado",30000,false,"d",vehid);
					}
				} else {
				    SendClientMessage(playerid, COLOR_GRAY, "Você não pode consertar um veículo seu ou do governo/servidor");
				}
			} else {
			    SendClientMessage(playerid,COLOR_GRAY,"Você não está em um veículo!");
			}
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Você não é mecânico!");
		}
		return 1;
	}
    if(strcmp(cmd,"/pintarcarro",true)==0){
		if(Profissao[playerid] == MECANICO || IsPlayerAdmin(playerid)){
			if(IsPlayerInAnyVehicle(playerid)){
	            new vehid = GetPlayerVehicleID(playerid);
	            if(strcmp(vStats[vehid][VDono], "Servidor", false) && strcmp(vStats[vehid][VDono], PlayerName(playerid), false)){
	           		new rand = random(139);
					new rand1 = random(139);
					ChangeVehicleColor(vehid,rand,rand1);
					SaveColors(vehid,rand,rand1);
					SendClientMessage(playerid,COLOR_MECANICO,"Cor colocada");
					if(VeiculoPintado[vehid]==0){
				    	VeiculoPintado[vehid]=1;
						SetTimerEx("ZerarVeiculoPintado",30000,false,"d",vehid);
						AcrescentarExPoints(playerid,1);
						if(JogadorContratado(playerid,9)) AcrescentarLucro(9,100);
					}
				} else {
				    SendClientMessage(playerid, COLOR_GRAY, "Você não pode pintar um veículo seu ou do governo/servidor");
				}
  			} else {
			    SendClientMessage(playerid,COLOR_GRAY,"Você não está em um veículo!");
			}
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Você não é mecânico!");
		}
		return 1;
	}
	if(strcmp(cmd,"/placa",true) == 0) {
  		if(Profissao[playerid] == MECANICO || IsPlayerAdmin(playerid)){
   			new tmp[256];
   			strmid(tmp,cmdtext,6,14);
			if(!strlen(tmp)){
			   	SendClientMessage(playerid, COLOR_GRAY, "Uso: /placa [nome]");
			   	SendClientMessage(playerid, COLOR_GRAY, "O máximo de caracteres do nome é 8");
			   	return 1;
		   	}
		   	if(PlacaExiste(tmp)){
				SendClientMessage(playerid, COLOR_GRAY, "Essa placa já existe em outro veículo...");
				return 1;
			}
		   	for(new s = 0; s < strlen(tmp); s++){
				if(strfind(tmp,"_",false,s) != -1 || strfind(tmp,"*",false,s) != -1 || strfind(tmp,"'",false,s) != -1 || strfind(tmp,"/",false,s) != -1 || strfind(tmp,"?",false,s) != -1 || strfind(tmp,">",false,s) != -1
				|| strfind(tmp,"<",false,s) != -1 || strfind(tmp,":",false,s) != -1 || strfind(tmp,"?",false,s) != -1 || strfind(tmp,"\"",false,s) != -1 || strfind(tmp,"|",false,s) != -1 || strfind(tmp,"!",false,s) != -1){
					SendClientMessage(playerid, COLOR_GRAY, "Sem caracteres especiais na nova placa (\" _ * < > \\ / ? | : ' !)");
					return 1;
				}
			}
		   	new string[256];
		   	if(IsPlayerInAnyVehicle(playerid)){
		   	    if(strcmp(vStats[GetPlayerVehicleID(playerid)][VDono], "Servidor", false)){
			   		SetVehicleNumberPlate(GetPlayerVehicleID(playerid),tmp);
			   		format(string, sizeof(string),"Placa do veiculo mudada para %s",tmp);
			   		SendClientMessage(playerid, COLOR_MECANICO,string);
			   		SalvarPlaca(GetPlayerVehicleID(playerid),tmp);
			   		return 1;
				} else {
				    SendClientMessage(playerid, COLOR_GRAY, "Você não pode mudar a placa de um veículo do servidor!");
					return 1;
				}
   			} else {
       			SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em um veiculo!");
       			return 1;
       		}
   		} else {
	       	SendClientMessage(playerid, COLOR_GRAY, "Você não é mecânico!");
	       	return 1;
 		}
	}
 	if(strcmp(cmd,"/verplaca",true) == 0) {
        if(IsPlayerInAnyVehicle(playerid)){
			new string[256];
			format(string, sizeof(string), "Placa do veículo: %s", vStats[GetPlayerVehicleID(playerid)][VPlaca]);
			SendClientMessage(playerid, COLOR_MECANICO, string);
			return 1;
		} else {
			SendClientMessage(playerid, COLOR_GRAY, "Você precisa estar em um veículo para usar este comando.");
			return 1;
		}
	}
    if(strcmp(cmd,"/consertarcar",true) == 0) {
        if(AreaCustomizacao[playerid] == 0){
            SendClientMessage(playerid, COLOR_GRAY, "Você não está na loja de customização!");
            return 1;
		}
        if(!IsPlayerInAnyVehicle(playerid)){
            SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
            return 1;
		}
		new Float:VehLife;
		GetVehicleHealth(GetPlayerVehicleID(playerid),VehLife);
		if(VehLife == 1000){
		    SendClientMessage(playerid, COLOR_GRAY, "Seu carro não está danificado! Não gaste dinheiro à toa.");
		    return 1;
		}
		if(GetPlayerMoney(playerid) < 100){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro! Custo: $100");
		    return 1;
		} else {
		    new Float:X,Float:Y,Float:Z,Float:ang;
		    GetVehiclePos(GetPlayerVehicleID(playerid),X,Y,Z);
		    GetVehicleZAngle(GetPlayerVehicleID(playerid),ang);
		    SendClientMessage(playerid, COLOR_WHITE, "Veículo enviado para conserto...");
		    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			GameTextForPlayer(playerid,"~w~Consertando...",10000,0);
			SetTimerEx("ArrumandoVeiculo",10000,0,"ddffff",playerid,GetPlayerVehicleID(playerid),X,Y,Z,ang);
			return 1;
		}
	}
	if(strcmp(cmd,"/pintarcar",true) == 0) {
	    new tmp[256];
	    new cor1,cor2;
	    tmp = strtok(cmdtext,idx);
	    cor1 = strval(tmp);
	    if(!strlen(tmp)){
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /pintarcar [cor1] [cor2]");
	        return 1;
		}
		tmp = strtok(cmdtext,idx);
		cor2 = strval(tmp);
		if(!strlen(tmp)){
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /pintarcar [cor1] [cor2]");
	        return 1;
		}
		if(cor1 < 0 || cor1 > 139){
		    SendClientMessage(playerid, COLOR_GRAY, "Cor 1 inválida! Cores 1 e 2 de 0 à 139");
		    return 1;
		}
		if(cor2 < 0 || cor2 > 139){
		    SendClientMessage(playerid, COLOR_GRAY, "Cor 2 inválida! Cores 1 e 2 de 0 à 139");
		    return 1;
		}
        if(AreaCustomizacao[playerid] == 0){
            SendClientMessage(playerid, COLOR_GRAY, "Você não está na loja de customização!");
            return 1;
		}
        if(!IsPlayerInAnyVehicle(playerid)){
            SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
            return 1;
		}
		if(GetPlayerMoney(playerid) < 50){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro! Custo: $50");
		    return 1;
		} else {
		    ChangeVehicleColor(GetPlayerVehicleID(playerid),cor1,cor2);
		    SaveColors(GetPlayerVehicleID(playerid),cor1,cor2);
		    SendClientMessage(playerid, COLOR_WHITE, "Veículo pintado! A pintura custou $50");
		    AddPlayerMoney(playerid,-50,-1);
		    AcrescentarLucro(9,50);
		    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		    return 1;
		}
	}
	if(strcmp(cmd,"/mudarplaca",true) == 0) {
		new tmp[256];
   		strmid(tmp,cmdtext,11,19);
		if(!strlen(tmp)){
		   	SendClientMessage(playerid, COLOR_GRAY, "Uso: /mudarplaca [nome]");
		   	SendClientMessage(playerid, COLOR_GRAY, "O máximo de caracteres do nome é 8");
		   	return 1;
	   	}
	   	if(PlacaExiste(tmp)){
			SendClientMessage(playerid, COLOR_GRAY, "Essa placa já existe em outro veículo...");
			return 1;
		}
	   	if(AreaCustomizacao[playerid] == 0){
           	SendClientMessage(playerid, COLOR_GRAY, "Você não está na loja de customização!");
           	return 1;
		}
       	if(!IsPlayerInAnyVehicle(playerid)){
           	SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
           	return 1;
		}
		for(new s = 0; s < strlen(tmp); s++){
			if(strfind(tmp,"_",false,s) != -1 || strfind(tmp,"*",false,s) != -1 || strfind(tmp,"'",false,s) != -1 || strfind(tmp,"/",false,s) != -1 || strfind(tmp,"?",false,s) != -1 || strfind(tmp,">",false,s) != -1
			|| strfind(tmp,"<",false,s) != -1 || strfind(tmp,":",false,s) != -1 || strfind(tmp,"?",false,s) != -1 || strfind(tmp,"\"",false,s) != -1 || strfind(tmp,"|",false,s) != -1 || strfind(tmp,"!",false,s) != -1){
				SendClientMessage(playerid, COLOR_GRAY, "Sem caracteres especiais na nova placa (\" * _ < > \\ / ? | : ' !)");
				return 1;
			}
		}
		if(GetPlayerMoney(playerid) < 200){
	   	 	SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro! Custo: $200");
	    	return 1;
		} else {
	 		if(!strcmp(vStats[GetPlayerVehicleID(playerid)][VDono], PlayerName(playerid), false)){
	   		    new Float:X,Float:Y,Float:Z,Float:ang;
		   		SetVehicleNumberPlate(GetPlayerVehicleID(playerid),tmp);
				SendClientMessage(playerid, COLOR_WHITE, "[LOJA] Espere estamos validando sua placa na documentação.");
		   		SalvarPlaca(GetPlayerVehicleID(playerid),tmp);
			    GetVehiclePos(GetPlayerVehicleID(playerid),X,Y,Z);
			    GetVehicleZAngle(GetPlayerVehicleID(playerid),ang);
			    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				GameTextForPlayer(playerid,"~w~Colocando Placa...",10000,0);
				SetTimerEx("ColocandoPlaca",10000,0,"ddffff",playerid,GetPlayerVehicleID(playerid),X,Y,Z,ang);
		   		return 1;
 			}
 			else{
 			    SendClientMessage(playerid, COLOR_GRAY, "Você não é o dono do veículo!");
 			    return 1;
			}
		}
	}

	if(strcmp(cmd,"/fume",true) == 0) {
	   	if(AreaCustomizacao[playerid] == 0){
           	SendClientMessage(playerid, COLOR_GRAY, "Você não está na loja de customização!");
           	return 1;
		}
       	if(!IsPlayerInAnyVehicle(playerid)){
           	SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
           	return 1;
		}
		if(GetPlayerMoney(playerid) < 1200){
	   	 	SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro! Custo: $200");
	    	return 1;
		}
		if(vStats[GetPlayerVehicleID(playerid)][Fume] == 1){
	   	 	SendClientMessage(playerid, COLOR_GRAY, "Este veículo já possui fumê!!");
	    	return 1;
		} else {
	 		if(!strcmp(vStats[GetPlayerVehicleID(playerid)][VDono], PlayerName(playerid), false)){
				SendClientMessage(playerid, COLOR_WHITE, "[LOJA] Filtros de fumê colocados, ninguém verá quem está dentro do carro..");
				vStats[GetPlayerVehicleID(playerid)][Fume] = 1;
				VCamuflado[playerid] = 1;
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		   		return 1;
 			}
 			else{
 			    SendClientMessage(playerid, COLOR_GRAY, "Você não é o dono do veículo!");
 			    return 1;
			}
		}
	}
	if(strcmp(cmd, "/texuguicionss",true)==0 && IsPlayerInAnyVehicle(playerid)){
	    new id = GetPlayerVehicleID(playerid);
	    new model = GetVehicleModel(id);
	    switch(model){
	        case 581,523,462,521,463,522,461,448,468,586: AddVehicleComponent(id,1010);
		}
		return 1;
	}
	if(strcmp(cmd, "/trancarmototaxi", true) == 0) {
        if(Profissao[playerid] == MOTOTAXI || IsPlayerAdmin(playerid)){
            if(!IsPlayerInAnyVehicle(playerid)){
                SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
                return 1;
			}
			if(GetPlayerVehicleID(playerid) != MotoTaxi && GetPlayerVehicleID(playerid) != MotoTaxi2 && GetPlayerVehicleID(playerid) != MotoTaxi3){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma moto taxi da sua cooperativa!");
                return 1;
			}
			else{
			    SendClientMessage(playerid, COLOR_WHITE, "Trancado...");
			    for(new i=0; i<SLOTS2; i++){
			        if(i != playerid){
						if(Profissao[i] != MOTOTAXI && !IsPlayerAdmin(i)){
		    				SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid),i, 0, 1);
						}
					}
				}
				return 1;
		    }
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Taxista!");
		    return 1;
		}
	}
	if(strcmp(cmd, "/destrancarmototaxi", true) == 0) {
        if(Profissao[playerid] == MOTOTAXI || IsPlayerAdmin(playerid)){
			if(!IsPlayerInAnyVehicle(playerid)){
                SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
                return 1;
			}
			if(GetPlayerVehicleID(playerid) != MotoTaxi && GetPlayerVehicleID(playerid) != MotoTaxi2 && GetPlayerVehicleID(playerid) != MotoTaxi3){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma moto taxi da sua cooperativa!");
                return 1;
			}
			else{
	    		SendClientMessage(playerid, COLOR_WHITE, "Destrancado...");
			   	for(new i=0; i<SLOTS2; i++){
			   	    if(i != playerid){
		    			SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid),i, 0, 0);
					}
				}
				return 1;
		    }
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Taxista!");
		    return 1;
		}
	}
	if(strcmp(cmd, "/mtaxi", true) == 0 && IsPlayerConnected(playerid)) {
		if(Profissao[playerid] == MOTOTAXI || IsPlayerAdmin(playerid)) {
	        new tmp[256];
	        new plid;
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp)) {
	            SendClientMessage(playerid, COLOR_GRAY, "/mtaxi [id]");
	            return 1;
			}
			plid = strval(tmp);
			if(!IsPlayerConnected(plid)){
        	    SendClientMessage(playerid, COLOR_GRAY, "O jogador não está conectado/logado.");
        	    return 1;
			}
			if(NoTaxi[plid] == 1){
				SendClientMessage(playerid, COLOR_GRAY, "O Taxímetro já está rodando");
				return 1;
			}
			new vehid = GetPlayerVehicleID(playerid);
			if(!IsPlayerInVehicle(plid,vehid)){
			    SendClientMessage(playerid, COLOR_GRAY, "Ele tem que estar no seu veículo!");
				return 1;
			}
      		new modelo = GetPlayerVehicleID(playerid);
        	if(modelo == MotoTaxi || modelo == MotoTaxi2 || modelo == MotoTaxi3){
  		    	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
  		    	    if(plid != playerid){
						SendClientMessage(playerid, COLOR_MOTOTAXI, "O Moto-Taxímetro começou a rodar");
					    SendClientMessage(plid, COLOR_MOTOTAXI, "O Moto-Taxímetro já está rodando. A corrida está sendo cobrada a partir de agora.");
					    MTaximetro[plid][0] = 1;
						MTaximetro[plid][1] = playerid;
						AcrescentarExPoints(playerid,1);
						NoTaxi[plid] = 1;
			           	SetTimerEx("Taxi",5000,0,"d",playerid);
						return 1;
					} else {
						SendClientMessage(playerid, COLOR_GRAY, "Você não pode ligar o Moto-Taxímetro para você.");
						return 1;
					}
				} else {
					SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar dirigindo");
					return 1;
				}
			} else {
				SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma Moto autorizada. Tem que ser uma FCR-900 da Yellow's Taxi");
				return 1;
			}
	   	} else {
       		SendClientMessage(playerid, COLOR_GRAY, "Você não é Moto-taxista.");
			return 1;
		}
	}
	if(strcmp(cmd, "/trancartaxiaereo", true) == 0) {
        if(Profissao[playerid] == TAXI_AEREO || IsPlayerAdmin(playerid)){
            if(!IsPlayerInAnyVehicle(playerid)){
                SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
                return 1;
			}
			if(GetPlayerVehicleID(playerid) != AeroTaxi){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um taxi aereo da sua cooperativa!");
                return 1;
			}
			else{
			    SendClientMessage(playerid, COLOR_WHITE, "Trancado...");
			    for(new i=0; i<SLOTS2; i++){
			        if(i != playerid){
						if(Profissao[i] != TAXI_AEREO && !IsPlayerAdmin(i)){
		    				SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid),i, 0, 1);
						}
					}
				}
				return 1;
		    }
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Taxista!");
		    return 1;
		}
	}
	if(strcmp(cmd, "/destrancartaxiaereo", true) == 0) {
        if(Profissao[playerid] == TAXI_AEREO || IsPlayerAdmin(playerid)){
			if(!IsPlayerInAnyVehicle(playerid)){
                SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
                return 1;
			}
			if(GetPlayerVehicleID(playerid) != AeroTaxi){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um taxi aereo da sua cooperativa!");
                return 1;
			}
			else{
	    		SendClientMessage(playerid, COLOR_WHITE, "Destrancado...");
			   	for(new i=0; i<SLOTS2; i++){
			   	    if(i != playerid){
		    			SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid),i, 0, 0);
					}
				}
				return 1;
		    }
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Taxista!");
		    return 1;
		}
	}
	if(strcmp(cmd, "/ataxi", true) == 0 && IsPlayerConnected(playerid)) {
	    if(Profissao[playerid] == TAXI_AEREO || IsPlayerAdmin(playerid)) {
	        new tmp[256];
	        new plid;
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp)) {
	            SendClientMessage(playerid, COLOR_GRAY, "/ataxi [id]");
			}
			plid = strval(tmp);
			if(!IsPlayerConnected(plid)){
        	    SendClientMessage(playerid, COLOR_GRAY, "O jogador não está conectado/logado.");
        	    return 1;
			}
			if(NoTaxi[plid] == 1){
				SendClientMessage(playerid, COLOR_GRAY, "O Taxímetro já está rodando");
				return 1;
			}
			new vehid = GetPlayerVehicleID(playerid);
			if(!IsPlayerInVehicle(plid,vehid)){
			    SendClientMessage(playerid, COLOR_GRAY, "Ele tem que estar no seu veículo!");
				return 1;
			}
      		new modelo = GetPlayerVehicleID(playerid);
        	if(modelo == AeroTaxi){
  		    	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
  		    	    if(plid != playerid){
						SendClientMessage(playerid, COLOR_TAXI_AEREO, "O aero-taxímetro começou a rodar");
					    SendClientMessage(plid, COLOR_TAXI_AEREO, "O aero-taxímetro já está rodando. A corrida está sendo cobrada a partir de agora.");
					    ATaximetro[plid][0] = 1;
						ATaximetro[plid][1] = playerid;
						AcrescentarExPoints(playerid,1);
						NoTaxi[plid] = 1;
					   	SetTimerEx("Taxi",5000,0,"d",playerid);
		  		        return 1;
					} else {
						SendClientMessage(playerid, COLOR_GRAY, "Você não pode ligar o Aero-Taxímetro para você.");
						return 1;
					}
				} else {
					SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar dirigindo");
					return 1;
				}
			} else {
				SendClientMessage(playerid, COLOR_GRAY, "Você não está em um Helicóptero Maverick da Yellow's Taxi.");
				return 1;
			}
	   	} else {
       		SendClientMessage(playerid, COLOR_GRAY, "Você não é Aero-taxista.");
			return 1;
		}
	}
    if(strcmp(cmd, "/trancartaxi", true) == 0) {
        if(Profissao[playerid] == TAXISTA || IsPlayerAdmin(playerid)){
            if(!IsPlayerInAnyVehicle(playerid)){
                SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
                return 1;
			}
			if(GetPlayerVehicleID(playerid) != Taxi1 && GetPlayerVehicleID(playerid) != Taxi2 && GetPlayerVehicleID(playerid) != Taxi3){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um taxi da sua cooperativa!");
                return 1;
			}
			else{
			    SendClientMessage(playerid, COLOR_WHITE, "Trancado...");
			    for(new i=0; i<SLOTS2; i++){
			        if(i != playerid){
						if(Profissao[i] != TAXISTA && !IsPlayerAdmin(i)){
		    				SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid),i, 0, 1);
						}
					}
				}
				return 1;
		    }
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Taxista!");
		    return 1;
		}
	}
	if(strcmp(cmd, "/destrancartaxi", true) == 0) {
        if(Profissao[playerid] == TAXISTA || IsPlayerAdmin(playerid)){
			if(!IsPlayerInAnyVehicle(playerid)){
                SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
                return 1;
			}
			if(GetPlayerVehicleID(playerid) != Taxi1 && GetPlayerVehicleID(playerid) != Taxi2 && GetPlayerVehicleID(playerid) != Taxi3){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um taxi da sua cooperativa!");
                return 1;
			}
			else{
	    		SendClientMessage(playerid, COLOR_WHITE, "Destrancado...");
			   	for(new i=0; i<SLOTS2; i++){
			   	    if(i != playerid){
		    			SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid),i, 0, 0);
					}
				}
				return 1;
		    }
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Taxista!");
		    return 1;
		}
	}
	if(strcmp(cmd, "/ttaxi", true) == 0 && IsPlayerConnected(playerid)) {
	    if(Profissao[playerid] == TAXISTA || IsPlayerAdmin(playerid)){
			new tmp[256];
	    	new plid;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/ttaxi [id]");
			}
        	plid = strval(tmp);
        	if(!IsPlayerConnected(plid)){
        	    SendClientMessage(playerid, COLOR_GRAY, "O jogador não está conectado/logado.");
        	    return 1;
			}
			if(Profissao[plid] == TAXISTA){
				SendClientMessage(playerid, COLOR_GRAY, "Você não pode ligar o taximetro pra você.");
				return 1;
			}
			if(NoTaxi[plid] == 1){
				SendClientMessage(playerid, COLOR_GRAY, "O Taxímetro já está rodando");
				return 1;
			}
			new vehid = GetPlayerVehicleID(playerid);
			if(!IsPlayerInVehicle(plid,vehid)){
			    SendClientMessage(playerid, COLOR_GRAY, "Ele tem que estar no seu veículo!");
				return 1;
			}
			new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
			if(modelo == 420){
  		    	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
  		    	    if(plid != playerid){
		            	SendClientMessage(playerid, COLOR_TAXISTA, "O taxímetro começou a rodar.");
		                SendClientMessage(plid, COLOR_TAXISTA, "O taxímetro começou a rodar. A bandeirada de $20 foi cobrada.");
		                AddPlayerMoney(playerid,20,3);
		                AddPlayerMoney(plid,-20,-1);
		                Taximetro[plid][0] = 1;
		                Taximetro[plid][1] = playerid;
		                AcrescentarExPoints(playerid,1);
		                NoTaxi[plid] = 1;
		                SetTimerEx("Taxi",5000,0,"d",playerid);
		  		        return 1;
					} else {
						SendClientMessage(playerid, COLOR_GRAY, "Você não pode ligar o Taxímetro para você.");
						return 1;
					}
				} else {
					SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar dirigindo");
					return 1;
				}
			} else {
				SendClientMessage(playerid, COLOR_GRAY, "Você não está em um Carro da Yellow's'Taxi.");
				return 1;
			}
	   	} else {
       		SendClientMessage(playerid, COLOR_GRAY, "Você não é taxista.");
			return 1;
		}
	}
	if(strcmp(cmd, "/passarhistoria", true) == 0) {
 		if(pStats[playerid][HistoriaFeita] == 1) {
	   		SendClientMessage(playerid, COLOR_GRAY, "Você já fez a história!");
	   		return 1;
	   	}
	   	Conversa16(playerid);
	   	SendClientMessage(playerid, COLOR_WHITE, "História passada!");
	   	return 1;
	}
	if(strcmp(cmd, "/GPS", true) == 0) {
	   new tmp[256];
	   new localid;
	   new str[256];
	   tmp = strtok(cmdtext,idx);
	   localid = strval(tmp);
	   if(!strlen(tmp)){
	   SendClientMessage(playerid, COLOR_GRAY, "USO: /GPS [ID/do/Local]");
	   return 1;
	   }
	   if(GPSLigado[playerid] == 1){
	   SendClientMessage(playerid, COLOR_GRAY, "Seu GPS já está ativado!");
	   return 1;
	   }
	   if(!IsPlayerInAnyVehicle(playerid)){
	   SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo, como poderá ligar o GPS?");
	   return 1;
	   }
	   if(localid <= 0 || localid >= sizeof(GPSLocais)){
       format(str,sizeof(str),"Ei, locais de 1 a %d, digite '/locais até /locais8' para ve-los!",sizeof(GPSLocais));
	   SendClientMessage(playerid, COLOR_GRAY, str);
       return 1;
       }
   	   if(pStats[playerid][HistoriaFeita] == 0) {
	   SendClientMessage(playerid, COLOR_GRAY, "Termine a história para usar o GPS!");
	   return 1;
	   }
	   else{
           MissaoLixeiro[playerid] = 0;
  		   EntregadePizza[playerid] = 0;
	       ColocandoDrogas[playerid] = 0;
		   DrogasNoCaminhao[playerid] = 0;
	       PegandoDrogas[playerid] = 0;
           GPSLigado[playerid] = 1;
		   DisablePlayerCheckpoint(playerid);
		   SetPlayerCheckpoint(playerid,GPSLocais[localid][0],GPSLocais[localid][1],GPSLocais[localid][2],3.0);
		   CheckpointStatus[playerid] = GPSDESTINO;
		   format(str,sizeof(str),"Destino selecionado: %s",GPSNames[localid]);
		   SendClientMessage(playerid, COLOR_TAXISTA, str);
		   SendClientMessage(playerid, COLOR_TAXISTA, "Siga o Checkpoint no radar para chegar até lá.");
		   if(JogadorContratado(playerid,1)) AcrescentarPrejuizo(1,10);
		   return 1;
	   }
	}
	if(strcmp(cmd, "/irlocal", true) == 0 && IsPlayerAdmin(playerid)) {
 		new tmp[256];
	  	new localid;
	  	new str[256];
	   	tmp = strtok(cmdtext,idx);
	   	localid = strval(tmp);
	   	if(!strlen(tmp)){
	   		SendClientMessage(playerid, COLOR_GRAY, "USO: /irlocal [ID/do/Local]");
	   		return 1;
	   	}
		if(localid <= 0 || localid >= sizeof(GPSLocais)){
		    format(str,sizeof(str),"Ei, locais de 1 a %d, digite '/locais até /locais8' para ve-los!",sizeof(GPSLocais));
			SendClientMessage(playerid, COLOR_GRAY, str);
	   		return 1;
	   	}
   		else{
		   	format(str,sizeof(str),"Destino selecionado: %s",GPSNames[localid]);
		   	SendClientMessage(playerid, COLOR_TAXISTA, str);
		   	SetPlayerPos(playerid,GPSLocais[localid][0],GPSLocais[localid][1],GPSLocais[localid][2]);
		   	return 1;
   		}
	}
	if(strcmp(cmd, "/desligargps", true) == 0) {
	   if(GPSLigado[playerid] == 0){
	   SendClientMessage(playerid, COLOR_GRAY, "Seu GPS não está ativado!");
	   return 1;
	   }
	   if(pStats[playerid][HistoriaFeita] == 0) {
       SendClientMessage(playerid, COLOR_GRAY, "Termine a história para usar o GPS!");
	   return 1;
	   }
	   else{
		   DisablePlayerCheckpoint(playerid);
		   CheckpointStatus[playerid] = NONE;
		   SendClientMessage(playerid, COLOR_WHITE, "GPS DESATIVADO...");
		   GPSLigado[playerid] = 0;
		   return 1;
	   }
	}
	if(strcmp(cmd,"/pizza",true)==0){
	    if(Profissao[playerid] == ENTREGADOR_PIZZA || IsPlayerAdmin(playerid)){
	       	new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
			if(modelo == 448){
				new tmp[256];
		    	new plid;
	    		new distancia;
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_GRAY, "/pizza [id].");
					return 1;
				}
	    	    plid = strval(tmp);
				distancia = GetDistanceBetweenPlayers(playerid, plid);
		 		if(distancia > 15){
			  		SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto!");
					return 1;
				}
				if(PizzasMoto[GetPlayerVehicleID(playerid)] <= 0){
					SendClientMessage(playerid,COLOR_GRAY,"A sua moto não tem pizzas.");
					return 1;
				}
				if(JaComi[plid] == 1 && JaVendi[playerid] == 1){
					SendClientMessage(playerid,COLOR_GRAY,"Atenção você não pode vender para o mesmo jogador em menos de 60 segundos.");
					SendClientMessage(playerid,COLOR_GRAY,"O administrador foi informado. Caso pessista será kickado ou banido");
				    format(tmp,256,"%s tentou vender uma pizza em menos de 60 segundos para o mesmo jogador. Chame-lhe a atenção.",PlayerName(playerid));
				    SendClientMessageAdmin(COLOR_ENTREGADOR_PIZZA,tmp);
					KillTimer(TimerComidas[playerid]);
					TimerComidas[playerid] = SetTimerEx("Comeu",60000,0,"d",plid,playerid);
					return 1;
				}
		       	if(GetPlayerMoney(plid) < 100){
			        SendClientMessage(playerid, COLOR_GRAY, "Ele não tem dinheiro para pagar a pizza. CUSTO: $100");
					return 1;
				}
				if(IsPlayerConnected(plid)){
					if(plid != playerid){
					    SendClientMessage(playerid,COLOR_ENTREGADOR_PIZZA,"Uma pizza foi oferecida, agora espere o outro jogador aceitar.");
					    new string[256];
					    format(string,sizeof(string),"%s está lhe oferecendo uma pizza, digite /aceitarpizza para aceita-la ou digite /recusarpizza para recusa-la.",PlayerName(playerid));
                        SendClientMessage(plid, COLOR_ENTREGADOR_PIZZA, string);
						OfertaDada[plid] = 1;
					    VendedorProduto[plid] = playerid;
					    Produto[plid] = 1;
						return 1;
					}
	    		} else {
				    SendClientMessage(playerid,COLOR_GRAY,"Jogador não conectado/logado");
					return 1;
				}
			} else {
				SendClientMessage(playerid,COLOR_GRAY,"Você não está numa moto Pizzaboy!");
				return 1;
			}
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Você não é entregador de pizza!");
		    return 1;
		}
	}
	if(strcmp(cmd,"/aceitarpizza",true) == 0) {
	    if(OfertaDada[playerid] == 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma pizza!");
	        return 1;
		}
		if(Produto[playerid] != 1){
			SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma pizza!");
			return 1;
		}
		if(!IsPlayerConnected(VendedorProduto[playerid])){
		    SendClientMessage(playerid, COLOR_GRAY, "O outro jogador parece ter saído do servidor!");
		    return 1;
		}
		if(!IsPlayerInAnyVehicle(VendedorProduto[playerid])){
		    SendClientMessage(playerid, COLOR_GRAY, "Ei... O outro jogador saiu da moto de pizza!");
		    OfertaDada[playerid] = 0;
			Produto[playerid] = 0;
		    return 1;
		}
		if(PizzasMoto[GetPlayerVehicleID(VendedorProduto[playerid])] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "A moto do outro jogador não possui pizzas!");
		    OfertaDada[playerid] = 0;
			Produto[playerid] = 0;
		    return 1;
		}
		else{
		    new tmp[256];
		    new string[256];
	    	SendClientMessage(VendedorProduto[playerid],COLOR_ENTREGADOR_PIZZA,"Pizza aceita.");
		    SendClientMessage(playerid,COLOR_ENTREGADOR_PIZZA,"Você se deliciou com uma pizza da Well Stacked Pizza Co.");
		    AddPlayerMoney(VendedorProduto[playerid],150,3);
		    AddPlayerMoney(playerid,-100,-1);
		    AddPlayerHealth(playerid,20);
		    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
		    format(tmp,256,"*** %s vendeu uma pizza a %s ***",PlayerName(VendedorProduto[playerid]),PlayerName(playerid));
		    SendClientMessageAdmin(COLOR_ENTREGADOR_PIZZA,tmp);
		    PizzasMoto[GetPlayerVehicleID(VendedorProduto[playerid])] --;
			if(JogadorContratado(VendedorProduto[playerid],0)) AcrescentarLucro(0,150);
		    format(string,sizeof(string),"Foi entregue uma pizza, sua moto agora tem %d pizzas.",PizzasMoto[GetPlayerVehicleID(VendedorProduto[playerid])]);
		    SendClientMessage(VendedorProduto[playerid], COLOR_ENTREGADOR_PIZZA, string);
			JaComi[playerid] = 1;
			JaVendi[VendedorProduto[playerid]] = 1;
			OfertaDada[playerid] = 0;
			Produto[playerid] = 0;
		    TimerComidas[VendedorProduto[playerid]] = SetTimerEx("Comeu",30000,0,"d",playerid,VendedorProduto[playerid]);
		    if(Profissao[playerid] != ENTREGADOR_PIZZA) AcrescentarExPoints(VendedorProduto[playerid],1);
		    return 1;
		}
	}
	if(strcmp(cmd,"/recusarpizza",true) == 0) {
	    if(OfertaDada[playerid] == 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma pizza!");
	        return 1;
		}
		if(Produto[playerid] != 1){
			SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma pizza!");
			return 1;
		}
		else{
		    OfertaDada[playerid] = 0;
			Produto[playerid] = 0;
			SendClientMessage(VendedorProduto[playerid], COLOR_GRAY, "A pizza foi recusada!");
			SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, "Você recusou a pizza...");
			return 1;
		}
	}
	if(strcmp(cmd,"/verpizzas",true) == 0) {
		if(Profissao[playerid] == ENTREGADOR_PIZZA || IsPlayerAdmin(playerid)){
	       	new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
			if(modelo == 448){
      			if(PizzasMoto[GetPlayerVehicleID(playerid)] > 0){
					new string[256];
					format(string,sizeof(string),"A moto está com %d pizzas.",PizzasMoto[GetPlayerVehicleID(playerid)]);
				    SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, string);
				    return 1;
				} else {
	   				SendClientMessage(playerid, COLOR_GRAY, "Essa moto não tem Pizzas!");
	   				return 1;
				}
			} else {
	   			SendClientMessage(playerid, COLOR_GRAY, "Você não está numa moto Pizzaboy!");
	   			return 1;
			}
 		} else {
	   		SendClientMessage(playerid, COLOR_RED2, "Você não é Entregador de Pizza");
	   		return 1;
		}
	}
	if(strcmp(cmd,"/entregarpizza",true)==0){
	    if(Profissao[playerid] == ENTREGADOR_PIZZA || IsPlayerAdmin(playerid)){
	       	new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
			if(modelo == 448){
			    if(PizzasMoto[GetPlayerVehicleID(playerid)] > 0){
				    if(PizzariaCar[playerid] == 1){
				        if(EntregadePizza[playerid]==1){
			          		SendClientMessage(playerid, COLOR_RED2, "Você já tem 1 pedido");
							return 1;
						} else {
						    if(PizzasEntregues[playerid] == 0) PizzasNecessarias[playerid] = 5;
		                    SendClientMessage(playerid,COLOR_ENTREGADOR_PIZZA,"O pedido foi dado, o local da entrega está no radar!");
							new pizzas = random(55);
							DisablePlayerCheckpoint(playerid);
							SetPlayerCheckpoint(playerid,EntregaPizza[pizzas][0],EntregaPizza[pizzas][1],EntregaPizza[pizzas][2],3.0);
							EntregadePizza[playerid] = 1;
							MissaoLixeiro[playerid] = 0;
	       				    ColocandoDrogas[playerid] = 0;
		  				 	DrogasNoCaminhao[playerid] = 0;
	       					PegandoDrogas[playerid] = 0;
							CheckpointStatus[playerid] = NONE;
							return 1;
						}
					} else {
						SendClientMessage(playerid,COLOR_RED2,"Você não está na pizzaria.");
						return 1;
					}
				} else {
					SendClientMessage(playerid,COLOR_RED2,"A sua moto não tem pizzas.");
					return 1;
				}
			} else {
				SendClientMessage(playerid,COLOR_RED2,"Você não está numa moto Pizzaboy!");
				return 1;
			}
		} else {
		    SendClientMessage(playerid,COLOR_RED2,"Não tens permissão para usar esse comando!");
		    return 1;
		}
	}
	if(strcmp(cmd,"/pegarpizza",true) == 0) {
		if(Profissao[playerid] == ENTREGADOR_PIZZA || IsPlayerAdmin(playerid)){
	    new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
		if(modelo == 448){
			new tmp[256];
			new quantia;
		    tmp = strtok(cmdtext,idx);
		    quantia = strval(tmp);
		    if(!strlen(tmp)){
		   		SendClientMessage(playerid, COLOR_GRAY, "/pegarpizza [quantidade]");
		   		return 1;
		    }
		    if(PizzariaCar[playerid] == 0){
		   		SendClientMessage(playerid, COLOR_GRAY, "Você não está na pizzaria.");
		   		return 1;
		    }
		    if(PizzasMoto[GetPlayerVehicleID(playerid)] + quantia > 5){
			   SendClientMessage(playerid, COLOR_GRAY, "Só dá para levar 5 pizzas por moto.");
			   return 1;
			}
			else{
				new string[256];
			    format(string,sizeof(string),"Você pegou %d pizzas agora a moto tem %d pizzas.",quantia,PizzasMoto[GetPlayerVehicleID(playerid)] + quantia);
			    SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, string);
			    if(JogadorContratado(playerid,0)) AcrescentarPrejuizo(0,30);
				PizzasMoto[GetPlayerVehicleID(playerid)] = PizzasMoto[GetPlayerVehicleID(playerid)]+quantia;
				return 1;
		   		}
			}else{
				SendClientMessage(playerid, COLOR_GRAY, "Você não está em uma moto");
				return 1;
			}
		}else{
			SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão.");
			return 1;
		}
	}
    if(strcmp(cmd, "/revisarlimosine", true) == 0) {
		if(Profissao[playerid] == MOTORISTA_PARTICULAR){
      		new modelo = GetPlayerVehicleID(playerid);
        	if(modelo  == limosine1 || modelo == limosine2){
        	    if(MotorLimo[playerid] == 0){
					if(LimoRevisada[GetPlayerVehicleID(playerid)] == 0){
					    if(EntregaLimo[playerid] == 0){
							DisablePlayerCheckpoint(playerid);
				  			SetPlayerCheckpoint(playerid, 1024.6149,-1024.0205,32.1016, 3.0);
				  			CheckpointStatus[playerid] = REVISAOLIMO1;
				  			EntregaLimo[playerid] = 1;
							SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Vá até a oficina para revisar o motor do carro.");
							return 1;
						} else {
							SendClientMessage(playerid, COLOR_RED2, "Você já está revisando uma limosine.");
							return 1;
						}
					} else {
						SendClientMessage(playerid, COLOR_RED2, "Esta limosine já foi revisada.");
						return 1;
					}
		  		} else {
			  		SendClientMessage(playerid, COLOR_RED2, "Você acabou de checar o Motor de 1 Limosine.");
			  		return 1;
	  			}
		  	} else {
			  	SendClientMessage(playerid, COLOR_RED2, "Você tem que estar em uma Limosine da LuxLimosine.");
			  	return 1;
			}
	  	} else {
		  	SendClientMessage(playerid, COLOR_RED2, "Você não é Motorista.");
		  	return 1;
		}
	}
   	if(strcmp(cmd, "/lavarlimosine", true) == 0) {
		if(Profissao[playerid] == MOTORISTA_PARTICULAR){
			if(LimoLavada[GetPlayerVehicleID(playerid)] == 1){
		 		SendClientMessage(playerid, COLOR_RED2, "A Limosine está limpa.");
		   		return 1;
		   	}
		   	if(LavagemLimo[playerid] == 1){
		 		SendClientMessage(playerid, COLOR_RED2, "Você acabou de lavar 1 Limosine.");
				return 1;
		   	}
		   	if(LavandoLimo[playerid] == 0){
      			new modelo = GetPlayerVehicleID(playerid);
				if(modelo  == limosine1 || modelo == limosine2 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
					SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Leve a Limosine para o Lava-Jato.");
					SetPlayerCheckpoint(playerid, 1910.7260,-1776.1322,13.3828,3.0);
					LavandoLimo[playerid] = 1;
					CheckpointStatus[playerid] = LAVANDOLIMOSINE;
	 	       		return 1;
		   		} else {
		 			SendClientMessage(playerid, COLOR_RED2, "Você não está em uma Limosine da empresa LuxLimosine.");
					return 1;
				}
			} else {
		 		SendClientMessage(playerid, COLOR_RED2, "Você marcou a lavagem, vá para o Checkpoint");
				return 1;
			}
		}
	}
    if(strcmp(cmd, "/contratarseguranca", true) == 0) {
	    new tmp[256];
		new plid,valor;
		tmp = strtok(cmdtext,idx);
		plid = strval(tmp);
		if(!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /contratarseguranca [id] [valor]");
		    return 1;
		}
		if(pStats[playerid][NSegurancas] >= MAX_SEGURANCAS){
		    SendClientMessage(playerid, COLOR_GRAY, "Limite de seguranças por jogador excedido pelo gamemode!");
		    return 1;
		}
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador desconectado!");
		    return 1;
		}
		tmp = strtok(cmdtext,idx);
		valor = strval(tmp);
		if(!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /contratarseguranca [id] [valor]");
		    return 1;
		}
		if(Profissao[plid] != SEGURANÇA){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não é segurança!");
		    return 1;
		}
		if(plid == playerid){
		    SendClientMessage(playerid, COLOR_GRAY, "Está querendo se auto-contratar?");
		    return 1;
		}
		if(pStats[plid][JaContratado] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador já está contratado!");
		    return 1;
		}
		else{
			for(new i=0; i<pStats[playerid][NSegurancas]; i++){
	    		if(strcmp(GetSegurancas[playerid][i],PlayerName(plid),true) == 0){
		        	SendClientMessage(playerid, COLOR_GRAY, "Ele já trabalha para você!");
		        	return 0;
				}
			}
			SendClientMessage(playerid, COLOR_GREEN, "Contrato enviado!");
			new string[256];
			format(string,sizeof(string),"%s está lhe oferecendo um contrato por $%d:",PlayerName(playerid),valor);
			SendClientMessage(plid, COLOR_SEGURANÇA, string);
			SendClientMessage(plid, COLOR_SEGURANÇA, "Digite /aceitar para aceitar o contrato ou então digite /recusar para recusar o contrato!");
			SegurancaContratado[plid] = 1;
			Scontratador[plid] = playerid;
			Svaloroferecido[plid] = valor;
			invitestatus[plid] = INVITE_CONTRATO_SEGURANCA;
			SetTimerEx("Cancelar",60000,0,"d",plid);
			return 1;
		}
	}
	if(strcmp(cmd, "/demitirseguranca", true) == 0) {
	    new tmp[256];
	    new plid;
	    tmp = strtok(cmdtext,idx);
	    plid = strval(tmp);
	    if(!strlen(tmp)){
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /demitirseguranca [id]");
	        return 1;
		}
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador desconectado!");
		    return 1;
		}
		for(new i=0; i<pStats[playerid][NSegurancas]; i++){
	   		if(strcmp(GetSegurancas[playerid][i],PlayerName(plid),true) == 0){
	   		    set(GetSegurancas[playerid][i],"NONE");
	        	GetSegurancasValor[playerid][i] = 0;
	        	pStats[plid][JaContratado] = 0;
	        	SendClientMessage(playerid, COLOR_GREEN, "Segurança demitido!");
	        	SendClientMessage(plid, COLOR_GRAY, "Você foi demitido! Parece que não foi um bom segurança...");
	        	return 1;
			}
			else{
			    SendClientMessage(playerid, COLOR_GRAY, "Ele não trabalha para você!");
			    return 1;
			}
		}
	}
	if(strcmp(cmd, "/pescar", true) == 0) {
	    if(PescaInProgress[playerid] == 1) {
	    	SendClientMessage(playerid, COLOR_GRAY, "Calminha aê... Você já está pescando!");
	    	return 1;
	    }
		if(QtIscas[playerid] < 1){
			SendClientMessage(playerid, COLOR_GRAY, "Você não possui iscas! Como poderá pescar?");
			return 1;
		} else {
			if(AreaPesca[playerid] == 1){
				SendClientMessage(playerid,COLOR_GREEN,"Você lançou a rede de pesca. Espere ela voltar para concluir a pesca.");
				SendClientMessage(playerid,COLOR_GREEN,"Enquanto ela não vem, fique apreciando a paisagem.");
				PescaInProgress[playerid] = 1;
				SetTimerEx("Pesca",50000,0,"d",playerid);
				return 1;
			} else {
				SendClientMessage(playerid,COLOR_GRAY,"Você não está na Área de pesca, a área de pesca fica descendo o riozinho da Cooperativa de Pesca.");
				return 1;
			}
		}
	}
	if(strcmp(cmd,"/minhasiscas",true) == 0){
	    new string[256];
	    if(QtIscas[playerid] <= 0){
		    format(string,sizeof(string),"Você não possui nenhuma isca para pescar!");
		    SendClientMessage(playerid, COLOR_GRAY, string);
		    return 1;
		}
		else if(QtIscas[playerid] == 1){
			format(string,sizeof(string),"Você possui 1 isca para pescar!");
			SendClientMessage(playerid, COLOR_PESCADOR, string);
	      	return 1;
		}
		else if(QtIscas[playerid] > 1){
	      	format(string,sizeof(string),"Você possui %d iscas para pescar!",QtIscas[playerid]);
	      	SendClientMessage(playerid, COLOR_PESCADOR, string);
	      	return 1;
	    }
	}
	if(strcmp(cmd, "/abastecimentos", true) == 0) {
		if(Profissao[playerid] != BARMAN && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não é Barman!");
		new msg[256];
		SendClientMessage(playerid, COLOR_RED2, "Abastecimento de bebidas:");
		format(msg,sizeof(msg),"Restaurante: %s",SimNao[RequerAbastecimento[ARestaurante]]);
		SendClientMessage(playerid, COLOR_WHITE, msg);
		format(msg,sizeof(msg),"Balada: %s",SimNao[RequerAbastecimento[ABalada]]);
		SendClientMessage(playerid, COLOR_WHITE, msg);
		format(msg,sizeof(msg),"Bar: %s",SimNao[RequerAbastecimento[ABar]]);
		SendClientMessage(playerid, COLOR_WHITE, msg);
		format(msg,sizeof(msg),"Boate: %s",SimNao[RequerAbastecimento[ABoate]]);
		SendClientMessage(playerid, COLOR_WHITE, msg);
		return 1;
	}
	if(strcmp(cmd, "/entregarbebidas", true) == 0) {
		if(Profissao[playerid] != BARMAN && !IsPlayerAdmin(playerid)){
			SendClientMessage(playerid, COLOR_GRAY, "Você não é Barman!");
			return 1;
		}
		if(NoRestaurante2[playerid] == 1){
		    if(RequerAbastecimento[ARestaurante] == 1){
		        AddPlayerMoney(playerid,400,3);
				AcrescentarExPoints(playerid,1);
				RequerAbastecimento[ARestaurante] = 0;
				SendClientMessage(playerid, COLOR_BARMAN, "Restaurante: Obrigado senhor, aqui está seu pagamento: $200");
				return 1;
			}
		    else{
				SendClientMessage(playerid, COLOR_GRAY, "Restaurante: Lamento senhor, não estamos precisando de abastecimento de bebidas agora...");
				return 1;
			}
		}
		else if(AreaBalada[playerid] == 1){
		    if(RequerAbastecimento[ABalada] == 1){
            	AddPlayerMoney(playerid,250,3);
				AcrescentarExPoints(playerid,1);
				RequerAbastecimento[ABalada] = 0;
				SendClientMessage(playerid, COLOR_BARMAN, "Balada: Abastecimento feito, aqui está o dinheiro: $150, quando precisarmos novamente o chamaremos, obrigado!");
				return 1;
			}
		    else{
				SendClientMessage(playerid, COLOR_GRAY, "Balada: Não necessitamos de bebidas no momento!");
				return 1;
			}
		}
		else if(AreaStrip[playerid] == 1){
		    if(RequerAbastecimento[ABoate] == 1){
		        AddPlayerMoney(playerid,250,3);
				AcrescentarExPoints(playerid,1);
				RequerAbastecimento[ABoate] = 0;
				SendClientMessage(playerid, COLOR_BARMAN, "Boate: Grato senhor, aqui está seu pagamento: $150");
				return 1;
			}
		    else{
				SendClientMessage(playerid, COLOR_GRAY, "Boate: No momento temos bastante bebidas por aqui senhor, não requesitamos agora");
				return 1;
		    }
		}
		else if(AreaBar[playerid] == 1){
		    if(RequerAbastecimento[ABar] == 1){
		        AddPlayerMoney(playerid,250,3);
				AcrescentarExPoints(playerid,1);
				RequerAbastecimento[ABar] = 0;
				SendClientMessage(playerid, COLOR_BARMAN, "Bar: Bom trabalho, aqui está seu pagamento: $150");
				return 1;
			}
		    else{
				SendClientMessage(playerid, COLOR_GRAY, "Bar: Não precisamos de bebidas no momento!");
				return 1;
		    }
		}
		else{
			SendClientMessage(playerid, COLOR_GRAY, "Você não está em um local de entrega de bebidas! Locais: Bar, Restaurante, Boate e Balada");
			return 1;
		}
	}
	if(strcmp(cmd, "/cerveja", true) == 0) {
        if(Profissao[playerid] == BARMAN || IsPlayerAdmin(playerid)){
			new tmp[256];
			new plid, teor;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_GRAY, "/ceveja [id] [quantidade]");
			return 1;
			}
		    plid = strval(tmp);
    	    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_GRAY, "/cerveja [id] [quantidade]");
			return 1;
			}
			teor = strval(tmp);
			if(teor < 1 || teor > 20){
			    SendClientMessage(playerid, COLOR_GRAY, " Copos de chopp: de 1 à 20.");
				return 1;
			}
			if(plid == playerid){
				SendClientMessage(playerid, COLOR_GRAY, "Você não pode vender para si mesmo.");
				return 1;
			}
			if(GetPlayerMoney(plid) < 80*teor){
				SendClientMessage(playerid, COLOR_GRAY, "O jogador indicado não possui dinheiro.");
				return 1;
			}
			if(JaComi[plid] == 1 && JaVendi[playerid] == 1){
				SendClientMessage(playerid,COLOR_GRAY,"Atenção você não pode vender para o mesmo jogador em menos de 60 segundos.");
				SendClientMessage(playerid,COLOR_GRAY,"O administrador foi informado. Caso pessista será kickado ou banido");
			    format(tmp,256,"%s Tentou vender uma cerveja em menos de 60 segundos para o mesmo jogador. Chame-lhe a atenção.",PlayerName(playerid));
			    SendClientMessageAdmin(COLOR_ENTREGADOR_PIZZA,tmp);
				KillTimer(TimerComidas[playerid]);
				TimerComidas[playerid] = SetTimerEx("Comeu",60000,0,"d",plid,playerid);
				return 1;
			}
			else{
			    if(GetDistanceBetweenPlayers(playerid, plid) <= 20){
					if(IsPlayerConnected(plid)){
					    SendClientMessage(playerid,COLOR_BARMAN,"Cerveja oferecida, agora espere o outro jogador aceitar.");
				    	new string[256];
					   	format(string,sizeof(string),"%s está lhe oferecendo uma cerveja, digite /aceitarbebida para aceita-la ou digite /recusarbebida para recusa-la.",PlayerName(playerid));
					   	SendClientMessage(plid, COLOR_BARMAN, string);
         				Produto[plid] = 5;
					    ValorDoProduto[plid] = 80*teor;
					    TeorDoProduto[plid] = teor;
					    VendedorProduto[plid] = playerid;
					    OfertaDada[plid] = 1;
						return 1;
					}
					else{
					    SendClientMessage(playerid, COLOR_GRAY, "O jogador não está conectado!");
					    return 1;
					}
				}
				else{
				    SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto para entregar o bagulho!");
				    return 1;
				}
			}
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, " Ei...Você não tem permissão para isso, sua profissao é outra");
			return 1;
		}
	}
	if(strcmp(cmd, "/whisky", true) == 0) {
        if(Profissao[playerid] == BARMAN || IsPlayerAdmin(playerid)){
			new tmp[256];
			new plid, teor;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAY, "/whisky [id] [quantidade]");
				return 1;
			}
		    plid = strval(tmp);
    	    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/whisky [id] [quantidade]");
				return 1;
			}
			teor = strval(tmp);
			if(teor < 1 || teor > 3){
			    SendClientMessage(playerid, COLOR_GRAY, "Ei ele quer tomar um drink, não encher a cara. Doses de 1 e 3.");
				return 1;
			}
			if(plid == playerid){
				SendClientMessage(playerid, COLOR_GRAY, "Você não pode vender para si mesmo.");
				return 1;
			}
			if(JaComi[plid] == 1 && JaVendi[playerid] == 1){
				SendClientMessage(playerid,COLOR_GRAY,"Atenção você não pode vender para o mesmo jogador em menos de 60 segundos.");
				SendClientMessage(playerid,COLOR_GRAY,"O administrador foi informado. Caso pessista será kickado ou banido");
			    format(tmp,256,"%s Tentou vender um whisky em menos de 60 segundos para o mesmo jogador. Chame-lhe a atenção.",PlayerName(playerid));
			    SendClientMessageAdmin(COLOR_ENTREGADOR_PIZZA,tmp);
				KillTimer(TimerComidas[playerid]);
				TimerComidas[playerid] = SetTimerEx("Comeu",60000,0,"d",plid,playerid);
				return 1;
			}
			else{
			    if(GetDistanceBetweenPlayers(playerid, plid) <= 20){
					if(IsPlayerConnected(plid)){
						new grana = floatround((teor * 100));
					    if(GetPlayerMoney(plid) >= grana){
						    SendClientMessage(playerid,COLOR_BARMAN,"Whisky oferecido, agora espere o outro jogador aceitar.");
					    	new string[256];
					    	format(string,sizeof(string),"%s está lhe oferecendo um whisky, digite /aceitarbebida para aceita-la ou digite /recusarbebida para recusa-la.",PlayerName(playerid));
					    	SendClientMessage(plid, COLOR_BARMAN, string);
					    	OfertaDada[plid] = 1;
					    	VendedorProduto[plid] = playerid;
					    	Produto[plid] = 2;
					    	TeorDoProduto[plid] = teor;
					    	ValorDoProduto[plid] = grana;
							return 1;
						} else {
					    	SendClientMessage(playerid, COLOR_GRAY, "O jogador não tem dinheiro.");
					    	return 1;
						}
					}
					else{
					    SendClientMessage(playerid, COLOR_GRAY, "O jogador não está conectado!");
					    return 1;
					}
				}
				else{
					SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto!");
					return 1;
				}
			}
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, " Ei...Você não tem permissão para isso, sua profissao é outra");
			return 1;
		}
	}
	if(strcmp(cmd, "/guarana", true) == 0) {
        if(Profissao[playerid] == BARMAN || IsPlayerAdmin(playerid)){
			new tmp[256];
			new plid, teor;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAY, "/guarana [id] [quantidade]");
				return 1;
			}
		    plid = strval(tmp);
    	    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/guarana [id] [quantidade]");
				return 1;
			}
			teor = strval(tmp);
			if(teor < 1 || teor > 3){
			    SendClientMessage(playerid, COLOR_GRAY, "No máximo 3 copos.");
				return 1;
			}
			if(plid == playerid){
				SendClientMessage(playerid, COLOR_GRAY, "Você não pode vender para si mesmo.");
				return 1;
			}
			if(JaComi[plid] == 1 && JaVendi[playerid] == 1){
				SendClientMessage(playerid,COLOR_GRAY,"Atenção você não pode vender para o mesmo jogador em menos de 60 segundos.");
				SendClientMessage(playerid,COLOR_GRAY,"O administrador foi informado. Caso pessista será kickado ou banido");
			    format(tmp,256,"%s Tentou vender um guaraná em menos de 60 segundos para o mesmo jogador. Chame-lhe a atenção.",PlayerName(playerid));
			    SendClientMessageAdmin(COLOR_ENTREGADOR_PIZZA,tmp);
				KillTimer(TimerComidas[playerid]);
				TimerComidas[playerid] = SetTimerEx("Comeu",60000,0,"d",plid,playerid);
				return 1;
			}
			else{
			    if(GetDistanceBetweenPlayers(playerid, plid) <= 20){
					if(IsPlayerConnected(plid)){
						new grana = floatround((teor * 40));
					    if(GetPlayerMoney(plid) >= grana){
					        SendClientMessage(playerid,COLOR_BARMAN,"Guaraná oferecido, agora espere o outro jogador aceitar.");
					    	new string[256];
					    	format(string,sizeof(string),"%s está lhe oferecendo um guaraná, digite /aceitarbebida para aceita-la ou digite /recusarbebida para recusa-la.",PlayerName(playerid));
					    	SendClientMessage(plid, COLOR_BARMAN, string);
						    Produto[plid] = 3;
						    ValorDoProduto[plid] = grana;
						    TeorDoProduto[plid] = teor;
						    VendedorProduto[plid] = playerid;
						    OfertaDada[plid] = 1;
							return 1;
						} else {
					    	SendClientMessage(playerid, COLOR_GRAY, "O jogador não tem dinheiro");
					    	return 1;
					    }
					} else {
				    	SendClientMessage(playerid, COLOR_GRAY, "O jogador não está conectado!");
					    return 1;
					}
				}
				else{
					SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto!");
					return 1;
				}
			}
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, " Ei... Você não tem permissão para isso, sua profissao é outra");
			return 1;
		}
	}
	if(strcmp(cmd, "/pinga", true) == 0) {
        if(Profissao[playerid] == BARMAN || IsPlayerAdmin(playerid)){
			new tmp[256];
			new plid, teor;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAY, "/pinga [id] [quantidade]");
				return 1;
			}
		    plid = strval(tmp);
    	    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/pinga [id] [quantidade]");
				return 1;
			}
			teor = strval(tmp);
			if(teor < 1 || teor > 3){
			    SendClientMessage(playerid, COLOR_GRAY, "Se esse pinguço encher a cara vai te dar problemas. Venda somente de 1 a 3 copos.");
				return 1;
			}
			if(plid == playerid){
				SendClientMessage(playerid, COLOR_GRAY, "Você não pode vender para si mesmo.");
				return 1;
			}
			if(JaComi[plid] == 1 && JaVendi[playerid] == 1){
				SendClientMessage(playerid,COLOR_GRAY,"Atenção você não pode vender para o mesmo jogador em menos de 60 segundos.");
				SendClientMessage(playerid,COLOR_GRAY,"O administrador foi informado. Caso pessista será kickado ou banido");
			    format(tmp,256,"%s Tentou vender uma pinga em menos de 60 segundos para o mesmo jogador. Chame-lhe a atenção.",PlayerName(playerid));
			    SendClientMessageAdmin(COLOR_ENTREGADOR_PIZZA,tmp);
				KillTimer(TimerComidas[playerid]);
				TimerComidas[playerid] = SetTimerEx("Comeu",60000,0,"d",plid,playerid);
				return 1;
			}
			else{
			    if(GetDistanceBetweenPlayers(playerid, plid) <= 20){
					if(IsPlayerConnected(plid)){
					    new grana = floatround((teor * 50));
					    if(GetPlayerMoney(plid) >= grana){
					        SendClientMessage(playerid,COLOR_BARMAN,"Pinga oferecida, agora espere o outro jogador aceitar.");
					    	new string[256];
					    	format(string,sizeof(string),"%s está lhe oferecendo uma pinga, digite /aceitarbebida para aceita-la ou digite /recusarbebida para recusa-la.",PlayerName(playerid));
					    	SendClientMessage(plid, COLOR_BARMAN, string);
                            Produto[plid] = 4;
						    ValorDoProduto[plid] = grana;
						    TeorDoProduto[plid] = teor;
						    VendedorProduto[plid] = playerid;
						    OfertaDada[plid] = 1;
							return 1;
							} else {
							    SendClientMessage(playerid, COLOR_GRAY, "O jogador não tem dinheiro");
							    return 1;
							}
						} else {
						    SendClientMessage(playerid, COLOR_GRAY, "O jogador não está conectado");
						    return 1;
						}
				} else {
		 	    	SendClientMessage(playerid, COLOR_GRAY, "Você está distante do jogador");
		        	return 1;
				}
			}
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem permissão");
			return 1;
		}
	}
    if(strcmp(cmd, "/aceitarbebida", true) == 0) {
	    if(OfertaDada[playerid] == 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma bebida!");
	        return 1;
		}
		if(Produto[playerid] != 2 && Produto[playerid] != 3 && Produto[playerid] != 4 && Produto[playerid] != 5){
			SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma bebida!");
			return 1;
		}
		if(!IsPlayerConnected(VendedorProduto[playerid])){
		    SendClientMessage(playerid, COLOR_GRAY, "O outro jogador parece ter saído do servidor!");
		    return 1;
		}
		if(Produto[playerid] == 2){
		    new string[256];
		    new tmp[256];
	    	Bebida[playerid] = Bebida[playerid]+TeorDoProduto[playerid]*5;
	    	pStats[playerid][Alcool] = Bebida[playerid];
			format(string, sizeof(string), "Você bebeu um bom whisky 12 anos mas o nivel de alcool no seu sangue agora é de: %d mg", Bebida[playerid]);
  			SendClientMessage(playerid, COLOR_GREEN, string);
   			SendClientMessage(VendedorProduto[playerid], COLOR_GREEN, "O whisky foi aceito");
      		AddPlayerHealth(playerid, 80);
        	AddPlayerMoney(playerid, 0 - ValorDoProduto[playerid], -1);
         	AddPlayerMoney(VendedorProduto[playerid], 0 + ValorDoProduto[playerid], 3);
          	if(JogadorContratado(VendedorProduto[playerid],8)) AcrescentarLucro(8,ValorDoProduto[playerid]);
			JaComi[playerid] = 1;
			JaVendi[VendedorProduto[playerid]] = 1;
			TimerComidas[VendedorProduto[playerid]] = SetTimerEx("Comeu",60000,0,"d",playerid,VendedorProduto[playerid]);
      		format(tmp,256,"***%s vendeu um whisk a %s***",PlayerName(VendedorProduto[playerid]),PlayerName(playerid));
		    SendClientMessageAdmin(COLOR_BARMAN,tmp);
		    if(Profissao[playerid] != BARMAN) AcrescentarExPoints(VendedorProduto[playerid],1);
			if(TeorDoProduto[playerid] > 3 && TeorDoProduto[playerid] < 7 || Bebida[playerid] > 8){
				ClearAnimations(playerid);
    			ApplyAnimation(playerid,"PED", "WALK_DRUNK",10,0,1,0,0,0);
			    SendClientMessage(playerid,COLOR_GRAY,"Você bebeu demais e agora está tonto.");
			    ValorDoProduto[playerid] = 0;
		    	Produto[playerid] = 0;
		    	TeorDoProduto[playerid] = 0;
		    	KillTimer(TimerBebida[playerid]);
				TimerBebida[playerid] = SetTimerEx("Bebado",10000,0,"d",playerid);
			    return 1;
			}
			if(TeorDoProduto[playerid] == 7){
   				ClearAnimations(playerid);
			    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
			    PlayerPlaySound(VendedorProduto[playerid],1169,0.0,0.0,0.0);
			    SendClientMessage(playerid,COLOR_GRAY,"Você bebeu demais e acabou vomitando.");
			    ValorDoProduto[playerid] = 0;
		    	Produto[playerid] = 0;
		    	TeorDoProduto[playerid] = 0;
		    	KillTimer(TimerBebida[playerid]);
				TimerBebida[playerid] = SetTimerEx("Bebado",10000,0,"d",playerid);
			    return 1;
			}
		    ValorDoProduto[playerid] = 0;
		    Produto[playerid] = 0;
		    TeorDoProduto[playerid] = 0;
		    return 1;
		}
		else if(Produto[playerid] == 3){
		    new string[256];
		    new tmp[256];
		    Bebida[playerid] = Bebida[playerid]-3;
		    pStats[playerid][Alcool] = Bebida[playerid];
			format(string, sizeof(string), "Você tomou um KUAT, então o teor de alcool no seu sangue baixou para: %d mg", Bebida[playerid]);
   			SendClientMessage(playerid, COLOR_GREEN, string);
      		SendClientMessage(VendedorProduto[playerid], COLOR_GREEN, "Guaraná aceito.");
   	    	AddPlayerHealth(playerid, 20);
	        AddPlayerMoney(playerid, 0 - ValorDoProduto[playerid],-1);
	        AddPlayerMoney(VendedorProduto[playerid], 0 + ValorDoProduto[playerid],3);
	        if(JogadorContratado(VendedorProduto[playerid],8)) AcrescentarLucro(8,ValorDoProduto[playerid]);
	        JaVendi[VendedorProduto[playerid]] = 1;
	        JaComi[playerid] = 1;
	        format(tmp,256,"***%s vendeu %d copos de KUAT para %s***",PlayerName(VendedorProduto[playerid]),TeorDoProduto[playerid],PlayerName(playerid));
		    SendClientMessageAdmin(COLOR_BARMAN,tmp);
			TimerComidas[VendedorProduto[playerid]] = SetTimerEx("Comeu",60000,0,"d",playerid,VendedorProduto[playerid]);
   			if(Profissao[playerid] != BARMAN) AcrescentarExPoints(VendedorProduto[playerid],1);
   			ValorDoProduto[playerid] = 0;
		    Produto[playerid] = 0;
		    TeorDoProduto[playerid] = 0;
		    return 1;
		}
		else if(Produto[playerid] == 4){
		    new string[256];
		    new tmp[256];
		    Bebida[playerid] = Bebida[playerid]+TeorDoProduto[playerid]*4;
  			pStats[playerid][Alcool] = Bebida[playerid];
			format(string, sizeof(string), "Você tomou uma pinga da boa, mas o teor de alcool no seu sangue é de: %d mg", Bebida[playerid]);
  			SendClientMessage(playerid, COLOR_GREEN, string);
     		SendClientMessage(VendedorProduto[playerid], COLOR_GREEN, "Pinga vendida.");
       		AddPlayerHealth(playerid, 60);
         	AddPlayerMoney(playerid, 0 - ValorDoProduto[playerid], -1);
          	AddPlayerMoney(VendedorProduto[playerid], 0 + ValorDoProduto[playerid], 3);
            if(JogadorContratado(VendedorProduto[playerid],8)) AcrescentarLucro(8,ValorDoProduto[playerid]);
	        format(tmp,256,"***%s vendeu %d copos de pinga para %s***",PlayerName(VendedorProduto[playerid]),TeorDoProduto[playerid],PlayerName(playerid));
	    	SendClientMessageAdmin(COLOR_BARMAN,tmp);
			JaComi[playerid] = 1;
			JaVendi[VendedorProduto[playerid]] = 1;
			ValorDoProduto[playerid] = 0;
		    Produto[playerid] = 0;
		    TeorDoProduto[playerid] = 0;
			TimerComidas[VendedorProduto[playerid]] = SetTimerEx("Comeu",60000,0,"d",playerid,VendedorProduto[playerid]);
   			if(Profissao[playerid] != BARMAN) AcrescentarExPoints(VendedorProduto[playerid],1);
			if(TeorDoProduto[playerid] > 3 && TeorDoProduto[playerid] < 7 || Bebida[playerid] > 8){
				ClearAnimations(playerid);
    			ApplyAnimation(playerid,"PED", "WALK_DRUNK",10,0,1,0,0,0);
			    SendClientMessage(playerid,COLOR_GRAY,"Você bebeu demais e agora está tonto.");
			    ValorDoProduto[playerid] = 0;
		    	Produto[playerid] = 0;
		    	TeorDoProduto[playerid] = 0;
		    	KillTimer(TimerBebida[playerid]);
				TimerBebida[playerid] = SetTimerEx("Bebado",10000,0,"d",playerid);
			    return 1;
			}
			if(TeorDoProduto[playerid] == 7){
   				ClearAnimations(playerid);
			    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
			    PlayerPlaySound(VendedorProduto[playerid],1169,0.0,0.0,0.0);
			    SendClientMessage(playerid,COLOR_GRAY,"Você bebeu demais e acabou vomitando.");
			    ValorDoProduto[playerid] = 0;
		    	Produto[playerid] = 0;
		    	TeorDoProduto[playerid] = 0;
		    	KillTimer(TimerBebida[playerid]);
				TimerBebida[playerid] = SetTimerEx("Bebado",10000,0,"d",playerid);
			    return 1;
			}
		}
		else if(Produto[playerid] == 5){
		    new string[256];
		    new tmp[256];
		    Bebida[playerid] = Bebida[playerid]+TeorDoProduto[playerid]*2;
		    pStats[playerid][Alcool] = Bebida[playerid];
			format(string, sizeof(string), "Você tomou uma cerveja geladinha mas o nível de alcool no seu sangue agora é de: %d mg", Bebida[playerid]);
   			SendClientMessage(playerid, COLOR_GREEN, string);
   			SendClientMessage(VendedorProduto[playerid], COLOR_GREEN, "Uma cerveja gelada saindo...");
      		AddPlayerHealth(playerid, 30);
        	AddPlayerMoney(playerid, -80*TeorDoProduto[playerid], -1);
         	AddPlayerMoney(VendedorProduto[playerid], 80*TeorDoProduto[playerid], 3);
          	if(JogadorContratado(VendedorProduto[playerid],8)) AcrescentarLucro(8,80*TeorDoProduto[playerid]);
	        format(tmp,256,"***%s vendeu %d copos de cerveja a %s***",PlayerName(VendedorProduto[playerid]),TeorDoProduto[playerid],PlayerName(playerid));
		    SendClientMessageAdmin(COLOR_BARMAN,tmp);
			JaComi[playerid] = 1;
			JaVendi[VendedorProduto[playerid]] = 1;
			TimerComidas[VendedorProduto[playerid]] = SetTimerEx("Comeu",60000,0,"d",playerid,VendedorProduto[playerid]);
		    if(Profissao[playerid] != BARMAN) AcrescentarExPoints(VendedorProduto[playerid],1);
			if(TeorDoProduto[playerid] > 5 && TeorDoProduto[playerid] < 8 || Bebida[playerid] > 8){
				ClearAnimations(playerid);
    			ApplyAnimation(playerid,"PED", "WALK_DRUNK",10,0,1,0,0,0);
			    SendClientMessage(playerid,COLOR_GRAY,"Você bebeu demais e agora está tonto.");
			    ValorDoProduto[playerid] = 0;
		    	Produto[playerid] = 0;
		    	TeorDoProduto[playerid] = 0;
		    	KillTimer(TimerBebida[playerid]);
				TimerBebida[playerid] = SetTimerEx("Bebado",10000,0,"d",playerid);
			    return 1;
			}
			if(TeorDoProduto[playerid] == 7){
   				ClearAnimations(playerid);
			    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
			    PlayerPlaySound(VendedorProduto[playerid],1169,0.0,0.0,0.0);
			    SendClientMessage(playerid,COLOR_GRAY,"Você bebeu demais e acabou vomitando.");
			    ValorDoProduto[playerid] = 0;
		    	Produto[playerid] = 0;
		    	TeorDoProduto[playerid] = 0;
		    	KillTimer(TimerBebida[playerid]);
				TimerBebida[playerid] = SetTimerEx("Bebado",10000,0,"d",playerid);
			    return 1;
			}
		    ValorDoProduto[playerid] = 0;
		    Produto[playerid] = 0;
		    TeorDoProduto[playerid] = 0;
		    return 1;
		}
	}
	if(strcmp(cmd, "/recusarbebida", true) == 0) {
	    if(OfertaDada[playerid] == 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma bebida!");
	        return 1;
		}
		if(Produto[playerid] != 2 && Produto[playerid] != 3 && Produto[playerid] != 4 && Produto[playerid] != 5){
			SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma bebida!");
			return 1;
		}
		if(!IsPlayerConnected(VendedorProduto[playerid])){
		    SendClientMessage(playerid, COLOR_GRAY, "O outro jogador parece ter saído do servidor!");
		    return 1;
		}
		else{
		    OfertaDada[playerid] = 0;
			Produto[playerid] = 0;
			ValorDoProduto[playerid] = 0;
			TeorDoProduto[playerid] = 0;
			SendClientMessage(VendedorProduto[playerid], COLOR_GRAY, "A bebida foi recusada!");
			SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, "Você recusou a bebida...");
			return 1;
		}
	}
    if(strcmp(cmd,"/pedirseguro", true) == 0) {
		new string[256];
    	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
 		SetTimerEx("AcaoEspecial",6000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		SendClientMessage(playerid,COLOR_CORRETOR_SEGUROS,"Seguro solicitado!");
        for(new i=0; i<SLOTS2; i++){
		    if(IsPlayerAdmin(i) == 1 || Profissao[i] == CORRETOR_SEGUROS){
			format(string, sizeof(string), "O jogador %s está pedindo um seguro.", PlayerName(playerid));
			SendClientMessage(i, COLOR_CORRETOR_SEGUROS, string);
		    }
		}
  		return 1;
 	}
 	if(strcmp(cmd,"/seguroveiculo", true) == 0) {
  		if(Profissao[playerid] == CORRETOR_SEGUROS || IsPlayerAdmin(playerid)){
	  		if(IsPlayerInAnyVehicle(playerid)){
				if(SeguroCarro[GetPlayerVehicleID(playerid)] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Esse veículo já possui seguro!");
		 		if(strcmp(vStats[GetPlayerVehicleID(playerid)][VDono], "Servidor", false) && strcmp(vStats[GetPlayerVehicleID(playerid)][VDono], PlayerName(playerid), false)){
					if(!IsStringAName(vStats[GetPlayerVehicleID(playerid)][VDono])){
					    SendClientMessage(playerid, COLOR_GRAY, "O dono deste veículo não está conectado!");
					    return 1;
					}
					new id = IDName(vStats[GetPlayerVehicleID(playerid)][VDono]);
					if(GetPlayerMoney(id) < 3000){
					    SendClientMessage(playerid, COLOR_GRAY, "O jogador não tem dinheiro. Custo: $3000");
					    return 1;
					}
					new string[256];
					format(string,sizeof(string),"O Corretor de seguros %s está lhe oferecendo um seguro de veículo para o seu veículo de ID %d",PlayerName(playerid),GetPlayerVehicleKeyID(id,GetPlayerVehicleID(playerid)));
					SendClientMessage(id, COLOR_GREEN, string);
					SendClientMessage(id, COLOR_GREEN, "Para aceitar digite /aceitarseguroveiculo e para recusar digite /recusarseguroveiculo");
					OfertaSeguroV[id] = 1;
					VehSeguro[id] = GetPlayerVehicleID(playerid);
					SendClientMessage(playerid, COLOR_WHITE, "Proposta enviada, espere para ver se o jogador aceita o seguro!");
		 			return 1;
	  	  		}
		  		else{
 		  			SendClientMessage(playerid, COLOR_GRAY, "Você não pode assegurar um veículo seu ou do governo/servidor");
				  	return 1;
		  		}
  			}
	    	else{
			  	SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
			 	return 1;
	  		}
   		}
	   	else{
		   	SendClientMessage(playerid, COLOR_GRAY, "Você não é Corretor de seguros!");
		   	return 1;
	   	}
	}
	if(strcmp(cmd, "/aceitarseguroveiculo", true) == 0) {
	    if(OfertaSeguroV[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma proposta para assegurar um veículo seu!");
		if(!IsPlayerConnected(VendedorSeguro[playerid])) { OfertaSeguroV[playerid] = 0; return SendClientMessage(playerid, COLOR_GRAY, "O Corretor de seguros saiu do servidor..."); }
		OfertaSeguroV[playerid] = 0;
	    SeguroCarro[VehSeguro[playerid]] = 1;
		vStats[VehSeguro[playerid]][VSeguro] = 1;
		AcrescentarExPoints(VendedorSeguro[playerid],1);
		AcrescentarLucro(3,1500);
		AddPlayerMoney(VendedorSeguro[playerid],1500,3);
		AddPlayerMoney(playerid, -3000, -1);
		SendClientMessage(playerid, COLOR_CORRETOR_SEGUROS, "Veículo assegurado!");
		SendClientMessage(VendedorSeguro[playerid], COLOR_CORRETOR_SEGUROS, "Veículo assegurado!");
		return 1;
	}
	if(strcmp(cmd, "/recusarseguroveiculo", true) == 0) {
	    if(OfertaSeguroV[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma proposta para assegurar um veículo seu!");
		if(!IsPlayerConnected(VendedorSeguro[playerid])) { OfertaSeguroV[playerid] = 0; return SendClientMessage(playerid, COLOR_GRAY, "O Corretor de seguros saiu do servidor..."); }
		OfertaSeguroV[playerid] = 0;
		SendClientMessage(playerid, COLOR_CORRETOR_SEGUROS, "Oferta de seguro recusada!");
		SendClientMessage(VendedorSeguro[playerid], COLOR_CORRETOR_SEGUROS, "Oferta de seguro recusada, se deu mal hein?! hehe");
		return 1;
	}
	if(strcmp(cmd,"/removerseguroveiculo", true) == 0) {
	    if(!IsPlayerInAnyVehicle(playerid)){
	        SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em um veículo!");
	        return 1;
		}
		if(strcmp(vStats[GetPlayerVehicleID(playerid)][VDono],PlayerName(playerid),true)){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é o dono do veículo!");
		    return 1;
		}
		if(vStats[GetPlayerVehicleID(playerid)][VSeguro] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse veículo não possui seguro!");
		    return 1;
		}
		else{
			SeguroCarro[GetPlayerVehicleID(playerid)] = 0;
			vStats[GetPlayerVehicleID(playerid)][VSeguro] = 0;
			SendClientMessage(playerid, COLOR_RED2, "O seguro do veículo foi removido!");
			new string[256];
			format(string,sizeof(string),"[INFO] %s removeu o seguro do seu veículo (ID: %d)",PlayerName(playerid),GetPlayerVehicleID(playerid));
			writelog(string);
			return 1;
		}
	}
	if(strcmp(cmd, "/seguroimovel", true) == 0) {
		if(Profissao[playerid] == CORRETOR_SEGUROS || IsPlayerAdmin(playerid)){
		    new tmp[256];
		    new plid;
		    tmp = strtok(cmdtext,idx);
		    plid = strval(tmp);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAY, "USO: /seguroimovel [id]");
				return 1;
			}
			if(!IsPlayerConnected(plid)){
			    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
			    return 1;
			}
			if(pStats[plid][SeguroCasa] == 1){
			    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador já possui seguro de imóvel!");
			    return 1;
			}
			if(plid == playerid){
		   		SendClientMessage(playerid, COLOR_GRAY, "Você não pode se próprio segurar-se!");
		   		return 1;
		    }
   			if(GetPlayerMoney(plid) < 2000){
				SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não possui dinheiro. Custo: $2000");
				return 1;
			}
			else{
			    VendedorSeguro[plid] = playerid;
			    SeguroImovel[plid] = 1;
			    SendClientMessage(playerid, COLOR_CORRETOR_SEGUROS, "Seguro de imóvel oferecido!");
			    new str[256];
			    format(str,sizeof(str),"%s está lhe oferecendo um seguro de imóvel por $2000.",PlayerName(playerid));
			    SendClientMessage(plid, COLOR_CORRETOR_SEGUROS, str);
				SendClientMessage(plid, COLOR_CORRETOR_SEGUROS, "Para aceitar o seguro digite: /aceitarseguroimovel, e para recusar digite: /recusarseguroimovel");
				return 1;
			}
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Corretor de seguro!");
		    return 1;
		}
	}
	if(strcmp(cmd, "/aceitarseguroimovel", true) == 0) {
	    if(SeguroImovel[playerid] == 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecido uma proposta de seguro de imóvel!");
			return 1;
		}
		if(GetPlayerMoney(playerid) < 2000){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para pagar o Seguro do Imóvel: $2.000 dólares.");
			return 1;
		}
		else{
		    SeguroImovel[playerid] = 0;
		    AcrescentarExPoints(VendedorSeguro[playerid],1);
		    AddPlayerMoney(playerid,-2000,-1);
		    pStats[playerid][SeguroCasa] = 1;
		    SendClientMessage(playerid, COLOR_CORRETOR_SEGUROS, "Seguro aceito!");
		    SendClientMessage(playerid, COLOR_CORRETOR_SEGUROS, "Agora quando você vender uma casa poderá ganhar um reembolso!");
		    SendClientMessage(playerid, COLOR_CORRETOR_SEGUROS, "Mas você terá que pagar $500 à cada semana para a corretora!");
		    if(!JogadorContratado(VendedorSeguro[playerid],3)){
		       	AddPlayerMoney(VendedorSeguro[playerid],2000,3);
				SendClientMessage(VendedorSeguro[playerid], COLOR_CORRETOR_SEGUROS, "O seguro foi aceito e você recebeu $1000!");
			}
			else if(JogadorContratado(VendedorSeguro[playerid],3)){
			    AddPlayerMoney(VendedorSeguro[playerid],800,3);
			    AcrescentarLucro(3,1200);
			    SendClientMessage(VendedorSeguro[playerid], COLOR_CORRETOR_SEGUROS, "Você recebeu $800 e $1200 foi para a sua propriedade!");
			}
			return 1;
		}
	}
	if(strcmp(cmd, "/recusarseguroimovel", true) == 0) {
	    if(SeguroImovel[playerid] == 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecido uma proposta de seguro de imóvel!");
			return 1;
		}
		else{
		    SeguroImovel[playerid] = 0;
		    SendClientMessage(VendedorSeguro[playerid], COLOR_CORRETOR_SEGUROS, "O seguro foi recusado.");
		    SendClientMessage(playerid, COLOR_CORRETOR_SEGUROS, "Seguro recusado!");
		    return 1;
		}
	}
	if(strcmp(cmd,"/cancelarseguroimovel",true) == 0){
		if(pStats[playerid][SeguroCasa] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Você não possui seguro de imóvel!");
			return 1;
		}
		else{
			pStats[playerid][SeguroCasa] = 0;
			SendClientMessage(playerid, COLOR_GRAY, "Seguro de imóvel removido!");
			for(new i=0; i<SLOTS2; i++){
				if(Profissao[i] == CORRETOR_SEGUROS || IsPlayerAdmin(i)){
					new str[256];
					format(str,sizeof(str),"O jogador %s removeu seu seguro de imóvel!",PlayerName(playerid));
					SendClientMessage(i, COLOR_GRAY, str);
					writelog(str);
				}
			}
			return 1;
		}
	}
	if(strcmp(cmd,"/segurovida", true) == 0) {
		if(Profissao[playerid] == CORRETOR_SEGUROS || IsPlayerAdmin(playerid)){
		   new tmp[256];
		   new string[256];
		   new plid;
		   tmp = strtok(cmdtext,idx);
		   if(!strlen(tmp)){
		   SendClientMessage(playerid, COLOR_GRAY, "Sintaxe incorreta. USO: /segurovida [id-do-jogador]");
		   return 1;
		   }
		   plid = strval(tmp);
		   if(!IsPlayerConnected(plid)){
		   SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado");
		   return 1;
		   }
		   if(pStats[plid][Seguro] == 1){
		   SendClientMessage(playerid, COLOR_GRAY, "Ei, esse jogador já possui seguro!");
		   return 1;
		   }
		   if(GetDistanceBetweenPlayers(playerid,plid) > 10){
		   SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto!");
		   return 1;
		   }
		   if(plid == playerid){
		   SendClientMessage(playerid, COLOR_GRAY, "Você não pode se próprio segurar-se!");
		   return 1;
		   }
		   if(GetPlayerMoney(plid) < 1000){
		   SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não possui dinheiro. Custo: $1000");
		   return 1;
		   }
		   else{
			   PropostaSeguro[plid] = 1;
			   VendedorSeguro[plid] = playerid;
			   SendClientMessage(playerid, COLOR_CORRETOR_SEGUROS, "OK... aguarde foi enviado um convite para ver se o jogador aceita o seguro de vida.");
			   format(string,sizeof(string),"%s está lhe oferecendo um seguro de vida por $1000!",PlayerName(playerid));
			   SendClientMessage(plid, COLOR_CORRETOR_SEGUROS, string);
			   SendClientMessage(plid, COLOR_CORRETOR_SEGUROS, "Digite /aceitarseguro para aceita-lo ou então digite /recusarseguro para recusa-lo!");
			   return 1;
	   		   }
   		   }
    	   else{
      		   SendClientMessage(playerid, COLOR_GRAY, "Você não é Corretor de seguros!");
	   		   return 1;
		       }
	}
	if(strcmp(cmd,"/recusarseguro",true) == 0) {
	    if(PropostaSeguro[playerid] == 0){
	    	SendClientMessage(playerid, COLOR_GRAY, "Não foi enviado um convite de seguro para você!");
	    	return 1;
	    }
	    else{
			PropostaSeguro[playerid] = 0;
			SendClientMessage(playerid, COLOR_GRAY, "Seguro de vida recusado!");
			SendClientMessage(VendedorSeguro[playerid], COLOR_GRAY, "O seguro de vida foi recusado!");
			return 1;
		}
	}
	if(strcmp(cmd,"/aceitarseguro",true) == 0) {
	    if(PropostaSeguro[playerid] == 0){
	    	SendClientMessage(playerid, COLOR_GRAY, "Não foi enviado um convite de seguro para você!");
	    	return 1;
	    }
	    else{
			PropostaSeguro[playerid] = 0;
		    AcrescentarExPoints(VendedorSeguro[playerid],1);
		    AddPlayerMoney(playerid,-1000,-1);
		    SendClientMessage(playerid, COLOR_CORRETOR_SEGUROS, "Seguro de vida comprado! Agora quando você for para o hospital não pagará nada.");
		    SendClientMessage(playerid, COLOR_CORRETOR_SEGUROS, "Mas você terá que pagar $400 à cada semana para a corretora.");
		    SendClientMessage(playerid, COLOR_CORRETOR_SEGUROS, "A grana irá sendo retirada do banco! Caso queira remover o seguro digite /cancelarseguro.");
		    pStats[playerid][Seguro] = 1;
		    if(!JogadorContratado(VendedorSeguro[playerid],3)){
		        AddPlayerMoney(VendedorSeguro[playerid],1000,3);
				SendClientMessage(VendedorSeguro[playerid], COLOR_CORRETOR_SEGUROS, "O seguro foi aceito e você recebeu $1000!");
			}
			else if(JogadorContratado(VendedorSeguro[playerid],3)){
			    AddPlayerMoney(VendedorSeguro[playerid],400,3);
			    AcrescentarLucro(3,600);
			    SendClientMessage(VendedorSeguro[playerid], COLOR_CORRETOR_SEGUROS, "Você recebeu $400 e $600 foi para a sua propriedade!");
			}
			return 1;
	    }
	}
	if(strcmp(cmd,"/cancelarseguro",true) == 0){
		if(pStats[playerid][Seguro] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Você não possui seguro!");
			return 1;
		}
		else{
		    pStats[playerid][Seguro] = 0;
			SendClientMessage(playerid, COLOR_GRAY, "Seguro de vida removido!");
			for(new i=0; i<SLOTS2; i++){
				if(Profissao[i] == CORRETOR_SEGUROS || IsPlayerAdmin(i)){
				new str[256];
				format(str,sizeof(str),"O jogador %s removeu seu seguro de vida!",PlayerName(playerid));
				SendClientMessage(i, COLOR_GRAY, str);
				writelog(str);
				}
			}
			return 1;
		}
	}
    if(strcmp(cmd, "/vendercelular", true) == 0) {
        if(AreaCreditos[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está na loja de utilidades 1,99");
		    return 1;
		}
		if(pStats[playerid][PhoneNumb] == 0){
			SendClientMessage(playerid, COLOR_WHITE, "Você não tem celular.");
			return 1;
		}
		else{
			AddPlayerMoney(playerid,250,4);
			SendClientMessage(playerid, COLOR_GREEN, "Celular vendido, você recebeu $250.");
        	for(new p=1000; p<LastPN; p++){
        	    if(strcmp(PlayerName(playerid),CelularesNum[p-1000],true) == 0){
        	        set(CelularesNum[p-1000],"NONE");
					pStats[playerid][PhoneNumb] = 0;
				}
			}
			return 1;
		}
	}
	if(strcmp(cmd, "/celular", true) == 0) {
        if(AreaCreditos[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está na loja de utilidades 1,99");
		    return 1;
		}
		if(LastPN - 1000 >= MAX_CELL){
		    SendClientMessage(playerid, COLOR_GRAY, "Limite de celulares excedido pelo gamemode.");
			return 1;
		}
		if(GetPlayerMoney(playerid) < ValorCelular){
		    new string[256];
		    format(string,sizeof(string),"Você não tem dinheiro para pagar. CUSTO: $%d",ValorCelular);
	        SendClientMessage(playerid, COLOR_GRAY, string);
			return 1;
		}
		if(pStats[playerid][PhoneNumb] != 0){
			SendClientMessage(playerid, COLOR_GRAY, "Você já tem celular.");
			return 1;
		}
	    new string[256];
		SendClientMessage(playerid,COLOR_RED2,"Aguarde, processando...");
		AddPlayerMoney(playerid,-ValorCelular,-1);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		new phone = LastPN;
		LastPN++;
		format(string, sizeof(string), "Celular obtido. Seu numero: %d", phone);
		SendClientMessage(playerid, COLOR_ROSA, string);
		set(CelularesNum[phone-1000],PlayerName(playerid));
		SendClientMessage(playerid, COLOR_WHITE, "[CENTRAL 24/7] Você pode digitar /ajuda para ver os comandos do seu celular.");
		pStats[playerid][PhoneNumb] = phone;
		if(ValorDia == 0){
        	CellCredits[playerid] = 30;
			SendClientMessage(playerid, COLOR_RED2, "[CENTRAL 24/7] Seu celular está recarregado em 30 créditos por causa da Promoção de Domingo!");
		}
		return 1;
	}

	if(strcmp(cmd, "/desmanche", true) == 0) {
	    new vehicleid = GetPlayerVehicleID(playerid);
	    new i;
	    new Float:X, Float:Y, Float:Z;
	    new wantedVehicle = -1;
		GetPlayerPos(playerid,X,Y,Z);
		for(i=0;i<MAX_DESMANCHEVEICULO;i++) {
			if(Veiculosprocurados[i]==Veiculoprocurado) {
				wantedVehicle = i;
				break;
			}
		}
		if(wantedVehicle>=0) {
	    	if(Profissao[playerid] == ASSALTANTE || IsPlayerAdmin(playerid)){
	    		if(TempoDesmanche[playerid] == 1) {
			   		SendClientMessage(playerid, COLOR_GRAY, "Você já entregou um carro aqui. Espere um pouco para entregar de novo!");
	    		}
				if(IsPlayerInAnyVehicle(playerid) && TempoDesmanche[playerid] == 0){
   			   		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == Veiculoprocurado){
						if(AreaDesmanche[playerid] == 1){
		   					SendClientMessage(playerid,COLOR_ASSALTANTE,"Aew mano, seu carro vale $2000.");
							AddPlayerMoney(playerid, 2000, 3);
							SendClientMessage(playerid,COLOR_ASSALTANTE,"Você entregou o carro ao desmanche por 2000 \"pratas\".");
							RemovePlayerFromVehicle(vehicleid);
							SetVehiclePos(vehicleid, 2172.8694,-2004.8391,32.4801);
				   			TempoDesmanche[playerid] = 1;
				   			AcrescentarExPoints(playerid,1);
							SetTimerEx("Desmanche",300000,false,"d",playerid);
    						return 1;
					        } else {
				 	    	    SendClientMessage(playerid,COLOR_GRAY,"Meu irmão tu num tá na área!!!!");
							    return 1;
							    }
                     } else {
                         SendClientMessage(playerid,COLOR_GRAY,"Agente não tá afim desse veículo maluco!!!");
						 return 1;
				         }
	       		} else {
	           		SendClientMessage(playerid, COLOR_GRAY, "Maluco nem em veículo tu tá!");
					return 1;
					}
		    }
		    else{
	        	SendClientMessage(playerid,COLOR_GRAY,"Você não tem permissão!");
	    		return 1;
	    	}
		}
	}

	if(strcmp(cmd, "/trocarvelocimetro", true) == 0) {
	    new tmp[256];
	    tmp = strtok(cmdtext, idx);
		if(compare(tmp,"1")){
			SendClientMessage(playerid, COLOR_GREEN, "[INFO] Velocimetro de TextDraw selecionado.");
			VelocimetroEscolhido[playerid] = 0;
		} else 	if(compare(tmp,"2")){
			VelocimetroEscolhido[playerid] = 1;
			SendClientMessage(playerid, COLOR_GREEN, "[INFO] Velocimetro de GameText selecionado.");
		} else {
		    SendClientMessage(playerid, COLOR_GRAY,"USO CORRETO: /trocarvelocimetro 1 ou /trocarvelocimetro 2");
		}
		return 1;
	}
			
		
	if (strcmp(cmd, "/veiculosdesmanche", true) == 0) {
	    if(Profissao[playerid] == ASSALTANTE){
			new Nomeveiculo[32];
			new string[256];
			Nomeveiculo = "";
			for(new i=0; i <MAX_DESMANCHEVEICULO; i++) {
				if(Veiculosprocurados[i]==Veiculoprocurado) {
					format(Nomeveiculo, sizeof(Nomeveiculo), "%s",Veiculosprocuradosnome[i]);
				}
			}
			if(strlen(Nomeveiculo)==0) {
				format(string, sizeof(string), "Nós num tamo atrás de nada maluco!");
			} else {
				format(string, sizeof(string), "O beco ta afim de desmanchar um(a) %s.",Nomeveiculo);
			}
			SendClientMessage(playerid, COLOR_AZULPLUS, string);
			return 1;
		}
	}
	if(strcmp(cmd, "/curar-me", true) == 0) {
		if(Curandome[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "O Hospital não pode lhe curar no momento, você não chegou na emergência.");
			return 1;
		}
		if(AreaHosp[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está mais no hospital.");
			return 1;
		}
		if(SubindoVida[playerid] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "[HOSPITAL] ACALME-SE VAMOS SALVAR VOCÊ!");
			return 1;
		}
		if(pStats[playerid][Seguro] == 1){
	    	SendClientMessage(playerid, COLOR_CORRETOR_SEGUROS, "Seu seguro vai custear as despesas do atendimento.");
	    	SendClientMessage(playerid, COLOR_ROSA2, "[HOSPITAL SECRETÁRIA] Senhor, Espere o atendimento...");
	    	TogglePlayerControllable(playerid,0);
			SubindoVida[playerid] = 1;
			SetTimerEx("Curandoo",4000,0,"d",playerid);
			return 1;
		} else {
		    if(GetPlayerMoney(playerid) > 100){
	    		SendClientMessage(playerid, COLOR_ROSA2, "[HOSPITAL SECRETÁRIA] Senhor, Espere o atendimento...");
	    		TogglePlayerControllable(playerid,0);
	    		SubindoVida[playerid] = 1;
				SetTimerEx("Curandoo",4000,0,"d",playerid);
				return 1;
			} else {
			    SendClientMessage(playerid, COLOR_GRAY, "SUMA DAQUI VOCÊ NÃO TEM DINHEIRO PARA PAGAR SEU ENROLÃO!");
				return 1;
			}
		}
	}
	if(strcmp(cmd, "/internar", true) == 0) {
	    new msg[256];
	    if(AreaHosp[playerid] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Você não está no Hospital.");
			return 1;
		}
		if(GetPlayerMoney(playerid) < 1500){
            SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para se internar. Custo: $1500.");
			return 1;
		}
		GetPlayerPos(playerid, PosHosp[playerid][0], PosHosp[playerid][1], PosHosp[playerid][2]);
		SetPlayerCameraPos(playerid, PosHosp[playerid][0], PosHosp[playerid][1], PosHosp[playerid][2]);
		SetPlayerCameraLookAt(playerid, PosHosp[playerid][0]+4.0, PosHosp[playerid][1]+3.0, PosHosp[playerid][2]);
		SetPlayerPos(playerid, INVALID_POS_X+500, INVALID_POS_Y+500, INVALID_POS_Z);
		SetPlayerHealth(playerid, 100);
		TogglePlayerControllable(playerid, 0);
		TempoInternando[playerid] = SetTimerEx("Internando",40000,0,"d",playerid);
		SendClientMessage(playerid, COLOR_PARAMEDICO, "HOSPITAL: Internado, aguarde, em instantes você levará alta!");
		format(msg,sizeof(msg),"[NOTICIAS] %s resolveu se internar no hospital...",PlayerName(playerid));
		SendClientMessageToAll(COLOR_WHITE, msg);
		return 1;
	}
	if(strcmp(cmd, "/tomarvacina", true) == 0) {
		if(AreaHosp[playerid] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Você não está no Hospital.");
			return 1;
		}
		if(pStats[playerid][Vacina] == 1){
			SendClientMessage(playerid, COLOR_GRAY, "Bebeu? Fumou? Querendo tomar vacina 2 vezes? Melhor se internar de vez!");
			return 1;
		}
		if(GetPlayerMoney(playerid) < 250){
            SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para tomar vacina. Custo: $250.");
			return 1;
		}
		pStats[playerid][Vacina] = 1;
		pStats[playerid][VacinaDuracao] = 7;
		AddPlayerMoney(playerid,-250,-1);
		SendClientMessage(playerid, COLOR_PARAMEDICO, "Você tomou vacina, isso irá impedir de se contaminar com epidemia de Malária por 7 dias!");
		return 1;
	}
	if(strcmp(cmd, "/comprarmedicamento", true) == 0) {
        new tmp[256];
		tmp = strtok(cmdtext,idx);
		new quantidade = strval(tmp);
		if(!strlen(tmp)){
			SendClientMessage(playerid, COLOR_GRAY, "USO: /comprarmedicamento [quantidade]");
			return 1;
		}
    	if(AreaHosp[playerid] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Você não está no Hospital.");
			return 1;
		}
		if(quantidade > 3){
			SendClientMessage(playerid, COLOR_GRAY, "Foi detectada na ficha do paciente a compra de 3 caixas, VENDA PROIBIDA.");
			return 1;
		}
		if(pStats[playerid][Remedios] + quantidade > 3){
		    SendClientMessage(playerid, COLOR_GRAY, "A venda foi proibida, o paciente não pode adquirir essa quantidade de medicamento.");
			return 1;
		}
		if(GetPlayerMoney(playerid) <= 350){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para adquirir. Custo: $350");
			return 1;
		}
	    SendClientMessage(playerid, COLOR_WHITE, "O Remédio foi adquiro caso queira injerir digite /tomarmedicamento.");
		pStats[playerid][Remedios] += quantidade;
		AddPlayerMoney(playerid,-350*quantidade,-1);
		if(pStats[playerid][Micose] == 1){
			pStats[playerid][DosesRemed] += quantidade;
			return 1;
		}
	}
	if(strcmp(cmd, "/vendermedicamento", true) == 0) {
        if(Profissao[playerid] == PARAMEDICO || IsPlayerAdmin(playerid)){
			new tmp[256];
			new quantidade;
			new plid;
			tmp = strtok(cmdtext,idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "USO: /vendermedicamento [id] [quantidade]");
			    return 1;
			}
			plid = strval(tmp);
			if(!IsPlayerConnected(plid)){
			    SendClientMessage(playerid, COLOR_GRAY, "O Jogador não está conectado.");
				return 1;
			}
			quantidade = strval(tmp);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_GRAY, "USO: /vendermedicamento [id] [quantidade]");
				return 1;
			}
			if(quantidade >= 3){
				SendClientMessage(playerid, COLOR_GRAY, "Foi detectada na ficha do paciente a compra de 3 caixas, VENDA PROIBIDA.");
				return 1;
			}
			if(pStats[plid][Remedios] + quantidade >= 3){
			    SendClientMessage(playerid, COLOR_GRAY, "A venda foi proibida, o paciente não pode adquirir essa quantidade de medicamento.");
				return 1;
			}
			if(pStats[playerid][Remedios] <= 0){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não tem remédios, vá ao Hospital pegar.");
				return 1;
			}
			if(GetDistanceBetweenPlayers(playerid,plid) > 10){
			    SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto!");
			    return 1;
			}
			if(plid == playerid){
				SendClientMessage(playerid, COLOR_GRAY, "Você não pode fazer tratamento em si mesmo.");
			    return 1;
			}
			if(GetPlayerMoney(plid) <= 200*quantidade){
			    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não possui dinheiro para pagar o remédio, Custo: $300");
			    SendClientMessage(plid, COLOR_GRAY, "É necessário que você arranje dinheiro para o tratamento");
				return 1;
			}
		    SendClientMessage(playerid, COLOR_PARAMEDICO, "Você vendeu o medicamento ao outro jogador, valor: $200.");
		    SendClientMessage(plid, COLOR_PARAMEDICO, "O Remédio foi adquiro caso queira injerir digite /tomarmedicamento.");
			pStats[plid][Remedios] += quantidade;
			AddPlayerMoney(plid,-200*quantidade,-1);
	    	AddPlayerMoney(playerid,200*quantidade,3);
	    	AcrescentarExPoints(playerid,1);
	    	pStats[playerid][Remedios] -= 1;
			if(pStats[playerid][Micose] == 1){
			    pStats[playerid][DosesRemed] += quantidade;
			}
			return 1;
	  	}
	  	else{
	  	    SendClientMessage(playerid, COLOR_GRAY, "Você não é Paramédico!");
	  	    return 1;
		}
	}
	if(strcmp(cmd, "/tomarmedicamento", true) == 0) {
        if(pStats[playerid][Micose] == 0){
            SendClientMessage(playerid, COLOR_GRAY, "Você não está necessitando tomar o medicamento.");
            return 1;
		}
		if(pStats[playerid][Remedios] <= 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhum medicamento para tomar, compre ao paramédico, ou em um hospital.");
		    return 1;
		}
		if(pStats[playerid][DosesRemed] <= 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Não foi constada nenhuma receita para você.");
		    return 1;
		}
		if(JaPodeTomarRemed[playerid] != 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não pode tomar o medicamento antes do tempo, tenha calma poderá ter uma overdose.");
		    return 1;
		}
		SendClientMessage(playerid, COLOR_WHITE, "Você tomou o medicamento, aguarde o efeito...");
		ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
		pStats[playerid][Remedios]--;
		pStats[playerid][DosesRemed]--;
		JaPodeTomarRemed[playerid]++;
		SetTimerEx("PodeTomar",180000,false,"d",playerid);
		return 1;
	}
    if(strcmp(cmd, "/tratamentodrogas", true) == 0) {
        if(Profissao[playerid] == PARAMEDICO || IsPlayerAdmin(playerid)){
			new tmp[256];
			new plid;
			tmp = strtok(cmdtext,idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "USO: /tratamentodrogas [id]");
			    return 1;
			}
			plid = strval(tmp);
			if(!IsPlayerConnected(plid)){
			    SendClientMessage(playerid, COLOR_GRAY, "O jogador não está conectado");
				return 1;
			}
			if(CurandoDrogas[playerid] == 1){
			    SendClientMessage(playerid, COLOR_GRAY, "Você já tem um paciente, cure este primeiro!");
			    return 1;
			}
			if(kitmedico[playerid] <= 0){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhum kitmedico, vá ao Hospital pegar.");
				return 1;
			}
			if(GetDistanceBetweenPlayers(playerid,plid) > 7){
			    SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto!");
			    return 1;
			}
			if(QtMaconha[plid] <= 0 && QtCocaina[plid] <= 0 && QtHeroina[plid] <= 0){
			    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não possui drogas no sangue.");
			    return 1;
			}
			if(plid == playerid){
				SendClientMessage(playerid, COLOR_GRAY, "Você não pode fazer tratamento em si mesmo.");
			    return 1;
			}
			if(GetPlayerMoney(plid) < 600){
			    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não possui dinheiro para pagar o tratamento, Custo: $600");
				return 1;
			}
			else{
			    new string[256];
				new qtmax = QtHeroina[plid] + QtMaconha[plid] + QtCocaina[plid];
				new seconds = Porcentagem(qtmax,25);
				format(string,sizeof(string),"Aguarde... O tratamento durará %d segundo(s)",seconds);
				SendClientMessage(playerid, COLOR_PARAMEDICO, string);
				SendClientMessage(plid, COLOR_PARAMEDICO, string);
				CurandoDrogas[playerid] = 1;
				TimerCura[plid] = SetTimerEx("TratamentoDrogas",1000*seconds,0,"dd",playerid,plid);
				return 1;
			}
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Paramédico!");
		    return 1;
  		}
	}
    if(strcmp(cmd, "/tratardoenca", true) == 0) {
        if(Profissao[playerid] == PARAMEDICO || IsPlayerAdmin(playerid)){
			new tmp[256];
			new plid;
			tmp = strtok(cmdtext,idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "USO: /tratardoenca [id]");
			    return 1;
			}
			plid = strval(tmp);
			if(!IsPlayerConnected(plid)){
			    SendClientMessage(playerid, COLOR_GRAY, "O Jogador não está conectado.");
				return 1;
			}
			if(kitmedico[playerid] <= 0){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhum kitmedico, vá ao Hospital pegar.");
				return 1;
			}
			if(GetDistanceBetweenPlayers(playerid,plid) > 10){
			    SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto!");
			    return 1;
			}
			if(plid == playerid){
				SendClientMessage(playerid, COLOR_GRAY, "Você não pode fazer tratamento em si mesmo.");
			    return 1;
			}
			if(JogadorDoente[plid] == 0){
				SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não apresenta nenhum sintoma.");
			    return 1;
			}
			if(Curando[playerid] == 1){
				SendClientMessage(playerid, COLOR_GRAY, "Não pode curar várias vezes ao mesmo tempo.");
			    return 1;
			}
			else{
			    SendClientMessage(playerid, COLOR_PARAMEDICO, "O tratamento está sendo realizado. Aguarde.");
			    SendClientMessage(plid, COLOR_PARAMEDICO, "Você está sendo tratado. AGUARDE.");
				Curando[playerid] = 1;
				SetTimerEx("TomandoRemedio1",5000,0,"dd",plid,playerid);
				return 1;
			}
		} else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Paramédico!");
		    return 1;
		}
	}

    if(strcmp(cmd, "/trataraids", true) == 0) {
        if(Profissao[playerid] == PARAMEDICO || IsPlayerAdmin(playerid)){
			new tmp[256];
			new plid;
			tmp = strtok(cmdtext,idx);
			if(!strlen(tmp)){
			    SendClientMessage(playerid, COLOR_GRAY, "USO: /trataraids [id]");
			    return 1;
			}
			plid = strval(tmp);
			if(!IsPlayerConnected(plid)){
			    SendClientMessage(playerid, COLOR_GRAY, "O Jogador não está conectado.");
				return 1;
			}
			if(kitmedico[playerid] <= 0){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhuma injeção, que vem no KitMédico. Vá ao Hospital pegar.");
				return 1;
			}
			if(GetDistanceBetweenPlayers(playerid,plid) > 10){
			    SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto!");
			    return 1;
			}
			if(plid == playerid){
				SendClientMessage(playerid, COLOR_GRAY, "Você não pode fazer tratamento em si mesmo.");
			    return 1;
			}
			if(GetPlayerMoney(plid) < 1000){
			    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não possui dinheiro para pagar o tratamento, Custo: $1000");
			    SendClientMessage(plid, COLOR_GRAY, "É necessário que você arranje $1000 dólares para o tratamento");
				return 1;
			}
			if(pStats[plid][Aids] == 0){
				SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não apresenta nenhum sintoma para a Aids.");
			    return 1;
			}
			if(Curando[playerid] == 1){
				SendClientMessage(playerid, COLOR_GRAY, "Não pode curar várias vezes ao mesmo tempo.");
			    return 1;
			}
			else{
			    SendClientMessage(playerid, COLOR_PARAMEDICO, "Aplicando Injeção de hormônios no paciente...");
			    SendClientMessage(plid, COLOR_PARAMEDICO, "Aplicando Injeção. AGUARDE.");
				SetTimerEx("TomandoInjencao",5000,0,"dd",plid,playerid);
				return 1;
			}
		} else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Paramédico!");
		    return 1;
		}
	}
	if(strcmp(cmd, "/salvar", true) == 0) {
	    if(Profissao[playerid] != PARAMEDICO && !IsPlayerAdmin(playerid)){
			SendClientMessage(playerid, COLOR_GRAY, "Você não é Paramédico!");
			return 1;
		}
		new tmp[256];
		new plid, string[256];
		tmp = strtok(cmdtext,idx);
		plid = strval(tmp);
        if(!strlen(tmp)){
            SendClientMessage(playerid, COLOR_GRAY, "/salvar [id]");
			return 1;
		}
		if(!IsPlayerConnected(plid)){
			SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado!");
			return 1;
		}
		if(Morrendo[plid] == 0){
			SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está inconsciente!");
			return 1;
		}
  		if(GetDistanceBetweenPlayers(playerid,plid) > 10){
  			SendClientMessage(playerid, COLOR_GRAY, "Você está muito longe, chegue mais perto!");
  			return 1;
  		}
		if(kitmedico[playerid] <= 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhum kitmedico, vá ao Hospital pegar.");
			return 1;
		}
		Morrendo[plid] = 0;
		AcabouMorrer[plid] = 0;
		Morreu2[plid] = 0;
		KillTimer(TimerDeath[plid]);
		TogglePlayerControllable(plid,1);
		SetPlayerHealth(plid,30);
		SendClientMessage(playerid, COLOR_PARAMEDICO, "Jogador salvo, o governo lhe pagou $400!");
		format(string,sizeof(string),"O paramédico %s salvou sua vida!",PlayerName(playerid));
		SendClientMessage(plid, COLOR_PARAMEDICO, string);
		AddPlayerMoney(playerid, 400, 3);
		ClearAnimations(plid);
    	AcrescentarExPoints(playerid,1);
    	kitmedico[playerid] = kitmedico[playerid] -1;
		for(new i=0; i<SLOTS2; i++){
		    if(Profissao[i] == JORNALISTA){
				format(string,sizeof(string),"[JORNAL]O Paramédico %s acabou de salvar %s, um morador viu e nos contactou, coloque no seu Jornal.",PlayerName(playerid),PlayerName(plid));
				SendClientMessage(i, COLOR_JORNALISTA, string);
			} else {
				new rand = random(4);
				if(rand == 0 || rand == 1 || rand == 2){
				    new rand2 = random(4);
				    if(rand2 == 0){
					    format(string,sizeof(string),"[NOTÍCIAS] O paramédico %s salvou a vida de %s, o governo lhe recompensou pelo trabalho!",PlayerName(playerid),PlayerName(plid));
						SendClientMessage(i,COLOR_WHITE, string);
					}
					if(rand2 == 1){
					    format(string,sizeof(string),"Excelente. Foi o que disse um morador quando viu o Paramédico %s salvar %s",PlayerName(playerid),PlayerName(plid));
						SendClientMessage(i,COLOR_WHITE, string);
					}
					if(rand2 == 2){
					    format(string,sizeof(string),"Tão rápido? %s está \"morto\" de felicidade por %s ter salvo sua vida.",PlayerName(plid),PlayerName(playerid));
						SendClientMessage(i,COLOR_WHITE, string);
					}
					if(rand2 == 3){
					    format(string,sizeof(string),"[HOSPITAL] %s vem se mostrando eficaz nos seus atendimentos, acabou de salvar %s",PlayerName(playerid),PlayerName(plid));
						SendClientMessage(i,COLOR_WHITE, string);
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/curativo", true) == 0) {
	    if(Profissao[playerid] == PARAMEDICO) {
	        new tmp[256];
	        new plid;
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp)){
	            SendClientMessage(playerid, COLOR_GRAY, "/curativo [id]");
				return 1;
			}
			plid = strval(tmp);
			if(!IsPlayerConnected(plid)){
			    SendClientMessage(playerid, COLOR_GRAY, "O jogador não está conectado");
				return 1;
			}
			if(GetPlayerMoney(plid) < 100){
			    SendClientMessage(playerid, COLOR_GRAY, "O jogador não possui dinheiro para pagar o tratamento");
				return 1;
			}
			if(kitmedico[playerid] <= 0){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhum kitmedico, vá ao Hospital pegar.");
				return 1;
			} else {
			    if(GetDistanceBetweenPlayers(plid,playerid) < 10){
			        if(plid != playerid){
				    	SendClientMessage(playerid, COLOR_PARAMEDICO, "Você fez o tratamento no paciente!");
				    	SendClientMessage(plid, COLOR_PARAMEDICO, "Um Paramédico fez o tratamento necessário em você!");
				    	AddPlayerHealth(plid,100);
				    	AddPlayerMoney(plid,-100,-1);
						AddPlayerMoney(playerid,200,3);
				    	AcrescentarExPoints(playerid,1);
				    	kitmedico[playerid] = kitmedico[playerid] -1;
						return 1;
					} else {
				    	SendClientMessage(playerid,COLOR_GRAY,"Você não pode fazer o tratamento em si mesmo.");
						return 1;
					}
				} else {
				    SendClientMessage(playerid,COLOR_GRAY,"Não é possivel fazer o tratamento, tão longe assim do paciente!");
					return 1;
				}
			}
		} else {
	    	SendClientMessage(playerid,COLOR_GRAY,"Apenas paramédicos podem fazer isso!");
			return 1;
		}
	}

    if(strcmp(cmd, "/pegarkit", true) == 0) {
		if(Profissao[playerid] == PARAMEDICO || IsPlayerAdmin(playerid)){
			if(AreaHosp[playerid] == 1){
	   			if(kitmedico[playerid] == 0){
					kitmedico[playerid] = kitmedico[playerid] + 4;
					SendClientMessage(playerid, COLOR_PARAMEDICO, "Você pegou um kit médico. Válido para 4 curativos/tratamentos.");
				    return 1;
				} else {
					SendClientMessage(playerid, COLOR_PARAMEDICO, "Você já possui um kit médico.");
				    return 1;
				}
			} else {
				SendClientMessage(playerid, COLOR_RED2, "Você não está no hospital.");
			 	return 1;
			}
	 	} else {
			SendClientMessage(playerid, COLOR_RED2, "Você não tem permissão.");
			return 1;
		}
   	}

    if(strcmp(cmd, "/pegarremedios", true) == 0) {
		if(Profissao[playerid] == PARAMEDICO || IsPlayerAdmin(playerid)){
			if(AreaHosp[playerid] == 1){
	   			if(pStats[playerid][Remedios] == 0){
					pStats[playerid][Remedios] += 3;
					SendClientMessage(playerid, COLOR_PARAMEDICO, "Você pegou 3 caixas de remédios.");
				    return 1;
				} else {
					SendClientMessage(playerid, COLOR_PARAMEDICO, "Você ainda tem remédios.");
				    return 1;
				}
			} else {
				SendClientMessage(playerid, COLOR_RED2, "Você não está no hospital.");
			 	return 1;
			}
	 	} else {
			SendClientMessage(playerid, COLOR_RED2, "Você não tem permissão.");
			return 1;
		}
   	}
    if(strcmp(cmd, "/urinar", true) == 0){
        if(IsPlayerInAnyVehicle(playerid)){
		   	SendClientMessage(playerid,COLOR_RED2,"Você não pode estar em um veículo.");
		   	return 1;
	   	}
        if(AreaBanheiro[playerid] == 1){
         	if(AcabeiDeMijar[playerid] == 0){
		        if(Mijando[playerid] == 0){
				    if(pStats[playerid][Banheiro] <= 2 || pStats[playerid][Banheiro] >= 10){
					    if(pStats[playerid][Banheiro] <= 500){
							new rand = random(2);
							if(rand == 0){
								SetPlayerPos(playerid,370.9600,-57.4585,1001.5195);
								SetPlayerFacingAngle(playerid,359.4386);
			          			ApplyAnimation(playerid, "PAULNMAC", "Piss_in", 4.0, 0, 0, 0, 0, 0);
			          			ApplyAnimation(playerid, "PAULNMAC", "Piss_in", 4.0, 0, 0, 0, 0, 0);
								SendPlayerMessageToPlayer(playerid, playerid, "Uh...");
								Mijando[playerid] = 1;
								SetTimerEx("ParouDeMijar",10000,0,"d",playerid);
								return 1;
							} else if(rand == 1){
							    TogglePlayerControllable(playerid,0);
								SetPlayerPos(playerid,366.9070,-57.7270,1001.5102);
								SetPlayerFacingAngle(playerid,359.4386);
				        		ApplyAnimation(playerid, "PAULNMAC", "Piss_in", 4.0, 0, 0, 0, 0, 0);
				        		ApplyAnimation(playerid, "PAULNMAC", "Piss_in", 4.0, 0, 0, 0, 0, 0);
								SendPlayerMessageToPlayer(playerid, playerid, "Uh...");
								Mijando[playerid] = 1;
								SetTimerEx("ParouDeMijar",10000,0,"d",playerid);
			                    return 1;
							}
						} else {
							SendClientMessage(playerid, COLOR_GRAY, "Sua higiene pessoal está completa.");
							return 1;
						}
					} else {
						SendClientMessage(playerid, COLOR_GRAY, "Você precisa de medicamentos, vá ao hospital ou chame 1 paramédico.");
						return 1;
					}
				} else {
				  	SendClientMessage(playerid, COLOR_GRAY, "Você está urinando.");
				 	return 1;
				}
			} else {
			   	SendClientMessage(playerid, COLOR_GRAY, "Você acabou de usar o vaso.");
			   	return 1;
			}
		} else if(AreaBanheiro[playerid] == 2){
		   	if(AcabeiDeMijar[playerid] == 0){
		        if(Mijando[playerid] == 0){
				    if(pStats[playerid][Banheiro] <= 2 || pStats[playerid][Banheiro] >= 10){
					    if(pStats[playerid][Banheiro] <= 500){
						    ApplyAnimation(playerid, "PAULNMAC", "Piss_in", 4.0, 0, 0, 0, 0, 0);
						    ApplyAnimation(playerid, "PAULNMAC", "Piss_in", 4.0, 0, 0, 0, 0, 0);
							SendPlayerMessageToPlayer(playerid, playerid, "Uh...");
							Mijando[playerid] = 1;
							SetTimerEx("ParouDeMijar",10000,0,"d",playerid);
						    return 1;
						} else {
							SendClientMessage(playerid, COLOR_GRAY, "Sua higiene pessoal está completa.");
							return 1;
						}
					} else {
						SendClientMessage(playerid, COLOR_GRAY, "Você precisa de medicamentos, vá ao hospital ou chame 1 paramédico.");
						return 1;
					}
				} else {
				  	SendClientMessage(playerid, COLOR_GRAY, "Você está urinando.");
				 	return 1;
				}
			} else {
			   	SendClientMessage(playerid, COLOR_GRAY, "Você acabou de usar o vaso.");
			   	return 1;
			}
		} else if(AreaBanheiro[playerid] == 0){
		   	if(AcabeiDeMijar[playerid] == 0){
		        if(Mijando[playerid] == 0){
				    if(pStats[playerid][Banheiro] <= 2 || pStats[playerid][Banheiro] >= 10){
					    if(pStats[playerid][Banheiro] <= 500){
						    ApplyAnimation(playerid, "PAULNMAC", "Piss_in", 4.0, 0, 0, 0, 0, 0);
						    ApplyAnimation(playerid, "PAULNMAC", "Piss_in", 4.0, 0, 0, 0, 0, 0);
							SendPlayerMessageToPlayer(playerid, playerid, "Uh...");
							SendPlayerMessageToPlayer(playerid, playerid, "Será que a polícia vai ver? o.O");
							Mijando[playerid] = 1;
							SetTimerEx("ParouDeMijar",10000,0,"d",playerid);
							for(new i = 0; i < SLOTS2; i++){
	    						if(Profissao[i] == COP_MILITAR || Profissao[i] == EXERCITO || Profissao[i] == COP_RODOVIARIO || Profissao[i] == COP_SWAT || Profissao[i] == COP_NARCOTICOS || Profissao[i] == DELEGADO || IsPlayerAdmin(i)){
									if(GetDistanceBetweenPlayers(playerid,i) < 60){
										new string[256];
										format(string, sizeof(string), "[CENTRAL COP] Sargento %s, uma velhinha que passeava pelas ruas, diz ter visto %s urinando",PlayerName(i),PlayerName(playerid));
		       							SendClientMessage(i,COLOR_COP_RODOVIARIO, string);
										SendClientMessage(i,COLOR_COP_RODOVIARIO,"[CENTRAL COP] nas proximidas de onde o Senhor se encontra. Veja se a denúncia procede. Caso sim multe-o. CUSTO: $200");
										return 1;
									}
								}
							}
						} else {
							SendClientMessage(playerid, COLOR_GRAY, "Sua higiene pessoal está completa.");
							return 1;
						}
					} else {
						SendClientMessage(playerid, COLOR_GRAY, "Você precisa de medicamentos, vá ao hospital ou chame 1 paramédico.");
						return 1;
					}
				} else {
				  	SendClientMessage(playerid, COLOR_GRAY, "Você está urinando.");
				 	return 1;
				}
			} else {
			  	SendClientMessage(playerid, COLOR_GRAY, "Você acabou de urinar.");
			 	return 1;
			}
		}
	}
	if(strcmp(cmd, "/colocarpasta", true) == 0){
		if(pStats[playerid][EscovaDental] == 0 || pStats[playerid][PastaDental] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você tem que ter uma escova e pasta dental!");
		if(ColocouPasta[playerid] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você já colocou pasta dental, agora escove os dentes antes para colocar mais...");
		ColocouPasta[playerid] = 1;
        pStats[playerid][PastaDental]--;
		SendClientMessage(playerid, COLOR_AZUL2, "Pasta dental aplicada na escova, agora escove os dentes /escovardentes");
		return 1;
	}
	if(strcmp(cmd, "/escovardentes", true) == 0){
	    if(AreaBanheiro[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em um Banheiro para escovar os dentes!");
		if(pStats[playerid][EscovaDental] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem uma escova de dentes!");
		if(ColocouPasta[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Coloque pasta dental na escova de dentes primeiro!");
		if(EscoveiDentes[playerid] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você acabou de escovar os dentes ¬¬\"");
		ColocouPasta[playerid] = 0;
		EscoveiDentes[playerid] = 1;
		TogglePlayerControllable(playerid,0);
		SetTimerEx("EscovarDenovo",300000,0,"d",playerid);
		SetTimerEx("EscovarDentes",12000,0,"d",playerid);
		SendClientMessage(playerid, COLOR_AZUL2, "\"Escovando os dentinhos lá lá lá lá lá...\"");
		return 1;
	}
	if(strcmp(cmd, "/tomarbanho", true) == 0){
	    if(AreaBanheiro[playerid] == 2){
	        if(AreaChuveiro[playerid] == 1){
				if(pStats[playerid][Banheiro] <= 2 || pStats[playerid][Banheiro] >= 10){
	            	if(TomeiBanho[playerid] == 0){
	               		if(pStats[playerid][Banheiro] <= 500){
 							SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
 							TogglePlayerControllable(playerid,0);
 							TomeiBanho[playerid] = 1;
							SendPlayerMessageToPlayer(playerid, playerid, "Lá Lá Lá... 3 patinhos foram passear... Água BOA!");
							SetTimerEx("PararBanho",25000,0,"d",playerid);
							return 1;
						} else {
					    	SendClientMessage(playerid, COLOR_GRAY, "Você está limpo.");
					    	return 1;
						}
					} else {
				    	SendClientMessage(playerid, COLOR_GRAY, "Você acabou de usar o Chuveiro ou está no banho.");
				    	return 1;
					}
				} else {
  					SendClientMessage(playerid, COLOR_GRAY, "Você precisa de medicamentos, vá ao hospital ou chame um paramédico.");
					return 1;
				}
			} else {
				SendClientMessage(playerid, COLOR_GRAY, "Esse Banheiro não tem Chuveiro.");
				return 1;
			}
		} else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um Banheiro.");
		    return 1;
		}
	}
	if(strcmp(cmd, "/sh",true) == 0 && IsPlayerAdmin(playerid)){
	    new h = strval ( strtok ( cmdtext, idx ) );
	    if(h <= 0) return SendClientMessage(playerid, COLOR_GRAY, "USO: /sh [nova higiene]");
	    pStats[playerid][Higiene] = h;
	    return 1;
	}
	if (strcmp(cmd, "/telepizza", true)==0){
		new tmp[256];
		new string[256];
	    strmid(tmp, cmdtext,11, strlen(cmdtext));
		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_GRAY, "/pizza [qual? local de entrega]");
			return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, "Obrigado por ligar para o tele-pizza.");
		    for(new i=0; i<SLOTS2; i++){
		        if(Profissao[i] == ENTREGADOR_PIZZA){
					format(string, sizeof(string), "%s pediu uma pizza: %s", PlayerName(playerid), tmp);
                    SendClientMessage(i, COLOR_ENTREGADOR_PIZZA, string);
		        }
			}
			return 1;
		}
	}
//Contrabando
 	if(strcmp(cmd, "/contrabando", true) == 0) {
		if(Profissao[playerid] == CONTRABANDISTA || IsPlayerAdmin(playerid)){
			if(Contrabando[playerid] == 1 || ContrabandoCar[playerid] == 1) {
				SendClientMessage(playerid, COLOR_GRAD1, "Você já está na missão.");
				return 1;
			}
			new contr = random(4);
			if(contr == 0){
				RingTone[playerid] = 20;
				SetPlayerCheckpoint(playerid,-2328.99,1527.79,0.25,4.0);
				SendClientMessage(playerid, COLOR_PALHA, "Contrabando de Pacote.");
				Contrabando[playerid] = 1;
				Receita[playerid] = 1;
				SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Prossiga para o navio.");
				CheckpointStatus[playerid] = CONTRABANDOINI;
	  			SetTimer("ContrabandoNavio",360000,false);
		        return 1;
		    }
		    if(contr == 1){
				RingTone[playerid] = 20;
			    SendClientMessage(playerid, COLOR_PALHA, "Contrabando de Carros.");
				SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Vá pegar o Carro no local indicado.");
				SetPlayerCheckpoint(playerid,2236.5403,-2213.8721,13.5469,3.0);
				ContrabandoCar[playerid] = 1;
				CheckpointStatus[playerid] = CONTRABANDOCAR1;
				SetTimer("ContrabandoNavio",360000,false);
				return 1;
			}
			if(contr == 2){
				RingTone[playerid] = 20;
				SendClientMessage(playerid, COLOR_PALHA, "Contrabando de Armas.");
				SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Vá falar com o negociante para ele lhe indicar onde estão as armas escondidas.");
				Contrabando[playerid] = 1;
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid,1854.1887,-1914.7314,15.2568,3.0);
				CheckpointStatus[playerid] = CONTRABANDOARMA1;
				SetTimer("ContrabandoNavio",360000,false);
				return 1;
			}
			if(contr == 3){
				RingTone[playerid] = 20;
				SendClientMessage(playerid, COLOR_PALHA, "Contrabando de Drogas.");
				SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Vá pegar as drogas com o traficante.");
				Contrabando[playerid] = 1;
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid,2145.0332,-978.2762,60.9297,3.0);
				CheckpointStatus[playerid] = CONTRABANDODROGA;
				SetTimer("ContrabandoNavio",360000,false);
				return 1;
			}
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Contrabandista!");
		    return 1;
		}
	}
   	if(strcmp(cmd, "/cancelarcontrabando", true) == 0) {
   		if(Profissao[playerid] == CONTRABANDISTA || IsPlayerAdmin(playerid)){
			if(Contrabando[playerid] == 1 || ContrabandoCar[playerid] == 1) {
				if(AcabeiDeRecusar[playerid] == 0 || AcabeiDeRecusar[playerid] == 1){
					Contrabando[playerid] = 0;
					ContrabandoCar[playerid] = 0;
					Receita[playerid] = 0;
					AcabeiDeRecusar[playerid] = AcabeiDeRecusar[playerid] +1;
    				DisablePlayerCheckpoint(playerid);
					CheckpointStatus[playerid] = NONE;
					SendClientMessage(playerid, COLOR_GREEN, "Contrabando cancelado.");
					SendClientMessage(playerid, COLOR_GREEN, "Atenção, você cancelou nosso pedido, não queira encrenca!");
					SetTimerEx("TerminarCancelamento",180000,0,"d",playerid);
					return 1;
				} else {
					SendClientMessage(playerid, COLOR_GRAY, "Você recusou 2 de nossos contrabandos, faça esse ou morra!");
					return 1;
				}
			} else {
				SendClientMessage(playerid, COLOR_GRAY, "Você não está contrabandeado.");
				return 1;
			}
		} else {
			SendClientMessage(playerid, COLOR_GRAY, "Você não é contrabandista.");
			return 1;
		}
	}
   	if(strcmp(cmd, "/pararentrega", true) == 0) {
   		if(Profissao[playerid] == ENTREGADOR_PIZZA|| IsPlayerAdmin(playerid)){
			if(EntregadePizza[playerid] == 1) {
			    EntregadePizza[playerid]=0;
				DisablePlayerCheckpoint(playerid);
				SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, "Entrega de pizzas cancelada!");
				SetTimerEx("TerminarCarregamento",200,0,"d",playerid);
				return 1;
			} else {
				SendClientMessage(playerid, COLOR_GRAY, "Você não está entregando pizzas!");
				return 1;
			}
		} else {
			SendClientMessage(playerid, COLOR_GRAY, "Você não é Entregador de Pizza!");
			return 1;
		}
	}
	if(strcmp(cmd, "/apreendercontrabando", true) == 0) {
		if(Profissao[playerid] == RECEITA_FEDERAL || IsPlayerAdmin(playerid)){
 	    	new tmp[256];
	    	new plid;
	    	new string[256];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_GRAY, "/apreendercontrabando [id]");
				return 1;
			}
        	plid = strval(tmp);
   			if(IsPlayerConnected(plid) && Logado[plid] == 1){
   			    if(Receita[plid] == 0 || ContrabandoCar[plid] == 0 || Contrabando[plid] == 0){
   			        SendClientMessage(playerid, COLOR_GRAY, "Ele não está contrabandeando!");
					return 1;
				}
			    if(GetDistanceBetweenPlayers(playerid,plid) > 20){
			       	SendClientMessage(playerid,COLOR_GRAY,"Você está muito longe, chegue mais perto!");
					return 1;
				}
				Presos[plid] = 1;
				pStats[plid][Preso] = 1;
				Motivo[plid] = 8;
				pStats[plid][MotivoPrisao] = 8;
				CelularBloqueado[playerid] = 0;
				LogarPlayer(plid);
    			SendClientMessage(playerid, COLOR_RECEITA_FEDERAL, "Mercadoria apreendida e contrabandista preso!");
				GameTextForPlayer(playerid,"~y~Misso cumprida! ~n~ ~n~ $500",3000,3);
    			SendClientMessage(plid, COLOR_RECEITA_FEDERAL, "A Receita Federal aprendeu a mercadoria e você também foi preso!");
       		  	GameTextForPlayer(plid, "~w~ PRESO!", 5000,0);
       		  	AddPlayerMoney(playerid, 500, 3);
       		  	DisablePlayerCheckpoint(plid);
       		  	AcrescentarExPoints(playerid,1);
       		  	CheckpointStatus[plid] = NONE;
   			    Receita[plid] = 0;
			    ContrabandoCar[plid] = 0;
			    Contrabando[plid] = 0;
				format(string, sizeof(string), "[RECEITA FEDERAL] O Agente Dr %s prendeu %s por %s, o tempo de cadeia é de %d hora(s) no jogo.", PlayerName(playerid), PlayerName(plid), Motivos[Motivo[plid]], TempoPrisao[Motivo[plid]]);
				SendClientMessageToAll(COLOR_RECEITA_FEDERAL, string);
				return 1;
			} else{
    	        SendClientMessage(playerid, COLOR_GRAY, "Jogador não está conectado/logado");
				return 1;
			}
		} else {
			SendClientMessage(playerid, COLOR_GRAY, "Você não é da Receita Federal!");
			return 1;
		}
	}
	if(strcmp(cmdtext, "/limparchat", true)==0) {
		if(IsPlayerAdmin(playerid)){
			for(new l=0;l<40;l++){
			    SendClientMessageToAll(COLOR_WHITE, " ");
			}
			return 1;
		}
		else{
		    return SendClientMessage(playerid, COLOR_WHITE, "SERVER: Unknown command.");
		}
	}
	if(strcmp(cmd, "/comprarkit", true) == 0) {
       	if(GetPlayerMoney(playerid) < 2500){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para pagar. CUSTO: $2500");
			return 1;
		}
        if(AreaCustomizacao[playerid] == 0){
            SendClientMessage(playerid, COLOR_GRAY, "Você não está na loja de customização!");
            return 1;
		}
 		if(IsPlayerInAnyVehicle(playerid)){
	        if(!strcmp(vStats[GetPlayerVehicleID(playerid)][VDono],PlayerName(playerid),true)){
	            if(vStats[GetPlayerVehicleID(playerid)][TemAlarme] == 0){
					vStats[GetPlayerVehicleID(playerid)][TemAlarme] = 1;
					AddPlayerMoney(playerid,-2500,-1);
					AcrescentarLucro(9,2500);
					SendClientMessage(playerid, COLOR_WHITE, "KIT de travas e alarmes comprado, para instalar digite /meucarro.");
					return 1;
				} else {
				    SendClientMessage(playerid, COLOR_GRAY, "Este carro já possui Alarme, caso queira usar digite: /meucarro.");
				    return 1;
				}
			} else {
			    SendClientMessage(playerid, COLOR_GRAY, "Você não pode comprar um KIT para um carro que não é seu.");
				return 1;
			}
		} else {
		    SendClientMessage(playerid,COLOR_GRAY,"Você não está em um veículo!");
			return 1;
		}
    }
    if(strcmp(cmd, "/destrancarveiculoauto", true) == 0) {
        if(Profissao[playerid] == INSTRUTOR || IsPlayerAdmin(playerid)){
			if(!IsPlayerInAnyVehicle(playerid)){
                SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
                return 1;
			}
			if(GetPlayerVehicleID(playerid) != CarroAuto && GetPlayerVehicleID(playerid) != CarroAuto2 && GetPlayerVehicleID(playerid) != CarroAuto3 && GetPlayerVehicleID(playerid) != CarroAuto4 && GetPlayerVehicleID(playerid) != CarroAuto5 && GetPlayerVehicleID(playerid) != CarroAuto6){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo da auto escola!");
                return 1;
			}
			else{
	    		SendClientMessage(playerid, COLOR_WHITE, "Destrancado...");
			   	for(new i=0; i<SLOTS2; i++){
		    		SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid),i, 0, 0);
				}
				return 1;
		    }
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Instrutor de direção!");
		    return 1;
		}
	}
	if(strcmp(cmd, "/trancarveiculoauto", true) == 0) {
        if(Profissao[playerid] == INSTRUTOR || IsPlayerAdmin(playerid)){
            if(!IsPlayerInAnyVehicle(playerid)){
                SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
                return 1;
			}
			if(GetPlayerVehicleID(playerid) != CarroAuto && GetPlayerVehicleID(playerid) != CarroAuto2 && GetPlayerVehicleID(playerid) != CarroAuto3 && GetPlayerVehicleID(playerid) != CarroAuto4 && GetPlayerVehicleID(playerid) != CarroAuto5 && GetPlayerVehicleID(playerid) != CarroAuto6){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo da auto escola!");
                return 1;
			}
			else{
			    SendClientMessage(playerid, COLOR_WHITE, "Trancado...");
			    for(new i=0; i<SLOTS2; i++){
			        if(i != playerid){
						if(Profissao[i] != INSTRUTOR && !IsPlayerAdmin(i)){
		    				SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid),i, 0, 1);
						}
					}
				}
				return 1;
		    }
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é Instrutor de direção!");
		    return 1;
		}
	}
 	if(strcmp(cmd, "/meucarro", true) == 0) {
	    if(IsPlayerInAnyVehicle(playerid)){
			if(!strcmp(vStats[GetPlayerVehicleID(playerid)][VDono],PlayerName(playerid),true)){
				if(vStats[GetPlayerVehicleID(playerid)][TemAlarme] == 1){
				    TogglePlayerControllable(playerid,0);
					SendClientMessage(playerid, COLOR_WHITE, "Escolha o alarme:");
					ShowMenuForPlayer(OpcoesAlarme,playerid);
					return 1;
				} else {
					SendClientMessage(playerid,COLOR_GRAY,"Esse carro não tem KIT.");
					return 1;
				}
			} else {
				SendClientMessage(playerid,COLOR_GRAY,"Você não é o dono desse carro!");
				return 1;
			}
		} else {
			SendClientMessage(playerid,COLOR_GRAY,"Você não está em um veículo!");
			return 1;
		}
	}
	if(strcmp(cmd, "/usarskin", true) == 0) {
	    if(Logado[playerid] == 1){
	    	SetPlayerSkin(playerid,pStats[playerid][Skin]);
	    	return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar logado!");
		    return 1;
		}
	}
	if(strcmp(cmd, "/skintrabalho", true) == 0) {
	    if(Logado[playerid] == 1){
	    	SetPlayerSkin(playerid,ProfSkin[Profissao[playerid]]);
	    	return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar logado!");
		    return 1;
		}
	}
	if(strcmp(cmd,"/skin",true) == 0) {
	    if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_GRAY, "Você não é admin!");
     	new skin = strval ( strtok ( cmdtext, idx ));
		if(!IsValidSkin(skin)) return SendClientMessage(playerid, COLOR_GRAY, "ERRO: Skin inválido!");
		SetPlayerSkin(playerid,skin);
		return 1;
	}
	if(strcmp(cmd, "/skininfo", true) == 0) {
	    new skin;
		skin = strval(strtok(cmdtext,idx));
		if(!IsValidSkin(skin)){
		    SendClientMessage(playerid, COLOR_GRAY, "Skin inválida!");
		    return 1;
		}
		new skin2, bool:searched=false;
		for(new s = 0; s < sizeof(SkinsType); s++)
		{
		    if(skin == SkinsType[s][skin_id])
		    {
		        skin2 = s;
		        searched=true;
		        break;
			}
		}
		if(!searched){
		    SendClientMessage(playerid, COLOR_GRAY, "Skin inexistente!");
		    return 1;
		}
		if(SkinsType[skin2][skin_loja] == Loja_invalida){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse skin não está a venda, talvez seja um skin específico para uma profissão ou não existe!");
		    return 1;
		}
		new string[256];
		format(string,sizeof(string),"Informações do skin %d",skin);
		SendClientMessage(playerid, COLOR_RED2, string);
		if(SkinsType[skin2][skin_loja] == Binco) format(string,sizeof(string),"Esse skin está disponível na loja Binco, ele custa $%d",SkinsType[skin2][skin_valor]);
        if(SkinsType[skin2][skin_loja] == SubUrban) format(string,sizeof(string),"Esse skin está disponível na loja Sub Urban, ele custa $%d",SkinsType[skin2][skin_valor]);
        if(SkinsType[skin2][skin_loja] == ProLaps) format(string,sizeof(string),"Esse skin está disponível na loja Pro Laps, ele custa $%d",SkinsType[skin2][skin_valor]);
        if(SkinsType[skin2][skin_loja] == Victim) format(string,sizeof(string),"Esse skin está disponível na loja Victim, ele custa $%d",SkinsType[skin2][skin_valor]);
        if(SkinsType[skin2][skin_loja] == DidierSachs) format(string,sizeof(string),"Esse skin está disponível na loja Didier Sachs, ele custa $%d",SkinsType[skin2][skin_valor]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	if(strcmp(cmd, "/experimentarskin", true) == 0) {
		new skin;
		new tmp[256];
		new string[256];
  		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_GRAY, "/experimentarskin [ID/da/skin]");
			return 1;
		}
		skin = strval(tmp);
		new skin2, bool:searched=false;
		for(new s = 0; s < sizeof(SkinsType); s++)
		{
		    if(skin == SkinsType[s][skin_id])
		    {
		        skin2 = s;
		        searched=true;
		        break;
			}
		}
		if(!searched){
		    SendClientMessage(playerid, COLOR_GRAY, "Skin inexistente!");
		    return 1;
		}
		if(GetPlayerInterior(playerid) == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em uma loja de roupas!");
		    return 1;
		}
		switch(SkinsType[skin2][skin_loja]){
		    case Binco:
		    {
		        if(InBinco[playerid] == 0){
		            SendClientMessage(playerid, COLOR_GRAY, "Essa skin é vendida nas lojas de roupas Binco, para compra-la vá até lá!");
					return 1;
				}
				else{
					format(string,sizeof(string),"Binco: Linda Skin não acha? Deseja comprar? /comprarskin %s",skin);
					SendClientMessage(playerid, COLOR_GREEN, string);
					SetPlayerSkin(playerid,skin);
					KillTimer(TimerLevando[ExperimentandoSkin[playerid]]);
        			ExperimentandoSkin[playerid] = SetTimerEx("TirarSkinLoja",10000,0,"d",playerid);
					return 1;
				}
			}
			case SubUrban:
			{
			    if(InSubUrban[playerid] == 0){
		            SendClientMessage(playerid, COLOR_GRAY, "Essa skin é vendida nas lojas de roupas Sub Urban, para compra-la vá até lá!");
					return 1;
				}
				else{
					format(string,sizeof(string),"Didier Sachs: Linda Skin não acha? Deseja comprar? /comprarskin %d",skin);
					SendClientMessage(playerid, COLOR_GREEN, string);
					SetPlayerSkin(playerid,skin);
					KillTimer(ExperimentandoSkin[playerid]);
        			ExperimentandoSkin[playerid] = SetTimerEx("TirarSkinLoja",10000,0,"d",playerid);
					return 1;
				}
			}
			case ProLaps:
			{
			    if(InProLaps[playerid] == 0){
		            SendClientMessage(playerid, COLOR_GRAY, "Essa skin é vendida nas lojas de roupas Pro Laps, para compra-la vá até lá!");
					return 1;
				}
				else{
					format(string,sizeof(string),"Pro Laps: Linda Skin não acha? Deseja comprar? /comprarskin %d",skin);
					SendClientMessage(playerid, COLOR_GREEN, string);
					SetPlayerSkin(playerid,skin);
					KillTimer(ExperimentandoSkin[playerid]);
        			ExperimentandoSkin[playerid] = SetTimerEx("TirarSkinLoja",10000,0,"d",playerid);
					return 1;
				}
			}
			case Victim:
			{
			    if(InVictim[playerid] == 0){
		            SendClientMessage(playerid, COLOR_GRAY, "Essa skin é vendida nas lojas de roupas Victim, para compra-la vá até lá!");
					return 1;
				}
				else{
					format(string,sizeof(string),"Victim: Linda Skin não acha? Deseja comprar? /comprarskin %d",skin);
					SendClientMessage(playerid, COLOR_GREEN, string);
					SetPlayerSkin(playerid,skin);
					KillTimer(ExperimentandoSkin[playerid]);
        			ExperimentandoSkin[playerid] = SetTimerEx("TirarSkinLoja",10000,0,"d",playerid);
					return 1;
				}
			}
			case DidierSachs:
			{
			    if(InDidierSachs[playerid] == 0){
		            SendClientMessage(playerid, COLOR_GRAY, "Essa skin é vendida nas lojas de roupas DidierSachs, para compra-la vá até lá!");
					return 1;
				}
				else{
					format(string,sizeof(string),"Didier Sachs: Linda Skin não acha? Deseja comprar? /comprarskin %d",skin);
					SendClientMessage(playerid, COLOR_GREEN, string);
					SetPlayerSkin(playerid,skin);
					KillTimer(ExperimentandoSkin[playerid]);
        			ExperimentandoSkin[playerid] = SetTimerEx("TirarSkinLoja",10000,0,"d",playerid);
					return 1;
				}
			}
		}
	}
	if(strcmp(cmd, "/comprarskin", true) == 0) {
	    new tmp[256];
		new skin;
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_GRAY, "/comprarskin [ID/da/skin]");
			return 1;
		}
    	skin = strval(tmp);
		if(!IsValidSkin(skin)){
		    SendClientMessage(playerid, COLOR_GRAY, "Skin inválida!");
		    return 1;
		}
		new skin2, bool:searched=false;
		for(new s = 0; s < sizeof(SkinsType); s++)
		{
		    if(skin == SkinsType[s][skin_id])
		    {
		        skin2 = s;
		        searched=true;
		        break;
			}
		}
		if(!searched){
		    SendClientMessage(playerid, COLOR_GRAY, "Skin inexistente!");
		    return 1;
		}
		if(GetPlayerInterior(playerid) == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar em uma loja de roupas!");
		    return 1;
		}
		if(GetPlayerMoney(playerid) < SkinsType[skin2][skin_valor]){
		    new msg[256];
			format(msg,sizeof(msg),"Você não tem dinheiro, CUSTO: $%d,00",SkinsType[skin2][skin_valor]);
		    SendClientMessage(playerid, COLOR_GRAY, msg);
			return 1;
		}
		switch(SkinsType[skin2][skin_loja]){
		    case Binco:
		    {
		        if(InBinco[playerid] == 0){
		            SendClientMessage(playerid, COLOR_GRAY, "Essa skin é vendida nas lojas de roupas Binco, para compra-la vá até lá!");
					return 1;
				}
				else{
				    SendClientMessage(playerid, COLOR_GREEN, "Binco: Compra de skin casual efetuada, obrigado senhor e volte sempre!");
					SetPlayerSkin(playerid,skin);
					pStats[playerid][Skin] = skin;
					AddPlayerMoney(playerid,-SkinsType[skin2][skin_valor],-1);
					return 1;
				}
			}
			case SubUrban:
			{
			    if(InSubUrban[playerid] == 0){
		            SendClientMessage(playerid, COLOR_GRAY, "Essa skin é vendida nas lojas de roupas Sub Urban, para compra-la vá até lá!");
					return 1;
				}
				else{
				    SendClientMessage(playerid, COLOR_GREEN, "Sub Urban: Compra de skin de gangue/pobre efetuada, obrigado senhor e volte sempre!");
					SetPlayerSkin(playerid,skin);
					pStats[playerid][Skin] = skin;
					AddPlayerMoney(playerid,-SkinsType[skin2][skin_valor],-1);
					return 1;
				}
			}
			case ProLaps:
			{
			    if(InProLaps[playerid] == 0){
		            SendClientMessage(playerid, COLOR_GRAY, "Essa skin é vendida nas lojas de roupas Pro Laps, para compra-la vá até lá!");
					return 1;
				}
				else{
				    SendClientMessage(playerid, COLOR_GREEN, "Pro Laps: Compra de skin esportiva efetuada, obrigado senhor e volte sempre!");
					SetPlayerSkin(playerid,skin);
					pStats[playerid][Skin] = skin;
					AddPlayerMoney(playerid,-SkinsType[skin2][skin_valor],-1);
					return 1;
				}
			}
			case Victim:
			{
			    if(InVictim[playerid] == 0){
		            SendClientMessage(playerid, COLOR_GRAY, "Essa skin é vendida nas lojas de roupas Victim, para compra-la vá até lá!");
					return 1;
				}
				else{
				    SendClientMessage(playerid, COLOR_GREEN, "Victim: Compra de skin diversa/rural efetuada, obrigado senhor e volte sempre!");
					SetPlayerSkin(playerid,skin);
					pStats[playerid][Skin] = skin;
					AddPlayerMoney(playerid,-SkinsType[skin2][skin_valor],-1);
					return 1;
				}
			}
			case DidierSachs:
			{
			    if(InDidierSachs[playerid] == 0){
		            SendClientMessage(playerid, COLOR_GRAY, "Essa skin é vendida nas lojas de roupas DidierSachs, para compra-la vá até lá!");
					return 1;
				}
				else{
				    SendClientMessage(playerid, COLOR_GREEN, "Didier Sachs: Compra de skin formal efetuada, obrigado senhor e volte sempre!");
					SetPlayerSkin(playerid,skin);
					pStats[playerid][Skin] = skin;
					AddPlayerMoney(playerid,-SkinsType[skin2][skin_valor],-1);
					return 1;
				}
			}
		}
	}
	if(strcmp(cmd, "/comprarcarro", true)==0){
		new string[256];
        if(!IsPlayerInAnyVehicle(playerid)){
            SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
            return 1;
		}
		if(pStats[playerid][LastVeh] >= MAX_PLAYER_VEHICLES){
			SendClientMessage(playerid, COLOR_GRAY, "Limite de veículos por jogador excedido pelo gamemode.");
            return 1;
		}
		if(GetPlayerVehicleID(playerid) != carvenda1 && GetPlayerVehicleID(playerid) != carvenda2 && GetPlayerVehicleID(playerid) != carvenda3 && GetPlayerVehicleID(playerid) != carvenda4 && GetPlayerVehicleID(playerid) != carvenda5 && GetPlayerVehicleID(playerid) != carvenda6 && GetPlayerVehicleID(playerid) != carvenda7 && GetPlayerVehicleID(playerid) != carvenda8 && GetPlayerVehicleID(playerid) != carvenda9 && GetPlayerVehicleID(playerid) != carvenda10){
			SendClientMessage(playerid, COLOR_GRAY, "Esse veículo não está à venda!");
			return 1;
		}
		if(GetPlayerMoney(playerid) < GetVehiclePrice(GetVehicleModel(GetPlayerVehicleID(playerid)))){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro!");
		    format(string,sizeof(string),"Esse veículo custa: $%d",GetVehiclePrice(GetVehicleModel(GetPlayerVehicleID(playerid))));
			SendClientMessage(playerid, COLOR_GRAY, string);
			return 1;
		}
		else{
		    AddPlayerMoney(playerid,-GetVehiclePrice(GetVehicleModel(GetPlayerVehicleID(playerid))),-1);
		    new Float:X,Float:Y,Float:Z,Float:ang;
		    X = 554.0287;
			Y = -1248.5660;
			Z = 16.4709;
			ang = 298.9612;
			new cor1,cor2;
			cor1 = random(126);
			cor2 = random(126);
			format(string,sizeof(string),"Você comprou esse veículo no valor de $%d",GetVehiclePrice(GetVehicleModel(GetPlayerVehicleID(playerid))));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(playerid, COLOR_WHITE, "Seu carro está na frente da concecionária, vá busca-lo.");
            AcrescentarLucro(15,GetVehiclePrice(GetVehicleModel(GetPlayerVehicleID(playerid)))/4);
			RemovePlayerFromVehicle(playerid);
			TogglePlayerControllable(playerid,1);
			new File:temp;
			format(string, sizeof(string), "%d %f %f %f %f %d %d //Comprado na concecionaria por: %s\r\n", GetVehicleModel(GetPlayerVehicleID(playerid)),X,Y,Z,ang,cor1,cor2,PlayerName(playerid));
			temp = fopen("Utilidades/carrosrpg.rpg", io_append);
   			fwrite(temp, string);
            fclose(temp);
           	LastCar++;
		    SetTimerEx("SetCar",50,0,"dffffddd",GetVehicleModel(GetPlayerVehicleID(playerid)),X,Y,Z,ang,cor1,cor2,playerid);
		    return 1;
		}
	}
	if(strcmp(cmd, "/meuveiculoid", true) == 0){
	    if(!IsPlayerInAnyVehicle(playerid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhum veículo!");
		    return 1;
		}
	    if(!compare(vStats[GetPlayerVehicleID(playerid)][VDono],PlayerName(playerid))){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não é o dono do veículo!");
	        return 1;
		}
		if(GetPlayerVehicleKeyID(playerid,GetPlayerVehicleID(playerid)) == INVALID_VEHICLE_ID){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem mais veículo desse ID, talvez porque já tenha vendido!");
		    return 1;
		}
		new string[256];
		format(string,sizeof(string),"[INFO] Esse é seu veículo de ID %d",GetPlayerVehicleKeyID(playerid,GetPlayerVehicleID(playerid)));
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	if(strcmp(cmd, "/vdocumentos", true) == 0){
		if(!IsPlayerInAnyVehicle(playerid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhum veículo!");
		    return 1;
		}
		SendClientMessage(playerid, COLOR_RED2, "Informações do veículo:");
		new string[256];
		format(string,sizeof(string),"Modelo: %s",GetVehicleName(GetVehicleModel(GetPlayerVehicleID(playerid))-400));
		SendClientMessage(playerid,COLOR_WHITE,string);
		format(string,sizeof(string),"Dono: %s",vStats[GetPlayerVehicleID(playerid)][VDono]);
		SendClientMessage(playerid,COLOR_WHITE,string);
		format(string,sizeof(string),"Dívida atual: $%d,00 dólares",vStats[GetPlayerVehicleID(playerid)][Dividas]);
		SendClientMessage(playerid,COLOR_WHITE,string);
		format(string,sizeof(string),"Placa: %s",vStats[GetPlayerVehicleID(playerid)][VPlaca]);
		SendClientMessage(playerid,COLOR_WHITE,string);
		if(vStats[GetPlayerVehicleID(playerid)][Vendendo] == 0){
			SendClientMessage(playerid,COLOR_WHITE,"À venda: Não");
		}
		else if(vStats[GetPlayerVehicleID(playerid)][Vendendo] == 1){
		    SendClientMessage(playerid,COLOR_WHITE,"À venda: Sim");
		}
		if(vStats[GetPlayerVehicleID(playerid)][VSeguro] == 1 || GetPlayerVehicleID(playerid) <= QTCARS){
	 	   	SendClientMessage(playerid,COLOR_WHITE,"Possui seguro: Sim");
		}
		else{
 			SendClientMessage(playerid,COLOR_WHITE,"Possui seguro: Não");
		}
		return 1;
	}
	if(strcmp(cmd, "/emprestarchave", true) == 0) {
	    new tmp[256];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /emprestarchave [id]");
		    return 1;
		}
		if(!IsPlayerInAnyVehicle(playerid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
		    return 1;
		}
	    new plid = strval(tmp);
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado!");
		    return 1;
		}
		if(!compare(vStats[GetPlayerVehicleID(playerid)][VDono],PlayerName(playerid)) || !compare(vStats[GetPlayerVehicleID(playerid)][VChave],PlayerName(playerid))){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não é o dono do veículo, ou não está com a chave!");
		    return 1;
		}
		if(GetDistanceBetweenPlayers(playerid,plid) > 20){
		    SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto para emprestar a chave ao jogador!");
		    return 1;
		}
		new string[256];
		set(vStats[GetPlayerVehicleID(playerid)][VChave],PlayerName(plid));
		SendClientMessage(playerid, COLOR_JUIZ, "Chave emprestada!");
		format(string,sizeof(string),"%s lhe emprestou a chave do carro dele!",PlayerName(playerid));
		SendClientMessage(plid, COLOR_WHITE, string);
		return 1;
	}
	if(strcmp(cmd, "/devolverchave", true) == 0) {
	    new tmp[256], plid, vinfo[256], qtdevolucao, string[256];
	    tmp = strtok(cmdtext,idx);
	    if(!strlen(tmp)){
	        SendClientMessage(playerid, COLOR_GRAY, "USO: /devolverchave [id]");
	        return 1;
		}
		plid = strval(tmp);
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		    return 1;
		}
		if(GetDistanceBetweenPlayers(playerid,plid) > 20){
		    SendClientMessage(playerid, COLOR_GRAY, "Chegue mais perto para devolver a chave do jogador!");
		    return 1;
		}
		for(new v = QTCARS; v < MAX_VEHICLES; v++){
		    set(vinfo,VehicleFile(v));
			if(!fexist(vinfo)) break;
			if(compare(vStats[v][VChave],PlayerName(playerid)) && compare(vStats[v][VDono],PlayerName(plid))){
			   	qtdevolucao++;
				set(vStats[v][VChave],PlayerName(plid));
			}
		}
		if(qtdevolucao == 0) return SendClientMessage(playerid, COLOR_GRAY, "Não foi devolvida nenhuma chave ao dono, pois você não está com nenhuma...");
		format(string,sizeof(string),"Foram devolvidas %d chave(s) ao dono!",qtdevolucao);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string,sizeof(string),"%s lhe devolveu %d chaves suas que estavam com ele",PlayerName(playerid),qtdevolucao);
		SendClientMessage(plid, COLOR_WHITE, string);
		return 1;
	}
	if(strcmp(cmd, "/trocardono", true)==0) {
	    if(Profissao[playerid] == VENDEDOR_DE_CARROS || IsPlayerAdmin(playerid)){
	        if(IsPlayerInAnyVehicle(playerid)){
				new tmp[256], plid, vid;
				tmp = strtok(cmdtext,idx);
				if(!strlen(tmp)){
				    SendClientMessage(playerid,COLOR_GRAY,"/trocardono [id]");
				    return 1;
				}
				plid = strval(tmp);
				if(plid==playerid && !IsPlayerAdmin(playerid)){
				    SendClientMessage(playerid,COLOR_GRAY,"Você não pode mudar a documentação do carro para si mesmo");
				    return 1;
				}
				if(!IsPlayerConnected(plid)){
				    SendClientMessage(playerid,COLOR_GRAY,"Jogador não conectado/logado");
				    return 1;
				}
				vid=GetPlayerVehicleID(playerid);
				if(!IsStringAName(vStats[vid][VDono])){
				    SendClientMessage(playerid, COLOR_GRAY, "O dono do veículo tem que estar conectado!");
				    return 1;
				}
				new v,carid,id = IDName(vStats[vid][VDono]);
				while(v < pStats[id][LastVeh])
				{
				    if(GetVehicles[id][v] == vid)
				    {
				        carid = v;
						break;
				    }
				}
				MudarDono(GetPlayerVehicleID(playerid),carid,id,plid);
				SendClientMessage(playerid,COLOR_GRAY,"Documentação trocada com sucesso");
				return 1;
			}
			else {
			    SendClientMessage(playerid,COLOR_GRAY,"Você não está em um veículo!");
			    return 1;
			}
		}
		else {
		    SendClientMessage(playerid,COLOR_GRAY,"EPA! Você não tem permissão para mexer nesse comando!");
		    return 1;
		}
	}
	if(strcmp(cmd, "/chamarparamorar",true) == 0) {
	    new tmp[256];
		new plid;
		new string[256];
		tmp = strtok(cmdtext,idx);
		plid = strval(tmp);
		if(!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /chamarparamorar [id]");
		    return 1;
		}
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		    return 1;
		}
		format(string,sizeof(string),"%s está oferecendo uma proposta de moradia em sua casa!",PlayerName(playerid));
		SendClientMessage(plid, COLOR_JUIZ, string);
		SendClientMessage(plid, COLOR_JUIZ, "Para aceitar digite /aceitarmoradia caso contrário digite /recusarmoradia.");
		SendClientMessage(playerid, COLOR_JUIZ, "Proposta de moradia oferecida para o outro jogador.");
		PropostaMoradia[plid] = 1;
		DonoPMoradia[plid] = playerid;
		return 1;
	}
	if(strcmp(cmd, "/aceitarmoradia", true) == 0) {
	    if(PropostaMoradia[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma proposta de moradia!");
        pStats[playerid][ConvidadoCasa] = 1;
        set(pStats[playerid][DonoCasaConvidada],PlayerName(DonoPMoradia[playerid]));
		SendClientMessage(DonoPMoradia[playerid], COLOR_JUIZ, "O jogador aceitou sua proposta de moradia!");
		SendClientMessage(playerid, COLOR_JUIZ, "Moradia aceita! Seja bem vindo a sua nova casa!");
		PropostaMoradia[playerid] = 0;
		return 1;
	}
	if(strcmp(cmd, "/recusarmoradia", true) == 0) {
	    if(PropostaMoradia[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma proposta de moradia!");
		SendClientMessage(DonoPMoradia[playerid], COLOR_JUIZ, "O jogador recusou sua proposta de moradia!");
		SendClientMessage(playerid, COLOR_JUIZ, "Proposta de moradia recusada!");
		PropostaMoradia[playerid] = 0;
		return 1;
	}
	if(strcmp(cmd, "/cancelarmoradia", true) == 0) {
		if(pStats[playerid][ConvidadoCasa] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não está morando na casa de nenhum jogador!");
		pStats[playerid][ConvidadoCasa] = 0;
		set(pStats[playerid][DonoCasaConvidada],"NONE");
		SendClientMessage(playerid, COLOR_WHITE, "Você saiu da sua casa de moradia!");
		return 1;
	}
	if(strcmp(cmd, "/alugarcasa", true) == 0) {
	    new tmp[256];
	    new plid;
	    tmp = strtok(cmdtext,idx);
	    plid = strval(tmp);
		if(!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /alugarcasa [id]");
		    return 1;
		}
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "O jogador não está conectado/logado");
		    return 1;
		}
		if(pStats[plid][LocandoCasa] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está locando nenhuma casa!");
		    return 1;
		}
		if(GetPlayerMoney(playerid) < pStats[plid][ValorAluguel]){
		    new string[256];
		    format(string,sizeof(string),"Você não tem dinheiro, CUSTO: $%d",pStats[plid][ValorAluguel]);
			SendClientMessage(playerid, COLOR_GRAY, string);
			return 1;
		}
		else{
			set(pStats[playerid][DonoCasaAlugada],PlayerName(plid));
			pStats[playerid][LocouCasa] = 1;
			pStats[playerid][DiasDeAluguel] = pStats[plid][DiasAluguel];
			pStats[plid][DiasAluguel] = 0;
			pStats[plid][LocandoCasa] = 0;
		    AddPlayerMoney(playerid,-pStats[plid][ValorAluguel],-1);
		    AddPlayerMoney(plid, pStats[plid][ValorAluguel], 4);
		    new string[256];
		    format(string,sizeof(string), "Você alugou a casa de %s por $%d por %d dia(s)",PlayerName(plid),pStats[plid][ValorAluguel],pStats[playerid][DiasDeAluguel]);
		    SendClientMessage(playerid, COLOR_GREEN, "Casa alugada!");
		    format(string,sizeof(string), "%s alugou sua casa!",PlayerName(playerid));
			SendClientMessage(plid, COLOR_WHITE, string);
			pStats[plid][ValorAluguel] = 0;
			return 1;
		}
	}
	if(strcmp(cmd, "/cancelaraluguel", true) == 0) {
	    if(pStats[playerid][LocouCasa] == 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não alugou nenhuma casa!");
	        return 1;
		}
		new string[256];
		format(string,sizeof(string),"%s cancelou o aluguel da casa de %s, ele diz que prefere morar sozinho!",PlayerName(playerid),pStats[playerid][DonoCasaAlugada]);
		SendClientMessageToAll(COLOR_WHITE, string);
		set(pStats[playerid][DonoCasaAlugada],"NONE");
		pStats[playerid][DiasDeAluguel] = 0;
		pStats[playerid][LocouCasa] = 0;
		return 1;
	}
	if(strcmp(cmd, "/minhacasa", true) == 0) {
		if(pStats[playerid][Casa] == 0) {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhuma casa!");
		    return 1;
		}
		TogglePlayerControllable(playerid,0);
		ShowMenuForPlayer(CasaOpc,playerid);
		return 1;
	}
	if(strcmp(cmd, "/comprarcasa",true) == 0){
		new tmp[256];
		new plid;
		tmp = strtok(cmdtext,idx);
		plid = strval(tmp);
		if(!strlen(tmp)){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /comprarcasa [id]");
		    return 1;
		}
		if(pStats[plid][Casa] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você está tentando comprar uma casa que nem existe!");
			return 1;
		}
		if(pStats[plid][VendendoCasa] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está vendendo nenhuma casa!");
		    return 1;
		}
		if(GetPlayerMoney(playerid) < pStats[plid][ValorCasa]){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro para comprar a casa!");
		    return 1;
		}
		if(plid == playerid){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não pode comprar sua própria casa!");
		    return 1;
		}
		else{
		    KillTimer(TimerVenda[plid]);
		    if(pStats[playerid][Casa] == 1) VenderCasa(playerid);
		   	AddPlayerMoney(playerid,-pStats[plid][ValorCasa],4);
			new string[256];
			new str2[256];
			new str[256];
		    format(str,sizeof(str),"O jogador %s comprou sua casa!",PlayerName(playerid));
		    SendClientMessage(plid, COLOR_WHITE, str);
		    SendClientMessage(playerid, COLOR_GREEN, "Casa comprada! Agora você tem um novo lar.");
            format(str,sizeof(str),"[CORRETORA] %s comprou o imóvel de %s no valor de $%d",PlayerName(playerid),PlayerName(plid),pStats[plid][ValorCasa]);
		    SendClientMessageToAll(COLOR_CORRETOR, str);
			pStats[playerid][ValorCasa] = pStats[plid][ValorCasa];
			pStats[playerid][Casa] = 1;
			new Float:X = pStats[plid][SpawnPosX];
			new Float:Y = pStats[plid][SpawnPosY];
			new Float:Z = pStats[plid][SpawnPosZ];
			new Float:ang = pStats[plid][SpawnPosAng];
			CreatePickup(1272,1,X,Y,Z);
			new pickupcasa = LastCasa;
   			LastCasa++;
		    format(str2,sizeof(str2),"VL%d",pickupcasa);
		    format(string,sizeof(string),"A senha do seu cofre no momento é %s mas você pode troca-la com /registrarcofre [senha]",str2);
			SendClientMessage(playerid, COLOR_WHITE, string);
			new File:pickupfile = fopen(PickupFile(pickupcasa),io_write);
			fclose(pickupfile);
			switch(pStats[playerid][ValorCasa])
			{
			    case 5000: pckStats[pickupcasa][Int] = 0;
			    case 10000: pckStats[pickupcasa][Int] = 1;
			    case 20000: pckStats[pickupcasa][Int] = 2;
			    case 40000: pckStats[pickupcasa][Int] = 3;
			    case 60000: pckStats[pickupcasa][Int] = 4;
			    case 80000: pckStats[pickupcasa][Int] = 5;
			    case 100000: pckStats[pickupcasa][Int] = 6;
			    case 200000: pckStats[pickupcasa][Int] = 7;
			    default: pckStats[pickupcasa][Int] = 0;
			}
			pckStats[pickupcasa][pX] = X;
			pckStats[pickupcasa][pY] = Y;
			pckStats[pickupcasa][pZ] = Z;
	        pStats[playerid][SpawnPosX] = X;
	        pStats[playerid][SpawnPosY] = Y;
	        pStats[playerid][SpawnPosZ] = Z;
	        pStats[playerid][SpawnPosAng] = ang;
			set(pckStats[pickupcasa][PickupDono],PlayerName(playerid));
			set(pckStats[pickupcasa][Chave],PlayerName(playerid));
			set(pckStats[pickupcasa][SenhaCofre],str2);
			VenderCasa(plid);
		    return 1;
		}
	}
	if(strcmp(cmd, "/aceitarhoraextra", true) == 0) {
		if(HoraExtra[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Não foi oferecida a você nenhuma proposta de HORA EXTRA!");
		FazendoHoraExtra[playerid] = 1;
		new rand = random(3) + 3;
		TempoHoraExtra2[playerid] = SetTimerEx("FimHoraExtra",rand*60000,0,"d",playerid);
		new msg[256];
		format(msg,sizeof(msg),"Hora extra aceita! Duração: %d hora(s) no jogo!",rand);
		SendClientMessage(playerid, COLOR_WHITE, msg);
		KillTimer(TempoHoraExtra[playerid]);
		HoraExtra[playerid] = 0;
		return 1;
	}
	if(strcmp(cmd, "/recusarhoraextra", true) == 0) {
		if(HoraExtra[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Não foi oferecida a você nenhuma proposta de HORA EXTRA!");
		HoraExtra[playerid] = 0;
		KillTimer(TempoHoraExtra[playerid]);
		SendClientMessage(playerid, COLOR_GRAY, "Hora extra recusada...");
		return 1;
	}
	if(strcmp(cmd, "/participar", true) == 0) {
		if(DerbyAvisado == 1){
		    if(DerbyIniciou == 1){
		        SendClientMessage(playerid, COLOR_GRAY, "O derby já iniciou...");
		        return 1;
			}
			if(pStats[playerid][HistoriaFeita] == 0) {
	   			SendClientMessage(playerid, COLOR_GRAY, "Termine a história para participar do Derby!");
	   			return 1;
	   		}
		    if(OficializarParticipacao[playerid] == 1){
		        SendClientMessage(playerid, COLOR_GRAY, "Você já está inscrito, vá oficializar sua participação!");
		        return 1;
			}
			if(QtParticipantes() + QtDerbeiro() >= 10){
			    SendClientMessage(playerid, COLOR_GRAY, "Derby LOTADO, desculpe, talvez na próxima você consiga!");
			    return 1;
			}
			if(PlayerDerby[playerid] == 0){
				SendClientMessage(playerid, COLOR_PALHA, "[ESTÁDIO] Você foi inscrito com sucesso. Vá até o CP no radar para oficializar sua participação.");
				SetPlayerCheckpoint(playerid, 2687.7869,-1690.4769,9.4502,5.0);
				OficializarParticipacao[playerid] = 1;
				CheckpointStatus[playerid] = DERBY;
				SetTimerEx("CancelarDerby",DMinutosRestantes*60000,0,"d",playerid);
				new string[256];
				format(string,sizeof(string),"Participantes do Derby: %d/10",QtParticipantes());
				SendClientMessageToAll(COLOR_WHITE, string);
				return 1;
			} else {
			    SendClientMessage(playerid, COLOR_GRAY, "Você já está no Derby.");
			    return 1;
		 	}
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "As inscrições para o Derby não foram abertas ou já encerraram.");
		    return 1;
	 	}
	}
	if(strcmp(cmd, "/aceitaremprego",true) == 0) {
		if(SM[playerid] != NONE){
		    SendClientMessage(playerid, COLOR_GRAY, "Você já foi readmitido para uma submissão!");
		    return 1;
		}
		if(AreaMorro[playerid] == 1) {
		    if(SubMissaoAtiva[DROGAS]){
				SM[playerid] = DROGAS;
				new qtentregas = random(4) + 2;
				new string[256];
				format(string,sizeof(string),"Aew maluco, tu tem %d entregas pra fazer, vai rápido, se tu vacilar agente te quebra na porrada saco?!",qtentregas);
				SendClientMessage(playerid, COLOR_LIDER_DE_TRAFICO, string);
				SendClientMessage(playerid, COLOR_LIDER_DE_TRAFICO, "Ah e cuidado com os COPS, se eles te pegarem o problema é seu, maluco!");
				QtEntregasDrogas[playerid] = qtentregas;
				SubMissaoAtiva[DROGAS] = 0;
				new randcp = random(10);
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid,EntregaDrogaPos[randcp][0],EntregaDrogaPos[randcp][1],EntregaDrogaPos[randcp][2],2.5);
				CheckpointStatus[playerid] = ENTREGANDO_DROGAS;
				SendClientMessageToAll(COLOR_LIDER_DE_TRAFICO, "[MORRO] Vão vazando daqui, já pegamo um maluco pra faze o trampo, PERDERAM PLAYBOYS!");
				new r = random(3);
				if(r == 0){
					format(string,sizeof(string),"DENUNCIA: Morador anônimo denunciou que %s está fazendo o serviço de entregas de drogas, rápido peguem-no!");
					SendClientMessageToAll(COLOR_WHITE, string);
				}
				return 1;
			}
			else{
			    SendClientMessage(playerid, COLOR_GRAY, "Maluco tu pirou? Agente num tá afim de ninguém pra entrega beck agora não!");
				return 1;
			}
		}
		else if(AreaBalada[playerid] == 1){
		    if(SubMissaoAtiva[DJ]){
		        SM[playerid] = DJ;
		        HaveDJ = 1;
		        SendClientMessage(playerid, COLOR_WHITE, "Hum... Então você quer ser o nosso DJ de hoje? OK, espero que se saiá bem, boa sorte!");
				new string[256];
				format(string,sizeof(string),"O cargo de DJ foi preenchido por %s, sinto muito aqueles outros que quiseram, talvez na próxima vocês tenham uma chance!",PlayerName(playerid));
				SendClientMessageToAll(COLOR_COP_MILITAR, string);
				SendClientMessage(playerid, COLOR_WHITE, "Pressione 'Shift / Barra de espaço' , para mudar a música!");
				TogglePlayerControllable(playerid,false);
				SetPlayerCameraPos(playerid,487.0688,-2.7831,1002.3828);
				SetPlayerCameraLookAt(playerid,487.6468,-14.4335,1000.6797);
				SetPlayerPos(playerid,476.0887,-15.1642,1003.6953);
				SubMissaoAtiva[DJ] = 0;
				TimerDJ[playerid] = SetTimerEx("FimDJ",300000,0,"d",playerid);
				return 1;
			}
			else{
				SendClientMessage(playerid, COLOR_GRAY, "Não estamos contratando DJ agora!");
				return 1;
			}
		}
		else if(AreaSorveteria[playerid] == 1){
		    if(SubMissaoAtiva[SORVETERIA]){
		        SM[playerid] = SORVETERIA;
		        SendClientMessage(playerid, COLOR_ROSACLARO, "Contratado, rápido vá entregar os sorvetes!");
		        new string[256];
		        format(string,sizeof(string),"[SORVETERIA] %s foi para o cargo de entrega de sorvetes, sinto muito galera, a vaga foi preenchida!",PlayerName(playerid));
				SendClientMessageToAll(COLOR_ROSACLARO, string);
				QtEntregasSorvetes[playerid] = 3;
				new randcp = random(9);
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid,EntregaSorvetePos[randcp][0],EntregaSorvetePos[randcp][1],EntregaSorvetePos[randcp][2],2.5);
				CheckpointStatus[playerid] = ENTREGANDO_SORVETE;
				SubMissaoAtiva[SORVETERIA] = 0;
				return 1;
			}
			else{
			    SendClientMessage(playerid, COLOR_GRAY, "Não estamos precisando de ninguém para entregar sorvetes neste momento!");
			    return 1;
			}
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhum local para admitir um cargo temporário!");
		    return 1;
		}
	}
	if(strcmp(cmd, "/aceitarconserto", true) == 0){
	    if(PropostaConserto[playerid] == 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Não foi oferecida nenhuma proposta a você!");
	        return 1;
		}
		if(GetPlayerMoney(playerid) < DinheiroConserto[playerid]){
			if(pStats[playerid][Banco] >= DinheiroConserto[playerid]){
				SendClientMessage(playerid, COLOR_MECANICO, "[OFICINA] OK, espera um pouco que já devolvemos o seu veículo!");
				pStats[playerid][Banco] -= DinheiroConserto[playerid];
				SendClientMessage(playerid, COLOR_GREEN, "OBS: O dinheiro do conserto foi retirado de sua conta bancária!");
				TimerConserto[playerid] = SetTimerEx("ConsertandoCarro",40000,0,"dd",playerid,VeiculoConserto[playerid]);
				return 1;
			}
			else{
			    SendClientMessage(playerid, COLOR_GRAY, "[OFICINA] O que? Não tem dinheiro? HA HA HA vai dizendo adeus a seu veículo rapaz!");
				PropostaConserto[playerid] = 0;
				VeiculoConserto[playerid] = 0;
				DinheiroConserto[playerid] = 0;
				return 1;
			}
		}
		SendClientMessage(playerid, COLOR_MECANICO, "[OFICINA] OK, espera um pouco que já devolvemos o seu veículo!");
		AddPlayerMoney(playerid, - DinheiroConserto[playerid], -1);
		TimerConserto[playerid] = SetTimerEx("ConsertandoCarro",40000,0,"dd",playerid,VeiculoConserto[playerid]);
		return 1;
	}
	if(strcmp(cmd, "/recusarconserto", true) == 0){
	    if(PropostaConserto[playerid] == 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Não foi oferecida nenhuma proposta a você!");
	        return 1;
		}
		PropostaConserto[playerid] = 0;
		VeiculoConserto[playerid] = 0;
		DinheiroConserto[playerid] = 0;
		SendClientMessage(playerid, COLOR_MECANICO, "[OFICINA] OK, seu carro já era, não reclame também, pois nós te oferecemos uma proposta!");
		return 1;
	}
	if(strcmp(cmd, "/comprarchavemestra", true) == 0) {
		if(AreaChaveiro[playerid] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está no Chaveiro!");
		    return 1;
		}
		if(GetPlayerMoney(playerid) < 150){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro. Custo: $150");
		    return 1;
		}
		new string[256];
		AddPlayerMoney(playerid,-150,-1);
		pStats[playerid][ChaveMestra]++;
		format(string,sizeof(string),"Chave mestra adquirida, agora você tem %d chave(s)",pStats[playerid][ChaveMestra]);
        SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	if(strcmp(cmd, "/usarchavemestra", true) == 0) {
		if(PChaveMestra[playerid] == 0) {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não recebeu proposta para usar a chave mestra!");
		    return 1;
		}
		if(!IsPlayerInAnyVehicle(playerid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
		    TogglePlayerControllable(playerid,true);
			return 1;
		}
		if(pStats[playerid][ChaveMestra] <= 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhuma chave mestra!");
		    TogglePlayerControllable(playerid,true);
		    RemovePlayerFromVehicle(playerid);
			return 1;
		}
		new rand = random(5);
		TogglePlayerControllable(playerid,true);
		if(rand != 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Sua chave mestra quebrou! Você não conseguiu abrir o veículo...");
			RemovePlayerFromVehicle(playerid);
			pStats[playerid][ChaveMestra]--;
			return 1;
		}
		else{
			SendClientMessage(playerid, COLOR_WHITE, "Carro aberto! A chave mestra funcionou...");
			UsingChaveMestra[playerid][GetPlayerVehicleID(playerid)] = 1;
			return 1;
		}
	}
	if(strcmp(cmd, "/naousarchavemestra", true) == 0) {
	    if(PChaveMestra[playerid] == 0) {
		    SendClientMessage(playerid, COLOR_GRAY, "Você não recebeu proposta para usar a chave mestra!");
		    return 1;
		}
		if(!IsPlayerInAnyVehicle(playerid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
		    TogglePlayerControllable(playerid,true);
			return 1;
		}
		if(pStats[playerid][ChaveMestra] <= 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhuma chave mestra!");
		    TogglePlayerControllable(playerid,true);
		    RemovePlayerFromVehicle(playerid);
			return 1;
		}
		RemovePlayerFromVehicle(playerid);
		TogglePlayerControllable(playerid,true);
		SendClientMessage(playerid, COLOR_WHITE, "Chave mestra não usada!");
		return 1;
	}
	if(strcmp(cmd, "/usarcard", true) == 0) {
		if(!IsPlayerInAnyVehicle(playerid)){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
	        return 1;
		}
	    if(PropostaCard[playerid] == 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma proposta para usar o Virtual Card!");
	        return 1;
		}
		new vehicleid = GetPlayerVehicleID(playerid);
	    for(new i; i<SLOTS2; i++)
	    {
	        if(IsPlayerInVehicle(i,vehicleid) && GetPlayerState(i)== PLAYER_STATE_DRIVER)
	        {
	            KillTimer(TimerCard[playerid]);
	            PropostaCard[playerid] = 0;
	            pStats[playerid][VirtualCard]--;
	            AddPlayerMoney(i,25,3);
	            SendClientMessage(playerid, COLOR_WHITE, "Virtual Card usado!");
	            SendClientMessage(i, COLOR_WHITE,   "Seu passageiro decidiu pagar com o Virtual Card, você recebeu $25,00");
     		}
	 	}
	 	return 1;
	}
	if(strcmp(cmd, "/naousarcard", true) == 0) {
		if(!IsPlayerInAnyVehicle(playerid)){
	        SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
	        return 1;
		}
	    if(PropostaCard[playerid] == 0){
	        SendClientMessage(playerid, COLOR_GRAY, "Não foi lhe oferecida nenhuma proposta para usar o Virtual Card!");
	        return 1;
		}
		new vehicleid = GetPlayerVehicleID(playerid);
	    for(new i; i<SLOTS2; i++)
	    {
	        if(IsPlayerInVehicle(i,vehicleid) && GetPlayerState(i)== PLAYER_STATE_DRIVER)
	        {
	            KillTimer(TimerCard[playerid]);
	            NaoUsarCard(playerid,i);
     		}
	 	}
	 	return 1;
	}
	if(strcmp(cmd, "/acusar", true) == 0) {
	    new string[256];
	    if(Acusar[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você deve ver algo acontecer para acusar alguém!");
        if(Profissao[PlayerKiller[playerid]] == COP_MILITAR || Profissao[PlayerKiller[playerid]] == COP_SWAT || Profissao[PlayerKiller[playerid]] == DELEGADO){
			SendDeathMessage(PlayerKiller[playerid],PlayerDeath[playerid],Reason[playerid]);
			new rand = random(7);
			if(rand == 0){
   				SendClientMessageToAll(COLOR_WHITE," ");
			    SendClientMessageToAll(COLOR_ROSA,"New Paper's Life:");
				format(string,sizeof(string),"[JORNAL] Ação Policial!! %s viu o tiroteio entre %s e %s e que %s acabou se dando bem, decidiu avisar aos jornalistas.",PlayerName(playerid),PlayerName(PlayerKiller[playerid]),PlayerName(PlayerDeath[playerid]));
  				SendClientMessageToAll(COLOR_YELLOW,string);
	  		}
		  	if(rand == 1){
	  			SendClientMessageToAll(COLOR_WHITE," ");
				format(string,sizeof(string),"Anh? Eficácia Policial? %s ficou em dúvida ao ver o Oficial Sr: %s matar %s. O Juiz poderá explicar.",PlayerName(playerid),PlayerName(PlayerKiller[playerid]),PlayerName(PlayerDeath[playerid]));
  				SendClientMessageToAll(0xFFB4F4AA,string);
			}
  			if(rand == 2){
	  			SendClientMessageToAll(COLOR_WHITE," ");
				format(string,sizeof(string),"NÃO DEU TEMPO! %s viu as balas que o Oficial Sr: %s cravou em %s. Seria Necessário?",PlayerName(playerid),PlayerName(PlayerKiller[playerid]),PlayerName(PlayerDeath[playerid]));
  				SendClientMessageToAll(0xFFB4F4AA,string);
			}
  			if(rand == 3){
	  			SendClientMessageToAll(COLOR_WHITE," ");
			 	format(string,sizeof(string),"%s não queria ver mais viu a cabeça de %s sendo estraçalhada pelo Oficial Sr: %s.",PlayerName(playerid),PlayerName(PlayerDeath[playerid]),PlayerName(PlayerKiller[playerid]));
	  			SendClientMessageToAll(0xFFB4F4AA,string);
			}
  			if(rand == 4){
	  			SendClientMessageToAll(COLOR_WHITE," ");
				format(string,sizeof(string),"Se é que podemos chamar de Sr! %s viu o que o Oficial Sr: %s fez com %s.",PlayerName(playerid),PlayerName(PlayerKiller[playerid]),PlayerName(PlayerDeath[playerid]));
  				SendClientMessageToAll(0xFFB4F4AA,string);
			}
			if(rand == 5){
		  		SendClientMessageToAll(COLOR_WHITE," ");
				format(string,sizeof(string),"Acho que %s não quer nem pensar se fosse com ele. Pois viu o Oficial Sr: %s mandar bala em %s.",PlayerName(playerid),PlayerName(PlayerKiller[playerid]),PlayerName(PlayerDeath[playerid]));
		  		SendClientMessageToAll(0xFFB4F4AA,string);
			}
			if(rand == 6){
 				SendClientMessageToAll(COLOR_WHITE," ");
				format(string,sizeof(string),"\"Uiiiiiii\" Foi o gritinho de %s quando viu o corpo de %s no chão, alvo do Oficial Sr: %s.",PlayerName(playerid),PlayerName(playerid),PlayerName(PlayerKiller[playerid]));
  				SendClientMessageToAll(0xFFB4F4AA,string);
			}
			if(rand == 7){
 				SendClientMessageToAll(COLOR_WHITE," ");
				format(string,sizeof(string),"\"PUT* QUE PARIU, LOCO\" %s está se tremendo até agora pois viu %s sendo atingido pelo Oficial Sr: %s",PlayerName(playerid),PlayerName(PlayerDeath[playerid]),PlayerName(PlayerKiller[playerid]));
  				SendClientMessageToAll(0xFFB4F4AA,string);
			}
	 	} else {
			SendDeathMessage(PlayerKiller[playerid],PlayerDeath[playerid],Reason[playerid]);
			new rand = random(8);
			if(rand == 0){
   				SendClientMessageToAll(COLOR_ROSA,"New Paper's Life:");
				format(string,sizeof(string),"[JORNAL] HOMICÍDIO!! %s viu o crime que %s realizou contra %s e decidiu avisar aos jornalistas.",PlayerName(playerid),PlayerName(PlayerKiller[playerid]),PlayerName(PlayerDeath[playerid]));
			    SendClientMessageToAll(COLOR_YELLOW,string);
			}
			if(rand == 1){
 				SendClientMessageToAll(COLOR_WHITE," ");
				format(string,sizeof(string),"\"PORR* QUE ISSO!!!!\" %s viu o assassinato de %s pela roupa ele identifica que seja %s.",PlayerName(playerid),PlayerName(PlayerDeath[playerid]),PlayerName(PlayerKiller[playerid]));
  				SendClientMessageToAll(0xFFB4F4AA,string);
			}
			if(rand == 2){
 				SendClientMessageToAll(COLOR_WHITE," ");
				format(string,sizeof(string),"\"ELE MORREU\" %s saiu gritando pelas ruas de Los Santos quando viu o assassinato de %s pela roupa ele identifica que seja %s.",PlayerName(playerid),PlayerName(PlayerDeath[playerid]),PlayerName(PlayerKiller[playerid]));
  				SendClientMessageToAll(0xFFB4F4AA,string);
			}
			if(rand == 3){
 				SendClientMessageToAll(COLOR_WHITE," ");
				format(string,sizeof(string),"OMG! OMG²! OMG³! BRUTALIDADE TOTAL! %s assassinou %s, mais %s viu tudo!",PlayerName(PlayerKiller[playerid]),PlayerName(PlayerDeath[playerid]),PlayerName(playerid));
  				SendClientMessageToAll(0xFFB4F4AA,string);
			}
			if(rand == 4){
 				SendClientMessageToAll(COLOR_WHITE," ");
				format(string,sizeof(string),"Salve-se quem puder! %s é um monstro relata %s quando viu o crime que ele cometera contra %s.",PlayerName(PlayerKiller[playerid]),PlayerName(playerid),PlayerName(PlayerDeath[playerid]));
  				SendClientMessageToAll(0xFFB4F4AA,string);
			}
			if(rand == 5){
		 		SendClientMessageToAll(COLOR_WHITE," ");
				format(string,sizeof(string),"\"Fique com o troco seu miserável!\" foi a frase que %s ouviu de %s quando matou %s.",PlayerName(playerid),PlayerName(PlayerKiller[playerid]),PlayerName(PlayerDeath[playerid]));
  				SendClientMessageToAll(0xFFB4F4AA,string);
			}
			if(rand == 6){
 				SendClientMessageToAll(COLOR_WHITE," ");
				format(string,sizeof(string),"\"Dá próxima vez...Aliás não terá próxima vez. BUM!\" foi a frase que %s disse a %s mais %s ouviu.",PlayerName(PlayerKiller[playerid]),PlayerName(PlayerDeath[playerid]),PlayerName(playerid));
  				SendClientMessageToAll(0xFFB4F4AA,string);
			}
		}
		Acusar[playerid] = 0;
		return 1;
	}
	if(strcmp(cmd, "/naoacusar", true) == 0) {
	    if(Acusar[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você deve ver algo acontecer para acusar alguém!");
		Acusar[playerid] = 0;
		SendClientMessage(playerid, COLOR_WHITE, "OK, isso ficará entre você!");
		return 1;
	}
	if(strcmp(cmd, "/aceitar", true) == 0) {
        new tmp[256];
		tmp = strtok(cmdtext, idx);
		switch (invitestatus[playerid]){
			case INVITE_NONE :
			{
				SendClientMessage(playerid, COLOR_GRAY, "Nenhuma proposta foi oferecida à você");
				return 1;
			}
			case INVITE_FIANCA :
			{
				AddPlayerMoney(playerid, 0 - dinheirofianca[playerid], -1);
				AddPlayerMoney(envconvite[playerid],dinheirofianca[playerid], 3);
				SendClientMessage(playerid, COLOR_ADVOGADO, "Proposta aceita");
				SendClientMessage(envconvite[playerid], COLOR_ADVOGADO, "Sua proposta foi aceita");
				invitestatus[playerid] = INVITE_NONE;
				Presos[playerid] = 0;
				pStats[playerid][Preso] = 0;
				CelularBloqueado[playerid] = 0;
			    LogarPlayer(playerid);
			    AcrescentarExPoints(envconvite[playerid],1);
			    return 1;
			}
			case INVITE_CASA :
			{
			    if(JogadorContratado(envconvite[playerid],15)) AcrescentarLucro(15,Porcentagem(ivalorcasa[playerid],60));
			    if(pStats[playerid][Casa] == 1) VenderCasa(playerid);
		        new File:temp;
		        new string[256];
		        RemovePlayerForHotel(playerid);
				pStats[playerid][SpawnPosX] = iX[playerid];
				pStats[playerid][SpawnPosY] = iY[playerid];
				pStats[playerid][SpawnPosZ] = iZ[playerid];
				pStats[playerid][SpawnPosAng] = iang[playerid];
			    AddPlayerMoney(playerid,-ivalorcasa[playerid],-1);
			    AddPlayerMoney(envconvite[playerid],ivalorcasa[playerid]/10,3);
			    pStats[playerid][ValorCasa] = ivalorcasa[playerid];
			    pStats[playerid][Casa] = 1;
			    SendClientMessage(envconvite[playerid], COLOR_GREEN, "O jogador aceitou a casa e você recebeu 10 por cento do valor.");
			    SendClientMessage(playerid, COLOR_WHITE, "Assegure seu imóvel pedindo para um segurador, assim se vender será recompensado.");
				if(playerid != envconvite[playerid]) AcrescentarExPoints(envconvite[playerid],1);
			    CreatePickup(1272,1,iX[playerid],iY[playerid],iZ[playerid]);
			    new pickupcasa = LastCasa;
			    LastCasa++;
			    pStats[playerid][PickupCasa] = pickupcasa;
			    format(string,sizeof(string),"VL%d",pickupcasa);
				new File:pickupfile = fopen(PickupFile(pickupcasa),io_write);
				fclose(pickupfile);
				pckStats[pickupcasa][Trancada] = 0;
				pckStats[pickupcasa][ContaLuz] = 0;
				pckStats[pickupcasa][TV] = 0;
				pckStats[pickupcasa][Radio] = 0;
				pckStats[pickupcasa][Geladeira] = 0;
				pckStats[pickupcasa][Fogao] = 0;
				pckStats[pickupcasa][MaconhaCofre] = 0;
				pckStats[pickupcasa][HeroinaCofre] = 0;
				pckStats[pickupcasa][CocainaCofre] = 0;
				pckStats[pickupcasa][DinheiroCofre] = 0;
				pckStats[pickupcasa][pX] = iX[playerid];
				pckStats[pickupcasa][pY] = iY[playerid];
				pckStats[pickupcasa][pZ] = iZ[playerid];
				set(pckStats[pickupcasa][PickupDono],PlayerName(playerid));
				set(pckStats[pickupcasa][Chave],PlayerName(playerid));
				set(pckStats[pickupcasa][SenhaCofre],string);
				switch(ivalorcasa[playerid])
				{
				    case 5000: pckStats[pickupcasa][Int] = 0;
				    case 10000: pckStats[pickupcasa][Int] = 1;
				    case 20000: pckStats[pickupcasa][Int] = 2;
				    case 40000: pckStats[pickupcasa][Int] = 3;
				    case 60000: pckStats[pickupcasa][Int] = 4;
				    case 80000: pckStats[pickupcasa][Int] = 5;
				    case 100000: pckStats[pickupcasa][Int] = 6;
				    case 200000: pckStats[pickupcasa][Int] = 7;
				    default: pckStats[pickupcasa][Int] = 0;
				}
				format(string,sizeof(string),"A senha do seu cofre no momento é VL%d mas você pode troca-la com /registrarcofre [senha]",pickupcasa);
				SendClientMessage(playerid, COLOR_WHITE, string);
			    format(string, sizeof(string), "%s te setou uma casa, digite /venderminhacasa para vende-la e ganhar um reembolso.", PlayerName(envconvite[playerid]));
			    SendClientMessage(playerid, COLOR_GREEN, string);
				format(string, sizeof(string), "%f %f %f // %s | vendedor=%s \r\n", iX[playerid], iY[playerid], iZ[playerid], PlayerName(playerid), PlayerName(envconvite[playerid]));
				temp = fopen("Utilidades/virtualliferpg.cas", io_append);
    			fwrite(temp, string);
       			fclose(temp);
				invitestatus[playerid] = INVITE_NONE;
				return 1;
			}
			case INVITE_CARRO :
			{
			    new string[256];
              	format(string, sizeof(string), "Você vendeu um veículo [ Nome: %s ] para %s, dentro de 10 segundos o carro aparecerá.",GetVehicleName(icarid[playerid]-400), PlayerName(playerid));
               	SendClientMessage(envconvite[playerid], COLOR_COP_SWAT, string);
               	format(string, sizeof(string), "%s te vendeu um veículo [ Nome: %s ].", PlayerName(envconvite[playerid]),GetVehicleName(icarid[playerid]));
				SendClientMessage(playerid, COLOR_GREEN, string);
				SendClientMessage(playerid, COLOR_WHITE, "Para pagar o vendedor use: /pagar [id] [quantidade]");
				if(playerid != envconvite[playerid]) AcrescentarExPoints(envconvite[playerid],1);
   	            new File:temp;
				format(string, sizeof(string), "%d %f %f %f %f %d %d //Setado por: %s\r\n", icarid[playerid], iX[playerid], iY[playerid], iZ[playerid], iang[playerid], icor1[playerid],icor2[playerid], PlayerName(envconvite[playerid]));
				temp = fopen("Utilidades/carrosrpg.rpg", io_append);
	   	        fwrite(temp, string);
        	    fclose(temp);
               	LastCar++;
				SetTimerEx("SetCar",10000,0,"dffffddd",icarid[playerid],iX[playerid],iY[playerid],iZ[playerid],iang[playerid],icor1[playerid],icor2[playerid],playerid);
				printf("O jogador %s setou um veiculo (id: %d) para %s.", PlayerName(envconvite[playerid]),icarid[playerid],PlayerName(playerid));
                invitestatus[playerid] = INVITE_NONE;
				return 1;
			}
			case INVITE_SOCIO :
			{
			    NomearSocio(playerid,PropriedadeNomeacao[playerid]);
				new string[256];
				format(string,sizeof(string),"[PROPRIEDADES] \"EU TE AMO\"! Foi o que %s disse para %s depois de ser nomeado sócio da(o) %s",PlayerName(playerid),PlayerName(JogadorNomeacao[playerid]),NomesPropriedades[PropriedadeNomeacao[playerid]]);
				SendClientMessageToAll(COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_WHITE, "Parabéns, agora você é um sócio, merece mais respeito e dignidade SENHOR! xD");
				SendClientMessage(playerid, COLOR_WHITE, "Mas também não fique tão agitado, você terá que trabalhar muito bem para fazer lucro");
				invitestatus[playerid] = NONE;
				PropriedadeNomeacao[playerid] = -1;
				JogadorNomeacao[playerid] = -1;
				return 1;
			}
			case INVITE_CONTRATO :
	    	{
				if(IsStringAName(propStats[PropriedadeContrato[playerid]][Dono1])){
					new playa = IDName(propStats[PropriedadeContrato[playerid]][Dono1]);
					new string[256];
					format(string,sizeof(string),"%s agora trabalha para a sua propriedade!",PlayerName(playerid));
					SendClientMessage(playa, COLOR_GREEN, string);
					format(string,sizeof(string),"[PROPRIEDADES] %s é o mais jovem contratado da %s. Disfrute do seu trabalho",PlayerName(playerid),NomesPropriedades[PropriedadeContrato[playerid]]);
					SendClientMessageToAll(COLOR_TRANSPORTE_DE_VALORES, string);
				}
				ContratarJogador(playerid, PropriedadeContrato[playerid]);
				SendClientMessage(playerid, COLOR_GREEN, "Parabéns, agora você tem que trabalhar muito bem, para conseguir um aumento!");
				invitestatus[playerid] = INVITE_NONE;
				PropriedadeContrato[playerid] = -1;
				return 1;
	   		}
	   		case INVITE_CONTRATO_SEGURANCA :
	   		{
	   		    if(!IsPlayerConnected(Scontratador[playerid])){
	   		        SendClientMessage(playerid, COLOR_GRAY, "O jogador se desconectou do servidor...");
	   		        return 1;
				}
				AcrescentarExPoints(playerid,2);
				SendClientMessage(Scontratador[playerid], COLOR_SEGURANÇA, "[CHEFE] Contrato Fechado! Meus Parabéns.");
				SendClientMessage(playerid, COLOR_SEGURANÇA, "Agora você tem um novo chefe.");
				new QtSegurancas;
				new JaContratado2;
				QtSegurancas = pStats[Scontratador[playerid]][NSegurancas];
				for(new i=0; i<QtSegurancas; i++){
					if(strcmp(GetSegurancas[Scontratador[playerid]][i],"NONE",true) == 0){
					    if(JaContratado2 == 0){
					        pStats[playerid][JaContratado] = 1;
							set(GetSegurancas[Scontratador[playerid]][i],PlayerName(playerid));
							GetSegurancasValor[Scontratador[playerid]][i] = Svaloroferecido[playerid];
					    	JaContratado2 = 1;
						}
					}
				}
				if(JaContratado2 == 0){
				    set(GetSegurancas[Scontratador[playerid]][QtSegurancas+1],PlayerName(playerid));
					GetSegurancasValor[Scontratador[playerid]][QtSegurancas+1] = Svaloroferecido[playerid];
			    	JaContratado2 = 1;
				}
				return 1;
			}
			case INVITE_HABTERRESTRE :
			{
			    new string[256];
				SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO ESCOLA] Seu teste iniciará em 10 segundos.");
				format(string, sizeof(string), "[AUTO ESCOLA] O teste terrestre com %s irá começar em 10 segundos.", PlayerName(playerid));
				SendClientMessage(envconvite[playerid],COLOR_INSTRUTOR, string);
				SetTimerEx("IniciarTesteLeis",10000,0,"dd",envconvite[playerid],playerid);
                invitestatus[playerid] = INVITE_NONE;
				return 1;
			}
   		}
	}
    if(strcmp(cmd, "/recusar", true) == 0) {
	    new tmp[256];
	    tmp = strtok(cmdtext, idx);
	    switch (invitestatus[playerid]){
			case INVITE_NONE :
			{
				SendClientMessage(playerid, COLOR_GRAY, "Nenhuma proposta foi oferecida à você");
                return 1;
			}
			case INVITE_FIANCA :
			{
				SendClientMessage(playerid, COLOR_ADVOGADO, "Proposta de fiança recusada, você vai ficar por aqui mesmo!");
				SendClientMessage(envconvite[playerid], COLOR_ADVOGADO, "A proposta foi recusada!");
				invitestatus[playerid] = INVITE_NONE;
				return 1;
			}
			case INVITE_CASA :
			{
				SendClientMessage(playerid, COLOR_ADVOGADO, "Casa recusada");
				SendClientMessage(envconvite[playerid], COLOR_ADVOGADO, "Essa casa foi recusada. Talvez outra sirva para esse jogador!");
				invitestatus[playerid] = INVITE_NONE;
				return 1;
			}
			case INVITE_CARRO :
			{
				SendClientMessage(playerid, COLOR_ADVOGADO, "Carro recusado");
				SendClientMessage(envconvite[playerid], COLOR_ADVOGADO, "Seu carro foi recusado. Talvez o jogador queira outro modelo");
				invitestatus[playerid] = INVITE_NONE;
				return 1;
			}
			case INVITE_SOCIO :
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Oferta recusada! Lembre-se amigo, uma oferta dessas só vem 1 vez a cada 2 vidas =X");
			    invitestatus[playerid] = NONE;
				PropriedadeNomeacao[playerid] = -1;
				JogadorNomeacao[playerid] = -1;
			}
			case INVITE_CONTRATO :
       		{
				if(IsStringAName(propStats[PropriedadeContrato[playerid]][Dono1])){
					new playa = IDName(propStats[PropriedadeContrato[playerid]][Dono1]);
					new string[256];
					format(string,sizeof(string),"%s recusou o contrato!",PlayerName(playerid));
					SendClientMessage(playa, COLOR_GRAY, string);
				}
				SendClientMessage(playerid, COLOR_GREEN, "Contrato recusado!");
				invitestatus[playerid] = INVITE_NONE;
				PropriedadeContrato[playerid] = -1;
				return 1;
	  		}
	  		case INVITE_CONTRATO_SEGURANCA :
	  		{
	  		    invitestatus[playerid] = INVITE_NONE;
	  		    SendClientMessage(Scontratador[playerid], COLOR_GRAY, "O contrato foi recusado!");
				SendClientMessage(playerid, COLOR_GREEN, "Contrato recusado!");
				return 1;
			}
			case INVITE_HABTERRESTRE :
			{
				SendClientMessage(playerid, COLOR_ADVOGADO, "[AUTO ESCOLA] Obrigado senhor, quando quiser dispor contate-nos.");
				SendClientMessage(envconvite[playerid], COLOR_ADVOGADO, "[AUTO ESCOLA] A proposta foi recusada!");
				invitestatus[playerid] = INVITE_NONE;
				return 1;
			}
		}
	}
	if(strcmp(cmd, "/venderveiculo",true) == 0) {
		new vehid = strval ( strtok ( cmdtext, idx ) ) , preco , string[256];
		if(pStats[playerid][LastVeh] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhum veículo, como poderá vender?");
		    return 1;
		}
		if(vehid == 0 || vehid >= pStats[playerid][LastVeh]){
		    SendClientMessage(playerid, COLOR_GRAY, "USO: /venderveiculo [ID/do/veículo] [valor]");
			format(string,sizeof(string),"ID de 1 até %d",pStats[playerid][LastVeh]);
			SendClientMessage(playerid, COLOR_GRAY, string);
			return 1;
		}
		if(GetVehicles[playerid][vehid] == -1){
		    SendClientMessage(playerid, COLOR_GRAY, "Você não tem mais um veículo desse ID...");
		    return 1;
		}
		preco = strval ( strtok ( cmdtext, idx ) );
		if(preco <= 0 || preco > MAX_VEHICLE_VALUE){
			format(string,sizeof(string),"Valor inválido: valores de $1,00 até $%d,00",MAX_VEHICLE_VALUE);
		    SendClientMessage(playerid, COLOR_GRAY, string);
		    return 1;
		}
		new veh = GetVehicles[playerid][vehid];
		if(vStats[veh][Vendendo] == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse veículo já está a venda!");
		    return 1;
		}
		SendClientMessage(playerid, COLOR_JUIZ, "Veículo colocado a venda!");
		vStats[veh][Vendendo] = 1;
		vStats[veh][PrecoVenda] = preco;
		format(string,sizeof(string),"%s colocou seu veículo de ID %d a venda, Modelo: %s | Preço: $%d,00 dólares",PlayerName(playerid),vehid,GetVehicleName(GetVehicleModel(veh)),preco);
		SendClientMessageToAll(COLOR_WHITE, string);
		SendClientMessageToAll(COLOR_WHITE, "Para compra-lo use /comprarveiculo [id] [id do veículo]");
		return 1;
	}
	if(strcmp(cmd, "/comprarveiculo", true) == 0) {
	    new tmp[256], plid, carid, string[256];
	    tmp = strtok(cmdtext,idx);
	    plid = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /comprarveiculo [id] [id do veículo]");
        tmp = strtok(cmdtext,idx);
	    carid = strval(tmp);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAY, "USO: /comprarveiculo [id] [id do veículo]");
		if(!IsPlayerConnected(plid)){
		    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		    return 1;
		}
		if(GetVehicles[plid][carid] == -1){
		    SendClientMessage(playerid, COLOR_GRAY, "Veículo inexistente!");
		    return 1;
		}
		new veh = GetVehicles[plid][carid];
		if(vStats[veh][Vendendo] == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "Esse veículo não está a venda!");
		    return 1;
		}
		if(GetPlayerMoney(playerid) < vStats[veh][PrecoVenda]){
		    format(string,sizeof(string),"Você não tem dinheiro, CUSTO: $%d,00 dólares",vStats[veh][PrecoVenda]);
		    SendClientMessage(playerid, COLOR_GRAY, string);
		    return 1;
		}
		format(string,sizeof(string),"[NOTICIAS] %s decidiu fechar negócio com %s, agora ele é o novo proprietário do veículo!",PlayerName(playerid),PlayerName(plid));
		SendClientMessageToAll(COLOR_WHITE, string);
		AddPlayerMoney(playerid,-vStats[veh][PrecoVenda],-1);
		pStats[plid][Banco] += vStats[veh][PrecoVenda];
		vStats[veh][Vendendo] = 0;
		vStats[veh][PrecoVenda] = 0;
		MudarDono(veh,carid,plid,playerid);
		SendClientMessage(playerid, COLOR_WHITE, "Veículo adquirido!");
		if(compare(vStats[veh][VChave],PlayerName(plid))){
		    SendClientMessage(playerid, COLOR_WHITE, "A chave do veículo foi entregue a você!");
			set(vStats[veh][VChave],PlayerName(playerid));
		}
		else{
            SendClientMessage(playerid, COLOR_WHITE, "Esse jogador não está com a chave do veículo portanto você não conseguiu ela...");
		}
		return 1;
	}
	if(strcmp(cmd, "/setvalue", true) == 0 && IsPlayerAdmin(playerid)){
	    new key[256],value[256];
	    key = strtok(cmdtext,idx);
	    value = strtok(cmdtext,idx);
		if(!strlen(key) || !strlen(value)) return SendClientMessage(playerid, COLOR_RED, "USO: /setvalue [key] [valor]");
		SetValue(PlayerFile(PlayerName(playerid)),key,value);
		SendClientMessage(playerid, COLOR_JUIZ, "Feito...");
		return 1;
	}
	if(strcmp(cmd, "/getvalue", true) == 0 && IsPlayerAdmin(playerid)){
	    new key[256],string[256];
	    key = strtok(cmdtext,idx);
		format(string,sizeof(string),"%s=%s",key,GetValue(PlayerFile(PlayerName(playerid)),key));
		SendClientMessage(playerid, COLOR_JUIZ, string);
		return 1;
	}
	if(strcmp(cmd, "/debuginflacao",true) == 0 && IsPlayerAdmin(playerid)) return DebugInflacao();
	if(strcmp(cmd, "/debugpickups", true) == 0 && IsPlayerAdmin(playerid)) return DebugPickups();
	if(strcmp(cmd, "/anunciaralugueis", true) == 0 && IsPlayerAdmin(playerid)) return AnunciarAlugueis();
	if(strcmp(cmd, "/anunciarvendas", true) == 0 && IsPlayerAdmin(playerid)) return AnunciarVendas();
	if(strcmp(cmd, "/anunciarprocurados", true) == 0 && IsPlayerAdmin(playerid)) return AnunciarProcurados();
	if(strcmp(cmd, "/setcar", true) == 0) {
		if(Profissao[playerid] == VENDEDOR_DE_CARROS || IsPlayerAdmin(playerid)){
			new tmp[256];
			new carid, plid, cor1, cor2;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){
				SendClientMessage(playerid, COLOR_RED2, "ID fora do normal | ID's = 400-611");
				return 1;
			}
		    carid = strval(tmp);
    	    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_RED2, "/setcar [modelo] [ID/Nome do comprador] [cor1] [cor2]");
				return 1;
			}
			if(IsStringAName(tmp)){
				plid = IDName(tmp);
			}
			else{
				plid = strval(tmp);
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_RED2, "/setcar [modelo] [ID/Nome do comprador] [cor1] [cor2]");
				return 1;
			}
			cor1 = strval(tmp);
    	    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_RED2, "/setcar [modelo] [ID/Nome do comprador] [cor1] [cor2]");
				return 1;
			}
			cor2 = strval(tmp);
            if(pStats[plid][LastVeh] >= MAX_PLAYER_VEHICLES){
				SendClientMessage(playerid, COLOR_GRAY, "Limite de veículos por jogador excedido pelo gamemode.");
            	return 1;
			}
			if(carid >= 400 && carid <= 611){
			    if(IsPlayerInAnyVehicle(playerid)){
			        if(IsPlayerConnected(plid)){
				        new Float:X,Float:Y,Float:Z,Float:ang;
				       	SendClientMessage(playerid, COLOR_GREEN, "Foi enviado ao outro jogador um convite para ver se ele aceita o carro.");
				       	GetVehiclePos(GetPlayerVehicleID(playerid),X,Y,Z);
				       	GetVehicleZAngle(GetPlayerVehicleID(playerid),ang);
				       	envconvite[plid] = playerid;
				       	invitestatus[plid] = INVITE_CARRO;
				       	icarid[plid] = carid;
				       	icor1[plid] = cor1;
				       	icor2[plid] = cor2;
						iX[plid] = X;
						iY[plid] = Y;
						iZ[plid] = Z;
						iang[plid] = ang;
				       	new string[256];
				       	format(string,sizeof(string),"O Vendedor de Carros %s está lhe oferecendo um(a) %s.",PlayerName(playerid),GetVehicleName(icarid[plid]));
				       	SendClientMessage(plid, COLOR_VENDEDOR_DE_CARROS,string);
				       	SendClientMessage(plid, COLOR_CORRETOR, "Para aceitar digite /aceitar para recusar digite /recusar.");
				    	SetTimerEx("Cancelar",60000,0,"d",plid);
						return 1;
					} else {
					   	SendClientMessage(playerid, COLOR_RED2, "Jogador não conectado.");
						return 1;
					}
				} else {
				    SendClientMessage(playerid, COLOR_RED2, "Você precisa estar em um veiculo para vender.");
					return 1;
				}
			} else {
				SendClientMessage(playerid, COLOR_RED2, "ID fora do normal | ID's = 400-611");
				return 1;
			}
		}
		if(Profissao[playerid] != VENDEDOR_DE_CARROS && !IsPlayerAdmin(playerid)){
			SendClientMessage(playerid, COLOR_RED2, "Você não é Vendedor de Carros e Skins");
			return 1;
		}
	}
	SendClientMessage(playerid,COLOR_GRAY,"[INFO] Comando inexistente.");
	return 1;
}



public OnPlayerInfoChange(playerid)
{
	printf("OnPlayerInfoChange(%d)");
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(DesarmandoAsDrogas[playerid] == 1){
		DesarmandoAsDrogas[playerid] = 0;
		VCamuflado[playerid] = 0;
		KillTimer(TempoDesarme[playerid]);
		SendClientMessage(playerid, COLOR_GRAY, "O desarme foi cancelado pois você saiu do veículo!");
		return 1;
	}
	if(PlantandoDrogas[playerid] == 1){
		PlantandoDrogas[playerid] = 0;
		KillTimer(TempoPlantacao[playerid]);
		TogglePlayerControllable(playerid,1);
		SendClientMessage(playerid, COLOR_GRAY, "Sua plantação de drogas foi cancelada pois você saiu do veículo!");
		return 1;
	}
	printf("OnPlayerExitVehicle(%d, %d)", playerid, vehicleid);
	return 1;
}

public DestroyText(playerid){
	TextDrawDestroy(TextMessage[playerid]);
	TextoEnviado[playerid] = 0;
}

stock PlacaExiste(placa[])
{
	for(new v = 0; v < MAX_VEHICLES; v++){
	    if(fexist(VehicleFile(v))){
	        if(compare(vStats[v][VPlaca],placa)){
	            return 1;
			}
		}
		else break;
	}
	return 0;
}
public Radar(){
	new exesso, desconto, velocidade;
    new string[256],stringcat[256];
	for (new i=0, Float:X, Float:Y, Float:Z; i < SLOTS2; i++){
	    GetPlayerPos(i, X, Y, Z);
	    if((X >= 1952.4786 && X <= 1967.2168 && Y >= -1937.4336 && Y <= -1926.1168 && Z >= 10.0000 && Z <= 20.000) || (X >= 2021.4937 && X <= 2030.3973 && Y >= -2171.7832 && Y <= -2161.9014 && Z >= 10.0000 && Z <= 20.000)
		|| (X >= 1916.8148 && X <= 1929.6781 && Y >= -1757.1136 && Y <= -1747.4180 && Z >= 10.0000 && Z <= 20.000) || (X >= 2351.7727 && X <= 2361.2385 && Y >= -1737.6139 && Y <= -1727.9680 && Z >= 10.0000 && Z <= 20.000)
		|| (X >= 2281.1777 && X <= 2292.9626 && Y >= -1154.5660 && Y <= -1144.9240 && Z >= 20.0000 && Z <= 30.000) || (X >= 2870.8555 && X <= 2931.6975 && Y >= -1479.0033 && Y <= -1445.4790 && Z >= 5.0000 && Z <= 20.000)
		|| (X >= 1509.3618 && X <= 1502.6920 && Y >= -1727.6062 && Y <= -1737.0968 && Z >= 8.0000 && Z <= 20.000) || (X >= 1097.0355 && X <= 1107.5239 && Y >= -1410.4645 && Y <= -1391.1556 && Z >= 5.0000 && Z <= 20.000)
		|| (X >= 1178.4174 && X <= 1188.1575 && Y >= -1285.6506 && Y <= -1275.9550 && Z >= 8.0000 && Z <= 20.000) || (X >= 1105.4432 && X <= 1117.0774 && Y >= -1153.6390 && Y <= -1136.2310 && Z >= 15.0000 && Z <= 30.000)
		|| (X >= 1214.8883 && X <= 1227.3815 && Y >= -948.5304 && Y <= -927.7966 && Z >= 35.0000 &&  Z <= 50.000)){
        	velocidade = Velocidade[i];
      	    exesso = velocidade - 100;
 			desconto = exesso*2 / 3;
 			format(string,sizeof(string),"[RADAR] Veículo à %d KM/H | Modelo: %s | Dono: %s | Placa: %s",velocidade,GetVehicleName(GetVehicleModel(GetPlayerVehicleID(i))),vStats[GetPlayerVehicleID(i)][VDono],vStats[GetPlayerVehicleID(i)][VPlaca]);
			if(Camuflado[i] == 0 && VCamuflado[i] == 0){
				format(stringcat,sizeof(stringcat)," | Principal suspeito: %s",PlayerName(i));
			}
			else{
			    format(stringcat,sizeof(stringcat)," | Suspeito desconhecido");
			}
			strcat(string,stringcat);
		    if(IsPlayerConnected(i) && Logado[i] && velocidade > 120 && GetPlayerState(i) == PLAYER_STATE_DRIVER && !IsPlayerInBike(i) && !IsPlayerInVehicleAir(i)){
		        if(ZeraMulta[i] == 0){
		            if(FazendoTesteRua[i] == 1){
     					new plid = InstrutorRua[i];
						format(string, sizeof(string), "[TESTE] Sr. %s, você levou uma multa por passar no radar acima da velocidade permitida...", PlayerName(i));
						SendPlayerMessageToPlayer(plid, i, string);
    					format(string, sizeof(string), "[TESTE] Sr. %s, você levou uma multa por passar no radar acima da velocidade permitida...", PlayerName(i));
						SendPlayerMessageToPlayer(plid, plid, string);
						SendClientMessagePolicia(COLOR_COP_SWAT,string);
						if(Chance[i] >= 1){
							Chance[i] = Chance[i] - 1;
							format(string, sizeof(string), "[TESTE] Sr. %s, seu teste será refeito. CHANCE: %d/3.", PlayerName(i), Chance[i]);
							SendPlayerMessageToPlayer(plid, plid, string);
							format(string, sizeof(string), "[TESTE] Sr. %s, seu teste será refeito. CHANCE: %d/3.", PlayerName(i), Chance[i]);
							SendPlayerMessageToPlayer(plid, i, string);
							InstrutorRua[i] = plid;
   							SetVehicleToRespawn(GetPlayerVehicleID(i));
							SetTimerEx("AvancoRua",5000,0,"dd",plid,i);
						} else {
							SendClientMessage(i, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Seu teste foi CANCELADO, você perdeu todas as chances, terá que refazer tudo novamemnte.");
							format(string, sizeof(string), "[AUTO-ESCOLA] O aprendiz %s perdeu todas as chances e seu teste foi cancelado!", PlayerName(i));
							SendClientMessage(plid,COLOR_INSTRUTOR, string);
							Chance[i] = 0;
	    					SetVehicleToRespawn(GetPlayerVehicleID(i));
	    					TrancarVeiculo(i,CarroAuto);
							TrancarVeiculo(i,CarroAuto2);
							TrancarVeiculo(i,CarroAuto3);
							TrancarVeiculo(i,CarroAuto4);
							TrancarVeiculo(i,CarroAuto5);
							TrancarVeiculo(i,CarroAuto6);
						}
		            }
	    			if(Profissao[i] == COP_MILITAR || Profissao[i] == EXERCITO || Profissao[i] == COP_RODOVIARIO || Profissao[i] == COP_SWAT || Profissao[i] == COP_NARCOTICOS || Profissao[i] == DELEGADO){
						SendClientMessage(i, COLOR_GRAY, "O Radar lhe multou, entretanto você trabalha para a polícia o departamento arcará com as despesas.");
                        SendClientMessagePolicia(COLOR_COP_SWAT,string);
					} else {
					    SendClientMessagePolicia(COLOR_COP_SWAT,string);
				    	if(compare(vStats[GetPlayerVehicleID(i)][VDono],"Servidor")){
				        	format(string, sizeof(string), "Você passou no radar à %d KM/H, esse é um veículo público portanto a multa foi paga pelo governo/servidor!", velocidade);
							SendClientMessage(i, COLOR_GRAY, string);
							format(string, sizeof(string), "[INFO] %s passou no radar à %d KM/H e foi multado, o governo/servidor cobriu a multa por ser um veículo que pertence a ele",PlayerName(i), velocidade);
							SendClientMessageAdmin(COLOR_LIGHT_YELLOW, string);
							print(string);
							writelog(string);
							ZeraMulta[i] = 1;
							PlayerPlaySound(i, 1132, 0.0, 0.0, 0.0);
							SetTimerEx("CancelarMulta",5000,0,"d",i);
						}
					    else{
							format(string, sizeof(string), "Você passou no radar à %d KM/H, e levou uma multa de $%d por estar acima da velocidade permitida!", velocidade, desconto);
							SendClientMessage(i, COLOR_GRAY, string);
							SendClientMessage(i, COLOR_GRAY, "Para paga-la vá até a Delegacia!");
							vStats[GetPlayerVehicleID(i)][Dividas] += desconto;
							ZeraMulta[i] = 1;
							PlayerPlaySound(i, 1132, 0.0, 0.0, 0.0);
							SetTimerEx("CancelarMulta",5000,0,"d",i);
						}
					}
				}
			}
  			if(velocidade <= 120 && GetPlayerState(i) == PLAYER_STATE_DRIVER && !IsPlayerInBike(i) && !IsPlayerInVehicleAir(i)){
			    if(ZeraMulta[i] == 0){
			        SendClientMessagePolicia(COLOR_COP_SWAT,string);
					PlayerPlaySound(i, 1132, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "Você passou no radar à %d KM/H.", velocidade);
					SendClientMessage(i, COLOR_LIGHT_YELLOW, string);
					ZeraMulta[i] = 1;
					SetTimerEx("CancelarMulta",5000,0,"d",i);
				}
			}
		}
  	}
}
public CancelarMulta(playerid) ZeraMulta[playerid] = 0;
public SetCar(modelid,Float:X,Float:Y,Float:Z,Float:ang,Cor1,Cor2,e)
{
	if(!IsPlayerConnected(e)) return false;
	new resid,tmp[256],own[256],strkey[256],bool:searched=false,key;
	resid = CreateVehicle(modelid,X,Y,Z,ang,Cor1,Cor2,-1);
	set(own,PlayerName(e));
	set(vStats[resid][VDono],own);
    set(tmp,VehicleFile(resid));
    new File:vehiclefile = fopen(tmp,io_write);
    fclose(vehiclefile);
    set(vStats[resid][VDono],own);
	new strplaca[256];
	format(strplaca,sizeof(strplaca),"RVL %d",resid);
	set(vStats[resid][VPlaca],strplaca);
	set(vStats[resid][VChave],own);
	vStats[resid][TemAlarme] = 0;
    vStats[resid][Vendendo] = 0;
    vStats[resid][PrecoVenda] = 0;
    vStats[resid][Dividas] = 0;
    vStats[resid][Confiscado] = 0;
	switch(modelid){
		case 481,509,510,594:
		{
		   vStats[resid][gasolina] = -1;
		}
		default:
	    {
	        vStats[resid][gasolina] = 100;
		}
	}
	for(new v = 0; v < pStats[e][LastVeh]; v++){
		if(GetVehicles[e][v] == -1){
			GetVehicles[e][v] = resid;
			searched = true;
			key = v;
			break;
		 }
	}
	if(!searched){
		GetVehicles[e][pStats[e][LastVeh]] = resid;
		key = pStats[e][LastVeh];
		pStats[e][LastVeh]++;
	}
	format(strkey,sizeof(strkey),"Esse é seu veículo de ID %d",key);
	SendClientMessage(e, COLOR_WHITE, strkey);
	return true;
}
public NaoUsarCard(playerid,playerid2)
{

    new money = GetPlayerMoney(playerid);
	if(money < 25){
	    SendClientMessage(playerid,COLOR_GRAY,"A passagem custa $25,00 dólares.");
	    RemovePlayerFromVehicle(playerid);
	    PropostaCard[playerid] = 0;
	    KillTimer(TimerCard[playerid]);
	}
	if(money > 24){
 		SendClientMessage(playerid,COLOR_GREEN,"Você não usou o Virtual Card e a passagem paga. $25,00");
   		AddPlayerMoney(playerid,-25,-1);
	    AddPlayerMoney(playerid2,25,3);
	    SendClientMessage(playerid2,COLOR_GREEN,"O passageiro não usou o Virtual Card, você recebeu $25,00");
	    AcrescentarExPoints(playerid2,1);
	    PropostaCard[playerid] = 0;
	    KillTimer(TimerCard[playerid]);
	}
}
stock OnPlayerEnterVehicleAsPassenger(playerid,vehicleid)
{
	if(GetVehicleModel(vehicleid) == 431)
	{
	    for(new i; i<SLOTS2; i++)
	    {
	        if(IsPlayerInVehicle(i,vehicleid) && GetPlayerState(i)== PLAYER_STATE_DRIVER && Profissao[i] == MOTORISTA_DE_ONIBUS)
	        {
	            if(pStats[playerid][VirtualCard] > 0){
	                SendClientMessage(playerid, COLOR_WHITE, "Você entrou no ônibus, deseja usar o Virtual Card?");
	                SendClientMessage(playerid, COLOR_WHITE, "Para usar digite /usarcard e para não usar digite /naousarcard");
	                SendClientMessage(playerid, COLOR_RED2, "OBS: 15 segundos para responder...");
					SendClientMessage(i, COLOR_WHITE, "Um jogador entrou, foi oferecido a ele uma proposta para usar o Virtual Card que ele possui!");
					PropostaCard[playerid] = 1;
					TimerCard[playerid] = SetTimerEx("NaoUsarCard",15000,false,"dd",playerid,i);
					return 1;
				}
				new money = GetPlayerMoney(playerid);
				if(money < 25){
				    SendClientMessage(playerid,COLOR_GRAY,"A passagem custa $25,00 dólares.");
				    RemovePlayerFromVehicle(playerid);
				    return 1;
				}
				if(money > 24){
				    SendClientMessage(playerid,COLOR_GREEN,"Passagem paga. $25,00");
				    AddPlayerMoney(playerid,-25,-1);
				    AddPlayerMoney(i,25,3);
				    SendClientMessage(i,COLOR_GREEN,"Você recebeu $25,00 dólares pela passagem do novo passageiro.");
				    AcrescentarExPoints(i,1);
				    return 1;
				}
			}
		}
	}
	return 1;
}
stock ProximosDezPlayers(inicio,&min,&max)
{
	new result, first = -1, last = -1;
	for(new i = inicio; i < SLOTS2; i++){
		if(IsPlayerConnected(i)){
	 		result++;
	 		last = i;
			if(first == -1) first = i;
		}
		if(result >= 10) break;
	}
	if(result == 0) return false;
	min = first;
	max = last;
	return true;
}
public OnPlayerSelectedMenuRow(playerid, row)
{
    new string[256];
	TogglePlayerControllable(playerid,1);
	if(GetPlayerMenu(playerid) == Hamburguers && IsValidMenu(Hamburguers)){
	    switch(row){
	        case 0:
			{
				ComerHamburguer(playerid,0);
				TogglePlayerControllable(playerid,1);
	            return 1;
			}
			case 1:
			{
				ComerHamburguer(playerid,1);
				TogglePlayerControllable(playerid,1);
	            return 1;
			}
			case 2:
			{
			 	ComerHamburguer(playerid,2);
			 	TogglePlayerControllable(playerid,1);
	            return 1;
			}
			case 3:
			{
				ComerHamburguer(playerid,3);
				TogglePlayerControllable(playerid,1);
	            return 1;
			}
			case 4:
			{
				ComerHamburguer(playerid,4);
                TogglePlayerControllable(playerid,1);
	            return 1;
			}
			case 5:
			{
				ComerHamburguer(playerid,5);
				TogglePlayerControllable(playerid,1);
	            return 1;
			}
			case 6:
	        {
	            TogglePlayerControllable(playerid,1);
	            return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == BuyCar && IsValidMenu(BuyCar)){
	    switch(row){
	        case 0:
	        {
	            ComprarCarro(playerid);
	            return 1;
	        }
			case 1:
			{
			    RemovePlayerFromVehicle(playerid);
			    TogglePlayerControllable(playerid,1);
			    return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == Weapons && IsValidMenu(Weapons)){
	    switch(row){
			case 0:
			{
			    ShowMenuForPlayer(WSlot2,playerid);
			    TogglePlayerControllable(playerid,0);
			    return 1;
			}
			case 1:
			{
			    ShowMenuForPlayer(WSlot3,playerid);
			    TogglePlayerControllable(playerid,0);
			    return 1;
			}
			case 2:
			{
			    ShowMenuForPlayer(WSlot4,playerid);
			    TogglePlayerControllable(playerid,0);
			    return 1;
			}
			case 3:
			{
				ShowMenuForPlayer(WSlot5,playerid);
			    TogglePlayerControllable(playerid,0);
			    return 1;
			}
			case 4:
			{
				ShowMenuForPlayer(WSlot6,playerid);
			    TogglePlayerControllable(playerid,0);
			    return 1;
			}
			case 5:
			{
				ShowMenuForPlayer(WColete,playerid);
			    TogglePlayerControllable(playerid,0);
			    return 1;
			}
			case 6:
			{
				ShowMenuForPlayer(WCamuflagem,playerid);
			    TogglePlayerControllable(playerid,0);
			    return 1;
			}
			case 7:
			{
			    SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid,1);
				return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == WSlot2 && IsValidMenu(WSlot2)){
	    switch(row){
			case 0:
			{
				GiveWeaponToPlayer(playerid,24);
				ShowMenuForPlayer(WSlot2,playerid);
				TogglePlayerControllable(playerid,0);
				return 1;
			}
			case 1:
			{
				GiveWeaponToPlayer(playerid,22);
				ShowMenuForPlayer(WSlot2,playerid);
				TogglePlayerControllable(playerid,0);
				return 1;
			}
			case 2:
			{
				GiveWeaponToPlayer(playerid,23);
				ShowMenuForPlayer(WSlot2,playerid);
				TogglePlayerControllable(playerid,0);
				return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == WSlot3 && IsValidMenu(WSlot3)){
	    switch(row){
			case 0:
			{
		 		GiveWeaponToPlayer(playerid,25);
                ShowMenuForPlayer(WSlot3,playerid);
                TogglePlayerControllable(playerid,0);
				return 1;
			}
			case 1:
			{
				GiveWeaponToPlayer(playerid,27);
                ShowMenuForPlayer(WSlot3,playerid);
                TogglePlayerControllable(playerid,0);
				return 1;
			}
			case 2:
			{
				GiveWeaponToPlayer(playerid,26);
				ShowMenuForPlayer(WSlot3,playerid);
				TogglePlayerControllable(playerid,0);
				return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == WSlot4 && IsValidMenu(WSlot4)){
	    switch(row){
			case 0:
			{
		 		GiveWeaponToPlayer(playerid,29);
                ShowMenuForPlayer(WSlot4,playerid);
                TogglePlayerControllable(playerid,0);
				return 1;
			}
			case 1:
			{
				GiveWeaponToPlayer(playerid,32);
                ShowMenuForPlayer(WSlot4,playerid);
                TogglePlayerControllable(playerid,0);
				return 1;
			}
			case 2:
			{
				GiveWeaponToPlayer(playerid,28);
				ShowMenuForPlayer(WSlot4,playerid);
				TogglePlayerControllable(playerid,0);
				return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == WSlot5 && IsValidMenu(WSlot5)){
	    switch(row){
			case 0:
			{
		 		GiveWeaponToPlayer(playerid,31);
                ShowMenuForPlayer(WSlot5,playerid);
                TogglePlayerControllable(playerid,0);
				return 1;
			}
			case 1:
			{
				GiveWeaponToPlayer(playerid,30);
                ShowMenuForPlayer(WSlot5,playerid);
                TogglePlayerControllable(playerid,0);
				return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == WSlot6 && IsValidMenu(WSlot6)){
	    switch(row){
			case 0:
			{
		 		GiveWeaponToPlayer(playerid,33);
                ShowMenuForPlayer(WSlot6,playerid);
                TogglePlayerControllable(playerid,0);
				return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == WColete && IsValidMenu(WColete)){
	    switch(row){
			case 0:
			{
			    SetPlayerArmour(playerid,100);
			    SendClientMessage(playerid, COLOR_WHITE, "Colete adquirido...");
			    TogglePlayerControllable(playerid,0);
			    ShowMenuForPlayer(Weapons,playerid);
			    return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == WCamuflagem && IsValidMenu(WCamuflagem)){
		switch(row){
			case 0: CamuflarJogador(playerid,1,100);
			case 1: CamuflarJogador(playerid,2,200);
			case 2: CamuflarJogador(playerid,3,300);
			case 3: CamuflarJogador(playerid,4,400);
			case 4: CamuflarJogador(playerid,5,500);
			case 5: CamuflarJogador(playerid,6,600);
			case 6: CamuflarJogador(playerid,7,700);
			case 7: CamuflarJogador(playerid,8,800);
			case 8: CamuflarJogador(playerid,9,900);
			case 9: CamuflarJogador(playerid,10,1000);
		}
		TogglePlayerControllable(playerid,0);
  		ShowMenuForPlayer(Weapons,playerid);
	}
	if(GetPlayerMenu(playerid) == DiasAluguel1 && IsValidMenu(DiasAluguel1)){
		switch(row){
		    case 0: DiasSelecionados[playerid] = 1;
		    case 1: DiasSelecionados[playerid] = 2;
		    case 2: DiasSelecionados[playerid] = 3;
		    case 3: DiasSelecionados[playerid] = 4;
		    case 4: DiasSelecionados[playerid] = 5;
		    case 5: DiasSelecionados[playerid] = 6;
		    case 6: DiasSelecionados[playerid] = 7;
		    case 7: DiasSelecionados[playerid] = 8;
		    case 8: DiasSelecionados[playerid] = 9;
		    case 9: DiasSelecionados[playerid] = 10;
		    case 10:
		    {
		        ShowMenuForPlayer(DiasAluguel2,playerid);
		        TogglePlayerControllable(playerid,0);
		        return 1;
		    }
		}
		SendClientMessage(playerid, COLOR_WHITE, "Digite agora o custo do aluguel...");
		CustoAluguel[playerid] = 1;
	}
	if(GetPlayerMenu(playerid) == DiasAluguel2 && IsValidMenu(DiasAluguel2)){
		switch(row){
		    case 0: DiasSelecionados[playerid] = 11;
		    case 1: DiasSelecionados[playerid] = 12;
		    case 2: DiasSelecionados[playerid] = 13;
		    case 3: DiasSelecionados[playerid] = 14;
		    case 4: DiasSelecionados[playerid] = 15;
		    case 5: DiasSelecionados[playerid] = 16;
		    case 6: DiasSelecionados[playerid] = 17;
		    case 7: DiasSelecionados[playerid] = 18;
		    case 8: DiasSelecionados[playerid] = 19;
		    case 9: DiasSelecionados[playerid] = 20;
		    case 10:
		    {
		        ShowMenuForPlayer(DiasAluguel3,playerid);
		        TogglePlayerControllable(playerid,0);
		        return 1;
		    }
		}
		SendClientMessage(playerid, COLOR_WHITE, "Digite agora o custo do aluguel...");
		CustoAluguel[playerid] = 1;
	}
	if(GetPlayerMenu(playerid) == DiasAluguel3 && IsValidMenu(DiasAluguel3)){
		switch(row){
		    case 0: DiasSelecionados[playerid] = 21;
		    case 1: DiasSelecionados[playerid] = 22;
		    case 2: DiasSelecionados[playerid] = 23;
		    case 3: DiasSelecionados[playerid] = 24;
		    case 4: DiasSelecionados[playerid] = 25;
		    case 5: DiasSelecionados[playerid] = 26;
		    case 6: DiasSelecionados[playerid] = 27;
		    case 7: DiasSelecionados[playerid] = 28;
		    case 8: DiasSelecionados[playerid] = 29;
		    case 9: DiasSelecionados[playerid] = 30;
		    case 10:
			{
				TogglePlayerControllable(playerid,0);
				return 1;
			}
		}
		SendClientMessage(playerid, COLOR_WHITE, "Digite agora o custo do aluguel...");
		CustoAluguel[playerid] = 1;
	}
	if(GetPlayerMenu(playerid) == CasaOpc && IsValidMenu(CasaOpc)){
		switch(row){
		    case 0: VenderMinhaCasa(playerid);
		    case 1:
		    {
		        TogglePlayerControllable(playerid,0);
		        ShowMenuForPlayer(DiasAluguel1,playerid);
		        return 1;
		    }
		    case 2: CancelarVendaCasa(playerid);
		    case 3: CancelarAluguelCasa(playerid);
		    case 4: RastrearCasa(playerid);
		    case 5: TogglePlayerControllable(playerid,1);
		}
	}
	if(GetPlayerMenu(playerid) == ConfirmarProf && IsValidMenu(ConfirmarProf)){
        switch(row){
            case 0: AplicarProfissao(playerid,profselection[playerid]);
			case 1: confirmarprof[playerid] = 0;
		}
	}
	TogglePlayerControllable(playerid,1);
    if(GetPlayerMenu(playerid) == Outros && IsValidMenu(Outros)){
        switch(row){
            case 0:
            {
                if(GetPlayerMoney(playerid) < 50) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro, Custo: $50");
                pStats[playerid][Camisinha]++;
                SendClientMessage(playerid, COLOR_WHITE, "Camisinha comprada, hehe bem pensado, agora você não terá AIDS =)");
                AddPlayerMoney(playerid,-50,-1);
                return 1;
			}
			case 1:
			{
                if(GetPlayerMoney(playerid) < 50) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro, Custo: $50");
				if(pStats[playerid][Sanduiche] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você já tem 1 sanduíche, não pode comprar mais.");
                pStats[playerid][Sanduiche]++;
                SendClientMessage(playerid, COLOR_WHITE, "Sanduíche comprado, quando estiver com muita fome: /comer");
                AddPlayerMoney(playerid,-50,-1);
			}
			case 2:
			{
                if(GetPlayerMoney(playerid) < 300) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro, Custo: $300");
				if(GetPlayerWeapon(playerid) == 4) return SendClientMessage(playerid, COLOR_GRAY, "Você já tem uma faca!");
				GivePlayerWeapon(playerid, 4, 1);
				AddPlayerMoney(playerid, -300, -1);
               	SendClientMessage(playerid, COLOR_WHITE, "Faca adquirida, use para cortar alguma coisa, ou...");
			}
			case 3:
			{
			    if(pStats[playerid][EscovaDental] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você já tem uma escova de dentes!");
			    if(GetPlayerMoney(playerid) < 50) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro! Custo: $50");
				AddPlayerMoney(playerid, -50, -1);
				pStats[playerid][EscovaDental] = 1;
			}
			case 4:
			{
				if(GetPlayerMoney(playerid) < 50) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro! Custo: $50");
				AddPlayerMoney(playerid, -50, -1);
				pStats[playerid][PastaDental] += 3;
				SendClientMessage(playerid, COLOR_AZUL2, "Pasta dental adquirida, diga ADEUS às caries!");
			}
		}
	}
    TogglePlayerControllable(playerid,1);
	if(GetPlayerMenu(playerid) == MotivosPrisao && IsValidMenu(MotivosPrisao)){
	    new plid = Prisioneiro[playerid];
		switch(row){
		    case 0:
			{
				format(string, sizeof(string), "[POLICIA] O Oficial Sr: %s está pedindo uma prisão de %d horas por %s, caso seja negada haverá perseguição", PlayerName(playerid), TempoPrisao[0], Motivos[0]);
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(plid, COLOR_LIXEIRO, "Para se entregar digite /entregar ou /naoentregar");
				SendClientMessage(playerid, COLOR_LIXEIRO, "Foi solicitado ao outro suspeito, insista que ele digite /entregar, para seguir com o procedimento de prisão.");
				SeEntregando[plid] = 1;
				PolicialApreendendo[plid] = playerid;
				Motivo[plid] = 0;
				pStats[plid][MotivoPrisao] = 0;
				TempoPreso[plid] = SetTimerEx("PrendendoJogador",20000,0,"dd",playerid,plid);
				return 1;
			}
			case 1:
			{
			    format(string, sizeof(string), "[POLICIA] O Oficial Sr: %s está pedindo uma prisão de %d horas por %s, caso seja negada haverá perseguição", PlayerName(playerid), TempoPrisao[1], Motivos[1]);
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(plid, COLOR_LIXEIRO, "Para se entregar digite /entregar ou /naoentregar");
				SendClientMessage(playerid, COLOR_LIXEIRO, "Foi solicitado ao outro suspeito, insista que ele digite /entregar, para seguir com o procedimento de prisão.");
				SeEntregando[plid] = 1;
				PolicialApreendendo[plid] = playerid;
				Motivo[plid] = 1;
				pStats[plid][MotivoPrisao] = 1;
				TempoPreso[plid] = SetTimerEx("PrendendoJogador",20000,0,"dd",playerid,plid);
				return 1;
			}
			case 2:
			{
			    format(string, sizeof(string), "[POLICIA] O Oficial Sr: %s está pedindo uma prisão de %d horas por %s, caso seja negada haverá perseguição", PlayerName(playerid), TempoPrisao[2], Motivos[2]);
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(plid, COLOR_LIXEIRO, "Para se entregar digite /entregar ou /naoentregar");
				SendClientMessage(playerid, COLOR_LIXEIRO, "Foi solicitado ao outro suspeito, insista que ele digite /entregar, para seguir com o procedimento de prisão.");
				SeEntregando[plid] = 1;
				PolicialApreendendo[plid] = playerid;
				Motivo[plid] = 2;
				pStats[plid][MotivoPrisao] = 2;
				TempoPreso[plid] = SetTimerEx("PrendendoJogador",20000,0,"dd",playerid,plid);
				return 1;
			}
			case 3:
			{
			    format(string, sizeof(string), "[POLICIA] O Oficial Sr: %s está pedindo uma prisão de %d horas por %s, caso seja negada haverá perseguição", PlayerName(playerid), TempoPrisao[3], Motivos[3]);
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(plid, COLOR_LIXEIRO, "Para se entregar digite /entregar ou /naoentregar");
				SendClientMessage(playerid, COLOR_LIXEIRO, "Foi solicitado ao outro suspeito, insista que ele digite /entregar, para seguir com o procedimento de prisão.");
				SeEntregando[plid] = 1;
				PolicialApreendendo[playerid] = playerid;
				Motivo[plid] = 3;
				pStats[plid][MotivoPrisao] = 3;
				TempoPreso[plid] = SetTimerEx("PrendendoJogador",20000,0,"dd",playerid,plid);
				return 1;
			}
			case 4:
			{
			    format(string, sizeof(string), "[POLICIA] O Oficial Sr: %s está pedindo uma prisão de %d horas por %s, caso seja negada haverá perseguição", PlayerName(playerid), TempoPrisao[4], Motivos[4]);
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(plid, COLOR_LIXEIRO, "Para se entregar digite /entregar ou /naoentregar");
				SendClientMessage(playerid, COLOR_LIXEIRO, "Foi solicitado ao outro suspeito, insista que ele digite /entregar, para seguir com o procedimento de prisão.");
				SeEntregando[plid] = 1;
				PolicialApreendendo[plid] = playerid;
				Motivo[plid] = 4;
				pStats[plid][MotivoPrisao] = 4;
				TempoPreso[playerid] = SetTimerEx("PrendendoJogador",20000,0,"dd",playerid,plid);
				return 1;
			}
			case 5:
			{
			    format(string, sizeof(string), "[POLICIA] O Oficial Sr: %s está pedindo uma prisão de %d horas por %s, caso seja negada haverá perseguição", PlayerName(playerid), TempoPrisao[5], Motivos[5]);
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(plid, COLOR_LIXEIRO, "Para se entregar digite /entregar ou /naoentregar");
				SendClientMessage(playerid, COLOR_LIXEIRO, "Foi solicitado ao outro suspeito, insista que ele digite /entregar, para seguir com o procedimento de prisão.");
				SeEntregando[plid] = 1;
				PolicialApreendendo[plid] = playerid;
				Motivo[plid] = 5;
				pStats[plid][MotivoPrisao] = 5;
				TempoPreso[plid] = SetTimerEx("PrendendoJogador",20000,0,"dd",playerid,plid);
				return 1;
			}
			case 6:
			{
			    format(string, sizeof(string), "[POLICIA] O Oficial Sr: %s está pedindo uma prisão de %d horas por %s, caso seja negada haverá perseguição", PlayerName(playerid), TempoPrisao[6], Motivos[6]);
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(plid, COLOR_LIXEIRO, "Para se entregar digite /entregar ou /naoentregar");
				SendClientMessage(playerid, COLOR_LIXEIRO, "Foi solicitado ao outro suspeito, insista que ele digite /entregar, para seguir com o procedimento de prisão.");
				SeEntregando[plid] = 1;
				PolicialApreendendo[plid] = playerid;
				Motivo[plid] = 6;
				pStats[plid][MotivoPrisao] = 6;
				TempoPreso[plid] = SetTimerEx("PrendendoJogador",20000,0,"dd",playerid,plid);
				return 1;
			}
			case 7:
			{
			    format(string, sizeof(string), "[POLICIA] O Oficial Sr: %s está pedindo uma prisão de %d horas por %s, caso seja negada haverá perseguição", PlayerName(playerid), TempoPrisao[7], Motivos[7]);
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(plid, COLOR_LIXEIRO, "Para se entregar digite /entregar ou /naoentregar");
				SendClientMessage(playerid, COLOR_LIXEIRO, "Foi solicitado ao outro suspeito, insista que ele digite /entregar, para seguir com o procedimento de prisão.");
				SeEntregando[plid] = 1;
				PolicialApreendendo[plid] = playerid;
				Motivo[plid] = 7;
				pStats[plid][MotivoPrisao] = 7;
				TempoPreso[plid] = SetTimerEx("PrendendoJogador",20000,0,"dd",playerid,plid);
				return 1;
			}
			case 8:
			{
			    format(string, sizeof(string), "[POLICIA] O Oficial Sr: %s está pedindo uma prisão de %d horas por %s, caso seja negada haverá perseguição", PlayerName(playerid), TempoPrisao[8], Motivos[8]);
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(plid, COLOR_LIXEIRO, "Para se entregar digite /entregar ou /naoentregar");
				SendClientMessage(playerid, COLOR_LIXEIRO, "Foi solicitado ao outro suspeito, insista que ele digite /entregar, para seguir com o procedimento de prisão.");
				SeEntregando[plid] = 1;
				PolicialApreendendo[plid] = playerid;
				Motivo[plid] = 8;
				pStats[plid][MotivoPrisao] = 8;
				TempoPreso[plid] = SetTimerEx("PrendendoJogador",20000,0,"dd",playerid,plid);
				return 1;
			}
			case 9:
			{
			    format(string, sizeof(string), "[POLICIA] O Oficial Sr: %s está pedindo uma prisão de %d horas por %s, caso seja negada haverá perseguição", PlayerName(playerid), TempoPrisao[9], Motivos[9]);
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(plid, COLOR_LIXEIRO, "Para se entregar digite /entregar ou /naoentregar");
				SendClientMessage(playerid, COLOR_LIXEIRO, "Foi solicitado ao outro suspeito, insista que ele digite /entregar, para seguir com o procedimento de prisão.");
				SeEntregando[plid] = 1;
				PolicialApreendendo[plid] = playerid;
				Motivo[plid] = 9;
				pStats[plid][MotivoPrisao] = 9;
				TempoPreso[plid] = SetTimerEx("PrendendoJogador",20000,0,"dd",playerid,plid);
				return 1;
			}
			case 10:
			{
			    format(string, sizeof(string), "[POLICIA] O Oficial Sr: %s está pedindo uma prisão de %d horas por %s, caso seja negada haverá perseguição", PlayerName(playerid), TempoPrisao[10], Motivos[10]);
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(plid, COLOR_LIXEIRO, "Para se entregar digite /entregar ou /naoentregar");
				SendClientMessage(playerid, COLOR_LIXEIRO, "Foi solicitado ao outro suspeito, insista que ele digite /entregar, para seguir com o procedimento de prisão.");
				SeEntregando[plid] = 1;
				PolicialApreendendo[plid] = playerid;
				Motivo[plid] = 10;
				pStats[plid][MotivoPrisao] = 10;
				TempoPreso[plid] = SetTimerEx("PrendendoJogador",20000,0,"dd",playerid,plid);
				return 1;
			}
			case 11:
			{
			    TogglePlayerControllable(playerid,0);
			    ShowMenuForPlayer(MotivosPrisao2,playerid);
				return 1;
			}
		}
	}
	TogglePlayerControllable(playerid,0);
    if(GetPlayerMenu(playerid) == MotivosPrisao2 && IsValidMenu(MotivosPrisao2)){
	    new plid = Prisioneiro[playerid];
		switch(row){
	        case 1:
			{
			    format(string, sizeof(string), "[POLICIA] O Oficial Sr: %s está pedindo uma prisão de %d horas por %s, caso seja negada haverá perseguição", PlayerName(playerid), TempoPrisao[11], Motivos[11]);
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(plid, COLOR_LIXEIRO, "Para se entregar digite /entregar ou /naoentregar");
				SendClientMessage(playerid, COLOR_LIXEIRO, "Foi solicitado ao outro suspeito, insista que ele digite /entregar, para seguir com o procedimento de prisão.");
				SeEntregando[plid] = 1;
				PolicialApreendendo[plid] = playerid;
				Motivo[plid] = 11;
				pStats[plid][MotivoPrisao] = 11;
				TempoPreso[plid] = SetTimerEx("PrendendoJogador",20000,0,"dd",playerid,plid);
				return 1;
			}
			case 2:
			{
			    format(string, sizeof(string), "[POLICIA] O Oficial Sr: %s está pedindo uma prisão de %d horas por %s, caso seja negada haverá perseguição", PlayerName(playerid), TempoPrisao[12], Motivos[12]);
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(plid, COLOR_LIXEIRO, "Para se entregar digite /entregar ou /naoentregar");
				SendClientMessage(playerid, COLOR_LIXEIRO, "Foi solicitado ao outro suspeito, insista que ele digite /entregar, para seguir com o procedimento de prisão.");
				SeEntregando[plid] = 1;
				PolicialApreendendo[plid] = playerid;
				Motivo[plid] = 12;
				pStats[plid][MotivoPrisao] = 12;
				TempoPreso[plid] = SetTimerEx("PrendendoJogador",20000,0,"dd",playerid,plid);
				return 1;
			}
			case 3:
			{
			    format(string, sizeof(string), "[POLICIA] O Oficial Sr: %s está pedindo uma prisão de %d horas por %s, caso seja negada haverá perseguição", PlayerName(playerid), TempoPrisao[13], Motivos[13]);
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(plid, COLOR_LIXEIRO, "Para se entregar digite /entregar ou /naoentregar");
				SendClientMessage(playerid, COLOR_LIXEIRO, "Foi solicitado ao outro suspeito, insista que ele digite /entregar, para seguir com o procedimento de prisão.");
				SeEntregando[plid] = 1;
				PolicialApreendendo[plid] = playerid;
				Motivo[plid] = 13;
				pStats[plid][MotivoPrisao] = 13;
				TempoPreso[plid] = SetTimerEx("PrendendoJogador",20000,0,"dd",playerid,plid);
				return 1;
			}
	        case 4:
			{
			    format(string, sizeof(string), "[POLICIA] O Oficial Sr: %s está pedindo uma prisão de %d horas por %s, caso seja negada haverá perseguição", PlayerName(playerid), TempoPrisao[14], Motivos[14]);
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(plid, COLOR_LIXEIRO, "Para se entregar digite /entregar ou /naoentregar");
				SendClientMessage(playerid, COLOR_LIXEIRO, "Foi solicitado ao outro suspeito, insista que ele digite /entregar, para seguir com o procedimento de prisão.");
				SeEntregando[plid] = 1;
				PolicialApreendendo[plid] = playerid;
				Motivo[plid] = 14;
				pStats[plid][MotivoPrisao] = 14;
				TempoPreso[plid] = SetTimerEx("PrendendoJogador",20000,0,"dd",playerid,plid);
				return 1;
			}
			case 5:
			{
			    format(string, sizeof(string), "[POLICIA] O Oficial Sr: %s está pedindo uma prisão de %d horas por %s, caso seja negada haverá perseguição", PlayerName(playerid), TempoPrisao[15], Motivos[15]);
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(plid, COLOR_LIXEIRO, "Para se entregar digite /entregar ou /naoentregar");
				SendClientMessage(playerid, COLOR_LIXEIRO, "Foi solicitado ao outro suspeito, insista que ele digite /entregar, para seguir com o procedimento de prisão.");
				SeEntregando[plid] = 1;
				PolicialApreendendo[plid] = playerid;
				Motivo[plid] = 15;
				pStats[plid][MotivoPrisao] = 15;
				TempoPreso[plid] = SetTimerEx("PrendendoJogador",20000,0,"dd",playerid,plid);
				return 1;
			}
			case 6:
			{
			    format(string, sizeof(string), "[POLICIA] O Oficial Sr: %s está pedindo uma prisão de %d horas por %s, caso seja negada haverá perseguição", PlayerName(playerid), TempoPrisao[16], Motivos[16]);
				SendClientMessageToAll(COLOR_COP_SWAT, string);
				SendClientMessage(plid, COLOR_LIXEIRO, "Para se entregar digite /entregar ou /naoentregar");
				SendClientMessage(playerid, COLOR_LIXEIRO, "Foi solicitado ao outro suspeito, insista que ele digite /entregar, para seguir com o procedimento de prisão.");
				SeEntregando[plid] = 1;
				PolicialApreendendo[plid] = playerid;
				Motivo[plid] = 16;
				pStats[plid][MotivoPrisao] = 16;
				TempoPreso[plid] = SetTimerEx("PrendendoJogador",20000,0,"dd",playerid,plid);
				return 1;

			}
	    }
	}
	TogglePlayerControllable(playerid,0);
    if(GetPlayerMenu(playerid) == cofremenu && IsValidMenu(cofremenu)){
		switch(row){
		    case 0:
			{
				GranaCofre[playerid][0] = 1;
				SendClientMessage(playerid, COLOR_GREEN, "Digite o valor à ser colocado no cofre...");
				return 1;
			}
			case 1:
			{
			    ArmaCofre[playerid][0] = 1;
			    SendClientMessage(playerid, COLOR_GREEN, "Digite o slot da arma que quer colocar! (Se não souber o slot veja em /slotarmas)");
				return 1;
			}
			case 2:
			{
			    ShowMenuForPlayer(drogascofre,playerid);
			    DrogaCofre[playerid][0] = 1;
			    return 1;
			}
			case 3:
			{
			    if(pStats[playerid][PhoneNumb]==0){
	        		SendClientMessage(playerid,COLOR_GRAY,"Você não tem celular!");
	        		return 1;
				}
				if(pStats[playerid][GCell] == 1 || pStats[playerid][CofreCell] == 1){
		    		SendClientMessage(playerid, COLOR_GRAY, "Seu celular está guardado e desativado!");
		    		return 1;
				}
    			if(pckStats[PickupEntradaCasa[playerid]][CofreCelular] == 1) {
    			    SendClientMessage(playerid, COLOR_GRAY, "Já tem um celular guardado ai...");
    			    return 1;
				}
				else{
				    pStats[playerid][CofreCell] = 1;
				    SendClientMessage(playerid, COLOR_WHITE, "Celular guardado e desativado!");
				    pckStats[PickupEntradaCasa[playerid]][CofreCelular] = 1;
					return 1;
				}
			}
			case 4:
			{
			    GranaCofre[playerid][1] = 1;
			    SendClientMessage(playerid, COLOR_GREEN, "Digite o valor à ser retirado do cofre...");
				return 1;
			}
			case 5:
			{
			    ArmaCofre[playerid][1] = 1;
			    SendClientMessage(playerid, COLOR_GREEN, "Digite o slot da arma que quer retirar...");
				return 1;
			}
			case 6:
			{
			    ShowMenuForPlayer(drogascofre,playerid);
			    DrogaCofre[playerid][1] = 1;
				return 1;
			}
			case 7:
			{
			    if(pStats[playerid][PhoneNumb]==0){
	        		SendClientMessage(playerid,COLOR_GRAY,"Você não tem celular!");
	        		return 1;
				}
				if(pStats[playerid][CofreCell] == 0){
		    		SendClientMessage(playerid, COLOR_GRAY, "Seu celular não está guardado em nenhum cofre!");
		    		return 1;
				}
    			if(pckStats[PickupEntradaCasa[playerid]][CofreCelular] == 0) {
    			    SendClientMessage(playerid, COLOR_GRAY, "Não tem celular guardado ai...");
    			    return 1;
				}
				else{
				    pStats[playerid][CofreCell] = 0;
				    SendClientMessage(playerid, COLOR_WHITE, "Celular retirado!");
				    pckStats[PickupEntradaCasa[playerid]][CofreCelular] = 0;
					return 1;
				}
			}
		}
	}
	TogglePlayerControllable(playerid,0);
	if(GetPlayerMenu(playerid) == Becks && IsValidMenu(Becks)){
	    switch(row){
	        case 0:
	        {
	            if(GetPlayerMoney(playerid) < 150){
					SendClientMessage(playerid, COLOR_WHITE, "QUALÉ MALUCO? CADE A GRANA PORRA!");
					return 1;
				}
				Maconha[playerid] = Maconha[playerid] + 1;
				SendClientMessage(playerid, COLOR_TRAFICANTE, "Vlw mano, toma teu papelote de maconha, pra fumar: /fumar.");
			    AddPlayerMoney(playerid, -150,-1);
				TogglePlayerControllable(playerid,1);
				if(!IsHaveProf(TRAFICANTE) || !IsHaveProf(LIDER_DE_TRAFICO)){
					if(CheckpointStatus[playerid] == NONE){
						TaAfim[playerid] = 1;
					}
				}
			}
			case 1:
			{
	            if(GetPlayerMoney(playerid) < 250){
					SendClientMessage(playerid, COLOR_WHITE, "QUALÉ MALUCO? CADE A GRANA PORRA!");
					return 1;
				}
				Cocaina[playerid] = Cocaina[playerid] + 1;
				SendClientMessage(playerid, COLOR_TRAFICANTE, "Vlw mano, toma teu pó, pra cheirar: /cheirar.");
			    AddPlayerMoney(playerid, -250,-1);
				TogglePlayerControllable(playerid,1);
				if(!IsHaveProf(TRAFICANTE) || !IsHaveProf(LIDER_DE_TRAFICO)){
					if(CheckpointStatus[playerid] == NONE){
						TaAfim[playerid] = 1;
					}
				}
			}
			case 2:
			{
	            if(GetPlayerMoney(playerid) < 300){
					SendClientMessage(playerid, COLOR_WHITE, "QUALÉ MALUCO? CADE A GRANA PORRA!");
					return 1;
				}
				Heroina[playerid] = Heroina[playerid] + 1;
				SendClientMessage(playerid, COLOR_TRAFICANTE, "Toma aí mano 1g de heroína, se quiser injetar: /injetar.");
			    AddPlayerMoney(playerid, -300,-1);
			    TogglePlayerControllable(playerid,1);
			    if(!IsHaveProf(TRAFICANTE) || !IsHaveProf(LIDER_DE_TRAFICO)){
					if(CheckpointStatus[playerid] == NONE){
						TaAfim[playerid] = 1;
					}
				}
			}
		}
 	}
	TogglePlayerControllable(playerid,0);
	if(GetPlayerMenu(playerid) == drogascofre && IsValidMenu(drogascofre)){
		if(DrogaCofre[playerid][0] == 1){
		    DrogaCofre[playerid][0] = 0;
	    	TogglePlayerControllable(playerid,1);
		    switch(row){
		        case 0:
		        {
					if(pckStats[PickupEntradaCasa[playerid]][CocainaCofre] < 10){
					    pckStats[PickupEntradaCasa[playerid]][CocainaCofre]++;
                		Cocaina[playerid]--;
                		format(string,sizeof(string),"Você adicionou uma cocaína em seu cofre, agora ele possui %d cocaina(s)",pckStats[PickupEntradaCasa[playerid]][CocainaCofre]);
						SendClientMessage(playerid, COLOR_WHITE, string);
						return 1;
					}
					else{
					    SendClientMessage(playerid, COLOR_GRAY, "O cofre está lotado, cabe apenas 10 drogas de cada tipo!");
					    return 1;
					}
				}
				case 1:
		        {
					if(pckStats[PickupEntradaCasa[playerid]][MaconhaCofre] < 10){
					    pckStats[PickupEntradaCasa[playerid]][MaconhaCofre]++;
						Maconha[playerid]--;
                		format(string,sizeof(string),"Você adicionou uma maconha em seu cofre, agora ele possui %d maconha(s)",pckStats[PickupEntradaCasa[playerid]][MaconhaCofre]);
						SendClientMessage(playerid, COLOR_WHITE, string);
						return 1;
					}
					else{
					    SendClientMessage(playerid, COLOR_GRAY, "O cofre está lotado, cabe apenas 10 drogas de cada tipo!");
					    return 1;
					}
				}
		        case 2:
		        {
					if(pckStats[PickupEntradaCasa[playerid]][HeroinaCofre] < 10){
					    pckStats[PickupEntradaCasa[playerid]][HeroinaCofre]++;
                		Heroina[playerid]--;
                		format(string,sizeof(string),"Você adicionou uma heroína em seu cofre, agora ele possui %d heroína(s)",pckStats[PickupEntradaCasa[playerid]][HeroinaCofre]);
						SendClientMessage(playerid, COLOR_WHITE, string);
						return 1;
					}
					else{
					    SendClientMessage(playerid, COLOR_GRAY, "O cofre está lotado, cabe apenas 10 drogas de cada tipo!");
					    return 1;
					}
				}
			}
		}
		else if(DrogaCofre[playerid][1] == 1){
		    DrogaCofre[playerid][1] = 0;
	    	TogglePlayerControllable(playerid,1);
		    switch(row){
		        case 0:
		        {
		            if(pckStats[PickupEntradaCasa[playerid]][CocainaCofre] >= 1){
                        pckStats[PickupEntradaCasa[playerid]][CocainaCofre]--;
                		Cocaina[playerid]++;
                		format(string,sizeof(string),"Você pegou uma cocaina do seu cofre, agora ele tem %d cocaina(s)",pckStats[PickupEntradaCasa[playerid]][CocainaCofre]);
                		SendClientMessage(playerid, COLOR_WHITE, string);
                		return 1;
					}
					else{
					    SendClientMessage(playerid, COLOR_GRAY, "O estoque de cocaina está vazio!");
					    return 1;
					}
		        }
		        case 1:
		        {
		            if(pckStats[PickupEntradaCasa[playerid]][MaconhaCofre] >= 1){
		                pckStats[PickupEntradaCasa[playerid]][MaconhaCofre]--;
                		Maconha[playerid]++;
                		format(string,sizeof(string),"Você pegou uma maconha do seu cofre, agora ele tem %d maconha(s)",pckStats[PickupEntradaCasa[playerid]][MaconhaCofre]);
                		SendClientMessage(playerid, COLOR_WHITE, string);
                		return 1;
					}
					else{
					    SendClientMessage(playerid, COLOR_GRAY, "O estoque de maconha está vazio!");
					    return 1;
					}
		        }
		        case 2:
		        {
		            if(pckStats[PickupEntradaCasa[playerid]][HeroinaCofre] >= 1){
                        pckStats[PickupEntradaCasa[playerid]][HeroinaCofre]--;
                		Heroina[playerid]++;
                		format(string,sizeof(string),"Você pegou uma heroina do seu cofre, agora ele tem %d heroina(s)",pckStats[PickupEntradaCasa[playerid]][HeroinaCofre]);
                		SendClientMessage(playerid, COLOR_WHITE, string);
                		return 1;
					}
					else{
					    SendClientMessage(playerid, COLOR_GRAY, "O estoque de heroina está vazio!");
					    return 1;
					}
		        }
			}
		}
	}
	TogglePlayerControllable(playerid,0);
    if(GetPlayerMenu(playerid) == Eletrodomesticos && IsValidMenu(Eletrodomesticos)){
        switch(row){
			case 0: ComprarTV(playerid);
			case 1: ComprarRadio(playerid);
			case 2: ComprarGeladeira(playerid);
			case 3: ComprarFogao(playerid);
			case 4: ComprarTelefone(playerid);
			case 5: ComprarAlarmeBasico(playerid);
			case 6: ComprarAlarmeAvancado(playerid);
		}
	}
	TogglePlayerControllable(playerid,0);
    if(GetPlayerMenu(playerid) == ComidaLoja && IsValidMenu(ComidaLoja)){
        switch(row){
            case 0:
            {
			    if(GetPlayerMoney(playerid) < ValorFrango){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar o Frango Congelado.");
			        TogglePlayerControllable(playerid,1);
					return 1;
				}
			    if(pStats[playerid][Frango] == 5){
				    SendClientMessage(playerid, COLOR_GRAY, "Você já tem frango demais na sacola, coloque ele em sua casa!");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
				else{
					AddPlayerMoney(playerid, -ValorFrango, -1);
					pStats[playerid][Frango]++;
					SendClientMessage(playerid, COLOR_WHITE, "Você comprou o Frango Sadia's Sadio por $30, pode guardar na geladeira ou preparar logo em sua casa.");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
			}
			case 1:
			{
			    if(GetPlayerMoney(playerid) < ValorPeixe){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar o Peixe Congelado.");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
			    if(pStats[playerid][Peixe] == 5){
				    SendClientMessage(playerid, COLOR_GRAY, "Você já tem peixe demais na sacola, coloque ele em sua casa!");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
				else{
					AddPlayerMoney(playerid, -ValorPeixe, -1);
					pStats[playerid][Peixe]++;
					SendClientMessage(playerid, COLOR_WHITE, "Você comprou 1 bandeja de Peixe por $40, pode guardar na geladeira ou preparar logo em sua casa.");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
			}
			case 2:
			{
			    if(GetPlayerMoney(playerid) < ValorPizza){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar o Peixe Congelado.");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
			    if(pStats[playerid][Pizza] == 5){
				    SendClientMessage(playerid, COLOR_GRAY, "Você já tem peixe demais na sacola, coloque ele em sua casa!");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
				else{
					AddPlayerMoney(playerid, -ValorPizza, -1);
					pStats[playerid][Pizza]++;
					SendClientMessage(playerid, COLOR_WHITE, "Você comprou 1 pizza de Mussarela por $25, pode guardar na geladeira ou preparar logo em sua casa.");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
			}
			case 3:
			{
			    if(GetPlayerMoney(playerid) < ValorSalada){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar a Salada Vida Leve.");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
			    if(pStats[playerid][Salada] == 5){
				    SendClientMessage(playerid, COLOR_GRAY, "Você já tem peixe demais na sacola, coloque ele em sua casa!");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
				else{
					AddPlayerMoney(playerid, -ValorSalada, -1);
					pStats[playerid][Salada]++;
					SendClientMessage(playerid, COLOR_WHITE, "Você comprou 1 kit com saladas frescas por $15, pode guardar na geladeira ou preparar logo em sua casa.");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
			}
			case 4:
			{
			    if(GetPlayerMoney(playerid) < ValorRefrigerante){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar Refrigerantes Sprunk.");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
			    if(pStats[playerid][Refrigerante] == 5){
				    SendClientMessage(playerid, COLOR_GRAY, "Você já tem refrigerante demais, coloque ele em sua casa!");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
				else{
					AddPlayerMoney(playerid, -ValorRefrigerante, -1);
					pStats[playerid][Refrigerante]++;
					SendClientMessage(playerid, COLOR_WHITE, "Você comprou 1 lata de refrigerante por $12, pode guardar na geladeira ou preparar logo em sua casa.");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
			}
			case 5:
			{
			    if(GetPlayerMoney(playerid) < ValorSuco){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar o Suco de Laranja.");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
			    if(pStats[playerid][Suco] == 5){
				    SendClientMessage(playerid, COLOR_GRAY, "Você já tem suco demais, coloque ele em sua casa!");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
				else{
					AddPlayerMoney(playerid, -ValorSuco, -1);
					pStats[playerid][Suco]++;
					SendClientMessage(playerid, COLOR_WHITE, "Você comprou 1 delicioso Suco de Laranja KiBoum!");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
			}
			case 6:
			{
			    if(GetPlayerMoney(playerid) < ValorCarne){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar a carne.");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
			    if(pStats[playerid][Carne] == 5){
				    SendClientMessage(playerid, COLOR_GRAY, "Você já tem carne demais, coloque ela em sua casa!");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
				else{
					AddPlayerMoney(playerid, -ValorCarne, -1);
					pStats[playerid][Carne]++;
					SendClientMessage(playerid, COLOR_WHITE, "Você comprou 1 deliciosa carne!");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
			}
			case 7:
			{
			    if(GetPlayerMoney(playerid) < ValorStrogonoff){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar o strogonoff.");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
			    if(pStats[playerid][Strogonoff] == 5){
				    SendClientMessage(playerid, COLOR_GRAY, "Você já tem strogonoff demais, coloque ele em sua casa!");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
				else{
					AddPlayerMoney(playerid, -ValorStrogonoff, -1);
					pStats[playerid][Strogonoff]++;
					SendClientMessage(playerid, COLOR_WHITE, "Você comprou 1 delicioso strogonoff de frango!");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
			}
			case 8:
			{
			    if(GetPlayerMoney(playerid) < ValorCamarao){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar o camarão.");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
			    if(pStats[playerid][Camarao] == 5){
				    SendClientMessage(playerid, COLOR_GRAY, "Você já tem camarão demais, coloque ele em sua casa!");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
				else{
					AddPlayerMoney(playerid, -ValorCamarao, -1);
					pStats[playerid][Camarao]++;
					SendClientMessage(playerid, COLOR_WHITE, "Você comprou 1 pacote com deliciosos camarões!");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
			}
			case 9:
			{
			    if(GetPlayerMoney(playerid) < ValorLinguica){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para comprar a linguiça.");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
			    if(pStats[playerid][Linguica] == 5){
				    SendClientMessage(playerid, COLOR_GRAY, "Você já tem linguiça demais, coloque ela em sua casa!");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
				else{
					AddPlayerMoney(playerid, -ValorLinguica, -1);
					pStats[playerid][Linguica]++;
					SendClientMessage(playerid, COLOR_WHITE, "Você comprou 1 pacote com deliciosas linguiças para churrasco!");
                    TogglePlayerControllable(playerid,1);
					return 1;
				}
			}
		}
	}
	TogglePlayerControllable(playerid,0);
    if(GetPlayerMenu(playerid) == Municoes && IsValidMenu(Municoes)){
        switch(row){
            case 0:
            {
					SlotSelection[playerid] = 2;
					ShowMenuForPlayer(QTMunicoes,playerid);
					TogglePlayerControllable(playerid,0);
					return 1;
			}
            case 1:
            {
					SlotSelection[playerid] = 3;
					ShowMenuForPlayer(QTMunicoes,playerid);
					TogglePlayerControllable(playerid,0);
					return 1;
			}
            case 2:
            {
					SlotSelection[playerid] = 4;
					ShowMenuForPlayer(QTMunicoes,playerid);
					TogglePlayerControllable(playerid,0);
					return 1;
			}
            case 3:
            {
					SlotSelection[playerid] = 5;
					ShowMenuForPlayer(QTMunicoes,playerid);
					TogglePlayerControllable(playerid,0);
					return 1;
			}
            case 4:
            {
					SlotSelection[playerid] = 6;
					ShowMenuForPlayer(QTMunicoes,playerid);
					TogglePlayerControllable(playerid,0);
					return 1;
			}
		}
	}
	TogglePlayerControllable(playerid,0);
	if(GetPlayerMenu(playerid) == QTMunicoes && IsValidMenu(QTMunicoes)){
	    switch(row){
            case 0: ComprarMunicao(playerid, SlotSelection[playerid], 5);
            case 1: ComprarMunicao(playerid, SlotSelection[playerid], 10);
            case 2: ComprarMunicao(playerid, SlotSelection[playerid], 20);
            case 3: ComprarMunicao(playerid, SlotSelection[playerid], 50);
            case 4: ComprarMunicao(playerid, SlotSelection[playerid], 100);
            case 5: ComprarMunicao(playerid, SlotSelection[playerid], 200);
		}
	}
	TogglePlayerControllable(playerid,0);
    if(GetPlayerMenu(playerid) == Cardapio1 && IsValidMenu(Cardapio1)){
        switch(row){
            case 0 :
				{
			 		ShowMenuForPlayer(Cardapio2,playerid);
			 		TogglePlayerControllable(playerid,0);
			    	return 1;
				}
            case 1 :
				{
			 		ShowMenuForPlayer(Cardapio3,playerid);
			 		TogglePlayerControllable(playerid,0);
			    	return 1;
				}
            case 2 :
				{
			 		ShowMenuForPlayer(Cardapio4,playerid);
			 		TogglePlayerControllable(playerid,0);
			    	return 1;
				}
            case 3: TogglePlayerControllable(playerid,1);
		}
	}
	TogglePlayerControllable(playerid,0);
	//Comidas(9)
	if(GetPlayerMenu(playerid) == Cardapio2 && IsValidMenu(Cardapio2)){
        switch(row){
            case 0: ServirComida(playerid,0);
            case 1: ServirComida(playerid,1);
            case 2: ServirComida(playerid,2);
            case 3: ServirComida(playerid,3);
            case 4: ServirComida(playerid,4);
            case 5: ServirComida(playerid,5);
            case 6: ServirComida(playerid,6);
            case 7: ServirComida(playerid,7);
            case 8: ServirComida(playerid,8);
		}
	}
	TogglePlayerControllable(playerid,0);
	//Bebidas(7)
	if(GetPlayerMenu(playerid) == Cardapio3 && IsValidMenu(Cardapio3)){
        switch(row){
            case 0: ServirBebida(playerid,0);
            case 1: ServirBebida(playerid,1);
            case 2: ServirBebida(playerid,2);
            case 3: ServirBebida(playerid,3);
            case 4: ServirBebida(playerid,4);
            case 5:
			{
			 	ShowMenuForPlayer(Sucos,playerid);
			 	ComLeite[playerid] = 1;
			 	TogglePlayerControllable(playerid,0);
			 	return 1;
		 	}
            case 6:
			{
			 	ShowMenuForPlayer(Sucos,playerid);
				ComLeite[playerid] = 0;
				TogglePlayerControllable(playerid,0);
				return 1;
			}
		}
	}
	TogglePlayerControllable(playerid,0);
	//Sobremesas(5)
	if(GetPlayerMenu(playerid) == Cardapio4 && IsValidMenu(Cardapio4)){
        switch(row){
            case 0: ServirSobremesa(playerid,0);
            case 1: ServirSobremesa(playerid,1);
            case 2: ServirSobremesa(playerid,2);
            case 3: ServirSobremesa(playerid,3);
            case 4: ServirSobremesa(playerid,4);
		}
	}
	TogglePlayerControllable(playerid,0);
	//Sucos(7)
	if(GetPlayerMenu(playerid) == Sucos && IsValidMenu(Sucos)){
	    switch(row){
            case 0: ServirSuco(playerid,0);
            case 1: ServirSuco(playerid,1);
            case 2: ServirSuco(playerid,2);
            case 3: ServirSuco(playerid,3);
            case 4: ServirSuco(playerid,4);
            case 5: ServirSuco(playerid,5);
            case 6: ServirSuco(playerid,6);
            case 7: ServirSuco(playerid,7);
            case 8: ServirSuco(playerid,8);
		}
	}
	TogglePlayerControllable(playerid,0);
	if(GetPlayerMenu(playerid) == BancoOpc && IsValidMenu(BancoOpc)){
	    switch(row){
	        case 0:
			{
			    TogglePlayerControllable(playerid,0);
			    ShowMenuForPlayer(BancoOpc2,playerid);
	            return 1;
			}
			case 1:
			{
	           	DepositandoGrana[playerid] = 1;
	           	SendClientMessage(playerid, COLOR_AZULPLUS, "Para depositar digite o valor à ser DEPOSITADO no CHAT.");
	          	return 1;
			}
			case 2:
			{
				format(string, sizeof(string), "|-------- Conta do Jogador: %s --------|", PlayerName(playerid));
				SendClientMessage(playerid, COLOR_RED2, string);
				format(string, sizeof(string), "|-------- Dinheiro pessoal: $%d dólares ---------|", pStats[playerid][Banco]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "|-------- Trabalho: $%d dólares ---------|", pStats[playerid][BancoTrabalho]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "|-------- Residencia: $%d dólares ---------|", pStats[playerid][BancoResidencia]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "|-------- Empresa: $%d dólares ---------|", pStats[playerid][BancoEmpresa]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				TogglePlayerControllable(playerid,1);
				return 1;
			}
			case 3:
			{
				if(pStats[playerid][Divida] <= 0){
		   			SendClientMessage(playerid, COLOR_GRAY, "Você não possui dívida para pagar!");
                	TogglePlayerControllable(playerid,1);
	            	return 1;
	   			}
	   			if(GetPlayerMoney(playerid) < pStats[playerid][Divida]){
		   			format(string, sizeof(string),"Você não tem dinheiro para pagar! Arrume se não quer encrenca! Sua dívida: $%d",pStats[playerid][Divida]);
		   			SendClientMessage(playerid, COLOR_GRAY, string);
                	TogglePlayerControllable(playerid,1);
	            	return 1;
	   			}
	   			else{
                    TogglePlayerControllable(playerid,1);
		   			AddPlayerMoney(playerid,0-pStats[playerid][Divida],-1);
		   			format(string, sizeof(string),"Você pagou sua dívida de $%d",pStats[playerid][Divida]);
		   			SendClientMessage(playerid, COLOR_WHITE, string);
		   			ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,1,1);
		   			pStats[playerid][Divida] = 0;
		   			pStats[playerid][Emprestimo] = 0;
		   			KillTimer(TimerDivida[playerid]);
		   			return 1;
				}
			}
			case 4:
			{
				FazendoEmprestimo[playerid] = 1;
				SendClientMessage(playerid, COLOR_AZULPLUS, "Para fazer um empréstimo digite o valor à ser EMPRESTADO no CHAT.");
				return 1;
			}
			case 5:
			{
				InvestindoGrana[playerid] = 1;
				SendClientMessage(playerid, COLOR_AZULPLUS, "[BANCO] Para fazer a aplicação bancária, digite no CHAT o valor que deseja");
				SendClientMessage(playerid, COLOR_AZULPLUS, "[BANCO] transferir da sua conta para APLICAR na suaaplicação.");
				return 1;
			}
			case 6:
			{
				DesInvestindoGrana[playerid] = 1;
				SendClientMessage(playerid, COLOR_AZULPLUS, "[BANCO] Para retirar dinheiro daa aplicação bancária, digite no CHAT o valor que deseja");
				SendClientMessage(playerid, COLOR_AZULPLUS, "[BANCO] transferir da sua aplicação para COLOCAR na sua conta.");
				return 1;
			}
		}
	}
	if(GetPlayerMenu(playerid) == BancoOpc2 && IsValidMenu(BancoOpc2)){
	    switch(row){
	        case 0:
	        {
	            BankOpc[playerid] = 0;
	            SacandoGrana[playerid] = 1;
	            SendClientMessage(playerid, COLOR_AZULPLUS, "Para sacar digite o valor à ser SACADO no CHAT.");
	            return 1;
	        }
	        case 1:
	        {
	            BankOpc[playerid] = 1;
	            SacandoGrana[playerid] = 1;
	            SendClientMessage(playerid, COLOR_AZULPLUS, "Para sacar digite o valor à ser SACADO no CHAT.");
	            return 1;
	        }
	        case 2:
	        {
                BankOpc[playerid] = 2;
	            SacandoGrana[playerid] = 1;
	            SendClientMessage(playerid, COLOR_AZULPLUS, "Para sacar digite o valor à ser SACADO no CHAT.");
	            return 1;
	        }
	        case 3:
	        {
	            BankOpc[playerid] = 3;
	            SacandoGrana[playerid] = 1;
	            SendClientMessage(playerid, COLOR_AZULPLUS, "Para sacar digite o valor à ser SACADO no CHAT.");
	            return 1;
	        }
	        case 4:
			{
			    TogglePlayerControllable(playerid,1);
	            return 1;
			}
		}
	}
	TogglePlayerControllable(playerid,1);
	if(GetPlayerMenu(playerid) == Bar && IsValidMenu(Bar)) {
	    switch(row){
	        case 0:
			{
			    if(GetPlayerMoney(playerid) < 5){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para pagar o Guaraná Kuat.");
					return 1;
				}
			    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
				Bebida[playerid] = Bebida[playerid]-1;
				format(string, sizeof(string), "Você tomou um delicioso Guaraná Kuat, o teor de álcool no seu sangue baixou. Atual: %d Mg", Bebida[playerid]);
			    SendClientMessage(playerid, COLOR_BARMAN, string);
			    AddPlayerMoney(playerid, -5, -1);
			    AddPlayerHealth(playerid, 4);
			    AcrescentarLucro(8,10);
				return 1;
			}
			case 1:
			{
			    if(GetPlayerMoney(playerid) < 8){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para pagar o Suco.");
					return 1;
				}
			    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
				Bebida[playerid] = Bebida[playerid]-2;
				format(string, sizeof(string), "Você tomou um delicioso Suco, o teor de álcool no seu sangue baixou. Atual: %d Mg", Bebida[playerid]);
			    SendClientMessage(playerid, COLOR_BARMAN, string);
			    AddPlayerMoney(playerid, -8, -1);
			    AddPlayerHealth(playerid, 6);
			    AcrescentarLucro(8,16);
				return 1;
			}
			case 2:
			{
			    if(GetPlayerMoney(playerid) < 10){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para pagar a Cerveja.");
					return 1;
				}
			    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			    Bebida[playerid] = Bebida[playerid]+2;
				format(string, sizeof(string), "Você tomou uma Cerveja geladinha, porém o nível de álcool no seu sangue aumentou. Atual: %d Mg", Bebida[playerid]);
		        SendClientMessage(playerid, COLOR_BARMAN, string);
			    AddPlayerHealth(playerid, 9);
			    AddPlayerMoney(playerid, -10, -1);
			    AcrescentarLucro(8,20);
			    KillTimer(TimerBebida[playerid]);
				TimerBebida[playerid] = SetTimerEx("Bebado",10000,0,"d",playerid);
			    return 1;
			}
			case 3:
			{
			    if(GetPlayerMoney(playerid) < 15){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para pagar a Pinga.");
					return 1;
				}
			    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			    Bebida[playerid] = Bebida[playerid]+4;
				format(string, sizeof(string), "Pinga BOA! O teor de álcool no seu sangue aumentou. Atual: %d Mg", Bebida[playerid]);
		        SendClientMessage(playerid, COLOR_BARMAN, string);
				AddPlayerHealth(playerid, 10);
				AddPlayerMoney(playerid, -15, -1);
				AcrescentarLucro(8,30);
			    KillTimer(TimerBebida[playerid]);
				TimerBebida[playerid] = SetTimerEx("Bebado",10000,0,"d",playerid);
			  	return 1;
			}
			case 4:
			{
			    if(GetPlayerMoney(playerid) < 25){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para pagar o Whisky Black Label.");
					return 1;
				}
			    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			    Bebida[playerid] = Bebida[playerid]+5;
				format(string, sizeof(string), "Drink tomado. Whisky Black Label(12 anos). O teor de álcool no seu sangue aumentou. Atual: %d Mg", Bebida[playerid]);
				SendClientMessage(playerid, COLOR_BARMAN, string);
				AddPlayerHealth(playerid, 15);
				AddPlayerMoney(playerid, -25, -1);
				AcrescentarLucro(8,50);
			    KillTimer(TimerBebida[playerid]);
				TimerBebida[playerid] = SetTimerEx("Bebado",10000,0,"d",playerid);
 				return 1;
			}
			case 5:
			{
			    if(GetPlayerMoney(playerid) < 10){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para pagar o X-Bacon.");
					return 1;
				}
				Bebida[playerid] = Bebida[playerid]-1;
				SendClientMessage(playerid, COLOR_BARMAN, "Você recebeu um X-Bacon. Bom Lanche.");
				ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
				AddPlayerHealth(playerid, 5);
				AddPlayerMoney(playerid, -10, -1);
				AcrescentarLucro(8,20);
 				return 1;
			}
			case 6:
			{
			    if(GetPlayerMoney(playerid) < 5){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para pagar o X-Burguer.");
					return 1;
				}
				Bebida[playerid] = Bebida[playerid]-1;
				SendClientMessage(playerid, COLOR_BARMAN, "Você recebeu um X-Burguer. Bom Lanche.");
				ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
				AddPlayerHealth(playerid, 2);
				AddPlayerMoney(playerid, -5, -1);
				AcrescentarLucro(8,10);
 				return 1;
			}
			case 7:
			{
			    if(GetPlayerMoney(playerid) < 6){
			        SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro para pagar o X-Salada.");
					return 1;
				}
				Bebida[playerid] = Bebida[playerid]-1;
				SendClientMessage(playerid, COLOR_BARMAN, "Você recebeu um X-Salada. Bom Lanche.");
				ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
				AddPlayerHealth(playerid, 3);
				AddPlayerMoney(playerid, -6, -1);
				AcrescentarLucro(8,12);
 				return 1;
			}
			case 8:
			{
				SendClientMessage(playerid, COLOR_BARMAN, "Volte sempre.");
 				return 1;
			}
		}
	}
	TogglePlayerControllable(playerid,0);
	if(GetPlayerMenu(playerid) == VendoDrogas && IsValidMenu(VendoDrogas)) {
	    switch(row){
	        case 0:
			{
				HideMenuForPlayer(VendoDrogas,playerid);
				MaconhaEsc[playerid] =1;
				ShowMenuForPlayer(QuantidadeDrog,playerid);
				return 1;
			}
			case 1:
			{
				HideMenuForPlayer(VendoDrogas,playerid);
				HeroinaEsc[playerid] =1;
				ShowMenuForPlayer(QuantidadeDrog,playerid);
				return 1;
			}
			case 2:
			{
				HideMenuForPlayer(VendoDrogas,playerid);
				CocainaEsc[playerid] =1;
				ShowMenuForPlayer(QuantidadeDrog,playerid);
				return 1;
			}
			case 3:
			{
			    TogglePlayerControllable(playerid,1);
				return 1;
			}
		}
	}
	TogglePlayerControllable(playerid,0);
	if(GetPlayerMenu(playerid) == QuantidadeDrog && IsValidMenu(QuantidadeDrog)){
	    switch(row){
	        case 0:
			{
				if(MaconhaEsc[playerid] == 1){
				    if(MaconhaMao[playerid] <= 2){
				        TogglePlayerControllable(playerid,1);
					    MaconhaMao[playerid] = MaconhaMao[playerid] + 1;
					    format(string,sizeof(string),"Você pegou mais 1 papelote de Maconha agora você tem %d papelote(s) de Maconha.",MaconhaMao);
					    SendClientMessage(playerid, COLOR_TRAFICANTE, string);
					    MaconhaEsc[playerid] =0;
					    return 1;
					} else {
					    SendClientMessage(playerid, COLOR_GRAY, "Você já está com os bolsos cheios de maconha, só pode levar 3 papelotes");
						return 1;
					}
				}
				else if(HeroinaEsc[playerid] == 1){
					if(HeroinaMao[playerid] <= 2){
					    TogglePlayerControllable(playerid,1);
					    HeroinaMao[playerid] = HeroinaMao[playerid] + 1;
					    format(string,sizeof(string),"Você pegou mais 1 papelote de Heroína agora você tem %d papelote(s) de Heroína.",HeroinaMao);
					    SendClientMessage(playerid, COLOR_TRAFICANTE, string);
					    HeroinaEsc[playerid] =0;
					    return 1;
					} else {
					    SendClientMessage(playerid, COLOR_GRAY, "Você já está com os bolsos cheios de heroína, só pode levar 3 papelotes");
						return 1;
					}
				}
				else if(CocainaEsc[playerid] == 1){
				    if(CocainaMao[playerid] <= 2){
				    	TogglePlayerControllable(playerid,1);
					    CocainaMao[playerid] = CocainaMao[playerid] + 1;
					    format(string,sizeof(string),"Você pegou mais 1 papelote de Cocaína agora você tem %d papelote(s) de Cocaína.",CocainaMao);
					    SendClientMessage(playerid, COLOR_TRAFICANTE, string);
					    CocainaEsc[playerid] =0;
					    return 1;
					} else {
					    SendClientMessage(playerid, COLOR_GRAY, "Você já está com os bolsos cheios de cocaina, só pode levar 3 papelotes");
						return 1;
					}
				}
			}
			case 1:
			{
				if(MaconhaEsc[playerid] == 1){
					if(MaconhaMao[playerid]+2 <= 3){
						TogglePlayerControllable(playerid,1);
					    MaconhaMao[playerid] = MaconhaMao[playerid] + 2;
						SendClientMessage(playerid,COLOR_TRAFICANTE, "Você pegou mais 2 papelotes de Maconha agora você tem 3 papelotes.");
					    MaconhaEsc[playerid] =0;
					    TogglePlayerControllable(playerid,0);
					    return 1;
					} else {
					    SendClientMessage(playerid, COLOR_GRAY, "Você já está com os bolsos cheios de maconha, só pode levar 3 papelotes");
						return 1;
					}
				}
				else if(HeroinaEsc[playerid] == 1){
				    if(HeroinaMao[playerid]+2 <= 3){
					    TogglePlayerControllable(playerid,1);
					    HeroinaMao[playerid] = HeroinaMao[playerid] + 2;
						SendClientMessage(playerid,COLOR_TRAFICANTE, "Você pegou mais 2 papelotes de Heroína agora você tem 3 papelotes.");
					    HeroinaEsc[playerid] =0;
					    return 1;
					} else {
					    SendClientMessage(playerid, COLOR_GRAY, "Você já está com os bolsos cheios de heroina, só pode levar 3 papelotes");
						return 1;
					}
				}
				else if(CocainaEsc[playerid] == 1){
					if(CocainaMao[playerid]+2 <= 3){
					    TogglePlayerControllable(playerid,1);
					    HeroinaMao[playerid] = HeroinaMao[playerid] + 2;
						SendClientMessage(playerid,COLOR_TRAFICANTE, "Você pegou mais 2 papelotes de Cocaína agora você tem 3 papelotes.");
					    CocainaEsc[playerid] =0;
					    return 1;
					} else {
					    SendClientMessage(playerid, COLOR_GRAY, "Você já está com os bolsos cheios de cocaina, só pode levar 3 papelotes");
						return 1;
					}
				}
			}
			case 2:
			{
				if(MaconhaEsc[playerid] == 1){
				    if(MaconhaMao[playerid] == 0){
				        TogglePlayerControllable(playerid,1);
						MaconhaMao[playerid] = MaconhaMao[playerid] + 3;
						SendClientMessage(playerid,COLOR_TRAFICANTE, "Você pegou 3 papelotes de Maconha.");
					    MaconhaEsc[playerid] =0;
					    return 1;
					} else {
					    SendClientMessage(playerid, COLOR_GRAY, "Você já está com os bolsos cheios de maconha, só pode levar 3 papelotes");
						return 1;
					}
				}
				else if(HeroinaEsc[playerid] == 1){
				    if(HeroinaMao[playerid] == 0){
				        TogglePlayerControllable(playerid,1);
						HeroinaMao[playerid] = HeroinaMao[playerid] + 3;
						SendClientMessage(playerid,COLOR_TRAFICANTE, "Você pegou 3 papelotes de Heroína.");
					    HeroinaEsc[playerid] =0;
					    return 1;
					} else {
					    SendClientMessage(playerid, COLOR_GRAY, "Você já está com os bolsos cheios de heroina, só pode levar 3 papelotes");
						return 1;
					}
				}
				else if(CocainaEsc[playerid] == 1){
				    if(CocainaMao[playerid] == 0){
				        TogglePlayerControllable(playerid,1);
						CocainaMao[playerid] = CocainaMao[playerid] + 3;
						SendClientMessage(playerid,COLOR_TRAFICANTE, "Você pegou 3 papelotes de Cocaína.");
					    CocainaEsc[playerid] = 0;
					    return 1;
					} else {
					    SendClientMessage(playerid, COLOR_GRAY, "Você já está com os bolsos cheios de cocaina, só pode levar 3 papelotes");
						return 1;
					}
				}
			}
			case 3:
			{
			    return 1;
			}
		}
		TogglePlayerControllable(playerid,1);
	}
	TogglePlayerControllable(playerid,0);
	if(GetPlayerMenu(playerid) == CargaGeral && IsValidMenu(CargaGeral)) {
	    switch(row){
	        case 0:
			{
			new vehid = GetPlayerVehicleID(playerid);
			new trailerid = GetVehicleTrailer(vehid);
   			if(GetVehicleModel(trailerid) != 435){
			    SendClientMessage(playerid, COLOR_CAMINHONEIRO, "Você não está com o Trailer correto!");
			    return 1;
			}
			GameTextForPlayer(playerid, "~w~Carregando...",15000,0);
		    SendClientMessage(playerid,COLOR_CAMINHONEIRO,"O Trailer está sendo Carregado, aguarde o Carregamento para ir deixar a carga.");
			SetTimerEx("CarregamentoGeral",15000,0,"d",playerid);
			}
			case 1:
			{
			new vehid = GetPlayerVehicleID(playerid);
			new trailerid = GetVehicleTrailer(vehid);
   			if(GetVehicleModel(trailerid) != 584){
			    SendClientMessage(playerid, COLOR_CAMINHONEIRO, "Você não está com o Trailer correto!");
			    return 1;
			}
		    SendClientMessage(playerid,COLOR_CAMINHONEIRO,"O Trailer de Gás precisa ser abastecido na Refinaria, vá até ela para carregar.");
            TogglePlayerControllable(playerid,1);
			SetPlayerCheckpoint(playerid,251.5558, 1395.9694, 10.1558,5.0);
			CheckpointStatus[playerid] = CARREGANDOGAS;
			return 1;
			}
			case 2:
			{
		    SendClientMessage(playerid,COLOR_CAMINHONEIRO,"O Carregamento de drogas é feito no local indicado no radar.");
			EntregadePizza[playerid] = 0;
			MissaoLixeiro[playerid] = 0;
    		ColocandoDrogas[playerid] = 1;
			DrogasNoCaminhao[playerid] = 0;
			PegandoDrogas[playerid] = 0;
			TogglePlayerControllable(playerid,1);
			new drogas = random(5);
			SetPlayerCheckpoint(playerid,DrogasAbastecer[drogas][0],DrogasAbastecer[drogas][1],DrogasAbastecer[drogas][2],3.0);
			return 1;
			}
			case 3:
			{
			new vehid = GetPlayerVehicleID(playerid);
			if(GetVehicleModel(vehid) != 414){
			SendClientMessage(playerid, COLOR_GRAY, "Ei, você não está com o caminhão certo para esse tipo de transporte!");
			return 1;
			}
		    TogglePlayerControllable(playerid,0);
		    GameTextForPlayer(playerid,"~w~Carregando...",20000,0);
		    SetTimerEx("CarregandoRoupas",20000,0,"d",playerid);
		    SendClientMessage(playerid, COLOR_CAMINHONEIRO, "Aguarde enquanto o caminhão está sendo carregado...");
			return 1;
		}
	}
}
	TogglePlayerControllable(playerid,1);
	if(GetPlayerMenu(playerid) == Properties && IsValidMenu(Properties)) {
	    switch(row){
	        case 0:
			{
				PropriedadeSelecionada[playerid] = 0;
				ShowMenuForPlayer(ConfirmacaoNegocio,playerid);
				TogglePlayerControllable(playerid,0);
				return 1;
			}
	        case 1:
			{
				PropriedadeSelecionada[playerid] = 1;
				ShowMenuForPlayer(ConfirmacaoNegocio,playerid);
				TogglePlayerControllable(playerid,0);
				return 1;
			}
	        case 2:
			{
				PropriedadeSelecionada[playerid] = 2;
				ShowMenuForPlayer(ConfirmacaoNegocio,playerid);
				TogglePlayerControllable(playerid,0);
				return 1;
			}
	        case 3:
			{
				PropriedadeSelecionada[playerid] = 3;
				ShowMenuForPlayer(ConfirmacaoNegocio,playerid);
				TogglePlayerControllable(playerid,0);
				return 1;
			}
			case 4:
			{
				PropriedadeSelecionada[playerid] = 4;
				ShowMenuForPlayer(ConfirmacaoNegocio,playerid);
				TogglePlayerControllable(playerid,0);
				return 1;
			}
			case 5:
			{
				PropriedadeSelecionada[playerid] = 5;
				ShowMenuForPlayer(ConfirmacaoNegocio,playerid);
				TogglePlayerControllable(playerid,0);
				return 1;
			}
			case 6:
			{
				PropriedadeSelecionada[playerid] = 6;
				ShowMenuForPlayer(ConfirmacaoNegocio,playerid);
				TogglePlayerControllable(playerid,0);
				return 1;
			}
			case 7:
			{
				PropriedadeSelecionada[playerid] = 7;
				ShowMenuForPlayer(ConfirmacaoNegocio,playerid);
				TogglePlayerControllable(playerid,0);
				return 1;
			}
			case 8:
			{
				PropriedadeSelecionada[playerid] = 8;
				ShowMenuForPlayer(ConfirmacaoNegocio,playerid);
				TogglePlayerControllable(playerid,0);
				return 1;
			}
			case 9:
			{
				PropriedadeSelecionada[playerid] = 9;
				ShowMenuForPlayer(ConfirmacaoNegocio,playerid);
				TogglePlayerControllable(playerid,0);
				return 1;
			}
			case 10:
			{
				PropriedadeSelecionada[playerid] = 10;
				ShowMenuForPlayer(ConfirmacaoNegocio,playerid);
				TogglePlayerControllable(playerid,0);
				return 1;
			}
			case 11:
			{
				ShowMenuForPlayer(Properties2,playerid);
   				TogglePlayerControllable(playerid,0);
   				return 1;
			}
		}
	}
	TogglePlayerControllable(playerid,0);
	if(GetPlayerMenu(playerid) == Properties2 && IsValidMenu(Properties2)) {
	    switch(row){

	    	case 0:
	    	{
				PropriedadeSelecionada[playerid] = 11;
				ShowMenuForPlayer(ConfirmacaoNegocio,playerid);
				TogglePlayerControllable(playerid,0);
				return 1;
			}
			case 1:
			{
			    PropriedadeSelecionada[playerid] = 12;
				ShowMenuForPlayer(ConfirmacaoNegocio,playerid);
				TogglePlayerControllable(playerid,0);
				return 1;
			}
			case 2:
			{
			    PropriedadeSelecionada[playerid] = 13;
				ShowMenuForPlayer(ConfirmacaoNegocio,playerid);
				TogglePlayerControllable(playerid,0);
				return 1;
			}
			case 3:
			{
			    PropriedadeSelecionada[playerid] = 14;
				ShowMenuForPlayer(ConfirmacaoNegocio,playerid);
				TogglePlayerControllable(playerid,0);
				return 1;
			}
			case 4:
			{
			    PropriedadeSelecionada[playerid] = 15;
				ShowMenuForPlayer(ConfirmacaoNegocio,playerid);
				TogglePlayerControllable(playerid,0);
				return 1;
			}
			case 5:
			{
			    PropriedadeSelecionada[playerid] = 16;
				ShowMenuForPlayer(ConfirmacaoNegocio,playerid);
				TogglePlayerControllable(playerid,0);
				return 1;
			}
			case 6:
			{
			    ShowMenuForPlayer(Properties,playerid);
				TogglePlayerControllable(playerid,0);
				return 1;
			}
		}
	}
	TogglePlayerControllable(playerid,1);
	if(GetPlayerMenu(playerid) == ConfirmacaoNegocio && IsValidMenu(ConfirmacaoNegocio)) {
	    switch(row){
	        case 0: ComprarPropriedade(playerid,PropriedadeSelecionada[playerid]);
	        case 1: TogglePlayerControllable(playerid,1);
		}
	}
	TogglePlayerControllable(playerid,1);
	if(GetPlayerMenu(playerid) == Sorvetes && IsValidMenu(Sorvetes)) {
	    switch(row){
	        case 0: ComprarSorvete(playerid,0);
	        case 1: ComprarSorvete(playerid,1);
	        case 2: ComprarSorvete(playerid,2);
	        case 3: ComprarSorvete(playerid,3);
	        case 4: ComprarSorvete(playerid,4);
	        case 5: ComprarSorvete(playerid,5);
	        case 6: ComprarSorvete(playerid,6);
	        case 7: ComprarSorvete(playerid,7);
	        case 8: ComprarSorvete(playerid,8);
		}
	}
	if(GetPlayerMenu(playerid) == Sorvetes2 && IsValidMenu(Sorvetes2)) {
	    switch(row){
	        case 0: ComprarSorvete2(playerid,0);
	        case 1: ComprarSorvete2(playerid,1);
	        case 2: ComprarSorvete2(playerid,2);
		}
	}
	TogglePlayerControllable(playerid,0);
	if(GetPlayerMenu(playerid) == OpcoesAlarme && IsValidMenu(OpcoesAlarme)) {
	    switch(row){
	        case 0:
	        {
				for(new i=0;i<SLOTS2;i++){
					if(i != playerid){
						SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid),i, 0, 1);
					}
				}
				SendClientMessage(playerid, COLOR_AZULPLUS, "Veículo Trancado!");
				new Float:X, Float:Y, Float:Z;
				PlayerPlaySound(playerid,1056,X,Y,Z);
				format(string,sizeof(string),"[INFO] %s trancou um veículo.",PlayerName(playerid));
				writelog(string);
				SalvarAlarme(GetPlayerVehicleID(playerid),1);
				TogglePlayerControllable(playerid,1);
				return 1;
			}
			case 1:
			{
				for(new i=0;i<SLOTS2;i++){
					if(i != playerid){
                        SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid),i, 0, 0);
					}
				}
				SendClientMessage(playerid, COLOR_AZULPLUS, "Veículo Destrancado!");
				new Float:X, Float:Y, Float:Z;
				PlayerPlaySound(playerid,1056,X,Y,Z);
				format(string,sizeof(string),"[INFO] %s destrancou um veículo.",PlayerName(playerid));
				writelog(string);
				SalvarAlarme(GetPlayerVehicleID(playerid),2);
				TogglePlayerControllable(playerid,1);
				return 1;
			}
			case 2:
			{
				for(new i=0;i<SLOTS2;i++){
					if(i != playerid){
						SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid),i, 0, 1);
					}
				}
				SendClientMessage(playerid, COLOR_AZULPLUS, "Alarme ativado. Modelo: Alarmar e impossível dirigir.");
				new Float:X, Float:Y, Float:Z;
				PlayerPlaySound(playerid,1056,X,Y,Z);
				format(string,sizeof(string),"[INFO] %s Ativou o alarme c/ impossível de dirigir..",PlayerName(playerid));
				writelog(string);
				SalvarAlarme(GetPlayerVehicleID(playerid),3);
				TogglePlayerControllable(playerid,1);
				return 1;
			}
			case 3:
			{
				SendClientMessage(playerid, COLOR_AZULPLUS, "Alarme ativado. Modelo: Avisar a polícia, sem alarmar.");
				new Float:X, Float:Y, Float:Z;
				PlayerPlaySound(playerid,1056,X,Y,Z);
				format(string,sizeof(string),"[INFO] %s Ativou o alarme Avisar a polícia, sem alarmar.",PlayerName(playerid));
				writelog(string);
				SalvarAlarme(GetPlayerVehicleID(playerid),4);
				TogglePlayerControllable(playerid,1);
				return 1;
			}
			case 4:
			{
				SendClientMessage(playerid, COLOR_AZULPLUS, "Todos os Alarmes foram desativados.");
				new Float:X, Float:Y, Float:Z;
				PlayerPlaySound(playerid,1056,X,Y,Z);
				format(string,sizeof(string),"[INFO] %s Desativou todos os Alarmes.",PlayerName(playerid));
				writelog(string);
				SalvarAlarme(GetPlayerVehicleID(playerid),0);
				TogglePlayerControllable(playerid,1);
				return 1;
			}
			case 5:
			{
			    return 1;
			}
		}
	}
	TogglePlayerControllable(playerid,1);
	if(GetPlayerMenu(playerid) == CPD_First && IsValidMenu(CPD_First)) {
	    switch(row){
	        case 0: AplicarProfissao(playerid,1);
	        case 1: AplicarProfissao(playerid,2);
	        case 2: AplicarProfissao(playerid,11);
	        case 3: AplicarProfissao(playerid,10);
	        case 4: AplicarProfissao(playerid,8);
	        case 5: AplicarProfissao(playerid,12);
	        case 6: AplicarProfissao(playerid,13);
	        case 7: AplicarProfissao(playerid,34);
		}
	}
	if(GetPlayerMenu(playerid) == CPD_Second && IsValidMenu(CPD_Second)) {
	    switch(row){
	        case 0: AplicarProfissao(playerid,14);
	        case 1: AplicarProfissao(playerid,6);
	        case 2: AplicarProfissao(playerid,3);
	        case 3: AplicarProfissao(playerid,7);
	        case 4: AplicarProfissao(playerid,17);
	        case 5: AplicarProfissao(playerid,26);
	        case 6: AplicarProfissao(playerid,30);
	        case 7: AplicarProfissao(playerid,9);
	        case 8: AplicarProfissao(playerid,27);
	        case 9: AplicarProfissao(playerid,37);
	        case 10: AplicarProfissao(playerid,16);
		}
	}
	if(GetPlayerMenu(playerid) == CPD_Third && IsValidMenu(CPD_Third)) {
	    switch(row){
	        case 0: AplicarProfissao(playerid,32);
	        case 1: AplicarProfissao(playerid,35);
	        case 2: AplicarProfissao(playerid,36);
	        case 3: AplicarProfissao(playerid,20);
	        case 4: AplicarProfissao(playerid,18);
	        case 5: AplicarProfissao(playerid,31);
	        case 6: AplicarProfissao(playerid,21);
	        case 7: AplicarProfissao(playerid,28);
	        case 8: AplicarProfissao(playerid,29);
	        case 9: AplicarProfissao(playerid,33);
	        case 10: AplicarProfissao(playerid,15);
	        case 11: AplicarProfissao(playerid,23);
		}
	}
	if(GetPlayerMenu(playerid) == CPD_Fourth && IsValidMenu(CPD_Fourth)) {
	    switch(row){
	        case 0: AplicarProfissao(playerid,39);
	        case 1: AplicarProfissao(playerid,38);
	        case 2: AplicarProfissao(playerid,19);
	        case 3: AplicarProfissao(playerid,22);
		}
	}
	if(GetPlayerMenu(playerid) == CPD_Fifth && IsValidMenu(CPD_Fifth)) {
	    switch(row){
	        case 0: AplicarProfissao(playerid,40);
	        case 1: AplicarProfissao(playerid,5);
	        case 2: AplicarProfissao(playerid,4);
	        case 3: AplicarProfissao(playerid,24);
		}
	}
	if(GetPlayerMenu(playerid) == CPD_Sixth && IsValidMenu(CPD_Sixth)) {
	    switch(row){
	        case 0: AplicarProfissao(playerid,25);
		}
	}
	return 1;
}
public CarregandoRoupas(playerid)
{
	TogglePlayerControllable(playerid,1);
	CarregamentoRoupas[playerid] = 1;
	SendClientMessage(playerid, COLOR_CAMINHONEIRO, "Caminhão carregado! Agora vá até o CP indicado em seu mapa entregar as roupas!");
	DisablePlayerCheckpoint(playerid);
	SetPlayerCheckpoint(playerid,2242.1575,-1663.0786,15.4766,4.0);
	CheckpointStatus[playerid] = TRANSPORTE_ROUPAS;
}
public Relogio(){
    new msghora[256];
    format(msghora,sizeof(msghora),"%s:%s",ApplyZero(HoraJogo),ApplyZero(MinutoJogo));
	for(new i = 0; i < SLOTS2; i++){
		if(IsPlayerConnected(i) && Logado[i] == 1){
			TextDrawHideForPlayer(i,TextHora[i]);
			TextDrawSetString(TextHora[i], msghora);
			TextHora[i] = TextDrawCreate(540.000000,6.000000,msghora);
			TextDrawAlignment(TextHora[i],0);
			TextDrawFont(TextHora[i],2);
			TextDrawLetterSize(TextHora[i],0.800000,1.500000);
			TextDrawColor(TextHora[i],COLOR_AZUL2);
			TextDrawSetOutline(TextHora[i],1);
			TextDrawSetProportional(TextHora[i],1);
			TextDrawSetShadow(TextHora[i],1);
			TextDrawShowForPlayer(i,TextHora[i]);
		}
	}
}
public Data(){
	new msgdata[256];
	for(new i = 0; i < SLOTS2; i++){
		if(IsPlayerConnected(i) && Logado[i] == 1){
		    if(GetPlayerWantedLevel(i) == 0) format(msgdata,sizeof(msgdata),"%s ~n~%s/%s/%s",DiaNameGT[ValorDia],ApplyZero(DiaJogo),ApplyZero(MesJogo),ApplyZero(AnoJogo));
			else format(msgdata,sizeof(msgdata),"~n~ ~n~%s ~n~%s/%s/%s",DiaNameGT[ValorDia],ApplyZero(DiaJogo),ApplyZero(MesJogo),ApplyZero(AnoJogo));
			TextDrawHideForPlayer(i,TextData[i]);
			TextDrawSetString(TextData[i], msgdata);
			TextData[i] = TextDrawCreate(500.000000,97.000000,msgdata);
			TextDrawAlignment(TextData[i],0);
			TextDrawBackgroundColor(TextData[i],0x000000ff);
			TextDrawFont(TextData[i],3);
			TextDrawLetterSize(TextData[i],0.500000,2.000000);
			TextDrawColor(TextData[i],COLOR_YELLOW);
			TextDrawSetOutline(TextData[i],1);
			TextDrawSetProportional(TextData[i],1);
			TextDrawSetShadow(TextData[i],1);
			TextDrawShowForPlayer(i,TextData[i]);
		}
	}
}
public XPTText(playerid){
	new mostrador[256];
   	format(mostrador,sizeof(mostrador),"Experience Points: %d/%d",pStats[playerid][ExPoints],ProfExp[Profissao[playerid]]);
	TextDrawHideForPlayer(playerid,XPT[playerid]);
	TextDrawSetString(XPT[playerid], mostrador);
	XPT[playerid] = TextDrawCreate(534.000000,432.000000,mostrador);
	TextDrawAlignment(XPT[playerid],2);
	TextDrawFont(XPT[playerid],0);
	TextDrawLetterSize(XPT[playerid],0.600000,1.299999);
	TextDrawColor(XPT[playerid],0x00ff0066);
	TextDrawSetOutline(XPT[playerid],1);
	TextDrawSetProportional(XPT[playerid],1);
	TextDrawSetShadow(XPT[playerid],1);
	TextDrawShowForPlayer(playerid,XPT[playerid]);
}

stock ComprarCarro(playerid)
{
    new string[256];
    if(!IsPlayerInAnyVehicle(playerid)){
    	SendClientMessage(playerid, COLOR_GRAY, "Você não está em um veículo!");
    	TogglePlayerControllable(playerid,1);
        return 1;
	}
	if(pStats[playerid][LastVeh] >= MAX_PLAYER_VEHICLES){
		SendClientMessage(playerid, COLOR_GRAY, "Limite de veículos por jogador excedido pelo gamemode.");
        TogglePlayerControllable(playerid,1);
		return 1;
	}
	if(GetPlayerVehicleID(playerid) != carvenda1 && GetPlayerVehicleID(playerid) != carvenda2 && GetPlayerVehicleID(playerid) != carvenda3 && GetPlayerVehicleID(playerid) != carvenda4 && GetPlayerVehicleID(playerid) != carvenda5 && GetPlayerVehicleID(playerid) != carvenda6 && GetPlayerVehicleID(playerid) != carvenda7 && GetPlayerVehicleID(playerid) != carvenda8 && GetPlayerVehicleID(playerid) != carvenda9 && GetPlayerVehicleID(playerid) != carvenda10){
		SendClientMessage(playerid, COLOR_GRAY, "Esse veículo não está à venda!");
		TogglePlayerControllable(playerid,1);
		return 1;
	}
	if(GetPlayerMoney(playerid) < GetVehiclePrice(GetVehicleModel(GetPlayerVehicleID(playerid)))){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro!");
	    format(string,sizeof(string),"Esse veículo custa: $%d",GetVehiclePrice(GetVehicleModel(GetPlayerVehicleID(playerid))));
		SendClientMessage(playerid, COLOR_GRAY, string);
		TogglePlayerControllable(playerid,1);
		return 1;
	}
	else{
	    AddPlayerMoney(playerid,-GetVehiclePrice(GetVehicleModel(GetPlayerVehicleID(playerid))),-1);
	    new Float:X,Float:Y,Float:Z,Float:ang;
	    X = 554.0287;
		Y = -1248.5660;
		Z = 16.4709;
		ang = 298.9612;
		new cor1,cor2;
		cor1 = random(126);
		cor2 = random(126);
		format(string,sizeof(string),"Você comprou esse veículo no valor de $%d",GetVehiclePrice(GetVehicleModel(GetPlayerVehicleID(playerid))));
		SendClientMessage(playerid, COLOR_WHITE, string);
		SendClientMessage(playerid, COLOR_WHITE, "Seu carro está na frente da concecionária, vá busca-lo.");
        AcrescentarLucro(15,GetVehiclePrice(GetVehicleModel(GetPlayerVehicleID(playerid)))/4);
		RemovePlayerFromVehicle(playerid);
		TogglePlayerControllable(playerid,1);
		new File:temp;
		format(string, sizeof(string), "%d %f %f %f %f %d %d //Comprado na concecionaria por: %s\r\n", GetVehicleModel(GetPlayerVehicleID(playerid)),X,Y,Z,ang,cor1,cor2,PlayerName(playerid));
		temp = fopen("Utilidades/carrosrpg.rpg", io_append);
		fwrite(temp, string);
        fclose(temp);
       	LastCar++;
	   	SetTimerEx("SetCar",50,0,"dffffddd",GetVehicleModel(GetPlayerVehicleID(playerid)),X,Y,Z,ang,cor1,cor2,playerid);
	   	return 1;
	}
}
public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(newstate == PLAYER_STATE_DRIVER){
	    new string[256];
	    if(!compare(vStats[GetPlayerVehicleID(playerid)][VChave],"Servidor")){
	    	if(!compare(vStats[GetPlayerVehicleID(playerid)][VChave],PlayerName(playerid)) && !UsingChaveMestra[playerid][GetPlayerVehicleID(playerid)]){
			    if(pStats[playerid][ChaveMestra] > 0){
			    	TogglePlayerControllable(playerid,false);
			    	SendClientMessage(playerid, COLOR_WHITE, "Você tem uma chave mestra, para usa-la digite /usarchavemestra e para não usa-la digite /naousarchavemestra");
					PChaveMestra[playerid] = 1;
				} else {
					if(!strcmp(vStats[GetPlayerVehicleID(playerid)][VDono], PlayerName(playerid), false)){
	    				SendClientMessage(playerid, COLOR_GREEN, "Veículo ligado.");
				        SendClientMessage(playerid, COLOR_GRAY, "Você é o dono deste veículo, está usando a chave reserva.");
						format(string,sizeof(string),"A chave Original está com: %s.", vStats[GetPlayerVehicleID(playerid)][VChave]);
						SendClientMessage(playerid, COLOR_GRAY, string);
					}
				    if(!compare(vStats[GetPlayerVehicleID(playerid)][VChave],PlayerName(playerid))){
						TogglePlayerControllable(playerid, 0);
						SendClientMessage(playerid, COLOR_GRAY, "Você não possui as chaves do veículo para liga-lo.");
						SendClientMessage(playerid, COLOR_GRAY, "DICA: Compre uma chave mestra e tente abrir.");
						SendClientMessage(playerid, COLOR_WHITE, "Para sair do veículo pressione ENTER ou F");
					}
				}
			} else {
			    SendClientMessage(playerid, COLOR_GREEN, "Veículo ligado.");
	 			if(!strcmp(vStats[GetPlayerVehicleID(playerid)][VDono], PlayerName(playerid), false)){
					if(vStats[GetPlayerVehicleID(playerid)][Dividas] > 0){
					    if(vStats[GetPlayerVehicleID(playerid)][AlertadoMulta] == 0){
				    		SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "[INFO] Seu veículo está com multas atrasadas!");
				    		SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "[INFO] Seu veículo sendo alertado 2x por um oficial será apreendido.");
				    		SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "[INFO] Aconselhamos que pague!");
						} else if((vStats[GetPlayerVehicleID(playerid)][AlertadoMulta] != DiaJogo) && (vStats[GetPlayerVehicleID(playerid)][AlertadoMulta] != 0)){
				    		SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "[INFO] Seu veículo está com multas atrasadas!");
				    		SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "[INFO] Seu veículo já foi alertado, próxima vez poderá ser preso.");
				    		SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "[INFO] Aconselhamos que pague!");
						}
					}
				}
				if(!compare(PlayerName(playerid),vStats[GetPlayerVehicleID(playerid)][VDono])){
				    SendClientMessage(playerid, COLOR_GRAY, "Cuidado! Esse veículo não é seu, portanto olhe lá hein?!");
				}
			}
		}
	}
	if(newstate==PLAYER_STATE_ONFOOT && AbastecendoCarroAluguel[playerid]!=0){
        AbastecendoCarroAluguel[playerid] = 0;
        DisablePlayerRaceCheckpoint(playerid);
        SendClientMessage(playerid, COLOR_GRAY, "[LOCADORA] Seu infeliz, porque não terminou o progresso para abastecer o veículo? ¬¬");
	}
	if(newstate==PLAYER_STATE_ONFOOT && ReparandoCarroAluguel[playerid]!=0){
        ReparandoCarroAluguel[playerid] = 0;
        DisablePlayerRaceCheckpoint(playerid);
        SendClientMessage(playerid, COLOR_GRAY, "[LOCADORA] Seu infeliz, porque não terminou o progresso para reparar o veículo? ¬¬");
	}
	if(newstate==PLAYER_STATE_ONFOOT && PropostaCard[playerid]==1){
		PropostaCard[playerid] = 0;
  		SendClientMessage(playerid, COLOR_WHITE, "Você saiu do veículo e não usou o Virtual Card!");
	}
	if(newstate==PLAYER_STATE_DRIVER){
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525){
	        isTowtruck[playerid]=1;
	        Reboques++;
		}
	}
    if(newstate == PLAYER_STATE_DRIVER){
	    new veh = GetPlayerVehicleID(playerid);
	    if(veh == LimoHistoria1 || veh == LimoHistoria2){
	    	RemovePlayerFromVehicle(playerid);
			SendClientMessage(playerid, COLOR_GRAY, "Ei, essa limosine faz parte de uma das histórias do jogo! É proibido usa-la!");
		}
	}
	if(newstate == PLAYER_STATE_DRIVER){
	    new model = GetPlayerVehicleID(playerid),string[256];
	    if(model == carvenda1 || model ==  carvenda2 || model == carvenda3 || model == carvenda4 || model == carvenda5 || model == carvenda6 || model == carvenda7 || model == carvenda8 || model == carvenda9 || model == carvenda10){
			format(string,sizeof(string),"$%d",GetVehiclePrice(GetVehicleModel(GetPlayerVehicleID(playerid))));
			BuyCar = CreateMenu("Opcoes",2,30.0,140.0,220.0,0.0);
			SetMenuColumnHeader(BuyCar,0,"Veiculo a venda");
			AddMenuItem(BuyCar,0,"Comprar");
			AddMenuItem(BuyCar,0,"Sair");
			AddMenuItem(BuyCar,1,string);
            ShowMenuForPlayer(BuyCar,playerid);
			TogglePlayerControllable(playerid, 0);
		}
	}
	if(newstate == PLAYER_STATE_DRIVER){
	    new string[256];
      	new model = GetPlayerVehicleID(playerid);
        if(model == alugado1 || model == alugado2 || model == alugado3 || model == alugado4 || model == alugado5 || model == alugado6 || model == alugado7 || model == alugado8){
            if(Profissao[playerid] == LOCADOR_DE_CARROS){
				new Float:health;
				GetVehicleHealth(model,health);
				if(health < 800){
				    SendClientMessage(playerid, COLOR_LOCADOR_DE_CARROS, "Esse carro de aluguel precisa ser reparado, leve-o para a oficina, siga o CheckPoint no radar...");
                    SetPlayerRaceCheckpoint(playerid,1,2126.0803,-1134.9370,25.2787,0.0,0.0,0.0,3.0);
                    ReparandoCarroAluguel[playerid] = 1;
				}
				else if(vStats[model][gasolina] < 50){
				    SendClientMessage(playerid, COLOR_LOCADOR_DE_CARROS, "Esse carro de aluguel precisa ser abastecido, leve-o para o posto, siga o CheckPoint no radar...");
					SetPlayerRaceCheckpoint(playerid,1,1004.9283,-939.7493,41.9812,0.0,0.0,0.0,3.0);
					AbastecendoCarroAluguel[playerid] = 1;
				}
				else{
				    SendClientMessage(playerid, COLOR_GRAY, "Esse carro de aluguel não precisa ser abastecido nem reparado...");
				    RemovePlayerFromVehicle(playerid);
				}
			}
			else{
            	if(CarroAlugado[playerid] == 0){
        			SendClientMessage(playerid, COLOR_LOCADOR_DE_CARROS, "Esse carro é um carro de aluguel,");
        			SendClientMessage(playerid, COLOR_LOCADOR_DE_CARROS, "se quiser alugar ele fale com algum Locador de Carros!");
            		format(string, sizeof(string), "Preço do aluguel: $%d,00 dólares",AluguelPreco(GetPlayerVehicleID(playerid)));
            		SendClientMessage(playerid, COLOR_WHITE, string);
   				 	format(string, sizeof(string), "O Jogador %s entrou num carro de aluguel ofereça seu serviço com o /alugarcarro [id].",PlayerName(playerid));
      				SendClientMessageCarros(COLOR_LOCADOR_DE_CARROS, string);
					TogglePlayerControllable(playerid, 0);
					JogadorNoCarro[playerid] = 1;
				}
				else if(CarroAlugado[playerid] == 1){
				    if(AluguelCarro[playerid] == model){
				    	SendClientMessage(playerid, COLOR_LOCADOR_DE_CARROS, "Aproveite bem esse carro enquanto o prazo do aluguel continua!");
					}
					else{
					    SendClientMessage(playerid, COLOR_GRAY, "Não foi esse veículo que você alugou...");
					}
				}
			}
		}
	}
	if(newstate == PLAYER_STATE_PASSENGER){
	    OnPlayerEnterVehicleAsPassenger(playerid,GetPlayerVehicleID(playerid));
	}
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER){
		if(vStats[GetPlayerVehicleID(playerid)][Fume] == 1){
			FumeLigado[playerid] = 1;
			for(new i; i<SLOTS2; i++){
		   		ShowPlayerNameTagForPlayer(i,playerid,0);
		   	}
		}
	}
	if(newstate == PLAYER_STATE_ONFOOT){
	    if(FumeLigado[playerid] == 1){
			for(new i; i<SLOTS2; i++){
		   		ShowPlayerNameTagForPlayer(i,playerid,1);
				FumeLigado[playerid] = 0;
			}
		}
	}
	if(newstate == PLAYER_STATE_DRIVER){
		if(strcmp(vStats[GetPlayerVehicleID(playerid)][VDono],PlayerName(playerid),true)){
            new string[256];
			VerAlarme = vStats[GetPlayerVehicleID(playerid)][VAlarme];
			if(VerAlarme == 3){
			    new Float:X, Float:Y, Float:Z;
				PlayerPlaySound(playerid,42801,X,Y,Z);
			    SendClientMessage(playerid, COLOR_RED2, "Esse veículo está trancado. Você ativou o alarme dele!");
			    RemovePlayerFromVehicle(playerid);
			    return 1;
			}
			if(VerAlarme == 4){
			    new ativar = random(4);
			    if(ativar == 0 || ativar == 1 || ativar == 2){
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(playerid,X,Y,Z);
					format(string, sizeof(string), "[CENTRAL] Oficiais. [Crime: Roubo a carro] [Modelo: %s] O alarme foi acionado. Suspeito visto pela última vez no local marcado. Cheque a ocorrência.",GetVehicleName(GetVehicleModel(GetPlayerVehicleID(playerid))));
					SendClientMessageToAll(COLOR_COP_MILITAR, string);
				    for(new i=0; i<SLOTS2; i++){
				        if(Profissao[i] == EXERCITO || Profissao[i] == COP_MILITAR || Profissao[i] == DELEGADO || Profissao[i] == COP_RODOVIARIO || Profissao[i] == COP_SWAT){
                            CarroForagido[playerid] = GetPlayerVehicleID(playerid);
							ProcuradoRCarro[playerid] = 1;
							Perseguido[playerid] = playerid;
							SetPlayerCheckpoint(i,X,Y,Z,3.0);
							CheckpointStatus[i] = PERSE;
							SetTimerEx("FimCP",180000,0,"d",i);
   						}
					}
				}
			}
		}
		if(EntregaCarro[playerid] == 1){
      		EntregaCarro[playerid] = 0;
      		NaoSair[playerid] = 1;
			return 1;
		}
	}
    new veh = GetPlayerVehicleID(playerid);
    if(veh == CarroContrabando1 || veh == CarroContrabando2 || veh == CarroContrabando3 || veh == CarroContrabando4 || veh == CarroContrabando5){
		if(Profissao[playerid] == CONTRABANDISTA || IsPlayerAdmin(playerid)){
			if(PodePegar[playerid] == 1){
			    EntregaCarro[playerid] = 1;
			    GameTextForPlayer(playerid, "~w~Toma o ~r~Carro!", 5000, 1);
				SendClientMessage(playerid, COLOR_RED2, "ATENÇÃO! Não bata o carro entregue pelo menos meio íntegro.");
				SetPlayerCheckpoint(playerid,-2212.6379,604.8463,35.3511,3.0);
				CheckpointStatus[playerid] = CONTRABANDOCAR2;
			} else {
			    RemovePlayerFromVehicle(playerid);
			    SendClientMessage(playerid, COLOR_GRAY, "Você não pode pegar esse carro agora.");
			    return 1;
			}
		} else {
			RemovePlayerFromVehicle(playerid);
			SendClientMessage(playerid, COLOR_GRAY, "Você não pode entrar nesse veículo!");
	    	return 1;
		}
	}
	if(newstate == PLAYER_STATE_DRIVER){
		new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
	  	if(modelo == 481 || modelo == 509 || modelo == 510 || modelo ==594){
			SendClientMessage(playerid, COLOR_GREEN, "[INFO] Ande com a bicicleta na calçada ou na beirada da calçada.");
			SendClientMessage(playerid, COLOR_GREEN, "[INFO] Se um policial ver você que nem doido na rua, já sabe...");
	    	return 1;
	    }
	}
	if(newstate == PLAYER_STATE_DRIVER){
		if(CarregamentoRoupas[playerid] == 1){
			new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
		  	if(modelo == 414){
    	   		KillTimer(avisado[playerid]);
       			SendClientMessage(playerid, COLOR_CAMINHONEIRO, "Carga retomada.");
       			return 1;
	   		} else {
       	    	SendClientMessage(playerid, COLOR_CAMINHONEIRO, "Você não está no veículo certo para continuar o carregamento.");
       	    	return 1;
	 		 }
		}
	}
	if(newstate == PLAYER_STATE_DRIVER){
   		if(CheckpointStatus[playerid] == CARREGAMENTO){
			new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
			if(modelo == 515){
		       	KillTimer(avisado[playerid]);
			    SendClientMessage(playerid, COLOR_CAMINHONEIRO, "Carga retomada.");
			    return 1;
			} else {
			    SendClientMessage(playerid, COLOR_CAMINHONEIRO, "Você não está no veículo certo para continuar o carregamento.");
			    return 1;
			}
		}
		else if(Carga[playerid] == 1){
			new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
			if(modelo == 428){
			    if(PegarGrana[playerid] == 0){
			       	KillTimer(avisado[playerid]);
			       	SendClientMessage(playerid, COLOR_TRANSPORTE_DE_VALORES, "Carro-forte retomado.");
				    return 1;
				} else {
			       	KillTimer(EntregandoGrana[playerid]);
			       	SendClientMessage(playerid, COLOR_TRANSPORTE_DE_VALORES, "Malote retomado.");
				    return 1;
				}
			} else {
			    SendClientMessage(playerid, COLOR_CAMINHONEIRO, "Você não está no carro certo.");
			    return 1;
			}
		}
		else if(Pedras[playerid] == 1){
			new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
			if(modelo == 406){
		       	KillTimer(avisado[playerid]);
		       	SendClientMessage(playerid, COLOR_PEDREIRA, "Caminhão retomado.");
			    return 1;
			} else {
			    SendClientMessage(playerid, COLOR_CAMINHONEIRO, "Você não está no carro certo.");
			    return 1;
			}
		}
		else if(DrogasNoCaminhao[playerid] == 1){
			new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
			if(modelo == 515){
		       	KillTimer(avisado[playerid]);
		       	SendClientMessage(playerid, COLOR_CAMINHONEIRO, "Caminhão de Drogas retomado.");
			    return 1;
			} else {
			    SendClientMessage(playerid, COLOR_CAMINHONEIRO, "Você não está no carro certo.");
			    return 1;
			}
		}
		else if(ColocandoDrogas[playerid] == 1){
			new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
			if(modelo == 515){
		       	KillTimer(avisado[playerid]);
		       	SendClientMessage(playerid, COLOR_CAMINHONEIRO, "Caminhão de Drogas retomado.");
			    return 1;
			} else {
			    SendClientMessage(playerid, COLOR_CAMINHONEIRO, "Você não está no carro certo.");
			    return 1;
			}
		}
		else if(EntregaLimo[playerid] == 1){
   			new modelo = GetPlayerVehicleID(playerid);
			if(modelo  == limosine1 || modelo == limosine2){
		       	KillTimer(avisado[playerid]);
		       	SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Limosine retomada, complete seu trabalho.");
			    return 1;
			} else {
			    SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Você não está no carro certo.");
			    return 1;
			}
		}
		else if(EntregadePizza[playerid]==1){
	       	new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
			if(modelo == 448){
		       	KillTimer(avisado[playerid]);
		       	SendClientMessage(playerid, COLOR_CAMINHONEIRO, "Moto de Pizzas retomada.");
			    return 1;
			} else {
			    SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Você não está no carro certo.");
			    return 1;
			}
		}
		else if(FazendaInProgress[playerid] == 1){
	       	new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
			if(modelo == 532){
		       	KillTimer(avisado[playerid]);
		       	SendClientMessage(playerid, COLOR_CAMINHONEIRO, "Colheita retomada.");
			    return 1;
			} else {
			    SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Você não está no carro certo.");
			    return 1;
			}
	    }
	}
	if(newstate == PLAYER_STATE_ONFOOT){
	    if(DerbyIniciado[playerid] == 1 && PlayerDerby[playerid] == 1){
        	DerbyIniciado[playerid] = 0;
        	SendClientMessage(playerid, COLOR_GRAY, "[ESTÁDIO] Você foi desclassificado pois abandonou seu carro, obrigado pela participação.");
			GameTextForPlayer(playerid,"~r~Desclassificado!",3000,4);
	   	   	new string[256];
			format(string, sizeof(string), "[ESTÁDIO] %s foi desclassificado pois saiu do seu carro, sua posição: %d/%d", PlayerName(playerid),QtDerbeiro(),contagemof);
			SendClientMessageToAll(COLOR_PALHA, string);
			PlayerDerby[playerid] = 0;
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, 2693.9199,-1701.8795,11.0741);
			return 1;
 		}
	}
	if(newstate == PLAYER_STATE_ONFOOT){
	    if(isTowtruck[playerid] == 1){
	 	    isTowtruck[playerid]=0;
		    Reboques--;
		    return 1;
		}
		else if(FazendaInProgress[playerid] == 1){
		    SendClientMessage(playerid,COLOR_GREEN,"Você tem 10 segundos para voltar ao carro de plantio e terminar a plantação e colheita.");
		    avisado[playerid]=SetTimerEx("TerminarCarregamento",10000,0,"d",playerid);
		    return 1 ;
	    }
		else if(EntregaLimo[playerid] == 1){
		    SendClientMessage(playerid,COLOR_GREEN,"Você tem 10 segundos para voltar a Limosine da Empresa. E completar o seu trabalho.");
		    avisado[playerid]=SetTimerEx("TerminarCarregamento",10000,0,"d",playerid);
		    return 1 ;
	    }
 		else if(EntregadePizza[playerid]==1){
		    SendClientMessage(playerid,COLOR_GREEN,"Você tem 10 segundos para voltar ao veículo. E entregar o resto das pizzas");
		    avisado[playerid]=SetTimerEx("TerminarCarregamento",10000,0,"d",playerid);
		    return 1 ;
	    }
		else if(CheckpointStatus[playerid] == CARREGAMENTO){
		    SendClientMessage(playerid,COLOR_GREEN,"Você tem 10 segundos para voltar ao veículo. E entregar a carga.");
		    avisado[playerid]=SetTimerEx("TerminarCarregamento",10000,0,"d",playerid);
			return 1;
		}
		else if(CarregamentoRoupas[playerid] == 1){
            SendClientMessage(playerid,COLOR_GREEN,"Você tem 10 segundos para voltar ao veículo. E entregar a carga.");
		    avisado[playerid]=SetTimerEx("TerminarCarregamento",10000,0,"d",playerid);
			return 1;
		}
		else if(ColocandoDrogas[playerid] == 1){
            SendClientMessage(playerid,COLOR_GREEN,"Você tem 10 segundos para voltar ao veículo. Para ir colocar a carga.");
		    avisado[playerid]=SetTimerEx("TerminarCarregamento",10000,0,"d",playerid);
			return 1;
		}
		else if(DrogasNoCaminhao[playerid] == 1){
            SendClientMessage(playerid,COLOR_GREEN,"Você tem 10 segundos para voltar ao veículo. E entregar a carga");
		    avisado[playerid]=SetTimerEx("TerminarCarregamento",10000,0,"d",playerid);
			return 1;
		}
		else if(Carga[playerid] == 1){
		    if(PegarGrana[playerid] == 0){
			    SendClientMessage(playerid,COLOR_GREEN,"Você tem 10 segundos para voltar ao veículo. E entregar o dinheiro");
			    avisado[playerid]=SetTimerEx("TerminarCarregamento",10000,0,"d",playerid);
				return 1;
			 } else {
			    SendClientMessage(playerid, COLOR_TRANSPORTE_DE_VALORES, "Você tem 30 segundos para deixar o dinheiro no banco e voltar ao CARRO FORTE");
			    EntregandoGrana[playerid]=SetTimerEx("EntregarGrana",30000,0,"d",playerid);
			    return 1;
			}
		}
		else if(Pedras[playerid] == 1){
		    SendClientMessage(playerid,COLOR_GREEN,"Você tem 10 segundos para voltar ao veículo. E entregar as pedras.");
		    avisado[playerid]=SetTimerEx("TerminarCarregamento",10000,0,"d",playerid);
			return 1;
		}
		else if(DrogasNoCaminhao[playerid] == 1){
		    SendClientMessage(playerid,COLOR_GREEN,"Você tem 10 segundos para voltar ao veículo. E entregar as drogas.");
		    avisado[playerid]=SetTimerEx("TerminarCarregamento",10000,0,"d",playerid);
			return 1;
		}
		else if(NaoSair[playerid] == 1){
		    SendClientMessage(playerid,COLOR_GREEN,"Você tem 10 segundos para voltar ao veículo. E entregar ele.");
		    avisado[playerid]=SetTimerEx("TerminarCarregamento",10000,0,"d",playerid);
			return 1;
		}
		else if(CheckpointStatus[playerid] == CARREGANDOGAS){
		    SendClientMessage(playerid,COLOR_GREEN,"Você tem 10 segundos para voltar ao caminhão. E entregar o combustível.");
		    avisado[playerid]=SetTimerEx("TerminarCarregamento",10000,0,"d",playerid);
			return 1;
		}
	    else if(Taximetro[playerid][0] == 1){
			SendClientMessage(playerid, COLOR_PALHA, "Espero que tenha gostado. Volte sempre");
			SendClientMessage(Taximetro[playerid][1], COLOR_TAXISTA, "Você recebeu o valor da corrida até aqui.");
			AddPlayerMoney(playerid, 0 - PrecoCorrida[playerid],-1);
			AddPlayerMoney(Taximetro[playerid][1], PrecoCorrida[playerid],3);
			if(JogadorContratado(Taximetro[playerid][1],1)) AcrescentarLucro(1,PrecoCorrida[playerid]/4*3);
			PrecoCorrida[playerid] = 0;
			Taximetro[playerid][1] = 0;
			Taximetro[playerid][0] = 0;
			AcrescentarExPoints(Taximetro[playerid][1],1);
			NoTaxi[playerid] = 0;
			return 1;
		}
		else if(ATaximetro[playerid][0] == 1){
		    SendClientMessage(playerid, COLOR_PALHA, "Espero que tenha gostado da viagem. Volte sempre.");
		    SendClientMessage(ATaximetro[playerid][1], COLOR_TAXI_AEREO, "Você recebeu o valor da viagem aérea até aqui.");
		    AddPlayerMoney(playerid, 0 - PrecoCorrida[playerid], -1);
		    AddPlayerMoney(ATaximetro[playerid][1], PrecoCorrida[playerid], 3);
		    if(JogadorContratado(ATaximetro[playerid][1],1)) AcrescentarLucro(1,PrecoCorrida[playerid]/4*3);
		    PrecoCorrida[playerid] = 0;
		    ATaximetro[playerid][1] = 0;
		    ATaximetro[playerid][0] = 0;
		    AcrescentarExPoints(ATaximetro[playerid][1],1);
		    NoTaxi[playerid] = 0;
			return 1;
		}
		else if(MTaximetro[playerid][0] == 1){
		    SendClientMessage(playerid, COLOR_PALHA, "Espero que tenha gostado. Volte sempre.");
		    SendClientMessage(MTaximetro[playerid][1], COLOR_MOTOTAXI, "Você recebeu o valor da corrida até aqui.");
		    AddPlayerMoney(playerid, 0 - PrecoCorrida[playerid], -1);
		    AddPlayerMoney(MTaximetro[playerid][1], PrecoCorrida[playerid], 3);
		    if(JogadorContratado(MTaximetro[playerid][1],1)) AcrescentarLucro(1,PrecoCorrida[playerid]/4*3);
		    PrecoCorrida[playerid] = 0;
		    MTaximetro[playerid][1] = 0;
		    MTaximetro[playerid][0] = 0;
		    AcrescentarExPoints(MTaximetro[playerid][1],1);
		    NoTaxi[playerid] = 0;
			return 1;
		}
	}
	return 1;
}
public FimCP(){
    for(new i=0; i<SLOTS2; i++){
		if(CheckpointStatus[i] == PERSE){
		    DisablePlayerCheckpoint(i);
		    ProcuradoRCarro[Perseguido[i]] = 0;
		}
	}
}
public TempoAlugando(playerid) {
	KillTimer(AluguelTempo[playerid]);
	if(GetPlayerMoney(playerid) > AluguelPreco(AluguelCarro[playerid])){
	    new string[256];
		TogglePlayerControllable(playerid,0);
		SendClientMessage(playerid, COLOR_LOCADOR_DE_CARROS, "O aluguel do veículo acabou, digite /continuaraluguel se quiser ficar mais 5 min. com ele!");
		SendClientMessage(playerid, COLOR_LOCADOR_DE_CARROS, "Caso contrário digite /naocontinuaraluguel");
		format(string,sizeof(string),"Custo para ficar mais tempo : $%d,00 dólares",AluguelPreco(AluguelCarro[playerid]));
		SendClientMessage(playerid, COLOR_WHITE, string);
		AluguelContinuar[playerid] = 1;
	}
	else{
	    SetVehicleToRespawn(AluguelCarro[playerid]);
	    TempoAlugar[playerid] = 0;
		CarroAlugado[playerid] = 0;
    	OferecerCarro[playerid] = 0;
    	AluguelCarro[playerid] = -1;
    	SendClientMessage(playerid, COLOR_GRAY, "Você não tem mais dinheiro para ficar mais tempo com o carro então o aluguel acabou!");
	}
}
stock AluguelPreco(vehicleid){
	if(vehicleid == alugado1) return CarPrice[0];
	if(vehicleid == alugado2) return CarPrice[1];
	if(vehicleid == alugado3) return CarPrice[2];
	if(vehicleid == alugado4) return CarPrice[3];
	if(vehicleid == alugado5) return CarPrice[4];
	if(vehicleid == alugado6) return CarPrice[5];
	if(vehicleid == alugado7) return CarPrice[6];
	if(vehicleid == alugado8) return CarPrice[7];
	return 0;
}
public TerminarCarregamento(playerid){
	if(FazendaInProgress[playerid] == 1){
		GameTextForPlayer(playerid,"~r~Colheita ~n~ ~w~Cancelada!",3000,4);
		FazendaInProgress[playerid] = 0;
	    return 0;
    }
    if(PescaInProgress[playerid] == 1){
		GameTextForPlayer(playerid,"~r~Pesca ~n~ ~w~Cancelada!",3000,4);
		PescaInProgress[playerid] = 0;
	    return 0;
    }
	GameTextForPlayer(playerid,"~r~Entrega ~n~ ~w~Cancelada!",3000,4);
    EntregadePizza[playerid]=0;
    GeralCar[playerid] = 0;
    Carga[playerid] = 0;
    GasCar[playerid] = 0;
    Pedras[playerid] = 0;
    DrogasNoCaminhao[playerid] =0;
    EntregaLimo[playerid] = 0;
    CarregamentoRoupas[playerid] = 0;
    NaoSair[playerid] = 0;
    ColocandoDrogas[playerid] = 0;
	DrogasNoCaminhao[playerid] = 0;
    DisablePlayerCheckpoint(playerid);
    CheckpointStatus[playerid] = NONE;
    return 1;
}
public TerminarCancelamento(playerid){
    AcabeiDeRecusar[playerid] = 0;
 	SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Espere que você tenha apreendido a lição, agora já pode contrabandear novamente");
 	return 1;
}
public EntregarGrana(playerid){
	new string[256];
	new quantia;
	GameTextForPlayer(playerid,"~r~Deposito~n~ ~w~Cancelado!",3000,4);
    quantia = minrand(200,650);
	Carga[playerid] = 0;
	PegarGrana[playerid] = 0;
	format(string, sizeof(string), "Você faliu e perdeu $%d pela sua imcopetência dá próxima será demitido!", quantia);
	SendClientMessage(playerid, COLOR_RED2, string);
	AddPlayerMoney(playerid, -quantia, -1);
	return 1;
}
stock IsVehicleInArea(CarID, Float:MinX, Float:MinY, Float:MaxX, Float:MaxY)
{
    new Float:X, Float:Y, Float:Z;
    GetVehiclePos(CarID, X, Y, Z);
    if(X >= MinX && X <= MaxX && Y >= MinY && Y <= MaxY) return true;
    return false;
}
stock ProximoAoAngulo(playerid,Float:ang){
	new Float:ang2;
    if(IsPlayerInAnyVehicle(playerid)) GetVehicleZAngle(GetPlayerVehicleID(playerid),ang2);
    else GetPlayerFacingAngle(playerid,ang2);
    if(ang2 >= ang - 2.0 && ang2 <= ang + 2.0) return true;
    else return false;
}
stock NextDerby(){
	if(!Ocupado[Derby1])  return Derby1;
 	if(!Ocupado[Derby2])  return Derby2;
  	if(!Ocupado[Derby3])  return Derby3;
   	if(!Ocupado[Derby4])  return Derby4;
    if(!Ocupado[Derby5])  return Derby5;
    if(!Ocupado[Derby6])  return Derby6;
    if(!Ocupado[Derby7])  return Derby7;
    if(!Ocupado[Derby8])  return Derby8;
    if(!Ocupado[Derby9])  return Derby9;
    if(!Ocupado[Derby10]) return Derby10;
	return -1;
}
public CancelarDerby(playerid){
	if(OficializarParticipacao[playerid] == 1){
		CheckpointStatus[playerid] = NONE;
		OficializarParticipacao[playerid] = 0;
	}
}
stock SetPlayerNextRace1CP(playerid)
{
    new string[256];
    DisablePlayerRaceCheckpoint(playerid);
	if(rcp[playerid] < sizeof(RaceCheckpoints1) - 1){
		SetPlayerRaceCheckpoint(
		playerid,
		0,
		RaceCheckpoints1[rcp[playerid]][0],
		RaceCheckpoints1[rcp[playerid]][1],
		RaceCheckpoints1[rcp[playerid]][2],
		RaceCheckpoints1[rcp[playerid]+1][0],
		RaceCheckpoints1[rcp[playerid]+1][1],
		RaceCheckpoints1[rcp[playerid]+1][2],
		5.0
		);
		RaceCheckpointStatus[playerid] = RACE1;
		rcp[playerid]++;
		format(string,sizeof(string),"~w~ %d/%d",rcp[playerid],sizeof(RaceCheckpoints1));
		GameTextForPlayer(playerid,string,100000,1);
	}
	else{
	    RaceCheckpointStatus[playerid] = RACE1_END;
	    format(string,sizeof(string),"~r~ %d/%d",sizeof(RaceCheckpoints1),sizeof(RaceCheckpoints1));
	    GameTextForPlayer(playerid,string,100000,1);
	    SetPlayerRaceCheckpoint(
		playerid,
		1,
		RaceCheckpoints1[rcp[playerid]][0],
		RaceCheckpoints1[rcp[playerid]][1],
		RaceCheckpoints1[rcp[playerid]][2],
		0.0,
		0.0,
		0.0,
		5.0
		);
	}
}
public AbastecerCarroAluguel(playerid,vehicleid){
	vStats[vehicleid][gasolina] = 100;
	TogglePlayerControllable(playerid,1);
	SendClientMessage(playerid, COLOR_LOCADOR_DE_CARROS, "Veículo abastecido, leve-o para a locadora...");
	SetPlayerRaceCheckpoint(playerid,1,224.8462,-1443.7964,13.1204,0.0,0.0,0.0,3.0);
	AbastecendoCarroAluguel[playerid] = 2;
}
public RepararCarroAluguel(playerid,vehicleid,Float:x,Float:y,Float:z,Float:ang){
	SetVehiclePos(vehicleid,x,y,z);
	SetVehicleZAngle(vehicleid,ang);
	PutPlayerInVehicle(playerid,vehicleid,0);
	SendClientMessage(playerid, COLOR_LOCADOR_DE_CARROS, "Veículo reparado, leve-o para a locadora...");
	SetPlayerRaceCheckpoint(playerid,1,224.8462,-1443.7964,13.1204,0.0,0.0,0.0,3.0);
	ReparandoCarroAluguel[playerid] = 2;
}
public OnPlayerEnterRaceCheckpoint(playerid)
{
	if (gdebug >=1){printf("OnPlayerEnterRaceCheckpoint(%d)",playerid);}
	if(EntregandoPrisioneiro[playerid]==1){
        new plid=AlgemaInfo[playerid][1],Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:dx,Float:dy,Float:dz,Float:distance;
		GetPlayerPos(playerid,x,y,z);
        GetPlayerPos(plid,x2,y2,z2);
        dx=x-x2;
		dy=y-y2;
		dz=z-z2;
		distance=(dx*dx+dy*dy+dz*dz);
		if(distance>8){
		    SendClientMessage(playerid, COLOR_GRAY, "Traga o prisioneiro junto com você...");
		    return 1;
		}
	    DisablePlayerRaceCheckpoint(playerid);
		SendClientMessage(playerid, COLOR_COP_SWAT, "Leve o prisioneiro para dentro da Delegacia");
		SetPlayerRaceCheckpoint(playerid,1,1553.1730,-1675.0323,16.1953,0.0,0.0,0.0,4.0);
		EntregandoPrisioneiro[playerid]=2;
		return 1;
	}
	if(EntregandoPrisioneiro[playerid]==2){
	    new plid=AlgemaInfo[playerid][1],Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:dx,Float:dy,Float:dz,Float:distance;
		GetPlayerPos(playerid,x,y,z);
        GetPlayerPos(plid,x2,y2,z2);
        dx=x-x2;
		dy=y-y2;
		dz=z-z2;
		distance=(dx*dx+dy*dy+dz*dz);
		if(distance>8){
		    SendClientMessage(playerid, COLOR_GRAY, "Traga o prisioneiro junto com você...");
		    return 1;
		}
		DisablePlayerRaceCheckpoint(playerid);
		SendClientMessage(playerid, COLOR_COP_SWAT, "Leve o prisioneiro para a cela");
		SetPlayerPos(playerid,246.7840,63.9002,1003.6406);
  		SetPlayerInterior(playerid,6);
  		SetPlayerPos(plid,246.7840,63.9002,1003.6406);
  		SetPlayerInterior(plid,6);
		SetPlayerRaceCheckpoint(playerid,1,268.4623,77.3229,1001.0391,0.0,0.0,0.0,4.0);
		EntregandoPrisioneiro[playerid]=3;
		return 1;
	}
	if(EntregandoPrisioneiro[playerid]==3){
	    new plid=AlgemaInfo[playerid][1],Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:dx,Float:dy,Float:dz,Float:distance;
		GetPlayerPos(playerid,x,y,z);
        GetPlayerPos(plid,x2,y2,z2);
        dx=x-x2;
		dy=y-y2;
		dz=z-z2;
		distance=(dx*dx+dy*dy+dz*dz);
		if(distance>8){
		    SendClientMessage(playerid, COLOR_GRAY, "Traga o prisioneiro junto com você...");
		    return 1;
		}
		AcrescentarExPoints(playerid,pStats[plid][Wanted]);
		DisablePlayerRaceCheckpoint(playerid);
	    new string[256];
		Presos[plid] = 1;
		pStats[plid][Preso] = 1;
		TogglePlayerControllable(plid,1);
  		Algemado[plid]=0;
		Algemou[playerid]=0;
		LevandoJogador[playerid]=0;
		GetCopCars[plid]=INVALID_VEHICLE_ID;
		AlgemaInfo[plid][0]=-1;
	    AlgemaInfo[playerid][1]=-1;
		CelularBloqueado[playerid] = 0;
		LogarPlayer(plid);
		format(string, sizeof(string), "Você foi preso por: %s", PlayerName(playerid));
		SendClientMessage(plid, COLOR_GRAY, string);
    	SendClientMessage(playerid, COLOR_COP_SWAT, "Prisão concluida");
  		GameTextForPlayer(plid, "~r~preso!", 5000,0);
		format(string, sizeof(string), "[CENTRAL COP] O Oficial Sr %s prendeu %s por %s, o tempo de cadeia é de %d hora(s) no jogo", PlayerName(playerid), PlayerName(plid), Motivos[Motivo[plid]], TempoPrisao[Motivo[plid]]);
		SendClientMessageToAll(COLOR_COP_SWAT, string);
		SendClientMessageToAll(COLOR_COP_SWAT, "Senhor Juiz tome par do processo e esclareça os fatos!");
		ConfiscarArmas(plid);
		EntregandoPrisioneiro[playerid]=0;
		return 1;
	}
	if(RaceCheckpointStatus[playerid] == RACE1){
	    SetPlayerNextRace1CP(playerid);
	    return 1;
	}
	else if(RaceCheckpointStatus[playerid] == RACE1_END){
	    DisablePlayerRaceCheckpoint(playerid);
		TogglePlayerControllable(playerid,0);
        TogglePlayerControllable(playerid,1);
		rcp[playerid] = 0;
	    PosicaoRace1[lastposition] = playerid;
	    format(positionname[lastposition],MAX_PLAYER_NAME,PlayerName(playerid));
	    lastposition++;
		new string[256];
		format(string,sizeof(string),"Você chegou na %dª posição da corrida...",lastposition);
		SendClientMessage(playerid, COLOR_WHITE, string);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		GameTextForPlayer(playerid, " ", 10000, 1);
		return 1;
	}
	if(CPAtivado[playerid] == 1){
	    SendClientMessage(playerid, COLOR_WHITE, "Você chegou até seu ponto de destino!");
	    DisablePlayerRaceCheckpoint(playerid);
		CPAtivado[playerid] = 0;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		return 1;
	}
	if(AbastecendoCarroAluguel[playerid] == 1){
		if(IsPlayerInAnyVehicle(playerid)){
		    DisablePlayerRaceCheckpoint(playerid);
	    	TogglePlayerControllable(playerid,0);
	    	SetTimerEx("AbastecerCarroAluguel",8000,0,"dd",playerid,GetPlayerVehicleID(playerid));
	    	SendClientMessage(playerid, COLOR_LOCADOR_DE_CARROS, "Abastecendo...");
        	return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar no veículo para abastece-lo...");
		    return 1;
		}
	}
	if(AbastecendoCarroAluguel[playerid] == 2){
		if(IsPlayerInAnyVehicle(playerid)){
		    DisablePlayerRaceCheckpoint(playerid);
	    	AbastecendoCarroAluguel[playerid] = 0;
	    	AcrescentarExPoints(playerid,1);
	    	AddPlayerMoney(playerid,200,3);
	    	SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	    	SendClientMessage(playerid, COLOR_LOCADOR_DE_CARROS, "[LOCADORA] Bom trabalho, aqui está seu pagamento! $200,00 dólares");
	    	new r = random(3);
			if(r == 0) SendClientMessage(playerid, COLOR_LOCADOR_DE_CARROS, "[LOCADORA] São funcionários como você que nos deixam contente :P");
			else if(r == 1) SendClientMessage(playerid, COLOR_LOCADOR_DE_CARROS, "[LOCADORA] Estou feliz em te-lo trabalhando aqui :D");
			else if(r == 2) SendClientMessage(playerid, COLOR_LOCADOR_DE_CARROS, "[LOCADORA] É bom saber que ainda existem funcionários por aqui que fazem algo =D");
			return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar no veículo para abastece-lo...");
		    return 1;
		}
	}
	if(ReparandoCarroAluguel[playerid] == 1){
		if(IsPlayerInAnyVehicle(playerid)){
		    new Float:x,Float:y,Float:z,Float:ang;
		    GetVehiclePos(GetPlayerVehicleID(playerid),x,y,z);
		    GetVehicleZAngle(GetPlayerVehicleID(playerid),ang);
		    ReparandoCarroAluguel[playerid] = 0;
		    DisablePlayerRaceCheckpoint(playerid);
	    	TogglePlayerControllable(playerid,0);
	    	SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	    	SetTimerEx("RepararCarroAluguel",8000,0,"ddffff",playerid,GetPlayerVehicleID(playerid),x,y,z,ang);
	    	SendClientMessage(playerid, COLOR_LOCADOR_DE_CARROS, "Reparando...");
        	return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar no veículo para abastece-lo...");
		    return 1;
		}
	}
	if(ReparandoCarroAluguel[playerid] == 2){
		if(IsPlayerInAnyVehicle(playerid)){
		    DisablePlayerRaceCheckpoint(playerid);
	    	ReparandoCarroAluguel[playerid] = 0;
	    	AcrescentarExPoints(playerid,1);
	    	AddPlayerMoney(playerid,300,3);
	    	SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	    	SendClientMessage(playerid, COLOR_LOCADOR_DE_CARROS, "[LOCADORA] Bom trabalho, aqui está seu pagamento! $300,00 dólares");
			return 1;
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Você tem que estar no veículo para abastece-lo...");
		    return 1;
		}
	}
	if(TerminaisAtivados[playerid] == 1){
	    new rand = random(sizeof TerminaisBusao),Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2;
		TerminaisAtivados[playerid] = 1;
		PassouTerminais[playerid]++;
		SetPlayerRaceCheckpoint(playerid,1,TerminaisBusao[rand][0],TerminaisBusao[rand][1],TerminaisBusao[rand][2],0.0,0.0,0.0,4.0);
        SendClientMessage(playerid, COLOR_MOTORISTA_DE_ONIBUS, "Você chegou em um terminal, procure conseguir passageiros...");
		SendClientMessage(playerid, COLOR_MOTORISTA_DE_ONIBUS, "Seguidamente siga o CheckPoint em seu radar para ir até o próximo terminal!");
        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
        GetPlayerPos(playerid,x,y,z);
       	for(new i = 0; i < SLOTS2; i++){
       	    GetPlayerPos(i,x2,y2,z2);
			if(floatround(x-x2*x-x2+y-y2*y-y2+z-z2*z-z2) < 10){
				SendClientMessage(i, COLOR_MOTORISTA_DE_ONIBUS, "[BUS] O ônibus está no terminal, caso queira andar entre nele.");
			}
  		}
  		if(PassouTerminais[playerid] > 4){
  		    PassouTerminais[playerid] = 0;
  		    rand=random(4);
  		    if(rand==0){
  		        AcrescentarExPoints(playerid,1);
  		        SendClientMessage(playerid, COLOR_MOTORISTA_DE_ONIBUS, "Você recebeu 1 ExPoint, bom trabalho!");
			}
		}
	}
	return 1;
}
public OnPlayerEnterCheckpoint(playerid)
{
 	if (gdebug >=1){printf("OnPlayerEnterCheckpoint %d",playerid);}
	switch (CheckpointStatus[playerid])
	{
	    case BURGERS:
	    {
	        ShowMenuForPlayer(Hamburguers,playerid);
	        TogglePlayerControllable(playerid,0);
	    }
		case ARMAS:
		{
			SetPlayerCameraPos(playerid,287.2210,-110.6672,1002.5266);
			SetPlayerCameraLookAt(playerid,286.8904,-112.7211,1003.1104);
			TogglePlayerControllable(playerid,0);
			ShowMenuForPlayer(Weapons,playerid);
		}
	    case CASAJOGADOR:
	    {
	        CheckpointStatus[playerid] = NONE;
			DisablePlayerCheckpoint(playerid);
			SendClientMessage(playerid, COLOR_WHITE, "Lar doce lar... Ai está sua casa amigo!");
	    }
	    case HOSPITAL:
	    {
			new Float:Health;
			GetPlayerHealth(playerid,Health);
			if(Health <= 30){
				if(AreaHosp[playerid] == 1){
					if(Curandome[playerid] == 0){
					    SendClientMessage(playerid, COLOR_YELLOW, "[HOSPITAL] Você pode tratar sua vida aqui, /curar-me. CUSTO: $100, caso você tenha plano de saúde não vai pagar.");
					    Curandome[playerid] = 1;
					}
				}
			}
		}
	    case ENTREGA_CC_CAR:
	        {
				if(InGuinchoCC(playerid) && IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)) && IsCarCC(GetVehicleTrailer(GetPlayerVehicleID(playerid)))){
                    DisablePlayerCheckpoint(playerid);
					CheckpointStatus[playerid] = NONE;
					for(new c = 0; c < 20; c++){
						if(GetVehicleTrailer(GetPlayerVehicleID(playerid)) == CarrosCC[c]){
						    DestroyVehicle(CarrosCC[c]);
						    CTCCapturado[CarrosCC[c]] = 1;
							CarrosCC[c] = CreateVehicle(415,INVALID_POS_X,INVALID_POS_Y,INVALID_POS_Z,0.0,1,5,120000);
							break;
						}
					}
					SendClientMessage(playerid, COLOR_WHITE, "Veículo entregue! Vá buscar mais...");
					EquipePontos[EquipeCC[playerid]]++;
					new string[256];
					format(string,sizeof(string),"[CAPTURE THE CARS] Pontuações: Equipe azul: %d ponto(s) | Equipe laranja: %d ponto(s)",EquipePontos[1],EquipePontos[2]);
					SendClientMessageToAll(COLOR_MECANICO, string);
					if(EquipePontos[EquipeCC[playerid]] >= 10){
						if(EquipeCC[playerid] == 1) SendClientMessageToAll(COLOR_LIXEIRO, "[CAPTURE THE CARS] A equipe azul é a nova vencedora do Capture The Cars!");
                        if(EquipeCC[playerid] == 2) SendClientMessageToAll(COLOR_LIXEIRO, "[CAPTURE THE CARS] A equipe laranja é a nova vencedora do Capture The Cars!");
						FimCC();
					}
				}
				else{
					SendClientMessage(playerid, COLOR_GRAY, "Para entregar um carro aqui você deve estar guinchando ele!");
					return 1;
				}
	        }
	    case RASTREAMENTO:
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "Veículo alcançado e rastreador desativado!");
	            DesativarRastreador(playerid);
	        }
	    case LOJA_MUNICOES:
	        {
	            ShowMenuForPlayer(Municoes,playerid);
	            TogglePlayerControllable(playerid,0);
			}
	    case RESTAURANTE:
	        {
	            ShowMenuForPlayer(Cardapio1,playerid);
	            TogglePlayerControllable(playerid,0);
			}
	    case CORRETORA_PROPRIEDADES:
			{
				ShowMenuForPlayer(Properties,playerid);
   				TogglePlayerControllable(playerid,0);
			}
        case GPSDESTINO:
			{
				SendClientMessage(playerid, COLOR_PALHA, "Muito bem! Você chegou até o seu destino!");
				DisablePlayerCheckpoint(playerid);
				CheckpointStatus[playerid] = NONE;
				GPSLigado[playerid] = 0;
			}
        case DERBY:
         	{
          		new car = NextDerby();
            	if(car == -1){
					SendClientMessage(playerid, COLOR_GRAY, "Sinto muito, não há mais vagas para este evento!");
				 	DisablePlayerCheckpoint(playerid);
					return 1;
				}
				if(!OficializarParticipacao[playerid]){
				    SendClientMessage(playerid, COLOR_GRAY, "Você não foi mandado para oficializar sua participação!");
				    return 1;
				}
				OficializarParticipacao[playerid] = 0;
				PlayerDerby[playerid] = 1;
				PutPlayerInVehicle(playerid, car, 0);
   				Ocupado[car] = 1;
				SetPlayerInterior(playerid,15);
				SetPlayerInterior(playerid,15);
				TogglePlayerControllable(playerid,0);
				DisablePlayerCheckpoint(playerid);
				CheckpointStatus[playerid] = NONE;
				SendClientMessage(playerid, COLOR_PALHA, "[ESTÁDIO] Aguarde a corrida iniciará em instantes.");
			}
		case ENTREGANDO_SORVETE:
		    {
				if(QtEntregasSorvetes[playerid] > 1){
		        	QtEntregasSorvetes[playerid] --;
					new randcp = random(9);
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpoint(playerid,EntregaSorvetePos[randcp][0],EntregaSorvetePos[randcp][1],EntregaSorvetePos[randcp][2],2.5);
				    new string[256];
				    format(string,sizeof(string),"Sorvetes restantes: %d",QtEntregasSorvetes[playerid]);
				    SendClientMessage(playerid, COLOR_ROSACLARO, "Sorvete entregue!");
				    SendClientMessage(playerid, COLOR_YELLOW, string);
				    CheckpointStatus[playerid] = ENTREGANDO_SORVETE;
				}
				else{
					DisablePlayerCheckpoint(playerid);
					SendClientMessage(playerid, COLOR_ROSACLARO, "Todos sorvetes entregues, vá até a sorveteria pegar o seu dinheiro!");
					SetPlayerCheckpoint(playerid,1568.2290,-1880.4467,13.5469,2.5);
					CheckpointStatus[playerid] = ENTREGANDO_SORVETE2;
				}
		    }
        case ENTREGANDO_SORVETE2:
            {
				SendClientMessage(playerid, COLOR_ROSACLARO, "Obrigado pela entrega, aqui está seu dinheiro, $200");
				AddPlayerMoney(playerid,200,3);
				DisablePlayerCheckpoint(playerid);
				CheckpointStatus[playerid] = NONE;
            }
		case ENTREGANDO_DROGAS:
		    {
		        if(QtEntregasDrogas[playerid] > 1){
		        	QtEntregasDrogas[playerid]--;
					new randcp = random(10);
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpoint(playerid,EntregaDrogaPos[randcp][0],EntregaDrogaPos[randcp][1],EntregaDrogaPos[randcp][2],2.5);
					CheckpointStatus[playerid] = ENTREGANDO_DROGAS;
					new string[256];
					format(string,sizeof(string),"Droga entregue, restam mais %d entrega(s)",QtEntregasDrogas[playerid]);
					SendClientMessage(playerid, COLOR_WHITE, string);
				}
				else{
					QtEntregasDrogas[playerid] = 0;
					DisablePlayerCheckpoint(playerid);
					SM[playerid] = NONE;
					CheckpointStatus[playerid] = NONE;
					SendClientMessage(playerid, COLOR_LIDER_DE_TRAFICO, "Entregas terminadas, beleza mano, gostei do trampo, tái tua grana maluco, $300");
					AddPlayerMoney(playerid,300,3);
				}
		    }
        case AUTOESCOLARUA:
	    	{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 410){
			    	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
			    	    new plid = InstrutorRua[playerid];
	    		    	if(Profissao[plid] == INSTRUTOR){
   				    		if(GetPlayerState(plid) == PLAYER_STATE_PASSENGER && IsPlayerInVehicle(plid,GetPlayerVehicleID(playerid))){
   				    		    new Float:h;
                                GetVehicleHealth(GetPlayerVehicleID(playerid),h);
								if(floatround(h) == 1000){
  	     							new string[256];
					  		    	SendClientMessage(playerid, COLOR_INSTRUTOR, "[TESTE] Parabéns! Parte (5/5) - Rua - concluída com sucesso.");
									format(string, sizeof(string), "[TESTE] O aprendiz  %s passou no teste: (5/5) - Rua.", PlayerName(playerid));
									SendClientMessage(InstrutorNovo[playerid],COLOR_INSTRUTOR, string);
									Chance[InstrutorNovo[playerid]] = 3;
									CheckpointStatus[playerid] = NONE;
									DisablePlayerCheckpoint(playerid);
									RemovePlayerFromVehicle(playerid);
									FazendoTesteRua[playerid] = 0;
									SetTimerEx("AplicandoCarteira",4000,0,"dd",playerid,plid);
	                    		}
	                    		else{
	                    			new string[256];
									format(string, sizeof(string), "[TESTE] Sr. %s, você não conseguiu chegar no tempo marcado.", PlayerName(playerid));
									SendPlayerMessageToPlayer(plid, playerid, string);
    								format(string, sizeof(string), "[TESTE] Sr. %s, você não conseguiu chegar no tempo marcado.", PlayerName(playerid));
									SendPlayerMessageToPlayer(playerid, playerid, string);
									if(Chance[playerid] >= 1){
										Chance[playerid] = Chance[playerid] - 1;
										format(string, sizeof(string), "[TESTE] Sr. %s, seu teste será refeito. CHANCE: %d/3.", PlayerName(playerid), Chance[playerid]);
										SendPlayerMessageToPlayer(plid, playerid, string);
										format(string, sizeof(string), "[TESTE] Sr. %s, seu teste será refeito. CHANCE: %d/3.", PlayerName(playerid), Chance[playerid]);
										SendPlayerMessageToPlayer(playerid, playerid, string);
										InstrutorRua[playerid] = plid;
	    								SetVehicleToRespawn(GetPlayerVehicleID(playerid));
										SetTimerEx("AvancoRua",5000,0,"dd",plid,playerid);
									} else {
										SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Seu teste foi CANCELADO, você perdeu todas as chances, terá que refazer tudo novamemnte.");
										format(string, sizeof(string), "[AUTO-ESCOLA] O aprendiz %s perdeu todas as chances e seu teste foi cancelado!", PlayerName(playerid));
										SendClientMessage(plid,COLOR_INSTRUTOR, string);
										Chance[playerid] = 0;
	    								SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	    								TrancarVeiculo(playerid,CarroAuto);
										TrancarVeiculo(playerid,CarroAuto2);
										TrancarVeiculo(playerid,CarroAuto3);
										TrancarVeiculo(playerid,CarroAuto4);
										TrancarVeiculo(playerid,CarroAuto5);
										TrancarVeiculo(playerid,CarroAuto6);
									}
								}
							}
						}
					}
				}
			}
		case PERSE:
		    {
		    	new Float:X,Float:Y,Float:Z;
				if(IsPlayerInVehicle(Perseguido[playerid],CarroForagido[playerid])){
					if(ProcuradoRCarro[Perseguido[playerid]] == 1){
						if(GetDistanceBetweenPlayers(playerid,Perseguido[playerid]) < 30){
		    				new rand = random(5);
		    				if(rand == 0 || rand == 1 || rand == 2 || rand == 3){
	 		    				DisablePlayerCheckpoint(playerid);
                                SendClientMessage(playerid, COLOR_COP_SWAT, "[CENTRAL COP] Ele está fugindo!! Rápido PEGUE-O");
								SendClientMessage(playerid, COLOR_COP_SWAT, "[CENTRAL COP] vá até o local aonde ele foi visto pela última vez.");
								SetPlayerCheckpoint(playerid, X,Y,Z,5.0);
								CheckpointStatus[playerid] = PERSE;
								SetTimerEx("FimCP",180000,0,"d",Perseguido[playerid]);
							} else {
								SendClientMessage(playerid, COLOR_COP_SWAT, "[CENTRAL COP] Você perdeu o rastro do suspeito! Procure nas redondezas.");
			 				    DisablePlayerCheckpoint(playerid);
							    ProcuradoRCarro[Perseguido[playerid]] = 0;
								return 1;
							}
						} else {
		    				SendClientMessage(playerid, COLOR_COP_RODOVIARIO, "[CENTRAL COP] O suspeito está nas imediações daí, no máximo a 40 metros desse ponto!!!");
		    				DisablePlayerCheckpoint(playerid);
		    				ProcuradoRCarro[Perseguido[playerid]] = 0;
		    				return 1;
						}
					}
				}
			}
		case ENTREGANDO_DELEGACIA:
		    {
		        if(!IsPlayerInVehicle(playerid,CarroEntrega[playerid])) return SendClientMessage(playerid, COLOR_GRAY, "Você não está no veículo correto!");
		        for(new i = 0; i < SLOTS2; i++){
					if(Profissao[i] != COP_MILITAR && Profissao[i] != COP_RODOVIARIO && Profissao[i] != COP_SWAT && Profissao[i] != COP_NARCOTICOS && Profissao[i] != DELEGADO && Profissao[i] != EXERCITO){
		    			TrancarVeiculo(i,GetPlayerVehicleID(playerid));
					}
				}
			   	SendClientMessage(playerid, COLOR_COP_SWAT, "[DELEGACIA] Veículo confiscado! Agora apenas membros da delegacia poderão entrar nele...");
			   	SendClientMessage(playerid, COLOR_COP_SWAT, "[DELEGACIA] Bom trabalho, aqui está seu pagamento $100");
				AddPlayerMoney(playerid,100,3);
				vStats[GetPlayerVehicleID(playerid)][Confiscado] = 1;
				new Float:x,Float:y,Float:z,Float:ang;
				GetVehiclePos(GetPlayerVehicleID(playerid),x,y,z);
				GetVehicleZAngle(GetPlayerVehicleID(playerid),ang);
				SaveCarPos(GetPlayerVehicleID(playerid),x,y,z,ang);
				new string[256];
				format(string,sizeof(string),"[DELEGACIA] O veículo de %s foi confiscado pelo nosso departamento!",vStats[GetPlayerVehicleID(playerid)][VDono]);
				SendClientMessageToAll(COLOR_COP_SWAT,string);
				new r = random(2);
				if(r == 1) AcrescentarExPoints(playerid,1);
				RemovePlayerFromVehicle(playerid);
				DisablePlayerCheckpoint(playerid);
				CarroEntrega[playerid] = -1;
				CheckpointStatus[playerid] = NONE;
			}

        case TRANSPORTE_ROUPAS:
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 414){
					SendClientMessage(playerid, COLOR_GRAY, "Eita, está não é a nossa carga de roupas! Não vamos aceitar isso, SUMA DAQUI...");
					return 1;
				}
				else{
					CarregamentoRoupas[playerid] = 0;
					new rand = random(3)+1;
					rand *= 150;
					AddPlayerMoney(playerid,rand,3);
					new str[256];
					format(str,sizeof(str),"Muito bem! Aqui está seu pagamento: $%d",rand);
					SendClientMessage(playerid, COLOR_CAMINHONEIRO, str);
					AcrescentarExPoints(playerid,1);
					DisablePlayerCheckpoint(playerid);
					CheckpointStatus[playerid] = NONE;
				}
			}
		case CONTRABANDOINI:
		    {
		   		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		   		GameTextForPlayer(playerid, "~w~Pegue o ~r~produto", 5000, 1);
		   		SendClientMessage(playerid, COLOR_GREEN, "Entre no navio e pegue seu produto falsificado.");
		   		SetPlayerPos(playerid,-2329.10,1530.41,17.33);
		   		DisablePlayerCheckpoint(playerid);
		   		SetPlayerCheckpoint(playerid,-2372.10,1551.64,2.12,1.4);
				CheckpointStatus[playerid] = CONTRABANDONAVIO;
			}
 		case CONTRABANDONAVIO:
		    {
		   		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		   		GameTextForPlayer(playerid, "~w~Va para o ~r~ponto", 5000, 1);
		   		SendClientMessage(playerid, COLOR_GREEN, "Pule daqui e va ate outro ponto indicado, cuidado pra não molhar a mercadoria.");
			   	DisablePlayerCheckpoint(playerid);
	  			SetPlayerCheckpoint(playerid,-2436.35,1528.98,17.34,1.4);
				CheckpointStatus[playerid] = CONTRABANDONAVIO2;
			}
   		case CONTRABANDONAVIO2:
		    {
		   		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		   		SendClientMessage(playerid, COLOR_GREEN, "Corra para a rampa.");
		   		DisablePlayerCheckpoint(playerid);
	   			SetPlayerPos(playerid,-2436.29,1524.75,18.19);
	   			SetPlayerCheckpoint(playerid,-2650.08,1361.02,7.31,1.4);
				CheckpointStatus[playerid] = CONTRABANDORAMPA;
			}
		case CONTRABANDORAMPA:
		    {
		   		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		   		GameTextForPlayer(playerid, "~w~Suba a ~r~rampa", 5000, 1);
      			SendClientMessage(playerid, COLOR_GREEN, "Jogue o produto no mar, um pescador ira pegar depois. Cuidado para não cair.");
		   		DisablePlayerCheckpoint(playerid);
		   		SetPlayerCheckpoint(playerid,-2659.74,1530.51,54.97,1.4);
				CheckpointStatus[playerid] = CONTRABANDOFINAL;
			}
		case CONTRABANDOFINAL:
		    {
				new string[256];
		    	new contra;
	    	 	contra = minrand(400,1200);
		   		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		   		GameTextForPlayer(playerid, "~r~Cuidado...", 5000, 1);
		   		SetPlayerPos(playerid,-2659.69,1534.64,54.42);
		   		SendClientMessage(playerid, COLOR_GREEN, "Você caiu no mar e se molhou, mas conseguiu salvar o produto, o chefe te deu $1000.");
				format(string,sizeof(string),"Você caiu no mar e se molhou, mas conseguiu salvar o produto, o chefe te deu $%s.",contra);
				SendClientMessage(playerid, COLOR_PESCADOR, string);
			    DisablePlayerCheckpoint(playerid);
		   		Contrabando[playerid] = 0;
		   		Receita[playerid] = 0;
		   		AddPlayerMoney(playerid,contra,3);
				DisablePlayerCheckpoint(playerid);
				AcrescentarExPoints(playerid,1);
				CheckpointStatus[playerid] = NONE;
 			}
 			case NACAMA:
		    {
				SendClientMessage(playerid, COLOR_ROSA2, "Você entrou no checkpoint e saiu do sexo");
				SendClientMessage(Prostitutacama[playerid], COLOR_ROSA2, "Seu cliente saiu do sexo e você voltou para a porta da boate!");
		  		DisablePlayerCheckpoint(playerid);
		  		SetPlayerPos(playerid,2421.6042,-1224.7599,25.2050);
		  		SetPlayerInterior(playerid,0);
		  		SetPlayerPos(Prostitutacama[playerid],2421.6042,-1224.7599,25.2050);
		  		SetPlayerInterior(Prostitutacama[playerid],0);
		  		SendClientMessage(playerid, COLOR_ROSA2, "Foi paga uma quantia de $400 pelo sexo.");
		  		SendClientMessage(Prostitutacama[playerid], COLOR_ROSA2,"Você recebeu seu pagamento!");
		  		AddPlayerMoney(Prostitutacama[playerid], 800, 3);
	        	AddPlayerMoney(playerid, -400, -1);
				TextDrawHideForPlayer(playerid,tdStrip);
			    AreaStrip[playerid] = 0;
			    AcrescentarExPoints(Prostitutacama[playerid],1);
			}
 			case CATANDOLATAS :
			{
				if(CatarLatinha[playerid] == 1){
	    			if(IsPlayerInAnyVehicle(playerid)){
				    	SendClientMessage(playerid,COLOR_RED2,"Você tem que estar à pé");
	   	 			}
			   	 	else{
						new string[256];
						new latas;
			        	latas = minrand(0,5);
				    	format(string, sizeof(string), "Você coletou %d lata(s) nesta lixeira.",latas);
						SendClientMessage(playerid,COLOR_AZUL, string);
			    		DisablePlayerCheckpoint(playerid);
			    		pStats[playerid][Latas] = pStats[playerid][Latas] + latas;
			    		new rt = random(23);
			    		SetPlayerCheckpoint(playerid,Latinhas[rt][0],Latinhas[rt][1],Latinhas[rt][2],3.0);
			    		SendClientMessage(playerid,COLOR_WHITE,"Colete mais latinhas ou pare com /pararcoleta.");
			    		if(pStats[playerid][Latas] >= pStats[playerid][LatasNecessarias]){
							AcrescentarExPoints(playerid,1);
							pStats[playerid][LatasNecessarias] = pStats[playerid][LatasNecessarias] + 30;
						}
					}
				}
			}
			case LAVANDOLIMOSINE :
      			{
				if(LavandoLimo[playerid] == 1){
      				new modelo = GetPlayerVehicleID(playerid);
					if(modelo  == limosine1 || modelo == limosine2 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
					    TogglePlayerControllable(playerid, 0);
					    SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Aguarde a lavagem...");
						LavandoLimo[playerid] = 0;
						GameTextForPlayer(playerid, "~w~Lavando...",15000,0);
						SetTimerEx("LavandoLimosine",15000,0,"d",playerid);
					} else {
					    SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Você não está em uma Limosine");
					    return 1;
					}
				}
 			}
 			case REVISAOLIMO1 :
 		    {
				new Float: CarHealth;
				GetVehicleHealth(GetPlayerVehicleID(playerid),CarHealth);
				if(CarHealth >= 70){
		   		 	if(LimoRevisada[GetPlayerVehicleID(playerid)] == 0){
		   				new modelo = GetPlayerVehicleID(playerid);
						if(modelo  == limosine1 || modelo == limosine2 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
						    TogglePlayerControllable(playerid, 0);
						    SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Aguarde...");
							GameTextForPlayer(playerid, "~w~Checando o ~r~Motor~w~...",15000,0);
							SetTimerEx("ChecandoLimo",15000,0,"d",playerid);
						} else {
						    SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Você não está em 1 Limosine ou não está dirigindo.");
						    return 1;
						}
					} else {
					    SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "A sua Limosine está com o motor OK, vá para a lavagem.");
						return 1;
	 	 			}
				} else {
  	 				SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "A saúde do seu carro está ok.");
					return 1;
	 			}
			}
		case REVISAOLIMO2 :
	    	{
			new Float: CarHealth;
			GetVehicleHealth(GetPlayerVehicleID(playerid),CarHealth);
			if(CarHealth == 1000){
			    SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "O Chefe examinou a Limosine está em perfeito estado.");
			    SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Contudo você ganhou $200 pelo serviço.");
			    AddPlayerMoney(playerid, 200, 3);
			    AcrescentarExPoints(playerid,1);
			    DisablePlayerCheckpoint(playerid);
			    EntregaLimo[playerid] = 0;
			    SetTimerEx("ChecagemDeMotor",900000,false,"%d",playerid);
			    if(JogadorContratado(playerid,2)) AcrescentarLucro(2,300);
		    } else {
				new prejuizo = 1000-floatround(CarHealth);
			    SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Você bateu a Limosine e seu chefe cobrou o prejuízo.");
			    AddPlayerMoney(playerid, -prejuizo, -1);
			    new str[256];
			    format(str, sizeof(str),"O prejuízo foi de $%d",prejuizo);
			    SendClientMessage(playerid, COLOR_GRAY, str);
			    DisablePlayerCheckpoint(playerid);
			    EntregaLimo[playerid] = 0;
			    SetTimerEx("ChecagemDeMotor",900000,0,"d",playerid);
			    if(JogadorContratado(playerid,2)) AcrescentarPrejuizo(2,200);
			    return 1;
			}
		}
		case CARREGANDOGAS :
		    {
			new vehid = GetPlayerVehicleID(playerid);
			new trailerid = GetVehicleTrailer(vehid);
   			if(GetVehicleModel(trailerid) != 584){
			    SendClientMessage(playerid, COLOR_CAMINHONEIRO, "Você não está com o Trailer correto!");
			    return 1;
			}
			GameTextForPlayer(playerid, "~w~Carregando...",15000,0);
		    SendClientMessage(playerid,COLOR_CAMINHONEIRO,"O Trailer de Gás está sendo Carregado, aguarde o Carregamento para ir deixar a carga.");
            TogglePlayerControllable(playerid,0);
          	SetTimerEx("CarregamentoGas",15000,0,"d",playerid);
          	return 1;
		}
		case NOBAR :
		{
			ShowMenuForPlayer(Bar,playerid);
			TogglePlayerControllable(playerid,0);
			return 1;
		}
		case CONTRABANDOCAR1 :
	    {
	        if(ContrabandoCar[playerid] == 1){
		        PlayerPlaySoundEx(playerid, 1058);
		    	SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Aí rapaz! Nossos papos sempre são assim, escondidos. Os carros tão ai, só entrar e escolher um!");
	 	   		SendClientMessage(playerid, COLOR_GREEN, "Leve ele para os Triads checarem e ver se estão afim.");
	 	   		DisablePlayerCheckpoint(playerid);
 				SetTimerEx("ContrabandoSpawnCar",3000,0,"d",playerid);
			}
		}
 		case CONTRABANDOCAR2:
		{
			new Float: VidaCarro;
			GetVehicleHealth(GetPlayerVehicleID(playerid),VidaCarro);
			if(VidaCarro >= 850){
      			new veh = GetPlayerVehicleID(playerid);
				if(veh == CarroContrabando1 || veh == CarroContrabando2 || veh == CarroContrabando3 || veh == CarroContrabando4 || veh == CarroContrabando5 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
				    if(ContrabandoCar[playerid] == 1){
				   		GameTextForPlayer(playerid, "~w~Hum...", 5000, 1);
				   		TogglePlayerControllable(playerid,0);
				   		DisablePlayerCheckpoint(playerid);
				   		SetTimerEx("ChecandoContrabandoCar",5000,0,"d",playerid);
				   	}
				} else {
					SendClientMessage(playerid, COLOR_WHITE, "Você não está no carro correto.");
					return 1;
				}
			} else {
			    SendClientMessage(playerid, COLOR_RED2, "Ei, está tentando me enganar? Não vou querer esse carro, está caido aos pedaços...");
                SendClientMessage(playerid, COLOR_RED2, "Vai enganar outro troxa com essa lata velha moleque!");
				DisablePlayerCheckpoint(playerid);
				TogglePlayerControllable(playerid,1);
				CheckpointStatus[playerid] = NONE;
			}
		}
		case CONTRABANDOCAR3:
		{
		   	new valor;
		    new string[256];
		    valor = minrand(1000,2000);
			new Float: VidaCarro;
			GetVehicleHealth(GetPlayerVehicleID(playerid),VidaCarro);
			if(VidaCarro >= 850){
      			new veh = GetPlayerVehicleID(playerid);
				if(veh == CarroContrabando1 || veh == CarroContrabando2 || veh == CarroContrabando3 || veh == CarroContrabando4 || veh == CarroContrabando5 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
				    SendClientMessage(playerid, COLOR_WHITE, "Carro entregue!");
	 		   		DisablePlayerCheckpoint(playerid);
					AcrescentarExPoints(playerid,1);
					GameTextForPlayer(playerid, "~w~Exportado!", 3000,0);
					format(string,sizeof(string),"O carro foi entregue sem dano, foi pago $%d pelo carro",valor);
			  		SendClientMessage(playerid, COLOR_CONTRABANDISTA, string);
			  		AddPlayerMoney(playerid, valor, 3);
					CheckpointStatus[playerid] = NONE;
					NaoSair[playerid] = 0;
					PodePegar[playerid] = 0;
				} else {
					SendClientMessage(playerid, COLOR_WHITE, "Você não está no carro correto.");
					return 1;
				}
			} else {
				SendClientMessage(playerid, COLOR_WHITE, "Seu carro está muito batido, não queremos ELE!");
				return 1;
			}
		}
		case CONTRABANDODROGA:
  		{
			if(Contrabando[playerid] == 1){
			    SendClientMessage(playerid, COLOR_TURQUESA, "Sinto muito mano! Entreguei as drogas pra um cara já, se quiser ir pegar com ele");
			    SendClientMessage(playerid, COLOR_TURQUESA, "pra fazer um servicinho por grana vai até a casa dele que ele ta lá agora!");
		        DisablePlayerCheckpoint(playerid);
		    	SetPlayerCheckpoint(playerid,1615.7572,-1896.8995,13.5490,3.0);
		    	CheckpointStatus[playerid] = CONTRABANDODROGA2;
		    }
		}
		case CONTRABANDODROGA2:
		{
		    if(Contrabando[playerid] == 1){
			    SendClientMessage(playerid, COLOR_ORANGE, "Aew maluco! Afim de ganhar uma graninha? Então vai lá e entrega essa droga lá");
			    SendClientMessage(playerid, COLOR_ORANGE, "na casa do comprador em Las Venturas, Vai logo porra, se não, não tem grana ta ligado?!");
				new rand = random(4);
				DisablePlayerCheckpoint(playerid);
		    	SetPlayerCheckpoint(playerid,ContrabandoEntregaDroga[rand][0],ContrabandoEntregaDroga[rand][1],ContrabandoEntregaDroga[rand][2],3.0);
		    	CheckpointStatus[playerid] = CONTRABANDODROGA3;
		    }
		}
		case CONTRABANDODROGA3:
		{
		    if(Contrabando[playerid] == 1){
		        new con = random(3);
		        if(con == 0 || con == 1){
		            new conmoney = minrand(1200,1600);
		        	PlayerPlaySoundEx(playerid, 1058);
			    	SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Opa! Minhas drogas! Passa pra cá maluco...");
					new str[256];
					format(str,sizeof(str),"Tái tua grana: $%d",conmoney);
					SendClientMessage(playerid, COLOR_CONTRABANDISTA, str);
					AddPlayerMoney(playerid,conmoney,3);
					Maconha[playerid] = Maconha[playerid]+2;
					pStats[playerid][DosesMaconha] = Maconha[playerid];
					SendClientMessage(playerid, COLOR_JUIZ, "Você recebeu 2 maconhas pela entrega! Para fumar digite /fumar [cigarros]");
					DisablePlayerCheckpoint(playerid);
		    		CheckpointStatus[playerid] = NONE;
		    		AcrescentarExPoints(playerid,1);
				}
				if(con == 2){
			    	SendClientMessage(playerid, COLOR_ORANGE, "Ihh cara! Essas são as minhas drogas?! Ahh cara não quero essa porra! SUMA DAQUI...");
					DisablePlayerCheckpoint(playerid);
		    		CheckpointStatus[playerid] = NONE;
				}
		    }
		}
		case CONTRABANDOARMA1:
		{
		    if(Contrabando[playerid] == 1){
		    	SendClientMessage(playerid, COLOR_GRAD1, "Vá buscar as armas escondidas enquanto isso vou ficar aqui procurando compradores!");
		    	DisablePlayerCheckpoint(playerid);
		    	SetPlayerCheckpoint(playerid,-2124.9001,-270.4929,35.3203,4.0);
		    	CheckpointStatus[playerid] = CONTRABANDOARMA2;
		    	SendClientMessage(playerid, COLOR_JUIZ, "Siga o local indicado em seu mapa para pegar as armas escondidas!");
			}
		}
		case CONTRABANDOARMA2:
		{
		    if(Contrabando[playerid] == 1){
		        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
				SetTimerEx("AcaoEspecial",5000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		    	SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Ótimo! Armas recolhidas!");
		    	SendClientMessage(playerid, COLOR_GRAD1, "Aew cara! Achei um comprador... Vai lá entregar as armas pra ele que agente divide o lucro mano!");
		    	DisablePlayerCheckpoint(playerid);
		    	new rand = random(4);
		    	SetPlayerCheckpoint(playerid,EntregarContrabandoArma[rand][0],EntregarContrabandoArma[rand][1],EntregarContrabandoArma[rand][2],4.0);
		    	CheckpointStatus[playerid] = CONTRABANDOARMA3;
			}
		}
		case CONTRABANDOARMA3:
		{
		    if(Contrabando[playerid] == 1){
		        PlayerPlaySoundEx(playerid, 1058);
		        new rand = random(3);
		        if(rand == 0 || rand == 1){
		        new pagamento = minrand(1000,1500);
		    	SendClientMessage(playerid, COLOR_GRAD1, "Opa! Belas armas... Vou comprar!");
		    	new str[256];
		    	format(str,sizeof(str),"Aqui está o pagamento: $%d",pagamento);
				SendClientMessage(playerid, COLOR_GRAD1, str);
				AddPlayerMoney(playerid,pagamento,3);
				AcrescentarExPoints(playerid,1);
				new con = random(3);
				if(con == 0) GivePlayerWeapon(playerid,24,40);
				if(con == 1) GivePlayerWeapon(playerid,32,150);
				if(con == 2) GivePlayerWeapon(playerid,25,20);
				SendClientMessage(playerid, COLOR_RED2, "Você recebeu uma arma de brinde pela entrega!");
				DisablePlayerCheckpoint(playerid);
				CheckpointStatus[playerid] = NONE;
  				Contrabando[playerid] = 0;
				}
				if(rand == 2){
		    		SendClientMessage(playerid, COLOR_GRAD1, "O que??? Essas armas estão em péssimo estado, aposto que não matam um mosquito!");
		    		SendClientMessage(playerid, COLOR_GRAD1, "Vaza daqui, não vou comprar LIXO");
                    DisablePlayerCheckpoint(playerid);
					CheckpointStatus[playerid] = NONE;
		    		Contrabando[playerid] = 0;
				}
			}
		}
	  case NOSTRIADS :
		{
			TogglePlayerControllable(playerid, 0);
			SetPlayerPos(playerid,-2173.7002,679.8663,55.1647);
			SetPlayerFacingAngle(playerid,267.3764);
			SendClientMessage(playerid, COLOR_RED2, "Está aqui para pegar o pacote não é?");
			SetTimerEx("Conversa1",3000,0,"d",playerid);
		}
  	  case ENTREGANDORICK :
		{
		    TogglePlayerControllable(playerid, 0);
		    SetTimerEx("Conversa7b",4000,0,"d",playerid);
		}
	  case CONVERSA_MOTORISTA :
		{
			SendClientMessage(playerid, COLOR_WHITE, "Motorista, pro aeroporto Virtual Air!");
			ApplyAnimation(playerid,"PED","IDLE_CHAT",2.1,1,1,1,1,1);
			TogglePlayerControllable(playerid,0);
			SetTimerEx("Conversa21b",3000,0,"d",playerid);
		}
      case TELHADO :
	 	{
			DisablePlayerCheckpoint(playerid);
    		TogglePlayerControllable(playerid, 1);
    		SendClientMessage(playerid, COLOR_JUIZ, "Saiá logo daí!");
    		SetPlayerCheckpoint(playerid,1476.2811,1901.7622,10.9186,2.0);
    		CheckpointStatus[playerid] = SAINDOTELHADO;
		}
	  case SAINDOTELHADO :
		{
		    DisablePlayerCheckpoint(playerid);
		    TogglePlayerControllable(playerid, 0);
			SendClientMessage(playerid, COLOR_WHITE, "Ah...");
 			SetTimerEx("Conversa10",2000,0,"d",playerid);
		}
	  case AERO :
		{
		    DisablePlayerCheckpoint(playerid);
		    TogglePlayerControllable(playerid, 0);
		    SetPlayerInterior(playerid,14);
    		SetPlayerPos(playerid,-1833.9573,18.6406,1061.1436);
    		SetPlayerFacingAngle(playerid,360);
 			SetTimerEx("ConversaA1",3000,0,"d",playerid);
 		}
      case PEGAR_PASSAGEM :
		{
		    DisablePlayerCheckpoint(playerid);
		    TogglePlayerControllable(playerid, 0);
		    SetPlayerInterior(playerid,14);
    		SetPlayerPos(playerid,-1833.9573,18.6406,1061.1436);
    		SetPlayerFacingAngle(playerid,360);
 			SetTimerEx("Conversa23cc",3000,0,"d",playerid);
 		}
 		case ENTREGASF :
		{
		    TogglePlayerControllable(playerid, 0);
			SendClientMessage(playerid, COLOR_GRAY, "Veio entregar o pacote?");
			SetTimerEx("ConversaB1",3000,0,"d",playerid);
		}
      case AGENCIA :
		{
		    DisablePlayerCheckpoint(playerid);
    		SetPlayerInterior(playerid,3);
	        SetPlayerFacingAngle(playerid,90);
	        SetPlayerPos(playerid,387.9047,171.1747,1008.3828);
	        SendClientMessage(playerid, COLOR_PALHA, "Bem vindo à agencia de empregos!");
	        SendClientMessage(playerid, COLOR_PALHA, "Para mais informações digite: /level");
 		}
	  case CARREGAMENTO :
	    {
	        new valor;
	    	new string[256];
	    	valor = minrand(500,1000);
	    	new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
 			if(modelo == 515){
			   	if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))){
			   		if(GetVehicleTrailer(GetPlayerVehicleID(playerid))){
						CheckpointStatus[playerid] = NONE;
						GasCar[playerid] = 0;
						GeralCar[playerid] = 0;
						format(string,sizeof(string),"A Carga foi entregue com sucesso! O seu frete foi $%d",valor);
			  			SendClientMessage(playerid, COLOR_CAMINHONEIRO, string);
			  			AddPlayerMoney(playerid, valor, 3);
			  			SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
			  			GameTextForPlayer(playerid, "~w~Descarregamento Concluido", 3000,0);
			  			DisablePlayerCheckpoint(playerid);
			  			return 1;
					} else {
						SendClientMessage(playerid,COLOR_GRAY,"Não foi detectado Trailer!");
						return 1;
					}
				} else {
					SendClientMessage(playerid,COLOR_GRAY,"Seu caminhão não tem Trailer, como vai entregar a carga?");
					return 1;
				}
			} else {
				SendClientMessage(playerid,COLOR_GRAY,"Você não está em um ROADTRAIN!");
				return 1;
			}
	    }
	case OBRAS:
		{
			if(Construcao[playerid] == 1){
		    	if(Pedras[playerid] == 1){
					new porc;
					new string[256];
				    porc = minrand(100,350);
				    Pedras[playerid] = 0;
				    SendClientMessage(playerid, COLOR_PEDREIRA, " ");
				    GameTextForPlayer(playerid, "~w~ Descarregamento ~n~ ~g~ Concluido", 3000,0);
				    format(string, sizeof(string), "[OBRA] Tái pelo frete, pelo tempo que você veio só vamos lhe pagar $%d.", porc);
					SendClientMessage(playerid,COLOR_PEDREIRA, string);
	 			    AddPlayerMoney(playerid,porc,3);
				    DisablePlayerCheckpoint(playerid);
			    	CheckpointStatus[playerid] = NONE;
				    AcrescentarExPoints(playerid,1);
	    			return 1;
	    		} else {
					SendClientMessage(playerid,COLOR_GRAY,"O Seu Caminhão não está carregado.");
					return 1;
				}
			} else {
				SendClientMessage(playerid,COLOR_GRAY,"Você não está na área de descarga.");
				return 1;
			}
		}
	case ENTREGANDO_CARRO_MULTA:
	    {
	        if((IsPlayerInVehicle(playerid,CarroEntrega[playerid])) && (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)){
				for(new i = 0; i < SLOTS2; i++){
					if(Profissao[i] != COP_MILITAR && Profissao[i] != COP_RODOVIARIO && Profissao[i] != COP_SWAT && Profissao[i] != COP_NARCOTICOS && Profissao[i] != DELEGADO && Profissao[i] != EXERCITO){
						SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid),i, 0, 1);
					}
				}
				SendClientMessage(playerid, COLOR_COP_SWAT, "[DELEGACIA] Veículo apreendido! Agora apenas membros da delegacia poderão entrar nele...");
				SendClientMessage(playerid, COLOR_COP_SWAT, "[DELEGACIA] Bom trabalho, aqui está seu pagamento $100");
				AddPlayerMoney(playerid,100,3);
				new Float:x,Float:y,Float:z,Float:ang;
				GetVehiclePos(GetPlayerVehicleID(playerid),x,y,z);
				GetVehicleZAngle(GetPlayerVehicleID(playerid),ang);
				SaveCarPos(GetPlayerVehicleID(playerid),x,y,z,ang);
				new string[256];
				vStats[GetPlayerVehicleID(playerid)][Confiscado] = 1;
				format(string,sizeof(string),"[DELEGACIA] O Veículo de %s foi confiscado pelo Departamento de Polícia, pois não pagou as multas.",vStats[GetPlayerVehicleID(playerid)][VDono]);
				SendClientMessageToAll(COLOR_COP_SWAT,string);
				new r = random(2);
				if(r == 1){
					AcrescentarExPoints(playerid,1);
				}
				RemovePlayerFromVehicle(playerid);
				DisablePlayerCheckpoint(playerid);
				CarroEntrega[playerid] = -1;
				CheckpointStatus[playerid] = NONE;
    		}
		}
	case CDROGAS:
	    {
			if(ComprandoBaguio[playerid] == 1){
		   		ShowMenuForPlayer(Becks,playerid);
		   		TogglePlayerControllable(playerid,0);
		   		ComprandoBaguio[playerid] = 0;
		   		CheckpointStatus[playerid] = NONE;
		   		DisablePlayerCheckpoint(playerid);
		   		return 1;
		   	}
		}
	case CATIVEIRO:
	    {
	        if(Profissao[playerid] == ASSASSINO){
      			if(GetDistanceBetweenPlayers(playerid,FuiSequestrado[playerid]) < 10){
		            SetPlayerInterior(FuiSequestrado[playerid], 10);
					SetPlayerPos(FuiSequestrado[playerid], 6.091180, -29.271898,1003.549988);
					SetPlayerFacingAngle(FuiSequestrado[playerid], 0);
					TogglePlayerControllable(FuiSequestrado[playerid],1);
					Sequestro[FuiSequestrado[playerid]] = 0;
					Cativeiro[FuiSequestrado[playerid]] = 1;
					SendClientMessage(FuiSequestrado[playerid], COLOR_GRAY,"Você agora está no CATIVEIRO!");
					SendClientMessage(FuiSequestrado[playerid], COLOR_GRAY,"Para poder sair pague o resgate com o comando /resgate ou espere a polícia lhe salvar!");
					SendClientMessage(playerid, COLOR_GRAY, "Bom trabalho, agora vamo ver quanto tempo ele aguenta!");
                	SetTimerEx("SentiuFaltaDe",240000,false,"dd",playerid, FuiSequestrado[playerid]);
                }
     		}
        }
    }
	if(ColocandoDrogas[playerid] == 1){
	    new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
 		if(modelo == 515  || modelo == 414){
 		   	if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)) || modelo == 414){
			   	if(GetVehicleTrailer(GetPlayerVehicleID(playerid))){
			   	    EntregadePizza[playerid] = 0;
					MissaoLixeiro[playerid] = 0;
    				ColocandoDrogas[playerid] = 0;
					DrogasNoCaminhao[playerid] = 1;
					PegandoDrogas[playerid] = 0;
			   		DisablePlayerCheckpoint(playerid);
			   		SendClientMessage(playerid, COLOR_CAMINHONEIRO, "As drogas foram colocadas! VAI LOGO DEIXAR!!!!");
					new deixando = random(55);
					SetPlayerCheckpoint(playerid,DeixandoDrogas[deixando][0],DeixandoDrogas[deixando][1],DeixandoDrogas[deixando][2],3.0);
					new rand = random(100);
					new string[256];
					if(rand <= 50) {
						format(string, sizeof(string), "[CENTRAL] Unidades, [Crime: Transporte de Drogas] [Suspeito: Caminhoneiro Desconhecido]. Varredura na cidade imediatamente!");
						SendClientMessageToAll(COLOR_COP_SWAT, string);
					}
				} else {
					SendClientMessage(playerid,COLOR_GRAY,"Não foi detectado Trailer!");
					return 1;
				}
			} else {
				SendClientMessage(playerid,COLOR_GRAY,"Seu caminhão não tem Trailer, como vai entregar a carga?");
				return 1;
			}
		} else {
			SendClientMessage(playerid,COLOR_GRAY,"Você não está em um ROADTRAIN ou MULE!");
			return 1;
		}
	}
	if(DrogasNoCaminhao[playerid] == 1){
	    new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
 		if(modelo == 515 || modelo == 414){
 		   	if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)) || modelo == 414){
				if(GetVehicleTrailer(GetPlayerVehicleID(playerid))){
			   		EntregadePizza[playerid] = 0;
					MissaoLixeiro[playerid] = 0;
    				ColocandoDrogas[playerid] = 0;
					DrogasNoCaminhao[playerid] = 0;
					PegandoDrogas[playerid] = 0;
			   		DisablePlayerCheckpoint(playerid);
			   		SendClientMessage(playerid, COLOR_CAMINHONEIRO, "Os Traficantes estão checando o carregamento");
			   		GameTextForPlayer(playerid, "~w~Aguarde...",15000,0);
			   		SetTimerEx("ChecandoDrogas",15000,0,"d",playerid);
					return 1;
				} else {
					SendClientMessage(playerid,COLOR_GRAY,"Não foi detectado Trailer!");
					return 1;
				}
			} else {
				SendClientMessage(playerid,COLOR_GRAY,"Seu caminhão não tem Trailer, como vai entregar a carga?");
				return 1;
			}
		} else {
			SendClientMessage(playerid,COLOR_GRAY,"Você não está em um ROADTRAIN ou MULE!");
			return 1;
		}
	}
	if(EntregadePizza[playerid]==1){
	    new valor;
	    new string[256];
	    valor = minrand(10,70);
	    new modelo = GetVehicleModel(GetPlayerVehicleID(playerid));
 		if(modelo == 448){
            if(PizzasMoto[GetPlayerVehicleID(playerid)] <= 1){
                PizzasEntregues[playerid]++;
                if(PizzasEntregues[playerid] >= PizzasNecessarias[playerid]){ AcrescentarExPoints(playerid,1); PizzasNecessarias[playerid] = PizzasNecessarias[playerid]+5; }
			    GameTextForPlayer(playerid, "~w~Entrega Concluida", 3000,0);
				format(string,sizeof(string),"A pizza foi entregue, a sua gorjeta foi de $%d",valor);
	  			SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, string);
	  			SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, "As pizzas na sua moto acabaram, vá para a pizzaria pegar mais");
	  			PizzasMoto[GetPlayerVehicleID(playerid)] --;
	  			DisablePlayerCheckpoint(playerid);
	  			AddPlayerMoney(playerid, valor, 3);
	  			if(JogadorContratado(playerid,0)) AcrescentarLucro(0,valor/4*3);
	  			EntregadePizza[playerid]=0;
			 }
		 	 else if(PizzasMoto[GetPlayerVehicleID(playerid)] >= 2){
		 	    PizzasEntregues[playerid]++;
                if(PizzasEntregues[playerid] >= PizzasNecessarias[playerid]){ AcrescentarExPoints(playerid,1); PizzasNecessarias[playerid] = PizzasNecessarias[playerid]+5; }
			    GameTextForPlayer(playerid, "~w~Entrega Concluida", 3000,0);
				format(string,sizeof(string),"A pizza foi entregue, a sua gorjeta foi de $%d, caso queira entregar outra pizza, o local está no radar",valor);
	  			SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, string);
	  			SendClientMessage(playerid, COLOR_ENTREGADOR_PIZZA, "Caso queira parar digite /pararentrega.");
				DisablePlayerCheckpoint(playerid);
				new pizzas = random(55);
				SetPlayerCheckpoint(playerid,EntregaPizza[pizzas][0],EntregaPizza[pizzas][1],EntregaPizza[pizzas][2],3.0);
				EntregadePizza[playerid]=1;
				PizzasMoto[GetPlayerVehicleID(playerid)] --;
				AddPlayerMoney(playerid, valor, 3);
				if(JogadorContratado(playerid,0)) AcrescentarLucro(0,valor/4*3);
			}
		}
	}
	if(PegandoDrogas[playerid] ==1){
		ShowMenuForPlayer(VendoDrogas,playerid);
		TogglePlayerControllable(playerid,0);
		PegandoDrogas[playerid] =0;
		DisablePlayerCheckpoint(playerid);
	}
	if(MissaoLixeiro[playerid] == 1){
	    if(IsPlayerInAnyVehicle(playerid)){
	        SendClientMessage(playerid,COLOR_GRAY,"Saia do caminhão para coletar o lixo daqui");
	        return 1;
		} else {
		    if(LixoColetado[playerid] < 9){
		    	SendClientMessage(playerid,COLOR_LIXEIRO,"Lixo coletado.");
			    DisablePlayerCheckpoint(playerid);
				new rt = random(37);
				SetPlayerCheckpoint(playerid,LixeirasCheckpoints[rt][0],LixeirasCheckpoints[rt][1],LixeirasCheckpoints[rt][2],3.0);
				SendClientMessage(playerid,COLOR_LIXEIRO,"Ainda tem mais latas para coletar!");
				LixoColetado[playerid]++;
				return 1;
			} else {
			    DisablePlayerCheckpoint(playerid);
			    SendClientMessage(playerid,COLOR_LIXEIRO,"Parabéns, você completou a missão de coletar lixo!");
			    SendClientMessage(playerid,COLOR_LIXEIRO,"Agora vá até o lixão e descarregue.");
			    LixoColetado[playerid]++;
			    return 1;
			}
		}
	}
	switch(CPD_CPHandling[playerid]){
	    case 1: {
	        SendClientMessage(playerid,COLOR_JUIZ,"Lista de profissões principiantes - até nível 10");
	        ShowMenuForPlayer(CPD_First,playerid);
	        TogglePlayerControllable(playerid,0);
	        confirmarprof[playerid] = 0;
	    }
	    case 2: {
	        SendClientMessage(playerid,COLOR_JUIZ,"Lista de profissões principiantes - 20 até nível 40");
	        ShowMenuForPlayer(CPD_Second,playerid);
	        TogglePlayerControllable(playerid,0);
			confirmarprof[playerid] = 0;
	    }
        case 3: {
	        SendClientMessage(playerid,COLOR_JUIZ,"Lista de profissões principiantes - 50 até nível 70");
	        ShowMenuForPlayer(CPD_Third,playerid);
	        TogglePlayerControllable(playerid,0);
	        confirmarprof[playerid] = 0;
	    }
	    case 4: {
	        SendClientMessage(playerid,COLOR_JUIZ,"Lista de profissões principiantes - 80 até nível 90");
	        ShowMenuForPlayer(CPD_Fourth,playerid);
	        TogglePlayerControllable(playerid,0);
	        confirmarprof[playerid] = 0;
	    }
	    case 5: {
	        SendClientMessage(playerid,COLOR_JUIZ,"Lista de profissões principiantes - 100 até nível 130");
	        ShowMenuForPlayer(CPD_Fifth,playerid);
	        TogglePlayerControllable(playerid,0);
	        confirmarprof[playerid] = 0;
	    }
	    case 6: {
	        SendClientMessage(playerid,COLOR_JUIZ,"Lista de profissões principiantes - 140 até nível 160");
	        ShowMenuForPlayer(CPD_Sixth,playerid);
	        TogglePlayerControllable(playerid,0);
	        confirmarprof[playerid] = 0;
		}
	}
	if(AreaBombShop[playerid] == 1){
		SendClientMessage(playerid, COLOR_GREEN, "Você entrou na loja de bombas!");
		new msg[256];
		format(msg,sizeof(msg),"[INFO] %s entrou na loja de bombas.",PlayerName(playerid));
		writelog(msg);
		if(IsPlayerInAnyVehicle(playerid)){
		    ShowMenuForPlayer(Bombshopveh,playerid);
			return 1;
		}
		if(!IsPlayerInAnyVehicle(playerid)){
		    ShowMenuForPlayer(Bombshop,playerid);
		    return 1;
		}
		return 1;
	}
	return 1;
}
stock PlayerPlaySoundEx(playerid,soundid)
{
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid,X,Y,Z);
	PlayerPlaySound(playerid,soundid,X,Y,Z);
}
public ContrabandoNavio() {
	for(new i=0; i<SLOTS2; i++){
		if(Contrabando[i] == 360000){
		 ContrabandoPassar[i]++;
		}
		if(Contrabando[i] == 0) {
		}
	}
}
public ChecandoContrabandoCar(playerid){
	new rand = random(3);
	if(rand == 0 || rand == 1){
	    SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Beleza, vou querer o carro agora leve para o destino que lhe passarei.");
		new Con = random(4);
		DisablePlayerCheckpoint(playerid);
		TogglePlayerControllable(playerid,1);
		SetPlayerCheckpoint(playerid,EntregarContrabandoCarro[Con][0],EntregarContrabandoCarro[Con][1],EntregarContrabandoCarro[Con][2],3.0);
		CheckpointStatus[playerid] = CONTRABANDOCAR3;
		SendClientMessage(playerid, COLOR_WHITE, "Leve para o local do radar.");
		return 1;
	}
	else if(rand == 2){
	    SendClientMessage(playerid, COLOR_RED2, "Não vou querer! Deixe para a próxima.");
	    SendClientMessage(playerid, COLOR_RED2, "A cor não me agradou. Se achou ruim, SE MATE!");
		DisablePlayerCheckpoint(playerid);
		TogglePlayerControllable(playerid,1);
		CheckpointStatus[playerid] = NONE;
		return 1;
	}
	return 1;
}
public Desmanche(playerid) {
	TempoDesmanche[playerid] = 0;
	SendClientMessage(playerid,COLOR_YELLOW,"Tempo de espera do desmanche terminado.");
	new msg[256];
	format(msg,sizeof(msg),"[INFO] %s terminou o tempo de espera do desmanche.",PlayerName(playerid));
	writelog(msg);
	return 1;
}
public Cancelar(playerid){
    if(invitestatus[playerid] == INVITE_CASA){
        invitestatus[playerid] = INVITE_NONE;
		SendClientMessage(playerid, COLOR_CORRETOR, "[CORRETORA] Você não respondeu nosso pedido a tempo, a venda da casa foi cancelada.");
    }
    else if(invitestatus[playerid] == INVITE_FIANCA){
        invitestatus[playerid] = INVITE_NONE;
		SendClientMessage(playerid, COLOR_ADVOGADO, "[CONSULTORIA] Você não respondeu o pedido do nosso advogado a tempo, o pedido de fiança foi cancelado.");
    }
    else if(invitestatus[playerid] == INVITE_CARRO){
        invitestatus[playerid] = INVITE_NONE;
		SendClientMessage(playerid, COLOR_VENDEDOR_DE_CARROS, "[CONCECIONARIA] A venda do carro foi cancelada você não respondeu o nosso vendedor a tempo.");
    }
    else if(invitestatus[playerid] == INVITE_CONTRATO){
        invitestatus[playerid] = INVITE_NONE;
		SendClientMessage(playerid, COLOR_TRANSPORTE_DE_VALORES, "[EMPRESA] O pedido de contrato foi desfeito, pense bem da próxima vez antes de recusar um contrato meu.");
    }
    else if(invitestatus[playerid] == INVITE_CONTRATO_SEGURANCA){
        invitestatus[playerid] = INVITE_NONE;
		SendClientMessage(playerid, COLOR_SEGURANÇA, "[CHEFE] O pedido de contrato foi desfeito, demorou demais para responder.");
    }
    else if(invitestatus[playerid] == INVITE_HABTERRESTRE){
        invitestatus[playerid] = INVITE_NONE;
		SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Tem pessoas querendo tirar habilitação, NÃO DEMORE da proxima vez.");
    }
}
public ArrumandoVeiculo(playerid,vehicleid,Float:X,Float:Y,Float:Z,Float:ang)
{
	SendClientMessage(playerid, COLOR_WHITE, "Veículo consertado! O conserto custou $100");
	AddPlayerMoney(playerid,-100,-1);
	AcrescentarLucro(9,100);
	SetVehiclePos(vehicleid,X,Y,Z);
	SetVehicleZAngle(vehicleid,ang);
	PutPlayerInVehicle(playerid,vehicleid,0);
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
}

public ColocandoPlaca(playerid,vehicleid,Float:X,Float:Y,Float:Z,Float:ang){
	new string[256];
	AddPlayerMoney(playerid,-200,-1);
	AcrescentarLucro(9,200);
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SetVehiclePos(vehicleid,X,Y,Z);
	SetVehicleZAngle(vehicleid,ang);
	PutPlayerInVehicle(playerid,vehicleid,0);
	format(string, sizeof(string), "[LOJA] Placa do veículo mudada para: %s", vStats[GetPlayerVehicleID(playerid)][VPlaca]);
	SendClientMessage(playerid, COLOR_MECANICO, string);
}
public OnPlayerLeaveCheckpoint(playerid)
{
	printf("Jogador de ID %d (%s) deixou um checkpoint", playerid, PlayerName(playerid));
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	if((GetPlayerMenu(playerid) == WSlot2 && IsValidMenu(WSlot2)) || (GetPlayerMenu(playerid) == WSlot3 && IsValidMenu(WSlot3))
	|| (GetPlayerMenu(playerid) == WSlot4 && IsValidMenu(WSlot4)) || (GetPlayerMenu(playerid) == WSlot5 && IsValidMenu(WSlot5))
	|| (GetPlayerMenu(playerid) == WSlot6 && IsValidMenu(WSlot6)) || (GetPlayerMenu(playerid) == WColete && IsValidMenu(WColete))
	|| (GetPlayerMenu(playerid) == WCamuflagem && IsValidMenu(WCamuflagem))){
		ShowMenuForPlayer(Weapons,playerid);
		TogglePlayerControllable(playerid,0);
		return 1;
	}
	if(GetPlayerMenu(playerid) == BancoOpc2){
		ShowMenuForPlayer(BancoOpc,playerid);
		TogglePlayerControllable(playerid,0);
		return 1;
	}
	SetCameraBehindPlayer(playerid);
    confirmarprof[playerid] = 0;
    GranaCofre[playerid][0] = 0;
	GranaCofre[playerid][1] = 0;
	ArmaCofre[playerid][0] = 0;
	ArmaCofre[playerid][1] = 0;
	DrogaCofre[playerid][0] = 0;
	DrogaCofre[playerid][1] = 0;
	MaconhaEsc[playerid] = 0;
	CocainaEsc[playerid] = 0;
	HeroinaEsc[playerid] = 0;
	TogglePlayerControllable(playerid,true);
	return 1;
}

public Roubo(playerid) {
	RouboMao[playerid] = 1;
    SendClientMessage(playerid,COLOR_GREEN,"É, agora você já pode roubar, escolha alguém que tenha muita grana...");
}
stock AplicarProfissao(playerid,profid)
{
	if(!Logado[playerid]) return -1;
	if(confirmarprof[playerid] < 1){
	    confirmarprof[playerid]++;
	    profselection[playerid] = profid;
	    ConfirmarProf = CreateMenu("Profisso",2,2,150,100,20);
	    if(IsValidMenu(ConfirmarProf)){
	    	SetMenuColumnHeader(ConfirmarProf,0,ProfGT[profselection[playerid]]);
	    	AddMenuItem(ConfirmarProf,0,"Confirmar");
	    	AddMenuItem(ConfirmarProf,0,"Cancelar");
			ShowMenuForPlayer(ConfirmarProf,playerid);
			TogglePlayerControllable(playerid,false);
		}
		return 1;
	}
	if(pStats[playerid][NM] == 1){
		SendClientMessage(playerid, COLOR_GRAY, "Espere até o próximo nível para mudar sua profissão!");
		return 1;
	}
	if(pStats[playerid][XL] < ProfLevel[profid]){
		new tmp[256];
		format(tmp,256,"Seu level não é suficiente para a profissão %s. Mínimo de level: %d, o seu: %d",ProfExtName[profid],ProfLevel[profid],pStats[playerid][XL]);		SendClientMessage(playerid,COLOR_GRAY,tmp);
		return 1;
	}
	if(pStats[playerid][Prof] == profid){
		SendClientMessage(playerid, COLOR_GRAY, "Você está querendo pegar a mesma profissão? Tem certeza? ¬¬");
		return 1;
	} else {
	    RetirarJogadorDaPropriedade(playerid);
	    new string[256];
		pStats[playerid][Prof] = profid;
	    SendClientMessage(playerid,COLOR_GREEN," ");
	    SendClientMessage(playerid,COLOR_GREEN,"Você foi admitido para uma nova profissão. Digite /profissao para saber como agir agora!");
	    SendClientMessage(playerid,COLOR_GREEN," ");
		new msg[256];
		format(msg,256,"[INFO] A profissão de %s agora é \"%s\".",PlayerName(playerid),ProfExtName[profid]);
		SendClientMessageToAll(COLOR_COP_SWAT,msg);
		writelog(msg);
		Profissao[playerid] = profid;
		pStats[playerid][NM] = 1;
		pStats[playerid][Skin] = ProfSkin[profid];
		LogarPlayer(playerid);
		SetPlayerPos(playerid,ProfPos[profid][0],ProfPos[profid][1],ProfPos[profid][2]);
		SetPlayerInterior(playerid,0);
 		format(string,sizeof(string),"~w~%s",ProfGT[profid]);
		GameTextForPlayer(playerid,string,3000,3);
		pStats[playerid][Dinheiro] = GetPlayerMoney(playerid);
		DisablePlayerCheckpoint(playerid);
		TrancarVeiculoPorProf(playerid);
		return 1;
	}
}
stock SendBankMessage(){
	new string[256];
	for(new p = 0; p < MAX_CASAS; p++){
	    if(fexist(pckStats[p][PickupDono])){
			format(string,sizeof(string),"[BANCO] Sr. %s estamos lhe informando suas taxas e seu saldo bancário:",pckStats[p][PickupDono]);
			EnviarCartaAnonima(pckStats[p][PickupDono],string);
			format(string,sizeof(string),"Saldo: $%d,00 dólares | Empréstimo solicitado: $%d,00 dólares | Dívidas de empréstimo: $%d,00 dólares",GetValue(PlayerFile(pckStats[p][PickupDono]),"Banco"),GetValue(PlayerFile(pckStats[p][PickupDono]),"Emprestimo"),GetValue(PlayerFile(pckStats[p][PickupDono]),"Divida"));
        	EnviarCartaAnonima(pckStats[p][PickupDono],string);
		}
	}
}
stock SendECTVLMessage(){
	new string[256];
	for(new p = 0; p < MAX_CASAS; p++){
	    if(fexist(pckStats[p][PickupDono])){
	    	format(string,sizeof(string),"[ECTVL] Sr. %s sua conta de telefone veio no valor de: $%d,00 dólares",pckStats[p][PickupDono],pckStats[p][ContaTelefone]);
			EnviarCartaAnonima(pckStats[p][PickupDono],string);
		}
	}
}
stock SendCOEVLMessage(){
	new string[256];
	for(new p = 0; p < MAX_CASAS; p++){
	    if(fexist(pckStats[p][PickupDono])){
			format(string,sizeof(string),"[COEVL] Sr. %s sua conta de luz veio no valor de: $%d,00 dólares",pckStats[p][PickupDono],pckStats[p][ContaLuz]);
			EnviarCartaAnonima(pckStats[p][PickupDono],string);
		}
	}
}
public FimHoraExtra(playerid){
    KillTimer(TempoHoraExtra2[playerid]);
	FazendoHoraExtra[playerid] = 0;
	SendClientMessage(playerid, COLOR_WHITE, "Sua hora extra acabou! Já pode descansar...");
}
public CancelarHoraExtra(playerid){
	KillTimer(TempoHoraExtra[playerid]);
	HoraExtra[playerid] = 0;
	SendClientMessage(playerid, COLOR_GRAY, "Você demorou para responder então a proposta de Hora extra foi CANCELADA!");
}
stock DiminuirExPoints(playerid,points)
{
      if(fexist(PlayerFile(PlayerName(playerid)))){
		if(pStats[playerid][ExPoints]-points >= 0){
		    new string[256];
	   		pStats[playerid][ExPoints]=pStats[playerid][ExPoints]-points;
	   		format(string,sizeof(string),"Seus ExPoints foram diminuídos para: %d",pStats[playerid][ExPoints]);
			SendClientMessage(playerid, COLOR_GRAY, string);
		} else {
		    pStats[playerid][ExPoints] = 0;
			}
   		} else {
		  printf("Não conseguimos diminuir o XL de %s",PlayerName(playerid));
		  printf("O arquivo do jogador não foi encontrado");
	  }
}
stock AcrescentarExPoints(playerid,points)
{
	if(FazendoHoraExtra[playerid] == 0 && Profissao[playerid] != SEGURANÇA) {
		switch(ValorDia){
			case 0:
			{
				if(HoraJogo < HorarioTrabalho[Profissao[playerid]][0] || HoraJogo > HorarioTrabalho[Profissao[playerid]][1]){
					SendClientMessage(playerid, COLOR_GRAY, "Você não recebeu ExPoint pois não está na hora de seu trabalho...");
  					return 1;
				}
			}
			case 1:
			{
    			if(HoraJogo < HorarioTrabalho[Profissao[playerid]][2] || HoraJogo > HorarioTrabalho[Profissao[playerid]][3]){
					SendClientMessage(playerid, COLOR_GRAY, "Você não recebeu ExPoint pois não está na hora de seu trabalho...");
 					return 1;
				}
			}
			case 2:
			{
	   			if(HoraJogo < HorarioTrabalho[Profissao[playerid]][4] || HoraJogo > HorarioTrabalho[Profissao[playerid]][5]){
					SendClientMessage(playerid, COLOR_GRAY, "Você não recebeu ExPoint pois não está na hora de seu trabalho...");
  					return 1;
				}
			}
			case 3:
			{
	   			if(HoraJogo < HorarioTrabalho[Profissao[playerid]][6] || HoraJogo > HorarioTrabalho[Profissao[playerid]][7]){
					SendClientMessage(playerid, COLOR_GRAY, "Você não recebeu ExPoint pois não está na hora de seu trabalho...");
  					return 1;
				}
			}
			case 4:
			{
	   			if(HoraJogo < HorarioTrabalho[Profissao[playerid]][8] || HoraJogo > HorarioTrabalho[Profissao[playerid]][9]){
					SendClientMessage(playerid, COLOR_GRAY, "Você não recebeu ExPoint pois não está na hora de seu trabalho...");
  					return 1;
				}
			}
			case 5:
			{
	   			if(HoraJogo < HorarioTrabalho[Profissao[playerid]][10] || HoraJogo > HorarioTrabalho[Profissao[playerid]][11]){
					SendClientMessage(playerid, COLOR_GRAY, "Você não recebeu ExPoint pois não está na hora de seu trabalho...");
  					return 1;
				}
			}
			case 6:
			{
	    		if(HoraJogo < HorarioTrabalho[Profissao[playerid]][12] || HoraJogo > HorarioTrabalho[Profissao[playerid]][13]){
					SendClientMessage(playerid, COLOR_GRAY, "Você não recebeu ExPoint pois não está na hora de seu trabalho...");
  					return 1;
				}
			}
		}
  	}
  	if(fexist(PlayerFile(PlayerName(playerid)))){
  	    new string[256];
  	    pStats[playerid][QR]++;
  	    if(pStats[playerid][QR] >= 3){
  	        pStats[playerid][QR] = 0;
	      	pStats[playerid][Respeito]++;
		   	SendClientMessage(playerid,COLOR_ROSA2,"Parabéns continue trabalhando assim e se mostrando eficiente.");
		 	format(string,sizeof(string),"Você ganhou mais 1 ponto de Respeito pelo trabalho. TOTAL DE RESPEITO: %d.",pStats[playerid][Respeito]);
      	   	SendClientMessage(playerid,COLOR_ROSA2,string);
        }
		if(pStats[playerid][ExPoints]+points >= ProfExp[Profissao[playerid]]){
		    pStats[playerid][XL]++;
	    	format(string,sizeof(string),"Você alcançou %d Experience Points e subiu mais um Level",ProfExp[Profissao[playerid]]);
	    	SendClientMessage(playerid,COLOR_GREEN,string);
			format(string, sizeof(string), "Seu Level agora é: %d", pStats[playerid][XL], playerid);
			SendClientMessage(playerid, COLOR_AZULPLUS, string);
	    	pStats[playerid][ExPoints] = 0;
			pStats[playerid][NM] = 0;
		} else {
	    	pStats[playerid][ExPoints]=pStats[playerid][ExPoints]+points;
		}
  	} else {
	  	printf("Erro ao acrescentar XL para %s",PlayerName(playerid));
		printf("O arquivo do jogador não foi encontrado");
  	}
	XPTTimer[playerid] = SetTimerEx("XPTText",1000,1,"d",playerid);
 	return 1;
}
public GatesCoordChecker()
{
	new Float:X, Float:Y, Float:Z, Plocalizado, Plocalizado2, i;
	for(new p; p<4; p++){
	    Plocalizado = 0;
	    Plocalizado2 = 0;
	    for(i=0; i<SLOTS2; i++){
	        if(IsPlayerConnected(i) && Profissao[i] == INSTRUTOR && GetDistanceToObject(i,portaoauto) < 15){
				MoveObject(portaoauto,1812.637,-2061.904,15.347,2);
				AbrindoPortaoAuto = 1;
				KillTimer(FechandoPortaoAuto);
				FechandoPortaoAuto = SetTimer("TerminarAbrirPortaoAuto",7000,0);
        	}
			if(IsPlayerConnected(i) && IsPlayerInAnyVehicle(i) && Profissao[i] == COP_SWAT || Profissao[i] == EXERCITO || Profissao[i] == COP_RODOVIARIO || Profissao[i] == COP_MILITAR || Profissao[i] == COP_NARCOTICOS || Profissao[i] == DELEGADO){
			    GetPlayerPos(i,X,Y,Z);
				if(GetDistanceToObject(i,Gates[p]) < 10) {
					Plocalizado=1;
				}
				if(GetDistanceToObject(i,Portao[p]) < 15) {
					Plocalizado2=1;
				}
			}
		}
		if(Plocalizado == 1){
			if(PortaoAbrindo[p] == 0 && PortaoAberto[p] == 0){
			    PortaoAbrindo[p]=1;
			    OpenGate(p);
			}
		} else {
		    if(PortaoFechando[p] == 0 && PortaoAberto[p] == 1){
		        PortaoFechando[p]=1;
		        CloseGate(p);
			}
		}
		if(Plocalizado2 == 1){
			if(DelegaAbrindo[p] == 0 && DelegaAberto[p] == 0){
			    DelegaAbrindo[p]=1;
			    OpenPortao(p);
			}
		} else {
		    if(DelegaFechando[p] == 0 && DelegaAberto[p] == 1){
		        DelegaFechando[p]=1;
		        ClosePortao(p);
			}
		}
	}
	return 1;
}
stock compare(string_text1[],string_text2[])
{
	if(!strlen(string_text1) || !strlen(string_text2)) return 0;
	new b;
	for(new i; i < strlen(string_text1); i+=1){
	    if(strcmp(string_text1[i],string_text2[i],true) == 0) b = 1;
	    else{ b = 0; break; }
	}
	return b;
}
stock IDName(Name[])
{
	for(new i=0; i<SLOTS2; i++){
		if(compare(PlayerName(i),Name)) return i;
	}
	return -1;
}
stock CobrarContaTelefone()
{
    SendECTVLMessage();
	new string[256];
	for(new p = 0; p < MAX_CASAS; p++){
	    if(!compare(pckStats[p][PickupDono],"NONE")) continue;
	    if(pckStats[p][SemTelefone] == 0 && pckStats[p][ContaTelefone] > 0){
	        if(strval(GetValue(PlayerFile(pckStats[p][PickupDono]),"Banco")) > pckStats[p][ContaTelefone]){
	            if(IsStringAName(pckStats[p][PickupDono])){
	                new ID = IDName(pckStats[p][PickupDono]);
					format(string,sizeof(string),"A conta de luz veio no valor de $%d,00 dólares, o dinheiro foi retirado do seu banco!",pckStats[p][ContaTelefone]);
					SendClientMessage(ID, COLOR_WHITE, string);
					pStats[ID][Banco] -= pckStats[p][ContaTelefone];
				}
				else{
					format(string,sizeof(string),"A conta de luz veio no valor de $%d,00 dólares, o dinheiro foi retirado do seu banco!",pckStats[p][ContaTelefone]);
					GuardarMensagem(pckStats[p][PickupDono],string);
					GiveValue(pckStats[p][PickupDono],"Banco",-pckStats[p][ContaTelefone]);
				}
			}
			else{
			    pckStats[p][SemTelefone] = 1;
			    if(IsStringAName(pckStats[p][PickupDono])){
		    	    format(string,sizeof(string),"e pague essa última conta de telefone de $%d,00 dólares",pckStats[p][ContaTelefone]);
					SendClientMessage(IDName(pckStats[p][PickupDono]),COLOR_GRAY,"Seu telefone foi CORTADO pois você não possui dinheiro para pagar!");
					SendClientMessage(IDName(pckStats[p][PickupDono]),COLOR_GRAY,"Se quiser liberar a luz devolta, vá até a ECTVL (Empresa de Contas Telefônicas Virtual Life)");
					SendClientMessage(IDName(pckStats[p][PickupDono]),COLOR_GRAY,string);
				}
				else{
					format(string,sizeof(string),"e pague essa última conta de telefone de $%d,00 dólares",pckStats[p][ContaTelefone]);
				    GuardarMensagem(pckStats[p][PickupDono],"Seu telefone foi CORTADO pois você não possui dinheiro para pagar...");
				    GuardarMensagem(pckStats[p][PickupDono],"Se quiser liberar a luz devolta, vá até a ECTVL (Empresa de Contas Telefônicas Virtual Life)");
				    GuardarMensagem(pckStats[p][PickupDono],string);
				}
			}
		}
	}
}
stock CobrarContaLuz()
{
    SendCOEVLMessage();
	new string[256];
	new dono[MAX_PLAYER_NAME];
	for(new p=0; p<MAX_CASAS; p++){
	    if(!compare(pckStats[p][PickupDono],"NONE")) continue;
	    format(dono,sizeof(dono),pckStats[p][PickupDono]);
	    if(pckStats[p][SemLuz] == 0 && pckStats[p][ContaLuz] > 0){
	    	if(strval(GetValue(dono,"Banco")) >= pckStats[p][ContaLuz]){
	    		if(IsStringAName(dono)){
	        		format(string,sizeof(string),"O dinheiro da conta de luz foi retirado do seu banco, $%d,00 dólares",pckStats[p][ContaLuz]);
	        		SendClientMessage(IDName(dono),COLOR_WHITE,string);
					pStats[IDName(dono)][Banco] -= pckStats[p][ContaLuz];
	        		pckStats[p][ContaLuz] = 0;
				}
				else{
		    		format(string,sizeof(string),"Sua conta de luz veio no valor de $%d",pckStats[p][ContaLuz]);
		    		GuardarMensagem(dono,string);
		    		GuardarMensagem(dono,"O dinheiro foi retirado do seu banco...");
		    		GiveValue(dono,"Banco",-pckStats[p][ContaLuz]);
	        		pckStats[p][ContaLuz] = 0;
				}
			}

			else{
			    pckStats[p][SemLuz] = 1;
		    	if(IsStringAName(dono)){
		    	    format(string,sizeof(string),"e pague essa última conta de luz de $%d,00 dólares",pckStats[p][ContaLuz]);
					SendClientMessage(IDName(dono),COLOR_GRAY,"Sua luz foi CORTADA pois você não possui dinheiro para pagar!");
					SendClientMessage(IDName(dono),COLOR_GRAY,"Se quiser liberar a luz devolta, vá até a COEVL (Companhia Elétrica Virtual Life)");
					SendClientMessage(IDName(dono),COLOR_GRAY,string);
				}
				else{
					format(string,sizeof(string),"e pague essa última conta de luz de $%d,00 dólares",pckStats[p][ContaLuz]);
				    GuardarMensagem(dono,"Sua luz foi CORTADA pois você não possui dinheiro para pagar...");
				    GuardarMensagem(dono,"Se quiser liberar a luz devolta, vá até a COEVL (Companhia Elétrica Virtual Life)");
				    GuardarMensagem(dono,string);
				}
			}
		}
		else continue;
	}
}
public VerificarContaLuz()
{
    new count[MAX_CASAS];
	for(new p=0; p<MAX_CASAS; p++){
	    if(sombalada[p] != 0){
	        pckStats[p][ContaLuz]++;
		}
		for(new i=0; i<SLOTS2; i++){
		    if(NaCasa[i] == 1 && PickupEntradaCasa[i] == 1 && TVligada[i] == 1 && count[p] == 0){
		        pckStats[p][ContaLuz] += 2;
		        count[p] = 1;
			}
		}
	}
}
stock RadioJogadorLigado(playerid){
	if(IsPlayerConnected(playerid)){
	    new bal = sombalada[PickupEntradaCasa[playerid]];
		if(bal == 1){
			PlayerPlaySound(playerid,1088,0.0,0.0,0.0);
  			GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~91.5",99999999,3);
			PlayerPlaySound(playerid,1062,0.0,0.0,0.0);
		}
		if(bal == 2){
			PlayerPlaySound(playerid,1063,0.0,0.0,0.0);
  			GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~92.9",99999999,3);
			PlayerPlaySound(playerid,1068,0.0,0.0,0.0);
		}
		if(bal == 3){
 			PlayerPlaySound(playerid,1069,0.0,0.0,0.0);
 			GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~93.9",99999999,3);
 			PlayerPlaySound(playerid,1076,0.0,0.0,0.0);
		}
		if(bal == 4){
  			PlayerPlaySound(playerid,1077,0.0,0.0,0.0);
  			GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~94.7",99999999,3);
			PlayerPlaySound(playerid,1097,0.0,0.0,0.0);
  		}
  		if(bal == 5){
  			PlayerPlaySound(playerid,1098,0.0,0.0,0.0);
  			GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~95.5",99999999,3);
  			PlayerPlaySound(playerid,1183,0.0,0.0,0.0);
		}
		if(bal == 6){
  			PlayerPlaySound(playerid,1084,0.0,0.0,0.0);
  			GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~96.9",99999999,3);
  			PlayerPlaySound(playerid,1185,0.0,0.0,0.0);
  		}
  		if(bal == 7){
  			PlayerPlaySound(playerid,1086,0.0,0.0,0.0);
  			GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~97.9",99999999,3);
  			PlayerPlaySound(playerid,1187,0.0,0.0,0.0);
		}
	}
}
stock RadioLigado(playerid){
	if(IsPlayerConnected(playerid)){
	    sombalada[PickupEntradaCasa[playerid]] = sombalada[PickupEntradaCasa[playerid]]+1;
	    new bal = sombalada[PickupEntradaCasa[playerid]];
		for(new i=0; i<SLOTS2; i++){
		    if(PickupEntradaCasa[playerid] == PickupEntradaCasa[i]){
				if(bal == 1){
					PlayerPlaySound(i,1088,0.0,0.0,0.0);
  					GameTextForPlayer(i,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~91.5",99999999,3);
					PlayerPlaySound(i,1062,0.0,0.0,0.0);
					sombalada[PickupEntradaCasa[i]] = 1;
				}
				if(bal == 2){
					PlayerPlaySound(i,1063,0.0,0.0,0.0);
  					GameTextForPlayer(i,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~92.9",99999999,3);
					PlayerPlaySound(i,1068,0.0,0.0,0.0);
					sombalada[PickupEntradaCasa[i]] = 2;
				}
				if(bal == 3){
  					PlayerPlaySound(i,1069,0.0,0.0,0.0);
  					GameTextForPlayer(i,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~93.9",99999999,3);
  					PlayerPlaySound(i,1076,0.0,0.0,0.0);
  					sombalada[PickupEntradaCasa[i]] = 3;
  				}
  				if(bal == 4){
  					PlayerPlaySound(i,1077,0.0,0.0,0.0);
  					GameTextForPlayer(i,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~94.7",99999999,3);
					PlayerPlaySound(i,1097,0.0,0.0,0.0);
					sombalada[PickupEntradaCasa[i]] = 4;
  				}
  				if(bal == 5){
  					PlayerPlaySound(i,1098,0.0,0.0,0.0);
  					GameTextForPlayer(i,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~95.5",99999999,3);
  					PlayerPlaySound(i,1183,0.0,0.0,0.0);
        		    sombalada[PickupEntradaCasa[i]] = 5;
				}
				if(bal == 6){
  					PlayerPlaySound(i,1084,0.0,0.0,0.0);
  					GameTextForPlayer(i,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~96.9",99999999,3);
  					PlayerPlaySound(i,1185,0.0,0.0,0.0);
  					sombalada[PickupEntradaCasa[i]] = 6;
  				}
  				if(bal == 7){
  					PlayerPlaySound(i,1086,0.0,0.0,0.0);
  					GameTextForPlayer(i,"~n~~n~~n~~n~~n~~n~~r~[Radio]: ~y~Frequencia ~w~97.9",99999999,3);
  					PlayerPlaySound(i,1187,0.0,0.0,0.0);
  					sombalada[PickupEntradaCasa[i]] = 7;
				}
			}
		}
	}
}
stock ProximaRadio(playerid){
	if(sombalada[PickupEntradaCasa[playerid]] >= 1 && sombalada[PickupEntradaCasa[playerid]] <= 6){
	    SendClientMessage(playerid, COLOR_COP_SWAT, "[Próxima Estação] Sintonizando...");
		RadioLigado(playerid);
	} else {
		SendClientMessage(playerid, COLOR_YELLOW,"Sintonia inexistente.");
		return 0;
 	}
 	return 1;
}
stock AnteriorRadio(playerid){
	if(sombalada[PickupEntradaCasa[playerid]] >= 2 && sombalada[PickupEntradaCasa[playerid]] <= 7){
		sombalada[PickupEntradaCasa[playerid]] = sombalada[PickupEntradaCasa[playerid]]-2;
 		SendClientMessage(playerid, COLOR_COP_SWAT, "[Estação Anterior] Sintonizando...");
	    RadioLigado(playerid);
	} else {
		SendClientMessage(playerid, COLOR_YELLOW,"Sintonia inexistente.");
		return 0;
	}
	return 1;
}
stock DesligarJogadorRadio(playerid)
{
    if(sombalada[PickupEntradaCasa[playerid]] != 0){
  		PlayerPlaySound(playerid, 1186, 0.0,0.0,0.0);
		GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~n~~n~~r~Radio ~w~Desligada",3000,3);
	}
}
stock DesligarRadio(playerid){
	if(sombalada[PickupEntradaCasa[playerid]] != 0){
	    for(new i=0; i<SLOTS2; i++){
	        if(PickupEntradaCasa[i] == PickupEntradaCasa[playerid]){
        		PlayerPlaySound(i, 1186, 0.0,0.0,0.0);
        		sombalada[PickupEntradaCasa[i]] = 0;
				GameTextForPlayer(i,"~n~~n~~n~~n~~n~~n~~n~~n~~r~Radio ~w~Desligada",3000,3);
			}
		}
	}
}
writebanlog(log[]){
	if(!fexist("Utilidades/BAN.txt")){
		new File:banfile = fopen("Utilidades/BAN.txt",io_write);
		fwrite(banfile,"|================================| BANIMENTOS |================================|");
        fwrite(banfile,"\r\n");
		fwrite(banfile,log);
		fwrite(banfile,"\r\n");
		fclose(banfile);
	}
	else{
	    new File:banfile = fopen("Utilidades/BAN.txt",io_append);
		fwrite(banfile,log);
		fwrite(banfile,"\r\n");
		fclose(banfile);
	}
}
stock Banir(playerid, const motive[]){
	new msg[256];
	pStats[playerid][Banido] = 1;
	format(msg,sizeof(msg),"[VLR] %s foi BANIDO do servidor! MOTIVO:",PlayerName(playerid));
	SendClientMessageToAll(COLOR_RED2,msg);
	SendClientMessageToAll(COLOR_YELLOW,motive);
	Ban(playerid);
}
public ProximoCanal(playerid)
{
	new validnext;
	for(new i=PlayerSpec[playerid]; i<SLOTS2; i++){
		if(IsPlayerConnected(i) && i > PlayerSpec[playerid] && validnext == 0 && i != playerid){
		    validnext = 1;
			PlayerSpec[playerid] = i;
			Spectator[i] = playerid;
		    SetPlayerInterior(playerid,GetPlayerInterior(i));
		    if(CameraAtiva[i] == 1){
		        SetPlayerCameraPos(playerid,Filmagem[i][0],Filmagem[i][1],Filmagem[i][2]);
				SetPlayerCameraLookAt(playerid,Filmagem[i][3],Filmagem[i][4],Filmagem[i][5]);
				return 1;
			}
			if(Entrevista[i][1] == 1){
			    SetPlayerCameraPos(playerid,CamEntrevista[Entrevista[i][3]][0],CamEntrevista[Entrevista[i][3]][1],CamEntrevista[Entrevista[i][3]][2]);
			    SetPlayerCameraLookAt(playerid,CamEntrevista[Entrevista[i][3]][3],CamEntrevista[Entrevista[i][3]][4],CamEntrevista[Entrevista[i][3]][5]);
			    return 1;
			}
			if(Entrevista[i][2] == 1){
			    SetPlayerCameraPos(playerid,CamEntrevista[i][0],CamEntrevista[i][1],CamEntrevista[i][2]);
			    SetPlayerCameraLookAt(playerid,CamEntrevista[i][3],CamEntrevista[i][4],CamEntrevista[i][5]);
			    return 1;
			}
		    if(IsPlayerInAnyVehicle(i)) PlayerSpectateVehicle(playerid,GetPlayerVehicleID(i));
			else PlayerSpectatePlayer(playerid,i);
		}
	}
	if(validnext == 0){
		SendClientMessage(playerid, COLOR_GRAY, "Mudando... Sinto muito, próximos canais fora do ar!");
		return 0;
	}
	return 1;
}

public AnteriorCanal(playerid)
{
	new validant;
	for(new i=PlayerSpec[playerid]; i>0; i--){
		if(IsPlayerConnected(i) && i < PlayerSpec[playerid] && validant == 0 && i != playerid){
		    validant = 1;
			PlayerSpec[playerid] = i;
			Spectator[i] = playerid;
		    SetPlayerInterior(playerid,GetPlayerInterior(i));
		    if(CameraAtiva[i] == 1){
		        SetPlayerCameraPos(playerid,Filmagem[i][0],Filmagem[i][1],Filmagem[i][2]);
				SetPlayerCameraLookAt(playerid,Filmagem[i][3],Filmagem[i][4],Filmagem[i][5]);
				return 1;
			}
		    if(Entrevista[i][1] == 1){
			    SetPlayerCameraPos(playerid,CamEntrevista[Entrevista[i][3]][0],CamEntrevista[Entrevista[i][3]][1],CamEntrevista[Entrevista[i][3]][2]);
			    SetPlayerCameraLookAt(playerid,CamEntrevista[Entrevista[i][3]][3],CamEntrevista[Entrevista[i][3]][4],CamEntrevista[Entrevista[i][3]][5]);
			    return 1;
			}
			if(Entrevista[i][2] == 1){
			    SetPlayerCameraPos(playerid,CamEntrevista[i][0],CamEntrevista[i][1],CamEntrevista[i][2]);
			    SetPlayerCameraLookAt(playerid,CamEntrevista[i][3],CamEntrevista[i][4],CamEntrevista[i][5]);
			    return 1;
			}
		    if(IsPlayerInAnyVehicle(i)) PlayerSpectateVehicle(playerid,GetPlayerVehicleID(i));
			else PlayerSpectatePlayer(playerid,i);
		}
	}
	if(validant == 0){
		SendClientMessage(playerid, COLOR_GRAY, "Mudando... Sinto muito, canais anteriores fora do ar!");
		return 0;
	}
	return 1;
}
public DesligarTV(playerid)
{
    TVligada[playerid] = 0;
    AcabouAssistirTV[playerid] = 1;
    TogglePlayerSpectating(playerid,0);
    SetPlayerInterior(playerid,AntInt[playerid]);
    SetPlayerPos(playerid,AntPos[playerid][0],AntPos[playerid][1],AntPos[playerid][2]);
    Spectator[PlayerSpec[playerid]] = INVALID_PLAYER_ID;
    PlayerSpec[playerid] = INVALID_PLAYER_ID;
	GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~n~~n~~r~TV ~w~Desligada",3000,3);
	SetTimerEx("ZerarAcabouAssistir",2500,0,"d",playerid);
}
public ZerarAcabouAssistir(playerid) AcabouAssistirTV[playerid] = 0;
public LavandoLimosine(playerid){
	SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "A lavagem está completa.");
    TogglePlayerControllable(playerid, 1);
    LimoLavada[GetPlayerVehicleID(playerid)] =1;
    AddPlayerMoney(playerid, 200, 3);
    LavagemLimo[playerid] = 1;
	DisablePlayerCheckpoint(playerid);
    CheckpointStatus[playerid] = NONE;
    SetTimerEx("LimoLimpa",300000,false,"%d",playerid);
    AcrescentarExPoints(playerid,1);
    if(JogadorContratado(playerid,2)) AcrescentarLucro(2,100);
}
public LimoLimpa(playerid){
	LimoLavada[GetPlayerVehicleID(playerid)]=0;
	LavagemLimo[playerid] = 0;
 	SendClientMessage(playerid,COLOR_MOTORISTA_PARTICULAR, "A limosine está suja, você pode ir lava-lá denovo se quiser.");
    return 1;
}
public ChecandoLimo(playerid){
	SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Motor, está OK.");
    TogglePlayerControllable(playerid, 1);
    SetVehicleHealth(GetPlayerVehicleID(playerid),1000);
    MotorLimo[playerid] = 1;
    LimoRevisada[GetPlayerVehicleID(playerid)] = 1;
	DisablePlayerCheckpoint(playerid);
	SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Vá deixar a Limosine no seu Chefe, ATENÇÃO: Não bata!");
	SetPlayerCheckpoint(playerid,1224.7695,-1828.1321,13.408,3.0);
    CheckpointStatus[playerid] = REVISAOLIMO2;
}
public ChecagemDeMotor(playerid){
	if(Profissao[playerid] == MOTORISTA_PARTICULAR){
		LimoRevisada[GetPlayerVehicleID(playerid)] = 0;
		MotorLimo[playerid] = 0;
	 	SendClientMessage(playerid,COLOR_MOTORISTA_PARTICULAR, "É necessária uma nova revisão na Limosine da empresa.");
	}
	return 1;
}
public AplicarGasosa(playerid,vehicleid,amount)
{
	SendClientMessage(playerid,COLOR_GREEN,"Veículo abastecido!");
	vStats[vehicleid][gasolina]=amount;
	TogglePlayerControllable(playerid,1);
	return 1;
}
dcmd_registrar(playerid,tmp[]) {
	if(NaoLogar[playerid] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Espere um tempo para se registrar...");
	if (fexist(PlayerFile(PlayerName(playerid)))){
		SendClientMessage(playerid, COLOR_GRAY, "Você já está registrado.");
		return 1;
	}
	if(Logado[playerid] == 1) {
		SendClientMessage(playerid, COLOR_GRAY, "Você já está registrado e logado no jogo");
		return 1;
	}
	if (strlen(tmp)==0) {
		SendClientMessage(playerid, COLOR_GRAY, "Sintaxe incorreta! USO: /registrar [senha]");
		return 1;
	}
	if(strfind(tmp,"\\",true) != -1){
	    SendClientMessage(playerid, COLOR_GRAY, "Não use \"\\\" na senha...");
		return 1;
	}
	else{
	    TrancarVeiculoPorProf(playerid);
	    Logado[playerid] = 1;
	    new File:playerfile = fopen(PlayerFile(PlayerName(playerid)),io_write);
		fclose(playerfile);
		set(pStats[playerid][Senha],tmp);
		set(pStats[playerid][MSGBIP],"NONE");
		set(pStats[playerid][TituloJornal],"NONE");
		set(pStats[playerid][GangueNome],"NONE");
		set(pStats[playerid][DonoCasaConvidada],"NONE");
		pStats[playerid][Prof] = 1;
		pStats[playerid][Higiene] = 500;
		pStats[playerid][Banco] = 5000;
		pStats[playerid][LastVeh] = 1;
		pStats[playerid][CaixaPostal] = 1;
		SavePlayer(playerid);
		LoadPlayer(playerid);
		Profissao[playerid] = 1;
		TextDrawHideForPlayer(playerid,Bemvindo);
		new hs = minrand(0,3)+1;
		if(hs == 1){
			new Float:X = -2174.9314,
				Float:Y = 665.1288,
				Float:Z = 50.4694,
				Float:ang = 318.7636;
			pStats[playerid][SpawnPosX] = X;
			pStats[playerid][SpawnPosY] = Y;
			pStats[playerid][SpawnPosZ] = Z;
			pStats[playerid][SpawnPosAng] = ang;
			pStats[playerid][Skin] = 23;
			SetSpawnInfo(playerid, 1, pStats[playerid][Skin], -2174.9314, 665.1288, 50.4694, 318.7636, 0, 0, 0, 0, 0, 0);
			SpawnPlayer(playerid);
			Logado[playerid] = 1;
			pStats[playerid][HistoriaSelecionada] = 1;
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			new string[256];
			format(string, sizeof(string),"Você acabou de se registrar, sua senha é \"%s\" e seu nickname é %s.", tmp, PlayerName(playerid));
			SendClientMessage(playerid, COLOR_PALHA,string);
			SendClientMessage(playerid, COLOR_YELLOW, "Complete a história");
  		    SendClientMessage(playerid, COLOR_WHITE,"OBS: Apenas pessoas próximas podem ver o que você escreve, mais info: /sistchat.");
			SendClientMessage(playerid, COLOR_RED2, "Mano, vá na porta pegar a droga dos TRIADS.");
			SetPlayerCheckpoint(playerid,-2172.9651,679.7962,55.1627,2.5);
			RegisterPlayer[playerid] = 1;
			CheckpointStatus[playerid] = NOSTRIADS;
		}
		else if(hs == 2){
            new Float:X = 1886.6064,
				Float:Y = 2070.8767,
				Float:Z = 11.0625,
				Float:ang = 268.3935;
			pStats[playerid][SpawnPosX] = X;
			pStats[playerid][SpawnPosY] = Y;
			pStats[playerid][SpawnPosZ] = Z;
			pStats[playerid][SpawnPosAng] = ang;
			pStats[playerid][Skin] = 186;
			SetSpawnInfo(playerid, 1, pStats[playerid][Skin], 1886.6064, 2070.8767, 11.0625, 268.3935, 0, 0, 0, 0, 0, 0);
			SpawnPlayer(playerid);
			Logado[playerid] = 1;
			pStats[playerid][HistoriaSelecionada] = 2;
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
        	new string[256];
			format(string, sizeof(string),"Você acabou de se registrar, sua senha é \"%s\" e seu nickname é %s.", tmp, PlayerName(playerid));
			SendClientMessage(playerid, COLOR_PALHA,string);
			SendClientMessage(playerid, COLOR_YELLOW, "Complete a história");
  		    SendClientMessage(playerid, COLOR_RED2,"OBS: Apenas pessoas próximas podem ver o que você escreve, mais info: /sistchat.");
			SendClientMessage(playerid, COLOR_WHITE, "Ahhh... como sempre a mesma cidade chata!");
			SetTimerEx("Conversa21",3000,false,"d",playerid);
		}
		else if(hs == 3){
            new Float:X = -1736.4148,
				Float:Y = -2491.3481,
				Float:Z = 12.2241,
				Float:ang = 68.5290;
			pStats[playerid][SpawnPosX] = X;
			pStats[playerid][SpawnPosY] = Y;
			pStats[playerid][SpawnPosZ] = Z;
			pStats[playerid][SpawnPosAng] = ang;
			pStats[playerid][Skin] = 252;
			SetSpawnInfo(playerid, 1, pStats[playerid][Skin], -1736.4148, -2491.3481, 12.2241, 68.5290, 0, 0, 0, 0, 0, 0);
			SpawnPlayer(playerid);
			Logado[playerid] = 1;
			pStats[playerid][HistoriaSelecionada] = 3;
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
        	new string[256];
			format(string, sizeof(string),"Você acabou de se registrar, sua senha é \"%s\" e seu nickname é %s.", tmp, PlayerName(playerid));
			SendClientMessage(playerid, COLOR_PALHA,string);
			SendClientMessage(playerid, COLOR_YELLOW, "Complete a história");
  		    SendClientMessage(playerid, COLOR_RED2,"OBS: Apenas pessoas próximas podem ver o que você escreve, mais info: /sistchat.");
			SendClientMessage(playerid, COLOR_WHITE, "Os sequestradores te deixaram aqui, e estão mandando você ir deixar esse pacote em San Fierro.");
			SetPlayerCheckpoint(playerid,-2026.9244,122.6370,28.9294,2.5);
			CheckpointStatus[playerid] = ENTREGASF;
		}
		SendClientMessage(playerid, COLOR_JUIZ, "As mensagens digitadas aparecerão apenas para jogadores próximos a você!");
		SendClientMessage(playerid, COLOR_JUIZ, "Para mais informações digite /sistchat");
		SendClientMessage(playerid, COLOR_WHITE, "Para pular a história digite /passarhistoria");
		return 1;
	}
}

dcmd_logar(playerid,tmp[]) {
	if(NaoLogar[playerid] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Espere um tempo para se logar...");
    if(!fexist(PlayerFile(PlayerName(playerid)))) {
		SendClientMessage(playerid, COLOR_GRAY, "Você não está registrado. Entre com /registrar [senha]");
		return 1;
	}
    if (Logado[playerid] == 1) {
		SendClientMessage(playerid, COLOR_GRAY, "Você já está logado.");
		return 1;
	}
    if (strlen(tmp)==0) {
		SendClientMessage(playerid, COLOR_GRAY, "Você tem uma senha. USO: /logar [senha]");
		return 1;
	}
	if(compare(tmp,GetValue(PlayerFile(PlayerName(playerid)),"Senha"))){
	    Logado[playerid] = 1;
	    LoadPlayer(playerid);
	    CellCredits[playerid] = pStats[playerid][CreditosCell];
		if(pStats[playerid][HistoriaFeita] == 0){
			if(pStats[playerid][HistoriaSelecionada] == 1){
       	 		new Float:X = -2174.9314;
				new Float:Y = 665.1288;
				new Float:Z = 50.4694;
				new Float:ang = 318.7636;
				pStats[playerid][SpawnPosX] = X;
				pStats[playerid][SpawnPosY] = Y;
				pStats[playerid][SpawnPosZ] = Z;
				pStats[playerid][SpawnPosAng] = ang;
				SetSpawnInfo(playerid, 1, pStats[playerid][Skin], -2174.9314, 665.1288, 50.4694, 318.7636, 0, 0, 0, 0, 0, 0);
				LogarPlayer(playerid);
				Logado[playerid] = 1;
				TextDrawHideForPlayer(playerid,Bemvindo);
				TrancarVeiculoPorProf(playerid);
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_YELLOW, "Complete a história");
  		  	    SendClientMessage(playerid, COLOR_WHITE,"OBS: Apenas pessoas próximas podem ver o que você escreve, mais info: /sistchat.");
				SendClientMessage(playerid, COLOR_RED2, "Mano, vá na porta pegar a droga dos TRIADS.");
  		  	    SetPlayerCheckpoint(playerid,-2172.9651,679.7962,55.1627,2.5);
   		 	    CheckpointStatus[playerid] = NOSTRIADS;
        	}
        	else if(pStats[playerid][HistoriaSelecionada] == 2){
        		new Float:X = 1886.6064;
				new Float:Y = 2070.8767;
				new Float:Z = 11.0625;
				new Float:ang = 268.3935;
				pStats[playerid][SpawnPosX] = X;
				pStats[playerid][SpawnPosY] = Y;
				pStats[playerid][SpawnPosZ] = Z;
				pStats[playerid][SpawnPosAng] = ang;
				SetSpawnInfo(playerid, 1, pStats[playerid][Skin], 1886.6064, 2070.8767, 11.0625, 268.3935, 0, 0, 0, 0, 0, 0);
				LogarPlayer(playerid);
				Logado[playerid] = 1;
				TextDrawHideForPlayer(playerid,Bemvindo);
				TrancarVeiculoPorProf(playerid);
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_YELLOW, "Complete a história.");
				SendClientMessage(playerid, COLOR_WHITE,"OBS: Apenas pessoas próximas podem ver o que você escreve, mais info: /sistchat.");
				SendClientMessage(playerid, COLOR_WHITE, "Ahhh... como sempre a mesma cidade chata!");
				SetTimerEx("Conversa21",3000,false,"d",playerid);
        	}
        	else if(pStats[playerid][HistoriaSelecionada] == 3){
		    	new Float:X = -1736.4148;
				new Float:Y = -2491.3481;
				new Float:Z = 12.2241;
				new Float:ang = 68.5290;
				pStats[playerid][SpawnPosX] = X;
				pStats[playerid][SpawnPosY] = Y;
				pStats[playerid][SpawnPosZ] = Z;
				pStats[playerid][SpawnPosAng] = ang;
				SetPlayerSkin(playerid,252);
				SetSpawnInfo(playerid, 1, pStats[playerid][Skin], -1736.4148, -2491.3481, 12.2241, 68.5290, 0, 0, 0, 0, 0, 0);
        		LogarPlayer(playerid);
				Logado[playerid] = 1;
       			TextDrawHideForPlayer(playerid,Bemvindo);
       			TrancarVeiculoPorProf(playerid);
       			SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_DESEMPREGADO," ");
				SendClientMessage(playerid, COLOR_YELLOW, "Complete a história...");
			    SendClientMessage(playerid, COLOR_WHITE,"OBS: Apenas pessoas próximas podem ver o que você escreve, mais info: /sistchat.");
				SendClientMessage(playerid, COLOR_WHITE, "Os sequestradores te deixaram aqui, e estão mandando você ir deixar esse pacote em San Fierro.");
				SetPlayerCheckpoint(playerid,-2026.9244,122.6370,28.9294,2.5);
       			CheckpointStatus[playerid] = ENTREGASF;
			}
			else{
            	new hs = minrand(0,2)+1;
            	pStats[playerid][HistoriaSelecionada] = hs;
            	SendClientMessage(playerid, COLOR_GRAY, "Logue-se novamente pois sua história não foi identifacada!");
            	SendClientMessage(playerid, COLOR_GRAY, "Devido a isso agora foi sorteado a sua nova história!");
			}
        	SendClientMessage(playerid, COLOR_JUIZ, "As mensagens digitadas aparecerão apenas para jogadores próximos a você!");
			SendClientMessage(playerid, COLOR_JUIZ, "Para mais informações digite /sistchat");
			return 1;
		}
    	else{
			Logado[playerid] = 1;
			LogarPlayer(playerid);
			SendClientMessage(playerid, COLOR_WHITE, "Continue sua vida...");
			TrancarVeiculoPorProf(playerid);
			EnviarMensagensGuardadas(playerid);
			if(pStats[playerid][ContinuarPos] == 1 && Presos[playerid] == 0){
			    SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "Para continuar na posição de onde parou digite /continuar");
                SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "Você tem 15 segundos para responder.");
				TimerContinuacaoPos[playerid] = SetTimerEx("CancelarContinuacaoPos",15000,0,"d",playerid);
			}
			if(pStats[playerid][Divida] > 0){
			    SendClientMessage(playerid, COLOR_GREEN, "[BANCO] A dívida de seu empréstimo continua!");
		    	TimerDivida[playerid] = SetTimerEx("Cobrar",900000,false,"d",playerid);
			}
			return 1;
		}
	}
	else{
	    SendClientMessage(playerid, COLOR_GRAY, "Sua senha está incorreta, por favor mensione a senha correta para logar-se.");
		return 1;
	}
}
public ContandoDerby(){
	DMinutosRestantes--;
	if(DMinutosRestantes > 1){
	    new string[256];
	    format(string,sizeof(string),"Restam %d minutos para o Derby iniciar!",DMinutosRestantes);
	    SendClientMessageToAll(COLOR_WHITE, string);
	    SendClientMessageToAll(COLOR_WHITE, "Para participar digite /participar e depois vá oficializar sua participação");
	    SetTimer("ContandoDerby",60000,0);
	}
	else if(DMinutosRestantes == 1){
	    SendClientMessageToAll(COLOR_WHITE, "Resta 1 minuto para o Derby iniciar!");
	    SetTimer("ContandoDerby",60000,0);
	}
	else if(DMinutosRestantes == 0){
	    SendClientMessageToAll(COLOR_LIGHT_YELLOW, "|==============================| DERBY INICIADO |==============================|");
		IniciarDerby();
	}
}
public IniciarDerby(){
	if(DerbyAvisado == 1){
	    ValendoDerby();
	    if(QtDerbeiro() <= 2){
   			SendClientMessageToAll(COLOR_GRAY, "[ESTÁDIO] Infelizmente não podemos iniciar o Derby com 2 ou menos participantes.");
   			SendClientMessageToAll(COLOR_GRAY, "[ESTÁDIO] Derby CANCELADO!");
            for(new i=0; i<SLOTS2; i++){
                if(OficializarParticipacao[i] == 1){
	   	    	   	DisablePlayerCheckpoint(i);
	   	    	   	CheckpointStatus[i] = NONE;
				}
				if(PlayerDerby[i] == 1){
				    Ocupado[Derby1]  	= 	0;
				    Ocupado[Derby2]  	= 	0;
				    Ocupado[Derby3]  	= 	0;
				    Ocupado[Derby4]  	= 	0;
				    Ocupado[Derby5]  	= 	0;
				    Ocupado[Derby6]  	= 	0;
				    Ocupado[Derby7]  	= 	0;
				    Ocupado[Derby8]  	= 	0;
				    Ocupado[Derby9]  	= 	0;
				    Ocupado[Derby10] 	= 	0;
                	PlayerDerby[i] 		= 	0;
                	PlayerDerby[i] 		= 	0;
					DerbyIniciado[i] 	=	0;
					DerbyAvisado 		= 	0;
					DerbyIniciou 		= 	0;
	   	    		TogglePlayerControllable(i,1);
	   	    		SetPlayerInterior(i, 0);
	   	   			SetPlayerPos(i,2693.9199,-1701.8795,11.0741);
				}
            }
		}
		else{
			for(new i=0; i<SLOTS2; i++){
				if(IsPlayerConnected(i)){
	   	    		if(OficializarParticipacao[i] == 1){
	   	    	    	DisablePlayerCheckpoint(i);
	   	    	    	CheckpointStatus[i] = NONE;
					}
				   	SendClientMessage(i, COLOR_JUIZ, "[ESTÁDIO] O Derby irá começar em 10 segundos.");
				    SegundosContagem[i] = 10;
					new string[256];
					DerbyIniciou = 1;
					format(string,sizeof(string),"~w~%d",SegundosContagem[i]);
			    	GameTextForAll(string,1000,4);
					SegundosContagem[i] --;
				}
			}
        	SetTimer("ContagemD",1000,0);
		}
	}
	return 1;
}
public ContagemD(){
	new string[256];
	for(new i=0; i<SLOTS2; i++){
	    if(IsPlayerConnected(i)){
			if(SegundosContagem[i] > 0){
				format(string,sizeof(string),"~w~%d",SegundosContagem[i]);
				GameTextForAll(string,1000,4);
				SegundosContagem[i]--;
				SetTimerEx("ContagemD",1000,0,"d",i);
			}
			else{
				SegundosContagem[i] = 0;
				GameTextForAll("~r~VALENDO",2000,4);
				TogglePlayerControllable(i,1);
				DerbyIniciado[i] = 1;
			}
		}
	}
}
public VendoVencedor(){
	if(QtDerbeiro() == 1){
 		for(new i=0; i<SLOTS2; i++){
       		if(IsPlayerConnected(i) && PlayerDerby[i] == 1){
	  	  		new string[256];
	    		SendClientMessageToAll(COLOR_WHITE, " ");
				format(string, sizeof(string), "[ESTÁDIO] Temos um NOVO VENCEDOR no Derby: %s PARABÉNS", PlayerName(i));
				SendClientMessageToAll(COLOR_WHITE, string);
				SendClientMessageToAll(COLOR_WHITE, " ");
				AddPlayerMoney(i, 300, 7);
				GameTextForPlayer(i,"~g~VENCEDOR ~y~=)",4000,4);
				SendClientMessage(i, COLOR_JUIZ, "Parabéns e obrigado por participar, você recebeu o seu prêmio em dinheiro... $300");
				SetPlayerPos(i,2693.9199,-1701.8795,11.0741);
				pStats[i][Respeito]++;
				SendClientMessage(i, COLOR_WHITE, "Pilotando desse jeito você disperta os outros! Conseguiu mais 1 ponto de respeito. PARABÉNS");
				PlayerDerby[i] 		= 	0;
				DerbyIniciado[i] 	= 	0;
				DerbyAvisado 		= 	0;
				DerbyIniciou 		= 	0;
				Ocupado[Derby1]  	= 	0;
    			Ocupado[Derby2]  	= 	0;
			    Ocupado[Derby3]  	= 	0;
			    Ocupado[Derby4]  	= 	0;
			    Ocupado[Derby5]  	= 	0;
			    Ocupado[Derby6]  	= 	0;
			    Ocupado[Derby7]  	= 	0;
			    Ocupado[Derby8]  	= 	0;
			    Ocupado[Derby9]  	= 	0;
			    Ocupado[Derby10] 	= 	0;
				break;
			}
		}
	} else {
		SetTimer("VendoVencedor",1000,0);
	}
	return 1;
}
stock QtParticipantes(){
    new result;
	for(new i = 0; i < SLOTS2; i++){
		if(OficializarParticipacao[i] == 1) result++;
	}
	return result;
}
stock QtDerbeiro(){
	new result;
	for(new i = 0; i < SLOTS2; i++){
		if(PlayerDerby[i]) result++;
	}
	return result;
}
public ValendoDerby(){
   	new string[256];
   	SendClientMessageToAll(COLOR_WHITE, " ");
   	SendClientMessageToAll(COLOR_WHITE, "[ESTÁDIO] Queridos telespectadores e amantes do esporte, estamos aqui iniciando mais um Derby");
	format(string, sizeof(string), "[ESTÁDIO] Com patriocínio do Banco Life, contamos com %d derbeiros. A corrida iniciou...", QtDerbeiro());
	SendClientMessageToAll(COLOR_WHITE, string);
	SendClientMessageToAll(COLOR_WHITE, " ");
	contagemof = QtDerbeiro();
	SetTimer("VendoVencedor",1000,1);
}
public FimInscCC(){
	CaptureCAberto = 0;
	SendClientMessageToAll(COLOR_ROSA," ");
	SendClientMessageToAll(COLOR_ROSA,"|==================| [CTC] Capture The Cars |==================|");
	SendClientMessageToAll(COLOR_TRAFICANTE, "[CTC] As inscrições para o CTC foram FECHADAS!!");
	SendClientMessageToAll(COLOR_ROSA,"[CTC] O evento iniciará em 1 minuto.");
  	SetTimer("ComecaEm60",60000,0);
  	return 1;
}
public ComecaEm60(){
	new result;
	for(new i = 0; i < SLOTS2; i++){
		if(EstouNoCC[i] == 1){
			result++;
		}
	}
	if(result < 2){
		SendClientMessageToAll(COLOR_ROSA," ");
		SendClientMessageToAll(COLOR_ORANGE,"|==================| [CTC] Capture The Cars |==================|");
		SendClientMessageToAll(COLOR_ORANGE,"Cancelado! A Quantidade mínima de jogadores não foi atendida.");
		for(new i = 0; i < SLOTS2; i++){
        	EstouNoCC[i] = 0;
        }
        return 1;
    } else if(result >= 2){
		SendClientMessageToAll(COLOR_ROSA," ");
		SendClientMessageToAll(COLOR_ORANGE,"|==================| [CTC] Capture The Cars |==================|");
		SendClientMessageToAll(COLOR_ORANGE,"|==================|      INICIADO     |==================|");
		SendClientMessageToAll(COLOR_ROSA," ");
		for(new r = 0; r < 24; r++){
			DestroyVehicle(Reboque[r]);
		}
		for(new c = 0; c < 20; c++){
		    DestroyVehicle(CarrosCC[c]);
		}
		Reboque[0] = CreateVehicle(525,2186.2209,647.9698,10.9477,2.7772,1,5,120000);
		Reboque[1] = CreateVehicle(525,2212.6323,648.3787,10.9591,359.1076,1,5,120000);
		Reboque[2] = CreateVehicle(525,2223.4131,647.1266,10.9664,359.8125,1,5,120000);
		Reboque[3] = CreateVehicle(525,2265.3369,646.8789,10.8754,359.8486,1,5,120000);
		Reboque[4] = CreateVehicle(525,2249.7559,698.1426,10.9742,177.3353,1,5,120000);
		Reboque[5] = CreateVehicle(525,2221.5974,699.3427,10.8573,179.3859,1,5,120000);
		Reboque[6] = CreateVehicle(525,2211.7078,698.8580,10.9964,179.0932,1,5,120000);
		Reboque[7] = CreateVehicle(525,2169.4988,698.0208,10.9834,176.7393,1,5,120000);
		Reboque[8] = CreateVehicle(525,2213.4895,728.3273,10.9481,0.5972,1,5,120000);
		Reboque[9] = CreateVehicle(525,2223.0400,726.7216,10.9325,0.3457,1,5,120000);
		Reboque[10] = CreateVehicle(525,2185.4255,727.4755,10.9125,357.7857,1,5,120000);
		Reboque[11] = CreateVehicle(525,2264.9734,728.1599,10.9674,2.1711,1,5,120000);
		Reboque[12] = CreateVehicle(525,2325.6348,648.1996,10.9589,0.6617,1,5,120000);
		Reboque[13] = CreateVehicle(525,2352.3206,647.8263,10.9114,1.6850,1,5,120000);
		Reboque[14] = CreateVehicle(525,2362.2144,648.0574,11.0293,359.5310,1,5,120000);
		Reboque[15] = CreateVehicle(525,2405.0310,648.4916,10.9894,3.1586,1,5,120000);
		Reboque[16] = CreateVehicle(525,2389.4441,698.2945,10.9575,180.1375,1,5,120000);
		Reboque[17] = CreateVehicle(525,2362.1626,699.1590,10.8764,180.8958,1,5,120000);
		Reboque[18] = CreateVehicle(525,2352.8254,699.3028,10.9660,179.9610,1,5,120000);
		Reboque[19] = CreateVehicle(525,2309.8076,698.8687,10.9285,178.4343,1,5,120000);
		Reboque[20] = CreateVehicle(525,2354.0635,727.9950,10.9247,0.2284,1,5,120000);
		Reboque[21] = CreateVehicle(525,2363.1035,727.8639,11.0189,355.6179,1,5,120000);
		Reboque[22] = CreateVehicle(525,2405.4922,728.3148,10.9823,359.7197,1,5,120000);
		Reboque[23] = CreateVehicle(525,2442.5969,707.4492,10.9628,269.2036,1,5,120000);
   	}
   	CCAberto = 1;
   	for(new i = 0; i < 20; i++){
		new SendoUsada[41];
		new VehPos = random(41);
		while(SendoUsada[VehPos] == 1){
			VehPos = random(41);
		}
		SendoUsada[VehPos] = 1;
		CarrosCC[i] = CreateVehicle(560,CarroCC[VehPos][0],CarroCC[VehPos][1],CarroCC[VehPos][2],CarroCC[VehPos][3],1,5,1000);
		for(new p = 0; p < SLOTS2; p++){
			TrancarVeiculo(CarrosCC[i],p);
		}
	}
	for(new i = 0; i < SLOTS2; i++){
	    if(EstouNoCC[i] == 1){
            AgoraEstouNoCC[i] = 1;
            GangZoneShowForPlayer(i, EquipeAzul, COLOR_COP_SWAT);
			GangZoneShowForPlayer(i, EquipeLaranja, COLOR_ORANGE);
			SendClientMessage(i, COLOR_WHITE, "Digite /equipectc [laranja/azul] para entrar no evento!");
		}
	}
	return 1;
}
public FimCC(){
    for(new r = 0; r < 24; r++){
		DestroyVehicle(Reboque[r]);
	}
	for(new c = 0; c < 20; c++){
	    DestroyVehicle(CarrosCC[c]);
	}
	for(new r = 0; r < 24; r++){
	    Reboque[r] = CreateVehicle(525,INVALID_POS_X,INVALID_POS_Y,INVALID_POS_Z,0.0,1,5,120000);
	}
	for(new c = 0; c < 20; c++){
	    CarrosCC[c] = CreateVehicle(415,INVALID_POS_X,INVALID_POS_Y,INVALID_POS_Z,0.0,1,5,120000);
	    CTCCapturado[c]=0;
	}
    for(new i = 0; i < SLOTS2; i++){
	    if(EstouNoCC[i] == 1){
            EstouNoCC[i] = 0;
            GangZoneHideForPlayer(i, EquipeAzul);
			GangZoneHideForPlayer(i, EquipeLaranja);
			SetPlayerColor(i, ProfColors[Profissao[i]]);
			EquipeCC[i] = 0;
			SetPlayerPos(i,1019.2133,-1134.7303,23.8281);
		}
	}
	EquipePontos[1] = 0;
	EquipePontos[2] = 0;
	CCAberto = 0;
	SendClientMessageToAll(COLOR_LIXEIRO, "[CAPTURE THE CARS] Fim do evento...");
	return 1;
}
stock SetPlayerCCGroup(playerid,group)
{
	new string[256];
	if(group == 1){
		new rand = random(sizeof(AzulEquipe));
		SetPlayerPos(playerid,AzulEquipe[rand][0],AzulEquipe[rand][1],AzulEquipe[rand][2]);
		SetPlayerColor(playerid, COLOR_LIXEIRO);
		EquipeCC[playerid] = 1;
		GameTextForPlayer(playerid,"~b~equipe azul",3000,1);
		format(string,sizeof(string),"[CAPTURE THE CARS] %s entrou para a equipe azul!",PlayerName(playerid));
		SendClientMessageToAll(COLOR_LIXEIRO, string);
	}
	else if(group == 2){
	    new rand = random(sizeof(LaranjaEquipe));
	    SetPlayerPos(playerid,LaranjaEquipe[rand][0],LaranjaEquipe[rand][1],LaranjaEquipe[rand][2]);
		SetPlayerColor(playerid, COLOR_ORANGE);
		EquipeCC[playerid] = 2;
		GameTextForPlayer(playerid,"equipe laranja",3000,1);
		format(string,sizeof(string),"[CAPTURE THE CARS] %s entrou para a equipe laranja!",PlayerName(playerid));
		SendClientMessageToAll(COLOR_ORANGE, string);
	}
	GameTextForPlayer(playerid,"~g~capture the cars",5000,0);
	SendClientMessage(playerid, COLOR_WHITE, "|==============================| OBJETIVO |==============================|");
	SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "Capture The Cars é um evento onde você deve pegar os caminhões de guincho em sua base e");
	SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "capturar os veículos escondidos por Las Venturas e arredores próximos!");
	SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "Faça isso antes da sua equipe adversária, o jogo segue: Equipe azul VS Equipe laranja");
	SendClientMessage(playerid, COLOR_LIGHT_YELLOW, "Para guinchar um veículo aperte CTRL");
	SendClientMessage(playerid, COLOR_WHITE, "Divirta-se e Boa Sorte!");
}

public AreasTestes(playerid,plid)
{
    if(AreaBalizaHabilitada[plid] == 1){
		if(GetVehicleModel(GetPlayerVehicleID(plid)) == 410){
			new Float:h;
		    GetVehicleHealth(GetPlayerVehicleID(plid),h);
			if(h == 1000){
   				if(Chance[plid] >= 1){
		 			if(IsVehicleInArea(GetPlayerVehicleID(plid),1769.0464,-2077.6221,1775.7255,-2075.1553)){
						if(ProximoAoAngulo(plid,90)){
		   				    new string[256];
		   				    PlayerPlaySound(plid, 1052, 0.0, 0.0, 0.0);
				  		    SendClientMessage(plid, COLOR_INSTRUTOR, "[TESTE] Parabéns! Parte (1/5) - BALIZA - concluída com sucesso. O teste prosseguirá...");
						    AreaBalizaHabilitada[plid] = 0;
							format(string, sizeof(string), "[TESTE] O aprendiz  %s passou no teste: (1/5) - BALIZA - O teste prosseguirá...", PlayerName(plid));
							SendClientMessage(playerid,COLOR_INSTRUTOR, string);
							Chance[plid] = 3;
						    SetVehicleToRespawn(GetPlayerVehicleID(plid));
							SetTimerEx("AvancoDirecao3",6000,0,"dd",playerid,plid);
						}
					}
				} else {
				    new string[256];
				    SendClientMessage(plid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Seu teste foi CANCELADO, terá que fazer tudo denovo.");
					format(string, sizeof(string), "[AUTO-ESCOLA] O aprendiz %s perdeu todas as chances e seu teste foi cancelado!", PlayerName(plid));
					SendClientMessage(playerid,COLOR_INSTRUTOR, string);
                    SetVehicleToRespawn(GetPlayerVehicleID(plid));
					AreaBalizaHabilitada[plid] = 0;
					InstrutorOcupado[playerid] = 0;
					TrancarVeiculo(plid,CarroAuto);
					TrancarVeiculo(plid,CarroAuto2);
					TrancarVeiculo(plid,CarroAuto3);
					TrancarVeiculo(plid,CarroAuto4);
					TrancarVeiculo(plid,CarroAuto5);
					TrancarVeiculo(plid,CarroAuto6);
				}
			} else {
			    new string[256];
				Chance[plid] = Chance[plid] - 1;
			    AreaBalizaHabilitada[plid] = 0;
			    SendClientMessage(plid, COLOR_INSTRUTOR, "[TESTE] Seu carro está batido! O teste será refeito.");
				format(string, sizeof(string), "[TESTE] O aprendiz %s bateu o carro. O teste será refeito chance %d/3", PlayerName(plid),Chance[playerid]);
				SendClientMessage(playerid,COLOR_INSTRUTOR, string);
			    SetVehicleToRespawn(GetPlayerVehicleID(plid));
				SetTimerEx("AvancoDirecao",6000,0,"dd",playerid,plid);
			    return 1;
			}
		}
	}
    if(AreaZigHabilitada[plid] == 1){
		if(GetVehicleModel(GetPlayerVehicleID(plid)) == 410){
			new Float:h;
		    GetVehicleHealth(GetPlayerVehicleID(plid),h);
			if(h == 1000){
   				if(Chance[plid] >= 1){
   					if(IsVehicleInArea(GetPlayerVehicleID(plid),1807.8981,-2025.0101,1812.1422,-2021.3784)){
						if(ProximoAoAngulo(plid,270)){
		   				    new string[256];
		   				    PlayerPlaySound(plid, 1052, 0.0, 0.0, 0.0);
				  		    SendClientMessage(plid, COLOR_INSTRUTOR, "[TESTE] Parabéns! Parte (2/5) - ZIG-ZAG - concluída com sucesso. O teste prosseguirá...");
						    AreaZigHabilitada[plid] = 0;
							format(string, sizeof(string), "[TESTE] O aprendiz  %s passou no teste: (2/5) - ZIG-ZAG - O teste prosseguirá...", PlayerName(plid));
							SendClientMessage(playerid,COLOR_INSTRUTOR, string);
							Chance[plid] = 3;
							SetVehicleToRespawn(GetPlayerVehicleID(plid));
							SetTimerEx("AvancoDirecao5",6000,0,"dd",playerid,plid);
						} else {
						    SendClientMessage(plid, COLOR_WHITE, "[AUTO-ESCOLA] Você está com o carro torto, deixe-o reto.");
						    return 1;
						}
					}
				} else {
				    new string[256];
				    SendClientMessage(plid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Seu teste foi CANCELADO, terá que fazer tudo denovo.");
					format(string, sizeof(string), "[AUTO-ESCOLA] O aprendiz %s perdeu todas as chances e seu teste foi cancelado!", PlayerName(plid));
					SendClientMessage(playerid,COLOR_INSTRUTOR, string);
                    SetVehicleToRespawn(GetPlayerVehicleID(plid));
					AreaZigHabilitada[plid] = 0;
					InstrutorOcupado[playerid] = 0;
					TrancarVeiculo(plid,CarroAuto);
					TrancarVeiculo(plid,CarroAuto2);
					TrancarVeiculo(plid,CarroAuto3);
					TrancarVeiculo(plid,CarroAuto4);
					TrancarVeiculo(plid,CarroAuto5);
					TrancarVeiculo(plid,CarroAuto6);
				}
			} else {
			    new string[256];
				Chance[plid] = Chance[plid] - 1;
			    AreaZigHabilitada[plid] = 0;
			    SendClientMessage(plid, COLOR_INSTRUTOR, "[TESTE] Seu carro está batido! O teste será refeito.");
				format(string, sizeof(string), "[TESTE] O aprendiz %s bateu o carro. O teste será refeito chance %d/3", PlayerName(plid),Chance[playerid]);
				SendClientMessage(playerid,COLOR_INSTRUTOR, string);
			    SetVehicleToRespawn(GetPlayerVehicleID(plid));
				SetTimerEx("AvancoDirecao3",6000,0,"dd",playerid,plid);
			    return 1;
			}
		}
	}
    if(Area180Habilitada[plid] == 1){
		if(GetVehicleModel(GetPlayerVehicleID(plid)) == 410){
		    new Float:h;
		    GetVehicleHealth(GetPlayerVehicleID(plid),h);
			if(h == 1000){
   				if(Chance[plid] >= 1){
   				   	if(IsVehicleInArea(GetPlayerVehicleID(plid),1797.1978,-2050,1800.7753,-2047.9780)){
						if(ProximoAoAngulo(plid,87)){
		   				    new string[256];
		   				    PlayerPlaySound(plid, 1052, 0.0, 0.0, 0.0);
				  		    SendClientMessage(plid, COLOR_INSTRUTOR, "[TESTE] Parabéns! Parte (3/5) - 180º - concluída com sucesso.");
						    Area180Habilitada[plid] = 0;
							format(string, sizeof(string), "[TESTE] O aprendiz %s passou no teste: (3/5) - 180º...", PlayerName(plid));
							SendClientMessage(playerid,COLOR_INSTRUTOR, string);
		   				    SetVehicleToRespawn(GetPlayerVehicleID(plid));
		   				    Chance[plid] = 3;
      						SetTimerEx("AvancoMoto",6000,0,"dd",playerid,plid);
						}
					}
				} else {
				    new string[256];
				    SendClientMessage(plid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Seu teste foi CANCELADO, terá que fazer tudo denovo.");
					format(string, sizeof(string), "[AUTO-ESCOLA] O aprendiz %s perdeu todas as chances e seu teste foi cancelado!", PlayerName(plid));
					SendClientMessage(playerid,COLOR_INSTRUTOR, string);
                    SetVehicleToRespawn(GetPlayerVehicleID(plid));
					Area180Habilitada[plid] = 0;
					InstrutorOcupado[playerid] = 0;
					TrancarVeiculo(plid,CarroAuto);
					TrancarVeiculo(plid,CarroAuto2);
					TrancarVeiculo(plid,CarroAuto3);
					TrancarVeiculo(plid,CarroAuto4);
					TrancarVeiculo(plid,CarroAuto5);
					TrancarVeiculo(plid,CarroAuto6);
				}
			} else {
			    new string[256];
				Chance[plid] = Chance[plid] - 1;
			    Area180Habilitada[plid] = 0;
				format(string, sizeof(string), "[TESTE] Seu carro está batido! O teste será refeito. CHANCE: %d/3", Chance[playerid]);
				SendClientMessage(plid,COLOR_INSTRUTOR, string);
				format(string, sizeof(string), "[TESTE] O aprendiz %s bateu o carro. O teste será refeito. CHANCE: %d/3", PlayerName(plid),Chance[playerid]);
				SendClientMessage(playerid,COLOR_INSTRUTOR, string);
			    SetVehicleToRespawn(GetPlayerVehicleID(plid));
				SetTimerEx("AvancoDirecao5",6000,0,"dd",playerid,plid);
			    return 1;
			}
		}
	}
    if(AreaMotoHabilitada[plid] == 1){
		if(GetVehicleModel(GetPlayerVehicleID(plid)) == 521){
			new Float:h;
		    GetVehicleHealth(GetPlayerVehicleID(plid),h);
			if(h == 1000){
   				if(Chance[plid] >= 1){
   					if(IsVehicleInArea(GetPlayerVehicleID(plid),1774.2667,-2028.1365,1775.6932,-2027.4597)){
						if(ProximoAoAngulo(plid,4)){
		   					new string[256];
		   				    PlayerPlaySound(plid, 1052, 0.0, 0.0, 0.0);
				  		    SendClientMessage(plid, COLOR_INSTRUTOR, "[TESTE] Parabéns! Parte (4/5) - Moto Zig - concluída com sucesso.");
						    AreaMotoHabilitada[plid] = 0;
							format(string, sizeof(string), "[TESTE] O aprendiz %s passou no teste: (4/5) - Moto Zig.", PlayerName(plid));
							SendClientMessage(playerid,COLOR_INSTRUTOR, string);
							Chance[plid] = 3;
							SetTimerEx("AvancoMoto4",6000,0,"dd",playerid,plid);
						}
					}
				} else {
					new string[256];
				    SendClientMessage(plid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Seu teste foi CANCELADO, você perdeu todas as chances, terá que refazer tudo novamemnte.");
					format(string, sizeof(string), "[AUTO-ESCOLA] O aprendiz %s perdeu todas as chances e seu teste foi cancelado!", PlayerName(plid));
					SendClientMessage(playerid,COLOR_INSTRUTOR, string);
					AreaMotoHabilitada[plid] = 0;
					Chance[plid] = 0;
					InstrutorOcupado[playerid] = 0;
					TrancarVeiculo(plid,CarroAuto);
					TrancarVeiculo(plid,CarroAuto2);
					TrancarVeiculo(plid,CarroAuto3);
					TrancarVeiculo(plid,CarroAuto4);
					TrancarVeiculo(plid,CarroAuto5);
					TrancarVeiculo(plid,CarroAuto6);
				    SetVehicleToRespawn(GetPlayerVehicleID(plid));
				}
			} else {
			    new string[256];
				Chance[plid] = Chance[plid] - 1;
			    AreaMotoHabilitada[plid] = 0;
				format(string, sizeof(string), "[TESTE] Sua moto está danificada. O teste será refeito. CHANCE: %d/3", Chance[playerid]);
				SendClientMessage(plid,COLOR_INSTRUTOR, string);
				format(string, sizeof(string), "[TESTE] O aprendiz %s danificou a moto. O teste será refeito. CHANCE: %d/3", PlayerName(plid),Chance[playerid]);
				SendClientMessage(playerid,COLOR_INSTRUTOR, string);
			    SetVehicleToRespawn(GetPlayerVehicleID(plid));
				SetTimerEx("AvancoMoto",6000,0,"dd",playerid,plid);
			    return 1;
			}
		}
	}
	if(AreaMotoHabilitada[plid] == 1 || Area180Habilitada[plid] == 1 || AreaZigHabilitada[plid] == 1 || AreaBalizaHabilitada[plid] == 1){
		SetTimerEx("AreasTestes",2000,false,"dd",playerid,plid);
		return 1;
	}
	return 1;
}
public GranaInfo(){
	new string[128];
	for(new i = 0; i < SLOTS2; i++){
		if(IsPlayerConnected(i)){
		    if(GetPlayerMoney(i) != AntMoney[i]){
			    if(GetPlayerMoney(i) > AntMoney[i]){
            		format(string,sizeof(string),"[INFO] O dinheiro de %s foi aumentado em $%d - Motivo: %s", PlayerName(i), GetPlayerMoney(i) - AntMoney[i], MotivosGrana[MotivoGranaID[i]]);
            		SendClientMessageAdmin(COLOR_WHITE, string);
					writelog(string);
					if(MotivoGranaID[i] == 0 && Logado[i] == 1){
						if(MoneyGive[i] == 0){
					    	SendClientMessage(i, COLOR_GRAY, "[VLR] Você foi Banido do Servidor por uso de Money Hack.");
		        	    	format(string,sizeof(string),"[VLR] O Sabichão %s usou Money Hack no servidor. BANIDO!", PlayerName(i));
	               	    	SendClientMessageToAll(COLOR_WHITE, string);
							new Hora,Minuto,Segundo,Ano,Mes,Dia;
	               	    	gettime(Hora,Minuto,Segundo);
							getdate(Ano,Mes,Dia);
						}
					}
				} else if(GetPlayerMoney(i) < AntMoney[i] && MotivoGranaID[i] == -1){
					format(string,sizeof(string),"[INFO] O dinheiro de %s foi diminuido em $%d",PlayerName(i),AntMoney[i] - GetPlayerMoney(i));
					SendClientMessageAdmin(COLOR_WHITE,string);
					writelog(string);
				}
			}
		}
		if(MoneyGive[i] != 0){
			MotivoGranaID[i] = 0;
			GivePlayerMoney(i,MoneyGive[i]);
            MoneyGive[i] = 0;
            AntMoney[i] = GetPlayerMoney(i);
		}
		AntMoney[i] = GetPlayerMoney(i);
		MotivoGranaID[i] = 0;
	}
}
stock DebugInflacao(){
	DiaJogo = 2;
	MesJogo = 5;
	AnoJogo = 2008;
	ValorDia = 4;
	PrecoGas = 1;
	ValorTV = 2300;
	ValorRadio = 400;
	ValorGeladeira = 1800;
	ValorFogao = 1500;
	ValorCelular = 500;
	ValorTelefone = 300;
	ValorFrango = 30;
	ValorPeixe = 40;
	ValorPizza = 25;
	ValorSalada = 15;
	ValorRefrigerante = 12;
	ValorSuco = 18;
	ValorCarne = 35;
	ValorStrogonoff = 45;
	ValorCamarao = 50;
	ValorLinguica = 30;
	LastPN = 1000;
	LastPhone = 30000;
	LastGNG = 1;
	LastJN = 1;
	LastCasa = 0;
	HoraJogo = 2;
	MinutoJogo = 0;
	CarPrice[0] = 1000;
	CarPrice[1] = 1000;
	CarPrice[2] = 1000;
	CarPrice[3] = 1000;
	CarPrice[4] = 1000;
	CarPrice[5] = 1000;
	CarPrice[6] = 1000;
	CarPrice[7] = 1000;
    return 1;
}

public Timers()
{
    tocando2++;
	if(tocando2 >= 15){
	    tocando2 = 0;
		if(tocando >= 50) tocando = 0;
	    else tocando++;
	}
	new Float:X, Float:Y, Float:Z, str[256], rand = random(5), rand2 = random(4), Float:prevdist = 100000.000, Float:dist, prevcp, cpid;
	for(new i=0; i<SLOTS2; i++){
	    if(Logado[i] == 1){
	    	if(IsPlayerConnected(i) && pStats[i][VicioDrogas] == 1 && Logado[i] == 1){
	            if(TempoVicio[i] == 0){
					ApplyAnimCrack(i);
					SetPlayerWeather(i,-66);
					new r = random(5);
					switch(r){
						case 0: SendPlayerMessageToPlayer( i, i, "COF COF... MACONHA, COCAÍNA, HEROÍNA, QUALQUER COISA SERVE, EU SÓ QUERO ME DROGAR, COF COF..." );
						case 1: SendPlayerMessageToPlayer( i, i, "COF COF COF... Drogas, PRECISO DE DROGAS, COF COF COF, COF COF" );
						case 2: SendPlayerMessageToPlayer( i, i, "ALGUM TRAFICANTE VEM AQUI PORRA, COF COF, E RÁPIDO COF.. COF" );
						case 3: SendPlayerMessageToPlayer( i, i, "ALGUMA DROGA POR PERTO? COF COF..." );
						case 4: SendPlayerMessageToPlayer( i, i, "SOCORRO, COF COF, EU PRECISO DE AJUDA, COF COF, MAS ANTES QUERO ME DROGAR!!!!!!!" );
					}
					SetTimerEx("PararWeather",25000,0,"d",i);
					SetTimerEx("LimparAnim",13000,0,"d",i);
					QtDrog[i]++;
					if(QtDrog[i] >= 12){
					    pStats[i][VicioDrogas] = 0;
						SendPlayerMessageToPlayer( i, i, "Tá bom, esqueça as drogas, eu sou forte, não vou estragar minha vida por causa disso!");
						TempoVicio[i] = 0;
						QtDrog[i] = 0;
					}
					else{
						TempoVicio[i] = random(30) + random(random(20)) + 40;
						GetPlayerPos(i, X, Y, Z);
						CreatePickup(1279, 2, X, Y, Z);
					}
				}
	            else TempoVicio[i]--;
			}
			if(IsPlayerConnected(i) && Logado[i] == 1 && fexist(PlayerFile(PlayerName(i)))){
				pStats[i][Dinheiro] = GetPlayerMoney(i);
			    SetPlayerScore(i, GetPlayerMoney(i));
			}
			if(JaAvisouHorario == 0){
				JaAvisouHorario = 1;
				SetTimer("ZerarAvisoHorario",60000,false);
		    	switch(ValorDia){
					case 0:
	 				{
	   					if(HoraJogo == HorarioTrabalho[Profissao[i]][0]){
						    if(HorarioTrabalho[Profissao[i]][0] == HorarioTrabalho[Profissao[i]][1]){
				 				SendClientMessage(i, COLOR_GREEN, "Hoje é seu dia de folga, aproveite!");
							}
							else{
							 	SendClientMessage(i, GetPlayerColor(i), AvisoTrabalho[Profissao[i]]);
								if(Profissao[i] != DESEMPREGADO){
									if(rand2 == 0 || rand2 == 1){
									    pStats[i][VirtualCard]++;
										SendClientMessage(i, COLOR_WHITE, "Sua empresa de trabalho lhe entregou um Virtual Card, útil para você");
										SendClientMessage(i, COLOR_WHITE, "deixar o dinheiro gasto em ônibus por conta dela!");
									}
								}
							}
							PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
						}
						if(HoraJogo == HorarioTrabalho[Profissao[i]][1]){
							SendClientMessage(i, COLOR_GREEN, "Seu trabalho acabou, aproveite o resto do dia para descansar!");
			   				PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
						}
					}
					case 1:
					{
	  	    			if(HoraJogo == HorarioTrabalho[Profissao[i]][2]){
		    			    if(HorarioTrabalho[Profissao[i]][2] == HorarioTrabalho[Profissao[i]][3]){
			 					SendClientMessage(i, COLOR_GREEN, "Hoje é seu dia de folga, aproveite!");
							}
							else{
							 	SendClientMessage(i, GetPlayerColor(i), AvisoTrabalho[Profissao[i]]);
								if(Profissao[i] != DESEMPREGADO){
									if(rand2 == 0 || rand2 == 1){
									    pStats[i][VirtualCard]++;
										SendClientMessage(i, COLOR_WHITE, "Sua empresa de trabalho lhe entregou um Virtual Card, útil para você");
										SendClientMessage(i, COLOR_WHITE, "deixar o dinheiro gasto em ônibus por conta dela!");
									}
								}
							}
							PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
						}
						if(HoraJogo == HorarioTrabalho[Profissao[i]][3]){
							if(rand == 1){
								PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
							    SendClientMessage(i, COLOR_GREEN, "Seu trabalho acabou, seu chefe está lhe perguntado se pode fazer HORA EXTRA!");
							    SendClientMessage(i, COLOR_GREEN, "Se não quiser, digite /recusarhoraextra, mas se quiser, digite /aceitarhoraextra");
								HoraExtra[i] = 1;
								TempoHoraExtra[i] = SetTimerEx("CancelarHoraExtra",50000,0,"d",i);
							}
							else{
								SendClientMessage(i, COLOR_GREEN, "Seu trabalho acabou, aproveite o resto do dia para descansar!");
			   					PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
							}
						}
					}
					case 2:
					{
		    			if(HoraJogo == HorarioTrabalho[Profissao[i]][4]){
		    			    if(HorarioTrabalho[Profissao[i]][4] == HorarioTrabalho[Profissao[i]][5]){
			 					SendClientMessage(i, COLOR_GREEN, "Hoje é seu dia de folga, aproveite!");
							}
							else{
							 	SendClientMessage(i, GetPlayerColor(i), AvisoTrabalho[Profissao[i]]);
								if(Profissao[i] != DESEMPREGADO){
									if(rand2 == 0 || rand2 == 1){
	  									pStats[i][VirtualCard]++;
										SendClientMessage(i, COLOR_WHITE, "Sua empresa de trabalho lhe entregou um Virtual Card, útil para você");
										SendClientMessage(i, COLOR_WHITE, "deixar o dinheiro gasto em ônibus por conta dela!");
									}
								}
							}
							PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
						}
						if(HoraJogo == HorarioTrabalho[Profissao[i]][5]){
					    	if(rand == 1){
	  							PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
							    SendClientMessage(i, COLOR_GREEN, "Seu trabalho acabou, seu chefe está lhe perguntado se pode fazer HORA EXTRA!");
						   	 	SendClientMessage(i, COLOR_GREEN, "Se não quiser, digite /recusarhoraextra, mas se quiser, digite /aceitarhoraextra");
	                        	HoraExtra[i] = 1;
	                        	TempoHoraExtra[i] = SetTimerEx("CancelarHoraExtra",50000,0,"d",i);
							}
							else{
								SendClientMessage(i, COLOR_GREEN, "Seu trabalho acabou, aproveite o resto do dia para descansar!");
			   					PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
							}
						}
					}
					case 3:
					{
		  			  	if(HoraJogo == HorarioTrabalho[Profissao[i]][6]){
		  			  	    if(HorarioTrabalho[Profissao[i]][6] == HorarioTrabalho[Profissao[i]][7]){
			 					SendClientMessage(i, COLOR_GREEN, "Hoje é seu dia de folga, aproveite!");
							}
							else{
							 	SendClientMessage(i, GetPlayerColor(i), AvisoTrabalho[Profissao[i]]);
								if(Profissao[i] != DESEMPREGADO){
									if(rand2 == 0 || rand2 == 1){
										pStats[i][VirtualCard]++;
										SendClientMessage(i, COLOR_WHITE, "Sua empresa de trabalho lhe entregou um Virtual Card, útil para você");
										SendClientMessage(i, COLOR_WHITE, "deixar o dinheiro gasto em ônibus por conta dela!");
									}
								}
							}
							PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
						}
						if(HoraJogo == HorarioTrabalho[Profissao[i]][7]){
							if(rand == 1){
				  				PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
						    	SendClientMessage(i, COLOR_GREEN, "Seu trabalho acabou, seu chefe está lhe perguntado se pode fazer HORA EXTRA!");
							    SendClientMessage(i, COLOR_GREEN, "Se não quiser, digite /recusarhoraextra, mas se quiser, digite /aceitarhoraextra");
	            	            HoraExtra[i] = 1;
	                	        TempoHoraExtra[i] = SetTimerEx("CancelarHoraExtra",50000,0,"d",i);
							}
							else{
								SendClientMessage(i, COLOR_GREEN, "Seu trabalho acabou, aproveite o resto do dia para descansar!");
			   					PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
							}
						}
					}
					case 4:
					{
		    		    if(HoraJogo == HorarioTrabalho[Profissao[i]][8]){
		    		        if(HorarioTrabalho[Profissao[i]][8] == HorarioTrabalho[Profissao[i]][9]){
			 					SendClientMessage(i, COLOR_GREEN, "Hoje é seu dia de folga, aproveite!");
							}
							else{
							 	SendClientMessage(i, GetPlayerColor(i), AvisoTrabalho[Profissao[i]]);
								if(Profissao[i] != DESEMPREGADO){
									if(rand2 == 0 || rand2 == 1){
										pStats[i][VirtualCard]++;
										SendClientMessage(i, COLOR_WHITE, "Sua empresa de trabalho lhe entregou um Virtual Card, útil para você");
										SendClientMessage(i, COLOR_WHITE, "deixar o dinheiro gasto em ônibus por conta dela!");
									}
								}
							}
							PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
						}
						if(HoraJogo == HorarioTrabalho[Profissao[i]][9]){
							if(rand == 1){
							    PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
							    SendClientMessage(i, COLOR_GREEN, "Seu trabalho acabou, seu chefe está lhe perguntado se pode fazer HORA EXTRA!");
							    SendClientMessage(i, COLOR_GREEN, "Se não quiser, digite /recusarhoraextra, mas se quiser, digite /aceitarhoraextra");
	                	        HoraExtra[i] = 1;
	                	        TempoHoraExtra[i] = SetTimerEx("CancelarHoraExtra",50000,0,"d",i);
							}
							else{
								SendClientMessage(i, COLOR_GREEN, "Seu trabalho acabou, aproveite o resto do dia para descansar!");
			   					PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
							}
						}
					}
					case 5:
					{
					    if(HoraJogo == HorarioTrabalho[Profissao[i]][10]){
					        if(HorarioTrabalho[Profissao[i]][10] == HorarioTrabalho[Profissao[i]][11]){
			 					SendClientMessage(i, COLOR_GREEN, "Hoje é seu dia de folga, aproveite!");
							}
							else{
							 	SendClientMessage(i, GetPlayerColor(i), AvisoTrabalho[Profissao[i]]);
								if(Profissao[i] != DESEMPREGADO){
									if(rand2 == 0 || rand2 == 1){
										pStats[i][VirtualCard]++;
										SendClientMessage(i, COLOR_WHITE, "Sua empresa de trabalho lhe entregou um Virtual Card, útil para você");
										SendClientMessage(i, COLOR_WHITE, "deixar o dinheiro gasto em ônibus por conta dela!");
									}
								}
							}
							PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
						}
						if(HoraJogo == HorarioTrabalho[Profissao[i]][11]){
							if(rand == 1){
							    PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
							    SendClientMessage(i, COLOR_GREEN, "Seu trabalho acabou, seu chefe está lhe perguntado se pode fazer HORA EXTRA!");
						    	SendClientMessage(i, COLOR_GREEN, "Se não quiser, digite /recusarhoraextra, mas se quiser, digite /aceitarhoraextra");
	                        	HoraExtra[i] = 1;
	                        	TempoHoraExtra[i] = SetTimerEx("CancelarHoraExtra",50000,0,"d",i);
							}
							else{
								SendClientMessage(i, COLOR_GREEN, "Seu trabalho acabou, aproveite o resto do dia para descansar!");
			   					PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
							}
						}
					}
					case 6:
					{
		    			if(HoraJogo == HorarioTrabalho[Profissao[i]][12]){
		    			    if(HorarioTrabalho[Profissao[i]][12] == HorarioTrabalho[Profissao[i]][13]){
			 					SendClientMessage(i, COLOR_GREEN, "Hoje é seu dia de folga, aproveite!");
							}
							else{
						 		SendClientMessage(i, GetPlayerColor(i), AvisoTrabalho[Profissao[i]]);
								if(Profissao[i] != DESEMPREGADO){
									if(rand2 == 0 || rand2 == 1){
										pStats[i][VirtualCard]++;
										SendClientMessage(i, COLOR_WHITE, "Sua empresa de trabalho lhe entregou um Virtual Card, útil para você");
										SendClientMessage(i, COLOR_WHITE, "deixar o dinheiro gasto em ônibus por conta dela!");
									}
								}
							}
							PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
						}
						if(HoraJogo == HorarioTrabalho[Profissao[i]][13]){
			 				SendClientMessage(i, COLOR_GREEN, "Seu trabalho acabou, aproveite o resto do dia para descansar!");
			  				PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
						}
					}
	  			}
			}
			prevdist = 100000.000;
			for(cpid = 0; cpid < 6; cpid++){
			    dist = GetPlayerDistanceToPointEx(i,CPD_CPPositions[cpid][0],CPD_CPPositions[cpid][1],CPD_CPPositions[cpid][2]);
				if((dist < prevdist)){
				    prevdist = dist;
				    prevcp = cpid;
				}
			}
			if(GetPlayerDistanceToPointEx(i,CPD_CPPositions[prevcp][0],CPD_CPPositions[prevcp][1],CPD_CPPositions[prevcp][2]) < 30) {
			    if(CPD_CPHandling[i] != prevcp+1){
			        DisablePlayerCheckpoint(i);
				    SetPlayerCheckpoint(i,CPD_CPPositions[prevcp][0],CPD_CPPositions[prevcp][1],CPD_CPPositions[prevcp][2],2.0);
				    CPD_CPHandling[i] = prevcp+1;
				    CheckpointStatus[i] = NONE;
				    MissaoLixeiro[i] = 0;
				    EntregadePizza[i] = 0;
				    ColocandoDrogas[i] = 0;
				    DrogasNoCaminhao[i] = 0;
				    PegandoDrogas[i] = 0;
				}
			} else {
			    CPD_CPHandling[i] = 0;
			}
		    dist = GetPlayerDistanceToPointEx(i,1477.3245,-1880.2889,13.5469);
		    if(dist < 7){
		        if(NoRestaurante[i] == 0){
		        	SendClientMessage(i, COLOR_GREEN, "Restaurante Life's'FOOD");
		        	SendClientMessage(i, COLOR_WHITE, "Para entrar pressione a tecla ENTER.");
					NoRestaurante[i] = 1;
				}
			}
			else{
				if(NoRestaurante[i] == 1 && NoRestaurante2[i] == 0) SendClientMessage(i, COLOR_PALHA, "Obrigado pela visita... Volte sempre!");
			    NoRestaurante[i] = 0;
			}
			dist = GetPlayerDistanceToPointEx(i,681.6216,-451.8933,-25.6172);
		    if(dist < 7){
				if(NoRestaurante2[i] == 0){
		        	SendClientMessage(i, COLOR_WHITE, "Para sair do restaurante pressione a tecla ENTER!");
					NoRestaurante2[i] = 1;
				}
			}
			else NoRestaurante2[i] = 0;
		    if(GetPlayerState(i) == PLAYER_STATE_SPECTATING && TVligada[i] == 1){
			    if(pckStats[PickupEntradaCasa[i]][SemLuz] == 1){
					SendClientMessage(i, COLOR_GRAY, "A TV foi desligada porque a casa está sem luz");
				    DesligarTV(i);
				}
				if(IsPlayerConnected(PlayerSpec[i]))
				{
				    new msg[256];
				    format(msg,sizeof(msg),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Canal: ~w~%d",PlayerSpec[i]);
				    GameTextForPlayer(i,msg,1000,3);
				    SetPlayerInterior(i,GetPlayerInterior(PlayerSpec[i]));
				    if(CameraAtiva[PlayerSpec[i]] == 1){
			    	    SetPlayerCameraPos(i,Filmagem[PlayerSpec[i]][0],Filmagem[PlayerSpec[i]][1],Filmagem[PlayerSpec[i]][2]);
						SetPlayerCameraLookAt(i,Filmagem[PlayerSpec[i]][3],Filmagem[PlayerSpec[i]][4],Filmagem[PlayerSpec[i]][5]);
					}
				    else if(Entrevista[PlayerSpec[i]][1] == 1){
				    	SetPlayerCameraPos(i,CamEntrevista[Entrevista[PlayerSpec[i]][3]][0],CamEntrevista[Entrevista[PlayerSpec[i]][3]][1],CamEntrevista[Entrevista[PlayerSpec[i]][3]][2]);
				    	SetPlayerCameraLookAt(i,CamEntrevista[Entrevista[PlayerSpec[i]][3]][3],CamEntrevista[Entrevista[PlayerSpec[i]][3]][4],CamEntrevista[Entrevista[PlayerSpec[i]][3]][5]);
					}
					else if(Entrevista[PlayerSpec[i]][2] == 1){
					    SetPlayerCameraPos(i,CamEntrevista[PlayerSpec[i]][0],CamEntrevista[PlayerSpec[i]][1],CamEntrevista[PlayerSpec[i]][2]);
					    SetPlayerCameraLookAt(i,CamEntrevista[PlayerSpec[i]][3],CamEntrevista[PlayerSpec[i]][4],CamEntrevista[PlayerSpec[i]][5]);
					}
					else{
		   		 		if(IsPlayerInAnyVehicle(PlayerSpec[i])) PlayerSpectateVehicle(i,GetPlayerVehicleID(PlayerSpec[i]));
						else PlayerSpectatePlayer(i,PlayerSpec[i]);
					}
				}
				else{
			 		DesligarTV(i);
			 		SendClientMessage(i, COLOR_GRAY, "O canal ficou inválido então sua TV foi desligada!");
				}
			}
	        if(IsPlayerConnected(i) && AreaBalada[i] == 1){
				if(!HaveDJ){
					if(tocando >= 0 && tocando < 7 && sombalada2[i] != 1){
						PlayerPlaySound(i,1088,0.0,0.0,0.0);
						SendClientMessage(i, COLOR_COP_MILITAR, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
						PlayerPlaySound(i,1062,0.0,0.0,0.0);
						sombalada2[i] = 1;
					}
					if(tocando >= 7 && tocando < 14 && sombalada2[i] != 2){
						PlayerPlaySound(i,1063,0.0,0.0,0.0);
						SendClientMessage(i, COLOR_COP_MILITAR, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
						PlayerPlaySound(i,1068,0.0,0.0,0.0);
						sombalada2[i] = 2;
					}
					if(tocando >= 14 && tocando < 21 && sombalada2[i] != 3){
	  					PlayerPlaySound(i,1069,0.0,0.0,0.0);
	  					SendClientMessage(i, COLOR_COP_MILITAR, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
	  					PlayerPlaySound(i,1076,0.0,0.0,0.0);
	  					sombalada2[i] = 3;
	  				}
	  				if(tocando >= 21 && tocando < 28 && sombalada2[i] != 4){
	  					PlayerPlaySound(i,1077,0.0,0.0,0.0);
	  					SendClientMessage(i, COLOR_COP_MILITAR, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
						PlayerPlaySound(i,1097,0.0,0.0,0.0);
						sombalada2[i] = 4;
	  				}
	  				if(tocando >= 28 && tocando < 35 && sombalada2[i] != 5){
	  					PlayerPlaySound(i,1098,0.0,0.0,0.0);
						SendClientMessage(i, COLOR_COP_MILITAR, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
	  					PlayerPlaySound(i,1183,0.0,0.0,0.0);
	                    sombalada2[i] = 5;
				    }
				 	if(tocando >= 35 && tocando < 42 && sombalada2[i] != 6){
	  					PlayerPlaySound(i,1084,0.0,0.0,0.0);
	  					SendClientMessage(i, COLOR_COP_MILITAR, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
	  					PlayerPlaySound(i,1185,0.0,0.0,0.0);
	  					sombalada2[i] = 6;
	  				}
	  				if(tocando >= 42 && tocando <= 49 && sombalada2[i] != 7){
	  					PlayerPlaySound(i,1086,0.0,0.0,0.0);
	  					SendClientMessage(i, COLOR_COP_MILITAR, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
	  					PlayerPlaySound(i,1187,0.0,0.0,0.0);
	  					sombalada2[i] = 7;
	  				}
				}
				else{
				    if(sombalada2[i] != MusicSelected){
						if(MusicSelected == 1){
						    PlayerPlaySound(i,1088,0.0,0.0,0.0);
							SendClientMessage(i, COLOR_COP_MILITAR, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
							PlayerPlaySound(i,1062,0.0,0.0,0.0);
						}
						if(MusicSelected == 2){
						    PlayerPlaySound(i,1063,0.0,0.0,0.0);
							SendClientMessage(i, COLOR_COP_MILITAR, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
							PlayerPlaySound(i,1068,0.0,0.0,0.0);
						}
						if(MusicSelected == 3){
						    PlayerPlaySound(i,1069,0.0,0.0,0.0);
	  						SendClientMessage(i, COLOR_COP_MILITAR, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
	  						PlayerPlaySound(i,1076,0.0,0.0,0.0);
						}
						if(MusicSelected == 4){
						    PlayerPlaySound(i,1077,0.0,0.0,0.0);
	  						SendClientMessage(i, COLOR_COP_MILITAR, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
							PlayerPlaySound(i,1097,0.0,0.0,0.0);
						}
						if(MusicSelected == 5){
						    PlayerPlaySound(i,1098,0.0,0.0,0.0);
							SendClientMessage(i, COLOR_COP_MILITAR, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
	  						PlayerPlaySound(i,1183,0.0,0.0,0.0);
						}
						if(MusicSelected == 6){
						    PlayerPlaySound(i,1084,0.0,0.0,0.0);
	  						SendClientMessage(i, COLOR_COP_MILITAR, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
	  						PlayerPlaySound(i,1185,0.0,0.0,0.0);
						}
						if(MusicSelected == 7){
						    PlayerPlaySound(i,1086,0.0,0.0,0.0);
	  						SendClientMessage(i, COLOR_COP_MILITAR, "[DJ] Trocando música galera, quero ver todo mundo na maior agitação, vamo lá, uhuu");
	  						PlayerPlaySound(i,1187,0.0,0.0,0.0);
						}
				        sombalada2[i] = MusicSelected;
				    }
				}
			}
			GetPlayerPos(i, X, Y, Z);
			if(NoPL[i] == 1 && PLIniciou == 1 && EscolhendoEquipe[i] == 0){
				if(X <= -988.9893 || X >= -265.3752 || Y <= -2491.4412 || Y >= -1845.056){
					if(ForaAreaPL[i] == 0){
						SendClientMessage(i, COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] Volte para a área do evento ou será retirado dele!");
						ForaAreaPL[i] = 1;
						CtExpulsao[i] = 10;
					}
					else if(ForaAreaPL[i] == 1 && CtExpulsao[i] > 0){
					    format(str,sizeof(str),"%d",CtExpulsao[i]);
					    SendClientMessage(i, COLOR_RED2, str);
					    CtExpulsao[i]--;
					}
					else if(CtExpulsao[i] == 0){
					    format(str,sizeof(str),"[POLÍCIA E LADRÃO] %s foi desclassificado do evento por sair da área!",PlayerName(i));
					    SendClientMessageToAll(COLOR_LIGHT_YELLOW, str);
					    RetirarPL(i);
					}
				}
				else{
				    CtExpulsao[i] = 10;
				    ForaAreaPL[i] = 0;
				}
			}
		}
	}
}
public Areas(){
	new Float:X,Float:Y,Float:Z;
	for(new i=0;i<SLOTS2;i++){
	    if(IsPlayerConnected(i)) {
	    	GetPlayerPos(i, X, Y, Z);
			if((X >= -37.2183 && X <= -14.1099 && Y >= -91.8006 && Y <= -74.6845) || (X >= -34.6621 && X <= -2.6782 && Y >= -31.4095 && Y <= -25.6232) || (X >= -36.5483 && X <= -17.2655 && Y >= -57.9948 && Y <= -49.2967)){
				if(AreaCreditos[i] == 0) {
				    TextDrawShowForPlayer(i,td247);
					SendClientMessage(i, COLOR_PALHA, "|=============| Bem-Vindo a Loja de Utilidades 24/7 |=============|");
					SendClientMessage(i, COLOR_WHITE, "/celular = Para comprar um celular");
					SendClientMessage(i, COLOR_WHITE, "/agenda = Para comprar uma agenda");
					SendClientMessage(i, COLOR_WHITE, "/recarga = Para recarregar os créditos do seu celular.");
					SendClientMessage(i, COLOR_WHITE, "/eletrodomesticos = Para ver os eletrodomesticos.");
					SendClientMessage(i, COLOR_WHITE, "/alimentacao = Para ver as comidas e bebidas.");
					SendClientMessage(i, COLOR_WHITE, "/outros = Para ver outros sem especificações.");
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou na Loja 24/7.",PlayerName(i));
					writelog(msg);
					AreaCreditos[i] = 1;
				}
			}
			else if(X >= -295.3604 && X <= -265.3752 && Y >= -2187.1279 && Y <= -2146.8669){
				if(AreaCopPL[i] == 0){
				    GameTextForPlayer(i,"~w~base policial",3000,1);
				    AreaCopPL[i] = 1;
				}
			}
	        else if(X >= 406.3685 && X <= 798.7696 && Y >= -2476.3638 && Y <= -2082.9778){
			    if(AreaPesca[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou na ÁREA DE PESCA.",PlayerName(i));
					writelog(msg);
		    		TextDrawShowForPlayer(i,tdPesca);
	            	AreaPesca[i] = 1;
					if(PescaInProgress[i] == 1){
		    			SendClientMessage(i,COLOR_PESCADOR,"Pescaria retomada... Continue...");
		       			KillTimer(avisado[i]);
					 }
				}
	        }
			else if(X >= 2303.8235 && X <= 2321.3071 && Y >= -17.2803 && Y <= 0.7794){
			    if(AreaBanco[i] == 0){
			    	SendClientMessage(i, COLOR_PALHA, "$ $ $ $ Banco Life $ $ $ $");
			    	SendClientMessage(i, COLOR_WHITE, "Para visualizar os comandos digite /meubanco");
			        AreaBanco[i] = 1;
			        new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou no BANCO.",PlayerName(i));
					writelog(msg);
					TextDrawShowForPlayer(i,tdBanco);
				}
			}
			else if((X >= 244.6573 && X <= 250.0471 && Y >= 64.9115 && Y <= 71.2839)){
			    if(AreaDelegacia[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou na DELEGACIA.",PlayerName(i));
					writelog(msg);
	 				TextDrawShowForPlayer(i,tdDelegacia);
					SendClientMessage(i,COLOR_COP_SWAT,"[SECRETARIA] EM QUE POSSO AJUDAR? Aqui é onde as multas devem ser pagas");
					SendClientMessage(i,COLOR_COP_SWAT,"[SECRETARIA] digite /pagardividas [ID/do/veiculo] para pagar a sua! Ou então RETIRE-SE!");
					AreaDelegacia[i] = 1;
				}
			}
	        else if((X >= 1005.8145 && X <= 1039.4332 && Y >= -1130.0962 && Y <= -1115.3085)){
			    if(AreaEntretenimentos[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou na ÁREA DE ENTRETENIMENTOS.",PlayerName(i));
					writelog(msg);
	 				TextDrawShowForPlayer(i,tdEntretenimentos);
					SendClientMessage(i,COLOR_COP_SWAT, "Bem vindo a área de entretenimentos, veja os entretenimentos disponíveis em /lazeres");
					AreaEntretenimentos[i] = 1;
				}
			}
	        else if((X >= 244.6573 && X <= 250.0471 && Y >= 64.9115 && Y <= 71.2839)){
			    if(AreaEntretenimentos[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou na DELEGACIA.",PlayerName(i));
					writelog(msg);
	 				TextDrawShowForPlayer(i,tdDelegacia);
					SendClientMessage(i,COLOR_COP_SWAT,"[SECRETARIA] EM QUE POSSO AJUDAR? Aqui é onde as multas devem ser pagas");
					SendClientMessage(i,COLOR_COP_SWAT,"[SECRETARIA] digite /pagardividas [ID/do/veiculo] para pagar a sua! Ou então RETIRE-SE!");
					AreaDelegacia[i] = 1;
				}
			}
			else if((X >= 2202.5859 && X <= 2243.3833 && Y >= -1178.5582 && Y <= -1147.8750) || (X >= 1011.2641 && X <= 1041.0114&& Y >= -983.7526 && Y <= -969.2452) || (X >= 306.8750 && X <= 348.0109 && Y >= -1549.4528 && Y <= -1507.1206) || (X >= 853.6352&& X <= 906.9810 && Y >= -1654.5397 && Y <= -1637.8098) || (X >= 1832.3505 && X<= 1924.4619 && Y>= -1601.7281 && Y<= -1595.9496)){
			    if(AreaHotel[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou em um HOTEL.",PlayerName(i));
					writelog(msg);
	 				TextDrawShowForPlayer(i,tdHotel);
					SendClientMessage(i,COLOR_VERDE_AQUA,"[SECRETARIA] Olá senhor. Quer disfrutar do nosso hotel? Veja mais info: /hotelinfo");
					AreaHotel[i] = 1;
				}
			}
	        else if(X >= -231.1121 && X <=-208.7958 && Y >= 972.6275 && Y <= 1000.6964){
	            if(AreaDeleg[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou na DELEGACIA.",PlayerName(i));
					writelog(msg);
					TextDrawShowForPlayer(i,tdDelegacia);
	         		AreaDeleg[i] = 1;
				}
	        }
	        else if(X >= 1359.8223 && X <= 1378.9132 && Y >= -1663.1356 && Y <= -1632.3219){
	            if(AreaEsconderijo[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou em um ESCONDERIJO.",PlayerName(i));
					writelog(msg);
					if(Profissao[i] == ASSALTANTE){
					 	TextDrawShowForPlayer(i,tdEsconderijo);
						SendClientMessage(i, COLOR_ASSALTANTE, "Você encontrou um esconderijo, esconda um carro aqui com /escondercarro");
					}
	         		AreaEsconderijo[i] = 1;
				}
	        }
	        else if(X >= 1509.8142 && X <= 1527.9072 && Y >= -1481.3231 && Y <= -1456.8036){
	            if(AreaEsconderijo[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou em um ESCONDERIJO.",PlayerName(i));
					writelog(msg);
					if(Profissao[i] == ASSALTANTE){
					 	TextDrawShowForPlayer(i,tdEsconderijo);
						SendClientMessage(i, COLOR_ASSALTANTE, "Você encontrou um esconderijo, esconda um carro aqui com /escondercarro");
					}
	         		AreaEsconderijo[i] = 1;
				}
	        }
	        else if(X >= 2322.7334 && X <= 2351.6719 && Y >= -1275.1112 && Y <= -1226.6000){
	            if(AreaEsconderijo[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou em um ESCONDERIJO.",PlayerName(i));
					writelog(msg);
					if(Profissao[i] == ASSALTANTE){
					 	TextDrawShowForPlayer(i,tdEsconderijo);
						SendClientMessage(i, COLOR_ASSALTANTE, "Você encontrou um esconderijo, esconda um carro aqui com /escondercarro");
					}
				 	AreaEsconderijo[i] = 1;
				}
	        }
			else if((X >= 822.0399 && X <= 834.1194 && Y >= -1.1471 && Y <= 11.6526)){
	            if(AreaLCavalos[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou na LOTERIA DE CAVALOS.",PlayerName(i));
					writelog(msg);
			        TextDrawShowForPlayer(i,tdLCavalos);
			        SendClientMessage(i, COLOR_RED2, "Loteria de cavalos - Comandos:");
			        SendClientMessage(i, COLOR_WHITE, "/apostarcavalo [cavalo] [quantia] : Para apostar em um cavalo!");
			        AreaLCavalos[i] = 1;
				}
			}
			else if(X >= 2133.3506 && X <= 2202.0874 && Y >= -1997.1613 && Y <= -1961.8463){
			    if(AreaLixao[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou no LIXÃO/FERRO-VELHO.",PlayerName(i));
					writelog(msg);
			        TextDrawShowForPlayer(i,tdLixao);
			        AreaLixao[i] = 1;
				}
			}
			else if(X >= 1997.4874 && X <= 2038.1327 && Y >= -1450.3445&& Y <= -1401.6718){
				if(AreaHosp[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou no HOSPITAL.",PlayerName(i));
					writelog(msg);
					SendClientMessage(i, COLOR_RED2, "Hospital - Comandos:");
					SendClientMessage(i, COLOR_PARAMEDICO, "/comprarmedicamento : Para comprar medicamento.");
					SendClientMessage(i, COLOR_PARAMEDICO, "/tomarvacina : Tomar vacina contra a epidemia da malária.");
					SendClientMessage(i, COLOR_PARAMEDICO, "/internar : Internar-se, curar as doenças e recuperar a saúde.");
					TextDrawShowForPlayer(i,Hospital);
					AreaHosp[i] = 1;
					new Float:Health;
					if(Health <= 30){
						if(!IsHaveProf(PARAMEDICO)){
							if(CheckpointStatus[i] == NONE){
								SetPlayerCheckpoint(i, 2035.6689,-1404.7140,17.2523, 2.0);
								CheckpointStatus[i] = HOSPITAL;
							}
						}
					}
				}
			}
			else if(X >= 1173.6530 && X <= 1184.8798 && Y >= -1353.3738 && Y <= -1305.6914){
				if(AreaHosp[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou no HOSPITAL.",PlayerName(i));
					writelog(msg);
					SendClientMessage(i, COLOR_RED2, "Hospital - Comandos:");
					SendClientMessage(i, COLOR_PARAMEDICO, "/comprarmedicamento : Para comprar medicamento.");
					SendClientMessage(i, COLOR_PARAMEDICO, "/tomarvacina : Tomar vacina conta a epidemia da malária.");
					SendClientMessage(i, COLOR_PARAMEDICO, "/internar : Internar-se, curar as doenças e receber curativo.");
					TextDrawShowForPlayer(i,Hospital);
					AreaHosp[i] = 1;
					new Float:Health;
					GetPlayerHealth(i,Health);
					if(Health <= 30){
						if(!IsHaveProf(PARAMEDICO)){
							if(CheckpointStatus[i] == NONE){
								SetPlayerCheckpoint(i, 1173.3135,-1323.5718,15.3935,3.0);
								CheckpointStatus[i] = HOSPITAL;
							}
						}
					}
				}
			}
			else if(X >= 284.5497 && X <= 297.2998 && Y >= -111.2369 && Y <= -103.8383){
				if(GetPlayerInterior(i) == 6){
					if(IsHaveProf(VENDEDOR_DE_ARMAS)){
					    SetPlayerPos(i, 2400.2546,-1975.9309,13.3828);
						SetPlayerInterior(i, 0);
						GameTextForPlayer(i,"~r~ Fechada", 5000,0);
						SendClientMessage(i, COLOR_RED2, "[AMMU] Senhor nossa loja está fechada, existe vendedores Online, compre armas dele.");
					}
				}
			}
			else if(X >= 285.0800 && X <= 300.0360 && Y >= -40.1308 && Y <= -31.3282){
				if(GetPlayerInterior(i) == 1){
					if(IsHaveProf(VENDEDOR_DE_ARMAS)){
					    SetPlayerPos(i, 1364.4122,-1279.0601,13.5469);
						SetPlayerInterior(i, 0);
						GameTextForPlayer(i,"~r~ Fechada", 5000,0);
						SendClientMessage(i, COLOR_RED2, "[AMMU] Senhor nossa loja está fechada, existe vendedores Online, compre armas dele.");
					}
				}
			}
			else if(X >= 2521.7185 && X <= 2535.7808 && Y >= -1720.9760 && Y <= -1699.4797){
			    if(AreaDesmanche[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou no BÉCO DO DESMANCHE.",PlayerName(i));
					writelog(msg);
			        TextDrawShowForPlayer(i,tdDesmanche);
			        AreaDesmanche[i] = 1;
				}
			}
			else if((X >= -1496.1409 && Y <= 1884.1014 && X <= -1449.3982 && Y >= 1851.1890) || (X >= 1932.0310 && X <= 1948.1785 && Y >= -1783.5273 && Y <= -1764.2950)  || (X >= 608.2354 && X <= 619.7912 && Y >= 1851.1890 && Y <= 1884.1014) || (X >= -1332.9951 && X <= -1324.0493 && Y >= 2669.6433 && Y <= 2685.6675) || (X >= 590.5313 && X <= 635.5209 && Y >= 1674.5238 && Y <= 1707.7955 || (X >= 1374.8701 && X <= 1390.7919 && Y >= 460.7597 && Y <= 461.7661))){
			    if(AreaPosto[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou no POSTO.",PlayerName(i));
					writelog(msg);
					TextDrawShowForPlayer(i,Posto);
					SendClientMessage(i,COLOR_VERDE_AQUA,"Para abastecer seu veículo digite: /abastecer [litros]");
					SendClientMessage(i,COLOR_VERDE_AQUA,"Para adquirir um galão de combustível digite: /galao [1-20]");
	            	AreaPosto[i] = 1;
				}
			}
			else if((X >= 651.7850 && X <= 661.3630 && Y >= -577.0740 && Y <= -555.3830) || (X >=-94.9835 && X <= -89.6581 && Y >= -1184.5673 && Y <= -1147.5620) ||(X >= 2131.2070 && X <= 2161.8208 && Y >= 2735.4387 && Y <= 2762.3884) || (X >= -1615.1073 && X <= -1601.3243 && Y >= -2733.9380 && Y <= -2692.7102) || (X >= 2629.4885  && X <=2649.0012 && Y >=1093.5876 && Y <=1117.8594)|| (X >= 1587.0552 && X <= 1605.8910 && Y >= 2189.7161 && Y <= 2208.1714)){
			    if(AreaPosto[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou no POSTO.",PlayerName(i));
					writelog(msg);
					TextDrawShowForPlayer(i,Posto);
					SendClientMessage(i,COLOR_VERDE_AQUA,"Para abastecer seu veículo digite: /abastecer [litros]");
	                SendClientMessage(i,COLOR_VERDE_AQUA,"Para adquirir um galão de combustível digite: /galao [1-20]");
					AreaPosto[i] = 1;
				}
			}
			else if((X >= 996.3851 && X <= 1011.8171 && Y >= -943.7941 && Y <= -930.1505) ||(X >= 53.4239 && X <= 90.0274 && Y >= 1204.0210 && Y <= 1224.3071) || (X >= -107.9445 && X <= -77.7968 && Y >= -1178.9248 && Y <= -1163.9293) || (X >= -2420.0505 && X <= -2400.0459 && Y >= 958.4067 && Y <= 997.0031) || (X >= -1703.8510 && X <= -1644.2720 && Y >= 408.3849 && Y <= 427.6900) || (X >= 2104.0168 && X <= 2136.1519 && Y >= 901.5171 && Y <= 947.6444)){
			    if(AreaPosto[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou no POSTO.",PlayerName(i));
					writelog(msg);
					TextDrawShowForPlayer(i,Posto);
					SendClientMessage(i,COLOR_VERDE_AQUA,"Para abastecer seu veículo digite: /abastecer [litros]");
					SendClientMessage(i,COLOR_VERDE_AQUA,"Para adquirir um galão de combustível digite: /galao [1-20]");
	            	AreaPosto[i] = 1;
				}
			}
			else if( (X >= -1675.6531 && X <= -1675.1965 && Y >= 398.1009 && Y <= 434.0430) || (X >= 992.8317 && X <= 1016.6620 && Y >= -945.4556 && Y <= -929.5608) || (X >= 2189.5925 && X <= 2213.6421 && Y >= 2463.2566 && Y <= 2487.5833)){
			    if(AreaPosto[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou no POSTO.",PlayerName(i));
					writelog(msg);
					TextDrawShowForPlayer(i,Posto);
					SendClientMessage(i,COLOR_VERDE_AQUA,"Para abastecer seu veículo digite: /abastecer [litros]");
					SendClientMessage(i,COLOR_VERDE_AQUA,"Para adquirir um galão de combustível digite: /galao [1-20]");
	            	AreaPosto[i] = 1;
				}
			}
			else if((X >= 1368.9551 && X <= 1408.8533 && Y >= 1763.6663 && Y <= 1776.5144) || (X >= -1274.6521 && X <= -1220.1176 && Y >= -91.9231 && Y <= -101.3978) || (X >= 1364.6108 && X <= 1464.9171 && Y >= -2473.7749 && Y <= -2406.1863)){
			    if(AreaPosto[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou no POSTO.",PlayerName(i));
					writelog(msg);
					TextDrawShowForPlayer(i,Posto);
					SendClientMessage(i,COLOR_VERDE_AQUA,"Para abastecer seu veículo digite: /abastecer [litros]");
					SendClientMessage(i,COLOR_VERDE_AQUA,"Para adquirir um galão de combustível digite: /galao [1-20]");
	            	AreaPosto[i] = 1;
				}
			}
			else if((X >= 703.5037 && X <= 746.5966 && Y >= -1505.7843 && Y <= -1475.8815)){
			    if(AreaCoopPesca[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou na COOPERATIVA DE PESCA.",PlayerName(i));
					writelog(msg);
					TextDrawShowForPlayer(i,tdCoopPesca);
					SendClientMessage(i, COLOR_VERDE_AQUA, "Você pode abastecer barcos aqui, basta digitar /abastecer [litros]");
	            	AreaCoopPesca[i] = 1;
				}
			}
			else if(X >= -542.2603 && X <= -505.6189 && Y >= 2546.9524 && Y <= 2637.3440){
				if(AreaCarga[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou na ÁREA DE CARGA.",PlayerName(i));
					writelog(msg);
				    TextDrawShowForPlayer(i,tdAreaCarga);
				    AreaCarga[i] = 1;
				}
			}
			else if(X >= 1694.1951 && X <= 1748.9655 && Y >= -2475.6489 && Y <= -2422.5481){
				if(AreaAero[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou na AEROPORTO.",PlayerName(i));
					writelog(msg);
				    TextDrawShowForPlayer(i,tdAero);
				    SendClientMessage(i, COLOR_VERDE_AQUA, "Para abastecer um veículo aéreo digite /abastecer [litros]");
				    AreaAero[i] = 1;
				}
			}
			else if(X >= -1194.7273 && X <= -1007.1719 && Y >= -1064.6096 && Y <= -915.6717){
			    if(AreaFazenda[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou na FAZENDA.",PlayerName(i));
					writelog(msg);
			    	TextDrawShowForPlayer(i,tdPlant);
				    AreaFazenda[i] = 1;
					if(FazendaInProgress[i] == 1){
		    			SendClientMessage(i,COLOR_AGRICULTOR,"Colheita retomada... Continue...");
		       			KillTimer(avisado[i]);
				    }
				}
			}
			else if(X >= -1098.3835 && X <= -1080.9955 && Y >= -1280.2528 && Y <= -1268.6240){
			    if(Leite[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou no CURRAL DAS VACAS.",PlayerName(i));
					writelog(msg);
			    	TextDrawShowForPlayer(i,tdLeite);
				    Leite[i] = 1;
				}
			}
		    else if(X >= -1086.2097 && X <= -1040.9519 && Y >= -1232.5966 && Y <= -1156.6401){
		        if(AreaCoopFazenda[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou na ÁREA DE COLHEITA.",PlayerName(i));
					writelog(msg);
		            TextDrawShowForPlayer(i,tdColheita);
					AreaCoopFazenda[i] = 1;
				}
			}
		    else if(X >= 2520.7192 && X <= 2597.7166 && Y >= 1962.3511 && Y <= 2001.7731){
		        if(AreaForte[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou na ÁREA FORTE.",PlayerName(i));
					writelog(msg);
					TextDrawShowForPlayer(i,tdForte);
					AreaForte[i] = 1;
				}
			}
			else if((X >= -2135.8237 && X <= -2018.0640 && Y >= 198.6757 && Y <= 308.0062) || (X >= 2403.4958 && X <= 2491.6235 && Y >= 1871.3947 && Y <= 1954.5074) || (X >= 1228.8705 && X <= 1281.9611 && Y >= -1268.2677 && Y <= -1231.5519)){
				if(Construcao[i] == 0){
		           	new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou na CONSTRUÇÃO.",PlayerName(i));
					writelog(msg);
					TextDrawShowForPlayer(i,tdConstrucao);
			    	Construcao[i] = 1;
				}
			}
			else if(X >= 2114.5352 && X <= 2138.9673 && Y >= -1160.7681 && Y <= -1119.3993){
			    if(AreaCustomizacao[i] == 0){
					if(!IsHaveProf(MECANICO)){
	                	new msg[256];
						format(msg,sizeof(msg),"SERVIDOR: %s entrou na LOJA DE CUSTOMIZAÇÃO.",PlayerName(i));
						writelog(msg);
			        	TextDrawShowForPlayer(i,tdCustomizacao);
			        	SendClientMessage(i, COLOR_VERDE_AQUA, "|============| Bem vindo à Loja de Customização |============|");
			        	SendClientMessage(i, COLOR_WHITE, "/mudarplaca [placa] : Mudar a placa de seu veículo. Custo: $200");
			        	SendClientMessage(i, COLOR_WHITE, "/consertarcar : Consertar o seu veículo. Custo: $100");
			        	SendClientMessage(i, COLOR_WHITE, "/pintarcar [cor1] [cor2] : Pintar o seu veículo. Custo: $50");
			        	SendClientMessage(i, COLOR_WHITE, "/comprarkit : Comprar o kit de travas e alarmes. Custo: $2500");
			        	SendClientMessage(i, COLOR_WHITE, "/fume : Fumê, serve para que ninguém veja quem está dentro do veículo. Custo: $1200");
			   			AreaCustomizacao[i] = 1;
					}
					else{
	                    SendClientMessage(i, COLOR_GRAY, "Loja de customização Fechada, procure um mecânico para customizar seu carro, digite /servico mecanico");
					}
				}
			}
		    else if(X >= 600.7289 && X <= 697.5099 && Y >= 817.7690 && Y <= 876.9632){
			    if(PedreiraCarga[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou na PEDREIRA.",PlayerName(i));
					writelog(msg);
			        TextDrawShowForPlayer(i,tdPdCarga);
			   		PedreiraCarga[i] = 1;
				}
			}
			else if(X >= 184.5647 && X <= 230.9916 && Y >= -1461.1041 && Y <= -1410.0316){
			    if(AreaLocadora[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou na LOCADORA.",PlayerName(i));
					writelog(msg);
			        TextDrawShowForPlayer(i,tdLocadora);
			   		AreaLocadora[i] = 1;
			   		if(Profissao[i] == LOCADOR_DE_CARROS){
			   		    SendClientMessage(i, COLOR_PALHA, "Bem vindo à locadora de carros!");
			   		    SendClientMessage(i, COLOR_PALHA, "Aqui é onde ficam os carros que você pode alugar para os outros jogadores.");
					}
					else{
					    SendClientMessage(i, COLOR_PALHA, "Bem vindo à locadora de carros!");
					    SendClientMessage(i, COLOR_PALHA, "Aqui temos carros de ótima qualidade para você alugar.");
					    SendClientMessage(i, COLOR_PALHA, "Se quiser alugar um, peça para um locador de carros!");
					}
				}
			}
		    else if(X >= 1201.4354 && X <= 1222.2795 && Y >= -12.2048 && Y <= 9.5224){
			    if(AreaStrip[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou na ÁREA DE STRIP.",PlayerName(i));
					writelog(msg);
					TextDrawShowForPlayer(i,tdStrip);
					SendClientMessage(i,COLOR_CORRETOR,"Você entrou na Boate. No Balcão você pode se servir com drinks e petiscos.");
					SetPlayerCheckpoint(i, 1215.8606,-13.3520,1000.9219,2.0);
				    CheckpointStatus[i] = NOBAR;
				    AreaStrip[i] = 1;
					new name[MAX_PLAYER_NAME];
		   			if(Profissao[i] == PROSTITUTA){
						GetPlayerName(i,name,sizeof(name));
						SendClientMessage(i,COLOR_ROSA, "Você pode dançar aqui para seus clientes basta digitar /strip-tease [id].");
						SendClientMessage(i,COLOR_ROSA, "Ou então você poderá digitar /fazerstrip e fazer strip para todos os jogadores.");
					   	AreaStrip[i] = 1;
					}
				}
			}
		    else if(X >= 473.7528 && X <= 507.0168 && Y >= -26.5854 && Y <= -1.2412){
			    if(AreaBar[i] == 0 && AreaBalada[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou na BALADA.",PlayerName(i));
					writelog(msg);
	 				TextDrawShowForPlayer(i,tdBalada);
					SendClientMessage(i,COLOR_CORRETOR,"Você entrou na Balada. No Balcão você pode se servir com drinks e petiscos.");
	 				SetPlayerCheckpoint(i,499.9472,-20.8251,1000.6797,2.0);
	 				CheckpointStatus[i] = NOBAR;
					AreaBalada[i] = 1;
					AreaBar[i] = 1;
				}
			}
		    else if(X >= 487.8045 && X <= 511.8313 && Y >= -83.0083 && Y <= -67.9435){
			    if(AreaBar[i] == 0){
	            	new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou no BAR.",PlayerName(i));
					writelog(msg);
	     			TextDrawShowForPlayer(i,tdBar);
					SendClientMessage(i,COLOR_CORRETOR,"Você entrou no Bar. No Balcão você pode se servir com drinks e petiscos.");
					SetPlayerCheckpoint(i,498.6165,-75.9877,998.7578,2.0);
				    CheckpointStatus[i] = NOBAR;
					AreaBar[i] = 1;
				}
			}
			else if((X >= 1559.7327 && X <= 1576.1588 && Y >= -1898.0133 && Y <= -1881.8749)){
			    if(AreaSorveteria[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou na SORVETERIA.",PlayerName(i));
					writelog(msg);
	 				TextDrawShowForPlayer(i,tdSorveteria);
					SendClientMessage(i,COLOR_RED2,"Você entrou em uma sorveteria.");
					SendClientMessage(i,COLOR_WHITE,"Para tomar sorvete digite /tomarsorvete");
					SendClientMessage(i,COLOR_WHITE,"Para comprar sorvete digite /comprarsorvete");
					AreaSorveteria[i] = 1;
				}
			}
		    else if(X >= 2092.0557 && X <= 2105.0586 && Y >= -1821.3566 && Y <= -1790.9103){
			    if(PizzariaCar[i] == 0){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou na PIZZARIA.",PlayerName(i));
					writelog(msg);
			        TextDrawShowForPlayer(i,tdPizzaria);
			   		PizzariaCar[i] = 1;
				}
			}
			else if((X >= 224.9952 && X <= 230.2665 && Y >= 1084.1217 && Y <= 1087.3986) || (X >= 219.4560 && X <= 222.7846 && Y >= 1071.3065 && Y <= 1076.5811) || (X >= 2266.5547 && X <= 2269.0198 && Y >= -1142.0975 && Y <= -1138.3282)
			|| (X >= 232.4944 && X <= 234.7452 && Y >= 1109.1368 && Y <= 1112.3904) || (X >= 234.5374 && X <= 237.8106 && Y >= 1117.0372 && Y <= 1117.0330) || (X >= 232.9097 && X <= 235.9165 && Y >= 1205.1270 && Y <= 1209.4386)
			|| (X >= 362.7215 && X <= 371.5781 && Y >= -63.2284 && Y <= -56.5697) || (X >= 444.0239 && X <= 447.1384 && Y >= 1411.6136 && Y <= 1414.4985)
			|| (X >= 2533.8188 && X <=2538.2649 && Y >= -1681.4226 && Y <= -1678.6370) || (X >= 2456.2585 && X <= 2460.2170 && Y >= -1696.1635 && Y <=-1690.9242)
			|| (X >=284.2068 && X <=287.6263&& Y >=1479.7346&& Y <= 1483.4851)){
				if(AreaBanheiro[i] == 0){
				    new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou no BANHEIRO.",PlayerName(i));
					writelog(msg);
					TextDrawShowForPlayer(i,tdBanheiro);
					SendClientMessage(i, COLOR_GREEN, "Você entrou no Banheiro, caso queira cuidar da sua higiene digite /urinar.");
					AreaBanheiro[i] = 1;
					if((X >= 224.9952 && X <= 230.2665 && Y >= 1084.1217 && Y <= 1087.3986) || (X >= 219.4560 && X <= 222.7846 && Y >= 1071.3065 && Y <= 1076.5811) || (X >= 2266.5547 && X <= 2269.0198 && Y >= -1142.0975 && Y <= -1138.3282)
					|| (X >= 232.4944 && X <= 234.7452 && Y >= 1109.1368 && Y <= 1112.3904) || (X >= 234.5374 && X <= 237.8106 && Y >= 1117.0372 && Y <= 1117.0330) || (X >= 232.9097 && X <= 235.9165 && Y >= 1205.1270 && Y <= 1209.4386)
					|| (X >= 2533.8188 && X <=2538.2649 && Y >= -1681.4226 && Y <= -1678.6370) || (X >= 2456.2585 && X <= 2460.2170  && Y >= -1696.1635 && Y <=-1690.9242)	|| (X >= 444.0239 && X <= 447.1384 && Y >= 1411.6136 && Y <= 1414.4985)
					|| (X >=284.2068 && X <=287.6263&& Y >=1479.7346&& Y <= 1483.4851)){
					    SendClientMessage(i, COLOR_WHITE, "Este banheiro tem Chuveiro, poderá tomar um banho. /tomarbanho.");
						AreaChuveiro[i] = 1;
						AreaBanheiro[i] = 2;
					}
				}
			}
			else if(X >= -2689.9836 && X <= -2638.4956 && Y >= 1388.9476 && Y <= 1431.6681){
				if(AreaBalada[i] == 0) {
				    new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou na BALADA.",PlayerName(i));
					writelog(msg);
					TextDrawShowForPlayer(i,tdBalada);
					SendClientMessage(i, COLOR_GREEN, "Você entrou na Balada, seja bem vindo!");
					SendClientMessage(i, COLOR_GREEN, "Que tal dançar um pouquinho? Caso esteja afim digite /dancar [1-3]");
					AreaBalada[i] = 1;
				}
	        }
	        else if(X >= 2118.7361 && X <= 2134.8621 && Y >= -2284.8635 && Y <= -2268.7520){
				if(AreaCOEVL[i] == 0) {
				    new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou na COEVL.",PlayerName(i));
					writelog(msg);
					TextDrawShowForPlayer(i,tdCOEVL);
					SendClientMessage(i, COLOR_RED2, "Companhia Elétrica Virtual Life");
					SendClientMessage(i, COLOR_WHITE, "Comando disponível para liberar sua luz: /pagarluz");
					AreaCOEVL[i] = 1;
				}
	        }
	        else if(X >= 1975.3418 && X <= 2263.2495 && Y >= -1122.5630 && Y <= -950.2056){
				if(AreaMorro[i] == 0) {
				    new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou no MORRO.",PlayerName(i));
					writelog(msg);
					TextDrawShowForPlayer(i,tdMorro);
					SendClientMessage(i, COLOR_DESEMPREGADO, "Cuidado, essa é uma área perigosa!");
					AreaMorro[i] = 1;
					if(!IsHaveProf(TRAFICANTE)){
						if(!IsHaveProf(LIDER_DE_TRAFICO)){
							if(CheckpointStatus[i] == NONE){
								if(GetPlayerMoney(i) >= 200){
									SendClientMessage(i, COLOR_TRAFICANTE, "E aí mano! Tá afim de uns treco é? Digite: /drogas e pegue uma.");
									TaAfim[i] = 1;
								}
							}
						}
					}
				}
	        }
			else if(X >= 2488.7861 && X <= 2500.7607 && Y >= -1759.8594 && Y <= -1752.9761){
				if(AreaChaveiro[i] == 0) {
				    new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou no CHAVEIRO.",PlayerName(i));
					writelog(msg);
					TextDrawShowForPlayer(i,tdChaveiro);
					SendClientMessage(i, COLOR_RED2, "|================| Bem vindo ao Chaveiro |================|");
					SendClientMessage(i, COLOR_WHITE, "/comprarchavemestra : Para adquirir uma chave mestra. Custo: $150");
					AreaChaveiro[i] = 1;
				}
	        }
			else if(X >= 547.0875 && X <= 557.2563 && Y >= -1517.3672 && Y <= -1501.9551){
				if(AreaECTVL[i] == 0) {
				    new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s entrou na ECTVL.",PlayerName(i));
					writelog(msg);
					TextDrawShowForPlayer(i,tdECTVL);
					SendClientMessage(i, COLOR_RED2, "Empresa de Contas Telefônicas Virtual Life");
					SendClientMessage(i, COLOR_WHITE, "Comando disponível para liberar seu telefone: /pagartelefone");
					AreaECTVL[i] = 1;
				}
	        }
			else if((X >= 1928.1771 && X <= 1970.5675 && Y >= 987.5739 && Y <= 1042.8369)
			 	|| (X >= 2171.3618 && X <= 2279.4915 && Y >= 1584.2649 && Y <= 1628.6199)
			 	|| (X >= 1117.5068 && X <= 1142.4843 && Y >= -11.2747 && Y <= 12.5986)){
				AreaCasino[i]++;
				GameTextForPlayer(i,"~r~SAIA DO CASINO~n~ ~g~Caso contrrio ~b~Morra!",10000,5);
				if(AreaCasino[i] > 3) {
					SetPlayerHealth(i,0);
					SendClientMessage(i,COLOR_RED2,"Você foi avisado!");
				}
			}
			else {
			    if(AreaCopPL[i] == 1){
			        if(NoPL[i] == 1 && Equipe[i] == 1){
			        	if(Capturado[i] == 1){
			        	    SetPlayerPos(i,-272.4936,-2146.8669,28.6770);
			            	SetPlayerHealth(i,5.0);
			            	SendClientMessage(i, COLOR_LIGHT_YELLOW, "[POLÍCIA E LADRÃO] Tsc Tsc tentando fugir né? Pode tentar mais não vai conseguir!");
						}
						else if(Capturado[i] == 0){
						    for(new p = 0; p < SLOTS2; p++){
								if(GetDistanceBetweenPlayers(p,i) < 5 && Capturado[i] == 1 && NoPL[i] == 1 && Equipe[i] == 1){
									Capturado[i] = 0;
									new str[256];
									QtCapturados--;
									format(str,sizeof(str),"[POLÍCIA E LADRÃO] %s lhe soltou, rápido fuja!",PlayerName(i));
									SendClientMessage(p, COLOR_LIGHT_YELLOW, str);
									format(str,sizeof(str),"[POLÍCIA E LADRÃO] %s soltou %s da base policial, CADE OS POLICIAIS?",PlayerName(i),PlayerName(p));
									SendClientMessageToAll(COLOR_LIGHT_YELLOW, str);
								}
							}
						}
					}
					AreaCopPL[i] = 0;
				}
				if(AreaAero[i] == 1){
			        TextDrawHideForPlayer(i,tdAero);
			        new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu do AEROPORTO.",PlayerName(i));
					writelog(msg);
			        AreaAero[i] = 0;
				}
				if(AreaEsconderijo[i] == 1){
			        TextDrawHideForPlayer(i,tdEsconderijo);
			        new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu de um ESCONDERIJO.",PlayerName(i));
					writelog(msg);
			        AreaEsconderijo[i] = 0;
				}
			    if(AreaECTVL[i] == 1){
			        TextDrawHideForPlayer(i,tdECTVL);
			        new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu da ECTVL.",PlayerName(i));
					writelog(msg);
			        AreaECTVL[i] = 0;
				}
				if(AreaEntretenimentos[i] == 1){
			        TextDrawHideForPlayer(i,tdEntretenimentos);
			        new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu da ÁREA DE ENTRETENIMENTOS.",PlayerName(i));
					writelog(msg);
			        AreaEntretenimentos[i] = 0;
				}
			    if(AreaChaveiro[i] == 1){
			        TextDrawHideForPlayer(i,tdChaveiro);
			        new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu do CHAVEIRO.",PlayerName(i));
					writelog(msg);
			        AreaChaveiro[i] = 0;
				}
			    if(AreaMorro[i] == 1){
			        TextDrawHideForPlayer(i,tdMorro);
			        new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu do MORRO.",PlayerName(i));
					writelog(msg);
			        AreaMorro[i] = 0;
					TaAfim[i] = 0;
					if(CheckpointStatus[i] == CDROGAS){
						DisablePlayerCheckpoint(i);
					    CheckpointStatus[i] = NONE;
					}
				}
			    if(AreaCOEVL[i] == 1){
			        TextDrawHideForPlayer(i,tdCOEVL);
			        new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu da COEVL.",PlayerName(i));
					writelog(msg);
			        AreaCOEVL[i] = 0;
				}
			    if(AreaBalada[i] == 1){
	  				PlayerPlaySound(i,1086,0.0,0.0,0.0);
		  			PlayerPlaySound(i,1084,0.0,0.0,0.0);
		  			PlayerPlaySound(i,1098,0.0,0.0,0.0);
					PlayerPlaySound(i,1077,0.0,0.0,0.0);
		  			PlayerPlaySound(i,1069,0.0,0.0,0.0);
		  			PlayerPlaySound(i,1063,0.0,0.0,0.0);
		  			PlayerPlaySound(i,1088,0.0,0.0,0.0);
					TextDrawHideForPlayer(i,tdBalada);
					new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu da BALADA.",PlayerName(i));
					writelog(msg);
					sombalada[i] = 0;
			        AreaBalada[i] = 0;
				}
			    if(AreaLocadora[i] == 1){
			        TextDrawHideForPlayer(i,tdLocadora);
			        new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu da LOCADORA.",PlayerName(i));
					writelog(msg);
			        AreaLocadora[i] = 0;
				}
			    if(AreaDesmanche[i] == 1){
			        TextDrawHideForPlayer(i,tdDesmanche);
			        new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu do BECO DO DESMANCHE.",PlayerName(i));
					writelog(msg);
			        AreaDesmanche[i] = 0;
				}
				if(AreaLixao[i] == 1){
				    TextDrawHideForPlayer(i,tdLixao);
				    new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu do LIXÃO/FERRO-VELHO.",PlayerName(i));
					writelog(msg);
				    AreaLixao[i] = 0;
				}
				if(AreaCoopFazenda[i] == 1){
				    TextDrawHideForPlayer(i,tdColheita);
				    new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu da ÁREA DE COLHEITA.",PlayerName(i));
					writelog(msg);
				    AreaCoopFazenda[i] = 0;
				}
				if(AreaFazenda[i] == 1){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu da FAZENDA.",PlayerName(i));
					writelog(msg);
				    TextDrawHideForPlayer(i,tdPlant);
				    AreaFazenda[i] = 0;
					if(FazendaInProgress[i] == 1){
		    			SendClientMessage(i,COLOR_PESCADOR,"Você tem 10 segundos para voltar a área da fazenda e terminar a colheita.");
		    			avisado[i]=SetTimerEx("TerminarCarregamento",10000,0,"d",i);
				    }
				}
				if(Leite[i] == 1){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu do CURRAL DAS VACAS.",PlayerName(i));
					writelog(msg);
				    TextDrawHideForPlayer(i,tdLeite);
				    Leite[i] = 0;
				}
				if(AreaBanco[i] == 1){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu do BANCO.",PlayerName(i));
					writelog(msg);
					TextDrawHideForPlayer(i,tdBanco);
					AreaBanco[i] = 0;
					if(BancoRoubando[i] != 0){
	                    SendClientMessage(i, COLOR_ASSALTANTE, "Agora saia daí...");
	                    SendClientMessage(i, COLOR_ASSALTANTE, "A grana está contigo, a polícia pode ir atrás de você ainda.");
						if(BancoRoubando[i] == 1){
						    new assalt;
						    assalt = minrand(100,200);
							AddPlayerMoney(i, assalt, 3);
							BancoRoubando[i] = 0;
						}
						else if(BancoRoubando[i] == 2){
						    new assalt;
						    assalt = minrand(200,300);
							AddPlayerMoney(i, assalt, 3);
							BancoRoubando[i] = 0;
						}
						else if(BancoRoubando[i] == 3){
						    new assalt;
						    assalt = minrand(300,400);
							AddPlayerMoney(i, assalt, 3);
							BancoRoubando[i] = 0;
						}
						else if(BancoRoubando[i] == 4){
						    new assalt;
						    assalt = minrand(400,600);
							AddPlayerMoney(i, assalt, 3);
							BancoRoubando[i] = 0;
						}
						else if(BancoRoubando[i] == 5){
						    new assalt;
						    assalt = minrand(500,600);
							AddPlayerMoney(i, assalt, 3);
							BancoRoubando[i] = 0;
						}
						SetTimerEx("Assalto",400000,0,"d",i);
					}
				}
				if(AreaPosto[i] == 1) {
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu do POSTO.",PlayerName(i));
					writelog(msg);
				    TextDrawHideForPlayer(i,Posto);
				    AreaPosto[i] = 0;
				}
				if(AreaLCavalos[i] == 1) {
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu da LOTERIA DE CAVALOS.",PlayerName(i));
					writelog(msg);
				    TextDrawHideForPlayer(i,tdLCavalos);
				    AreaLCavalos[i] = 0;
				}
				if(AreaCustomizacao[i] == 1){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu da LOJA DE CUSTOMIZAÇÃO.",PlayerName(i));
					writelog(msg);
					TextDrawHideForPlayer(i,tdCustomizacao);
					AreaCustomizacao[i] = 0;
				}
				if(AreaForte[i] == 1){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu da ÁREA FORTE.",PlayerName(i));
					writelog(msg);
					TextDrawHideForPlayer(i,tdForte);
					AreaForte[i] = 0;
				}
				if(AreaDelegacia[i] == 1){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu da DELEGACIA.",PlayerName(i));
					writelog(msg);
					TextDrawHideForPlayer(i,tdDelegacia);
					AreaDelegacia[i] = 0;
				}
				if(AreaDeleg[i] == 1){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu da DELEGACIA.",PlayerName(i));
					writelog(msg);
				    TextDrawHideForPlayer(i,tdDelegacia);
				    AreaDeleg[i] = 0;
				}
				if(AreaHosp[i] == 1){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu do HOSPITAL.",PlayerName(i));
					writelog(msg);
				    TextDrawHideForPlayer(i,Hospital);
				    AreaHosp[i] = 0;
				    Curandome[i] = 0;
					if(CheckpointStatus[i] == HOSPITAL){
						DisablePlayerCheckpoint(i);
					    CheckpointStatus[i] = NONE;
					}
				}
				if(AreaPesca[i] == 1) {
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu da ÁREA DE PESCA.",PlayerName(i));
					writelog(msg);
				    TextDrawHideForPlayer(i,tdPesca);
				    AreaPesca[i] = 0;
					if(PescaInProgress[i] == 1){
		    			SendClientMessage(i,COLOR_PESCADOR,"Você tem 10 segundos para voltar a área de pesca se não a pesca será cancelada.");
		    			avisado[i]=SetTimerEx("TerminarCarregamento",10000,0,"d",i);
				    }
				}
				if(AreaCoopPesca[i] == 1) {
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu da COOPERATIVA DE PESCA.",PlayerName(i));
					writelog(msg);
				    TextDrawHideForPlayer(i,tdCoopPesca);
				    AreaCoopPesca[i] = 0;
				}
				if(AreaHotel[i] == 1){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu de um HOTEL.",PlayerName(i));
					writelog(msg);
					TextDrawHideForPlayer(i,tdHotel);
					AreaHotel[i] = 0;
				}
			    if(PedreiraCarga[i] == 1){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu da PEDREIRA.",PlayerName(i));
					writelog(msg);
			        TextDrawHideForPlayer(i,tdPdCarga);
			   		PedreiraCarga[i] = 0;
				}
				if(Construcao[i] == 1){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu da CONSTRUÇÃO.",PlayerName(i));
					writelog(msg);
					TextDrawHideForPlayer(i,tdConstrucao);
			    	Construcao[i] = 0;
				}
				if(AreaCreditos[i] == 1){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu da LOJA 24/7.",PlayerName(i));
					writelog(msg);
				    TextDrawHideForPlayer(i,td247);
				    AreaCreditos[i] = 0;
				}
				if(AreaCarga[i] == 1){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu da ÁREA DE CARGA.",PlayerName(i));
					writelog(msg);
				    TextDrawHideForPlayer(i,tdAreaCarga);
				    AreaCarga[i] = 0;
				}
				if(AreaStrip[i] == 1){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu da ÁREA DE STRIP.",PlayerName(i));
					writelog(msg);
			        TextDrawHideForPlayer(i,tdStrip);
			        DisablePlayerCheckpoint(i);
			        CheckpointStatus[i] = NONE;
			        AreaStrip[i] = 0;
				}
				if(AreaBombShop[i] == 1) {
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu da LOJA DE BOMBAS.",PlayerName(i));
					writelog(msg);
				    AreaBombShop[i] = 0;
				}
				if(PizzariaCar[i] == 1){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu da PIZZARIA.",PlayerName(i));
					writelog(msg);
			        TextDrawHideForPlayer(i,tdPizzaria);
			        PizzariaCar[i] = 0;
				}
				if(AreaSorveteria[i] == 1){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu da SORVETERIA.",PlayerName(i));
					writelog(msg);
			        TextDrawHideForPlayer(i,tdSorveteria);
			        AreaSorveteria[i] = 0;
			    }
			    if(AreaBar[i] == 1){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu do BAR.",PlayerName(i));
					writelog(msg);
			        TextDrawHideForPlayer(i,tdBar);
			        AreaBar[i] = 0;
			        DisablePlayerCheckpoint(i);
			        CheckpointStatus[i] = NONE;
			    }
			    if(AreaBanheiro[i] == 1 || AreaBanheiro[i] == 2){
	                new msg[256];
					format(msg,sizeof(msg),"SERVIDOR: %s saiu do BANHEIRO.",PlayerName(i));
					writelog(msg);
			        TextDrawHideForPlayer(i,tdBanheiro);
			        AreaChuveiro[i] = 0;
			        AreaBanheiro[i] = 0;
				}
			}
		}
	}
}
public ApostasdeCavalos(){
	new string[256];
    if(TemJogador == 1){
        ComecouCLoteria = 1;
        new largada = minrand(1,8);
		SendClientMessageToAll(COLOR_PURPLE, "    ");
		format(string, sizeof(string), "%s larga na frente!",CavalosLargada[largada]);
		SendClientMessageToAll(COLOR_WHITE, string);
		SendClientMessageToAll(COLOR_PURPLE, "    ");
		cavalin[0] = largada;
		TemJogador = 0;
		SetTimer("Intermediaria2",5000,0);
	}
}
public Intermediaria2(){
	new rand = random(2);
	new string[256];
	if(rand == 0){
		format(string, sizeof(string), "%s continua na frente... e chegua aos 200 metros da prova.",CavalosLargada[cavalin[0]]);
		SendClientMessageToAll(COLOR_WHITE, string);
		SetTimer("Intermediaria3",5000,0);
		return 1;
	}
	if(rand == 1){
	    new largada2 = minrand(1,8);
	    while(cavalin[0] == largada2){
	    	largada2 = minrand(1,8);
		}
		format(string, sizeof(string), "%s ultrapassa %s e agora assume a liderança",CavalosLargada[largada2],CavalosLargada[cavalin[0]]);
		SendClientMessageToAll(COLOR_WHITE, string);
		cavalin[0] = largada2;
		SetTimer("Intermediaria3",5000,0);
		return 1;
	}
	return 1;
}
public Intermediaria3(){
	new rand = random(2);
	new largada2 = minrand(1,8);
	while(cavalin[0] == largada2){
	    largada2 = minrand(1,8);
	}
	new string[256];
	if(rand == 0){
	    if(largada2 == cavalin[0]){
			format(string, sizeof(string), "%s continua mandando e continua isolado aos 500 metros da prova.",CavalosLargada[cavalin[0]]);
			SendClientMessageToAll(COLOR_WHITE, string);
			SetTimer("Intermediaria4",5000,0);
			return 1;
		} else {
			format(string, sizeof(string), "%s ainda tem corredores perto dele e chega aos 500 metros da prova em primeiro.",CavalosLargada[cavalin[0]]);
			SendClientMessageToAll(COLOR_WHITE, string);
			cavalin[0] = largada2;
			SetTimer("Intermediaria4",5000,0);
			return 1;
		}
	}
	if(rand == 1){
	    if(largada2 != cavalin[0]){
			format(string, sizeof(string), "Espere Espere! %s foi ultrapassado por %s perto da linha de chegada aos 500 metros da prova.",CavalosLargada[cavalin[0]],CavalosLargada[largada2]);
			SendClientMessageToAll(COLOR_WHITE, string);
			cavalin[0] = largada2;
			SetTimer("Intermediaria4",5000,0);
			return 1;
		} else {
			format(string, sizeof(string), "%s não conseguiu segurar por muito tempo e foi ultrapassado por %s",CavalosLargada[cavalin[0]], CavalosLargada[largada2]);
			SendClientMessageToAll(COLOR_WHITE, string);
			cavalin[0] = largada2;
			SetTimer("Intermediaria4",5000,0);
			return 1;
		}
	}
	return 1;
}
public Intermediaria4(){
	new rand = random(2);
	new string[256];
 	SendClientMessageToAll(COLOR_WHITE, "A corrida vai chegando ao fim com seus 100 últimos metros.");
	if(rand == 0){
		format(string, sizeof(string), "Olhe Olhe!!! %s segue precionado no final últimos metros e....!",CavalosLargada[cavalin[0]]);
		SendClientMessageToAll(COLOR_WHITE, string);
		Pressionado = 1;
		cavalin[1] = Pressionado;
		SetTimer("Intermediaria5",5000,0);
		return 1;
	}
	if(rand == 1){
		format(string, sizeof(string), "%s seque tranquilo e isolado vai cruzar em primeiro e",CavalosLargada[cavalin[0]]);
		SendClientMessageToAll(COLOR_WHITE, string);
		SetTimer("Intermediaria5",5000,0);
		return 1;
	}
	return 1;
}
public Intermediaria5(){
	new cavalos = minrand(1,8);
	new string[256];
	new grana;
	while(cavalos == cavalin[0]){
	    cavalos = minrand(1,8);
	}
	if(Pressionado == 1){
	    new rand = random(5);
		if(rand == 0 || rand == 1 || rand == 2 || rand == 3){
			format(string, sizeof(string), "Pressionado %s perde a liderança para %s que acaba por ganhar a corrida.",CavalosLargada[cavalin[0]],CavalosLargada[cavalos]);
			SendClientMessageToAll(COLOR_WHITE, string);
			format(string, sizeof(string), "~r~%s ~w~VENCEU!",CavalosLargada[cavalos]);
	        GameTextForAll(string,3000,0);
	        for(new i=0; i<SLOTS2; i++){
	            if(CPlayerDentro[i] == true){
					if(CavaloApostado[i] == cavalos){
					    grana = ValorApostado[i]*4;
					    CPlayerDentro[i] = false;
					    AddPlayerMoney(i,grana,10);
					    SendClientMessage(i, COLOR_GREEN, "Muito bem! Você apostou no cavalo certo e recebeu $10000!");
						CavaloApostado[i] = 0;
						ValorApostado[i] = 0;
					}
					else{
					    SendClientMessage(i, COLOR_GRAY, "Você apostou no cavalo errado! Se quiser pode tentar apostar novamente.");
					    CavaloApostado[i] = 0;
					}
				}
			}
		} else if(rand == 4){
			format(string, sizeof(string), "Mesmo pressionado %s consegue ganhar a corrida!",CavalosLargada[cavalin[0]]);
			SendClientMessageToAll(COLOR_WHITE, string);
			format(string, sizeof(string), "~r~%s ~w~VENCEU!",CavalosLargada[cavalin[0]]);
	        GameTextForAll(string,3000,0);
	        for(new i=0; i<SLOTS2; i++){
	            if(CPlayerDentro[i] == true){
					if(CavaloApostado[i] == cavalin[0]){
					    grana = ValorApostado[i]*4;
					    CPlayerDentro[i] = false;
					    AddPlayerMoney(i,grana,10);
					    SendClientMessage(i, COLOR_GREEN, "Muito bem! Você apostou no cavalo certo e recebeu $10000!");
						CavaloApostado[i] = 0;
						ValorApostado[i] = 0;
					}
					else{
					    SendClientMessage(i, COLOR_GRAY, "Você apostou no cavalo errado! Se quiser pode tentar apostar novamente.");
					    CavaloApostado[i] = 0;
					}
				}
			}
		}
	} else {
        new rand = random(5);
		if(rand == 0 || rand == 1 || rand == 2 || rand == 3){
			format(string, sizeof(string), "Isolado e seguro %s vence a corrida!",CavalosLargada[cavalin[0]]);
			SendClientMessageToAll(COLOR_WHITE, string);
			format(string, sizeof(string), "~r~%s ~w~VENCEU!",CavalosLargada[cavalin[0]]);
	        GameTextForAll(string,3000,0);
	        for(new i=0; i<SLOTS2; i++){
	            if(CPlayerDentro[i] == true){
					CPlayerDentro[i] = false;
					if(CavaloApostado[i] == cavalin[0]){
					    grana = ValorApostado[i]*4;
					    AddPlayerMoney(i,grana,10);
					    SendClientMessage(i, COLOR_GREEN, "Muito bem! Você apostou no cavalo certo e recebeu $10000!");
						CavaloApostado[i] = 0;
						ValorApostado[i] = 0;
					}
					else{
					    SendClientMessage(i, COLOR_GRAY, "Você apostou no cavalo errado! Se quiser pode tentar apostar novamente.");
					    CavaloApostado[i] = 0;
					}
				}
			}
			return 1;
		} else if(rand == 4){
			format(string, sizeof(string), "%s Cantou vitória antes do tempo!!! E %s acabou ultrapassando e vencendo a corrida.",CavalosLargada[cavalin[0]],CavalosLargada[cavalos]);
			SendClientMessageToAll(COLOR_WHITE, string);
			format(string, sizeof(string), "~r~%s ~w~VENCEU!",CavalosLargada[cavalos]);
	        GameTextForAll(string,3000,0);
	        for(new i=0; i<SLOTS2; i++){
	            if(CPlayerDentro[i] == true){
					CPlayerDentro[i] = false;
					if(CavaloApostado[i] == cavalos){
					    grana = ValorApostado[i]*4;
					    AddPlayerMoney(i,grana,10);
					    SendClientMessage(i, COLOR_GREEN, "Muito bem! Você apostou no cavalo certo e recebeu $10000!");
						CavaloApostado[i] = 0;
						ValorApostado[i] = 0;
					}
					else{
					    SendClientMessage(i, COLOR_GRAY, "Você apostou no cavalo errado! Se quiser pode tentar apostar novamente.");
					    CavaloApostado[i] = 0;
					}
				}
			}
		}
	}
	TemJogador = 0;
	ComecouCLoteria = 0;
	return 1;
}
public LoteriaComeco()
{
	new rand1, rand2;
	new loteria;
	rand1 = minrand(1,21);
	rand2 = minrand(1,21);
	while(rand2 == rand1){
		rand2 = minrand(1,21);
	}
	new string[256];
	SendClientMessageToAll(COLOR_PURPLE, "    ");
	format(string, sizeof(string), "Os Números da Loteria sorteados SÃO ....... Nº1 = %d , Nº2 = %d", rand1, rand2);
	SendClientMessageToAll(COLOR_WHITE, string);
	SendClientMessageToAll(COLOR_PURPLE, "    ");
	for(new i = 0; i < SLOTS2; i++)
	{
	    if(IsPlayerConnected(i) && PlayerDentro[i])
		{
			for(new j = 0; j < 2; j++)
			{
			    if(Aposta[i][j] == rand1 || Aposta[i][j] == rand2)
				{
			        Acertos[i]++;
			    }
			    Aposta[i][j]=0;
			}
			if(Acertos[i] > 1){
			    loteria = GranaTotal();
			    SendClientMessageToAll(COLOR_ORANGE, "   ");
				format(string, sizeof(string),"Loteria Notícias: %s GANHOU $%d na Loteria! Parabéns!! Tente você também!",PlayerName(i),loteria);
				SendClientMessageToAll(COLOR_ORANGE,string);
				SendClientMessageToAll(COLOR_ORANGE, "   ");
				GameTextForPlayer(i,"~r~$ PARABENS !!! $",5000,5);
				AddPlayerMoney(i,loteria,10);
			    Acertos[i]=0;
			    PlayerDentro[i]=false;
			}else{
				SendClientMessage(i,COLOR_GREEN, "Seu palpite estava errado, mas você pode jogar novamente, basta ir na loteria e digitar:");
				SendClientMessage(i,COLOR_WHITE, "/loteria [1-20] [1-20]");
				PlayerDentro[i]=false;
			}
	   	 }
	}
}

stock GranaTotal()
{
	new randnum = random(LoteriaMax-LoteriaMin);
	return randnum+LoteriaMin;
}
public Assalto(playerid){
	TempoAssalto[playerid]=0;
    SendClientMessage(playerid,COLOR_TRAFICANTE, "A poeira baixou, já é possível que você realize outro Assalto.");
}
public AssaltandoBanco(playerid){
	if(AreaBanco[playerid] == 1){
		new rand = random(3);
		new string[256];
		if(rand == 1 || rand == 2){
			if(pickupbancoselecionada[playerid] == 1){
				format(string,sizeof(string),"[CENTRAL] TODAS AS UNIDADES! [Crime: Assalto a Banco] [Local: Banco de Litle Mexico] [Testemunha: Alarme do Banco], a indícios que o suspeito ainda está lá.",PlayerName(playerid));
				SendClientMessageToAll(COLOR_COP_SWAT, string);
		 	}
		   	else if(pickupbancoselecionada[playerid] == 2){
				format(string,sizeof(string),"[CENTRAL] TODAS AS UNIDADES! [Crime: Assalto a Banco] [Local: Banco de Temple] [Testemunha: Alarme do Banco], a indícios que o suspeito ainda está lá.",PlayerName(playerid));
				SendClientMessageToAll(COLOR_COP_SWAT, string);
			}
			else if(pickupbancoselecionada[playerid] == 3){
				format(string,sizeof(string),"[CENTRAL] TODAS AS UNIDADES! [Crime: Assalto a Banco] [Local: Banco de Rodeo] [Testemunha: Alarme do Banco], a indícios que o suspeito ainda está lá.",PlayerName(playerid));
				SendClientMessageToAll(COLOR_COP_SWAT, string);
			}
		   	else if(pickupbancoselecionada[playerid] == 4){
				format(string,sizeof(string),"[CENTRAL] TODAS AS UNIDADES! [Crime: Assalto a Banco] [Local: Banco de East Beach] [Testemunha: Alarme do Banco], a indícios que o suspeito ainda está lá.",PlayerName(playerid));
				SendClientMessageToAll(COLOR_COP_SWAT, string);
			}
			if(AssaltPlayer[playerid] == 0){
			    if(Camuflado[playerid] == 1){
					SendClientMessageToAll(COLOR_ROSA,"New Paper's Life:");
				    SendClientMessageToAll(COLOR_WHITE, "[JORNAL] O Alarme de algum banco foi acionado, a polícia foi avisada.");
					format(string, sizeof(string), "Principal suspeito: Desconhecido Camuflado.",PlayerName(playerid));
					SendClientMessageToAll(COLOR_JUIZ, string);
					SendClientMessage(playerid, COLOR_ASSALTANTE, "Saia daí o mais rápido possível, a polícia pode estar chegando.");
	                AssaltPlayer[playerid] = 1;
	            } else {
					SendClientMessageToAll(COLOR_ROSA,"New Paper's Life:");
				    SendClientMessageToAll(COLOR_WHITE, "[JORNAL] O Alarme de algum banco foi acionado, a polícia foi avisada.");
					format(string, sizeof(string), "Principal suspeito: %s.",PlayerName(playerid));
					SendClientMessageToAll(COLOR_JUIZ, string);
					SendClientMessage(playerid, COLOR_ASSALTANTE, "Saia daí o mais rápido possível, a polícia pode estar chegando.");
	                AssaltPlayer[playerid] = 1;
	             }
			}
		}
		if(BancoRoubando[playerid] == 1){
		    SendClientMessage(playerid, COLOR_WHITE, "Você já tem mais de $100 roubados.");
		}
		else if(BancoRoubando[playerid] == 2){
		    SendClientMessage(playerid, COLOR_WHITE, "Você já tem mais de $200 roubados.");
		}
		else if(BancoRoubando[playerid] == 3){
		    SendClientMessage(playerid, COLOR_WHITE, "Você já tem mais de $300 roubados.");
		}
		else if(BancoRoubando[playerid] == 4){
		    SendClientMessage(playerid, COLOR_WHITE, "Você já tem mais de $400 roubados.");
		}
		else if(BancoRoubando[playerid] == 5){
		    SendClientMessage(playerid, COLOR_WHITE, "Você já tem mais de $500 roubados.");
		}
		else if(BancoRoubando[playerid] == 6){
		    new assalt;
		    assalt = minrand(600,1300);
			AddPlayerMoney(playerid, assalt, 3);
			BancoRoubando[playerid] = 0;
			SendClientMessage(playerid, COLOR_ASSALTANTE, "Você roubou um dos caixas, vamo vamo VÁ EMBORA!");
			SendClientMessage(playerid, COLOR_ASSALTANTE, "Antes que a polícia apareça.");
			AcrescentarExPoints(playerid,1);
			if(pickupbancoselecionada[playerid] == 1){
				SetPlayerInterior(playerid,0);
			    SetPlayerFacingAngle(playerid,260.9407);
			    SetPlayerPos(playerid,1771.7144,-1655.8201,14.4236);
		 	}
		   	else if(pickupbancoselecionada[playerid] == 2){
				SetPlayerInterior(playerid,0);
			    SetPlayerFacingAngle(playerid,260.9407);
			    SetPlayerPos(playerid,1386.0540,-1015.7602,26.6676);
		   	}
			else if(pickupbancoselecionada[playerid] == 3){
				SetPlayerInterior(playerid,0);
			    SetPlayerFacingAngle(playerid,260.9407);
			    SetPlayerPos(playerid,419.7245,-1428.6298,32.4797);
		    }
		   	else if(pickupbancoselecionada[playerid] == 4){
				SetPlayerInterior(playerid,0);
		    	SetPlayerFacingAngle(playerid,260.9407);
		    	SetPlayerPos(playerid,2862.3201,-1440.2727,10.9410);
		   	}
		}
		SetTimerEx("AssaltandoBanco",10000,0,"d",playerid);
        BancoRoubando[playerid] = BancoRoubando[playerid] + 1;
	}
}
public Conversa21b(playerid){
	  SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Ok senhor!");
	  SetTimerEx("Conversa22bb",3000,0,"d",playerid);
}
public Conversa22bb(playerid){
      SetPlayerPos(playerid,1702.4198,1480.2014,10.7774);
	  SetPlayerFacingAngle(playerid,69.6255);
      SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Chegamos senhor!");
      SetTimerEx("Conversa22b",3000,0,"d",playerid);
}
public Conversa22b(playerid){
	  SendClientMessage(playerid, COLOR_WHITE, "Bom... Tenho que te dizer uma coisa!");
	  ApplyAnimation(playerid,"PED","IDLE_CHAT",2.1,1,1,1,1,1);
	  SetTimerEx("Conversa23b",2000,0,"d",playerid);
}
public Conversa23b(playerid){
	  SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Sim senhor!");
	  SetTimerEx("Conversa24b",2000,0,"d",playerid);
}
public Conversa24b(playerid){
	  SendClientMessage(playerid, COLOR_WHITE, "Já que vou para Los Santos! Terei que demiti-lo...");
      ApplyAnimation(playerid,"PED","IDLE_CHAT",2.1,1,1,1,1,1);
	  SetTimerEx("Conversa25b",2500,0,"d",playerid);
}
public PodeTomar(playerid){
	SendClientMessage(playerid, COLOR_PESCADOR, "Você está curado!");
    GameTextForPlayer(playerid,"~w~Saudavel",3000,0);
   	SendPlayerMessageToPlayer(playerid, playerid, "Ah....");
   	JaPodeTomarRemed[playerid] = 0;
   	pStats[playerid][Higiene] += 150;
	pStats[playerid][Micose] = 0;
	SendClientMessage(playerid, COLOR_WHITE, "Agora cuide de sua higiene pessoal...");
}
public AumentarHigiene(playerid,pontos){
	if(IsPlayerConnected(playerid) && fexist(PlayerFile(PlayerName(playerid)))){
	    new string[256];
	    if(pStats[playerid][Higiene] + pontos < 500) {
	        pStats[playerid][Higiene] += pontos;
			format(string,sizeof(string),"Seu higiene foi aumentado em %d pontos! Agora você deve estar se sentido mais limpo...",pontos);
			SendClientMessage(playerid, COLOR_GREEN, string);
			format(string,sizeof(string),"Seu higiene: %d",pStats[playerid][Higiene]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		else{
		    pStats[playerid][Higiene] = 500;
			SendClientMessage(playerid, COLOR_GREEN, "Seu higiene está completo, você está até brilhando, não se assuste, foi só força de expressão! ^^");
		}
	}
}
public DiminuirHigiene(playerid,pontos){
	if(fexist(PlayerFile(PlayerName(playerid)))){
		if(pStats[playerid][Micose] == 0 && Logado[playerid] == 1){
		    pStats[playerid][Higiene]--;
			if(pStats[playerid][Higiene] >= 20 && pStats[playerid][Higiene] <= 30){
				SendClientMessage(playerid, COLOR_RED2, "Sua higiene está baixa, você precisa usar o banheiro.");
			} else if(pStats[playerid][Higiene] >= 10 && pStats[playerid][Higiene] <= 19){
				SendClientMessage(playerid, COLOR_RED2, "Você precisa usar o banheiro imediatamente! Sua higiene está muito baixa, poderá contrair uma doença.");
			} else if(pStats[playerid][Higiene] <= 0){
			    pStats[playerid][Higiene] = 0;
			    pStats[playerid][Micose] = 1;
				SetPlayerWeather(playerid,-37);
				SetTimerEx("EstouMicosado",30000,0,"d",playerid);
				SendClientMessage(playerid, COLOR_RED2, "Você não cuidou de seu higiene pessoal e agora pegou uma coceira ( micose ), chame um paramédico para lhe passar os medicamentos.");
				SendClientMessage(playerid, COLOR_RED2, "ou vá a um hospital comprar os medicamentos.");
				if(pStats[playerid][DosesRemed] <= 1){
				    pStats[playerid][DosesRemed]++;
    			}
			}
		}
	}
}

public EstouMicosado(playerid){
	new Float:life;
	GetPlayerHealth(playerid,life);
	if(pStats[playerid][Micose] == 1){
		new rand = random(4);
		if(rand == 0){
	    	SendPlayerMessageToPlayer(playerid, playerid, "Coceira... Vou acabar ficando só a carne viva.");
		}
		else if(rand == 1){
		    SendPlayerMessageToPlayer(playerid, playerid, "Não aguento mais! Preciso me consultar.");
		}
		else if(rand == 2){
		    SendPlayerMessageToPlayer(playerid, playerid, "AHHHHHHHHHHHHHHHHHHHHH SOCORRO!");
		}
		else if(rand == 3){
		    SendPlayerMessageToPlayer(playerid, playerid, "AH MEU DEUS! Que coceira, tenho que me consultar imediatamente.");
		}
	   	GameTextForPlayer(playerid,"~r~Cuide-~w~se",3000,0);
	   	SetPlayerHealth(playerid,life-2);
	   	SetPlayerWeather(playerid,9);
	   	SetTimerEx("PararWeather",12000,0,"d",playerid);
     	SetTimerEx("LimparAnim",5000,0,"d",playerid);
	   	SetTimerEx("EstouMicosado",180000,0,"d",playerid);
	}
}
public PararWeather(playerid) SetPlayerWeather(playerid,weatherprevisao);
public LimparAnim(playerid) { if(!IsPlayerInAnyVehicle(playerid)) { ClearAnimations(playerid); } }
public ParouDeMijar(playerid){
	TogglePlayerControllable(playerid,1);
	ClearAnimations(playerid);
	SendClientMessage(playerid, COLOR_WHITE, "Zip...");
	AcabeiDeMijar[playerid] = 1;
	Mijando[playerid] = 0;
	AumentarHigiene(playerid,25);
	SetTimerEx("Denovo",360000,0,"d",playerid);
}
public EscovarDentes(playerid){
	AumentarHigiene(playerid,30);
	TogglePlayerControllable(playerid,1);
	SendClientMessage(playerid, COLOR_AZUL2, "Dentes escovados...");
}
public EscovarDenovo(playerid) EscoveiDentes[playerid] = 0;
public PararBanho(playerid){
	TogglePlayerControllable(playerid,1);
	ClearAnimations(playerid);
	SendClientMessage(playerid, COLOR_WHITE, "Novo em Folha...");
	TomeiBanho[playerid] = 0;
	AumentarHigiene(playerid,70);
	SetTimerEx("Denovo",460000,0,"d",playerid);
}
public Denovo(playerid){
    AcabeiDeMijar[playerid] = 0;
    TomeiBanho[playerid] = 0;
}
public Conversa25b(playerid){
	  SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Pois é! Eu entendo senhor!");
	  SetTimerEx("Conversa26b",2000,0,"d",playerid);
}
public Conversa26b(playerid){
	  SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Seu amigo Mark me ofereceu um emprego em Liberty City");
	  SetTimerEx("Conversa27b",2500,0,"d",playerid);
}
public Conversa27b(playerid){
	  SendClientMessage(playerid, COLOR_WHITE, "Ohhh! O Mark está indo para Liberty City? Ele nem me contou!");
      ApplyAnimation(playerid,"PED","IDLE_CHAT",2.1,1,1,1,1,1);
	  SetTimerEx("Conversa28b",3000,0,"d",playerid);
}
public Conversa28b(playerid){
	  SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Pois é senhor! Estou indo para lá...");
	  SetTimerEx("Conversa29b",2500,0,"d",playerid);
}
public Conversa29b(playerid){
	  SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Vou partir amanhã cedo da viagem e chegarei lá à noite...");
	  SetTimerEx("Conversa21c",2500,0,"d",playerid);
}
public Conversa21c(playerid){
	  SendClientMessage(playerid, COLOR_WHITE, "Hum... Aqui está o seu pagamento! Adeus...");
	  ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,1,1);
	  SetTimerEx("Conversa22c",2500,0,"d",playerid);
}
public Conversa22c(playerid){
	  SendClientMessage(playerid, COLOR_MOTORISTA_PARTICULAR, "Adeus senhor!");
	  SetTimerEx("Conversa23c",2000,0,"d",playerid);
}
public Conversa23c(playerid){
	  TogglePlayerControllable(playerid,1);
      SendClientMessage(playerid, COLOR_JUIZ, "Vá dentro do aeroporto pegar sua passagem!");
      SetPlayerCheckpoint(playerid,1673.8569,1448.1935,10.7842,3.0);
      CheckpointStatus[playerid] = PEGAR_PASSAGEM;
}
public Conversa23cc(playerid){
	  SendClientMessage(playerid, COLOR_ORANGE, "Boa tarde senhor! Em que posso ajuda-lo?");
	  SetTimerEx("Conversa24c",2000,0,"d",playerid);
}
public Conversa24c(playerid){
      SendClientMessage(playerid, COLOR_WHITE, "Boa tarde! Vim aqui pegar uma passagem para Los Santos que reservei, das 1:00 até às 4:00");
      ApplyAnimation(playerid,"PED","IDLE_CHAT",2.1,1,1,1,1,1);
      SetTimerEx("Conversa25c",2000,0,"d",playerid);
}
public Conversa25c(playerid){
	  SendClientMessage(playerid, COLOR_ORANGE, "Ahhh sim... Aqui está sua passagem! São $500");
	  SetTimerEx("Conversa26c",2000,0,"d",playerid);
}
public Conversa26c(playerid){
	  ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,1,1);
	  SendClientMessage(playerid, COLOR_WHITE, "Aqui está o dinheiro!");
	  SetTimerEx("Conversa27c",2500,0,"d",playerid);
}
public Conversa27c(playerid){
	  ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,1,1);
	  SendClientMessage(playerid, COLOR_ORANGE, "Obrigado pela prefêrencia senhor! Boa viagem!");
	  SetTimerEx("Conversa28c",3500,0,"d",playerid);
}
public Conversa28c(playerid){
      TogglePlayerControllable(playerid, 1);
   	  SetPlayerInterior(playerid,1);
	  SetPlayerPos(playerid, 2.384830,33.103397,1199.849976);
	  SendClientMessage(playerid, COLOR_ORANGE, "A viagem vai demorar um pouco portanto se acomode bem em nosso avião!");
	  SetTimerEx("Conversa29c",4000,0,"d",playerid);
}
public Conversa29c(playerid){
	  SendClientMessage(playerid, COLOR_WHITE, "Vou ligar para o Mark para ver o que ele anda aprontando!");
	  SetTimerEx("AcaoEspecial",2000,0,"dd",playerid,SPECIAL_ACTION_USECELLPHONE);
	  SetTimerEx("Conversa21d",5000,0,"d",playerid);
}
public Conversa21d(playerid){
	  SendClientMessage(playerid, COLOR_TURQUESA, "Mark Falando!");
      SetTimerEx("Conversa22d",2000,0,"d",playerid);
}
public Conversa22d(playerid){
	  SendClientMessage(playerid, COLOR_WHITE, "Eai Mark!");
      SetTimerEx("Conversa23d",2000,0,"d",playerid);
}
public Conversa23d(playerid){
	  SendClientMessage(playerid, COLOR_TURQUESA, "Opa! Amigo, como vai?");
      SetTimerEx("Conversa24d",2500,0,"d",playerid);
}
public Conversa24d(playerid){
	  SendClientMessage(playerid, COLOR_WHITE, "Vou bem! Fiquei sabendo que você está indo para Liberty City!");
      SetTimerEx("Conversa25d",3000,0,"d",playerid);
}
public Conversa25d(playerid){
	  SendClientMessage(playerid, COLOR_TURQUESA, "Sim vou! Meu primo vai abrir uma empresa de limosines lá e me pediu pra administrar 20 por cento dela");
      SetTimerEx("Conversa25dd",4000,0,"d",playerid);
}
public Conversa25dd(playerid){
      SendClientMessage(playerid, COLOR_TURQUESA, "Aí eu aceitei! E contratei seu motorista pra ver se ele queria, agora ele me ligou e disse que aceita o emprego");
	  SetTimerEx("Conversa26d",4000,0,"d",playerid);
}
public Conversa26d(playerid){
	  SendClientMessage(playerid, COLOR_WHITE, "Estou indo para Los Santos! Começar uma nova vida... Las Venturas está muito chato!");
	  SetTimerEx("Conversa27d",3000,0,"d",playerid);
}
public Conversa27d(playerid){
      SendClientMessage(playerid, COLOR_TURQUESA, "Pois é amigo! Nunca mais vamos nos rever... Adeus cara agora vo ter que desligar o celular");
	  SetTimerEx("Conversa28d",4000,0,"d",playerid);
}
public Conversa28d(playerid){
      SendClientMessage(playerid, COLOR_WHITE, "Adeus!");
      SetTimerEx("AcaoEspecial",1000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	  SetTimerEx("Conversa29d",10000,0,"d",playerid);
}
public ConversaB1(playerid){
    SendClientMessage(playerid, COLOR_WHITE, "Exatamente...");
    SetTimerEx("ConversaB2",3000,0,"d",playerid);
}
public ConversaB2(playerid){
    SendClientMessage(playerid, COLOR_GRAY, "Tá tudo aí?");
    SetTimerEx("ConversaB3",3000,0,"d",playerid);
}
public ConversaB3(playerid){
   	SendClientMessage(playerid, COLOR_WHITE, "Acho que sim...");
    SetTimerEx("ConversaB4",3000,0,"d",playerid);
}
public ConversaB4(playerid){
   	SendClientMessage(playerid, COLOR_GRAY, "Não abriu ele não né porra?");
    SetTimerEx("ConversaB5",3000,0,"d",playerid);
}
public ConversaB5(playerid){
   	SendClientMessage(playerid, COLOR_WHITE, "Nem cherei!");
    SetTimerEx("ConversaB6",3000,0,"d",playerid);
}
public ConversaB6(playerid){
    SendClientMessage(playerid, COLOR_WHITE, "Toma...");
    SetTimerEx("ConversaB4b",3000,0,"d",playerid);
}
public ConversaB4b(playerid){
    SendClientMessage(playerid, COLOR_GRAY, "Já mandei depositarem a sua grana...");
    SendClientMessage(playerid, COLOR_GRAY, "Agora pegue a porra do sabre e saiá dessa cidade! Tem roupas no carro.");
    SetTimerEx("ConversaB5b",3000,0,"d",playerid);
}
public ConversaB5b(playerid){
	TogglePlayerControllable(playerid,1);
    SendClientMessage(playerid, COLOR_JUIZ, "Vá até o aeroporto...");
    SetPlayerCheckpoint(playerid, -1408.6481,-299.2098,14.1484, 2.0);
    SetTimerEx("ConversaRoupa",15000,0,"d",playerid);
    CheckpointStatus[playerid] = AERO;
}
public ConversaRoupa(playerid){
	pStats[playerid][Skin] = 250;
	SetPlayerSkin(playerid,250);
}
public Conversa29d(playerid){
      new Float:X = 1685.4244;
	  new Float:Y = -2333.4529;
	  new Float:Z = 13.5469;
	  new Float:ang = 360;
	  pStats[playerid][SpawnPosX] = X;
	  pStats[playerid][SpawnPosY] = Y;
	  pStats[playerid][SpawnPosZ] = Z;
	  pStats[playerid][SpawnPosAng] = ang;
      SetPlayerPos(playerid,1685.4244,-2333.4529,13.5469);
      SetPlayerInterior(playerid,0);
      SetPlayerFacingAngle(playerid,360);
      SendClientMessage(playerid, COLOR_WHITE, "Finalmente... Los Santos! Meu novo lar.");
      SetTimerEx("Conversa21e",3000,0,"d",playerid);
}
public Conversa21e(playerid){
	SetPlayerSkin(playerid,186);
    SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
    SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
    SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
    SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
    SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
    SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
    SendClientMessage(playerid, COLOR_GREEN, "Você chegou em Los Santos, você pode procurar 1 Hotel");
	SendClientMessage(playerid, COLOR_JUIZ,  "Você possue $10000 no banco para começar a viver");
	SendClientMessage(playerid, COLOR_WHITE, "O radar informa aonde você possa conseguir uma profissão e comece a trabalhar");
	SendClientMessage(playerid, COLOR_ROSA,  "Antes de começar a jogar leia nossas regras. Digite /regras1 e /regras2");
	SendClientMessage(playerid, COLOR_YELLOW,"O Tutorial irá iniciar em instantes.");
	GameTextForPlayer(playerid,"~w~ Los ~g~Santos", 5000,0);
	CheckpointStatus[playerid] = AGENCIA;
	SetPlayerCheckpoint(playerid, 1310.4824,-1368.2488,13.5471, 3.0);
	PlayerPlaySound(playerid, 1186, 0.0,0.0,0.0);
	pStats[playerid][HistoriaFeita] = 1;
	pStats[playerid][Banco] = 10000;
	TogglePlayerControllable(playerid,0);
	SetTimerEx("VaiIniciar",8000,0,"d",playerid);
}
public Conversa21(playerid){
      TogglePlayerControllable(playerid,0);
      SendClientMessage(playerid, COLOR_WHITE, "Estou cansado daqui!");
	  SetTimerEx("Conversa22",2500,0,"d",playerid);
}
public Conversa22(playerid){
	  SendClientMessage(playerid, COLOR_WHITE, "Acho que vou começar a viver em San Fierro ou Los Santos!");
	  SetTimerEx("Conversa23",2500,0,"d",playerid);
}
public Conversa23(playerid){
	  SendClientMessage(playerid, COLOR_WHITE, "ÉÉÉ, vou pra Los Santos...");
	  SetTimerEx("Conversa24",5000,0,"d",playerid);
	  SetTimerEx("AcaoEspecial",2000,0,"dd",playerid,SPECIAL_ACTION_USECELLPHONE);
}
public Conversa24(playerid){
	  SendClientMessage(playerid, COLOR_ORANGE, "Aeroporto Virtual Air, boa tarde!");
	  SetTimerEx("Conversa25",3000,0,"d",playerid);
}
public Conversa25(playerid){
	  SendClientMessage(playerid, COLOR_WHITE, "Boa tarde! Eu gostaria de uma passagem para Los Santos!");
	  SetTimerEx("Conversa26",2500,0,"d",playerid);
}
public Conversa26(playerid){
	  SendClientMessage(playerid, COLOR_ORANGE, "Para Los Santos temos das 1:00 até às 4:00 e das 7:00 até às 11:00...");
	  SetTimerEx("Conversa27",2500,0,"d",playerid);
}
public Conversa27(playerid){
	  SendClientMessage(playerid, COLOR_WHITE, "Vou querer das 1:00 até às 4:00");
	  SetTimerEx("Conversa28",2500,0,"d",playerid);
}
public Conversa28(playerid){
	  SendClientMessage(playerid, COLOR_ORANGE, "Ok senhor, sua passagem foi reservada!");
	  SetTimerEx("Conversa29",2000,0,"d",playerid);
}
public Conversa29(playerid){
	  SendClientMessage(playerid, COLOR_WHITE, "Estou indo para aí imediatamente!");
	  SetTimerEx("AcaoEspecial",1000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	  TogglePlayerControllable(playerid,1);
	  SendClientMessage(playerid, COLOR_JUIZ, "Vá até seu motorista para ele lhe levar até o Aeroporto Virtual Air!");
	  DisablePlayerCheckpoint(playerid);
	  SetPlayerCheckpoint(playerid,1905.2314,2086.2603,10.8203,3.0);
	  CheckpointStatus[playerid] = CONVERSA_MOTORISTA;
}
public Conversa1(playerid){
	ApplyAnimation(playerid,"PED","IDLE_CHAT",2.1,1,1,1,1,1);
    SendClientMessage(playerid, COLOR_WHITE,"Sim, estou...");
    SetTimerEx("Conversa2",2500,0,"d",playerid);
}
public Conversa2(playerid){
    SendClientMessage(playerid, COLOR_RED2, "O local de entrega é na casa do Rick em Las Venturas.");
    SetTimerEx("Conversa3",2500,0,"d",playerid);
}
public Conversa3(playerid){
    ApplyAnimation(playerid,"PED","IDLE_CHAT",2.1,1,1,1,1,1);
	SendClientMessage(playerid, COLOR_WHITE,"Tá certo, sei aonde é.");
    SetTimerEx("Conversa3b",3500,0,"d",playerid);
}
public Conversa3b(playerid){
	SendClientMessage(playerid, COLOR_WHITE,"Porque não mostra o seu rosto?");
    SetTimerEx("Conversa4",2500,0,"d",playerid);
}
public Conversa4(playerid){
	SendClientMessage(playerid, COLOR_RED2,	"Pra que você quer ver idiota? Vá logo deixar essa droga e não pergunte nada!");
    SetTimerEx("Conversa5",4000,0,"d",playerid);
}
public Conversa5(playerid){
	ApplyAnimation(playerid,"PED","IDLE_CHAT",1.1,1,1,1,1,1);
	SendClientMessage(playerid, COLOR_WHITE, "Quanto vou receber pelo transporte?");
    SetTimerEx("Conversa6",2000,0,"d",playerid);
}
public Conversa6(playerid){
	SendClientMessage(playerid, COLOR_RED2,  "Vou mandar alguém depositar o dinheiro, AGORA VÁ!");
	DisablePlayerCheckpoint(playerid);
	SetTimerEx("Conversa7",2000,0,"d",playerid);
}
public Conversa7(playerid){
	SendClientMessage(playerid, COLOR_JUIZ, "Vá para a casa do Rick entregar o pacote, você pode chamar 1 taxi ou pegar 1 moto dos Triads, mais tem que deixar na casa dele.");
	DisablePlayerCheckpoint(playerid);
	TogglePlayerControllable(playerid,1);
	SetPlayerCheckpoint(playerid,1404.7666,1897.6353,11.4609,2.0);
	CheckpointStatus[playerid] = ENTREGANDORICK;
}
public Conversa7b(playerid){
	SendClientMessage(playerid, COLOR_JUIZ, "Rick não está em casa.");
	DisablePlayerCheckpoint(playerid);
	SetTimerEx("Conversa8",2000,0,"d",playerid);
}
public Conversa8(playerid){
	SetTimerEx("AcaoEspecial",1000,0,"dd",playerid,SPECIAL_ACTION_USECELLPHONE);
    SetTimerEx("AcaoEspecial",3000,0,"dd",playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
  	TogglePlayerControllable(playerid,1);
   	SetTimerEx("Conversa8b",1000,0,"d",playerid);
}
public Conversa8b(playerid){
    TogglePlayerControllable(playerid,0);
    SendClientMessage(playerid, COLOR_RED2, "Deixe a droga no telhado, atrás do ar-condicionado!");
   	SendClientMessage(playerid, COLOR_RED2, "Não esqueça de sair pelos fundos! IMBECIL!");
   	ApplyAnimation(playerid,"PED", "phone_out", 4.0, 0, 0, 0, 0, 0);
   	SetTimerEx("Conversa9",4000,0,"d",playerid);
}
public Conversa9(playerid){
    TogglePlayerControllable(playerid,1);
    SetPlayerCheckpoint(playerid,1409.9528,1894.3324,15.2443,1.5);
    CheckpointStatus[playerid] = TELHADO;
}
public Conversa10(playerid){
    TogglePlayerControllable(playerid,0);
    SetPlayerFacingAngle(playerid,270);
	SendClientMessage(playerid, COLOR_WHITE, "Isso não é vida! Pra que vivo nessa merda, essa vida é um verdadeiro LIXO!");
	SetTimerEx("Conversa11",3000,0,"d",playerid);
}
public Conversa11(playerid){
	SendClientMessage(playerid, COLOR_WHITE, "Quero começar algo novo, sem erros.");
    SetTimerEx("Conversa12",3000,0,"d",playerid);
}
public Conversa12(playerid){
    TogglePlayerControllable(playerid,1);
	SendClientMessage(playerid, COLOR_WHITE, "Acho que vou fazer isso mesmo.");
	SetTimerEx("Conversa12b",3000,0,"d",playerid);
}
public Conversa12b(playerid){
	SendClientMessage(playerid, COLOR_WHITE, "Vou começar uma vida nova em Los Santos.");
	SetTimerEx("Conversa13",5000,0,"d",playerid);
}
public Conversa13(playerid){
    SendClientMessage(playerid, COLOR_WHITE, "É É! VOU PRA LOS SANTOS.");
    SetPlayerCheckpoint(playerid,1673.8569,1448.1935,10.7842,3.0);
    CheckpointStatus[playerid] = AERO;
}
public Conversa14(playerid){
    TogglePlayerControllable(playerid, 1);
   	SetPlayerInterior(playerid,1);
	SetPlayerPos(playerid, 2.384830,33.103397,1199.849976);
	SendClientMessage(playerid, COLOR_PESCADOR, "Seja Bem-Vindo senhor as linhas Virtual Air.");
	SetTimerEx("Conversa14b",3000,0,"d",playerid);
}
public Conversa14b(playerid){
	SendClientMessage(playerid, COLOR_PESCADOR, "Logo estaremos pousando em Los Santos. A viagem durará cerca de 30 minutos.");
	SetTimerEx("Conversa15",3000,0,"d",playerid);
}
public Conversa15(playerid){
	SendClientMessage(playerid, COLOR_WHITE, "Obrigado...");
	SetTimerEx("Conversa16",22000,0,"d",playerid);
}
public Conversa16(playerid)
{
    new Float:X = 1685.4244;
	new Float:Y = -2333.4529;
	new Float:Z = 13.5469;
	new Float:ang = 360;
	pStats[playerid][SpawnPosX] = X;
 	pStats[playerid][SpawnPosY] = Y;
  	pStats[playerid][SpawnPosZ] = Z;
 	pStats[playerid][SpawnPosAng] = ang;
	SetPlayerPos(playerid,1685.4244,-2333.4529,13.5469);
	SetPlayerInterior(playerid,0);
	SetPlayerFacingAngle(playerid,360);
    SendClientMessage(playerid, COLOR_WHITE, "Ahhhh... estou pronto para começar a vida.");
	SetTimerEx("Conversa17",5000,0,"d",playerid);
}
public Conversa17(playerid){
    TogglePlayerControllable(playerid, 1);
    SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
    SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
    SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
    SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
    SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
    SendClientMessage(playerid, COLOR_WHITE, "-----------------------------------------------------------------------------------------------------------------------------");
    SendClientMessage(playerid, COLOR_GREEN, "Você chegou em Los Santos, você pode procurar 1 Hotel");
	SendClientMessage(playerid, COLOR_JUIZ,  "Também o dinheiro do transporte está no BANCO foram depositados $5000 dólares");
	SendClientMessage(playerid, COLOR_WHITE, "O radar informa aonde você possa conseguir uma profissão e comece a trabalhar");
	SendClientMessage(playerid, COLOR_ROSA,  "Antes de começar a jogar leia nossas regras. Digite /regras1 e /regras2");
	SendClientMessage(playerid, COLOR_YELLOW,"O Tutorial irá iniciar em instantes.");
	GameTextForPlayer(playerid,"~w~ Los ~g~Santos", 5000,0);
	CheckpointStatus[playerid] = AGENCIA;
	SetPlayerCheckpoint(playerid, 1310.4824,-1368.2488,13.5471, 3.0);
	PlayerPlaySound(playerid, 1186, 0.0,0.0,0.0);
	pStats[playerid][HistoriaFeita] = 1;
	TogglePlayerControllable(playerid,0);
	TimerTuto[playerid] = SetTimerEx("VaiIniciar",8000,0,"d",playerid);
}
public VaiIniciar(playerid){
	GameTextForPlayer(playerid,"~r~ ~n~~n~~n~~n~~n~Preste Atenco ~n~ no ~n~ Tutorial" ,3000,4);
 	TimerTuto[playerid] = SetTimerEx("Tutorial",5000,0,"d",playerid);
}
public ConversaA1(playerid){
    TogglePlayerControllable(playerid, 0);
    SendClientMessage(playerid, COLOR_PESCADOR, "Gostaria de uma passagem senhor?");
    SetTimerEx("ConversaA2",3000,0,"d",playerid);
}
public ConversaA2(playerid){
    SendClientMessage(playerid, COLOR_WHITE, "Sim gostaria, para Los Santos");
    SetTimerEx("ConversaA3",3000,0,"d",playerid);
}
public ConversaA3(playerid){
    SendClientMessage(playerid, COLOR_PESCADOR, "OK, Senhor o pagamento será realizado na sua conta");
    SetTimerEx("ConversaA4",3000,0,"d",playerid);
}
public ConversaA4(playerid){
  	ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,1,1);
    SendClientMessage(playerid, COLOR_WHITE, "Está aqui meu cartão.");
    SetTimerEx("ConversaA5",3000,0,"d",playerid);
}
public ConversaA5(playerid){
    SendClientMessage(playerid, COLOR_PESCADOR, "OK senhor aguarde... Seu avião sairá em 12 minutos");
   	SetTimerEx("Conversa14",8000,0,"d",playerid);
}
public Tutorial(playerid){
	SetPlayerVirtualWorld(playerid,playerid+1);
	GetPlayerPos(playerid,AnteriorPos[playerid][0],AnteriorPos[playerid][1],AnteriorPos[playerid][2]);
	SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "Olá, seja Bem-Vindo ao Virtual Life RPG, em seguida estaremos lhe mostrando algo a respeito do mode.");
	TogglePlayerControllable(playerid,0);
	TimerTuto[playerid] = SetTimerEx("Tutorial2",3000,0,"d",playerid);
}
public Tutorial2(playerid){
	SendClientMessage(playerid, COLOR_TUTORIAL_TITULO, "|==========================| VIRTUAL LIFE RPG |=========================|");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Primeiramente este é um RPG completo, aonde você está empenhando em viver sua vida,");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "podendo ter carros, trabalho, negócios, casa, e até mesmo uma gangue para lhe ajudar naquela hora.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Já que isso se trata de uma Vida Real vamos mostrar como é essa VIDA REAL.");
	SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "/proximotuto : para ver o próximo tutorial.");
    ParteTutorial[playerid] = 2;
}
public Tutorial3(playerid){
	SendClientMessage(playerid, COLOR_TUTORIAL_TITULO, "|==========================| VIDA |=========================|");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Terá que respeitar as leis da vida em Los Santos, sempre andar na calçada, com roupas decentes, sem armas.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Pois existe pessoas que não vivem na paz, estão sempre atrás de ..., e a Polícia de Los Santos,");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "bom, sempre ali disposta a lhe ajudar.");
	SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "/proximotuto : para ver o próximo tutorial.");
	ParteTutorial[playerid] = 3;
}
public Tutorial4(playerid){
    SetPlayerCameraPos(playerid,1539.458496,-1673.359863,16.546875);
 	SetPlayerCameraLookAt(playerid,1551.458496,-1675.059814,16.546875);
 	SetPlayerPos(playerid,1539.458496,-1673.359863,16.546875);
	SendClientMessage(playerid, COLOR_TUTORIAL_TITULO, "|==========================| DELEGACIA |=========================|");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Esta é a Delegacia de Los Santos, aonde todo dia perigosos entram e saem, você também terá que respeitar");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "as leis se não quiser um dia dormir aqui.");
	SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "/proximotuto : para ver o próximo tutorial.");
	ParteTutorial[playerid] = 4;
}
public Tutorial5(playerid){
	SendClientMessage(playerid, COLOR_TUTORIAL_TITULO, "|==========================| LEIS CIVIL |=========================|");
    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "  1º Não destruir o patrimônio público.");
    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "  2º Não dirigir em veículos que não seje seu. INCLUINDO OS DO SERVIDOR.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "  3º Não portar drogas.");
    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "  4º Proibido andar portando armas. SEM TER O PORTE DE ARMAS.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "  5º Não rejeitar a solicitação de um Oficial da Polícia.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "  6º Respeitar os jogadores.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "  7º Não andar a pé nas pistas, ande na calçada.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "  8º Não agredir outro jogador.");
	SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "/proximotuto : para ver o próximo tutorial.");
	ParteTutorial[playerid] = 5;
}
public Tutorial6(playerid){
    SetPlayerCameraPos(playerid,1310.279418,-1384.335083,16.745037);
 	SetPlayerCameraLookAt(playerid,1312.279418,-1344.035034,17.245037);
 	SetPlayerPos(playerid,1310.279418,-1384.335083,16.745037);
	SendClientMessage(playerid, COLOR_TUTORIAL_TITULO, "|==========================================| TRABALHO |======================================|");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "A vida aqui não é fácil, terá que trabalhar muito para conseguir dinheiro.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Esta é a agência de profissões, aonde você terá que pegar uma profissão.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "São 40 profissões, não poderar pegar qualquer uma, poderá pegar de acordo");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "com seu nível de trabalho, visto em /meustatus.");
    SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "/proximotuto : para ver o próximo tutorial.");
	ParteTutorial[playerid] = 6;
}
public Tutorial7(playerid){
	SendClientMessage(playerid, COLOR_TUTORIAL_TITULO, "|==========================================| EXPERIÊNCIA DE TRABALHO |==========================================|");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "O sistema de level faz com que, ao trabalhar, você receberá 1 ExPoint, uma certa quantia de ExPoints = 1 XL");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Ao ganhar essa certa quantia de ExPoints eles serão convertidos em XL, você só ganhará ExPoints se estiver no");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "seu horário de trabalho! Vide : /meuhorario");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Quando escolher uma profissão de um certo level, só poderá mudar ao ganhar mais um XL...");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Cada profissão terá um level (em XL) para poder consegui-la você deve ter essa quantidade, verifique em /profissoes");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Qualquer coisa digite /profissoes /level e /sistlevel");
    SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "/proximotuto : para ver o próximo tutorial.");
	ParteTutorial[playerid] = 7;
}
public Tutorial8(playerid){
	SendClientMessage(playerid, COLOR_TUTORIAL_TITULO, "|==========================================| GPS |===========================================|");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Para chegar aqui, use o GPS, são 53 locais para que você possa");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "locomover-se na cidade sem saber aonde é os locais.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "/locais até /locais8, /gps [ID/do/Local], /desativargps.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "ID da agência: 12.");
	SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "/proximotuto : para ver o próximo tutorial.");
	ParteTutorial[playerid] = 8;
}
public Tutorial9(playerid){
	SendClientMessage(playerid, COLOR_TUTORIAL_TITULO, "|==========================================| CHAT |===========================================|");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Suas mensagens digitadas aparecerão apenas para jogadores próximos a você!");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Você poderá gritar para falar para todos os jogadores (/g)ritar [mensagem]");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Também poderá pegar dor de garganta, e não poderá gritar até recuperar-se");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Ainda haverá como falar para as pessoas bem próximas a você (/s)ussurrar [mensagem] e");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "para as que tiverem no mesmo veículo /c [mensagem]");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Qualquer dúvida digite /sistchat");
	SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "/proximotuto : para ver o próximo tutorial.");
	ParteTutorial[playerid] = 9;
}
public Tutorial10(playerid){
	SendClientMessage(playerid, COLOR_TUTORIAL_TITULO, "|==========================================| RADAR |===========================================|");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Você não vê ninguém no radar, isto é para seguir a dinâmica da Vida Real");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "pra quando a polícia chegar, \"Você viu o suspeito tal?\", \"foi por ali\"");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Existe também uma magnífica função onde você rastreia um jogador via celular.");
    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Isso é meio complicado explicar, compre um celular para se informar mais.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Existem jogadores que nem o nick você poderá ver, pois estão com Identidade Secreta.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Você também poderá ter uma, depois lhe ensinaremos.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Ficará mais fácil se esconder da polícia talvez...");
    SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "/proximotuto : para ver o próximo tutorial.");
	ParteTutorial[playerid] = 10;
}
public Tutorial10b(playerid){
    SetPlayerCameraPos(playerid,1315.061645,-910.340698,41.241992);
 	SetPlayerCameraLookAt(playerid,1315.561645,-904.040710,40.741992);
 	SetPlayerPos(playerid,1315.061645,-910.340698,41.241992);
	SendClientMessage(playerid, COLOR_TUTORIAL_TITULO, "|==========================================| CELULAR |==========================================|");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Você já deve tá pensando, \"Nossa como vou me comunicar com alguém?\".");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Pensamos nisso, fizemos o CELULAR, terá que comprá-lo, na Loja de Utilidades");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "pelo custo que dependendo da inflação vai estar, logo em seguida, uma agenda telefônica.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "A cada 30 segundos = 1 crédito = 1 dólar, os créditos você poderá comprar na Loja também.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Se não tiver, poderá ligar a cobrar. ^^");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Ao terminio do tutorial, veja: /celularinfo e /celularinfo2.");
    SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "/proximotuto : para ver o próximo tutorial.");
	ParteTutorial[playerid] = 102;
}
public Tutorial11(playerid){
    SetPlayerCameraPos(playerid,1764.745483,-1663.840698,15.496297);
 	SetPlayerCameraLookAt(playerid,1770.745483,-1657.540649,15.496297);
 	SetPlayerPos(playerid,1764.745483,-1663.840698,15.496297);
	SendClientMessage(playerid, COLOR_TUTORIAL_TITULO, "|==========================================| BANCO |==========================================|");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Aqui no Banco você possui algumas atividades: Emprestimos, Depósitos, Aplicações, Checagem de saldo, Saques");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Emprestimos são concedidos a você dependendo do tempo da sua conta.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Aplicações para ganhar uma porcentagem na Bolsa de Valores, poderá perder ou ganhar.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Dívidas de Bancos, pagamento do empréstimo.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Além de sacar, depositar e checar seu Extrato.");
    SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "/proximotuto : para ver o próximo tutorial.");
	ParteTutorial[playerid] = 11;
}
public Tutorial12(playerid){
    SetPlayerCameraPos(playerid,2149.703857,-1373.155029,27.484375);
	SetPlayerCameraLookAt(playerid,2148.703857,-1369.854980,26.984375);
	SetPlayerPos(playerid,2149.703857,-1373.155029,27.484375);
	SendClientMessage(playerid, COLOR_TUTORIAL_TITULO, "|==========================================| CASAS I |==========================================|");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"Depois de trabalhar muito, poderá comprar uma casa dessas.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"poderá fazer uma festa particular, convidar os amigos, assistir uma TV,");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"ouvir uma musiquinha no rádio, fazer uma lagosta na cozinha,");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"pra isso terá que comprar os eletrodomésticos e a comida claro.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"E se eu não disse, a inflação também tem aqui em Los Santos... Então TRABALHE MUITO!");
    SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "/proximotuto : para ver o próximo tutorial.");
	ParteTutorial[playerid] = 12;
}
public Tutorial13(playerid){
	SendClientMessage(playerid, COLOR_TUTORIAL_TITULO, "|==========================================| CASAS II |==========================================|");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"Assim como ladrões poderão entrar na sua casa, para isso compre um sistema anti-furto.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"Poderá trancar sua casa, fazer uma festa, antes terá que contratar um BARMAN!");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"Afinal, já viu festa sem Bebida?");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"Sem falar que na porta da sua casa, TEM SEU NOME.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"Se alguem chegar na porta, para tocar a campainha ou outra coisa, seu nome aparecerá para ela.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"Casa de fulano de tal.");
    SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "/proximotuto : para ver o próximo tutorial.");
	ParteTutorial[playerid] = 13;
}
public Tutorial14(playerid){
	SendClientMessage(playerid, COLOR_TUTORIAL_TITULO, "|==========================================| CASAS III |==========================================|");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"Poderá alugar sua casa para alguém, chamar alguém para morar.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"Até fazer de sua casa um Hotel se quiser...");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"Porque na sua casa, quem manda é você.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"ISTO É O BÁSICO, Com o tempo verá mais coisas!");
    SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "/proximotuto : para ver o próximo tutorial.");
	ParteTutorial[playerid] = 14;
}
public Tutorial15(playerid){
    SetPlayerCameraPos(playerid,553.171875,-1263.433593,20.242187);
	SetPlayerCameraLookAt(playerid,555.171875,-1294.633544,17.242187);
 	SetPlayerPos(playerid,553.171875,-1263.433593,20.242187);
	SendClientMessage(playerid, COLOR_TUTORIAL_TITULO, "|==========================================| CARROS I |==========================================|");
    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"Essa é a Concecionária/Revendedora de veículos.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"Você poderá comprar um Carro do Vendedor ou aqui.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"Ao comprar seu carro poderá fazer o que bem entender, e tudo ficará salvo.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"ATENÇÃO! Pague as multas do seu veículo em dia! Para não ter ele apreendido!");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"Pois fique sabendo que existe muitos radares na cidade, prontos para multar!");
    SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "/proximotuto : para ver o próximo tutorial.");
	ParteTutorial[playerid] = 15;
}
public Tutorial16(playerid){
	SendClientMessage(playerid, COLOR_TUTORIAL_TITULO, "|==========================================| CARROS II |==========================================|");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"A placa do veículo fica com o nome que quiser, da forma que quiser.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"Componentes, você tunou? Salvou! Ficará com aquele item para sempre, a menos que...");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"Você bata seu carro e não pague o Conserto.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"Todo Carro tem sua chave, se emprestar para alguem e esse alguem não voltar,");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"poderá usar a chave reserva, mais quem garante que ela não quebra?");
    SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "/proximotuto : para ver o próximo tutorial.");
	ParteTutorial[playerid] = 16;
}
public Tutorial17(playerid){
	SendClientMessage(playerid, COLOR_TUTORIAL_TITULO, "|==========================================| CARROS III |==========================================|");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"A posição do veículo fica aonde ele ficou, você poderá mudar a posição dele.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"Ao comprar seu carro, aconselhamos comprar o Kit de Alarme/Travas. /meucarro");
    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"Todo carro tem chave, voce poderá emprestar sua chave para uma pessoa");
    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"Mais lembre caso ela não lhe entregue, é bom chamar a polícia para apreende-las.");
    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"Existe outros comandos para seu carro, com o tempo aprenderá, esses são os BÁSICOS.");
    SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"Toda modificação salva: Componentes, Placa, Cor, Dano, Alarme, Chave e o Dono.");
    SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "/proximotuto : para ver o próximo tutorial.");
	ParteTutorial[playerid] = 17;
}
public Tutorial18(playerid){
    SetPlayerCameraPos(playerid,1823.771606,-2067.966552,17.382812);
	SetPlayerCameraLookAt(playerid,1812.271606,-2067.166503,15.882812);
	SetPlayerPos(playerid,1823.771606,-2067.966552,17.382812);
	SendClientMessage(playerid, COLOR_TUTORIAL_TITULO, "|==========================================| HABILITAÇÕES |==========================================|");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"Aqui na Auto-Escola terá que fazer seu teste de habilitação, aconselhamos que antes de comprar.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"um veículo, tire sua habilitação, são 5 testes básicos para a Habilitação Terrestre.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"Caso queirar ir além existe, Habilitação Aérea e Naval, mais aí é outra História...");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,"Então é bom tirar sua carteira ");
	SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "/proximotuto : para ver o próximo tutorial.");
	ParteTutorial[playerid] = 18;
}
public Tutorial19(playerid){
    SetPlayerCameraPos(playerid,2245.725097,-1659.107788,16.284343);
	SetPlayerCameraLookAt(playerid,2242.225097,-1673.307739,15.784343);
 	SetPlayerPos(playerid,2245.725097,-1659.107788,16.284343);
	SendClientMessage(playerid, COLOR_TUTORIAL_TITULO, "|==========================================| SKINS |==========================================|");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Vamos ensinar-lhe como adquirir um skin aqui, simples, você deve saber o ID da skin");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "em primeiro lugar, depois, /skininfo [id da skin] , e veja onde ela é vendida e qual o preço!");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Essa é uma das lojas de roupas, a Binco, onde você compra skins casuais.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Cada skin tem seu preço, as mais chiquérrimas são mais caras com certeza!");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM,  "/experimentarskin [ID/da/skin] : Experimenta uma skin, você tem que estar na loja.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Ao entrar na loja de roupas onde vende sua skin, o comando pra comprar é /comprarskin [id da skin]");
	SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "/proximotuto : para ver o próximo tutorial.");
    ParteTutorial[playerid] = 19;
}
public Tutorial20(playerid){
	SendClientMessage(playerid, COLOR_TUTORIAL_TITULO, "|==========================================| ENTRETENIMENTOS |==========================================|");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "É verdade, isso é RPG, claro, mas também ficar só trabalhando é detestável não?");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Pois bem, aqui temos entretenimentos, minigames e lazeres à sua escolha!");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Veja todos em /lazeres assim que o tutorial acabar");
	SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "/proximotuto : para ver o próximo tutorial.");
    ParteTutorial[playerid] = 20;
}
public Tutorial21(playerid){
	SendClientMessage(playerid, COLOR_TUTORIAL_TITULO, "|==========================================| HIGIENE |==========================================|");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Como haviamos explicado, nosso RPG é completo, aqui você até tem Higiene");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Para adquirir higiene você pode urinar (/urinar) ou tomar banho (/tomarbanho)");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Para tomar banho você deve ir na casa do Ryder ou até mesmo na sua própria casa");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Se for pego urinando pelas ruas poderá levar multa, portanto seja mais higiênico e vá");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "até a Burger Shot ou no Banheiro de sua casa, ai não tem problema se te pegarem...");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Se seu higiene chegar à 0, você será infectado com Micose, e cá entre nós: Não é boa coisa não!");
	SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "/proximotuto : para ver o próximo tutorial.");
    ParteTutorial[playerid] = 21;
}
public Tutorial22(playerid){
	SendClientMessage(playerid, COLOR_TUTORIAL_TITULO, "|==========================================| RESPEITO |==========================================|");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Respeito é algo que mostra quem você é, se é alguém barra pesada ou não");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Para adquirir respeito você tem 3 opções:");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "1º Matar 5 jogadores! OBS: Tenha um motivo senão irá passar um bom tempo na Delegacia");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "2º Ganhar um evento");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "3º Adquirir 3 ExPoints");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "OBS: Respeito também é avaliado na hora que você quiser se enfiltrar em uma gangue");
	SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "/proximotuto : para ver o próximo tutorial.");
    ParteTutorial[playerid] = 22;
}
public Tutorial23(playerid){
    SetPlayerCameraPos(playerid,1360.355224,-1280.253051,14.882812);
 	SetPlayerCameraLookAt(playerid,1374.355224,-1278.453002,13.882812);
 	SetPlayerPos(playerid,1360.355224,-1280.253051,14.882812);
 	SendClientMessage(playerid, COLOR_TUTORIAL_TITULO, "|==========================================| ARMAS |==========================================|");
 	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Essa é a loja de armas, a original do jogo, para adquirir armas, você pode vir aqui");
 	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "ou falar com um vendedor de armas, as profissões não recebem armas, entretanto,");
 	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "quando você comprar uma arma aqui, ela ficará salva junto com as munições restantes...");
 	SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "/proximotuto : para ver o próximo tutorial.");
	ParteTutorial[playerid] = 23;
}
public Tutorial24(playerid){
	SendClientMessage(playerid, COLOR_TUTORIAL_TITULO, "|==========================================| BÁSICO |==========================================|");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Bom, isso é o básico do básico do básico, agora você irá viver sua vida.");
	SendClientMessage(playerid, COLOR_TUTORIAL_MENSAGEM, "Terá que viver uma história, siga os PONTOS VERMELHOS NO RADAR! Não vamos contar, se não perde a graça");
    SendClientMessage(playerid, COLOR_TUTORIAL_TITULO, "Virtual Life RPG mais que um RPG, UMA VIDA!");
    SendClientMessage(playerid, COLOR_TUTORIAL_AVISO, "Atenciosamente, Equipe Virtual Life! Bom Jogo.");
    TogglePlayerControllable(playerid,1);
    SetPlayerPos(playerid,AnteriorPos[playerid][0],AnteriorPos[playerid][1],AnteriorPos[playerid][2]);
    SetCameraBehindPlayer(playerid);
    ParteTutorial[playerid] = 0;
    SetPlayerVirtualWorld(playerid,0);
}

public DrogasPlant(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
		CocainaMao[playerid]--;
		MaconhaMao[playerid]--;
		HeroinaMao[playerid]--;
		PlantandoDrogas[playerid] = 0;
		if(DrogasPlantadas[GetPlayerVehicleID(playerid)] < 1) AcrescentarExPoints(playerid,1);
		DrogasPlantadas[GetPlayerVehicleID(playerid)]++;
		TogglePlayerControllable(playerid,1);
		SendClientMessage(playerid, COLOR_LIDER_DE_TRAFICO, "Drogas plantadas com sucesso!");
		new str[256];
		format(str,sizeof(str),"Esse veiculo está com %d drogas plantadas agora!",DrogasPlantadas[GetPlayerVehicleID(playerid)]);
		SendClientMessage(playerid, COLOR_WHITE, str);
		RemovePlayerFromVehicle(playerid);
	}
}
public Pescando(playerid){
	if(PescaInProgress[playerid] == 1){
		new rand = random(100);
		if(rand <= 75) {
	 	    new x = random(12);
		    new kg = random(10) + 1;
		    new str[256];
		    format(str,sizeof(str),"Você pescou um(a) %s de %d KG, esse peixe vale $%d cada KG",PeixeNome[x],kg,PeixeValor[x]);
		    SendClientMessage(playerid, COLOR_YELLOW, str);
			QtPescas[playerid] += PeixeValor[x]*kg;
			pStats[playerid][Pesca] = QtPescas[playerid];
			pStats[playerid][Iscas] = QtIscas[playerid];
			QtIscas[playerid]--;
			PescaInProgress[playerid] = 0;
			SendClientMessage(playerid,COLOR_GREEN,"Sua rede voltou. Se quiser continuar pescando, fique a vontade.");
			SendClientMessage(playerid,COLOR_GREEN,"Se não, vá a cooperativa de pescas e venda seu pescado com /venderpesca.");
			SendClientMessage(playerid,COLOR_GREEN,"E ainda você pode levar o seu pescado se quiser, basta ir na cooperativa e digitar /levarpesca");
			new string[256];
			format(string,sizeof(string),"Agora seu pescado vale $%d.",QtPescas[playerid]);
			SendClientMessage(playerid, COLOR_PESCADOR, string);
			Pescado[playerid]++;
			if(Pescado[playerid] >= PeixesRestantes[playerid] && Profissao[playerid] == PESCADOR){
			    format(str,sizeof(str),"Você recebeu um ExPoint por pescar %d peixes!",PeixesRestantes[playerid]);
			    SendClientMessage(playerid, COLOR_GREEN, str);
			    PeixesRestantes[playerid] += 4;
				AcrescentarExPoints(playerid,1);
			}
		}
		else {
		 	new grana;
		 	new string[256];
			grana = minrand(100,300);
			format(string, sizeof(string), "Infelizmente você não pescou nada! E gastou iscas e mantimentos. O prejuízo foi de $%d",grana);
		    SendClientMessage(playerid, COLOR_PESCADOR, string);
			SendClientMessage(playerid,COLOR_PESCADOR,"Mas você pode continuar pescando se quiser!");
			AddPlayerMoney(playerid, -grana, -1);
			QtIscas[playerid]--;
			pStats[playerid][Iscas] = QtIscas[playerid];
			PescaInProgress[playerid] = 0;
			AcrescentarLucro(16,grana);
			return 1;
		}
	}
	return 1;
}
public ZerarResultadoMostrado() MostrouResultado = 0;
public ZerarSalarioEntregue() SalarioEntregue = 0;
public ZerarAnuncioPrevisao() PrevisaoAnunciada = 0;
public InicioTribunal(plid,plid2,playerid){
	new msg[256];
	format(msg,sizeof(msg),"O Tribunal entre %s e %s iniciou a partir de agora!",PlayerName(plid),PlayerName(plid2));
	SendClientMessageToAll(COLOR_JUIZ,msg);
	SendClientMessageToAll(COLOR_JUIZ,"Agora os dois estão abertos para declarações ao juiz.");
	declaracoesabertas[plid] = 1;
	declaracoesabertas[plid2] = 1;
	Audiencia[playerid] = 1;
	SetTimerEx("Veredicto2",60000,0,"d",playerid);
}
public Veredicto2(playerid){
	GameTextForAll("~g~Veredicto em ~w~2 minutos",3000,0);
	SetTimerEx("Veredicto",120000,0,"d",playerid);
}
public Veredicto(playerid){
	GameTextForAll("~w~O ~g~Juiz ~w~vai ~n~~w~dar o ~n~~g~Veredicto",3000,0);
	SendClientMessage(playerid, COLOR_CORRETOR, "Sr. Juiz declare um /culpado ou acabe com o Tribunal /fimtribunal.");
}
public InicioTribunal2(plid,plid2,playerid){
	GameTextForPlayer(plid,"~w~Mesa do ~g~Juiz",3000,0);
	GameTextForPlayer(plid2,"~w~Mesa do ~g~Juiz",3000,0);
	GameTextForPlayer(playerid,"~w~Sua Mesa ~g~Juiz",3000,0);
	SetPlayerPos(playerid,238.5303,109.7634,1010.2188);
	SetPlayerPos(plid,234.7509,108.8359,1010.2118);
	SetPlayerPos(plid2,234.8474,111.4288,1010.2188);
	TogglePlayerControllable(plid,0);
	TogglePlayerControllable(plid2,0);
	SetPlayerInterior(plid,10);
	SetPlayerInterior(plid2,10);
	SetPlayerInterior(playerid,10);
	SetPlayerFacingAngle(plid, 270);
	SetPlayerFacingAngle(plid2, 270);
	SetPlayerFacingAngle(playerid, 90);
	SendClientMessageToAll(COLOR_JUIZ, "Os réus estão impossibilitados de andar.");
}
public Fazenda(playerid){
	if(FazendaInProgress[playerid] == 1){
		new rand = random(100);
		if(rand <= 60) {
			QtMilho[playerid]++;
			FazendaInProgress[playerid] = 0;
			SendClientMessage(playerid,COLOR_AGRICULTOR,"ô Zé! A colheita e o ensacamento deu tudo certin. Se ocê quiser continuar plantando, pode ficar.");
			SendClientMessage(playerid,COLOR_GREEN,"Caso adverso, vá na venda do milho e venda ele!");
	        AcrescentarExPoints(playerid,1);
		} else {
		 	new grana;
		 	new string[256];
			grana = minrand(250,600);
			if(weatherprevisao == 8 || weatherprevisao == 16) grana -= 150;
			format(string, sizeof(string), "Infelizmente a colheita não deu certo! O prejuízo foi de $%d",grana);
		    SendClientMessage(playerid, COLOR_AGRICULTOR, string);
			SendClientMessage(playerid,COLOR_AGRICULTOR,"Mas ocê pode continuar plantando se quiser");
			AddPlayerMoney(playerid, -grana, -1);
			FazendaInProgress[playerid] = 0;
			return 1;
		}
	}
	return 1;
}
public ChecandoDrogas(playerid)
{
 	new grana;
 	new string[256];
	grana = minrand(800,2000);
	new rand = random(100);
	if(rand <= 50) {
		SendClientMessage(playerid,COLOR_CAMINHONEIRO,"Aí cara tá tudo ok nós vamo pagar agora não vacila na nossa tá entendido?");
		format(string, sizeof(string),"Taí o teu pagamento: $%d AGORA RALA!",grana);
		SendClientMessage(playerid,COLOR_CAMINHONEIRO,string);
	 }
 	else {
		SendClientMessage(playerid,COLOR_AGRICULTOR,"Deu azar troxa! Rala daqui se não tu morre! NÃO VAMOS PAGAR!");
		return 1;
	}
	return 1;
}
public CarregamentoGeral(playerid){
	CheckpointStatus[playerid] = CARREGAMENTO;
	GeralCar[playerid] = 1;
	avisado[playerid]=-1;
	new CargaGer = random(32);
	DisablePlayerCheckpoint(playerid);
	SetPlayerCheckpoint(playerid,MaterialGeral[CargaGer][0],MaterialGeral[CargaGer][1],MaterialGeral[CargaGer][2],5.0);
    SendClientMessage(playerid,COLOR_CAMINHONEIRO,"O Trailer foi Carregado, vá até o Local marcado no RADAR, para descarregar.");
 	TogglePlayerControllable(playerid,1);
	return 1;
}
public CarregamentoGas(playerid){
  	CheckpointStatus[playerid] = CARREGAMENTO;
  	GasCar[playerid] = 1;
  	avisado[playerid]=-1;
	new CargaGas = random(16);
	DisablePlayerCheckpoint(playerid);
	SetPlayerCheckpoint(playerid,GasCami[CargaGas][0],GasCami[CargaGas][1],GasCami[CargaGas][2],5.0);
    SendClientMessage(playerid,COLOR_CAMINHONEIRO,"O Trailer de Gás está carregado vá deixar no local do Mapa.");
    TogglePlayerControllable(playerid,1);
    CheckpointStatus[playerid] = NONE;
	return 1;
}
public EnchendoCarroForte(playerid){
    TogglePlayerControllable(playerid,1);
   	SendClientMessage(playerid,COLOR_TRANSPORTE_DE_VALORES,"Veículo Forte Carregado!");
   	SendClientMessage(playerid,COLOR_TRANSPORTE_DE_VALORES,"Ao se aproximar do banco para depositar o dinheiro é necessário que você digite \"/pegargrana\" para pegar o malote de dinheiro.");
   	Carga[playerid] = 1;
   	return 1;
}
public FimCamuflagem(playerid)
{
	if(Camuflado[playerid] == 1){
		SetPlayerColor(playerid,ProfColors[Profissao[playerid]]);
		Camuflado[playerid] = 0;
		SendClientMessage(playerid, COLOR_GRAY, "Seu tempo de camuflagem acabou!");
		for(new i; i<SLOTS2; i++){
 			ShowPlayerNameTagForPlayer(playerid,i,1);
		}
	}
}
public ContrabandoSpawnCar(playerid){
    SetPlayerCheckpoint(playerid,2213.1704,-1000.9013,63.8633,3.0);
	CheckpointStatus[playerid] = CONTRABANDOCAR2;
	SendClientMessage(playerid, COLOR_CONTRABANDISTA, "Pegue algum desses carros!");
	PodePegar[playerid] = 1;
}
public LeiteA(playerid){
	QtLeite[playerid]++;
	LeiteInProgress[playerid] = 0;
	ApplyAnimation( playerid,"ped", "fucku", 4.1, 0, 1, 1, 1, 1 );
	SendClientMessage(playerid,COLOR_AGRICULTOR,"Cê tirô todo o leite da vaca. Vá vender lá na fazenda cumpade. Se quise pode continua pegando nas teta.");
	SendClientMessage(playerid,COLOR_AGRICULTOR,"Caso adverso, vá até a área de venda do milho/leite e o venda.");
    AcrescentarExPoints(playerid,1);
}
public TomandoInjecao(plid,playerid){
	SendClientMessage(playerid, COLOR_PARAMEDICO, "A Injeção foi aplicada corretamente, basta esperar.");
	SendClientMessage(plid, COLOR_PARAMEDICO, "Você tomou a Injeção, aguarde o medicamento fazer efeito");
	AddPlayerMoney(plid, -1000, -1);
	AddPlayerMoney(playerid, 600, 3);
	SetTimerEx("FazendoEfeito",12000,0,"dd",plid);
	return 1;
}
public FazendoEfeito(plid){
	SendClientMessage(plid, COLOR_YELLOW, "Você está curado, ver se dá próxima vez compra camisinha!");
	pStats[plid][Aids] = 0;
	pStats[plid][Doenca] = 0;
	SetPlayerWeather(plid,0);
	return 1;
}
public SemCamisinha(playerid){
	new c = random(5);
	if(c == 0 || c == 1 || c == 2 || c == 3){
    	return 0;
	} else if(c == 4){
    	SendClientMessage(playerid, COLOR_RED2, "Quem avisa amigo é! Você agora pegou AIDS. É bom não transar com ninguém e procurar um paramédico.");
		pStats[playerid][Aids] = 1;
		SetPlayerWeather(playerid,-39);
		ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
        pStats[playerid][Doenca] = 2;
     	KillTimer(SemCamisa[playerid]);
		SetTimerEx("AidsPeguei",30000,0,"d",playerid);
 	}
	return 1;
}
public AidsPeguei(playerid){
	if(pStats[playerid][Aids] == 1){
	    SendPlayerMessageToPlayer(playerid, playerid, "UHRU, COF, COF, BEH....");
	   	SetTimerEx("AidsPeguei",30000,0,"d",playerid);
	   	GameTextForPlayer(playerid,"~r~Cuide-~w~se",3000,0);
		if(!IsPlayerInAnyVehicle(playerid)){
			ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
		}
	}
	return 1;
}
public JaEra(playerid,plid){
    SendClientMessage(playerid, COLOR_WHITE, "Oh Oh, AR.. Isso!!");
    SendClientMessage(plid, COLOR_WHITE, "Oh Oh, AR.. Isso!!");
    SetTimerEx("AnimTransa1",3000,0,"dd",playerid,plid);
	return 1;
}
public AnimTransa1(playerid,plid){
    SendClientMessage(playerid, COLOR_WHITE, "Ar! É AGORA!!! AHHHH....");
    SendClientMessage(plid, COLOR_WHITE, "Ar! É AGORA!!! AHHHH....");
    SetTimerEx("AnimTransa2",3000,0,"dd",playerid,plid);
	return 1;
}
public AnimTransa2(playerid,plid){
    SendClientMessage(playerid, COLOR_WHITE, "OH MEU DEUS! OH MEU DEUS");
    SendClientMessage(plid, COLOR_WHITE, "OH MEU DEUS! OH MEU DEUS");
    SetTimerEx("AnimTransa3",3000,0,"dd",playerid,plid);
	return 1;
}
public AnimTransa3(playerid,plid){
    SendClientMessage(playerid, COLOR_WHITE, "NÃO PARA, NÃO PARA!!");
    SendClientMessage(plid, COLOR_WHITE, "NÃO PARA, NÃO PARA!!");
    SetTimerEx("AnimTransa4",3000,0,"dd",playerid,plid);
	return 1;
}
public AnimTransa4(playerid,plid){
    SendClientMessage(playerid, COLOR_WHITE, "MAIS, MAIS, OH OMG OMG");
    SendClientMessage(plid, COLOR_WHITE, "MAIS, MAIS, OH OMG OMG");
    SetTimerEx("AnimTransa5",3000,0,"dd",playerid,plid);
	return 1;
}
public AnimTransa5(playerid,plid){
    SendClientMessage(playerid, COLOR_WHITE, "OH OH, Ahhhhhh...");
    SendClientMessage(plid, COLOR_WHITE, "OH OH, Ahhhhhh...");
    SetTimerEx("AnimTransa6",3000,0,"dd",playerid,plid);
	return 1;
}
public AnimTransa6(playerid,plid){
    SendClientMessage(playerid, COLOR_WHITE, "Você teve um orgasmo, e o sexo acabou. Você pode se retirar pela porta.");
    SendClientMessage(plid, COLOR_WHITE, "Seu Cliente gozou e por isso o sexo acabou, vá até a porta para receber o pagamento.");
	pStats[playerid][Camisinha]--;
	Metendo[playerid] = 0;
	Transacama[playerid] = 0;
	return 1;
}
public Prostituir(playerid)
{
	ApplyAnimation(playerid,"benchpress","gym_bp_up_B",4.1,0,1,1,1,1);
	SendClientMessage(playerid, COLOR_ROSA, "Para mudar de posição digite /mudarposicao");
    AcrescentarExPoints(playerid,1);
}
public Strip(playerid)
{
	ApplyAnimation(playerid,"STRIP","strip_A",4.1,0,1,1,1,10);
	SetTimerEx("Strip3",2000,0,"d",playerid);
}
public Strip3(playerid)
{
	ApplyAnimation(playerid,"LAPDAN3","LAPDAN_D",4.1,0,1,1,1,1);
	ApplyAnimation(playerid,"LAPDAN3","LAPDAN_D",4.1,0,1,1,1,1);
	SetTimerEx("Strip3",30000,0,"d",playerid);
}
public Strip4(playerid)
{
	TogglePlayerControllable(playerid,1);
	SendClientMessage(playerid, COLOR_ROSA2, "Acabou o strip-tease.");
}
public minrand(min, max)
{
	return random(max - min) + min;
}
public IsStringAName(string[])
{
	for(new i = 0; i <= SLOTS2; i++)
	{
		if(IsPlayerConnected(i) == 1)
		{
			new testname[MAX_PLAYER_NAME];
			GetPlayerName(i, testname, sizeof(testname));
			if(compare(testname, string))
			{
				return 1;
			}
		}
	}
	return 0;
}
public LigandoPolicia(playerid){
	CelularBloqueado[playerid] = 1;
	SendClientMessage(playerid, COLOR_GRAY, "Dá pra cá o celular rapá, tá pensando o que?!");
	SendClientMessage(playerid, COLOR_ASSALTANTE, "O Sequestrador tomou seu celular, é bom ter ligado para a polícia.");
	SendClientMessage(playerid, COLOR_ASSALTANTE, "Você tem que fugir ou esperar que alguém te salve, acho que ele está te levando para o cativeiro.!");
	GameTextForPlayer(playerid,"~r~Sequestrado",4000,1);
}
public LevandoProCativeiro(playerid,plid){
	SendClientMessage(playerid, COLOR_GRAY, "OW, agora leva ele pro cativeiro, vá até o ponto vermelho no radar, não deixe pista, cuidado com a policia...!");
	//SetPlayerCheckpoint(playerid, x,y,z, );
    CheckpointStatus[playerid] = CATIVEIRO;
	SetTimerEx("JaEraPraTaNoCativeiro",180000,0,"d",playerid,plid);
}
public JaEraPraTaNoCativeiro(playerid,plid){
	if(Cativeiro[plid] == 0){
	    SendClientMessage(playerid, COLOR_ASSASSINO, "Tu tá a muito tempo com esse cara, deixa ele ir! Dá próxima vez faça o serviço mais rápido!");
	    DisablePlayerCheckpoint(playerid);
    	CheckpointStatus[playerid] = NONE;
		CelularBloqueado[plid] = 0;
		TogglePlayerControllable(plid,1);
	    Amarrado[plid]=0;
		Amarrou[playerid]=0;
		AmarradoInfo[plid][0]=-1;
	    AmarradoInfo[playerid][1]=-1;
	    SendClientMessage(playerid, COLOR_GRAY, "O chefão te soltou, agradece a ele, dá próxima tome cuidado, ou contrate seguranças!");
	}
}
public SentiuFaltaDe(playerid,plid){
	if(Cativeiro[plid] == 1){
	    new string[256];
		format(string, sizeof(string), "[CENTRAL] Todas as unidades, foi constatado o desaparecimento de %s, suspeita-se que o mesmo foi sequestrado! Busca intensa pelo sequestrador!",PlayerName(plid));
		SendClientMessagePolicia(COLOR_COP_RODOVIARIO, string);
		format(string, sizeof(string), "[CENTRAL] * Repito * Todas as unidades, foi constatado o desaparecimento de %s, suspeita-se que o mesmo foi sequestrado! Busca intensa pelo sequestrador!",PlayerName(plid));
		SendClientMessagePolicia(COLOR_COP_RODOVIARIO, string);
		format(string, sizeof(string), "[CENTRAL] Prender ou se o suspeito reagir, atirar!",PlayerName(plid));
		SendClientMessagePolicia(COLOR_COP_RODOVIARIO, string);
		format(string, sizeof(string), "* Radio * [CENTRAL] Todas as unidades, foi constatado o desaparecimento de %s, suspeita-se que o mesmo foi sequestrado! Busca intensa pelo sequestrador!",PlayerName(plid));
		SendClientMessage(playerid, COLOR_COP_RODOVIARIO, string);
		format(string, sizeof(string), "* Radio * [CENTRAL] Todas as unidades, foi constatado o desaparecimento de %s, suspeita-se que o mesmo foi sequestrado! Busca intensa pelo sequestrador!",PlayerName(plid));
		SendClientMessage(plid, COLOR_COP_RODOVIARIO, string);
       	SetTimerEx("SentiuFaltaDe2",240000,false,"dd",playerid, plid);
	}
}
public TirarSkinLoja(playerid){
	SetPlayerSkin(playerid, pStats[playerid][Skin]);
}

public SentiuFaltaDe2(playerid,plid){
	new string[256];
	if(Cativeiro[plid] == 1){
		new rand2 = random(5);
		if(rand2 == 0){
		    SendClientMessage(playerid, COLOR_GRAY, "A família do sequestrado não aguentou e decidiu pagar o resgate!");
			SendClientMessage(playerid, COLOR_ASSALTANTE, "Você recebeu: $4.000 pelo sequestro.");
			AddPlayerMoney(Sequestrador[playerid], 4000, 3);
			Sequestro[plid] = 0;
			Cativeiro[plid] = 0;
			CelularBloqueado[plid] = 0;
			TogglePlayerControllable(plid,1);
		    Amarrado[plid]=0;
			Amarrou[playerid]=0;
			AmarradoInfo[plid][0]=-1;
		    AmarradoInfo[playerid][1]=-1;
		}
		if(rand2 == 1){
		    SendClientMessage(playerid, COLOR_GRAY, "A família do sequestrado não teve como pagar mais que isso, fim do sequestro.");
			SendClientMessage(playerid, COLOR_ASSALTANTE, "Você recebeu: $3.000 pelo sequestro.");
			AddPlayerMoney(Sequestrador[playerid], 3000, 3);
			Sequestro[plid] = 0;
			Cativeiro[plid] = 0;
			CelularBloqueado[plid] = 0;
			TogglePlayerControllable(plid,1);
		    Amarrado[plid]=0;
			Amarrou[playerid]=0;
			AmarradoInfo[plid][0]=-1;
		    AmarradoInfo[playerid][1]=-1;
		}
		if(rand2 == 3){
		    SendClientMessage(playerid, COLOR_GRAY, "Feche a cara mesmo! A família do sequestrado não aguentou e decidiu pagar o resgate!");
			SendClientMessage(playerid, COLOR_ASSALTANTE, "Você recebeu: $5.000 pelo sequestro.");
			AddPlayerMoney(Sequestrador[playerid], 5000, 3);
			Sequestro[plid] = 0;
			Cativeiro[plid] = 0;
			CelularBloqueado[plid] = 0;
			TogglePlayerControllable(plid,1);
		    Amarrado[plid]=0;
			Amarrou[playerid]=0;
			AmarradoInfo[plid][0]=-1;
		    AmarradoInfo[playerid][1]=-1;
		}
		if(rand2 == 4){
		    SendClientMessage(playerid, COLOR_GRAY, "Sequestro falhou, o suspeito conseguiu fugir. Talvez você precise de mais experiência.");
			SendClientMessage(plid, COLOR_ASSALTANTE, "Você conseguiu se desamarrar saia rapido dai! VAMO Vamo.");
			Sequestro[plid] = 0;
			Cativeiro[plid] = 0;
			CelularBloqueado[plid] = 0;
			TogglePlayerControllable(plid,1);
		    Amarrado[plid]=0;
			Amarrou[playerid]=0;
			AmarradoInfo[plid][0]=-1;
		    AmarradoInfo[playerid][1]=-1;
 		}
		format(string,sizeof(string),"[JORNAL] A polícia acaba de confirmar o fim do sequestro de %s. A família dele está muito contente.",PlayerName(plid));
		SendClientMessageToAll(COLOR_JORNALISTA, string);
		for(new i=0; i<SLOTS2; i++){
		    if(Profissao[i] == JORNALISTA){
				format(string,sizeof(string),"[EDITOR CHEFE] TÁ esperando o que? Vai atrás desse cara, faz uma reportagem com ele!",PlayerName(playerid),PlayerName(plid));
				SendClientMessage(i, COLOR_JORNALISTA, string);
			}
		}
	}
}
public LevarVeiculo(playerid){
    SendClientMessage(playerid, COLOR_COP_SWAT, "[OFICIAL] Leve o veículo para a delegacia");
    SendClientMessage(playerid, COLOR_COP_SWAT, "[OFICIAL] Siga a marca vermelha no radar.");
	PutPlayerInVehicle(playerid,vehiculozao[playerid],0);
	new rand = random(5);
	DisablePlayerCheckpoint(playerid);
	SetPlayerCheckpoint(playerid,DelegaciaPos[rand][0],DelegaciaPos[rand][1],DelegaciaPos[rand][2],2.0);
	CheckpointStatus[playerid] = ENTREGANDO_CARRO_MULTA;
	CarroEntrega[playerid] = GetPlayerVehicleID(playerid);
}

public AvancoLigacao(plcaller,plcalled)
{
    new msg[256];
	if(extensao[plcaller] == celular_extension){
		CellCredits[plcaller]--;
		if(CellCredits[plcaller] == 0){
		    SendClientMessage(plcaller,COLOR_GRAY,"Você não tem mais créditos para continuar nessa chamada!");
			EmLigacao[plcaller]=0;
			EmLigacao[plcalled]=0;
			SetPlayerSpecialAction(plcaller,SPECIAL_ACTION_STOPUSECELLPHONE);
			SetPlayerSpecialAction(plcalled,SPECIAL_ACTION_STOPUSECELLPHONE);
			return 1;
		}
		SendClientMessage(plcaller,COLOR_GRAY,"Mais um minuto se passou...");
		format(msg,256,"Agora seu saldo é: %d créditos.",CellCredits[plcaller]);
		SendClientMessage(plcaller,COLOR_AZULPLUS,msg);
		CellTimer[plcaller]=SetTimerEx("AvancoLigacao",60000,false,"dd",plcaller,plcalled);
		return 1;
	}
	else if(extensao[plcaller] == telefone_extension){
	    if(NaCasa[plcaller] == 0){
	        format(msg,sizeof(msg),"ERRO: %s está no telefone mas não está em nenhuma casa!",PlayerName(plcaller));
	        writelog(msg);
	        print(msg);
	        return 0;
		}
		pckStats[PickupEntradaCasa[plcaller]][ContaTelefone] += 3;
		return 1;
	}
	return 1;
}
public Anunciou(playerid) JaAnunciou[playerid] = 0;
public Comeu(plid,playerid){
    JaComi[plid] = 0;
    JaVendi[playerid] = 0;
}
public OpenGate(gateid)
{
	if(ContagemPortao[gateid] < 90){
	    ContagemPortao[gateid]++;
		GetObjectRot(Gates[gateid],rx,ry,rz);
		SetObjectRot(Gates[gateid],rx,ry+1.0,rz);
		PortaoTimer[gateid]=SetTimerEx("OpenGate",50, 0, "d", gateid);
	} else {
		ContagemPortao[gateid] = 0;
		KillTimer(PortaoTimer[gateid]);
		PortaoAbrindo[gateid]=0;
		PortaoAberto[gateid]=1;
	}
}
public CloseGate(gateid){
	if(ContagemPortao[gateid] < 90){
	    ContagemPortao[gateid]++;
		GetObjectRot(Gates[gateid],rx,ry,rz);
		SetObjectRot(Gates[gateid],rx,ry-1.0,rz);
		PortaoTimer[gateid]=SetTimerEx("CloseGate",50,0,"d",gateid);
	} else {
	    ContagemPortao[gateid] = 0;
	    KillTimer(PortaoTimer[gateid]);
	    PortaoFechando[gateid]=0;
	    PortaoAberto[gateid]=0;
	}
}
public FecharPortaoAutoEscola(){
	if(AbrindoPortaoAuto == 0){
		MoveObject(portaoauto,1812.601,-2071.738,15.326,2);
	}
}
public TerminarAbrirPortaoAuto(){
    KillTimer(FechandoPortaoAuto);
	AbrindoPortaoAuto = 0;
	FecharPortaoAutoEscola();
}
public DestruirPickupGrana(playerid,pickup){
	DestroyPickup(pickup);
	TogglePlayerControllable(playerid,1);
}

public OpenPortao(objectid){
	if(objectid == 0) MoveObject(Portao[objectid],1573.791382, -1638.426270, 14.854576,2);
	if(objectid == 1) MoveObject(Portao[objectid],2342.546387, 2454.905029, 7.249487,2);
	if(objectid == 2) MoveObject(Portao[objectid],2294.102539, 2511.015137, 4.946327,2);
	if(objectid == 3) MoveObject(Portao[objectid],-1631.699219, 688.715637, 8.709263,2);
	DelegaAbrindo[objectid]=0;
	DelegaAberto[objectid]=1;
}
public ClosePortao(objectid){
	if(objectid == 0) MoveObject(Portao[objectid],1592.921753, -1638.546753, 14.789343,1.0);
	if(objectid == 1) MoveObject(Portao[objectid],2334.678711, 2443.014404, 7.259488,1.0);
	if(objectid == 2) MoveObject(Portao[objectid],2294.276123, 2503.250488, 4.719362,1.0);
	if(objectid == 3) MoveObject(Portao[objectid],-1648.476563, 688.514648, 8.543203,1.0);
	DelegaFechando[objectid]=0;
	DelegaAberto[objectid]=0;
}
public VoteKickTimer(){
	if (gdebug >= 3){printf("DEBUG VoteKickTimer()");}
	for(new i = 0; i <= SLOTS2; i++)
		{
		if(IsPlayerConnected(i) == 1 && VoteKick[i] > 0)
		{
			VoteKick[i]++;
			if(IsPlayerConnected(i) == 1 && VoteKick[i] == 8)
			{
				if(KickVote[i] >= numplayers/4)
				{
					new string[128];
					new accused[MAX_PLAYER_NAME];
					GetPlayerName(i, accused, sizeof(accused));
					format(string, sizeof(string), "VOTO: %s foi votado para sair do servidor",accused);
					SendClientMessageToAll(COLOR_GRAY,string);
					ClearVote(i);
					Kick(i);
				}
				else
				{
					new string[128];
					new accused[MAX_PLAYER_NAME];
					GetPlayerName(i, accused, sizeof(accused));
					format(string, sizeof(string), "VOTO FALHOU: %s não saira do servidor",accused);
					SendClientMessageToAll(COLOR_GRAY,string);
					ClearVote(i);
				}
			}
		}
	}
}
public TratamentoDrogas(playerid,plid)
{
	if(IsPlayerConnected(playerid) && IsPlayerConnected(plid)){
	    CurandoDrogas[playerid] = 0;
    	SendClientMessage(playerid, COLOR_GREEN, "Tratamento feito, você recebeu $600.");
		new string[256];
		format(string,sizeof(string),"O Paramédico %s lhe fez um tratamento de drogas!",PlayerName(playerid));
		SendClientMessage(plid, COLOR_GREEN, string);
		SendClientMessage(plid, COLOR_GREEN, "Agora suas drogas foram removidas do seu sangue, o tratamento custou $600");
 		AddPlayerMoney(playerid,600,3);
		AddPlayerMoney(plid,-600,-1);
		AcrescentarExPoints(playerid,1);
		QtHeroina[plid] = 0;
		QtMaconha[plid] = 0;
		QtCocaina[plid] = 0;
		pStats[plid][DosesHeroina] = 0;
        pStats[plid][DosesMaconha] = 0;
        pStats[plid][DosesCocaina] = 0;
		kitmedico[playerid] = kitmedico[playerid] -1;
	}
}
public Balada()
{
	tocando2++;
	if(tocando2 >= 15){
	    tocando2 = 0;
		if(tocando >= 50) tocando = 0;
	    else tocando++;
	}
	for(new i=0; i<SLOTS2; i++){
	   	if(IsPlayerConnected(i) && AreaBalada[i] == 1){
			if(!HaveDJ){
				if(tocando >= 0 && tocando < 7 && sombalada2[i] != 1){
					PlayerPlaySound(i,1088,0.0,0.0,0.0);
					SendClientMessage(i, COLOR_BALADA, "[DJ] Trocando música");
					PlayerPlaySound(i,1062,0.0,0.0,0.0);
					sombalada2[i] = 1;
				}
				if(tocando >= 7 && tocando < 14 && sombalada2[i] != 2){
					PlayerPlaySound(i,1063,0.0,0.0,0.0);
					SendClientMessage(i, COLOR_BALADA, "[DJ] Trocando música");
					PlayerPlaySound(i,1068,0.0,0.0,0.0);
					sombalada2[i] = 2;
				}
				if(tocando >= 14 && tocando < 21 && sombalada2[i] != 3){
  					PlayerPlaySound(i,1069,0.0,0.0,0.0);
  					SendClientMessage(i, COLOR_BALADA, "[DJ] Trocando música");
  					PlayerPlaySound(i,1076,0.0,0.0,0.0);
  					sombalada2[i] = 3;
  				}
  				if(tocando >= 21 && tocando < 28 && sombalada2[i] != 4){
  					PlayerPlaySound(i,1077,0.0,0.0,0.0);
  					SendClientMessage(i, COLOR_BALADA, "[DJ] Trocando música");
					PlayerPlaySound(i,1097,0.0,0.0,0.0);
					sombalada2[i] = 4;
  				}
  				if(tocando >= 28 && tocando < 35 && sombalada2[i] != 5){
  					PlayerPlaySound(i,1098,0.0,0.0,0.0);
					SendClientMessage(i, COLOR_BALADA, "[DJ] Trocando música");
  					PlayerPlaySound(i,1183,0.0,0.0,0.0);
                    sombalada2[i] = 5;
			    }
			 	if(tocando >= 35 && tocando < 42 && sombalada2[i] != 6){
  					PlayerPlaySound(i,1084,0.0,0.0,0.0);
  					SendClientMessage(i, COLOR_BALADA, "[DJ] Trocando música");
  					PlayerPlaySound(i,1185,0.0,0.0,0.0);
  					sombalada2[i] = 6;
  				}
  				if(tocando >= 42 && tocando <= 49 && sombalada2[i] != 7){
  					PlayerPlaySound(i,1086,0.0,0.0,0.0);
  					SendClientMessage(i, COLOR_BALADA, "[DJ] Trocando música");
  					PlayerPlaySound(i,1187,0.0,0.0,0.0);
  					sombalada2[i] = 7;
  				}
			}
			else{
			    if(sombalada2[i] != MusicSelected){
					if(MusicSelected == 1){
					    PlayerPlaySound(i,1088,0.0,0.0,0.0);
						SendClientMessage(i, COLOR_BALADA, "[DJ] Trocando música");
						PlayerPlaySound(i,1062,0.0,0.0,0.0);
					}
					if(MusicSelected == 2){
					    PlayerPlaySound(i,1063,0.0,0.0,0.0);
						SendClientMessage(i, COLOR_BALADA, "[DJ] Trocando música");
						PlayerPlaySound(i,1068,0.0,0.0,0.0);
					}
					if(MusicSelected == 3){
					    PlayerPlaySound(i,1069,0.0,0.0,0.0);
  						SendClientMessage(i, COLOR_BALADA, "[DJ] Trocando música");
  						PlayerPlaySound(i,1076,0.0,0.0,0.0);
					}
					if(MusicSelected == 4){
					    PlayerPlaySound(i,1077,0.0,0.0,0.0);
  						SendClientMessage(i, COLOR_BALADA, "[DJ] Trocando música");
						PlayerPlaySound(i,1097,0.0,0.0,0.0);
					}
					if(MusicSelected == 5){
					    PlayerPlaySound(i,1098,0.0,0.0,0.0);
						SendClientMessage(i, COLOR_BALADA, "[DJ] Trocando música");
  						PlayerPlaySound(i,1183,0.0,0.0,0.0);
					}
					if(MusicSelected == 6){
					    PlayerPlaySound(i,1084,0.0,0.0,0.0);
  						SendClientMessage(i, COLOR_BALADA, "[DJ] Trocando música");
  						PlayerPlaySound(i,1185,0.0,0.0,0.0);
					}
					if(MusicSelected == 7){
					    PlayerPlaySound(i,1086,0.0,0.0,0.0);
  						SendClientMessage(i, COLOR_BALADA, "[DJ] Trocando música");
  						PlayerPlaySound(i,1187,0.0,0.0,0.0);
					}
			        sombalada2[i] = MusicSelected;
			    }
			}
	    }
	}
}
public Cobrar(playerid)
{
	KillTimer(TimerDivida[playerid]);
	new string[256];
	if(pStats[playerid][Divida] > 0){
		SendClientMessage(playerid, COLOR_GRAY, "|-------------------------------------------- ATENÇÃO --------------------------------------------|");
		SendClientMessage(playerid, COLOR_GRAY, "Você não pagou suas dívidas e o banco acrescentou um JUROS de 15 por cento à mais nelas.");
		format(string, sizeof(string), "Ou seja, agora suas dívidas são: $%d", pStats[playerid][Divida]+pStats[playerid][Divida]*15/100);
		SendClientMessage(playerid, COLOR_WHITE, string);
		pStats[playerid][Divida] += pStats[playerid][Divida]*15/100;
		TimerDivida[playerid] = SetTimerEx("Cobrar",900000,false,"d",playerid);
	}
}
public ClearVote(kickedid){
	KickVote[kickedid] = 0;
	VoteKick[kickedid] = 0;
	for(new j = 0; j <= SLOTS2; j++)
	{
		if(IsPlayerConnected(j) == 1 && LastVote[j] == kickedid)
		{
			LastVote[j] = 255;
		}
	}
}
stock ServirSobremesa(playerid,sobremesa)
{
    if(GetPlayerMoney(playerid) < SobremesasValor[sobremesa]){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro para pagar a sobremesa...");
	    return 1;
	}
	SendClientMessage(playerid, COLOR_GREEN, "Sobremesa servida...");
	new str[256];
	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
	format(str,sizeof(str),"Você está comendo um %s",SobremesasName[sobremesa]);
	SendClientMessage(playerid, COLOR_GREEN, str);
	AddPlayerMoney(playerid,-SobremesasValor[sobremesa],-1);
	TogglePlayerControllable(playerid,0);
	SetTimerEx("ComerSobremesa",10000,0,"d",playerid);
	return 1;
}
public ComerSobremesa(playerid)
{
	TogglePlayerControllable(playerid,1);
	SendClientMessage(playerid, COLOR_GREEN, "Você terminou de comer/tomar sua sobremesa...");
}
stock ServirComida(playerid,comida)
{
    if(GetPlayerMoney(playerid) < ComidasValor[comida]){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro para pagar a comida...");
	    return 1;
	}
	if(comida == 7) Bebida[playerid]--;
	SendClientMessage(playerid, COLOR_GREEN, "Comida servida...");
	new str[256];
	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
	format(str,sizeof(str),"Você está comendo um %s",ComidasName[comida]);
	SendClientMessage(playerid, COLOR_GREEN, str);
	AddPlayerMoney(playerid,-ComidasValor[comida],-1);
	AddPlayerHealth(playerid,50);
	TogglePlayerControllable(playerid,0);
	SetTimerEx("ComerComida",25000,0,"d",playerid);
	return 1;
}
public ComerComida(playerid)
{
	TogglePlayerControllable(playerid,1);
	SendClientMessage(playerid, COLOR_GREEN, "Você terminou de comer sua comida...");
	SendPlayerMessageToPlayer(playerid, playerid, "Delícia...");
}
stock ServirSuco(playerid,suco)
{
	switch(ComLeite[playerid])
	{
		case 0 :
  		{
	        if(GetPlayerMoney(playerid) < 10){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro!");
			    return 1;
			}
			else{
			    new string[256];
			    format(string,sizeof(string),"Você tomou um suco de %s c/ agua!",SucosName[suco]);
			    SendClientMessage(playerid, COLOR_GREEN, string);
			    AddPlayerHealth(playerid,10);
			    AddPlayerMoney(playerid,-10,-1);
			    return 1;
			}
		}
		case 1 :
		{
			if(GetPlayerMoney(playerid) < 14){
			    SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro!");
			    return 1;
			}
			else{
			    new string[256];
			    format(string,sizeof(string),"Você tomou um suco de %s c/ leite!",SucosName[suco]);
			    SendClientMessage(playerid, COLOR_GREEN, string);
			    AddPlayerHealth(playerid,15);
			    AddPlayerMoney(playerid,-14,-1);
			    return 1;
			}
		}
	}
	return 1;
}
stock ServirBebida(playerid,bebida)
{
	if(GetPlayerMoney(playerid) < BebidasValor[bebida]){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro para pagar a bebida...");
	    return 1;
	}
	if(bebida == 4) Bebida[playerid] = Bebida[playerid] + 5;
	SendClientMessage(playerid, COLOR_GREEN, "Bebida servida...");
	new str[256];
	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
	format(str,sizeof(str),"Você está bebendo um(a) %s",BebidasName[bebida]);
	SendClientMessage(playerid, COLOR_GREEN, str);
	AddPlayerMoney(playerid,-BebidasValor[bebida],-1);
	AddPlayerHealth(playerid,5);
	TogglePlayerControllable(playerid,0);
	SetTimerEx("TomarBebida",15000,0,"d",playerid);
	return 1;
}

public Cozinhando(playerid)
{
	new rand = random(4);
	if(rand == 0 || rand == 1){
	    SendClientMessage(playerid, COLOR_GREEN, "Você ganhou experiência ao fazer este delicioso prato e ganhou um ponto de culinária!");
		pStats[playerid][Culinaria]++;
	}
	else{
	    SendClientMessage(playerid, COLOR_WHITE, "Você não ganhou experiência ao fazer esse prato pois não conseguiu entender muito o que fez, da próxima vez, tente aprender algo.");
	}
	if(AlimentoCozinhando[playerid] == 1){
	    SendClientMessage(playerid, COLOR_WHITE, "Frango pronto, você pode servi-lo com /servir [id] [refeição]");
		pStats[playerid][Frango]--;
		Frangos[playerid]++;
		AlimentoCozinhando[playerid] = 0;
		TogglePlayerControllable(playerid,1);
		KillTimer(TempoCozinhando[playerid]);
		return 1;
	}
	else if(AlimentoCozinhando[playerid] == 2){
	    SendClientMessage(playerid, COLOR_WHITE, "Peixe pronto, você pode servi-lo com /servir [id] [refeição]");
	    pStats[playerid][Peixe]--;
		Peixes[playerid]++;
		AlimentoCozinhando[playerid] = 0;
		TogglePlayerControllable(playerid,1);
		KillTimer(TempoCozinhando[playerid]);
		return 1;
	}
	else if(AlimentoCozinhando[playerid] == 3){
	    SendClientMessage(playerid, COLOR_WHITE, "Pizza pronta, você pode servi-la com /servir [id] [refeição]");
	    pStats[playerid][Pizza]--;
		Pizzas[playerid] ++;
		AlimentoCozinhando[playerid] = 0;
		TogglePlayerControllable(playerid,1);
		KillTimer(TempoCozinhando[playerid]);
		return 1;
	}
	else if(AlimentoCozinhando[playerid] == 4){
	    SendClientMessage(playerid, COLOR_WHITE, "Carne pronta, você pode servi-la com /servir [id] [refeição]");
        pStats[playerid][Carne]--;
		Carnes[playerid] ++;
		AlimentoCozinhando[playerid] = 0;
		TogglePlayerControllable(playerid,1);
		KillTimer(TempoCozinhando[playerid]);
		return 1;
	}
	else if(AlimentoCozinhando[playerid] == 5){
	    SendClientMessage(playerid, COLOR_WHITE, "Strogonoff pronto, você pode servi-lo com /servir [id] [refeição]");
        pStats[playerid][Strogonoff]--;
		Strogonoffes[playerid] ++;
		AlimentoCozinhando[playerid] = 0;
		TogglePlayerControllable(playerid,1);
		KillTimer(TempoCozinhando[playerid]);
		return 1;
	}
	else if(AlimentoCozinhando[playerid] == 6){
	    SendClientMessage(playerid, COLOR_WHITE, "Camarão pronto, você pode servi-lo com /servir [id] [refeição]");
        pStats[playerid][Camarao]--;
		Camaroes[playerid] ++;
		AlimentoCozinhando[playerid] = 0;
		TogglePlayerControllable(playerid,1);
		KillTimer(TempoCozinhando[playerid]);
		return 1;
	}
	else if(AlimentoCozinhando[playerid] == 7){
	    SendClientMessage(playerid, COLOR_WHITE, "Linguiça pronta, você pode servi-la com /servir [id] [refeição]");
        pStats[playerid][Linguica]--;
		Linguicas[playerid] ++;
		AlimentoCozinhando[playerid] = 0;
		TogglePlayerControllable(playerid,1);
		KillTimer(TempoCozinhando[playerid]);
		return 1;
	}
	return 1;
}
public TomarBebida(playerid)
{
	TogglePlayerControllable(playerid,1);
	SendClientMessage(playerid, COLOR_GREEN, "Você terminou de tomar sua bebida...");
	SendPlayerMessageToPlayer(playerid, playerid, "Delícia...");
}
public TomarSorvete(playerid)
{
	new Float:Life;
	GetPlayerHealth(playerid,Life);
	SetPlayerHealth(playerid,Life+5);
	TomandoSorvete[playerid] = 0;
	TogglePlayerControllable(playerid,1);
	SendClientMessage(playerid, COLOR_PALHA, "Você terminou de tomar o seu sorvete!");
	SendPlayerMessageToPlayer(playerid, playerid, "Delícia...");
}
stock ComerHamburguer(playerid,hamburguer){
	new string[256];
	if(GetPlayerMoney(playerid) < HamburguersPrice[hamburguer]){
	    format(string,sizeof(string),"Você não tem dinheiro para comprar um %s! Custo: $%d,00 dólares",HamburguersName[hamburguer],HamburguersPrice[hamburguer]);
		SendClientMessage(playerid, COLOR_GRAY, string);
		return 1;
	}
	AddPlayerMoney(playerid,-HamburguersPrice[hamburguer],-1);
	AddPlayerHealth(playerid,random(6) + 5);
	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
	format(string,sizeof(string),"HMMM! Você comeu um %s pelo custo de $%d,00... Bom Lanche!",HamburguersName[hamburguer],HamburguersPrice[hamburguer]);
	SendClientMessage(playerid, COLOR_GREEN2, string);
	return 1;
}
public Taxi(){
	for(new i=0; i<SLOTS2; i++){
		if(Taximetro[i][0] == 1){
			if(GetPlayerMoney(i) > PrecoCorrida[i] + 3){
			    new string[256];
				PrecoCorrida[i] = PrecoCorrida[i] + 3;
				format(string, sizeof(string), "Taxímetro: $%d", PrecoCorrida[i]);
				SendClientMessage(i, COLOR_TAXISTA, string);
				SendClientMessage(Taximetro[i][1], COLOR_GREEN, string);
            	SetTimerEx("Taxi",5000,0,"d",i);
			}
			if(GetPlayerMoney(i) < PrecoCorrida[i] + 3){
				SendClientMessage(i, COLOR_GRAY, "Você não tem mais dinheiro para o taxi, vai ficar aqui");
				SendClientMessage(Taximetro[i][1], COLOR_GRAY, "Seu passageiro ficou sem dinheiro e por isso foi deixado aqui.");
				AddPlayerMoney(i, 0 - PrecoCorrida[i],1);
				AddPlayerMoney(Taximetro[i][1], PrecoCorrida[i], 3);
                if(JogadorContratado(Taximetro[i][1],1)) AcrescentarLucro(1,PrecoCorrida[i]/4*3);
				RemovePlayerFromVehicle(i);
				PrecoCorrida[i] = 0;
				Taximetro[i][1] = 0;
				Taximetro[i][0] = 0;
				NoTaxi[i] = 0;
			}
 		}
		if(ATaximetro[i][0] == 1){
			if(GetPlayerMoney(i) > PrecoCorrida[i] + 15){
			    new string[256];
				PrecoCorrida[i] = PrecoCorrida[i] + 15;
				format(string, sizeof(string), "Aero-Taxímetro: $%d", PrecoCorrida[i]);
				SendClientMessage(i, COLOR_TAXI_AEREO, string);
				SendClientMessage(ATaximetro[i][1], COLOR_TAXI_AEREO, string);
            	SetTimerEx("Taxi",5000,0,"d",i);
			}
			if(GetPlayerMoney(i) < PrecoCorrida[i] + 15){
				SendClientMessage(i, COLOR_GRAY, "Você não tem mais dinheiro para o taxi, vai ficar aqui.");
				SendClientMessage(ATaximetro[i][1], COLOR_GRAY, "Seu passageiro ficou sem dinheiro e por isso foi deixado aqui.");
				AddPlayerMoney(i, 0 - PrecoCorrida[i], -1);
				AddPlayerMoney(ATaximetro[i][1], PrecoCorrida[i], 3);
				if(JogadorContratado(ATaximetro[i][1],1)) AcrescentarLucro(1,PrecoCorrida[i]/4*3);
				RemovePlayerFromVehicle(i);
				PrecoCorrida[i] = 0;
				ATaximetro[i][1] = 0;
				ATaximetro[i][0] = 0;
				NoTaxi[i] = 0;
			}
		}
		if(MTaximetro[i][0] == 1){
			if(GetPlayerMoney(i) > PrecoCorrida[i] + 5){
			    new string[256];
				PrecoCorrida[i] = PrecoCorrida[i] + 5;
				format(string, sizeof(string), "Moto-Taxímetro: $%d", PrecoCorrida[i]);
				SendClientMessage(i, COLOR_MOTOTAXI, string);
				SendClientMessage(MTaximetro[i][1], COLOR_MOTOTAXI, string);
            	SetTimerEx("Taxi",5000,0,"d",i);
			}
			if(GetPlayerMoney(i) < PrecoCorrida[i] + 5){
				SendClientMessage(i, COLOR_GRAY, "Você não tem mais dinheiro para o taxi, vai ficar aqui.");
				SendClientMessage(MTaximetro[i][1], COLOR_GRAY, "Seu passageiro ficou sem dinheiro e por isso foi deixado aqui.");
				AddPlayerMoney(i, 0 - PrecoCorrida[i], -1);
				AddPlayerMoney(MTaximetro[i][1], PrecoCorrida[i],3);
				if(JogadorContratado(MTaximetro[i][1],1)) AcrescentarLucro(1,PrecoCorrida[i]/4*3);
				RemovePlayerFromVehicle(i);
				PrecoCorrida[i] = 0;
				MTaximetro[i][1] = 0;
				MTaximetro[i][0] = 0;
				NoTaxi[i] = 0;
			}
		}
 	}
}

public StreamTimer(){
	for(new i=0; i<SLOTS2; i++) {
		if(IsPlayerConnected(i)) {
			ShowedForPlayer[i]=0;
			for(new oldm=0; oldm<32; oldm++) {RemovePlayerMapIcon(i, oldm);}
			Count=0;
			for(new m=0; m<sizeof(MapIconPos); m++) {
				if(ShowedForPlayer[i] < 32) {
					if (GetDistanceToMapIcon(i, m) <= 400) {
						SetPlayerMapIcon(i, Count, MapIconPos[m][0],MapIconPos[m][1],MapIconPos[m][2], MapIconID[m], 0xE6E6E6E6);
						ShowedForPlayer[i]++;
						Count++;
					}
				}
			}
		}
	}
	return 1;
}
stock GetDistanceToMapIcon(playerid, iconid)
{
	new Float:x1,Float:y1,Float:z1;
	new Float:x2,Float:y2,Float:z2;
	new Float:output;
	GetPlayerPos(playerid, x1, y1, z1);
	GetMapIconPos(iconid, x2, y2, z2);
	output = floatsqroot(floatpower(floatabs(floatsub(x2, x1)), 2)+floatpower(floatabs(floatsub(y2, y1)), 2));
	return floatround(output);
}
stock GetMapIconPos(iconid, &Float:X, &Float:Y, &Float:Z){
	X=MapIconPos[iconid][0];
	Y=MapIconPos[iconid][1];
	Z=MapIconPos[iconid][2];
	return 1;
}

public Curandoo(playerid){
	SendClientMessage(playerid, COLOR_PARAMEDICO, "[MEDICO] Raio-X geral, não vai doer nada!");
	SendClientMessage(playerid, COLOR_RED2, "Tá certo Doutor...");
	SetTimerEx("Curandoo2",5000,0,"d",playerid);
}
public Curandoo2(playerid){
	SendClientMessage(playerid, COLOR_PARAMEDICO, "[MEDICO] Bom não encontramos nada, vamos apenas colocar os curativos em você.");
	SendClientMessage(playerid, COLOR_RED2, "Ok...");
	Curandome[playerid] = 0;
	SubindoVida[playerid] = 0;
	if(pStats[playerid][Seguro] == 1){
    	SendClientMessage(playerid, COLOR_CORRETOR_SEGUROS, "[SEGURADORA] Seu atendimento foi pago, quando precisar estamos aqui.");
    	TogglePlayerControllable(playerid,1);
	   	SetPlayerHealth(playerid,100);
	} else {
	    if(GetPlayerMoney(playerid) > 100){
    		SendClientMessage(playerid, COLOR_PARAMEDICO, "[HOSPITAL] Muito Obrigado senhor, quando quiser disfrute do nosso atendimento.");
	    	SetPlayerHealth(playerid,100);
    		TogglePlayerControllable(playerid,1);
	    	AddPlayerMoney(playerid,-100,-1);
		} else {
		    SendClientMessage(playerid, COLOR_GRAY, "SUMA DAQUI VOCÊ NÃO TEM DINHEIRO PARA PAGAR SEU ENROLÃO!");
		}
	}
}

public PassarDoenca(playerid){
	if(!IsPlayerConnected(playerid)) return 0;
    for(new i=0; i<SLOTS2; i++){
		if(GetDistanceBetweenPlayers(playerid,i) < 20 && IsPlayerConnected(playerid) && Logado[playerid] == 1){
		    if(JogadorDoente[playerid] == 1){
		        if(Profissao[i] != PARAMEDICO){
					if(JogadorDoente[i] == 0){
						if(IsPlayerConnected(i) && Logado[i] == 1 && pStats[i][Vacina] == 1){
			            	new string[256];
							format(string,sizeof(string),"[HOSPITAL]Ihhh! COF.. COF.. CUIDADO LOS SANTOS %s pegou a doença de %s.",PlayerName(i), PlayerName(playerid));
							SendClientMessageToAll(COLOR_RED2, string);
			            	format(string, sizeof(string),"%s Passou a Doença para você",PlayerName(playerid));
		                	SendClientMessage(i, COLOR_WHITE, string);
		                	JogadorDoente[i] = 1;
		                	pStats[i][Doenca] = 1;
							SetPlayerWeather(i,-41);
							ApplyAnimation(i, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
		                	GameTextForAll("~r~Cuidem-~w~se",3000,0);
							SetTimerEx("PassarDoenca",50,0,"d",i);
						}
					}
				}
			}
		}
	}
	return 1;
}
public Internando(playerid){
	KillTimer(TempoInternando[playerid]);
	TogglePlayerControllable(playerid, 1);
    SetPlayerPos(playerid, PosHosp[playerid][0], PosHosp[playerid][1], PosHosp[playerid][2]);
	SetCameraBehindPlayer(playerid);
	AddPlayerMoney(playerid,-1500,-1);
	pStats[playerid][Doenca] = 0;
	pStats[playerid][Aids] = 0;
	pStats[playerid][Micose] = 0;
	pStats[playerid][Vacina] = 1;
	pStats[playerid][VacinaDuracao] = 7;
	JogadorDoente[playerid] = 0;
	SetPlayerHealth(playerid, 100);
	GameTextForPlayer(playerid, "~g~recuperado", 5000, 0);
	SendClientMessage(playerid, COLOR_PARAMEDICO, "HOSPITAL: É, você tomou alta, já está recuperado, saudável, e ainda tomou vacina, pode ir para casa agora!");
}
public TomandoRemedio1(plid,playerid){
	SendClientMessage(plid, COLOR_RED2, "Aí que dor...");
	SendClientMessage(plid, COLOR_PARAMEDICO, "Tome o medicamento..");
	SendClientMessage(playerid, COLOR_RED2, "Aí que dor...");
	SendClientMessage(playerid, COLOR_PARAMEDICO, "Tome o medicamento..");
	ApplyAnimation(plid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
	SetTimerEx("TomandoRemedio2",3000,0,"dd",playerid,plid);
	return 1;
}
public TomandoRemedio2(playerid,plid){
	SendClientMessage(plid, COLOR_PARAMEDICO, "Acalme-se tome o remédio. Ele tem ação rápida");
	SendClientMessage(playerid, COLOR_PARAMEDICO, "Acalme-se tome o remédio. Ele tem ação rápida");
    ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,1,1);
	SetTimerEx("TomandoRemedio3",3000,0,"dd",playerid,plid);
	return 1;
}
public TomandoRemedio3(playerid,plid){
	SendClientMessage(plid, COLOR_RED2, "Obrigado.");
	SendClientMessage(plid, COLOR_PARAMEDICO, "Aguarde o medicamento sofrer efeito...");
	SendClientMessage(playerid, COLOR_RED2, "Obrigado.");
	SendClientMessage(playerid, COLOR_PARAMEDICO, "Aguarde o medicamento sofrer efeito...");
	SetTimerEx("TomandoRemedio4",20000,0,"dd",playerid,plid);
	return 1;
}
public TomandoRemedio4(playerid,plid){
	new string[256];
	JogadorDoente[plid] = 0;
	pStats[plid][Doenca] = 0;
	SetPlayerWeather(plid,0);
	SendClientMessage(plid, COLOR_PARAMEDICO, "Estás curado!");
	format(string,sizeof(string),"Ufa! %s não apresenta nenhum risco a cidade o paramédico aplicou o medicamento e o mesmo se encontra saudável.",PlayerName(plid));
	SendClientMessageToAll(COLOR_RED2, string);
	format(string, sizeof(string),"%s está curado graças a você. Você recebeu pelo tratamento.",PlayerName(plid));
	SendClientMessage(playerid, COLOR_WHITE, string);
    AddPlayerMoney(playerid,600,3);
	AcrescentarExPoints(playerid,1);
	kitmedico[playerid] = kitmedico[playerid] -1;
	Curando[playerid] = 0;
	return 1;
}
public CancelarArma(playerid,plid){
	if(Armas[plid] != 0){
	    new string[256];
 		Armas[plid] = 0;
 		VendendoArmas[playerid] = 0;
    	SendClientMessage(plid, COLOR_GREEN, "[VENDEDOR] Você não me respondeu a tempo, arma cancelada!");
		format(string,sizeof(string),"[AMMU] A arma foi cancelada, %s não respondeu a tempo, não vende sem consentimentos",PlayerName(plid));
      	SendClientMessage(playerid, COLOR_GREEN , string);
	}
}
public SellHouse(playerid)
{
	KillTimer(TimerVenda[playerid]);
	if(IsPlayerConnected(playerid)){
	    new rand = random(5);
	    if(rand == 0 || rand == 1){
	        SendClientMessage(playerid, COLOR_GREEN, "A corretora Virtual's'House conseguiu vender sua casa.");
			VenderCasa(playerid);
		}
		else{
		    SendClientMessage(playerid, COLOR_GRAY, "Infelizmente a corretora Virtual's'House não conseguiu vender sua casa.");
		}
	}
}
stock ReturnColorGT(value,min,max,colormin[],colormed[],colormax[])
{
	new r[256];
	if(value <= min) format(r,sizeof(r),colormin);
	else if(value >= max) format(r,sizeof(r),colormax);
	else format(r,sizeof(r),colormed);
	return r;
}
stock ApplyZero(id){
    new strresult[256];
	if(id < 10) format(strresult,sizeof(strresult),"0%d",id);
	else format(strresult,sizeof(strresult),"%d",id);
	return strresult;
}
public IniciarTesteLeis(playerid,plid){
	NoTeste[plid] = 1;
	InstrutorOcupado[playerid] = 1;
	SetPlayerPos(playerid,-2021.8313,-115.8208,1035.1719);
	SetPlayerPos(plid,-2025.5607,-116.6583,1035.1719);
	SetPlayerInterior(playerid,3);
	SetPlayerInterior(plid,3);
	TogglePlayerControllable(playerid, 0);
	TogglePlayerControllable(plid, 0);
	SetPlayerFacingAngle(playerid, 90);
	SetPlayerFacingAngle(plid, 270);
	SetTimerEx("IniciarTesteLeis2",4000,0,"dd",playerid,plid);
	return 1;
}
public IniciarTesteLeis2(playerid,plid){
	new string[256];
	format(string, sizeof(string), "[TESTE] Sr. %s você está iniciando seu teste para tirar a habilitação terrestre.", PlayerName(plid));
	SendPlayerMessageToPlayer(plid, playerid, string);
    format(string, sizeof(string), "[TESTE] Sr. %s você está iniciando seu teste para tirar a habilitação terrestre.", PlayerName(plid));
	SendPlayerMessageToPlayer(playerid, playerid, string);
	SetTimerEx("IniciarTesteLeis3",4000,0,"dd",playerid,plid);
	return 1;
}
public IniciarTesteLeis3(playerid,plid){
	SendPlayerMessageToPlayer(plid, playerid, "[TESTE] Aqui vão alguns leis impostas pelo Juiz para a boa conduta no trânsito de Los Santos:");
	SendPlayerMessageToPlayer(playerid, playerid,"[TESTE] Aqui vão alguns leis impostas pelo Juiz para a boa conduta no trânsito de Los Santos:");
	SetTimerEx("IniciarTesteLeis4",3000,0,"dd",playerid,plid);
	return 1;
}
public IniciarTesteLeis4(playerid,plid){
	SendPlayerMessageToPlayer(plid, playerid, "[TESTE] 1º- Não dirigir em alta velocidade.");
	SendPlayerMessageToPlayer(playerid, playerid,"[TESTE] 1º- Não dirigir em alta velocidade.");
	SetTimerEx("IniciarTesteLeis5",3000,0,"dd",playerid,plid);
	return 1;
}
public IniciarTesteLeis5(playerid,plid){
	SendPlayerMessageToPlayer(plid, playerid, "[TESTE] 2º- Não fazer ultrapassagens perigosas.");
	SendPlayerMessageToPlayer(playerid, playerid,"[TESTE] 2º- Não fazer ultrapassagens perigosas.");
	SetTimerEx("IniciarTesteLeis6",3000,0,"dd",playerid,plid);
	return 1;
}
public IniciarTesteLeis6(playerid,plid){
	SendPlayerMessageToPlayer(plid, playerid, "[TESTE] 3º- Não dirigir em mão dupla ou na contra-mão.");
	SendPlayerMessageToPlayer(playerid, playerid,"[TESTE] 3º- Não dirigir em mão dupla ou na contra-mão");
	SetTimerEx("IniciarTesteLeis7",3000,0,"dd",playerid,plid);
	return 1;
}
public IniciarTesteLeis7(playerid,plid){
	SendPlayerMessageToPlayer(plid, playerid, "[TESTE] 4º- Parar o carro quando a polícia mandar.");
	SendPlayerMessageToPlayer(playerid, playerid,"[TESTE] 4º- Parar o carro quando a polícia mandar.");
	SetTimerEx("IniciarTesteLeis8",3000,0,"dd",playerid,plid);
	return 1;
}
public IniciarTesteLeis8(playerid,plid){
	SendPlayerMessageToPlayer(plid, playerid, "[TESTE] 5º- Não bater em postes/carros/objetos e ATROPELAR pessoas.");
	SendPlayerMessageToPlayer(playerid, playerid,"[TESTE] 5º- Não bater em postes/carros/objetos e ATROPELAR pessoas.");
	SetTimerEx("IniciarTesteLeis9",3000,0,"dd",playerid,plid);
	return 1;
}
public IniciarTesteLeis9(playerid,plid){
	SendPlayerMessageToPlayer(plid, playerid, "[TESTE] 6º- Respeitar os outros motoristas/policiais.");
	SendPlayerMessageToPlayer(playerid, playerid,"[TESTE] 6º- Respeitar os outros motoristas/policiais.");
	SetTimerEx("IniciarTesteLeis10",3000,0,"dd",playerid,plid);
	return 1;
}
public IniciarTesteLeis10(playerid,plid){
	SendPlayerMessageToPlayer(plid, playerid, "[TESTE] 7º- Respeitar o limite de velocidade imposta pelos Radares.");
	SendPlayerMessageToPlayer(playerid, playerid,"[TESTE] 7º- Respeitar o limite de velocidade imposta pelos Radares.");
	SetTimerEx("IniciarTesteLeis11",3000,0,"dd",playerid,plid);
	return 1;
}
public IniciarTesteLeis11(playerid,plid){
	SendPlayerMessageToPlayer(plid, playerid, "[TESTE] 8º- Não estacionar na rua/calçadas/lojas e na frente de uma casa que não seje sua.");
	SendPlayerMessageToPlayer(playerid, playerid,"[TESTE] 8º- Não estacionar na rua/calçadas/lojas e na frente de uma casa que não seje sua.");
	SetTimerEx("IniciarTesteLeis12",3000,0,"dd",playerid,plid);
	return 1;
}
public IniciarTesteLeis12(playerid,plid){
	SendPlayerMessageToPlayer(plid, playerid, "[TESTE] 9º- Não andar com veículos que a documentação dele não seje sua.");
	SendPlayerMessageToPlayer(playerid, playerid,"[TESTE] 9º- Não andar com veículos que a documentação não seje sua.");
	SetTimerEx("IniciarTesteLeis13",3000,0,"dd",playerid,plid);
	return 1;
}
public IniciarTesteLeis13(playerid,plid){
	SendPlayerMessageToPlayer(plid, playerid, "[TESTE] 10º- Não ingerir bebidas antes de dirigir.");
	SendPlayerMessageToPlayer(playerid, playerid,"[TESTE] 10º- Não ingerir bebidas antes de dirigir.");
	SetTimerEx("LeisLidas",3000,0,"dd",playerid,plid);
	return 1;
}
public LeisLidas(playerid,plid){
    new string[256];
	format(string, sizeof(string), "[TESTE] Sr. %s caso concorde com as leis de trânsinto imposta pelo Estado de Los Santos", PlayerName(plid));
	SendPlayerMessageToPlayer(plid, playerid, string);
	SendPlayerMessageToPlayer(plid, playerid, "Digite: /concordo [leis] , caso contrário /discordo [leis]. Obs: Não use [ ]");
	format(string, sizeof(string), "[TESTE] Sr. %s caso concorde com as leis de trânsinto imposta pelo Estado de Los Santos", PlayerName(plid));
	SendPlayerMessageToPlayer(playerid, playerid, string);
	SendPlayerMessageToPlayer(playerid, playerid, "Digite: /concordo [leis] , caso contrário /discordo [leis]. Obs: Não use [ ]");
	LiAsLeis[plid] = 1;
	TogglePlayerControllable(playerid, 1);
	TogglePlayerControllable(plid, 1);
	TempoLeisTransito[plid] = SetTimerEx("DisfazerAcordo",60000,0,"dd",playerid,plid);
	InstrutorNovo[plid] = playerid;
}
public DisfazerAcordo(playerid,plid){
	KillTimer(TempoLeisTransito[plid]);
	if(LiAsLeis[plid] == 1){
	    new string[256];
		format(string, sizeof(string), "[AVISO] %s não concordou com as leis no prazo devido, cancelamos seu teste.", PlayerName(plid));
		SendClientMessage(playerid, COLOR_RED2, string);
		SendClientMessage(plid, COLOR_RED2, "Seu teste foi cancelado, você não concordou com as leis no prazo devido.");
		NoTeste[plid] = 0;
		InstrutorOcupado[playerid] = 0;
		LiAsLeis[plid] = 0;
	}
}
public AvancoDirecao(playerid,plid){
	SetPlayerPos(playerid,1753.2679,-2054.5959,14.0486);
	SetPlayerPos(plid,1746.6401,-2061.8796,13.5998);
	SetPlayerInterior(playerid,0);
	SetPlayerInterior(plid,0);
	TogglePlayerControllable(playerid, 0);
	TogglePlayerControllable(plid, 0);
	SetTimerEx("AvancoDirecao2",6000,0,"dd",playerid,plid);
	return 1;
}
public AvancoDirecao2(playerid,plid){
    new string[256];
	format(string, sizeof(string), "[TESTE] Sr. %s este carro posicionado na sua frente é o carro da baliza.", PlayerName(plid));
	SendPlayerMessageToPlayer(plid, playerid, string);
	SendPlayerMessageToPlayer(playerid, playerid, "SOU INSTRUTOR.");
	SendPlayerMessageToPlayer(plid, playerid, "[TESTE] Coloque ele entre os 2 veículos, eu avisarei quando a vaga for preenchida.");
    format(string, sizeof(string), "[TESTE] Sr. %s este carro posicionado na sua frente é o carro da baliza.", PlayerName(plid));
	SendPlayerMessageToPlayer(playerid, playerid, string);
	SendPlayerMessageToPlayer(playerid, playerid, "[TESTE] Coloque ele entre os 2 veículos, eu avisarei quando a vaga for preenchida.");
	TogglePlayerControllable(playerid, 1);
	TogglePlayerControllable(plid, 1);
	AreaBalizaHabilitada[plid] = 1;
	Chance[plid] = 3;
	SetTimerEx("AreasTestes",2000,true,"dd",playerid,plid);
	return 1;
}
public AvancoDirecao3(playerid,plid){
	TogglePlayerControllable(playerid, 0);
	TogglePlayerControllable(plid, 0);
	SetPlayerPos(playerid,1765.9423,-2021.7972,14.1488);
	SetPlayerPos(plid,1769.4495,-2020.7175,14.1371);
	SetTimerEx("AvancoDirecao4",2000,0,"dd",playerid,plid);
}

public AvancoDirecao4(playerid,plid){
	SendPlayerMessageToPlayer(plid, playerid, "[TESTE] Agora terá que passar entre os cones e não bater. Caso destrua algum o teste será refeito.");
	SendPlayerMessageToPlayer(playerid, playerid,"[TESTE] Agora terá que passar entre os cones e não bater. Caso destrua algum o teste será refeito.");
	TogglePlayerControllable(playerid, 1);
	TogglePlayerControllable(plid, 1);
	AreaZigHabilitada[plid] = 1;
	Chance[plid] = 3;
	SetTimerEx("AreasTestes",2000,true,"dd",playerid,plid);
	return 1;
}
public AvancoDirecao5(playerid,plid){
	SetPlayerPos(playerid,1785.2258,-2045.1324,13.5458);
	SetPlayerPos(plid,1782.2482,-2041.4044,13.5332);
	TogglePlayerControllable(playerid, 0);
	TogglePlayerControllable(plid, 0);
	SetTimerEx("AvancoDirecao6",6000,0,"dd",playerid,plid);
	return 1;
}
public AvancoDirecao6(playerid,plid){
    new string[256];
	format(string, sizeof(string), "[TESTE] Sr. %s agora terá que fazer um 180º e estacionar o carro.", PlayerName(plid));
	SendPlayerMessageToPlayer(plid, playerid, string);
	SendPlayerMessageToPlayer(plid, playerid, "[TESTE] Lembre-se não encoste nos cones.");
    format(string, sizeof(string), "[TESTE] Sr. %s agora terá que fazer um 180º e estacionar o carro.", PlayerName(plid));
	SendPlayerMessageToPlayer(playerid, playerid, string);
	SendPlayerMessageToPlayer(playerid, playerid, "[TESTE] Lembre-se não encoste nos cones.");
	TogglePlayerControllable(playerid, 1);
	TogglePlayerControllable(plid, 1);
	Area180Habilitada[plid] = 1;
	Chance[plid] = 3;
	SetTimerEx("AreasTestes",2000,false,"dd",playerid,plid);
	return 1;
}
public AvancoMoto(playerid,plid){
	SetPlayerPos(playerid,1773.9636,-2063.5554,13.5997);
	SetPlayerPos(plid,1770.1658,-2055.2468,13.5829);
	TogglePlayerControllable(playerid, 0);
	TogglePlayerControllable(plid, 0);
	SetTimerEx("AvancoMoto2",4000,0,"dd",playerid,plid);
	return 1;
}

public AvancoMoto2(playerid,plid){
    new string[256];
	format(string, sizeof(string), "[TESTE] Sr. %s esta moto posicionado na sua frente, é o veiculo o qual.", PlayerName(plid));
	SendPlayerMessageToPlayer(plid, playerid, string);
	SendPlayerMessageToPlayer(plid, playerid, "[TESTE] você terá que fazer Zig-Zag, entre os cones.");
    format(string, sizeof(string), "[TESTE] Sr. %s esta moto posicionado na sua frente, é o veiculo o qual.", PlayerName(plid));
	SendPlayerMessageToPlayer(playerid, playerid, string);
	SendPlayerMessageToPlayer(playerid, playerid, "[TESTE] você terá que fazer Zig-Zag, entre os cones.");
	SetTimerEx("AvancoMoto3",4000,0,"dd",playerid,plid);
	return 1;
}
public AvancoMoto3(playerid,plid){
	TogglePlayerControllable(playerid, 1);
	TogglePlayerControllable(plid, 1);
	AreaMotoHabilitada[plid] = 1;
	SendClientMessage(playerid, COLOR_INSTRUTOR, "Suba na moto e faça o Zig-Zag e estacione a moto na pequena área. Lembre-se: Não encoste nos cones.");
	Chance[plid] = 3;
	SetTimerEx("AreasTestes",2000,true,"dd",playerid,plid);
	return 1;
}
public AvancoMoto4(playerid,plid){
	SetPlayerPos(playerid,1773.9636,-2063.5554,13.5997);
	SetPlayerPos(plid,1770.1658,-2055.2468,13.5829);
	TogglePlayerControllable(playerid, 0);
	TogglePlayerControllable(plid, 0);
	SetTimerEx("AvancoMoto5",3000,0,"dd",playerid,plid);
	return 1;
}

public AvancoMoto5(playerid,plid){
    new string[256];
	format(string, sizeof(string), "[TESTE] Sr. %s você passou nos testes internos da auto-escola.", PlayerName(plid));
	SendPlayerMessageToPlayer(plid, playerid, string);
	SendPlayerMessageToPlayer(plid, playerid, "[TESTE] agora iremos para a rua aonde, você terminará seu teste.");
    format(string, sizeof(string), "[TESTE] Sr. %s você passou nos testes internos da auto-escola.", PlayerName(plid));
	SendPlayerMessageToPlayer(playerid, playerid, string);
	SendPlayerMessageToPlayer(playerid, playerid, "[TESTE] agora iremos para a rua aonde, você terminará seu teste.");
	SetTimerEx("AvancoRua",5000,0,"dd",playerid,plid);
	return 1;
}
public AvancoRua(playerid,plid){
	DestrancarVeiculo(plid,CarroAuto);
	DestrancarVeiculo(plid,CarroAuto2);
	DestrancarVeiculo(plid,CarroAuto3);
	DestrancarVeiculo(plid,CarroAuto4);
	DestrancarVeiculo(plid,CarroAuto5);
	DestrancarVeiculo(plid,CarroAuto6);
	SetPlayerPos(playerid,1796.8889,-2063.2874,13.5717);
	SetPlayerPos(plid,1806.0035,-2064.2908,13.5606);
	TogglePlayerControllable(playerid, 0);
	TogglePlayerControllable(plid, 0);
	SetTimerEx("AvancoRua2",3000,0,"dd",playerid,plid);
	return 1;
}
public AvancoRua2(playerid,plid){
    new string[256];
	format(string, sizeof(string), "[TESTE] Sr. %s, este carro na sua frente é o carro que você terá que levar até", PlayerName(plid));
	SendPlayerMessageToPlayer(plid, playerid, string);
	SendPlayerMessageToPlayer(plid, playerid, "[TESTE] até a BOATE, marcada no radar com um ícone vermelho. Aguarde...");
    format(string, sizeof(string), "[TESTE] Sr. %s, este carro na sua frente é o carro que você terá que levar até", PlayerName(plid));
	SendPlayerMessageToPlayer(playerid, playerid, string);
	SendPlayerMessageToPlayer(playerid, playerid, "[TESTE] até a BOATE, marcada no radar com um ícone vermelho. Aguarde...");
	SetTimerEx("AvancoRua3",3000,0,"dd",playerid,plid);
	return 1;
}
public AvancoRua3(playerid,plid){
	SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Você terá que acompanhar o aprendiz até a BOATE, como passageiro.");
	SendClientMessage(plid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] OBS: Você não poderá bater, caso bata o teste será refeito.");
	SetTimerEx("AvancoRua4",2000,0,"dd",playerid,plid);
	return 1;
}
public AvancoRua4(playerid,plid){
    SendPlayerMessageToPlayer(playerid, playerid, "[TESTE] Lembre-se: não leve nenhuma multa!");
    SendPlayerMessageToPlayer(plid, playerid, "[TESTE] Lembre-se: não leve nenhuma multa!");
	SendClientMessage(plid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Vá para a boate, o ponto vermelho mostrará aonde é. Você tem 4 minutos.");
	TempoRua[plid] = SetTimerEx("TempoAutoRua",242000,0,"dd",playerid,plid);
	SetTimerEx("AvancoRua5",2000,0,"dd",playerid,plid);
	InstrutorNovo[plid] = playerid;
	FazendoTesteRua[plid] = 1;
	return 1;
}

public TempoAutoRua(playerid,plid){
    new string[256];
	format(string, sizeof(string), "[TESTE] Sr. %s, você não conseguiu chegar no tempo marcado.", PlayerName(plid));
	SendPlayerMessageToPlayer(plid, playerid, string);
    format(string, sizeof(string), "[TESTE] Sr. %s, você não conseguiu chegar no tempo marcado.", PlayerName(plid));
	SendPlayerMessageToPlayer(playerid, playerid, string);
	KillTimer(TempoRua[plid]);
	if(Chance[plid] >= 1){
		Chance[plid] = Chance[plid] - 1;
		format(string, sizeof(string), "[TESTE] Sr. %s, seu teste será refeito. CHANCE: %d/3.", PlayerName(plid), Chance[plid]);
		SendPlayerMessageToPlayer(plid, playerid, string);
	    format(string, sizeof(string), "[TESTE] Sr. %s, seu teste será refeito. CHANCE: %d/3.", PlayerName(plid), Chance[plid]);
		SendPlayerMessageToPlayer(playerid, playerid, string);
		InstrutorRua[plid] = playerid;
	    SetVehicleToRespawn(GetPlayerVehicleID(plid));
		SetTimerEx("AvancoRua",5000,0,"dd",playerid,plid);
	} else {
	    SendClientMessage(plid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] Seu teste foi CANCELADO, você perdeu todas as chances, terá que refazer tudo novamemnte.");
		format(string, sizeof(string), "[AUTO-ESCOLA] O aprendiz %s perdeu todas as chances e seu teste foi cancelado!", PlayerName(playerid));
		SendClientMessage(playerid,COLOR_INSTRUTOR, string);
		Chance[playerid] = 0;
	    SetVehicleToRespawn(GetPlayerVehicleID(plid));
	    TrancarVeiculo(playerid,CarroAuto);
		TrancarVeiculo(playerid,CarroAuto2);
		TrancarVeiculo(playerid,CarroAuto3);
		TrancarVeiculo(playerid,CarroAuto4);
		TrancarVeiculo(playerid,CarroAuto5);
		TrancarVeiculo(playerid,CarroAuto6);
	}
}

public AvancoRua5(playerid,plid){
	SendClientMessage(playerid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] O teste iniciou.");
	TogglePlayerControllable(playerid, 1);
	TogglePlayerControllable(plid, 1);
	PlayerPlaySound(plid, 1052, 0.0, 0.0, 0.0);
	SetPlayerCheckpoint(plid,2423.5527,-1229.9398,24.8702,10.0);
	CheckpointStatus[plid] = AUTOESCOLARUA;
	return 1;
}
public AplicandoCarteira(playerid,plid){
    TrancarVeiculo(playerid,CarroAuto);
	TrancarVeiculo(playerid,CarroAuto2);
	TrancarVeiculo(playerid,CarroAuto3);
	TrancarVeiculo(playerid,CarroAuto4);
	TrancarVeiculo(playerid,CarroAuto5);
	TrancarVeiculo(playerid,CarroAuto6);
	RemovePlayerFromVehicle(playerid);
	SendClientMessage(plid, COLOR_INSTRUTOR, "[AUTO-ESCOLA] O aprendizado foi aprovado no teste.");
	SendClientMessage(playerid, COLOR_INSTRUTOR,"[AUTO-ESCOLA] A auto-escola lhe parabeniza, lhe daremos a carteira.");
	SetTimerEx("AplicandoCarteira2",2000,0,"dd",playerid,plid);
	return 1;
}
public AplicandoCarteira2(playerid,plid){
	SendClientMessage(playerid, COLOR_INSTRUTOR,"[AUTO-ESCOLA] Respeite as leis de trânsito. Aqui sua carteira:");
	KillTimer(TempoRua[playerid]);
	FazendoTesteRua[playerid] = 0;
	Chance[playerid] = 0;
	NoTeste[playerid] = 0;
	InstrutorOcupado[plid] = 0;
	if(GetPlayerMoney(playerid) <= 800){
	    pStats[playerid][HabTerrestre] = 1;
	    SendClientMessage(playerid, COLOR_WHITE, " ");
	    SendClientMessage(plid, COLOR_GREEN, "Habilitação de direção terrestre concedida.");
        SendClientMessage(playerid, COLOR_WHITE, " ");
		SendClientMessage(playerid, COLOR_GREEN, "Você recebeu a habilitação de direção de carros e motos.");
  		AddPlayerMoney(playerid, -800, -1);
		AddPlayerMoney(plid, 800, 3);
		AcrescentarExPoints(plid,1);
	} else {
		SendClientMessage(playerid, COLOR_GREEN, "Como não tem dinheiro em mão, a auto-escola fez débito automático.");
		pStats[playerid][Banco] -= 800;
		pStats[playerid][HabTerrestre] = 1;
	    SendClientMessage(playerid, COLOR_WHITE, " ");
	    SendClientMessage(plid, COLOR_GREEN, "Habilitação de direção terrestre concedida.");
        SendClientMessage(playerid, COLOR_WHITE, " ");
		SendClientMessage(playerid, COLOR_GREEN, "Você recebeu a habilitação de direção de carros e motos.");
		AddPlayerMoney(plid, 800, 3);
	}
}
public SavePCVPJGO(){
	new i=0;
	while(i<SLOTS2){
	    if(IsPlayerConnected(i) && Logado[i]==1){
 	        SavePlayer(i);
	    }
	    i++;
	}
	new c=0;
	while(c<LastCasa){
	    SavePickup(c);
	    c++;
	}
	new p=0;
	while(p<MAX_PROPERTIES){
	    SavePropertie(p);
	    p++;
	}
	new v=0;
	while(v<MAX_VEHICLES){
	    if(!fexist(VehicleFile(v))) break;
     	SaveVehicle(v);
	    v++;
	}
	SaveJornais();
	SaveGangues();
    SaveCell("Utilidades/celulares.rpg");
    SalvarPastaGangZones("Utilidades/zones.rpg");
    SavePastaUtilitarios("Utilidades/utilitarios.cfg");
}
public Anunciar(){
	for(new i = 0; i < SLOTS2; i++){
	    if(IsPlayerConnected(i) && Logado[i] == 1 && !IsPlayerInAnyVehicle(i)){
	        EnviarAnuncio(i);
		}
	}
}
public AnunciarPropeComu(){
	VerOutrosAvisos = VerOutrosAvisos + 1;
	new propaganda = random(3);
	if(propaganda == 0){
	    SendClientMessageTV(COLOR_WHITE, "|==================| BALADA |==================|");
		SendClientMessageTV(COLOR_RED2, "Cansado de não ter o que fazer? Todo dia a mesma coisa de voltar pro trabalho e ficar andando procurando algo?");
		SendClientMessageTV(COLOR_RED2, "Seus problemas ACABARAM... Venha até a Balada, aqui temos danças, músicas, petiscos, tudo para você aproveitar!");
	}
	else if(propaganda == 1){
	    SendClientMessageTV(COLOR_WHITE, "|==================| ESTÁDIO |==================|");
	    SendClientMessageTV(COLOR_JORNALISTA, "Amantes do esporte, venham curtir conosco nossos grandes campeonatos de Derby!");
	    SendClientMessageTV(COLOR_JORNALISTA, "são realizados todas quartas e sábados, contamos com sua presença, você poderá ser o novo campeão!");
	}
	else if(propaganda == 2){
	    SendClientMessageTV(COLOR_WHITE, "|==================| RESTAURANTE |==================|");
		SendClientMessageTV(COLOR_VERDECLARO, "Com fome? Venha para o Restaurante Life's'FOOD, aqui temos comidas, sobremesas, bebidas, sucos tudo para lhe agradar!");
		SendClientMessageTV(COLOR_VERDECLARO, "E tudo por um preço tão baixo, que você nem vai acreditar!");
	}
	else if(propaganda == 3){
	    SendClientMessageTV(COLOR_WHITE, "|==================| CENTRAL 24/7 |==================|");
	    SendClientMessageTV(COLOR_COP_SWAT, "Venha conhecer nossas lojas: Eletrodomésticos, celulares, recargas, tudo aquilo que você sempre quis por");
	    SendClientMessageTV(COLOR_COP_SWAT, "um preço muito baixo, domingo haverá promoção, se comprar um celular ele virá recarregado com 30 créditos, aproveite!");
		SendClientMessageTV(COLOR_COP_SWAT, "Está esperando o que? VENHA!");
	}
	else if(propaganda == 4){
	    SendClientMessageTV(COLOR_WHITE, "|==================| SORVETERIA |==================|");
		SendClientMessageTV(COLOR_ROSACLARO, "Calor? Que tal se refrescar com um delicioso sorvete? Se quiser venha até a sorveteria!");
		SendClientMessageTV(COLOR_ROSACLARO, "aqui temos alimentos deliciosos com preços baixos, você não pode perder!");
	}
	SendClientMessageTV(COLOR_WHITE, "|==============================================================|");
	if(VerOutrosAvisos == 5 || VerOutrosAvisos == 10 || VerOutrosAvisos == 15 || VerOutrosAvisos == 20 || VerOutrosAvisos == 25 || VerOutrosAvisos == 29){
		for(new i = 0; i < SLOTS2; i++){
			PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
		}
		SendClientMessageToAll(COLOR_RED2, " ");
		SendClientMessageToAll(COLOR_TITULO_AVISO, "|=========================| Virtual Life RPG informa: |=========================|");
		new rand = random(43);
		if(rand==0){
			SendClientMessageToAll(COLOR_AVISO, "Para comprar 1 veículo você tem duas opções:");
			SendClientMessageToAll(COLOR_AVISO, "1º Ir na revendedora de veículos. ID: 32.");
			SendClientMessageToAll(COLOR_AVISO, "2º Ou ver se tem algum vendedor de carros ONLINE.");
			SendClientMessageToAll(COLOR_INFO_AVISO, "/veiculos = Valores dos carros.");
		}
		else if(rand==1){
			SendClientMessageToAll(COLOR_AVISO, "O Chat Global foi desabilitado, agora você terá que adquirir um CELULAR.");
			SendClientMessageToAll(COLOR_AVISO, "Isso mesmo, vá na Loja de Utilidades ID: 25. Compre o Celular e a Agenda.");
			SendClientMessageToAll(COLOR_AVISO, "Lembrando é necessária a recarga do celular.");
		}
		else if(rand==2){
			SendClientMessageToAll(COLOR_AVISO, "No Virtual Life RPG você tem como entrar na sua casa.");
			SendClientMessageToAll(COLOR_AVISO, "Poderá convidar, tomar banho, urinar, fazer festas, comer, guardar dinheiro, armas, drogas...");
			SendClientMessageToAll(COLOR_AVISO, "Para ter essa comodidade, compre os eletrodomésticos básicos: Fogão, Geladeira, TV, Rádio.");
			SendClientMessageToAll(COLOR_INFO_AVISO,  "Para mais detalhes: /infocasa, /infocofre, /sisteletro.");
		}
		else if(rand==3){
			SendClientMessageToAll(COLOR_AVISO, "Aconselhamos que veja todos os nossos comandos, perguntas sem nexo");
			SendClientMessageToAll(COLOR_AVISO, "Será advertido por não ter lido: /comandos até /comandos15.");
		}
		else if(rand==4){
			SendClientMessageToAll(COLOR_AVISO, "ATENÇÃO!! Terá que tomar banho e urinar. Caso não cuide poderá pegar uma doença.");
			SendClientMessageToAll(COLOR_AVISO, "Para saber seu estado agora digite: /meustatus. Qualquer dúvida: /sisthigiene .");
		}
		else if(rand==5){
			SendClientMessageToAll(COLOR_AVISO, "Insatisfeito com algum jogador? Ele lhe insultou e você quer saber o que os outros jogadores acham?");
			SendClientMessageToAll(COLOR_AVISO, "Seus problemas acabaram! Você pode kickar um jogador do servidor. /votarkick [id].");
		}
		else if(rand==6){
			SendClientMessageToAll(COLOR_AVISO, "É proibido o Uso de God Mod, Money Hack, Car's Fly, Weapon Cheat.");
			SendClientMessageToAll(COLOR_AVISO, "Sua conta será banida e seu nick BLOQUEADO.");
		}
		else if(rand==7){
		   	SendClientMessageToAll(COLOR_AVISO, "Você trabalha em função da hora do jogo. Então fique ligado: /dia");
		   	SendClientMessageToAll(COLOR_AVISO, "Veja seu horário de trabalho: /meuhorario.");
		}
		else if(rand==8){
		   	SendClientMessageToAll(COLOR_AVISO, "ATENÇÃO!! Não faça pergunta. Aonde fica isso, aonde fica aquilo.");
			SendClientMessageToAll(COLOR_AVISO, "Use o GPS! Todos os Locais ultilizados no gamemode está aí:");
		    SendClientMessageToAll(COLOR_INFO_AVISO, "/locais até /locais8. /gps [ID] /desligargps.");
		}
		else if(rand==9){
		    SendClientMessageToAll(COLOR_AVISO, "Precisando de uma graninha? Aqui no Virtual Life temos Sub Missões, são como empregos temporários!");
		    SendClientMessageToAll(COLOR_AVISO, "As Sub Missões não lhe darão ExPoint, somente dinheiro, e não será muito, pois é temporário!");
		    SendClientMessageToAll(COLOR_AVISO, "Você poderá entrar em uma Sub Missão quando estiverem contratando alguém, vá até o local e digite /aceitaremprego");
		}
		else if(rand==10){
		    SendClientMessageToAll(COLOR_AVISO, "Respeite as regras do servidor \"/regras1 e /regras2\" caso não obedecer poderá ser punido...");
		    SendClientMessageToAll(COLOR_AVISO, "Obrigado e Bom Jogo!");
		}
		else if(rand==11){
		    SendClientMessageToAll(COLOR_AVISO, "Está procurando algo para se divertir no seu dia de folga?");
		    SendClientMessageToAll(COLOR_AVISO, "Pescar? Polícia e Ladrão? Derby? Corrida?");
		    SendClientMessageToAll(COLOR_INFO_AVISO, "Veja mais em: /lazeres e /sistentretenimento.");
		}
		else if(rand==12){
		    SendClientMessageToAll(COLOR_AVISO, "Mude sua skin existe lojas no Virtual Life RPG aonde você poderá comprar uma.");
		    SendClientMessageToAll(COLOR_INFO_AVISO, "Para obter informação sobre seu skin: /skininfo [ID].");
		}
		else if(rand==13){
		    SendClientMessageToAll(COLOR_AVISO, "Você pode fazer o que quiser com seu imóvel, isso mesmo.");
		    SendClientMessageToAll(COLOR_AVISO, "Veja como adquirir um imóvel de um amigo ou locar:");
		    SendClientMessageToAll(COLOR_INFO_AVISO, "/sistemadecasas");
		}
		else if(rand==14){
		    SendClientMessageToAll(COLOR_AVISO, "Você tem como tunar seu carro e salvar os componentes, agora no Virtual Life.");
		    SendClientMessageToAll(COLOR_AVISO, "Você poderá fazer inúmeras modificações no seu carro:");
		    SendClientMessageToAll(COLOR_INFO_AVISO, "/sistcarros.");
		}
		else if(rand==15){
		    SendClientMessageToAll(COLOR_AVISO, "Para adquirir ExPoints basta trabalhar. Usando os comandos da sua profissão.");
		    SendClientMessageToAll(COLOR_AVISO, "O Servidor computa toda ação que você faz, quando você atingir uma certa quantia de ExPoints,");
		    SendClientMessageToAll(COLOR_AVISO, "eles serão convertidos em 1 Level (XL) e assim poderá ir upando.");
		}
		else if(rand==16){
		    SendClientMessageToAll(COLOR_AVISO, "Fique por dentro das modificações do Virtual Life RPG.");
		    SendClientMessageToAll(COLOR_AVISO, "Veja o que nós temos de novo: /rpglife até /rpglife11 e /novidades /novidades2.");
		}
		else if(rand==17){
		    SendClientMessageToAll(COLOR_AVISO, "Sua vida diminui com o Tempo é sempre bom estar na dinâmica do jogo");
		    SendClientMessageToAll(COLOR_AVISO, "Comprando bebidas e pizzas dos vendedores para aumentar sua vida.");
		}
		else if(rand==18){
		    SendClientMessageToAll(COLOR_AVISO, "Quer se proteger? Adquira o Porte de Armas com o Juiz ou o Delegado, em seguida");
		    SendClientMessageToAll(COLOR_AVISO, "compre as armas do Vendedor ou na Ammu Nation a Munição é vendida na Loja ID: 36.");
		}
		else if(rand==19){
		    SendClientMessageToAll(COLOR_AVISO, "Uma saidinha sempre é bom! Vá no nosso Club de strip-tease quando tiver uma stripper.");
		    SendClientMessageToAll(COLOR_AVISO, "É sempre bom relaxar no seu dia de folga, caso o negócio fique bom compre uma camisinha e... já sabe. ^^");
		}
		else if(rand==20){
		    SendClientMessageToAll(COLOR_AVISO, "Que tal tentar a sorte? Loteria ou Corrida de Cavalos? Você quem sabe, o prêmio da loteria é extrondante.");
		    SendClientMessageToAll(COLOR_AVISO, "O da Corrida de Cavalos é relativo com o que você aposta, são 8 cavalos.");
		    SendClientMessageToAll(COLOR_AVISO, "Sexta-Feira às 19:00, sai o resultado.");
		    SendClientMessageToAll(COLOR_INFO_AVISO,  "Loteria ID: 24 / Corrida de Cavalos ID: 26.");
		}
		else if(rand==21){
		    SendClientMessageToAll(COLOR_AVISO, "Aconselhamos que você tire a Habilitação para veículos. Preços: /carteiras.");
		    SendClientMessageToAll(COLOR_AVISO, "Agende um teste: /agendarteste. Auto-Escola ID: 20.");
		}
		else if(rand==22){
		    SendClientMessageToAll(COLOR_AVISO, "Leve seu amigo(a) ou sua namorada(o) para tomar um sorvete na nossa sorveteria.");
		    SendClientMessageToAll(COLOR_AVISO, "São vários sabores diferentes./sabores.");
		    SendClientMessageToAll(COLOR_INFO_AVISO,  "Sorveteria ID: 2");
		}
		else if(rand==23){
		    SendClientMessageToAll(COLOR_AVISO, "Uma Baladinha com drinks, petiscos e uma boa música é sempre bom, então visite");
		    SendClientMessageToAll(COLOR_AVISO, "nossa Balada no seu dia de folga.");
		    SendClientMessageToAll(COLOR_INFO_AVISO,  "Balada ID: 21");
		}
		else if(rand==24){
		    SendClientMessageToAll(COLOR_AVISO, "O Estádio de Los Santos fica aberto aos Domingos para você realizar seus Stunt's");
		    SendClientMessageToAll(COLOR_INFO_AVISO,  "Estádio de Los Santos ID: 28");
		}
		else if(rand==25){
		    SendClientMessageToAll(COLOR_AVISO, "Quer disgrutar de um ambiente clássico e de uma maravilhosa comida?");
		    SendClientMessageToAll(COLOR_AVISO, "Os preços não são baratos mais o ambiente, o som, e a comida. Hummmm Delícia.");
		    SendClientMessageToAll(COLOR_INFO_AVISO,  "Restaurante ID: 31");
		}
		else if(rand==26){
		    SendClientMessageToAll(COLOR_AVISO, "Temos uma Locadora de Veículos a qual você pode disfrutar de belíssimos carros");
		    SendClientMessageToAll(COLOR_AVISO, "a um preço razoável, aconselhamos passar lá e ver os carros, dar um rolé com um esportivo.");
		    SendClientMessageToAll(COLOR_INFO_AVISO,  "Locadora de Veículo ID: 37");
		}
		else if(rand==27){
		    SendClientMessageToAll(COLOR_AVISO, "ATENÇÃO! Ao pegar sua profissão só poderá trocar se conseguir 1 Level de Experiência (XL) com a mesma.");
		    SendClientMessageToAll(COLOR_INFO_AVISO,  "Então trabalhe para que ninguém pense que você só quer pegar os salários.");
		}
		else if(rand==28){
		    SendClientMessageToAll(COLOR_AVISO, "Você pode entrar em carros que não são seus comprando Chaves Mestras.");
		    SendClientMessageToAll(COLOR_AVISO,  "É uma forma de tomar emprestado, já que o cara deixou o veículo destrancado.");
		    SendClientMessageToAll(COLOR_AVISO,  "Mais atenção a polícia pode vir prender você por motivo de roubo de automóvel.");
		    SendClientMessageToAll(COLOR_INFO_AVISO,  "Chaveiro ID: 43");
		}
		else if(rand==29){
		    SendClientMessageToAll(COLOR_AVISO, "Compre seu Celular e sua Agenda, ao comprar não esqueça de colocar créditos.");
		    SendClientMessageToAll(COLOR_AVISO,  "Com o celular você pode rastrear um jogador, mandar SMS, e conversar por telefone.");
		    SendClientMessageToAll(COLOR_AVISO,  "Veja mais em: /celularinfo e /celularinfo2.");
		    SendClientMessageToAll(COLOR_INFO_AVISO,  "Loja de Utilidades ID: 25");
		}
		else if(rand==30){
		    SendClientMessageToAll(COLOR_AVISO, "Compre o Celular e tenha como rastrear um amigo seu no radar.");
		    SendClientMessageToAll(COLOR_AVISO, "Além de se comunicar com ele, com o celular você também pode mandar SMS.");
		    SendClientMessageToAll(COLOR_AVISO, "Veja mais em: /celularinfo e /celularinfo2.");
		    SendClientMessageToAll(COLOR_INFO_AVISO,  "Loja de Utilidades ID: 25");
		}
		else if(rand==31){
		    SendClientMessageToAll(COLOR_AVISO, "Compre o Celular e tenha como rastrear um amigo seu no radar.");
		    SendClientMessageToAll(COLOR_AVISO, "Além de se comunicar com ele, com o celular você também pode mandar SMS.");
		    SendClientMessageToAll(COLOR_AVISO, "Veja mais em: /celularinfo e /celularinfo2.");
		    SendClientMessageToAll(COLOR_INFO_AVISO,  "Loja de Utilidades ID: 25");
		}
		else if(rand==32){
			if(IsHaveProf(PROSTITUTA)){
			    SendClientMessageToAll(COLOR_AVISO, "Que tal ir pra Club de Strip-Tease e assistir um Strip-Tease?");
			    SendClientMessageToAll(COLOR_AVISO, "É amigão, existe strippers no Club vá logo!");
			    SendClientMessageToAll(COLOR_INFO_AVISO,  "Club de Strip-Tease ID: 27");
			} else {
			    SendClientMessageToAll(COLOR_AVISO, "No Club de Strip-Tease tem como você comer, dançar, não precisa ter");
			    SendClientMessageToAll(COLOR_AVISO, "prostitutas lá, leve seus amigos.");
			    SendClientMessageToAll(COLOR_INFO_AVISO,  "Club de Strip-Tease ID: 27");
			}
		}
		else if(rand==33){
		    SendClientMessageToAll(COLOR_AVISO, "Preste atenção! O comando de entregar os documentos é: /entregardocumentos [id]");
		    SendClientMessageToAll(COLOR_AVISO, "Logo em seguida o policial vai ver, solicite que ele devolva com o comando: /devolverdocumentos.");
		}
		else if(rand==34){
		    SendClientMessageToAll(COLOR_AVISO, "As casas tem cofre. Para não pagar o JUROS absurdo do Banco aconselhamos guardar suas coisas lá.");
		    SendClientMessageToAll(COLOR_AVISO, "Para mais informações: /infocofre.");
		}
		else if(rand==34){
		    SendClientMessageToAll(COLOR_AVISO, "Banco um excelente lugar para ganhar dinheiro! Isso mesmo!");
		    SendClientMessageToAll(COLOR_AVISO, "Você pode aplicar seu dinheiro e esperar para ver se sua");
		    SendClientMessageToAll(COLOR_AVISO, "aplicação pode render ou não render de acordo com a Bolsa de Valores!");
		}
		else if(rand==35){
		    SendClientMessageToAll(COLOR_AVISO, "Faça seus seguros, seguro de vida, seguro de carro, seguro de imóvel.");
		    SendClientMessageToAll(COLOR_AVISO, "Você com seguro de vida pode restaurar Saúde no Hospital.");
		    SendClientMessageToAll(COLOR_AVISO, "Você com seguro de carro não pagará pelo conserto caso ele esteje destruído.");
	        SendClientMessageToAll(COLOR_AVISO, "Você com seguro de imóvel poderá vender seu imóvel e ser recompensado");
			SendClientMessageToAll(COLOR_AVISO, "com 50, 75 e até 100 por cento do valor pago.");
			SendClientMessageToAll(COLOR_AVISO, "Mais info: /precoseguros");
		}
		else if(rand==36){
		    SendClientMessageToAll(COLOR_AVISO, "APOSTE! APOSTE! APOSTE! APOSTE! APOSTE! APOSTE!");
		    SendClientMessageToAll(COLOR_AVISO, "CAVALOS! CAVALOS! CAVALOS! CAVALOS! CAVALOS!");
		    SendClientMessageToAll(COLOR_AVISO, "Você pode tentar a sorte com os prêmios de milhares de doláres.");
		    SendClientMessageToAll(COLOR_AVISO, "Resultado: Sexta-Feira às 19:00");
		    SendClientMessageToAll(COLOR_INFO_AVISO, "Loteria ID: 24 . Corrida de Cavalos ID: 26.");
		}
		else if(rand==37){
		    SendClientMessageToAll(COLOR_AVISO, "Veja as profissões do servidor! Tome conhecimento do que poderá ser.");
		    SendClientMessageToAll(COLOR_AVISO, "São 40 profissões, todas com comandos, chegando a algumas terem mais de 25.");
		    SendClientMessageToAll(COLOR_AVISO, "Outra não se engane pela profissão ela pode ser muito boa!");
		    SendClientMessageToAll(COLOR_INFO_AVISO, "/profissoes até /profissoes6");
		}
		else if(rand==38){
		    SendClientMessageToAll(COLOR_AVISO, "Respeite as LEIS do servidor tanto na área Cívil, como no Trânsito.");
		    SendClientMessageToAll(COLOR_AVISO, "São 21 Leis a quais você tem que obedecer, caso não obedeça.");
		    SendClientMessageToAll(COLOR_AVISO, "Poderá ser preso!");
		    SendClientMessageToAll(COLOR_INFO_AVISO, "/leis1 até /leis3.");
		}
		else if(rand==39){
		    SendClientMessageToAll(COLOR_AVISO, "Leis foram feitas para serem cumpridas, então temos as leis");
		    SendClientMessageToAll(COLOR_AVISO, "de trânsito e de pedestres, caso não obedeça");
		    SendClientMessageToAll(COLOR_AVISO, "Poderá ser preso!!");
		    SendClientMessageToAll(COLOR_INFO_AVISO, "/leis1 até /leis3.");
		}
		else if(rand==40){
		    SendClientMessageToAll(COLOR_AVISO, "A Polícia está aqui para servir você e todos os cidadãos de Los Santos!");
		    SendClientMessageToAll(COLOR_AVISO, "Portanto caso veje algum desrespeito as leis da polícia comunique..");
		    SendClientMessageToAll(COLOR_INFO_AVISO, "/policia1 e /policia2.");
		}
		else if(rand==41){
		    SendClientMessageToAll(COLOR_AVISO, "\"Juro solenemente honrar minha farda\"");
		    SendClientMessageToAll(COLOR_AVISO, "A polícia está para lhe ajudar! Veja as leis que os oficiais devem seguir:");
		    SendClientMessageToAll(COLOR_INFO_AVISO, "/policia1 e /policia2.");
		}
		else if(rand==42){
		    SendClientMessageToAll(COLOR_AVISO, "Medo de não aguentar a fome? Temos 1 solução enquanto você espera o");
		    SendClientMessageToAll(COLOR_AVISO, "Barman, entregador de pizza, etc.. Sanduíche Natural na loja.");
		    SendClientMessageToAll(COLOR_AVISO, "É uma reserva que aumenta sua saúde em 5 por cento, o tempo para um vendedor chegar até você.");
		    SendClientMessageToAll(COLOR_INFO_AVISO, "Loja de Utiliaddes: 25.");
		}
		SendClientMessageToAll(COLOR_TITULO_AVISO, "|___________________________________________________________________________|");
		SendClientMessageToAll(COLOR_WHITE, " ");
	}
	if(VerOutrosAvisos == 30){
	    VerOutrosAvisos = 0;
		new comu = random(4);
		if(comu == 0){
			SendClientMessageToAll(COLOR_ORANGE, " ");
			SendClientMessageToAll(COLOR_ORANGE, "Reload Virtual Life RPG:");
			SendClientMessageToAll(COLOR_CONTRABANDISTA, "Mais informações sobre o Mode/Clan? Sugestões? Dúvidas? Acesse:");
			SendClientMessageToAll(0xFFB4F4AA, "http://www.orkut.com/Community.aspx?cmm=45269704");
	        SendClientMessageToAll(COLOR_ORANGE, " ");
		}
		else if(comu == 1){
		    SendClientMessageToAll(COLOR_ORANGE, " ");
		    SendClientMessageToAll(COLOR_WHITE, "Reload Virtual Life RPG mais que um RPG, UMA VIDA!");
		    SendClientMessageToAll(COLOR_PALHA, "Entre em nossa comunidade no orkut:");
		    SendClientMessageToAll(COLOR_CONTRABANDISTA, "http://www.orkut.com/Community.aspx?cmm=45269704");
		    SendClientMessageToAll(COLOR_PALHA, "Dê idéias/sugestões e obtenha mais informações sobre o clan/mode!");
	        SendClientMessageToAll(COLOR_ORANGE, " ");
		}
		else if(comu == 2){
		    SendClientMessageToAll(COLOR_ORANGE, " ");
		    SendClientMessageToAll(COLOR_WHITE, "Reload Virtual Life RPG:");
		    SendClientMessageToAll(COLOR_PALHA, "Não gostou do mode? Acha que está faltando algo? Quer obter mais informações sobre o clan?");
		    SendClientMessageToAll(COLOR_CONTRABANDISTA, "Acesse:");
			SendClientMessageToAll(COLOR_CONTRABANDISTA, "http://www.orkut.com/Community.aspx?cmm=45269704");
		    SendClientMessageToAll(COLOR_VERDECLARO, "Ai você poderá obter informações sobre o mode/clan e ainda poderá dar idéias ao gamemode.");
	        SendClientMessageToAll(COLOR_ORANGE, " ");
		}
		else if(comu == 3){
		    SendClientMessageToAll(COLOR_ORANGE, " ");
		    SendClientMessageToAll(COLOR_RED2, "Reload Virtual Life RPG:");
		    SendClientMessageToAll(COLOR_WHITE, "Veja as novidades do gamemode em: /sistemas , /novidades , /rpglife");
		    SendClientMessageToAll(COLOR_WHITE, "Você também pode acessar nossa comunidade no orkut para dar idéias/sugestões, toda idéia será bem-vinda se for original!");
		    SendClientMessageToAll(COLOR_CONTRABANDISTA, "Comunidade: http://www.orkut.com/Community.aspx?cmm=45269704");
		    SendClientMessageToAll(COLOR_ORANGE, " ");
		}
   	}
}
public ZerarAvisoVelocidade(playerid) avisovelo[playerid] = 0;

stock ComprarPropriedade(playerid,propriedade)
{
    new string[256];
    if(GetPlayerMoney(playerid) < ValoresPropriedades[propriedade]){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro!");
	    return 1;
	}
	if(DonoDaPropriedade(playerid,propriedade)){
		SendClientMessage(playerid, COLOR_GRAY, "Você já é o dono dessa propriedade!");
   		return 1;
	}
	else{
	    new str[256];
		set(str,PropertieFile(propriedade));
		if(!fexist(str)){ new File:prpfile = fopen(str,io_write); fclose(prpfile); }
   		if(compare(propStats[propriedade][Dono1],"NONE")){
			AddPlayerMoney(playerid,-ValoresPropriedades[propriedade],-1);
			set(propStats[propriedade][Dono1],PlayerName(playerid));
			set(propStats[propriedade][Dono2],"NONE");
			set(propStats[propriedade][Trabalhador1],"NONE");
			set(propStats[propriedade][Trabalhador2],"NONE");
			set(propStats[propriedade][Trabalhador3],"NONE");
			set(propStats[propriedade][Trabalhador4],"NONE");
			set(propStats[propriedade][Trabalhador5],"NONE");
			set(propStats[propriedade][Trabalhador6],"NONE");
			set(propStats[propriedade][Trabalhador7],"NONE");
			set(propStats[propriedade][Socio1],"NONE");
			set(propStats[propriedade][Socio2],"NONE");
			set(propStats[propriedade][Socio3],"NONE");
			propStats[propriedade][Lucro] = 0;
			propStats[propriedade][Prejuizo] = 0;
			propStats[propriedade][Investimento] = 0;
    		format(string,sizeof(string),"Você comprou a(o) %s por $%d",NomesPropriedades[propriedade],ValoresPropriedades[propriedade]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string,sizeof(string),"[PROPRIEDADES] A propriedade %s foi comprada pelo novo investidor %s, promessas viram...",NomesPropriedades[propriedade],PlayerName(playerid));
			SendClientMessageToAll(COLOR_TRANSPORTE_DE_VALORES, string);
			return 1;
		}
		else{
  			format(string,sizeof(string),"Essa propriedade já possui um dono (%s)",propStats[propriedade][Dono1]);
	    	SendClientMessage(playerid, COLOR_GRAY, string);
		    SendClientMessage(playerid, COLOR_GRAY, "Para compra-la dele use: /comprarpropriedadedodono [id] [propriedade] [valor]");
			return 1;
		}
	}
}

public GetPlayerDistanceToPoint(playerid,Float:x,Float:y)
{
	new Float:x1,Float:y1,Float:z1;
	new Float:tmpdis;
	GetPlayerPos(playerid,x1,y1,z1);
	tmpdis = floatsqroot(floatpower(floatabs(floatsub(x,x1)),2)+floatpower(floatabs(floatsub(y,y1)),2));
	return floatround(tmpdis);
}

public RecusarDroga(playerid, plid){
	if(DrogaOferecida[plid] != 0){
	    new string[256];
		DrogaOferecida[plid] = 0;
	    QtdDrogaV[plid] = 0;
		DrogasNegoci[playerid] = 0;
	    format(string,sizeof(string),"Aew maluco o %s não respondeu a tempo. Que isso assim você perde respeito.", PlayerName(playerid));
	    SendClientMessage(TraficanteTra[playerid], COLOR_TRAFICANTE,string);
		SendClientMessage(playerid, COLOR_WHITE, "Você não respondeu a tempo a proposta de comprar drogas.");
	}
}
public OnPlayerPrivmsg(playerid, recieverid, text[])
{
    SendClientMessage(playerid, COLOR_ASSALTANTE,   "O comando /PM está desabilitado, para mais informações digite /celularinfo");
	return 0;
}
stock GetPickupCasa(playerid)
{
	new str[256];
	for(new i=0; i<MAX_CASAS; i++){
        set(str,PickupFile(i));
	    if(fexist(str)){
	        if(compare(pckStats[i][PickupDono],PlayerName(playerid))) return i;
		}
	}
	return -1;
}
stock QtProf(prof){
	new result = 0;
	for(new i = 0; i < SLOTS2; i++){
	    if(IsPlayerConnected(i) && Profissao[i] == prof) result++;
	}
	return result;
}
stock QtAdmins(){
	new result = 0;
	for(new i = 0; i < SLOTS2; i++){
		if(IsPlayerConnected(i) && IsPlayerAdmin(i)) result++;
	}
	return result;
}
stock Salario()
{
	for(new i; i<SLOTS2; i++) {
	    if(IsPlayerConnected(i)) {
			if(fexist(PlayerFile(PlayerName(i)))){
				SendClientMessage(i, ProfColors[Profissao[i]], StringsSalario[Profissao[i]]);
				pStats[i][BancoTrabalho] += IntSalario[Profissao[i]];
				if(Profissao[i] == COP_SWAT || Profissao[i] == EXERCITO || Profissao[i] == COP_RODOVIARIO || Profissao[i] == COP_MILITAR || Profissao[i] == COP_NARCOTICOS || Profissao[i] == DELEGADO){
					AcrescentarExPoints(i,3);
				}
			}
			else{
				printf("ERRO: %s não conseguiu receber o salário pois seu arquivo não foi encontrado",PlayerName(i));
				return 0;
			}
		}
	}
	return 1;
}
stock IsValidSkin(skin)
{
    if(skin==3 || skin==4 || skin==5 || skin==6 || skin==8 || skin==42 || skin==65 || skin==74 || skin==86 || skin==119 || skin==149 || skin==208 || skin==273 || skin==274 || skin==289 || skin>=300) return false;
    return true;
}
public RetirarTV(playerid)
{
    if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	if(strcmp(pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid),true)){
	    SendClientMessage(playerid, COLOR_GRAY, "TE PEGUEI!!! Tentando pegar um móvel que não pertence a sua casa ahn?! Melhor parar...");
		return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][TV] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem TV...");
	    return 1;
	}
	pckStats[PickupEntradaCasa[playerid]][TV] = 0;
	pStats[playerid][PTV] = 1;
	SendClientMessage(playerid, COLOR_GREEN, "TV retirada...");
	return 1;
}
public RetirarRadio(playerid)
{
    if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	if(strcmp(pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid),true)){
	    SendClientMessage(playerid, COLOR_GRAY, "TE PEGUEI!!! Tentando pegar um móvel que não pertence a sua casa ahn?! Melhor parar...");
		return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][Radio]== 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem rádio...");
	    return 1;
	}
	pckStats[PickupEntradaCasa[playerid]][Radio] = 0;
	pStats[playerid][PRadio] = 1;
	SendClientMessage(playerid, COLOR_GREEN, "Rádio retirado...");
	return 1;
}
public RetirarFogao(playerid)
{
    if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	if(strcmp(pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid),true)){
	    SendClientMessage(playerid, COLOR_GRAY, "TE PEGUEI!!! Tentando pegar um móvel que não pertence a sua casa ahn?! Melhor parar...");
		return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][Fogao] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem fogão...");
	    return 1;
	}
	pckStats[PickupEntradaCasa[playerid]][Fogao] = 0;
	pStats[playerid][PFogao] = 1;
	SendClientMessage(playerid, COLOR_GREEN, "Fogão retirado...");
	return 1;
}
public RetirarTelefone(playerid)
{
	new msg[256];
    if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	if(strcmp(pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid),true)){
	    SendClientMessage(playerid, COLOR_GRAY, "TE PEGUEI!!! Tentando pegar um móvel que não pertence a sua casa ahn?! Melhor parar...");
		return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][Telefone] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem fogão...");
	    return 1;
	}
	pckStats[PickupEntradaCasa[playerid]][Telefone] = 0;
	pStats[playerid][PTelefone] = 1;
	pStats[playerid][PTelefoneNumb] = pckStats[PickupEntradaCasa[playerid]][TelefoneNumb];
	pckStats[PickupEntradaCasa[playerid]][TelefoneNumb] = 0;
	format(msg,sizeof(msg),"Telefone retirado, número: %d",pStats[playerid][PTelefoneNumb]);
	SendClientMessage(playerid, COLOR_GREEN, msg);
	return 1;
}
public RetirarGeladeira(playerid)
{
    if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	if(strcmp(pckStats[PickupEntradaCasa[playerid]][PickupDono],PlayerName(playerid),true)){
	    SendClientMessage(playerid, COLOR_GRAY, "TE PEGUEI!!! Tentando pegar um móvel que não pertence a sua casa ahn?! Melhor parar...");
		return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][Geladeira] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa não tem geladeira...");
	    return 1;
	}
	pckStats[PickupEntradaCasa[playerid]][Geladeira] = 0;
	pStats[playerid][PGeladeira] = 1;
	SendClientMessage(playerid, COLOR_GREEN, "Geladeira retirada...");
	return 1;
}
public ColocarTV(playerid)
{
    if(pStats[playerid][PTV] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhuma TV para colocar aqui...");
	    return 1;
	}
	if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	new interior = pckStats[PickupEntradaCasa[playerid]][Int];
	if(interior == 0 || interior == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa não possui espaço para televisão!");
	    return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][TV] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa já tem TV...");
	    return 1;
	}
	pckStats[PickupEntradaCasa[playerid]][TV] = 1;
	pStats[playerid][PTV] = 0;
	SendClientMessage(playerid, COLOR_GREEN, "TV colocada na casa com sucesso!");
	return 1;
}
public ColocarRadio(playerid)
{
    if(pStats[playerid][PRadio] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhum rádio para colocar aqui...");
	    return 1;
	}
	if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	new interior = pckStats[PickupEntradaCasa[playerid]][Int];
	if(interior == 1 || interior == 5){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa não possui espaço para rádio!");
	    return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][Radio] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa já tem rádio...");
	    return 1;
	}
	pckStats[PickupEntradaCasa[playerid]][Radio] = 1;
	pStats[playerid][PRadio] = 0;
	SendClientMessage(playerid, COLOR_GREEN, "Rádio colocado na casa com sucesso!");
	return 1;
}
public ColocarFogao(playerid)
{
    if(pStats[playerid][PFogao] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhum fogão.");
	    return 1;
	}
	if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][Fogao] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa já tem fogão.");
	    return 1;
	}
	pckStats[PickupEntradaCasa[playerid]][Fogao] = 1;
	pStats[playerid][PFogao] = 0;
	SendClientMessage(playerid, COLOR_GREEN, "O Fogão foi instalado, agora poderá usar na preparação de comida.");
	return 1;
}
public ColocarTelefone(playerid)
{
	new msg[256];
    if(pStats[playerid][PTelefone] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhum telefone.");
	    return 1;
	}
	if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][Telefone] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa já tem telefone.");
	    return 1;
	}
	pckStats[PickupEntradaCasa[playerid]][Telefone] = 1;
	pStats[playerid][PTelefone] = 0;
	pckStats[PickupEntradaCasa[playerid]][TelefoneNumb] = pStats[playerid][PTelefoneNumb];
	pStats[playerid][PTelefoneNumb] = 0;
	format(msg,sizeof(msg),"O telefone foi instalado, número da casa: %d",pckStats[PickupEntradaCasa[playerid]][TelefoneNumb]);
	SendClientMessage(playerid, COLOR_GREEN, msg);
	return 1;
}
public ColocarGeladeira(playerid)
{
    if(pStats[playerid][PGeladeira] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhuma geladeira, para colocar aqui.");
	    return 1;
	}
	if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	new interior = pckStats[PickupEntradaCasa[playerid]][Int];
	if(interior == 0 || interior == 1 || interior == 2){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa não possui espaço para geladeira!");
	    return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][Geladeira] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa já tem Geladeira.");
	    return 1;
	}
	pckStats[PickupEntradaCasa[playerid]][Geladeira] = 1;
	pStats[playerid][PGeladeira] = 0;
	SendClientMessage(playerid, COLOR_GREEN, "A Geladeira foi instalada com sucesso.");
	return 1;
}
public InstalarAlarmeBasico(playerid)
{
    if(pStats[playerid][ABasico] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhum alarme básico para colocar aqui...");
	    return 1;
	}
	if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][Alarme] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa já tem alarme básico...");
	    return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][Alarme] == 2) SendClientMessage(playerid, COLOR_GRAY, "O alarme avançado foi removido da casa!");
	pckStats[PickupEntradaCasa[playerid]][Alarme] = 1;
	pStats[playerid][ABasico] = 0;
	SendClientMessage(playerid, COLOR_GREEN, "Alarme básico colocado na casa com sucesso!");
	return 1;
}
public InstalarAlarmeAvancado(playerid)
{
    if(pStats[playerid][AAvancado] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhum alarme avançado para colocar aqui...");
	    return 1;
	}
	if(NaCasa[playerid] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não está em nenhuma casa!");
	    return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][Alarme] == 2){
	    SendClientMessage(playerid, COLOR_GRAY, "Essa casa já tem alarme avançado...");
	    return 1;
	}
	if(pckStats[PickupEntradaCasa[playerid]][Alarme] == 1) SendClientMessage(playerid, COLOR_GRAY, "O alarme básico foi removido da casa!");
	pckStats[PickupEntradaCasa[playerid]][Alarme] = 2;
	pStats[playerid][AAvancado] = 0;
	SendClientMessage(playerid, COLOR_GREEN, "Alarme avançado colocado na casa com sucesso!");
	return 1;
}
public ComprarTV(playerid)
{
	if(pStats[playerid][PTV] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Você já tem uma TV em mãos, coloque ela em sua casa!");
	    return 1;
	}
	if(GetPlayerMoney(playerid) < ValorTV){
		SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro!");
		return 1;
	}
	else{
	    pStats[playerid][PTV] = 1;
	    AddPlayerMoney(playerid,-ValorTV,-1);
	    SendClientMessage(playerid, COLOR_GREEN, "Você comprou uma televisão, a desvantagem nisso tudo é que sua conta de luz vai aumentar =/");
	    SendClientMessage(playerid, COLOR_GREEN, "Para instalar digite: /colocartv.");
	}
	return 1;
}
public ZerarMultou(playerid) JaMultou[playerid] = 0;
public PrendendoJogador(playerid,plid){
    KillTimer(TempoPreso[playerid]);
	new string[256];
	if(SeEntregando[plid] == 1){
		SendClientMessage(plid, COLOR_TRAFICANTE, "Você não se entregou e seu nome foi automaticamente colocado na lista de procurados com base na Lei Estadual Nº5473/2.");
		pStats[plid][Wanted] = 1;
        format(string, sizeof(string), "O Suspeito %s foi colocado na lista de procurados pelo oficial %s por %s",PlayerName(plid),PlayerName(playerid),Motivos[Motivo[plid]]);
		SendClientMessageToAll(COLOR_COP_MILITAR,string);
		return 1;
	}
	else {
	    new Float:x,Float:y,Float:z,Float:ang;
		TogglePlayerControllable(playerid,0);
		TogglePlayerControllable(plid,0);
		GetPlayerPos(plid,x,y,z);
		GetXYInFrontOfPlayer(plid,x,y,1.0);
		SetPlayerPos(playerid,x,y,z);
		GetPlayerFacingAngle(plid,ang);
		if(ang+180 > 360) SetPlayerFacingAngle(playerid,ang-180);
		else SetPlayerFacingAngle(playerid,ang+180);
	    SetPlayerSpecialAction(plid,SPECIAL_ACTION_HANDSUP);
	    ApplyAnimation(playerid,"PED","ARRESTgun",4.1,0,1,1,1,1);
	    SendPlayerMessageToPlayer(playerid,playerid, "Você está preso pelo Departamento de Polícia de Los Santos.");
	    SendPlayerMessageToPlayer(plid,playerid, "Você está preso pelo Departamento de Polícia de Los Santos.");
        SetTimerEx("HistPri1",5000,0,"dd",playerid,plid);
 	}
	return 1;
}
public CaixaMensagem(playerid){
    new string[256];
    EmLigacao[playerid]=0;
	KillTimer(TocandoBIP[playerid]);
	KillTimer(TempoCaixaMensagem[playerid][0]);
    if(IsStringAName(RecebedorMensagem[playerid])){
		new Called = IDName(RecebedorMensagem[playerid]);
		EmLigacao[Called] = 0;
		if(compare(pStats[Called][MSGBIP],"NONE")){
    		format(string,sizeof(string),"[Secretária Eletrônica] No momento %s não pode atender, deixe sua mensagem após o BIP:",RecebedorMensagem[playerid]);
		}
		else{
	    	format(string,sizeof(string),"[Secretária Eletrônica] %s",pStats[Called][MSGBIP]);
		}
	}
    else{
    	if(compare(GetValue(RecebedorMensagem[playerid],"MSGBIP"),"NONE")){
    		format(string,sizeof(string),"[Secretária Eletrônica] No momento %s não pode atender, deixe sua mensagem após o BIP:",RecebedorMensagem[playerid]);
		}
		else{
	    	format(string,sizeof(string),"[Secretária Eletrônica] %s",GetValue(RecebedorMensagem[playerid],"MSGBIP"));
		}
	}
	SendClientMessage(playerid, COLOR_LIGHT_YELLOW, string);
    TempoCaixaMensagem[playerid][1] = SetTimerEx("BIP",5000,0,"d",playerid);
}
public BIP(playerid){
    KillTimer(TempoCaixaMensagem[playerid][1]);
    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	SendClientMessage(playerid, COLOR_AZULPLUS, "* BIP");
	CaixaPostal2[playerid] = 1;
}
public BipDoTelefone(playerid){
    PlayerPlaySound(playerid, 1137, 0.0, 0.0, 0.0);
	SetTimerEx("TocandoBIP",2000,0,"d",playerid);
}
public NaoAceitou(playerid,plid){
	if(AindaNaoAceitou[plid] == 1){
		Revistando[playerid] = 0;
		Revistado[plid] = 0;
	    SendClientMessage(playerid, COLOR_COP_RODOVIARIO,"[OFICIAL] A revista não foi concluída o jogador não deu a resposta.");
	    SendClientMessage(playerid, COLOR_COP_RODOVIARIO,"[OFICIAL] Ele pode ser um suspeito verifique");
	    SendClientMessage(plid, COLOR_COP_RODOVIARIO,"Você não aceitou a revista.");
	}
}
public HistPri1(playerid,plid){
    SendPlayerMessageToPlayer(playerid, playerid, "Você tem o direito de permanecer em silêncio.");
    SendPlayerMessageToPlayer(plid, playerid, "Você tem o direito de permanecer em silêncio.");
    SetTimerEx("HistPri2",3000,0,"dd",playerid,plid);
    return 1;
}

public HistPri2(playerid,plid){
    SendPlayerMessageToPlayer(playerid, playerid, "Qualquer coisa que disser pode e será usado contra você no Tribunal.");
    SendPlayerMessageToPlayer(plid, playerid, "Qualquer coisa que dizer pode e será usado contra você no Tribunal.");
    SetTimerEx("HistPri3",3000,0,"dd",playerid,plid);
    return 1;
}

public HistPri3(playerid,plid){
    SendPlayerMessageToPlayer(playerid, playerid , "Você tem o direito de falar com um advogado, no estado de Los Santos não existe defensores públicos.");
    SendPlayerMessageToPlayer(plid, playerid, "Você tem o direito de falar com um advogado, no estado de Los Santos não existe defensores públicos.");
    SetTimerEx("ConsiderePreso",5000,0,"dd",playerid,plid);
    return 1;
}

public ConsiderePreso(playerid,plid){
    ClearAnimations(playerid);
    ClearAnimations(plid);
	TogglePlayerControllable(playerid,1);
	PodeAlgemar[playerid][plid] = 1;
	SendClientMessage(playerid, COLOR_COP_SWAT, "Pode algemar o jogador e entrega-lo para a Delegacia...");
	return 1;
}
public ComprarRadio(playerid)
{
    if(pStats[playerid][PRadio] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Você já tem um rádio em mãos, coloque ele em sua casa!");
	    return 1;
	}
	if(GetPlayerMoney(playerid) < ValorRadio){
		SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro!");
		return 1;
	}
	else{
	    pStats[playerid][PRadio] = 1;
	    AddPlayerMoney(playerid,-ValorRadio,-1);
	    SendClientMessage(playerid, COLOR_GREEN, "Você comprou um rádio! Agora sua casa vai bombar e você poderá perturbar seus vizinhos a vontade!");
	    SendClientMessage(playerid, COLOR_GREEN, "Para instalar digite: /colocarradio.");
	}
	return 1;
}
public ComprarGeladeira(playerid)
{
    if(pStats[playerid][PGeladeira] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Você já tem uma geladeira, coloque ele em sua casa!");
	    return 1;
	}
	if(GetPlayerMoney(playerid) < ValorGeladeira){
		SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro!");
		return 1;
	}
	else{
	    pStats[playerid][PGeladeira] = 1;
	    AddPlayerMoney(playerid,-ValorGeladeira,-1);
	    SendClientMessage(playerid, COLOR_GREEN, "Você comprou uma linda geladeira! Agora poderá guardar condimentos como: Peixes, Pizzas, Saladas, Refrigenrantes, Sucos, etc...");
	    SendClientMessage(playerid, COLOR_GREEN, "Para instalar digite: /colocargeladeira.");
	}
	return 1;
}
public ComprarFogao(playerid){
    if(pStats[playerid][PFogao] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Você já tem um fogao, coloque ele em sua casa!");
	    return 1;
	}
	if(GetPlayerMoney(playerid) < ValorFogao){
		SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro!");
		return 1;
	}
	else{
	    pStats[playerid][PFogao] = 1;
	    AddPlayerMoney(playerid,-ValorFogao,-1);
	    SendClientMessage(playerid, COLOR_GREEN, "Você comprou um fogão! Agora poderá comer, beber e fazer petiscos deliciosos em sua casa.");
	    SendClientMessage(playerid, COLOR_GREEN, "Para instalar digite: /colocarfogao.");
	}
	return 1;
}
public ComprarTelefone(playerid)
{
	new msg[256];
    if(pStats[playerid][PTelefone] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Você já tem um telefone, coloque ele em sua casa!");
	    return 1;
	}
	if(GetPlayerMoney(playerid) < ValorTelefone){
		SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro!");
		return 1;
	}
	else{
		pStats[playerid][PTelefone] = 1;
	    AddPlayerMoney(playerid,-ValorTelefone,-1);
	    pStats[playerid][PTelefoneNumb] = LastPhone;
     	format(msg,sizeof(msg),"Você comprou um telefone... Seu número: %d",LastPhone);
        SendClientMessage(playerid, COLOR_GREEN, msg);
		LastPhone++;
	    SendClientMessage(playerid, COLOR_GREEN, "Para instalar digite: /colocartelefone.");
	}
	return 1;
}
public ComprarAlarmeBasico(playerid)
{
    if(pStats[playerid][ABasico] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Você já tem um alarme básico, instale ele em sua casa!");
	    return 1;
	}
	if(GetPlayerMoney(playerid) < 1300){
		SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro!");
		return 1;
	}
	else{
	    pStats[playerid][ABasico] = 1;
	    AddPlayerMoney(playerid,-1300,-1);
	    SendClientMessage(playerid, COLOR_GREEN, "Você comprou um alarme básico! Isso manterá os ladrões longe de sua casa...");
	    SendClientMessage(playerid, COLOR_GREEN, "Para instalar digite: /instalaralarmebasico.");
	}
	return 1;
}
public ComprarAlarmeAvancado(playerid)
{
    if(pStats[playerid][AAvancado] == 1){
	    SendClientMessage(playerid, COLOR_GRAY, "Você já tem um alarme avançado, instale ele em sua casa!");
	    return 1;
	}
	if(GetPlayerMoney(playerid) < 2200){
		SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro!");
		return 1;
	}
	else{
	    pStats[playerid][AAvancado] = 1;
	    AddPlayerMoney(playerid,-2200,-1);
	    SendClientMessage(playerid, COLOR_GREEN, "Você comprou um alarme avançado! A policia o agradece por facilitar o trabalho dela!");
	    SendClientMessage(playerid, COLOR_GREEN, "Para instalar digite: /instalaralarmeavancado.");
	}
	return 1;
}
public ImpostoBanco()
{
	for(new i=0; i<SLOTS2; i++){
	    if(IsPlayerConnected(i)){
		    new string[256];
		    new impostobanco;
		    if(pStats[i][Banco] > 0){
		   		impostobanco = pStats[i][Banco]/44;
		   		pStats[i][Banco] -= impostobanco;
		   	}
		    else if(pStats[i][Banco] > 20000){
				impostobanco = pStats[i][Banco]/40;
		        pStats[i][Banco] -= impostobanco;
			}
			else if(pStats[i][Banco] > 100000){
				impostobanco = pStats[i][Banco]/36;
		        pStats[i][Banco] -= impostobanco;
			}
			else if(pStats[i][Banco] > 200000){
				impostobanco = pStats[i][Banco]/32;
		        pStats[i][Banco] -= impostobanco;
			}
			format(string, sizeof(string), "[BANCO] A Taxa de juros do banco chegou valor: $%d. E Foi debitada automaticamente na sua conta. Grato, Gerência.", impostobanco);
			SendClientMessage(i, COLOR_DELEGADO, string);
		}
	}
}


stock PagamentoSeguro()
{
	for(new i=0; i<SLOTS2; i++){
	    if(Profissao[i] == CORRETOR_SEGUROS) AcrescentarExPoints(i,1);
		if(pStats[i][Seguro] == 1){
			if(pStats[i][Banco] >= 400){
			    pStats[i][Banco] -= 400;
				SendClientMessage(i, COLOR_GREEN, "Foi retirado $400 de seu banco para pagar o seu seguro de vida!");
                AcrescentarLucro(3,400);
			}
			else{
				SendClientMessage(i, COLOR_GRAY, "Seu seguro de vida foi removido pois você não possui dinheiro para pagar!");
				pStats[i][Seguro] = 0;
			}
		}
		if(pStats[i][SeguroCasa] == 1){
		    if(pStats[i][Banco] >= 500){
		        pStats[i][Banco] -= 500;
				SendClientMessage(i, COLOR_GREEN, "Foi retirado $500 de seu banco para pagar o seu seguro de imóvel!");
				AcrescentarLucro(3,500);
			}
			else{
				SendClientMessage(i, COLOR_GRAY, "Seu seguro de imóvel foi removido pois você não possui dinheiro para pagar!");
				pStats[i][SeguroCasa] = 0;
			}
		}
  	}
}
stock EnviarCartaAnonima(name[], msg[])
{
    new str[256];
	format(str,sizeof(str),"%s3.txt",name);
	new File:pfile;
	if(!fexist(str)) pfile = fopen(str,io_write);
	else pfile = fopen(str,io_append);
	fwrite(pfile,msg);
	fclose(pfile);
	return 1;
}
stock EnviarCarta(playerid, name[], msg[])
{
	new str[256];
	new string[256];
	format(str,sizeof(str),"%s3.txt",name);
	format(string,sizeof(string),"Remetente: %s [ %s ]",PlayerName(playerid),msg);
	new File:pfile;
	if(!fexist(str)) pfile = fopen(str,io_write);
	else pfile = fopen(str,io_append);
	fwrite(pfile,string);
	fclose(pfile);
	return 1;
}
stock MostrarCorrespondencia(playerid)
{
	new str[256];
	format(str,sizeof(str),"%s3.txt",PlayerName(playerid));
	if(!fexist(str)) return SendClientMessage(playerid, COLOR_GRAY, "Nenhuma carta encontrata...");
	new File:pfile = fopen(str,io_read),tmp[256];
	while(fread(pfile,tmp,256)){
	    SendClientMessage(playerid,COLOR_LIGHT_YELLOW,tmp);
	}
	fclose(pfile);
	return 1;
}
stock ExcluirCorrespondencia(playerid)
{
    new str[256];
	format(str,sizeof(str),"%s3.txt",PlayerName(playerid));
	if(fexist(str)) fremove(str);
	else SendClientMessage(playerid, COLOR_GRAY, "Nenhuma carta encontrada...");
	return 1;
}
stock AnunciarVendas()
{
	SendClientMessageToAll(COLOR_WHITE, "|============================| New Paper's Life - Venda de imóveis |============================|");
	new string[256],str[256],qtvenda,var1,var2;
	for(new p = 0; p < MAX_CASAS; p++){
		set(string,PickupFile(p));
		if(!fexist(string)) break;
		if(IsStringAName(pckStats[p][PickupDono])) var1 = pStats[IDName(pckStats[p][PickupDono])][VendendoCasa];
		else var1 = strval(GetValue(PlayerFile(pckStats[p][PickupDono]),"VendendoCasa"));
		if(var1 == 1){
		    qtvenda++;
		    var2 = strval(GetValue(PlayerFile(pckStats[p][PickupDono]),"ValorCasa"));
			format(str,sizeof(str),"Imóvel a venda - Dono: %s - Valor: $%d,00 dólares",pckStats[p][PickupDono],var2);
			SendClientMessageToAll(COLOR_LIGHT_YELLOW, str);
		}
	}
	if(qtvenda == 0) {
		SendClientMessageToAll(COLOR_LIGHT_YELLOW, "Nenhum imóvel à venda foi encontrado por Los Santos!");
	}
	SendClientMessageToAll(COLOR_WHITE, "|============================================================================================|");
	return 1;
}
stock AnunciarAlugueis()
{
	SendClientMessageToAll(COLOR_WHITE, "|============================| New Paper's Life - Aluguel de imóveis |============================|");
	new string[256],str[256],qtvenda,var1,var2,var3;
	for(new p = 0; p < MAX_CASAS; p++){
		set(string,PickupFile(p));
		if(!fexist(string)) break;
		var1 = strval(GetValue(PlayerFile(pckStats[p][PickupDono]),"LocandoCasa"));
		if(var1 == 1){
		    var2 = strval(GetValue(PlayerFile(pckStats[p][PickupDono]),"ValorAluguel"));
		    var3 = strval(GetValue(PlayerFile(pckStats[p][PickupDono]),"DiasAluguel"));
		    qtvenda++;
			format(str,sizeof(str),"Imóvel em locação - Dono: %s - Valor: $%d,00 dólares - Dias: %d",pckStats[p][PickupDono],var2,var3);
			SendClientMessageToAll(COLOR_LIGHT_YELLOW, str);
		}
	}
	if(qtvenda == 0) {
		SendClientMessageToAll(COLOR_LIGHT_YELLOW, "Nenhum imóvel para locação foi encontrado por Los Santos!");
	}
	SendClientMessageToAll(COLOR_WHITE, "|=============================================================================================|");
    return 1;
}
stock EnviarMensagemCaixaPostal(playerid, name[], msg[])
{
	new str[256],string[256];
	format(str,sizeof(str),"%s2.txt",name);
	format(string,sizeof(string),"%s: %s",PlayerName(playerid),msg);
	new File:pfile;
	if(!fexist(str)) pfile = fopen(str,io_write);
	else pfile = fopen(str,io_append);
	fwrite(pfile,string);
	fwrite(pfile,"\r\n");
	fclose(pfile);
	return 1;
}
stock MostrarCaixaPostal(playerid)
{
	new str[256];
	format(str,sizeof(str),"%s2.txt",PlayerName(playerid));
	if(!fexist(str)) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhuma mensagem na sua caixa postal...");
	new File:pfile = fopen(str,io_read),tmp[256];
	while(fread(pfile,tmp,256)){
		SendClientMessage(playerid,COLOR_WHITE,tmp);
	}
	fclose(pfile);
	return 1;
}
stock ExcluirCaixaPostal(playerid)
{
	new str[256];
	format(str,sizeof(str),"%s2.txt",PlayerName(playerid));
	if(fexist(str)) fremove(str);
	else SendClientMessage(playerid, COLOR_GRAY, "Você não tem nenhuma mensagem na sua caixa postal...");
	return 1;
}
stock GuardarMensagem(name[], msg[])
{
	if(!fexist(PlayerFile(name))) return 0;
	new playermsgfile[256];
	format(playermsgfile,sizeof(playermsgfile),"%s.txt",name);
	new File:arquivemsg;
	if(!fexist(playermsgfile)){ arquivemsg = fopen(playermsgfile,io_write); }
	else{ arquivemsg = fopen(playermsgfile,io_append); }
	fwrite(arquivemsg,msg);
	fwrite(arquivemsg,"\r\n");
	fclose(arquivemsg);
	return 1;
}
stock EnviarMensagensGuardadas(playerid)
{
	new playermsgfile[256];
	format(playermsgfile,sizeof(playermsgfile),"%s.txt",PlayerName(playerid));
	if(!fexist(playermsgfile)) return 0;
	new File:arquivemsg = fopen(playermsgfile,io_read),tmp[256];
	while(fread(arquivemsg,tmp,sizeof(tmp))){
		SendClientMessage(playerid,COLOR_WHITE,tmp);
	}
	fclose(arquivemsg);
	fremove(playermsgfile);
	return 1;
}
stock ComprarSorvete2(playerid,sabor)
{
	if(GetPlayerMoney(playerid) < SaborValor2[sabor]) return SendClientMessage(playerid, COLOR_GRAY, "Você não tem dinheiro!");
	new str[256];
	format(str,sizeof(str),"Sorvete%s",SaborName2[sabor]);
	if(sabor == 0) pStats[playerid][SorveteNapolitano] += 3;
	else if(sabor == 1) pStats[playerid][SorveteChocolate] += 3;
	else if(sabor == 2) pStats[playerid][SorveteFlocos] += 3;
	new string[256];
	format(string,sizeof(string),"Você comprou um sorvete de %s. Você pode servir esse pote 3 vezes.",SaborName2[sabor]);
	SendClientMessage(playerid, COLOR_GREEN, string);
	AddPlayerMoney(playerid,-SaborValor2[sabor],-1);
	return 1;
}
stock DebugPickups(){
	new str[256],str2[256],str3[18],msg[256],lastpickup;
	for(new i = 0; i < MAX_CASAS; i++){
	    set(str,PickupFile(i));
		if(fexist(str)){
			if(i == lastpickup+1){
			    if(IsStringAName(pckStats[i][PickupDono])) pStats[IDName(pckStats[i][PickupDono])][PickupCasa] = i;
				valstr(str3,i);
				SetValue(PlayerFile(pckStats[i][PickupDono]),"PickupCasa",str3);
				lastpickup = i;
			}
			else{
				set(str2,PickupFile(lastpickup+1));
				if(!fexist(str2)){
        	        fcopy(str,str2);
        	        fremove(str);
					lastpickup += 1;
					format(msg,sizeof(msg),"Pickup pulada: %d... Setada para %d",i,lastpickup);
					print(msg);
					writelog(msg);
				}
			}
		}
	}
	format(msg,sizeof(msg),"DEBUG PICKUPS: Debug pickups activated!");
	print(msg);
	writelog(msg);
	return 1;
}
stock ComprarSorvete(playerid,sabor)
{
    if(GetPlayerMoney(playerid) >= SaborValor[sabor]){
    	TomandoSorvete[playerid] = 1;
		new string[256];
 		format(string, sizeof(string), "Você está tomando um sorvete de %s.",SaborName[sabor]);
  		SendClientMessage(playerid, COLOR_WHITE, string);
   		AddPlayerMoney(playerid,-SaborValor[sabor],-1);
    	TogglePlayerControllable(playerid,0);
   		ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
   		ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
    	SetTimerEx("TomarSorvete",7000,false,"d",playerid);
		return 1;
	} else {
		SendClientMessage(playerid, COLOR_GRAY, "Você não possui dinheiro para pagar o sorvete!");
 		return 1;
	}
}
stock ReturnValueStr(value){
	new stringval[256];
	valstr(stringval,value);
	return stringval;
}
stock VenderCasa(playerid)
{
	new stringtext[256];
	new reembolso;
	if(pStats[playerid][SeguroCasa] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não ganhou um reembolso pois não tinha seguro de imóvel!");
        format(stringtext,sizeof(stringtext),"%s vendeu sua casa mas não ganhou reembolso pois não possuia seguro!",PlayerName(playerid));
		SendClientMessageAdmin(COLOR_WHITE, stringtext);
	}
	else{
	    new strrand = random(3);
		if(strrand == 0) reembolso = pStats[playerid][ValorCasa];
		if(strrand == 1) reembolso = pStats[playerid][ValorCasa]/4*3;
		if(strrand == 2) reembolso = pStats[playerid][ValorCasa]/2;
		format(stringtext,sizeof(stringtext),"O reembolso foi de $%d. O dinheiro foi depositado em sua conta!",reembolso);
		SendClientMessage(playerid, COLOR_GREEN, stringtext);
		pStats[playerid][BancoResidencia] += reembolso;
		format(stringtext,sizeof(stringtext),"%s vendeu sua casa e ganhou um reembolso de $%d",PlayerName(playerid),reembolso);
		SendClientMessageAdmin(COLOR_WHITE, stringtext);
	}
	new playerpck = pStats[playerid][PickupCasa];
	DestroyPickup(playerpck);
	pckStats[playerpck][pX] = 0.0;
	pckStats[playerpck][pY] = 0.0;
	pckStats[playerpck][pZ] = 0.0;
	CreatePickup(1272,1,INVALID_POS_X,INVALID_POS_Y,INVALID_POS_Z);
	pStats[playerid][SpawnPosX] = 1685.4244;
	pStats[playerid][SpawnPosY] = -2333.4529;
	pStats[playerid][SpawnPosZ] = 13.5469;
	pStats[playerid][SpawnPosAng] = 360;
	pStats[playerid][ValorCasa] = 0;
	pStats[playerid][Casa] = 0;
	pStats[playerid][VendendoCasa] = 0;
	pStats[playerid][LocandoCasa] = 0;
	pStats[playerid][DiasAluguel] = 0;
}

stock SocioDaPropriedade(playerid,propriedade)
{
	if(compare(propStats[propriedade][Socio1],PlayerName(playerid)) || compare(propStats[propriedade][Socio2],PlayerName(playerid)) || compare(propStats[propriedade][Socio3],PlayerName(playerid))) return true;
	else return false;
}

stock NomearSocio(playerid,propriedade)
{
	if(strcmp(propStats[propriedade][Socio1],"NONE",true) == 0) return set(propStats[propriedade][Socio1],PlayerName(playerid));
    if(strcmp(propStats[propriedade][Socio2],"NONE",true) == 0) return set(propStats[propriedade][Socio2],PlayerName(playerid));
    if(strcmp(propStats[propriedade][Socio3],"NONE",true) == 0) return set(propStats[propriedade][Socio3],PlayerName(playerid));
	return 1;
}

stock DesnomearSocio(playerid,propriedade)
{
    new str[256];
	set(str,PropertieFile(propriedade));
	if(strcmp(propStats[propriedade][Socio1],PlayerName(playerid),true) == 0) set(propStats[propriedade][Socio1],"NONE");
    if(strcmp(propStats[propriedade][Socio2],PlayerName(playerid),true) == 0) set(propStats[propriedade][Socio2],"NONE");
    if(strcmp(propStats[propriedade][Socio3],PlayerName(playerid),true) == 0) set(propStats[propriedade][Socio3],"NONE");
}

stock QtSocios(propriedade)
{
	new result;
    if(strcmp(propStats[propriedade][Socio1],"NONE",true)) result++;
    if(strcmp(propStats[propriedade][Socio2],"NONE",true)) result++;
    if(strcmp(propStats[propriedade][Socio3],"NONE",true)) result++;
    return result;
}

stock DonoDaPropriedade(playerid,propriedade)
{
	if(strcmp(propStats[propriedade][Dono1],PlayerName(playerid),false) == 0 || strcmp(propStats[propriedade][Dono2],PlayerName(playerid),false) == 0) return true;
	else return false;
}

stock QtDonos(propriedade)
{
    new result = 0;
	if(strcmp(propStats[propriedade][Dono1],"NONE",false)) result++;
	if(strcmp(propStats[propriedade][Dono2],"NONE",false)) result++;
	return result;
}

stock CriarJornal(playerid,titulo[])
{
	new string[256],str[256];
	set(str,JornalFile(titulo));
	if(fexist(str)) return SendClientMessage(playerid, COLOR_GRAY, "Esse jornal já existe!");
	if(pStats[playerid][Jornal] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você só pode criar um jornal!");
	new File:jornalfile = fopen(str,io_write),bool:searched=false;
	fclose(jornalfile);
	for(new jn = 0; jn < LastJN; jn++){
	    if(compare(Jornais[jn],"NONE")){
	        set(Jornais[jn],titulo);
	        searched=true;
	        break;
		}
	}
	if(!searched){
		set(Jornais[LastJN],titulo);
		LastJN++;
	}
	set(jStats[GetJornalID(titulo)][Autor],PlayerName(playerid));
	set(jStats[GetJornalID(titulo)][CEmpresas1],"NONE");
	set(jStats[GetJornalID(titulo)][CEmpresas2],"NONE");
	set(jStats[GetJornalID(titulo)][CEmpresas3],"NONE");
	set(jStats[GetJornalID(titulo)][CHomicidios1],"NONE");
	set(jStats[GetJornalID(titulo)][CHomicidios2],"NONE");
	set(jStats[GetJornalID(titulo)][CHomicidios3],"NONE");
	set(jStats[GetJornalID(titulo)][CEsporte1],"NONE");
	set(jStats[GetJornalID(titulo)][CEsporte2],"NONE");
	set(jStats[GetJornalID(titulo)][CEsporte3],"NONE");
	set(jStats[GetJornalID(titulo)][CMercadorias1],"NONE");
	set(jStats[GetJornalID(titulo)][CMercadorias2],"NONE");
	set(jStats[GetJornalID(titulo)][CMercadorias3],"NONE");
	set(jStats[GetJornalID(titulo)][COutros1],"NONE");
	set(jStats[GetJornalID(titulo)][COutros2],"NONE");
	set(jStats[GetJornalID(titulo)][COutros3],"NONE");
	pStats[playerid][Jornal] = 1;
	set(pStats[playerid][TituloJornal],titulo);
	format(string,sizeof(string),"[NOTICIAS] %s decidiu criar seu próprio jornal e o chamou de %s!",PlayerName(playerid),titulo);
	SendClientMessageToAll(COLOR_WHITE, string);
	return 1;
}
stock ExcluirJornal(playerid)
{
	new string[256];
	if(pStats[playerid][Jornal] == 0) return SendClientMessage(playerid, COLOR_GRAY, "Você não possui jornal!");
	set(string,JornalFile(pStats[playerid][TituloJornal]));
	fremove(string);
	set(Jornais[GetJornalID(pStats[playerid][TituloJornal])],"NONE");
	SendClientMessage(playerid, COLOR_WHITE, "Jornal excluído...");
	format(string,sizeof(string),"[NOTICIAS] %s desistiu do seu jornal... %s agora não existe mais!",PlayerName(playerid),pStats[playerid][TituloJornal]);
	SendClientMessageToAll(COLOR_WHITE, string);
	pStats[playerid][Jornal] = 0;
	set(pStats[playerid][TituloJornal],"NONE");
	return 1;
}
stock QtGangMembers(gangname[])
{
	new result;
	for(new m = 0; m < gStats[GetGangID(gangname)][GangMembros]; m++){
	    if(!compare(MembersGang[GetGangID(gangname)][m],"NONE")){
	        result++;
		}
	}
	return result;
}
stock PropriedadeLotada(propriedade)
{
    new str[256];
	set(str,PropertieFile(propriedade));
	if(strcmp(propStats[propriedade][Trabalhador1],"NONE",true) == 0 || strcmp(propStats[propriedade][Trabalhador2],"NONE",true) == 0 || strcmp(propStats[propriedade][Trabalhador3],"NONE",true) == 0 || strcmp(propStats[propriedade][Trabalhador4],"NONE",true) == 0
	|| strcmp(propStats[propriedade][Trabalhador5],"NONE",true) == 0 || strcmp(propStats[propriedade][Trabalhador6],"NONE",true) == 0 || strcmp(propStats[propriedade][Trabalhador7],"NONE",true) == 0){ return false; }
	else return true;
}
stock DemitirJogador(playerid,propriedade)
{
    new str[256];
	set(str,PropertieFile(propriedade));
	if(strcmp(propStats[propriedade][Trabalhador1],PlayerName(playerid),true) == 0) set(propStats[propriedade][Trabalhador1],"NONE");
	if(strcmp(propStats[propriedade][Trabalhador2],PlayerName(playerid),true) == 0) set(propStats[propriedade][Trabalhador2],"NONE");
	if(strcmp(propStats[propriedade][Trabalhador3],PlayerName(playerid),true) == 0) set(propStats[propriedade][Trabalhador3],"NONE");
	if(strcmp(propStats[propriedade][Trabalhador4],PlayerName(playerid),true) == 0) set(propStats[propriedade][Trabalhador4],"NONE");
	if(strcmp(propStats[propriedade][Trabalhador5],PlayerName(playerid),true) == 0) set(propStats[propriedade][Trabalhador5],"NONE");
	if(strcmp(propStats[propriedade][Trabalhador6],PlayerName(playerid),true) == 0) set(propStats[propriedade][Trabalhador6],"NONE");
	if(strcmp(propStats[propriedade][Trabalhador7],PlayerName(playerid),true) == 0) set(propStats[propriedade][Trabalhador7],"NONE");
	pStats[playerid][AumentoPropriedade] = 0;
}
stock ContratarJogador(playerid,propriedade)
{
	if(strcmp(propStats[propriedade][Trabalhador1],"NONE",true) == 0){
		set(propStats[propriedade][Trabalhador1],PlayerName(playerid));
		return 1;
	}
	else if(strcmp(propStats[propriedade][Trabalhador2],"NONE",true) == 0){
		set(propStats[propriedade][Trabalhador2],PlayerName(playerid));
		return 1;
	}
	else if(strcmp(propStats[propriedade][Trabalhador3],"NONE",true) == 0){
		set(propStats[propriedade][Trabalhador3],PlayerName(playerid));
		return 1;
	}
	else if(strcmp(propStats[propriedade][Trabalhador4],"NONE",true) == 0){
		set(propStats[propriedade][Trabalhador4],PlayerName(playerid));
		return 1;
	}
	else if(strcmp(propStats[propriedade][Trabalhador5],"NONE",true) == 0){
		set(propStats[propriedade][Trabalhador5],PlayerName(playerid));
		return 1;
	}
	else if(strcmp(propStats[propriedade][Trabalhador6],"NONE",true) == 0){
		set(propStats[propriedade][Trabalhador6],PlayerName(playerid));
		return 1;
	}
	else if(strcmp(propStats[propriedade][Trabalhador7],"NONE",true) == 0){
		set(propStats[propriedade][Trabalhador7],PlayerName(playerid));
		return 1;
	}
	else return 0;
}
stock PagamentoSegurancas()
{
    new QtSegurancas;
	new str[256],string[256];
	for(new i=0; i<SLOTS2; i++){
	    if(pStats[i][NSegurancas] > 0){
			QtSegurancas = pStats[i][NSegurancas];
			for(new s=0; s<QtSegurancas; s++){
			    format(str,sizeof(str),"Seguranca_%d",s);
                if(strcmp(GetSegurancas[i][s],"NONE",true) == 0) {
					printf("%s não precisou pagar o salário do seguranca %d pois ele ja foi demitido...",PlayerName(i),s);
				}
				else{
				    pStats[i][Banco] -= GetSegurancasValor[i][s];
				    if(IsStringAName(GetSegurancas[i][s])) pStats[IDName(GetSegurancas[i][s])][BancoTrabalho] += GetSegurancasValor[i][s];
				    else GiveValue(GetSegurancas[i][s],"BancoTrabalho",GetSegurancasValor[i][s]);
				    format(string,sizeof(string),"Você pagou o salário de %s de $%d",GetSegurancas[i][s],GetSegurancasValor[i][s]);
					SendClientMessage(i, COLOR_GREEN, string);
					if(IsStringAName(GetSegurancas[i][s])){
				    	format(string,sizeof(string),"%s lhe pagou o seu salário de $%d",PlayerName(i),GetSegurancasValor[i][s]);
				    	new id = IDName(GetSegurancas[i][s]);
						SendClientMessage(id, COLOR_GREEN, string);
						AcrescentarExPoints(id,3);
						if(JogadorContratado(id,4)) AcrescentarLucro(4,GetSegurancasValor[i][s]/2);
					}
				}
			}
		}
	}
}
stock JogadorContratado(playerid,propriedade)
{
	new str[256];
	set(str,PropertieFile(propriedade));
	if(strcmp(propStats[propriedade][Trabalhador1],PlayerName(playerid),true) == 0 || strcmp(propStats[propriedade][Trabalhador2],PlayerName(playerid),true) == 0 || strcmp(propStats[propriedade][Trabalhador3],PlayerName(playerid),true) == 0 || strcmp(propStats[propriedade][Trabalhador4],PlayerName(playerid),true) == 0
	|| strcmp(propStats[propriedade][Trabalhador5],PlayerName(playerid),true) == 0 || strcmp(propStats[propriedade][Trabalhador6],PlayerName(playerid),true) == 0 || strcmp(propStats[propriedade][Trabalhador7],PlayerName(playerid),true) == 0) return true;
	else return false;
}
stock PropertiesResult()
{
	SendClientMessageToAll(COLOR_RED2, "Resultado das propriedades:");
	new p = 0;
	new lucro,prejuizo,investimento,result,randresult;
	new str[256],string[256];
	while(p < MAX_PROPERTIES){
	    set(str,PropertieFile(p));
		if(!fexist(str)) return 0;
		lucro = propStats[p][Lucro];
		prejuizo = propStats[p][Prejuizo];
		investimento = propStats[p][Investimento];
		randresult = random(5);
		if(randresult == 0) result = lucro-prejuizo;
		else if(randresult == 1) result = lucro+investimento/2-prejuizo+2000;
		else if(randresult == 2) result = lucro*3-investimento/2-prejuizo/4;
		else if(randresult == 3) result = lucro+investimento-prejuizo*3;
		else if(randresult == 4) result = lucro-prejuizo+investimento/3;
		else if(randresult == 5) result = lucro-investimento/4-prejuizo/2;
		new QT = QtSocios(p);
		new QT2 = QtDonos(p);
		if(QT == 0){
			if(QT2 == 1){
			 	if(!IsStringAName(propStats[p][Dono1])) GiveValue(propStats[p][Dono1],"BancoEmpresa",result/2);
			}
			else if(QT2 == 2){
		    	if(!IsStringAName(propStats[p][Dono1])) GiveValue(propStats[p][Dono1],"BancoEmpresa",result/2 - Porcentagem(result/2,50));
      			if(!IsStringAName(propStats[p][Dono2])) GiveValue(propStats[p][Dono2],"BancoEmpresa",result/2 - Porcentagem(result/2,50));
			}
		}
		else if(QT == 1){
			if(QT2 == 1){
			 	if(!IsStringAName(propStats[p][Dono1])) GiveValue(propStats[p][Dono1],"BancoEmpresa",result/2 - Porcentagem(result/2,90));
			}
			else if(QT2 == 2){
			    if(!IsStringAName(propStats[p][Dono1])) GiveValue(propStats[p][Dono1],"BancoEmpresa",result/2 - Porcentagem(result/2,45));
                if(!IsStringAName(propStats[p][Dono2])) GiveValue(propStats[p][Dono2],"BancoEmpresa",result/2 - Porcentagem(result/2,45));
			}
			if(!IsStringAName(propStats[p][Socio1])) GiveValue(propStats[p][Socio1],"BancoEmpresa",Porcentagem(result/2,10));
            else pStats[IDName(propStats[p][Socio1])][BancoEmpresa] += Porcentagem(result/2,10);
		}
		else if(QT == 2){
		    if(QT2 == 1){
				if(!IsStringAName(propStats[p][Dono1])) GiveValue(propStats[p][Dono1],"BancoEmpresa",result/2 - Porcentagem(result/2,80));
			}
			else if(QT2 == 2){
			    if(!IsStringAName(propStats[p][Dono1])) GiveValue(propStats[p][Dono1],"BancoEmpresa",result/2 - Porcentagem(result/2,40));
                if(!IsStringAName(propStats[p][Dono2])) GiveValue(propStats[p][Dono2],"BancoEmpresa",result/2 - Porcentagem(result/2,40));
			}
            if(!IsStringAName(propStats[p][Socio1])) GiveValue(propStats[p][Socio1],"BancoEmpresa",Porcentagem(result/2,10));
            else pStats[IDName(propStats[p][Socio1])][BancoEmpresa] += Porcentagem(result/2,10);
            if(!IsStringAName(propStats[p][Socio2])) GiveValue(propStats[p][Socio2],"BancoEmpresa",Porcentagem(result/2,10));
            else pStats[IDName(propStats[p][Socio2])][BancoEmpresa] += Porcentagem(result/2,10);
		}
		else if(QT == 3){
		    if(QT2 == 1){
				if(!IsStringAName(propStats[p][Dono1])) GiveValue(propStats[p][Dono1],"BancoEmpresa",result/2 - Porcentagem(result/2,70));
			}
			else if(QT2 == 2){
                if(!IsStringAName(propStats[p][Dono1])) GiveValue(propStats[p][Dono1],"BancoEmpresa",result/2 - Porcentagem(result/2,35));
                if(!IsStringAName(propStats[p][Dono2])) GiveValue(propStats[p][Dono2],"BancoEmpresa",result/2 - Porcentagem(result/2,35));
			}
			if(!IsStringAName(propStats[p][Socio1])) GiveValue(propStats[p][Socio1],"BancoEmpresa",Porcentagem(result/2,10));
            else pStats[IDName(propStats[p][Socio1])][BancoEmpresa] += Porcentagem(result/2,10);
            if(!IsStringAName(propStats[p][Socio2])) GiveValue(propStats[p][Socio2],"BancoEmpresa",Porcentagem(result/2,10));
            else pStats[IDName(propStats[p][Socio2])][BancoEmpresa] += Porcentagem(result/2,10);
            if(!IsStringAName(propStats[p][Socio3])) GiveValue(propStats[p][Socio3],"BancoEmpresa",Porcentagem(result/2,10));
            else pStats[IDName(propStats[p][Socio3])][BancoEmpresa] += Porcentagem(result/2,10);
		}
		propStats[p][SemanaRetrasada] = propStats[p][SemanaPassada];
		propStats[p][SemanaPassada] = result/2;
		if(result/2 <= 0){
			format(string,sizeof(string),"%s : Prejuízo de $%d",NomesPropriedades[p],result/2);
			SendClientMessageToAll(COLOR_WHITE, string);
			if(IsStringAName(propStats[p][Dono1])){
				new playa = IDName(propStats[p][Dono1]);
				SendClientMessage(playa, COLOR_GRAY, "Infelizmente sua propriedade teve prejuízo! Esperamos que da próxima vez não seja assim!");
			}
			else{
				format(string,sizeof(string),"Sua propriedade %s teve um prejuízo de $%d :(",NomesPropriedades[p],result/2);
				GuardarMensagem(propStats[p][Dono1],string);
			}
		}
		else{
		    format(string,sizeof(string),"%s : Lucro de $%d",NomesPropriedades[p],result/2);
		    SendClientMessageToAll(COLOR_WHITE, string);
			if(IsStringAName(propStats[p][Dono1])){
				new playa = IDName(propStats[p][Dono1]);
				SendClientMessage(playa, COLOR_GREEN, "PARABÉNS: Sua propriedade obteve lucro! Espero que você continue mantendo os negócios assim.");
			}
			else{
				format(string,sizeof(string),"Sua propriedade %s teve um lucro de $%d =)",NomesPropriedades[p],result/2);
				GuardarMensagem(propStats[p][Dono1],string);
			}
		}
		propStats[p][Lucro] = 0;
		propStats[p][Prejuizo] = 0;
		propStats[p][Investimento] = 0;
		p++;
		set(str,PropertieFile(p));
	}
	return 1;
}
stock PagarSalarioDoJogador(playerid,propriedade)
{
	AcrescentarPrejuizo(propriedade,IntSalario[Profissao[playerid]]+pStats[playerid][AumentoPropriedade]);
	pStats[playerid][BancoTrabalho] += pStats[playerid][AumentoPropriedade];
}
stock AcrescentarPrejuizo(propertie,prejuizo)
{
	propStats[propertie][Prejuizo] += prejuizo;
}
stock AcrescentarLucro(propertie,lucro)
{
	propStats[propertie][Lucro] += lucro;
}
stock AcrescentarInvestimento(propertie,investimento)
{
	propStats[propertie][Investimento] += investimento;
}
stock MudancaDia()
{
	if(ValorDia >= 6){
		ValorDia = 0;
	}
	else if(ValorDia < 6){
		ValorDia++;
	}
}
stock Porcentagem(num,porc)
{
	if(porc >= 1 && porc <= 100) return porc*num/100;
	else return 0;
}
stock TirarDiasAluguel()
{
	for(new i=0; i<SLOTS2; i++){
	    if(pStats[i][LocouCasa] == 1){
	        if(pStats[i][DiasDeAluguel] > 1){
	            pStats[i][DiasDeAluguel] -= 1;
	            SendClientMessage(i, COLOR_WHITE, "Acaba de passar mais um dia de seu aluguel!");
	            return 1;
			}
			else{
			    SendClientMessage(i, COLOR_GRAY, "Seu prazo de aluguel da casa acabou!");
			    new string[256];
       			format(string,sizeof(string),"O prazo de aluguel da casa de %s acabou!",PlayerName(i));
			    if(IsStringAName(pStats[i][DonoCasaAlugada])){
			        new id = IDName(pStats[i][DonoCasaAlugada]);
			        SendClientMessage(id, COLOR_WHITE, string);
				}
				else{
				    GuardarMensagem(pStats[i][DonoCasaAlugada],string);
				}
				pStats[i][LocouCasa] = 0;
				pStats[i][DiasDeAluguel] = 0;
				set(pStats[i][DonoCasaAlugada],"NONE");
			}
		}
	}
	return 1;
}
stock RetirarJogadorDaPropriedade(playerid)
{
	new string[256];
	for(new p=0; p<MAX_PROPERTIES; p++){
		if(JogadorContratado(playerid,p)){
   			DemitirJogador(playerid,p);
   			format(string,sizeof(string),"[PROPRIEDADES] %s desistiu da sua profissão na(o) %s ele agora trabalha em outro ramo.",PlayerName(playerid), NomesPropriedades[p]);
			SendClientMessageToAll(COLOR_TRANSPORTE_DE_VALORES, string);
		}
	}
}
stock EmpresasCarros(){
	new string[256];
	if(!compare(propStats[14][Dono1],"NONE")){
	    if(!fexist(propStats[14][Dono1])) return 0;
		new rand1 = minrand(5000,7000);
		new rand2 = minrand(3500,4000);
		new rand3 = minrand(2000,3000);
		format(string,sizeof(string),"Life's'autos: $%d,00 - Virtual Car & Cia: $%d,00 - Your Life's' Car: $%d,00 - Total: $%d,00",rand1,rand2,rand3,rand1+rand2+rand3);
		if(IsStringAName(propStats[14][Dono1])){
		    SendClientMessage(IDName(propStats[14][Dono1]), COLOR_RED2, "Cobrança das empresas de fabricação de automóveis:");
		    SendClientMessage(IDName(propStats[14][Dono1]), COLOR_WHITE, string);
		}
		else{
		    GuardarMensagem(propStats[14][Dono1], "Cobrança das empresas de fabricação de automóveis:");
		    GuardarMensagem(propStats[14][Dono1], string);
		}
		AcrescentarPrejuizo(14,rand1+rand2+rand3);
	}
	return 1;
}

public Bebado(playerid){
	Bebida[playerid] = Bebida[playerid] -1;
    if(!IsPlayerInAnyVehicle(playerid)){
        if(Bebida[playerid] > 8){
    		ApplyAnimation(playerid,"PED", "WALK_DRUNK",10,0,1,0,0,0);
			SendClientMessage(playerid, COLOR_PARAMEDICO, "EI EI EI EI SEM VOCÊ NÃO VIVEREI.");
			TimerBebida[playerid] = SetTimerEx("Bebado",10000,0,"d",playerid);
		}
	} else {
		SendClientMessage(playerid, COLOR_PARAMEDICO, "Mardita carchaça... tou doidão...");
		TimerBebida[playerid] = SetTimerEx("Bebado",10000,0,"d",playerid);
	}
}

public GetPlayerZone(playerid) return playerzone[playerid];
stock GetPlayerGangColor(playerid){
	if(pStats[playerid][Gangue] == 0) return 0xFFFFFFAA;
	return gStats[GetGangID(pStats[playerid][GangueNome])][GangColor];
}
public updatezones() {
    new j,i;
	for(i=0; i<SLOTS2; i++) {
		if(IsPlayerConnected(i) && Logado[i] == 1 && zoneupdates[i] == 1) {
	   		if(!IsPlayerInZone(i,playerzone[i])){
	    		playerzone[i] = -1;
				for(j=0; j<sizeof(zones);j++) {
	     			if(IsPlayerInZone(i,j) && playerzone[i] == -1) {
	     			    new str[126];
	     			    playerzone[i] = j;
	     			    if(!compare(GangControlZone[j],"NONE")){
							format(str,sizeof(str),"~w~%s~n~~y~%s gang",zones[j][zonename],GangControlZone[j]);
						 	GameTextForPlayer(i,str,1500,1);
						 	break;
						}
						else{
							format(str,sizeof(str),"~w~%s~n~~g~sem gang",zones[j][zonename]);
							GameTextForPlayer(i,str,1500,1);
							break;
						}
					}
				}
			}
		}
	}
}
IsPlayerInZone(playerid, zoneid) {
	if(zoneid == -1) return 0;
	new Float:x, Float:y, Float:z;
 	GetPlayerPos(playerid,x,y,z);
 	if(x >= zones[zoneid][zoneminx] && x < zones[zoneid][zonemaxx]
 	&& y >= zones[zoneid][zoneminy] && y < zones[zoneid][zonemaxy]
 	&& z >= zones[zoneid][zoneminz] && z < zones[zoneid][zonemaxz]
 	&& z < 900.0) return 1;
 	return 0;
}

public SubMissoes(){
    SendClientMessageToAll(COLOR_WHITE, " ");
	SendClientMessageToAll(COLOR_WHITE, "|=================================| New Paper's Life |=================================|");
	new avisou = 0;
	new avisou2 = 0;
	new rand;
	for(new s = 0; s < MAX_SUBMISSIONS; s++){
	    if(!SubMissaoAtiva[s]){
			rand = random(5);
			if(rand == 0 || rand == 1){
 				switch(s){
			       	case NONE: continue;
			       	case SORVETERIA:
        	  		{
						SendClientMessageToAll(COLOR_ROSACLARO, "[SORVETERIA] Estamos contratando alguém temporariamente para fazer entregas de sorvetes, se você quer, venha até a sorveteria!");
						SubMissaoAtiva[SORVETERIA] = 1;
						avisou = 1;
					}
					case DROGAS:
				    {
				        SendClientMessageToAll(COLOR_LIDER_DE_TRAFICO, "[NOTICIAS] Governo descobre que traficantes estão contratando alguém para transportar drogas no morro!");
				        SendClientMessageToAll(COLOR_LIDER_DE_TRAFICO, "Policiais já foram chamados ao local...");
						SendClientMessagePolicia(COLOR_GREEN, "Vocês viram! Corram para o morro antes que alguém chegue e entregue as drogas sem vocês perceberem!");
						SubMissaoAtiva[DROGAS] = 1;
						avisou = 1;
					}
					case DJ:
				    {
				        SendClientMessageToAll(COLOR_COP_MILITAR, "[BALADA] Estamos contratado alguém para ser DJ por 5 horas aqui, quem estiver interessado é só aparecer...");
						SubMissaoAtiva[DJ] = 1;
						avisou = 1;
					}
				}
			}
		}
	}
	if(avisou == 1){
		SendClientMessageToAll(COLOR_WHITE, "Não esqueça caso queira: Quando chegar ao local, digite /aceitaremprego");
		avisou = 0;
		avisou2 = 1;
	}
	if(avisou2 == 0){
	    SendClientMessageToAll(COLOR_GRAY, "Nenhuma proposta de emprego temporário registrada!");
	}
	SendClientMessageToAll(COLOR_WHITE, "|====================================================================================|");
    SendClientMessageToAll(COLOR_WHITE, " ");
}
stock Inflacao(){
    new cons = random(9);
	new inflac = 5 - cons;
	new str[256];
	SendClientMessageToAll(COLOR_VERDEESCURO,"________________________________________________________________________________________________________________________");
	if(inflac == 0){
    	SendClientMessageToAll(COLOR_VERDEESCURO,"[BOLSA DE VALORES] Os investimentos da bolsa( ações e investimentos bancários) e os valores das mercadorias se manteram");
    	SendClientMessageToAll(COLOR_VERDEESCURO,"[BOLSA DE VALORES] fixos e os preços das mercadorias continuaram os mesmos.");
    }
    if(inflac > 0){
        PrecoGas += random(2);
		ValorTV = ValorTV/100 * inflac + ValorTV;
		ValorRadio = ValorRadio/100 * inflac + ValorRadio;
		ValorGeladeira = ValorGeladeira/100 * inflac + ValorGeladeira;
		ValorFogao =  ValorFogao/100 * inflac + ValorRadio;
		ValorCelular = ValorCelular/100 * inflac + ValorRadio;
	 	ValorFrango = ValorFrango/100 * inflac + ValorFrango;
		ValorPeixe = ValorPeixe/100 * inflac + ValorPeixe;
		ValorPizza = ValorPizza/100 * inflac + ValorPizza;
		ValorSalada = ValorSalada/100 * inflac + ValorSalada;
		ValorRefrigerante = ValorRefrigerante/100 * inflac + ValorRefrigerante;
		ValorSuco = ValorSuco/100 * inflac + ValorSuco;
		ValorCarne = ValorCarne/100 * inflac + ValorCarne;
		ValorStrogonoff = ValorStrogonoff/100 * inflac + ValorStrogonoff;
		ValorCamarao = ValorCamarao/100 * inflac + ValorCamarao;
		ValorLinguica = ValorLinguica/100 * inflac + ValorLinguica;
    	SendClientMessageToAll(COLOR_VERDEESCURO,"[BOLSA DE VALORES] Os investimentos da bolsa( ações e investimentos bancários) e os valores das mercadorias");
   		format(str, sizeof(str),"[BOLSA DE VALORES] Tiveram ALTA de %d por cento veja as suas ações,investimentos bancários ou valores das novas mercadorias.",inflac);
   		SendClientMessageToAll(COLOR_VERDECLARO, str);
   		SendClientMessageToAll(COLOR_VERDECLARO, "[BOLSA DE VALORES] Novos Preços:");
   		format(str, sizeof(str),"[BOLSA DE VALORES] Gasolina: $%d",PrecoGas);
   		SendClientMessageToAll(COLOR_VERDECLARO, str);
   		format(str, sizeof(str),"[BOLSA DE VALORES] Celular: $%d   -   TV: $%d   -   Rádio: $%d   -    Geladeira: $%d   -    Fogão: $%d", ValorCelular, ValorTV, ValorRadio, ValorGeladeira, ValorFogao);
   		SendClientMessageToAll(COLOR_VERDECLARO, str);
	   	format(str, sizeof(str),"[BOLSA DE VALORES] Frango Pct: $%d   -   Peixe Kg: $%d   -   Pizza QTD: $%d   -    Salada Cx: $%d   -    Refrigerante Litro: $%d", ValorFrango, ValorPeixe, ValorPizza, ValorSalada, ValorRefrigerante);
	   	SendClientMessageToAll(COLOR_VERDECLARO, str);
	   	format(str, sizeof(str),"[BOLSA DE VALORES] Suco Lt: $%d   -   Carne Kg: $%d   -   Strogonoff Cx: $%d   -    Camarão Kg: $%d   -    Linguiça: $%d", ValorSuco, ValorCarne, ValorStrogonoff, ValorCamarao, ValorLinguica);
   		for(new i=0; i<SLOTS2; i++){
	   		if(pStats[i][PInvestimento] > 10000){
	   		    pStats[i][PInvestimento] += inflac*100;
   				format(str, sizeof(str),"[BOLSA DE VALORES/BANCO] Sua aplicação Bancária subiram %d por cento sua aplicação bancária está valendo: $%d",inflac, pStats[i][PInvestimento]);
	       		SendClientMessage(i, COLOR_VERDECLARO, str);
	    	} else {
	       		SendClientMessage(i, COLOR_VERDECLARO, "[BOLSA DE VALORES] Você não possui nenhum investimento bancário, aplique já o seu dinheiro. Vá até o banco.");
	        	return 1;
	        }
		}
	}
	else if(inflac < 0){
	    PrecoGas -= random(2);
		if(PrecoGas<=0) PrecoGas = 1;
	   	ValorTV -= Porcentagem(ValorTV,(inflac*(-1)));
	   	ValorRadio -= Porcentagem(ValorRadio,(inflac*(-1)));
	   	ValorFogao -= Porcentagem(ValorFogao,(inflac*(-1)));
	   	ValorGeladeira -= Porcentagem(ValorGeladeira,(inflac*(-1)));
	   	ValorCelular -= Porcentagem(ValorCelular,(inflac*(-1)));
	    ValorFrango -= Porcentagem(ValorFrango,(inflac*(-1)));
	   	ValorPeixe -= Porcentagem(ValorPeixe,(inflac*(-1)));
		ValorPizza -= Porcentagem(ValorPizza,(inflac*(-1)));
	   	ValorSalada -= Porcentagem(ValorSalada,(inflac*(-1)));
	   	ValorRefrigerante -= Porcentagem(ValorRefrigerante,(inflac*(-1)));
	   	ValorSuco -= Porcentagem(ValorSuco,(inflac*(-1)));
	   	ValorCarne -= Porcentagem(ValorCarne,(inflac*(-1)));
	   	ValorStrogonoff -= Porcentagem(ValorStrogonoff,(inflac*(-1)));
	   	ValorCamarao -= Porcentagem(ValorCamarao,(inflac*(-1)));
	   	ValorLinguica -= Porcentagem(ValorLinguica,(inflac*(-1)));
	   	SendClientMessageToAll(COLOR_VERDEESCURO,"[BOLSA DE VALORES] Os investimentos da bolsa( ações e investimentos bancários) e os valores das mercadorias");
		format(str, sizeof(str),"[BOLSA DE VALORES] Tiveram BAIXA de %d por cento veja as suas ações,investimentos bancários ou valores das novas mercadorias",inflac);
		SendClientMessageToAll(COLOR_VERDECLARO, str);
		SendClientMessageToAll(COLOR_VERDECLARO, "[BOLSA DE VALORES] Novos Preços:");
		format(str, sizeof(str),"[BOLSA DE VALORES] Gasolina: $%d",PrecoGas);
		SendClientMessageToAll(COLOR_VERDECLARO, str);
	   	format(str, sizeof(str),"[BOLSA DE VALORES] Celular: $%d   -   TV: $%d   -   Rádio: $%d   -    Geladeira: $%d   -    Fogão: $%d", ValorCelular, ValorTV, ValorRadio, ValorGeladeira, ValorFogao);
	   	SendClientMessageToAll(COLOR_VERDECLARO, str);
	   	format(str, sizeof(str),"[BOLSA DE VALORES] Frango Pct: $%d   -   Peixe Kg: $%d   -   Pizza QTD: $%d   -    Salada Cx: $%d   -    Refrigerante Litro: $%d", ValorFrango, ValorPeixe, ValorPizza, ValorSalada, ValorRefrigerante);
	   	SendClientMessageToAll(COLOR_VERDECLARO, str);
	   	format(str, sizeof(str),"[BOLSA DE VALORES] Suco Lt: $%d   -   Carne Kg: $%d   -   Strogonoff Cx: $%d   -    Camarão Kg: $%d   -    Linguiça: $%d", ValorSuco, ValorCarne, ValorStrogonoff, ValorCamarao, ValorLinguica);
	   	SendClientMessageToAll(COLOR_VERDECLARO, str);
	   	for(new i=0; i<SLOTS2; i++){
			if(pStats[i][PInvestimento] > 10000){
			 	pStats[i][PInvestimento] -= inflac*100;
		   		format(str, sizeof(str),"[BOLSA DE VALORES/BANCO] Sua aplicação Bancária cairam %d por cento sua aplicação bancária está valendo: $%d",inflac, pStats[i][PInvestimento]);
		  		SendClientMessage(i, COLOR_VERDECLARO, str);
		   		return 1;
   			} else {
		   	    SendClientMessage(i, COLOR_VERDECLARO, "[BOLSA DE VALORES] Você não possui nenhum investimento bancário, aplique já o seu dinheiro. Vá até o banco.");
		   	    return 1;
			}
		}
		SendClientMessageToAll(COLOR_VERDEESCURO,"________________________________________________________________________________________________________________________");
	}
	return 1;
}

stock MoradorConvidado(playerid,pickup){
  	if(pStats[playerid][ConvidadoCasa] == 1 && compare(pStats[playerid][DonoCasaConvidada],pckStats[pickup][PickupDono])) return true;
	return false;
}
stock IsConvidado(playerid1,playerid2){
	for(new i = 0; i < QtConvidados[playerid2]; i++){
    	if(Convidado[playerid2][i] == playerid1) return true;
	}
	return false;
}
stock MudarDono(vehicleid,carid,lastdono,newdono){
	GetVehicles[lastdono][carid] = -1;
	set(vStats[vehicleid][VDono],PlayerName(newdono));
	printf("Agora o veiculo de %s pertence a %s",PlayerName(lastdono),PlayerName(newdono));
}
stock GetPlayerVehicleKeyID(playerid,vehicleid){
    new lv = pStats[playerid][LastVeh];
    new v;
	while(v < lv){
		if(GetVehicles[playerid][v] == vehicleid) return v;
		v++;
	}
	return INVALID_VEHICLE_ID;
}
public ConsertandoCarro(playerid,vehicleid){
    new Float:X,Float:Y,Float:Z;
    KillTimer(TimerConserto[playerid]);
    JaDestruido[vehicleid] = 0;
	SetVehicleToRespawn(vehicleid);
	GetPlayerPos(playerid,X,Y,Z);
	SetVehiclePos(vehicleid,X,Y,Z);
	SendClientMessage(playerid, COLOR_MECANICO, "[OFICINA] Seu carro foi entregue na sua casa, da próxima vez que ele quebrar, não se preocupe, é só chamar!");
}
stock DarAumento(playerid,plid,quantia,propriedade){
    if(!IsPlayerConnected(plid)){
    	SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
	    return 1;
	}
	if(propriedade < 0 || propriedade > MAX_PROPERTIE_ID){
	    SendClientMessage(playerid, COLOR_GRAY, "Propriedade inválida! Use /propriedades para ver as propriedades disponíveis.");
		return 1;
	}
	if(!DonoDaPropriedade(playerid,propriedade) && !SocioDaPropriedade(playerid,propriedade)){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não é dono nem sócio dessa propriedade!");
	    return 1;
	}
	if(!JogadorContratado(plid,propriedade)){
	    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não trabalha nessa propriedade.");
	    return 1;
	}
	if(plid == playerid){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não dar aumento para si mesmo!");
	    return 1;
	}
	SendClientMessage(playerid, COLOR_GREEN, "Aumento dado!");
	new string[256];
	format(string,sizeof(string),"[PROPRIEDADES] EBA! Foi o que disse %s quando seu chefe da %s lhe deu um aumento de +$%d",PlayerName(plid),NomesPropriedades[propriedade],quantia);
	SendClientMessageToAll(COLOR_TRANSPORTE_DE_VALORES, string);
	format(string,sizeof(string),"O seu chefe %s lhe deu um aumento de $%d",PlayerName(playerid),quantia);
	SendClientMessage(plid, COLOR_GREEN, string);
	pStats[plid][AumentoPropriedade] += quantia;
	return 1;
}
stock TirarAumento(playerid,plid,quantia,propriedade){
    if(!IsPlayerConnected(plid)){
    	SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
	    return 1;
	}
	if(propriedade < 0 || propriedade > MAX_PROPERTIE_ID){
	    SendClientMessage(playerid, COLOR_GRAY, "Propriedade inválida! Use /propriedades para ver as propriedades disponíveis.");
		return 1;
	}
	if(!DonoDaPropriedade(playerid,propriedade) && !SocioDaPropriedade(playerid,propriedade)){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não é dono nem sócio dessa propriedade!");
	    return 1;
	}
	if(!JogadorContratado(plid,propriedade)){
	    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não trabalha nessa propriedade.");
	    return 1;
	}
	if(plid == playerid){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não pode tirar um aumento de você mesmo!");
	    return 1;
	}
	if(quantia > pStats[plid][AumentoPropriedade]){
	    SendClientMessage(playerid, COLOR_GRAY, "Está tentando tirar parte do salário do outro jogador? Tem certeza que você é um bom chefe?");
	    return 1;
	}
	else{
		SendClientMessage(playerid, COLOR_GREEN, "Aumento retirado, se ele se demitir não venha perguntar o porquê hein!?");
		new string[256];
		format(string,sizeof(string),"[PROPRIEDADES] Ah...  %s está chateado seu chefe da %s reduziu seu salário em -$%d",PlayerName(plid),NomesPropriedades[propriedade],quantia);
		SendClientMessageToAll(COLOR_TRANSPORTE_DE_VALORES, string);
		format(string,sizeof(string),"O seu chefe %s lhe tirou uma parte do seu aumento de $%d",PlayerName(playerid),quantia);
		SendClientMessage(plid, COLOR_GREEN, string);
		pStats[plid][AumentoPropriedade] -= quantia;
		return 1;
	}
}
stock Investir(playerid,propriedade,quantia){
	if(propriedade < 0 || propriedade > MAX_PROPERTIE_ID){
	    SendClientMessage(playerid, COLOR_GRAY, "Propriedade inválida! Use /propriedades para ver as propriedades disponíveis.");
		return 1;
	}
	if(!DonoDaPropriedade(playerid,propriedade) && !SocioDaPropriedade(playerid,propriedade)){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não é dono nem sócio dessa propriedade!");
	    return 1;
	}
	if(GetPlayerMoney(playerid) < quantia){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não possui toda essa quantidade em mãos!");
	    return 1;
	}
	if(quantia <= 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Quantidade inválida, escolha um valor acima de 0");
		return 1;
	}
	else{
	    new string[256];
	    AcrescentarInvestimento(propriedade,quantia);
	    AddPlayerMoney(playerid,-quantia,-1);
	    format(string,sizeof(string),"[PROPRIEDADES] O Dono/Sócio da %s, %s fez uma nova jogada investiu $%d, e promete que no futuro, invistirá mais.",NomesPropriedades[propriedade], PlayerName(playerid), quantia);
		SendClientMessageToAll(COLOR_TRANSPORTE_DE_VALORES, string);
		SendClientMessage(playerid, COLOR_GREEN, "Quantidade investida!");
	}
	return 1;
}
stock NomearSocio2(playerid,plid,propriedade){
    if(propriedade < 0 || propriedade > MAX_PROPERTIE_ID){
    	SendClientMessage(playerid, COLOR_GRAY, "Propriedade inválida! Use /propriedades para ver as propriedades disponíveis.");
		return 1;
	}
	if(!DonoDaPropriedade(playerid,propriedade) && !SocioDaPropriedade(playerid,propriedade)){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não é dono nem sócio dessa propriedade!");
	    return 1;
	}
	if(!IsPlayerConnected(plid)){
	    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
	    return 1;
	}
	if(QtSocios(propriedade) == 3){
	    SendClientMessage(playerid, COLOR_GRAY, "Lamento, essa propriedade não tem mais vaga para nenhum sócio...");
	    return 1;
	}
	if(SocioDaPropriedade(plid,propriedade)){
	    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador já é sócio da propriedade!");
	    return 1;
	}
	if(plid == playerid){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não pode nomear você mesmo para sócio!");
	    return 1;
	}
	new string[256];
	SendClientMessage(playerid, COLOR_WHITE, "Proposta oferecida!");
	format(string, sizeof(string), "%s está lhe oferecendo para ser sócio da %s, para aceitar digite /aceitar e para recusar digite /recusar",PlayerName(playerid),NomesPropriedades[propriedade]);
	SendClientMessage(plid, COLOR_WHITE, string);
	invitestatus[plid] = INVITE_SOCIO;
	PropriedadeNomeacao[plid] = propriedade;
	JogadorNomeacao[plid] = playerid;
	return 1;
}
stock DesnomearSocio2(playerid,plid,propriedade){
    if(!IsPlayerConnected(plid)){
		SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
		return 1;
	}
	if(propriedade < 0 || propriedade > MAX_PROPERTIE_ID){
	    SendClientMessage(playerid, COLOR_GRAY, "Propriedade inválida! Use /propriedades para ver as propriedades disponíveis.");
		return 1;
	}
	if(!SocioDaPropriedade(plid,propriedade)){
	    SendClientMessage(playerid, COLOR_GRAY, "Ele não é sócio dessa propriedade!");
	    return 1;
	}
	DesnomearSocio(plid,propriedade);
	new string[256];
	format(string,sizeof(string), "[PROPRIEDADES] \"VOCÊ NÃO PRESTA\" foi o que disse o chefe da %s para %s antes de desnomea-lo a sócio!",NomesPropriedades[propriedade],PlayerName(plid));
	SendClientMessageToAll(COLOR_WHITE, string);
	return 1;
}
stock Contratar(playerid,plid,propriedade){
	if(propriedade < 0 || propriedade > MAX_PROPERTIE_ID){
	    SendClientMessage(playerid, COLOR_GRAY, "Propriedade inválida! Use /propriedades para ver as propriedades disponíveis.");
		return 1;
	}
	if(!DonoDaPropriedade(playerid,propriedade) && !SocioDaPropriedade(playerid,propriedade)){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não é dono nem sócio dessa propriedade!");
	    return 1;
	}
	if(PropriedadeLotada(propriedade)){
	    SendClientMessage(playerid, COLOR_GRAY, "Você já contratou o máximo de funcionários para essa propriedade!");
		return 1;
	}
	if(!IsPlayerConnected(plid)){
	    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado");
	    return 1;
	}
	if(JogadorContratado(plid,propriedade)){
	    SendClientMessage(playerid, COLOR_GRAY, "Esse jogador já trabalha ai.");
	    return 1;
	}
	if(plid == playerid){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não pode contratar você mesmo!");
	    return 1;
	}
	else{
	   	new string[256];
	   	format(string,sizeof(string),"%s está lhe oferecendo um emprego na propriedade %s, você poderá ganhar aumento se trabalhar ai!",PlayerName(playerid),NomesPropriedades[propriedade]);
		switch(propriedade)
		{
   			case 0 :
			{
				if(Profissao[plid] != ENTREGADOR_PIZZA){
		           	SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está com a profissão adequada para essa propriedade!");
		           	SendClientMessage(playerid, COLOR_GRAY, "Sinto muito, não podemos aceita-lo!");
		           	return 1;
				}
				else if(Profissao[plid] == ENTREGADOR_PIZZA){
		    		SendClientMessage(playerid, COLOR_GREEN, "A oferta foi dada à esse jogador!");
		    		SendClientMessage(plid, COLOR_GREEN, string);
			    	SendClientMessage(plid, COLOR_GREEN, "Digite /aceitar para aceitar e digite /recusar para recusar!");
					PropriedadeContrato[plid] = propriedade;
    				invitestatus[plid] = INVITE_CONTRATO;
       				SetTimerEx("Cancelar",60000,0,"d",plid);
          			return 1;
				}
			}
			case 1 :
			{
				if(Profissao[plid] != TAXISTA && Profissao[plid] != MOTOTAXI && Profissao[plid] != TAXI_AEREO){
   					SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está com a profissão adequada para essa propriedade!");
       				SendClientMessage(playerid, COLOR_GRAY, "Sinto muito, não podemos aceita-lo!");
          			return 1;
				}
				else if(Profissao[plid] == TAXISTA || Profissao[plid] == MOTOTAXI || Profissao[plid] == TAXI_AEREO){
			    	SendClientMessage(playerid, COLOR_GREEN, "A oferta foi dada à esse jogador!");
			    	SendClientMessage(plid, COLOR_GREEN, string);
			    	SendClientMessage(plid, COLOR_GREEN, "Digite /aceitar para aceitar e digite /recusar para recusar!");
					PropriedadeContrato[plid] = propriedade;
                   	invitestatus[plid] = INVITE_CONTRATO;
                   	SetTimerEx("Cancelar",60000,0,"d",plid);
                   	return 1;
				}
			}
            case 2 :
			{
				if(Profissao[plid] != MOTORISTA_PARTICULAR){
			       	SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está com a profissão adequada para essa propriedade!");
		        	SendClientMessage(playerid, COLOR_GRAY, "Sinto muito, não podemos aceita-lo!");
		           	return 1;
				}
				else if(Profissao[plid] == MOTORISTA_PARTICULAR){
			    	SendClientMessage(playerid, COLOR_GREEN, "A oferta foi dada à esse jogador!");
			    	SendClientMessage(plid, COLOR_GREEN, string);
			    	SendClientMessage(plid, COLOR_GREEN, "Digite /aceitar para aceitar e digite /recusar para recusar!");
					PropriedadeContrato[plid] = propriedade;
                   	invitestatus[plid] = INVITE_CONTRATO;
                  	SetTimerEx("Cancelar",60000,0,"d",plid);
                   	return 1;
				}
			}
            case 3 :
			{
				if(Profissao[plid] != CORRETOR_SEGUROS){
		           	SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está com a profissão adequada para essa propriedade!");
		           	SendClientMessage(playerid, COLOR_GRAY, "Sinto muito, não podemos aceita-lo!");
		           	return 1;
				}
				else if(Profissao[plid] == CORRETOR_SEGUROS){
			    	SendClientMessage(playerid, COLOR_GREEN, "A oferta foi dada à esse jogador!");
			    	SendClientMessage(plid, COLOR_GREEN, string);
			    	SendClientMessage(plid, COLOR_GREEN, "Digite /aceitar para aceitar e digite /recusar para recusar!");
					PropriedadeContrato[plid] = propriedade;
                   	invitestatus[plid] = INVITE_CONTRATO;
                   	SetTimerEx("Cancelar",60000,0,"d",plid);
                   	return 1;
				}
			}
            case 4 :
			{
				if(Profissao[plid] != SEGURANÇA && Profissao[plid] != TRANSPORTE_DE_VALORES){
		          	SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está com a profissão adequada para essa propriedade!");
		           	SendClientMessage(playerid, COLOR_GRAY, "Sinto muito, não podemos aceita-lo!");
		           	return 1;
				}
				else if(Profissao[plid] == SEGURANÇA || Profissao[plid] == TRANSPORTE_DE_VALORES){
			    	SendClientMessage(playerid, COLOR_GREEN, "A oferta foi dada à esse jogador!");
			    	SendClientMessage(plid, COLOR_GREEN, string);
			    	SendClientMessage(plid, COLOR_GREEN, "Digite /aceitar para aceitar e digite /recusar para recusar!");
					PropriedadeContrato[plid] = propriedade;
                   	invitestatus[plid] = INVITE_CONTRATO;
                   	SetTimerEx("Cancelar",60000,0,"d",plid);
                   	return 1;
				}
			}
   			case 5 :
			{
				if(Profissao[plid] != VENDEDOR_DE_ARMAS){
		           	SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está com a profissão adequada para essa propriedade!");
		           	SendClientMessage(playerid, COLOR_GRAY, "Sinto muito, não podemos aceita-lo!");
		           	return 1;
				}
				else if(Profissao[plid] == VENDEDOR_DE_ARMAS){
			    	SendClientMessage(playerid, COLOR_GREEN, "A oferta foi dada à esse jogador!");
			    	SendClientMessage(plid, COLOR_GREEN, string);
			    	SendClientMessage(plid, COLOR_GREEN, "Digite /aceitar para aceitar e digite /recusar para recusar!");
					PropriedadeContrato[plid] = propriedade;
    				invitestatus[plid] = INVITE_CONTRATO;
       				SetTimerEx("Cancelar",60000,0,"d",plid);
          			return 1;
				}
			}
            case 6 :
			{
				if(Profissao[plid] != PROSTITUTA){
		        	SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está com a profissão adequada para essa propriedade!");
		           	SendClientMessage(playerid, COLOR_GRAY, "Sinto muito, não podemos aceita-lo!");
		           	return 1;
				}
				else if(Profissao[plid] == PROSTITUTA){
			    	SendClientMessage(playerid, COLOR_GREEN, "A oferta foi dada à esse jogador!");
			    	SendClientMessage(plid, COLOR_GREEN, string);
			    	SendClientMessage(plid, COLOR_GREEN, "Digite /aceitar para aceitar e digite /recusar para recusar!");
					PropriedadeContrato[plid] = propriedade;
    				invitestatus[plid] = INVITE_CONTRATO;
       				SetTimerEx("Cancelar",60000,0,"d",plid);
                   	return 1;
				}
			}
            case 7 :
			{
				if(Profissao[plid] != FRENTISTA){
		           	SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está com a profissão adequada para essa propriedade!");
		           	SendClientMessage(playerid, COLOR_GRAY, "Sinto muito, não podemos aceita-lo!");
		           	return 1;
				}
				else if(Profissao[plid] == FRENTISTA){
			    	SendClientMessage(playerid, COLOR_GREEN, "A oferta foi dada à esse jogador!");
			    	SendClientMessage(plid, COLOR_GREEN, string);
			    	SendClientMessage(plid, COLOR_GREEN, "Digite /aceitar para aceitar e digite /recusar para recusar!");
					PropriedadeContrato[plid] = propriedade;
                   	invitestatus[plid] = INVITE_CONTRATO;
     				SetTimerEx("Cancelar",60000,0,"d",plid);
        			return 1;
				}
			}
            case 8 :
			{
				if(Profissao[plid] != BARMAN){
		           	SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está com a profissão adequada para essa propriedade!");
		           	SendClientMessage(playerid, COLOR_GRAY, "Sinto muito, não podemos aceita-lo!");
		           	return 1;
				}
				else if(Profissao[plid] == BARMAN){
			    	SendClientMessage(playerid, COLOR_GREEN, "A oferta foi dada à esse jogador!");
			    	SendClientMessage(plid, COLOR_GREEN, string);
			    	SendClientMessage(plid, COLOR_GREEN, "Digite /aceitar para aceitar e digite /recusar para recusar!");
					PropriedadeContrato[plid] = propriedade;
                   	invitestatus[plid] = INVITE_CONTRATO;
                   	SetTimerEx("Cancelar",60000,0,"d",plid);
                   	return 1;
				}
			}
            case 9 :
			{
				if(Profissao[plid] != MECANICO){
			       	SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está com a profissão adequada para essa propriedade!");
		        	SendClientMessage(playerid, COLOR_GRAY, "Sinto muito, não podemos aceita-lo!");
		          	return 1;
				}
				else if(Profissao[plid] == MECANICO){
			    	SendClientMessage(playerid, COLOR_GREEN, "A oferta foi dada à esse jogador!");
			    	SendClientMessage(plid, COLOR_GREEN, string);
			    	SendClientMessage(plid, COLOR_GREEN, "Digite /aceitar para aceitar e digite /recusar para recusar!");
					PropriedadeContrato[plid] = propriedade;
                   	invitestatus[plid] = INVITE_CONTRATO;
                   	SetTimerEx("Cancelar",60000,0,"d",plid);
                   	return 1;
				}
			}
            case 10 :
			{
				if(Profissao[plid] != LIXEIRO){
			       	SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está com a profissão adequada para essa propriedade!");
			       	SendClientMessage(playerid, COLOR_GRAY, "Sinto muito, não podemos aceita-lo!");
    				return 1;
				}
				else if(Profissao[plid] == LIXEIRO){
   					SendClientMessage(playerid, COLOR_GREEN, "A oferta foi dada à esse jogador!");
			    	SendClientMessage(plid, COLOR_GREEN, string);
			    	SendClientMessage(plid, COLOR_GREEN, "Digite /aceitar para aceitar e digite /recusar para recusar!");
					PropriedadeContrato[plid] = propriedade;
                   	invitestatus[plid] = INVITE_CONTRATO;
                   	SetTimerEx("Cancelar",60000,0,"d",plid);
                   	return 1;
				}
			}
            case 11 :
			{
				if(Profissao[plid] != AGRICULTOR){
		          	SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está com a profissão adequada para essa propriedade!");
		         	SendClientMessage(playerid, COLOR_GRAY, "Sinto muito, não podemos aceita-lo!");
		          	return 1;
				}
				else if(Profissao[plid] == AGRICULTOR){
			    	SendClientMessage(playerid, COLOR_GREEN, "A oferta foi dada à esse jogador!");
			    	SendClientMessage(plid, COLOR_GREEN, string);
			    	SendClientMessage(plid, COLOR_GREEN, "Digite /aceitar para aceitar e digite /recusar para recusar!");
					PropriedadeContrato[plid] = propriedade;
                   	invitestatus[plid] = INVITE_CONTRATO;
                   	SetTimerEx("Cancelar",60000,0,"d",plid);
                   	return 1;
				}
			}
			case 12 :
   			{
		    	SendClientMessage(playerid, COLOR_GRAY, "Essa propriedade não requer nenhum contrato!");
			    return 1;
		    }
			case 13 :
	   		{
	      		SendClientMessage(playerid, COLOR_GRAY, "Essa propriedade não requer nenhum contrato!");
	        	return 1;
		    }
            case 14 :
			{
				if(Profissao[plid] != VENDEDOR_DE_CARROS){
			       	SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está com a profissão adequada para essa propriedade!");
		        	SendClientMessage(playerid, COLOR_GRAY, "Sinto muito, não podemos aceita-lo!");
	 	          	return 1;
				}
				else if(Profissao[plid] == VENDEDOR_DE_CARROS){
			    	SendClientMessage(playerid, COLOR_GREEN, "A oferta foi dada à esse jogador!");
			    	SendClientMessage(plid, COLOR_GREEN, string);
			    	SendClientMessage(plid, COLOR_GREEN, "Digite /aceitar para aceitar e digite /recusar para recusar!");
					PropriedadeContrato[plid] = propriedade;
                   	invitestatus[plid] = INVITE_CONTRATO;
                   	SetTimerEx("Cancelar",60000,0,"d",plid);
                   	return 1;
				}
			}
            case 15 :
			{
				if(Profissao[plid] != CORRETOR){
		           	SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está com a profissão adequada para essa propriedade!");
		           	SendClientMessage(playerid, COLOR_GRAY, "Sinto muito, não podemos aceita-lo!");
		           	return 1;
				}
				else if(Profissao[plid] == CORRETOR){
			    	SendClientMessage(playerid, COLOR_GREEN, "A oferta foi dada à esse jogador!");
			    	SendClientMessage(plid, COLOR_GREEN, string);
			    	SendClientMessage(plid, COLOR_GREEN, "Digite /aceitar para aceitar e digite /recusar para recusar!");
					PropriedadeContrato[plid] = propriedade;
                   	invitestatus[plid] = INVITE_CONTRATO;
                   	SetTimerEx("Cancelar",60000,0,"d",plid);
                  	return 1;
				}
			}
            case 16 :
			{
				if(Profissao[plid] != PESCADOR){
			       	SendClientMessage(playerid, COLOR_GRAY, "Esse jogador não está com a profissão adequada para essa propriedade!");
		         	SendClientMessage(playerid, COLOR_GRAY, "Sinto muito, não podemos aceita-lo!");
		           	return 1;
				}
				else if(Profissao[plid] == PESCADOR){
			    	SendClientMessage(playerid, COLOR_GREEN, "A oferta foi dada à esse jogador!");
			    	SendClientMessage(plid, COLOR_GREEN, string);
			    	SendClientMessage(plid, COLOR_GREEN, "Digite /aceitar para aceitar e digite /recusar para recusar!");
					PropriedadeContrato[plid] = propriedade;
                   	invitestatus[plid] = INVITE_CONTRATO;
                	SetTimerEx("Cancelar",60000,0,"d",plid);
                	return 1;
				}
			}
		}
	}
	return 1;
}
stock Demitir(playerid,plid,propriedade){
    if(propriedade < 0 || propriedade > MAX_PROPERTIE_ID){
    	SendClientMessage(playerid, COLOR_GRAY, "Propriedade inválida! Use /propriedades para ver as propriedades disponíveis.");
		return 1;
	}
	if(!IsPlayerConnected(plid)){
	    SendClientMessage(playerid, COLOR_GRAY, "Jogador não conectado/logado.");
	    return 1;
	}
	if(!JogadorContratado(plid,propriedade)){
	    SendClientMessage(playerid, COLOR_GRAY, "Você está tentando demitir um jogador que nem contratou!");
	    return 1;
	}
	if(!DonoDaPropriedade(playerid,propriedade) && !SocioDaPropriedade(playerid,propriedade)){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não é dono nem sócio dessa propriedade!");
	    return 1;
	}
	if(plid == playerid){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não pode demitir você mesmo!");
	    return 1;
	}
	else{
	    SendClientMessage(playerid, COLOR_GREEN, "Jogador demitido!");
		new string[256];
        SendClientMessage(plid, COLOR_GRAY, "DEMITIDO!!!");
		format(string,sizeof(string),"[PROPRIEDADES] %s da propriedade %s foi demitido pelo patrão.",PlayerName(playerid),NomesPropriedades[propriedade]);
		SendClientMessageToAll(COLOR_GRAY, string);
		DemitirJogador(plid,propriedade);
		return 1;
	}
}
stock VenderPropriedade(playerid,propriedade){
    if(propriedade < 0 || propriedade > MAX_PROPERTIE_ID){
    	SendClientMessage(playerid, COLOR_GRAY, "Propriedade inválida! Use /propriedades para ver as propriedades disponíveis.");
		return 1;
	}
	if(!DonoDaPropriedade(playerid,propriedade)){
		SendClientMessage(playerid, COLOR_GRAY, "Você não é o dono dessa propriedade!");
		return 1;
	}
	else{
	    new string[256];
		new str[256];
	    format(string,sizeof(string),"%s vendeu a propriedade %s por $%d",PlayerName(playerid),NomesPropriedades[propriedade],ValoresPropriedades[propriedade]/2);
	    SendClientMessageToAll(COLOR_WHITE, string);
	    format(string,sizeof(string),"[PROPRIEDADES] Os negócios de %s talvez não estivessem indo bem",PlayerName(playerid),NomesPropriedades[propriedade],ValoresPropriedades[propriedade]/2);
		SendClientMessageToAll(COLOR_TRANSPORTE_DE_VALORES, string);
		format(string,sizeof(string),"[PROPRIEDADES] ele optou pela venda da sua empresa %s e receberá do seguro $%d.",NomesPropriedades[propriedade],ValoresPropriedades[propriedade]/2);
		SendClientMessageToAll(COLOR_TRANSPORTE_DE_VALORES, string);
	    SendClientMessage(playerid, COLOR_GREEN, "Propriedade vendida!");
	    AddPlayerMoney(playerid,ValoresPropriedades[propriedade]/2,4);
	    set(str,PropertieFile(propriedade));
	    if(!fexist(str)) return 0;
	    new p=propriedade;
	    set(propStats[p][Dono1],"NONE");
		set(propStats[p][Dono2],"NONE");
		set(propStats[p][Trabalhador1],"NONE");
		set(propStats[p][Trabalhador2],"NONE");
		set(propStats[p][Trabalhador3],"NONE");
		set(propStats[p][Trabalhador4],"NONE");
		set(propStats[p][Trabalhador5],"NONE");
		set(propStats[p][Trabalhador6],"NONE");
		set(propStats[p][Trabalhador7],"NONE");
		set(propStats[p][Socio1],"NONE");
		set(propStats[p][Socio2],"NONE");
		set(propStats[p][Socio3],"NONE");
		propStats[p][Lucro] = 0;
		propStats[p][Prejuizo] = 0;
		propStats[p][Investimento] = 0;
		propStats[p][SemanaPassada] = 0;
		propStats[p][SemanaRetrasada] = 0;
  		return 1;
	}
}
stock AnunciarProcurados(){
	new string[256], qtprocurados = 0;
	SendClientMessageToAll(COLOR_WHITE, "New Paper's Life - Procurados pela polícia");
	for(new i = 0; i < SLOTS2; i++){
		if(pStats[i][Wanted] > 0){
			qtprocurados++;
			format(string,sizeof(string),"Nome: %s - Nível de procurado: %d",PlayerName(i),GetPlayerWantedLevel(i));
			SendClientMessageToAll(COLOR_LIXEIRO, string);
		}
	}
	if(qtprocurados == 0){
		SendClientMessageToAll(COLOR_GRAY, "Nenhum jogador procurado pela polícia.");
	}
	else{
		format(string,sizeof(string),"Total de procurados: %d",qtprocurados);
		SendClientMessageToAll(COLOR_LIXEIRO, string);
		SendClientMessageToAll(COLOR_WHITE, "Se você encontrar algum desses criminosos, denuncie, digite /190 [denuncia]");
	}
	return 1;
}
stock IsPlayerInVehicleAir(playerid){
	if(!IsPlayerInAnyVehicle(playerid)) return false;
	new model = GetVehicleModel(GetPlayerVehicleID(playerid));
	if(model == 417 || model == 425 || model == 447 || model == 460 || model == 464 || model == 465 || model == 469 || model == 476 || model == 487 || model == 488 || model == 497 || model == 501 || model == 511 || model == 512 || model == 513 || model == 519 || model == 520 || model == 539 || model == 548 || model == 553 || model == 563 || model == 577 || model == 592 || model == 593) return true;
	return false;
}
stock IsPlayerInBoat(playerid){
	if(!IsPlayerInAnyVehicle(playerid)) return false;
	new model = GetVehicleModel(GetPlayerVehicleID(playerid));
	if(model == 430 || model == 446 || model == 452 || model == 453 || model == 454 || model == 472 || model == 473 || model == 484 || model == 493 || model == 595) return true;
	return false;
}
stock IsPlayerInTruck(playerid){
    if(!IsPlayerInAnyVehicle(playerid)) return false;
	new model = GetVehicleModel(GetPlayerVehicleID(playerid));
	if(model == 515 || model == 414) return true;
	return false;
}
stock IsPlayerInBike(playerid){
    if(!IsPlayerInAnyVehicle(playerid)) return false;
	new model = GetVehicleModel(GetPlayerVehicleID(playerid));
	if(model == 448 || model == 461 || model == 462 || model == 463 || model == 468 || model == 521 || model == 522 || model == 523 || model == 581 || model == 586) return true;
	return false;
}
stock GetQtVehicles(playerid){
	new name[30],qtveh;
	GetPlayerName(playerid,name,30);
	for(new v = 0; v < MAX_VEHICLES; v++){
	    if(!fexist(VehicleFile(v))) break;
		if(compare(vStats[v][VDono],name)){
		    qtveh++;
		}
	}
	return qtveh;
}
public Filmando(playerid){
    if(IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 488 && GetPlayerState(playerid) != PLAYER_STATE_DRIVER && CameraAtiva[playerid] == 1){
		new Float:x,Float:y,Float:z;
		GetPlayerPos(playerid,x,y,z);
		SetPlayerCameraPos(playerid,x,y,z);
		Filmagem[playerid][0]=x;
		Filmagem[playerid][1]=y;
		Filmagem[playerid][2]=z-2.0;
		if(Zoom[playerid] == 1){
			GetXYInFrontOfPlayer(playerid,x,y,30.0);
			Filmagem[playerid][3]=x;
			Filmagem[playerid][4]=y;
			Filmagem[playerid][5]=z-30.0;
			GameTextForPlayer(playerid,"~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~r~Visao nº1",1000,4);
		}
		else if(Zoom[playerid] == 2){
		    GetXYInFrontOfPlayer(playerid,x,y,1.0);
			Filmagem[playerid][3]=x;
			Filmagem[playerid][4]=y;
			Filmagem[playerid][5]=z-1.0;
			GameTextForPlayer(playerid,"~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~r~Visao nº2",1000,4);
		}
		else if(Zoom[playerid] == 3){
			Filmagem[playerid][3]=x;
			Filmagem[playerid][4]=y;
			Filmagem[playerid][5]=z-50.0;
			GameTextForPlayer(playerid,"~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~r~Visao nº3",1000,4);
		}
		else if(Zoom[playerid] == 4){
		    GetXYInFrontOfPlayer(playerid,x,y,3.0);
			Filmagem[playerid][3]=x;
			Filmagem[playerid][4]=y;
			Filmagem[playerid][5]=z-13.0;
			GameTextForPlayer(playerid,"~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~r~Visao nº4",1000,4);
		}
		SetPlayerCameraPos(playerid,Filmagem[playerid][0],Filmagem[playerid][1],Filmagem[playerid][2]);
		SetPlayerCameraLookAt(playerid,Filmagem[playerid][3],Filmagem[playerid][4],Filmagem[playerid][5]);
	}
	else{
	    CameraAtiva[playerid] = 0;
	    SetCameraBehindPlayer(playerid);
	    KillTimer(TempoFilmando[playerid]);
	    SendClientMessage(playerid, COLOR_JUIZ, "Camera desativada...");
	}
}
public Filmando2(playerid){
    if(IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 488 && GetPlayerState(playerid) != PLAYER_STATE_DRIVER && CameraAtiva[playerid] == 1){
		AcrescentarExPoints(playerid,1);
		SendClientMessage(playerid, COLOR_JUIZ, "Você recebeu 1 ExPoint pela filmagem, continue...");
	}
	else{
		KillTimer(TempoFilmando2[playerid]);
	}
}
public RastreandoJogador2(playerid,plid){
	if(!IsPlayerConnected(plid) || !IsPlayerConnected(playerid)){
	    RastreandoJogador[playerid] = 0;
	    PedidoRastreador2[plid] = 0;
		JogadorRastreamento[plid] = -1;
		DisablePlayerCheckpoint(playerid);
		KillTimer(TempoRastreamento[playerid]);
		return 1;
	}
	DisablePlayerCheckpoint(playerid);
	new Float:posx,Float:posy,Float:posz;
	GetPlayerPos(plid,posx,posy,posz);
	SetPlayerCheckpoint(playerid,posx,posy,posz,2.0);
	KillTimer(TempoRastreamento[playerid]);
	TempoRastreamento[playerid] = SetTimerEx("RastreandoJogador2",5000,0,"dd",playerid,plid);
	return 1;
}
stock DesligarRastreador(playerid){
    RastreandoJogador[playerid] = 0;
    DisablePlayerCheckpoint(playerid);
	KillTimer(TempoRastreamento[playerid]);
	SendClientMessage(playerid, COLOR_LIXEIRO, "Rastreador desativado!");
}
stock RastrearCasa(playerid){
	if(pStats[playerid][Casa] == 0) {
		SendClientMessage(playerid, COLOR_GRAY, "Você não tem casa!");
		return 1;
	}
	MissaoLixeiro[playerid] = 0;
  	EntregadePizza[playerid] = 0;
  	ColocandoDrogas[playerid] = 0;
  	DrogasNoCaminhao[playerid] = 0;
   	PegandoDrogas[playerid] = 0;
    GPSLigado[playerid] = 0;
   	DisablePlayerCheckpoint(playerid);
   	SetPlayerCheckpoint(playerid,pStats[playerid][SpawnPosX],pStats[playerid][SpawnPosY],pStats[playerid][SpawnPosZ],5.0);
	CheckpointStatus[playerid] = CASAJOGADOR;
	return 1;
}
stock LocarMinhaCasa(playerid,dias,valor){
   	if(pStats[playerid][Casa] == 0){
	   	SendClientMessage(playerid, COLOR_GRAY, "Você não possui nenhuma casa!");
	    return 1;
	}
	else{
	    DiasSelecionados[playerid] = 0;
	    SendClientMessage(playerid, COLOR_GREEN, "Sua casa agora poderá ser alugada!");
		new str[256];
		format(str,sizeof(str),"%s colocou sua casa para aluguel por %d dias pelo valor de $%d",PlayerName(playerid),dias,valor);
		SendClientMessageToAll(COLOR_WHITE, str);
		SendClientMessageToAll(COLOR_WHITE, "Para alugar a casa do jogador digite /alugarcasa [id]");
		pStats[playerid][LocandoCasa] = 1;
		pStats[playerid][DiasAluguel] = dias;
		pStats[playerid][ValorAluguel] = valor;
		return 1;
	}
}
stock CancelarAluguelCasa(playerid){
    if(pStats[playerid][Casa] == 0){
    	SendClientMessage(playerid, COLOR_GRAY, "Você não possui nenhuma casa!");
	    return 1;
	}
	if(pStats[playerid][LocandoCasa] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não colocou nenhuma casa em aluguel!");
	    return 1;
	}
	else{
	    new string[256];
	    format(string,sizeof(string),"%s tirou sua casa de aluguel",PlayerName(playerid));
	    SendClientMessageToAll(COLOR_WHITE, string);
	    pStats[playerid][LocandoCasa] = 0;
	    pStats[playerid][DiasAluguel] = 0;
		return 1;
	}
}
stock VenderMinhaCasa(playerid){
    if(pStats[playerid][Casa] == 0){
    	SendClientMessage(playerid, COLOR_GRAY, "Você não possui nenhuma casa!");
	    return 1;
	}
	if(pStats[playerid][VendendoCasa] == 1){
	   	SendClientMessage(playerid, COLOR_GRAY, "Você já colocou sua casa à venda!");
	    return 1;
	}
	else{
	    new Float:x = pckStats[pStats[playerid][PickupCasa]][pX],
	        Float:y = pckStats[pStats[playerid][PickupCasa]][pY],
	        Float:z = pckStats[pStats[playerid][PickupCasa]][pZ];
        DestroyPickup(pStats[playerid][PickupCasa]);
		CreatePickup(1273,1,x,y,z);
	    SendClientMessage(playerid, COLOR_GREEN, "Sua casa foi colocada à venda! ");
	    SendClientMessage(playerid, COLOR_GREEN, "A corretora Virtual's'House vai tentar vende-la.");
		new str[256];
		format(str,sizeof(str),"A casa de %s foi colocada à venda no valor de $%d",PlayerName(playerid),pStats[playerid][ValorCasa]);
        SendClientMessageToAll(COLOR_CORRETOR, str);
		SendClientMessageToAll(COLOR_CORRETOR, "Visite o imóvel, caso goste, /comprarcasa [id]");
		SendClientMessage(playerid, COLOR_WHITE, "Tome cuidado, se você não tiver seguro não será recompensado!");
		pStats[playerid][VendendoCasa] = 1;
		new randresult = random(19)+1;
		TimerVenda[playerid] = SetTimerEx("SellHouse",60000*randresult,false,"d",playerid);
		return 1;
	}
}
stock CancelarVendaCasa(playerid){
    if(pStats[playerid][Casa] == 0){
		SendClientMessage(playerid, COLOR_GRAY, "Você não possui nenhuma casa!");
	    return 1;
	}
	if(pStats[playerid][VendendoCasa] == 0){
	    SendClientMessage(playerid, COLOR_GRAY, "Você não colocou nenhuma casa à venda!");
	    return 1;
	}
	else{
	    new string[256];
	    format(string,sizeof(string),"%s tirou sua casa de venda",PlayerName(playerid));
	    SendClientMessageToAll(COLOR_CORRETOR, string);
	    pStats[playerid][VendendoCasa] = 0;
	    KillTimer(TimerVenda[playerid]);
		return 1;
	}
}
stock CamuflarJogador(playerid,mins,value){
	if(Camuflado[playerid] == 1) return SendClientMessage(playerid, COLOR_GRAY, "Você já está camuflado!");
	new string[256];
	Camuflado[playerid] = 1;
	SetPlayerColor(playerid,0xFFFFFF00);
	format(string,sizeof(string),"Você foi camuflado por %d minuto(s) e pagou $%d",mins,value);
	SendClientMessage(playerid, COLOR_WHITE, string);
	AddPlayerMoney(playerid,-value,-1);
	AcrescentarLucro(5,value);
	SetTimerEx("FimCamuflagem",mins*60000,0,"d",playerid);
	for(new i; i<SLOTS2; i++){
		ShowPlayerNameTagForPlayer(playerid,i,0);
	}
	return 1;
}
stock GiveWeaponToPlayer(playerid,weaponid){
	if(GetPlayerMoney(playerid) < valorarma[weaponid]) return GameTextForPlayer(playerid,"~r~sem dinheiro!",3000,3);
	new string[256];
	GivePlayerWeapon(playerid,weaponid,armamuni[weaponid]);
	AddPlayerMoney(playerid,-valorarma[weaponid],-1);
	format(string,sizeof(string),"Arma \"%s\" adquirida",weaponname[weaponid]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}
stock PassarDados(antname[],tmp[]){
	if(fexist(antname))
	{
	    fcopy(PlayerFile(antname),PlayerFile(tmp));
	}
	new str[256];
	for(new p = 0; p < MAX_CASAS; p++){
		set(str,PickupFile(p));
		if(fexist(str)){
	    	if(compare(pckStats[p][PickupDono],antname)){
	    	    set(pckStats[p][PickupDono],tmp);
			}
			if(compare(pckStats[p][Chave],antname)){
	    	    set(pckStats[p][Chave],tmp);
			}
		}
	}
	for(new v = 0; v < MAX_VEHICLES; v++){
	    set(str,VehicleFile(v));
		if(fexist(str)){
		   	if(compare(vStats[v][VDono],antname)){
				set(vStats[v][VDono],tmp);
			}
			if(compare(vStats[v][VChave],antname)){
				set(vStats[v][VChave],tmp);
			}
		}
	}
	for(new pr = 0; pr < MAX_PROPERTIES; pr++){
		set(str,PropertieFile(pr));
		if(fexist(str)){
	   		if(compare(propStats[pr][Dono1],antname)){
	    	    set(propStats[pr][Dono1],tmp);
			}
			if(compare(propStats[pr][Dono2],antname)){
	    	    set(propStats[pr][Dono2],tmp);
			}
			if(compare(propStats[pr][Trabalhador1],antname)){
			    set(propStats[pr][Trabalhador1],tmp);
			}
			if(compare(propStats[pr][Trabalhador2],antname)){
			    set(propStats[pr][Trabalhador2],tmp);
			}
			if(compare(propStats[pr][Trabalhador3],antname)){
			    set(propStats[pr][Trabalhador3],tmp);
			}
			if(compare(propStats[pr][Trabalhador4],antname)){
			    set(propStats[pr][Trabalhador4],tmp);
			}
			if(compare(propStats[pr][Trabalhador5],antname)){
			    set(propStats[pr][Trabalhador5],tmp);
			}
			if(compare(propStats[pr][Trabalhador6],antname)){
			    set(propStats[pr][Trabalhador6],tmp);
			}
			if(compare(propStats[pr][Trabalhador7],antname)){
			    set(propStats[pr][Trabalhador7],tmp);
			}
			if(compare(propStats[pr][Socio1],antname)){
			    set(propStats[pr][Socio1],tmp);
			}
			if(compare(propStats[pr][Socio2],antname)){
			    set(propStats[pr][Socio2],tmp);
			}
			if(compare(propStats[pr][Socio3],antname)){
			    set(propStats[pr][Socio3],tmp);
			}
		}
	}
	new gangfile[256],gangname[256];
	set(gangname,GetValue(tmp,"GangueNome"));
	set(gangfile,GangFile(gangname));
	if(fexist(gangfile)){
		if(compare(gStats[GetGangID(gangname)][GangDono],antname)){
			set(gStats[GetGangID(gangname)][GangDono],tmp);
		}
		for(new m = 0; m < gStats[GetGangID(gangname)][GangMembros]; m++){
			if(compare(MembersGang[GetGangID(gangname)][m],antname)){
			    set(MembersGang[GetGangID(gangname)][m],tmp);
			}
		}
	}
}
stock MensagemBasquete(msg[])
{
	new string[256];
	format(string,256,"[BASQUETE] %s",msg);
	for(new basqueteplayers=0; basqueteplayers < SLOTS2; basqueteplayers++){
	    if(NoBasquete[basqueteplayeris] == 1){
			SendClientMessage(basqueteplayers,COLOR_ORANGE,string);
		}
	}
}
stock EntrarBasquete(playerid)
{
    NoBasquete[playerid] = 1;
    new string[256];
    format(string,256,"%s entrou no basquete...",PlayerName(playerid));
	MensagemBasquete(string);
}
stock SairBasquete(playerid)
{
    new string[256];
    format(string,256,"%s saiu do basquete...",PlayerName(playerid));
	MensagemBasquete(string);
	NoBasquete[playerid] = 0;
}
stock PegarBola(playerid)
{
	BasqueteBola = playerid;
    new string[256];
    format(string,256,"%s pegou a bola...",PlayerName(playerid));
	MensagemBasquete(string);
}
stock TirarBola(playerid)
{
    new string[256];
    format(string,256,"%s perdeu a bola...",PlayerName(playerid));
	MensagemBasquete(string);
}
stock PassarBola(playerid)
{
	new Float:x,Float:y,Float:z,rand=random(7);
	GetPlayerPos(playerid,x,y,z);
	if(rand == 0) GetXYInFrontOfPlayer(playerid,x,y,0.2);
	if(rand == 1) GetXYInFrontOfPlayer(playerid,x,y,0.3);
	if(rand == 2) GetXYInFrontOfPlayer(playerid,x,y,0.5);
	if(rand == 3) GetXYInFrontOfPlayer(playerid,x,y,0.7);
	if(rand == 4) GetXYInFrontOfPlayer(playerid,x,y,0.8);
	if(rand == 5) GetXYInFrontOfPlayer(playerid,x,y,1.0);
	if(rand == 6) GetXYInFrontOfPlayer(playerid,x,y,1.2);
	MoveObject(bolabasquete,x,y,z+1.2,4);
}
stock LancarBola(playerid,Float:cestaposx,Float:cestaposy,Float:cestaposz)
{
	new Float:PlayerPos[3],Float:DistancePos[3],TotalDistance,string[256];
	GetPlayerPos(playerid,PlayerPos[0],PlayerPos[1],PlayerPos[2]);
	DistancePos[0] = PlayerPos[0] - cestaposx;
	DistancePos[1] = PlayerPos[1] - cestaposy;
	DistancePos[2] = PlayerPos[2] - cestaposz;
	TotalDistance = floatround(DistancePos[0] * DistancePos[0] + DistancePos[1] * DistancePos[1] + DistancePos[2] * DistancePos[2]);
	new Float:x,Float:y,Float:z,coordxrand,coordyrand,rand;
	x = cestaposx;
	y = cestaposy;
	z = cestaposz;
	if(TotalDistance < 3)
	{
	    MoveObject(bolabasquete,x,y,z+0.2,4);
	}
	else if(TotalDistance < 6)
	{
	    coordxrand = random(2);
	    coordyrand = random(2);
	    r = random(3);
	    if(r == 0){
	    	MoveObject(bolabasquete,x + floatstr(coordxrand),y + floatstr(coordyrand),z+10.4,5);
		}
		if(r == 1){
	    	MoveObject(bolabasquete,x - floatstr(coordxrand),y - floatstr(coordyrand),z+10.4,5);
		}
		if(r == 2){
            MoveObject(bolabasquete,x,y,z+0.6,6);
		}
	}
	else if(TotalDistance < 9)
	{
	    coordxrand = random(4);
	    coordyrand = random(4);
	    r = random(5);
	    if(r == 0 || r == 1){
	    	MoveObject(bolabasquete,x + floatstr(coordxrand),y + floatstr(coordyrand),z+10.7,6);
		}
		if(r == 2 || r == 3){
	    	MoveObject(bolabasquete,x - floatstr(coordxrand),y - floatstr(coordyrand),z+10.7,6);
		}
		if(r == 4){
            MoveObject(bolabasquete,x,y,z+0.6,7);
		}
	}
	else
	{
	    coordxrand = random(6);
	    coordyrand = random(6);
	    r = random(9);
	    if(r == 0 || r == 1 || r == 2 || r == 3){
	    	MoveObject(bolabasquete,x + floatstr(coordxrand),y + floatstr(coordyrand),z+10.7,7);
		}
		if(r == 4 || r == 5 || r == 6 || r == 7){
	    	MoveObject(bolabasquete,x - floatstr(coordxrand),y - floatstr(coordyrand),z+10.7,7);
		}
		if(r == 8){
            MoveObject(bolabasquete,x,y,z+0.9,8);
		}
	}
    format(string,256,"%s lançou a bola...",PlayerName(playerid));
	MensagemBasquete(string);
}
stock RoubarBola(playerid,playerid2)
{
    TirarBola(playerid2);
	PegarBola(playerid);
}
stock Basquete()
{
	new Float:Positions[6],Float:Distance;
	GetObjectPos(bolabasquete,Positions[0],Positions[1],Positions[2]);
	new i=0,pball,rand;
	while(i<SLOTS2){
		GetPlayerPos(i,Positions[3],Positions[4],Positions[5]);
		Distance=floatround(Positions[0]-Positions[3]*Positions[0]-Positions[3]+Positions[1]-Positions[4]*Positions[1]-Positions[4]+Positions[2]-Positions[5]*Positions[2]-Positions[5]);
		if(Distance < 3){
		    if(BasqueteBola==-1){
				PegarBola(i)
				break;
			}
			else{
			    pball=BasqueteBola;
				rand=random(2 + Distance);
				if(rand==0){
				    RoubarBola(i,pball);
				    break;
				}
			}
		}
	}
	SetTimer("Basquete",1200,0);
}

stock IniciarBasquete()
{
	MensagemBasquete("O jogo começou...");
	BasqueteBola=-1;
    SetTimer("Basquete",1200,0);
}

stock GetVehicleName(model)
{
	new vehname[256];
	vehname[0]=0;
	if(model > 399 && model < 612)
	{
	    for(new v = 0; v < sizeof(CarrosVenda); v++)
		{
		    if(CarrosVenda[v][Info_CarID] == model)
			{
				vehname = CarrosVenda[v][Info_CarName];
				break;
			}
		}
	}
	return vehname;
}

stock GetVehiclePrice(model)
{
	if(model > 399 && model < 612)
	{
		for(new v = 0; v < sizeof(CarrosVenda); v++)
		{
		    if(CarrosVenda[v][Info_CarID] == model) return CarrosVenda[v][Info_CarPrice];
		}
	}
	return 0;
}
stock EnviarAnuncio(playerid)
{
      ParteAnuncio[playerid] = 0;
      TempoAnuncio[playerid] = SetTimerEx("EnviandoAnuncio",300,0,"d",playerid);
}
public EnviandoAnuncio(playerid)
{
	new tmp[256] = "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~";
	strcat(tmp,AnuncioMsg[ParteAnuncio[playerid]]);
  	GameTextForPlayer(playerid,tmp,1000,3);
   	ParteAnuncio[playerid]++;
   	KillTimer(TempoAnuncio[playerid]);
    if(ParteAnuncio[playerid] < sizeof(AnuncioMsg))
    {
    	TempoAnuncio[playerid] = SetTimerEx("EnviandoAnuncio",300,0,"d",playerid);
    }
    else
    {
  		ParteAnuncio[playerid] = 0;
    }
}
public Tempo()
{
    new second,minute,hour;
	gettime(hour,minute,second);
	if(hour > 3 && hour < 10){
		new msg[256];
	    for(new i = 0; i < SLOTS2; i++){
			if(IsPlayerConnected(i)){
				SendClientMessage(i, COLOR_COP_SWAT, "[VLR]: O servidor fechou, obrigado por jogar e volte sempre.");
				format(msg,sizeof(msg),"[VLR] Hora Certa: %s:%s:%s",ApplyZero(hour),ApplyZero(minute),ApplyZero(second));
				SendClientMessage(i, COLOR_WHITE, msg);
				Kick(i);
			}
		}
		return 1;
	}
	if(MinutoJogo < 60){
		MinutoJogo++;
	}
	if(MinutoJogo > 59){
		MinutoJogo = 0;
		if(HoraJogo < 23){
			HoraJogo++;
		}
		else if(HoraJogo >= 23){
			HoraJogo = 0;
		}
		SetWorldTime(HoraJogo);
	}
	if(MinutoJogo==1){
		switch(HoraJogo)
 		{
 		case 1: if(ValorDia == 1) ImpostoBanco();
 		case 6: SetWeather(Previsao);
 		case 18: if(ValorDia == 0) CobrarContaLuz();
 		case 14: if(ValorDia == 2) CobrarContaTelefone();
 		case 16:
			{
			    if(ValorDia == 2) PagamentoSeguro();
				if(ValorDia == 6) Inflacao();
			}
 		case 15:
  			{
 		        if(ValorDia == 0) EmpresasCarros();
  		    	if(ValorDia == 6){
					if(MostrouResultado == 0){
 		    	    	PropertiesResult();
 		    	    	MostrouResultado = 1;
 		    	    	SetTimer("ZerarResultadoMostrado",60000,false);
					}
				}
				if(ValorDia != 0 && ValorDia != 2) AnunciarProcurados();
				if(ValorDia == 0 || ValorDia == 5) AnunciarVendas();
				if(ValorDia == 4) SendBankMessage();
				if(ValorDia == 2 || ValorDia == 6) AnunciarAlugueis();
			}
		case 19:
			{
			 	if(ValorDia == 4){
					new rand = random(7);
					if(rand == 3){
						new rand2 = random(3);
					    if(rand2 == 0){
				 			SendClientMessageToAll(COLOR_WHITE, " ");
				 	    	SendClientMessageToAll(COLOR_MOTORISTA_PARTICULAR, "PSIU... ei você aí, os números da loteria saem amanhã, as 19:00, APOSTE e tente a sorte.");
				 			SendClientMessageToAll(COLOR_WHITE, " ");
						}
						if(rand2 == 1){
				 			SendClientMessageToAll(COLOR_WHITE, " ");
				 	    	SendClientMessageToAll(COLOR_MOTORISTA_PARTICULAR, "[LOTÉRICA] Números amanhã as 19:00, venha já e aposte!.");
				 			SendClientMessageToAll(COLOR_WHITE, " ");
						}
						if(rand2 == 2){
				 			SendClientMessageToAll(COLOR_WHITE, " ");
				 	    	SendClientMessageToAll(COLOR_MOTORISTA_PARTICULAR, "Venha LOGO, você só tem 24 horas para apostar na loteria! ESSA É SUA GRANDE CHANCE.");
				 			SendClientMessageToAll(COLOR_WHITE, " ");
						}
			 	    }
				}
				if(ValorDia == 5){
				    LoteriaComeco();
				}
			}
		case 20:
			{
			 	if(ValorDia == 4){
					new rand = random(7);
					if(rand == 3){
						new rand2 = random(3);
						if(rand2 == 0){
				 			SendClientMessageToAll(COLOR_WHITE, " ");
				 	    	SendClientMessageToAll(COLOR_SEGURANÇA, "Vamos tente a sorte nos cavalos, vá na loteria. Sorteio amanhã às 20:00.");
				 			SendClientMessageToAll(COLOR_WHITE, " ");
						}
						if(rand2 == 1){
				 			SendClientMessageToAll(COLOR_WHITE, " ");
				 	    	SendClientMessageToAll(COLOR_SEGURANÇA, "Corrida de cavalos amanhã às 20:00, faça seu palpite.");
				 			SendClientMessageToAll(COLOR_WHITE, " ");
						}
						if(rand2 == 2){
				 			SendClientMessageToAll(COLOR_WHITE, " ");
				 	    	SendClientMessageToAll(COLOR_SEGURANÇA, "Vá já a Loja de Apostas de Cavalos e dê seu lance, você só tem 24 horas.");
				 			SendClientMessageToAll(COLOR_WHITE, " ");
				 		}
			 	    }
				}
				if(ValorDia == 5){
				    ApostasdeCavalos();
				}
			}
   		case 21:
     		{
     		    if(PrevisaoAnunciada == 0){
    				SendClientMessageToAll(COLOR_WHITE,"New Paper's Life, previsão do tempo para amanhã:");
			    	Previsao = random(19);
			    	SendClientMessageToAll(COLOR_GREEN,WeatherName[Previsao]);
			    	weatherprevisao = Previsao;
			    	PrevisaoAnunciada = 1;
			    	SetTimer("ZerarAnuncioPrevisao",60000,false);
			    	if(weatherprevisao == 8 || weatherprevisao == 16){
			    	    SendClientMessageToAll(COLOR_WHITE, "[NOTICIAS] Chuva para os agricultores terem mais fartura APROVEITEM.");
						SendClientMessageToAll(COLOR_WHITE, "[NOTICIAS] Entretanto pessoas poderão gripar. CUIDADO!");
						SendClientMessageToAll(COLOR_WHITE, " ");
			    	}
				}
			}
			case 12:
			{
			    if(ValorDia == 6){
			    	PayHotel();
				}
			}
			case 0:
  			{

				if(SalarioEntregue == 0){
	 				if(ValorDia == 1){
				    	Salario();
				    	PagamentoSegurancas();
				    	for(new i=0; i<SLOTS2; i++){
				    	    if(pStats[i][Vacina] == 1){
				    	        pStats[i][VacinaDuracao]--;
								if(pStats[i][VacinaDuracao] <= 0){
									pStats[i][Vacina] = 0;
									SendClientMessage(i, COLOR_GRAY, "Acabou o efeito de sua vacina contra a Malária, se quiser pode ir no hospital tomar mais uma!");
								}
				    	    }
				    		if(Profissao[i] == ENTREGADOR_PIZZA){
				    	    	if(JogadorContratado(i,0)){
				        			PagarSalarioDoJogador(i,0);
									SendClientMessage(i, GetPlayerColor(i), "A pizzaria pagou seu salário mais o seu aumento!");
								}
							}
							if(Profissao[i] == TAXISTA || Profissao[i] == MOTOTAXI || Profissao[i] == TAXI_AEREO){
					    		if(JogadorContratado(i,1)){
				        			PagarSalarioDoJogador(i,1);
									SendClientMessage(i, GetPlayerColor(i), "A Yellow's'Taxi pagou seu salário mais o seu aumento!");
								}
							}
							if(Profissao[i] == MOTORISTA_PARTICULAR){
				    	    	if(JogadorContratado(i,2)){
				    	    		PagarSalarioDoJogador(i,2);
									SendClientMessage(i, GetPlayerColor(i), "A LuxLimosine pagou seu salário mais o seu aumento!");
								}
							}
							if(Profissao[i] == CORRETOR_SEGUROS){
				    	   	 	if(JogadorContratado(i,3)){
				    	    		PagarSalarioDoJogador(i,3);
									SendClientMessage(i, GetPlayerColor(i), "A corretora de seguros pagou seu salário mais o seu aumento!");
								}
							}
							if(Profissao[i] == SEGURANÇA || Profissao[i] == TRANSPORTE_DE_VALORES){
					    	    if(JogadorContratado(i,4)){
					  		      	PagarSalarioDoJogador(i,4);
									SendClientMessage(i, GetPlayerColor(i), "A SecurityLife pagou seu salário mais o seu aumento!");
								}
							}
							if(Profissao[i] == VENDEDOR_DE_ARMAS){
						        if(JogadorContratado(i,5)){
						        	PagarSalarioDoJogador(i,5);
									SendClientMessage(i, GetPlayerColor(i), "A Ammu-Nation pagou seu salário mais o seu aumento!");
								}
							}
							if(Profissao[i] == PROSTITUTA){
						        if(JogadorContratado(i,6)){
						        	PagarSalarioDoJogador(i,6);
									SendClientMessage(i, GetPlayerColor(i), "A Boate de strip-tease pagou seu salário mais o seu aumento!");
								}
							}
							if(Profissao[i] == FRENTISTA){
						        if(JogadorContratado(i,7)){
						        	PagarSalarioDoJogador(i,7);
									SendClientMessage(i, GetPlayerColor(i), "O Posto pagou seu salário mais o seu aumento!");
								}
							}
							if(Profissao[i] == BARMAN){
					 	       if(JogadorContratado(i,8)){
						        	PagarSalarioDoJogador(i,8);
									SendClientMessage(i, GetPlayerColor(i), "O Bar pagou seu salário mais o seu aumento!");
								}
							}
							if(Profissao[i] == MECANICO){
						        if(JogadorContratado(i,9)){
						        	PagarSalarioDoJogador(i,9);
									SendClientMessage(i, GetPlayerColor(i), "A Pay'n'Spray pagou seu salário mais o seu aumento!");
								}
							}
							if(Profissao[i] == LIXEIRO){
						        if(JogadorContratado(i,10)){
						        	PagarSalarioDoJogador(i,10);
									SendClientMessage(i, GetPlayerColor(i), "O Lixão pagou seu salário mais o seu aumento!");
								}
							}
							if(Profissao[i] == AGRICULTOR){
						        if(JogadorContratado(i,11)){
						        	PagarSalarioDoJogador(i,11);
									SendClientMessage(i, GetPlayerColor(i), "A Fazenda pagou seu salário mais o seu aumento!");
								}
							}
							if(Profissao[i] == VENDEDOR_DE_CARROS){
						        if(JogadorContratado(i,14)){
						        	PagarSalarioDoJogador(i,14);
									SendClientMessage(i, GetPlayerColor(i), "A Concecionária pagou seu salário mais o seu aumento!");
								}
							}
							if(Profissao[i] == CORRETOR){
						        if(JogadorContratado(i,15)){
						        	PagarSalarioDoJogador(i,15);
									SendClientMessage(i, GetPlayerColor(i), "A Corretora de imóveis pagou seu salário mais o seu aumento!");
								}
							}
							if(Profissao[i] == PESCADOR){
						        if(JogadorContratado(i,16)){
						        	PagarSalarioDoJogador(i,16);
									SendClientMessage(i, GetPlayerColor(i), "A Cooperativa de pesca pagou seu salário mais o seu aumento!");
								}
							}
						}
					}
					TirarDiasAluguel();
					SalarioEntregue = 1;
			    	SetTimer("ZerarSalarioEntregue",60000,false);
					MudancaDia();
					new string[256];
					if(DiaJogo < MesesDias[MesJogo]){
	   					DiaJogo++;
	   					if(ValorDia == 0){
							SendClientMessageToAll(COLOR_WHITE, "\"Domingo até que enfim\", dia de ir pra praia curtir o mar, o sol, quem sabe até pescar.");
						}
						else if(ValorDia == 1){
							SendClientMessageToAll(COLOR_WHITE, "Segunda-Feira. É o trabalho vai iniciar, a ressaca de Domingo pode atrapalhar.");
						}
						else if(ValorDia == 2){
							SendClientMessageToAll(COLOR_WHITE, "Terça-Feira mais um dia de trabalho para os grandes trabalhadores de Los Santos.");
						}
						else if(ValorDia == 3){
							SendClientMessageToAll(COLOR_WHITE, "Quarta-Feira dia de um futebolzinho, ir para a boate assistir um strip-tease e... quem sabe? ^^");
						}
						else if(ValorDia == 4){
							SendClientMessageToAll(COLOR_WHITE, "Quinta-Feira dia de ir no restaurante com os amigos se divertir um pouco, claro depois de trabalhar.");
						}
						else if(ValorDia == 5){
							SendClientMessageToAll(COLOR_WHITE, "Sexta-Feira o último dia de trabalho na semana para alguns. Descansar, zoar um pouco, com moderação.");
						}
						else if(ValorDia == 6){
							SendClientMessageToAll(COLOR_WHITE, "Mais um dia se passa em Los Santos, Sábado dia de folga para alguns e trabalho para outros.");
						}
					}
					if(DiaJogo >= MesesDias[MesJogo]){
	   					MesJogo++;
			   			DiaJogo = 1;
						if(MesJogo == 2){
							SendClientMessageToAll(COLOR_WHITE, " ");
							SendClientMessageToAll(COLOR_LIGHT_YELLOW, "|======================== FEVEREIRO ========================|");
							SendClientMessageToAll(COLOR_WHITE, "Chegamos em Fevereiro, mês do Carnaval, \"Olha a cabeleira do Zezé será que ele é será que ele é...\".");
							SendClientMessageToAll(COLOR_WHITE, " ");
						}
	    				else if(MesJogo == 3){
							SendClientMessageToAll(COLOR_WHITE, " ");
							SendClientMessageToAll(COLOR_LIGHT_YELLOW, "|======================== MARÇO ========================|");
							SendClientMessageToAll(COLOR_WHITE, "Março, \"Coelhinho da Páscoa que trazes pra mim? Um ovo, dois ovos...\" Mês da Páscoa em Los Santos, não esqueça de comprar seu ovo.");
							SendClientMessageToAll(COLOR_WHITE, " ");
						}
	    				else if(MesJogo == 4){
							SendClientMessageToAll(COLOR_WHITE, " ");
							SendClientMessageToAll(COLOR_LIGHT_YELLOW, "|======================== ABRIL ========================|");
							SendClientMessageToAll(COLOR_WHITE, "Abril, novo mês em Los Santos, ah... não esqueça 7 de abril, dia Internacional da Saúde, então passe no hospital e se vacine.");
							SendClientMessageToAll(COLOR_WHITE, " ");
						}
	    				else if(MesJogo == 5){
							SendClientMessageToAll(COLOR_WHITE, " ");
							SendClientMessageToAll(COLOR_LIGHT_YELLOW, "|======================== MAIO ========================|");
							SendClientMessageToAll(COLOR_WHITE, "Maio, NOVO Mês, mês da telecomunicação, então não se esqueça, quite sua conta telefônica.");
							SendClientMessageToAll(COLOR_WHITE, " ");
						}
	    				else if(MesJogo == 6){
							SendClientMessageToAll(COLOR_WHITE, " ");
							SendClientMessageToAll(COLOR_LIGHT_YELLOW, "|======================== JUNHO ========================|");
							SendClientMessageToAll(COLOR_WHITE, "Junho, o amor florece no ar..., nesse mês se comemora o Dia dos Namorados, ah não esqueçam de comprar camisinha. ;]");
							SendClientMessageToAll(COLOR_WHITE, " ");
						}
	    				else if(MesJogo == 7){
							SendClientMessageToAll(COLOR_WHITE, " ");
							SendClientMessageToAll(COLOR_LIGHT_YELLOW, "|======================== JULHO ========================|");
							SendClientMessageToAll(COLOR_WHITE, "Julho, novo mês em Los Santos, mas como ninguém estuda, ninguém está de férias. Então.. TRABALHEM! :)");
							SendClientMessageToAll(COLOR_WHITE, " ");
						}
	    				else if(MesJogo == 8){
							SendClientMessageToAll(COLOR_WHITE, " ");
							SendClientMessageToAll(COLOR_LIGHT_YELLOW, "|======================== AGOSTO ========================|");
							SendClientMessageToAll(COLOR_WHITE,  "AAAAgosto, ah... dia 14 de agosto, dia de combate a poluição e não se esqueça, JOGUE O LIXO NO LIXO.");
							SendClientMessageToAll(COLOR_WHITE, " ");
						}
	    				else if(MesJogo == 9){
							SendClientMessageToAll(COLOR_WHITE, " ");
							SendClientMessageToAll(COLOR_LIGHT_YELLOW, "|======================== SETEMEBRO ========================|");
							SendClientMessageToAll(COLOR_WHITE,  "Setembro, mês que se celebra a PAZ, dia 21 de setembro, dia internacional da PAZ. Amar é viver, viver é amar. *-*");
							SendClientMessageToAll(COLOR_WHITE, " ");
						}
	    				else if(MesJogo == 10){
							SendClientMessageToAll(COLOR_WHITE, " ");
							SendClientMessageToAll(COLOR_LIGHT_YELLOW, "|======================== OUTUBRO ========================|");
							SendClientMessageToAll(COLOR_WHITE,  "Outubro, mês em que se celebra o DIA DO MÉDICO, então agradeça o homem que uma vez salvou sua vida.");
							SendClientMessageToAll(COLOR_WHITE,   "E também do servidor público, então aos policiais, e todos que recebem salários do governo, PARABÉNS.");
							SendClientMessageToAll(COLOR_WHITE, " ");
						}
	    				else if(MesJogo == 11){
							SendClientMessageToAll(COLOR_WHITE, " ");
							SendClientMessageToAll(COLOR_LIGHT_YELLOW, "|======================== NOVEMBRO ========================|");
							SendClientMessageToAll(COLOR_WHITE,  "Novembro, mês da proclamação e da criação da Bandeira do Nosso BRASIL |<0>| ! Nada haver com o mode, mais é orgulho nosso ^^.");
							SendClientMessageToAll(COLOR_WHITE, " ");
						}
	    				else if(MesJogo == 12){
							SendClientMessageToAll(COLOR_WHITE, " ");
							SendClientMessageToAll(COLOR_LIGHT_YELLOW, "|======================== DEZEMBRO ========================|");
							SendClientMessageToAll(COLOR_WHITE,  "Dezembro, Mês do amor próximo, da repartição, da luta contra a AIDS, e do NATAL, dia 25 reuna sua família e coma aquele PERU! ^^");
							SendClientMessageToAll(COLOR_WHITE, " ");
						}
						else if(MesJogo == 13){
							AnoJogo++;
							MesJogo = 1;
							DiaJogo = 1;
							SendClientMessageToAll(COLOR_WHITE, " ");
							SendClientMessageToAll(COLOR_LIGHT_YELLOW, "*_*_*_*_*_*_*_*_*_* FELIZ ANO NOVO *_*_*_*_*_*_*_*_*_*");
							format(string,sizeof(string),"Povo de San Andreas, vamos festejar este NOVO ANO!!! %d com muita alegria e dinheiro no BOLSO!",AnoJogo);
							SendClientMessageToAll(COLOR_WHITE, string);
							SendClientMessageToAll(COLOR_WHITE, " ");
							format(string,sizeof(string),"[INFO] Passou mais um ano no gamemode! Novo ano = %d",AnoJogo);
							writelog(string);

						}
					}
				}
			}
		}
	}
	return 1;
}

